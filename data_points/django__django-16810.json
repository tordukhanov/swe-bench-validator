{
  "repo": "django/django",
  "instance_id": "django__django-16810",
  "base_commit": "191f6a9a4586b5e5f79f4f42f190e7ad4bbacc84",
  "patch": "diff --git a/django/middleware/locale.py b/django/middleware/locale.py\n--- a/django/middleware/locale.py\n+++ b/django/middleware/locale.py\n@@ -16,37 +16,28 @@ class LocaleMiddleware(MiddlewareMixin):\n \n     response_redirect_class = HttpResponseRedirect\n \n-    def get_fallback_language(self, request):\n-        \"\"\"\n-        Return the fallback language for the current request based on the\n-        settings. If LANGUAGE_CODE is a variant not included in the supported\n-        languages, get_fallback_language() will try to fallback to a supported\n-        generic variant.\n-\n-        Can be overridden to have a fallback language depending on the request,\n-        e.g. based on top level domain.\n-        \"\"\"\n-        try:\n-            return translation.get_supported_language_variant(settings.LANGUAGE_CODE)\n-        except LookupError:\n-            return settings.LANGUAGE_CODE\n-\n     def process_request(self, request):\n         urlconf = getattr(request, \"urlconf\", settings.ROOT_URLCONF)\n-        i18n_patterns_used, _ = is_language_prefix_patterns_used(urlconf)\n+        (\n+            i18n_patterns_used,\n+            prefixed_default_language,\n+        ) = is_language_prefix_patterns_used(urlconf)\n         language = translation.get_language_from_request(\n             request, check_path=i18n_patterns_used\n         )\n-        if not language:\n-            language = self.get_fallback_language(request)\n-\n+        language_from_path = translation.get_language_from_path(request.path_info)\n+        if (\n+            not language_from_path\n+            and i18n_patterns_used\n+            and not prefixed_default_language\n+        ):\n+            language = settings.LANGUAGE_CODE\n         translation.activate(language)\n         request.LANGUAGE_CODE = translation.get_language()\n \n     def process_response(self, request, response):\n         language = translation.get_language()\n         language_from_path = translation.get_language_from_path(request.path_info)\n-        language_from_request = translation.get_language_from_request(request)\n         urlconf = getattr(request, \"urlconf\", settings.ROOT_URLCONF)\n         (\n             i18n_patterns_used,\n@@ -57,7 +48,7 @@ def process_response(self, request, response):\n             response.status_code == 404\n             and not language_from_path\n             and i18n_patterns_used\n-            and (prefixed_default_language or language_from_request)\n+            and prefixed_default_language\n         ):\n             # Maybe the language code is missing in the URL? Try adding the\n             # language prefix and redirecting to that URL.\ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -23,7 +23,7 @@\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n-from django.utils.translation import get_language, get_supported_language_variant\n+from django.utils.translation import get_language\n \n from .converters import get_converter\n from .exceptions import NoReverseMatch, Resolver404\n@@ -351,8 +351,7 @@ def regex(self):\n     @property\n     def language_prefix(self):\n         language_code = get_language() or settings.LANGUAGE_CODE\n-        default_language = get_supported_language_variant(settings.LANGUAGE_CODE)\n-        if language_code == default_language and not self.prefix_default_language:\n+        if language_code == settings.LANGUAGE_CODE and not self.prefix_default_language:\n             return \"\"\n         else:\n             return \"%s/\" % language_code\ndiff --git a/django/utils/translation/__init__.py b/django/utils/translation/__init__.py\n--- a/django/utils/translation/__init__.py\n+++ b/django/utils/translation/__init__.py\n@@ -17,7 +17,6 @@\n     \"get_language_from_request\",\n     \"get_language_info\",\n     \"get_language_bidi\",\n-    \"get_supported_language_variant\",\n     \"check_for_language\",\n     \"to_language\",\n     \"to_locale\",\ndiff --git a/django/utils/translation/trans_null.py b/django/utils/translation/trans_null.py\n--- a/django/utils/translation/trans_null.py\n+++ b/django/utils/translation/trans_null.py\n@@ -53,7 +53,7 @@ def check_for_language(x):\n \n \n def get_language_from_request(request, check_path=False):\n-    return None\n+    return settings.LANGUAGE_CODE\n \n \n def get_language_from_path(request):\ndiff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -583,7 +583,11 @@ def get_language_from_request(request, check_path=False):\n             return get_supported_language_variant(accept_lang)\n         except LookupError:\n             continue\n-    return None\n+\n+    try:\n+        return get_supported_language_variant(settings.LANGUAGE_CODE)\n+    except LookupError:\n+        return settings.LANGUAGE_CODE\n \n \n @functools.lru_cache(maxsize=1000)\n",
  "test_patch": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -431,6 +431,27 @@ def test_nl_path(self):\n         self.assertEqual(response.context[\"LANGUAGE_CODE\"], \"nl\")\n \n \n+@override_settings(ROOT_URLCONF=\"i18n.urls_default_unprefixed\", LANGUAGE_CODE=\"nl\")\n+class URLPrefixedFalseTranslatedTests(URLTestCaseBase):\n+    def test_translated_path_unprefixed_language_other_than_accepted_header(self):\n+        response = self.client.get(\"/gebruikers/\", headers={\"accept-language\": \"en\"})\n+        self.assertEqual(response.status_code, 200)\n+\n+    def test_translated_path_unprefixed_language_other_than_cookie_language(self):\n+        self.client.cookies.load({settings.LANGUAGE_COOKIE_NAME: \"en\"})\n+        response = self.client.get(\"/gebruikers/\")\n+        self.assertEqual(response.status_code, 200)\n+\n+    def test_translated_path_prefixed_language_other_than_accepted_header(self):\n+        response = self.client.get(\"/en/users/\", headers={\"accept-language\": \"nl\"})\n+        self.assertEqual(response.status_code, 200)\n+\n+    def test_translated_path_prefixed_language_other_than_cookie_language(self):\n+        self.client.cookies.load({settings.LANGUAGE_COOKIE_NAME: \"nl\"})\n+        response = self.client.get(\"/en/users/\")\n+        self.assertEqual(response.status_code, 200)\n+\n+\n class URLRedirectWithScriptAliasTests(URLTestCaseBase):\n     \"\"\"\n     #21579 - LocaleMiddleware should respect the script prefix.\ndiff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1926,22 +1926,8 @@ def test_other_lang_with_prefix(self):\n         response = self.client.get(\"/fr/simple/\")\n         self.assertEqual(response.content, b\"Oui\")\n \n-    def test_unprefixed_language_with_accept_language(self):\n-        \"\"\"'Accept-Language' is respected.\"\"\"\n-        response = self.client.get(\"/simple/\", headers={\"accept-language\": \"fr\"})\n-        self.assertRedirects(response, \"/fr/simple/\")\n-\n-    def test_unprefixed_language_with_cookie_language(self):\n-        \"\"\"A language set in the cookies is respected.\"\"\"\n-        self.client.cookies.load({settings.LANGUAGE_COOKIE_NAME: \"fr\"})\n-        response = self.client.get(\"/simple/\")\n-        self.assertRedirects(response, \"/fr/simple/\")\n-\n-    def test_unprefixed_language_with_non_valid_language(self):\n-        response = self.client.get(\"/simple/\", headers={\"accept-language\": \"fi\"})\n-        self.assertEqual(response.content, b\"Yes\")\n-        self.client.cookies.load({settings.LANGUAGE_COOKIE_NAME: \"fi\"})\n-        response = self.client.get(\"/simple/\")\n+    def test_unprefixed_language_other_than_accept_language(self):\n+        response = self.client.get(\"/simple/\", HTTP_ACCEPT_LANGUAGE=\"fr\")\n         self.assertEqual(response.content, b\"Yes\")\n \n     def test_page_with_dash(self):\n@@ -2017,7 +2003,10 @@ def test_get_language_from_request(self):\n \n     def test_get_language_from_request_null(self):\n         lang = trans_null.get_language_from_request(None)\n-        self.assertEqual(lang, None)\n+        self.assertEqual(lang, \"en\")\n+        with override_settings(LANGUAGE_CODE=\"de\"):\n+            lang = trans_null.get_language_from_request(None)\n+            self.assertEqual(lang, \"de\")\n \n     def test_specific_language_codes(self):\n         # issue 11915\ndiff --git a/tests/i18n/urls_default_unprefixed.py b/tests/i18n/urls_default_unprefixed.py\n--- a/tests/i18n/urls_default_unprefixed.py\n+++ b/tests/i18n/urls_default_unprefixed.py\n@@ -7,5 +7,6 @@\n     re_path(r\"^(?P<arg>[\\w-]+)-page\", lambda request, **arg: HttpResponse(_(\"Yes\"))),\n     path(\"simple/\", lambda r: HttpResponse(_(\"Yes\"))),\n     re_path(r\"^(.+)/(.+)/$\", lambda *args: HttpResponse()),\n+    re_path(_(r\"^users/$\"), lambda *args: HttpResponse(), name=\"users\"),\n     prefix_default_language=False,\n )\n",
  "problem_statement": "Translatable URL patterns raise 404 for non-English default language when prefix_default_language=False is used.\nDescription\n\t\nA simple django project with instruction to replicate the bug can be found here:\n​github repo\nIn brief: prefix_default_language = False raises HTTP 404 for the default unprefixed pages if LANGUAGE_CODE is not \"en\".\nI think the problem is that the function get_language_from_path in django/utils/translation/trans_real.py returns None in case of failure instead of LANGUAGE_CODE: ​diff in 4.2\nConsequently, other mechanisms are used to get the language (cookies or headers) that do not work neither.\nRelated issue with my last comment adding some extra context: https://code.djangoproject.com/ticket/34455\nIt is the first time I contribute to django, I hope the bug report is OK. I am also willing to write the patch and test if required.\n",
  "hints_text": "Expected behavior: ​django 4.2 documentation LocaleMiddleware tries to determine the user’s language preference by following this algorithm: First, it looks for the language prefix in the requested URL. This is only performed when you are using the i18n_patterns function in your root URLconf. See Internationalization: in URL patterns for more information about the language prefix and how to internationalize URL patterns. Failing that, it looks for a cookie. The name of the cookie used is set by the LANGUAGE_COOKIE_NAME setting. (The default name is django_language.) Failing that, it looks at the Accept-Language HTTP header. This header is sent by your browser and tells the server which language(s) you prefer, in order by priority. Django tries each language in the header until it finds one with available translations. Failing that, it uses the global LANGUAGE_CODE setting.\nThanks for the report. The use of URL patterns marked as translatable is crucial for this bug. Regression in 94e7f471c4edef845a4fe5e3160132997b4cca81. Reproduced at c24cd6575f948661fa0ed8b27b79098610dc3ccc.\nReplying to ab: Expected behavior: ​django 4.2 documentation LocaleMiddleware tries to determine the user’s language preference by following this algorithm: First, it looks for the language prefix in the requested URL. This is only performed when you are using the i18n_patterns function in your root URLconf. See Internationalization: in URL patterns for more information about the language prefix and how to internationalize URL patterns. Failing that, it looks for a cookie. The name of the cookie used is set by the LANGUAGE_COOKIE_NAME setting. (The default name is django_language.) Failing that, it looks at the Accept-Language HTTP header. This header is sent by your browser and tells the server which language(s) you prefer, in order by priority. Django tries each language in the header until it finds one with available translations. Failing that, it uses the global LANGUAGE_CODE setting. IMO it still works that way. However, in Django 4.2 get_language_from_request() returns the language from a request (en for me) which is activated and the default path about/ is no longer translated to the a-propos/. This is definitely a change from the previous behavior.\nReplying to Mariusz Felisiak: IMO it still works that way. However, in Django 4.2 get_language_from_request() returns the language from a request (en for me) which is activated and the default path about/ is no longer translated to the a-propos/. This is definitely a change from the previous behavior. Thank you Mariusz for the quick reaction. I agree it still globally works that way, nevertheless, in the case I describe, when django looks for the language prefix in the requested URL and there is not language prefix, I would expect django to return \"fr\", not to go to the next steps of the algorithm. Because I want prefix_default_language = False to take precedence on cookies or headers. Does it make sense? I need to add that I use translate_url to ​build the links in my templates. Consequently, my URLs are translated in the template only (hence the 404). So you're right about the default path not being translated anymore.\nI have a PR with what I think the issue is, but not confident ​https://github.com/django/django/pull/16797 @ab I think what you're saying makes sense\nI agree it still globally works that way, nevertheless, in the case I describe, when django looks for the language prefix in the requested URL and there is not language prefix, I would expect django to return \"fr\", not to go to the next steps of the algorithm. Because I want prefix_default_language = False to take precedence on cookies or headers. Does it make sense? My 2¢: Is ignoring the process for determining the language the least surprising choice here though? It all depends on whether no-prefix URL should refer to a user setting or the site's default language. I mean imho navigating to a prefix-less URL I might expect it to show the language I chose 🤷‍♂️\n@Sarah: yes, it is the same problem. After investigating the code, the change in behavior is linked to the fact that get_language_from_path returns None when the url is not prefixed. So, the cookie is used or the Accept-Language header sent by the browser. In my case, I think it is the HTTP header. @David: thanks for your contribution, but I do not fully agree. If prefix_default_url is True, the language is correctly detected by django based on the URL. If I set prefix_default_url to False I expect the same behavior for the default language without prefix. When I decide do use i18n_patterns at least (I have just added this tag to the ticket). When i18n_patternsis not used, I agree with you. So the problem might come from i18n_patterns not calling/handling correctly the calls to the new get_language_* functions.\n@sarah: I'll test your patch because your edits might solve the problem with HTTP headers too. Thanks!\nJust to keep track of the current work on this issue, there is a discussion about how django should behave here: ​https://github.com/django/django/pull/16797#issuecomment-1524958085 As suggested by Sarah, I'll post to django-developers for a wider range of opinions.\n​Django forum discussion.",
  "created_at": "2023-04-28T06:55:00Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_get_language_from_request_null (i18n.tests.CountrySpecificLanguageTests.test_get_language_from_request_null)\", \"test_translated_path_unprefixed_language_other_than_accepted_header (i18n.patterns.tests.URLPrefixedFalseTranslatedTests.test_translated_path_unprefixed_language_other_than_accepted_header)\", \"test_translated_path_unprefixed_language_other_than_cookie_language (i18n.patterns.tests.URLPrefixedFalseTranslatedTests.test_translated_path_unprefixed_language_other_than_cookie_language)\", \"test_unprefixed_language_other_than_accept_language (i18n.tests.UnprefixedDefaultLanguageTests.test_unprefixed_language_other_than_accept_language)\"]",
  "PASS_TO_PASS": "[\"OSError is raised if the default language is unparseable.\", \"test_round_away_from_one (i18n.tests.UtilsTests.test_round_away_from_one)\", \"test_ignores_non_mo_files (i18n.tests.TranslationFileChangedTests.test_ignores_non_mo_files)\", \"test_resets_cache_with_mo_files (i18n.tests.TranslationFileChangedTests.test_resets_cache_with_mo_files)\", \"test_lazy (i18n.tests.TestModels.test_lazy)\", \"test_safestr (i18n.tests.TestModels.test_safestr)\", \"get_language_info return the first fallback language info if the lang_info\", \"test_localized_language_info (i18n.tests.TestLanguageInfo.test_localized_language_info)\", \"test_unknown_language_code (i18n.tests.TestLanguageInfo.test_unknown_language_code)\", \"test_unknown_language_code_and_country_code (i18n.tests.TestLanguageInfo.test_unknown_language_code_and_country_code)\", \"test_unknown_only_country_code (i18n.tests.TestLanguageInfo.test_unknown_only_country_code)\", \"test_django_fallback (i18n.tests.DjangoFallbackResolutionOrderI18NTests.test_django_fallback)\", \"test_i18n_app_dirs (i18n.tests.WatchForTranslationChangesTests.test_i18n_app_dirs)\", \"test_i18n_app_dirs_ignore_django_apps (i18n.tests.WatchForTranslationChangesTests.test_i18n_app_dirs_ignore_django_apps)\", \"test_i18n_disabled (i18n.tests.WatchForTranslationChangesTests.test_i18n_disabled)\", \"test_i18n_enabled (i18n.tests.WatchForTranslationChangesTests.test_i18n_enabled)\", \"test_i18n_local_locale (i18n.tests.WatchForTranslationChangesTests.test_i18n_local_locale)\", \"test_i18n_locale_paths (i18n.tests.WatchForTranslationChangesTests.test_i18n_locale_paths)\", \"test_bug14894_translation_activate_thread_safety (i18n.tests.TranslationThreadSafetyTests.test_bug14894_translation_activate_thread_safety)\", \"test_check_for_language (i18n.tests.CountrySpecificLanguageTests.test_check_for_language)\", \"test_check_for_language_null (i18n.tests.CountrySpecificLanguageTests.test_check_for_language_null)\", \"test_get_language_from_request (i18n.tests.CountrySpecificLanguageTests.test_get_language_from_request)\", \"test_specific_language_codes (i18n.tests.CountrySpecificLanguageTests.test_specific_language_codes)\", \"test_check_for_language (i18n.tests.NonDjangoLanguageTests.test_check_for_language)\", \"test_non_django_language (i18n.tests.NonDjangoLanguageTests.test_non_django_language)\", \"test_plural_non_django_language (i18n.tests.NonDjangoLanguageTests.test_plural_non_django_language)\", \"Untranslated strings for territorial language variants use the\", \"test_app_translation (i18n.tests.AppResolutionOrderI18NTests.test_app_translation)\", \"test_streaming_response (i18n.tests.LocaleMiddlewareTests.test_streaming_response)\", \"test_translated_path_prefixed_language_other_than_accepted_header (i18n.patterns.tests.URLPrefixedFalseTranslatedTests.test_translated_path_prefixed_language_other_than_accepted_header)\", \"test_translated_path_prefixed_language_other_than_cookie_language (i18n.patterns.tests.URLPrefixedFalseTranslatedTests.test_translated_path_prefixed_language_other_than_cookie_language)\", \"\\\"loading_app\\\" does not have translations for all languages provided by\", \"test_locale_paths_override_app_translation (i18n.tests.LocalePathsResolutionOrderI18NTests.test_locale_paths_override_app_translation)\", \"test_locale_paths_translation (i18n.tests.LocalePathsResolutionOrderI18NTests.test_locale_paths_translation)\", \"test_prefixed_i18n_disabled (i18n.patterns.tests.URLDisabledTests.test_prefixed_i18n_disabled)\", \"After setting LANGUAGE, the cache should be cleared and languages\", \"With a non-English LANGUAGE_CODE and if the active language is English\", \"test_get_language_from_path_null (i18n.tests.MiscTests.test_get_language_from_path_null)\", \"test_get_language_from_path_real (i18n.tests.MiscTests.test_get_language_from_path_real)\", \"test_get_supported_language_variant_null (i18n.tests.MiscTests.test_get_supported_language_variant_null)\", \"test_get_supported_language_variant_real (i18n.tests.MiscTests.test_get_supported_language_variant_real)\", \"test_i18n_patterns_returns_list (i18n.tests.MiscTests.test_i18n_patterns_returns_list)\", \"test_parse_language_cookie (i18n.tests.MiscTests.test_parse_language_cookie)\", \"test_parse_literal_http_header (i18n.tests.MiscTests.test_parse_literal_http_header)\", \"Testing HTTP header parsing. First, we test that we can parse the\", \"Some languages may have special fallbacks that don't follow the simple\", \"Subsequent language codes should be used when the language code is not\", \"Some browsers (Firefox, IE, etc.) use deprecated language codes. As these\", \"test_default_lang_fallback_without_prefix (i18n.tests.UnprefixedDefaultLanguageTests.test_default_lang_fallback_without_prefix)\", \"With i18n_patterns(..., prefix_default_language=False), the default\", \"A request for a nonexistent URL shouldn't cause a redirect to\", \"test_other_lang_with_prefix (i18n.tests.UnprefixedDefaultLanguageTests.test_other_lang_with_prefix)\", \"test_page_with_dash (i18n.tests.UnprefixedDefaultLanguageTests.test_page_with_dash)\", \"test_no_lang_activate (i18n.patterns.tests.PathUnusedTests.test_no_lang_activate)\", \"test_request_urlconf_considered (i18n.patterns.tests.RequestURLConfTests.test_request_urlconf_considered)\", \"The redirect to a prefixed URL depends on 'Accept-Language' and\", \"test_no_prefix_response (i18n.patterns.tests.URLVaryAcceptLanguageTests.test_no_prefix_response)\", \"test_en_redirect (i18n.patterns.tests.URLRedirectWithoutTrailingSlashTests.test_en_redirect)\", \"test_not_prefixed_redirect (i18n.patterns.tests.URLRedirectWithoutTrailingSlashTests.test_not_prefixed_redirect)\", \"test_account_register (i18n.patterns.tests.URLNamespaceTests.test_account_register)\", \"Empty value must stay empty after being translated (#23196).\", \"test_language_bidi (i18n.tests.TranslationTests.test_language_bidi)\", \"test_language_bidi_null (i18n.tests.TranslationTests.test_language_bidi_null)\", \"Format string interpolation should work with *_lazy objects.\", \"test_lazy_pickle (i18n.tests.TranslationTests.test_lazy_pickle)\", \"Translations on files with Mac or DOS end of lines will be converted\", \"Normally, French has 2 plurals. As other/locale/fr/LC_MESSAGES/django.po\", \"test_ngettext_lazy (i18n.tests.TranslationTests.test_ngettext_lazy)\", \"test_ngettext_lazy_bool (i18n.tests.TranslationTests.test_ngettext_lazy_bool)\", \"test_ngettext_lazy_format_style (i18n.tests.TranslationTests.test_ngettext_lazy_format_style)\", \"test_ngettext_lazy_pickle (i18n.tests.TranslationTests.test_ngettext_lazy_pickle)\", \"test_override (i18n.tests.TranslationTests.test_override)\", \"test_override_decorator (i18n.tests.TranslationTests.test_override_decorator)\", \"The language restored is the one used when the function was\", \"test_pgettext (i18n.tests.TranslationTests.test_pgettext)\", \"Test plurals with ngettext. French differs from English in that 0 is singular.\", \"test_plural_null (i18n.tests.TranslationTests.test_plural_null)\", \"Translating a string requiring no auto-escaping with gettext or pgettext\", \"test_to_language (i18n.tests.TranslationTests.test_to_language)\", \"test_to_locale (i18n.tests.TranslationTests.test_to_locale)\", \"test_language_prefix_with_script_prefix (i18n.patterns.tests.URLRedirectWithScriptAliasTests.test_language_prefix_with_script_prefix)\", \"test_en_redirect (i18n.patterns.tests.URLRedirectWithoutTrailingSlashSettingTests.test_en_redirect)\", \"test_not_prefixed_redirect (i18n.patterns.tests.URLRedirectWithoutTrailingSlashSettingTests.test_not_prefixed_redirect)\", \"test_locale_not_interepreted_as_regex (i18n.patterns.tests.URLTranslationTests.test_locale_not_interepreted_as_regex)\", \"test_no_prefix_translated (i18n.patterns.tests.URLTranslationTests.test_no_prefix_translated)\", \"test_reverse_translated_with_captured_kwargs (i18n.patterns.tests.URLTranslationTests.test_reverse_translated_with_captured_kwargs)\", \"test_translate_url_utility (i18n.patterns.tests.URLTranslationTests.test_translate_url_utility)\", \"test_users_url (i18n.patterns.tests.URLTranslationTests.test_users_url)\", \"test_invalid_prefix_use (i18n.patterns.tests.URLPrefixTests.test_invalid_prefix_use)\", \"test_not_prefixed (i18n.patterns.tests.URLPrefixTests.test_not_prefixed)\", \"test_prefixed (i18n.patterns.tests.URLPrefixTests.test_prefixed)\", \"test_args (i18n.patterns.tests.URLTagTests.test_args)\", \"test_context (i18n.patterns.tests.URLTagTests.test_context)\", \"test_kwargs (i18n.patterns.tests.URLTagTests.test_kwargs)\", \"test_strings_only (i18n.patterns.tests.URLTagTests.test_strings_only)\", \"test_custom_redirect_class (i18n.patterns.tests.URLRedirectTests.test_custom_redirect_class)\", \"test_en_redirect (i18n.patterns.tests.URLRedirectTests.test_en_redirect)\", \"test_en_redirect_wrong_url (i18n.patterns.tests.URLRedirectTests.test_en_redirect_wrong_url)\", \"test_nl_redirect (i18n.patterns.tests.URLRedirectTests.test_nl_redirect)\", \"test_nl_redirect_wrong_url (i18n.patterns.tests.URLRedirectTests.test_nl_redirect_wrong_url)\", \"test_no_prefix_response (i18n.patterns.tests.URLRedirectTests.test_no_prefix_response)\", \"test_pl_pl_redirect (i18n.patterns.tests.URLRedirectTests.test_pl_pl_redirect)\", \"test_pt_br_redirect (i18n.patterns.tests.URLRedirectTests.test_pt_br_redirect)\", \"test_en_path (i18n.patterns.tests.URLResponseTests.test_en_path)\", \"test_en_url (i18n.patterns.tests.URLResponseTests.test_en_url)\", \"test_nl_path (i18n.patterns.tests.URLResponseTests.test_nl_path)\", \"test_nl_url (i18n.patterns.tests.URLResponseTests.test_nl_url)\", \"test_not_prefixed_with_prefix (i18n.patterns.tests.URLResponseTests.test_not_prefixed_with_prefix)\", \"test_pt_br_url (i18n.patterns.tests.URLResponseTests.test_pt_br_url)\", \"test_wrong_en_prefix (i18n.patterns.tests.URLResponseTests.test_wrong_en_prefix)\", \"test_wrong_nl_prefix (i18n.patterns.tests.URLResponseTests.test_wrong_nl_prefix)\", \"The first input format for DATE_INPUT_FORMATS, TIME_INPUT_FORMATS, and\", \"test_all_format_strings (i18n.tests.FormattingTests.test_all_format_strings)\", \"The active locale's formats take precedence over the default settings\", \"test_format_arbitrary_settings (i18n.tests.FormattingTests.test_format_arbitrary_settings)\", \"test_get_custom_format (i18n.tests.FormattingTests.test_get_custom_format)\", \"test_get_format_lazy_format (i18n.tests.FormattingTests.test_get_format_lazy_format)\", \"test_get_format_modules_lang (i18n.tests.FormattingTests.test_get_format_modules_lang)\", \"Tests the iter_format_modules function.\", \"Tests the iter_format_modules function always yields format modules in\", \"test_l10n_enabled (i18n.tests.FormattingTests.test_l10n_enabled)\", \"Localization of numbers\", \"Test the {% localize %} templatetag and the localize/unlocalize filters.\", \"Form input with 'as_hidden' or 'as_text' is correctly localized.\", \"Tests if form input is correctly localized\", \"test_localized_input_func (i18n.tests.FormattingTests.test_localized_input_func)\", \"A string representation is returned for unlocalized numbers.\", \"Tests django.utils.formats.sanitize_separators.\", \"test_sanitize_strftime_format (i18n.tests.FormattingTests.test_sanitize_strftime_format)\", \"test_sanitize_strftime_format_with_escaped_percent (i18n.tests.FormattingTests.test_sanitize_strftime_format_with_escaped_percent)\", \"Check if sublocales fall back to the main locale\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.772125",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}