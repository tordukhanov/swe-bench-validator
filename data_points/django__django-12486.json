{
  "repo": "django/django",
  "instance_id": "django__django-12486",
  "base_commit": "667f784baab31f11d2469e5d22bbdc2390dbc030",
  "patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -26,6 +26,9 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n         return mark_safe(number)\n     # sign\n     sign = ''\n+    # Treat potentially very large/small floats as Decimals.\n+    if isinstance(number, float) and 'e' in str(number).lower():\n+        number = Decimal(str(number))\n     if isinstance(number, Decimal):\n \n         if decimal_pos is not None:\n",
  "test_patch": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -55,10 +55,30 @@ def test_large_number(self):\n         self.assertEqual(nformat(-2 * int_max, '.'), most_max2.format('-'))\n \n     def test_float_numbers(self):\n-        # A float without a fractional part (3.) results in a \".0\" when no\n-        # decimal_pos is given. Contrast that with the Decimal('3.') case in\n-        # test_decimal_numbers which doesn't return a fractional part.\n-        self.assertEqual(nformat(3., '.'), '3.0')\n+        tests = [\n+            (9e-10, 10, '0.0000000009'),\n+            (9e-19, 2, '0.00'),\n+            (.00000000000099, 0, '0'),\n+            (.00000000000099, 13, '0.0000000000009'),\n+            (1e16, None, '10000000000000000'),\n+            (1e16, 2, '10000000000000000.00'),\n+            # A float without a fractional part (3.) results in a \".0\" when no\n+            # decimal_pos is given. Contrast that with the Decimal('3.') case\n+            # in test_decimal_numbers which doesn't return a fractional part.\n+            (3., None, '3.0'),\n+        ]\n+        for value, decimal_pos, expected_value in tests:\n+            with self.subTest(value=value, decimal_pos=decimal_pos):\n+                self.assertEqual(nformat(value, '.', decimal_pos), expected_value)\n+        # Thousand grouping behavior.\n+        self.assertEqual(\n+            nformat(1e16, '.', thousand_sep=',', grouping=3, force_grouping=True),\n+            '10,000,000,000,000,000',\n+        )\n+        self.assertEqual(\n+            nformat(1e16, '.', decimal_pos=2, thousand_sep=',', grouping=3, force_grouping=True),\n+            '10,000,000,000,000,000.00',\n+        )\n \n     def test_decimal_numbers(self):\n         self.assertEqual(nformat(Decimal('1234'), '.'), '1234')\n",
  "problem_statement": "numberformat.format() incorrectly formats large/tiny floats in scientific notation\nDescription\n\t \n\t\t(last modified by Tim Graham)\n\t \nFor floats with values larger than 1e16 or smaller than 1e-5, their string representation uses scientific notation in Python, which causes numberformat.format to return an erroneous output.\n>>> from django.utils.numberformat import format\n>>> format(0.0000000000000000009, '.', 2)\n'9e-19.00'\n>>> format(1e16, '.', 2, thousand_sep=',', grouping=3, force_grouping=True)\n'1e,+16.00'\nThis is similar to #23935 but that was only fixed for Decimal types.\n",
  "hints_text": "â€‹PR (with a few comments for improvement)\nIn b94d99af: Refs #28280 -- Added more tests for utils.numberformat.format().",
  "created_at": "2020-02-23T13:42:26Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_float_numbers (utils_tests.test_numberformat.TestNumberFormat)\"]",
  "PASS_TO_PASS": "[\"test_decimal_numbers (utils_tests.test_numberformat.TestNumberFormat)\", \"test_decimal_subclass (utils_tests.test_numberformat.TestNumberFormat)\", \"test_format_number (utils_tests.test_numberformat.TestNumberFormat)\", \"test_format_string (utils_tests.test_numberformat.TestNumberFormat)\", \"test_large_number (utils_tests.test_numberformat.TestNumberFormat)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.627419",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}