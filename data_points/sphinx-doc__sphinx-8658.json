{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8658",
  "base_commit": "40f2c832ff3ce2d908b0d8bace3e1f6698eed712",
  "patch": "diff --git a/sphinx/ext/napoleon/__init__.py b/sphinx/ext/napoleon/__init__.py\n--- a/sphinx/ext/napoleon/__init__.py\n+++ b/sphinx/ext/napoleon/__init__.py\n@@ -253,10 +253,15 @@ def __unicode__(self):\n           * To create a custom \"generic\" section, just pass a string.\n           * To create an alias for an existing section, pass a tuple containing the\n             alias name and the original, in that order.\n+          * To create a custom section that displays like the parameters or returns\n+            section, pass a tuple containing the custom section name and a string\n+            value, \"params_style\" or \"returns_style\".\n \n         If an entry is just a string, it is interpreted as a header for a generic\n         section. If the entry is a tuple/list/indexed container, the first entry\n-        is the name of the section, the second is the section key to emulate.\n+        is the name of the section, the second is the section key to emulate. If the\n+        second entry value is \"params_style\" or \"returns_style\", the custom section\n+        will be displayed like the parameters section or returns section.\n \n     napoleon_attr_annotations : :obj:`bool` (Defaults to True)\n         Use the type annotations of class attributes that are documented in the docstring\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -549,11 +549,18 @@ def _load_custom_sections(self) -> None:\n                     self._sections[entry.lower()] = self._parse_custom_generic_section\n                 else:\n                     # otherwise, assume entry is container;\n-                    # [0] is new section, [1] is the section to alias.\n-                    # in the case of key mismatch, just handle as generic section.\n-                    self._sections[entry[0].lower()] = \\\n-                        self._sections.get(entry[1].lower(),\n-                                           self._parse_custom_generic_section)\n+                    if entry[1] == \"params_style\":\n+                        self._sections[entry[0].lower()] = \\\n+                            self._parse_custom_params_style_section\n+                    elif entry[1] == \"returns_style\":\n+                        self._sections[entry[0].lower()] = \\\n+                            self._parse_custom_returns_style_section\n+                    else:\n+                        # [0] is new section, [1] is the section to alias.\n+                        # in the case of key mismatch, just handle as generic section.\n+                        self._sections[entry[0].lower()] = \\\n+                            self._sections.get(entry[1].lower(),\n+                                               self._parse_custom_generic_section)\n \n     def _parse(self) -> None:\n         self._parsed_lines = self._consume_empty()\n@@ -641,6 +648,13 @@ def _parse_custom_generic_section(self, section: str) -> List[str]:\n         # for now, no admonition for simple custom sections\n         return self._parse_generic_section(section, False)\n \n+    def _parse_custom_params_style_section(self, section: str) -> List[str]:\n+        return self._format_fields(section, self._consume_fields())\n+\n+    def _parse_custom_returns_style_section(self, section: str) -> List[str]:\n+        fields = self._consume_returns_section()\n+        return self._format_fields(section, fields)\n+\n     def _parse_usage_section(self, section: str) -> List[str]:\n         header = ['.. rubric:: Usage:', '']\n         block = ['.. code-block:: python', '']\n",
  "test_patch": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1072,10 +1072,27 @@ def test_custom_generic_sections(self):\n Sooper Warning:\n     Stop hitting yourself!\n \"\"\", \"\"\":Warns: **Stop hitting yourself!**\n+\"\"\"),\n+                      (\"\"\"\\\n+Params Style:\n+    arg1 (int): Description of arg1\n+    arg2 (str): Description of arg2\n+\n+\"\"\", \"\"\"\\\n+:Params Style: * **arg1** (*int*) -- Description of arg1\n+               * **arg2** (*str*) -- Description of arg2\n+\"\"\"),\n+                      (\"\"\"\\\n+Returns Style:\n+    description of custom section\n+\n+\"\"\", \"\"\":Returns Style: description of custom section\n \"\"\"))\n \n         testConfig = Config(napoleon_custom_sections=['Really Important Details',\n-                                                      ('Sooper Warning', 'warns')])\n+                                                      ('Sooper Warning', 'warns'),\n+                                                      ('Params Style', 'params_style'),\n+                                                      ('Returns Style', 'returns_style')])\n \n         for docstring, expected in docstrings:\n             actual = str(GoogleDocstring(docstring, testConfig))\n",
  "problem_statement": "Napoleon: more custom docstring section styles\nAlthough the `napoleon_custom_sections` option help renders custom docstring section, the style is inconsistent with the rest of the doc.\r\n\r\nFor example, I have a custom docstring section `Side Effect`. I would like it to be displayed as `returns` or `parameters` docstring section. However, `napoleon_custom_sections` option rendesr `Side Effect` in a different style shown in the following picture.\r\n\r\n![微信截图_20201221155650](https://user-images.githubusercontent.com/24267981/102821833-c9d86900-43a5-11eb-9102-777c7ff3e478.png)\r\n\r\n\r\nIt will be really helpful if we can customize the custom sections a bit more. The following setting has a similar effect, but it renders the Parameters name instead of the custom name.\r\n```\r\nnapoleon_use_param = False\r\nnapoleon_custom_sections = [('Custom name', 'Parameters')]\r\n```\r\nI would like to do something like the following so that my Custom section has the same style as the Parameter section, and it still keeps my custom name:\r\n\r\n```\r\n\r\nnapoleon_custom_sections = [(\"Side Effects\", \"display_like_parameters\"), ...]\r\n\r\n```\r\n\r\nor\r\n\r\n```\r\nnapoleon_custom_sections = [(\"Side Effects\", \"Parameters\") ]\r\nnapoleon_custom_section_rename = False # True is default for backwards compatibility.\r\n```\r\nThe following link includes more details about the solutions:\r\n[Format custom \"Side Effects\" docstring section in-toto/in-toto#401](https://github.com/in-toto/in-toto/issues/401)\r\n\r\nOthers people have expressed a similar desire (see sphinx-contrib/napoleon#2)\r\n\r\nIf you are interested, I would like to provide a PR for this. Thanks!\r\n\r\n\r\n\n",
  "hints_text": "Boy, I could really use this right away.  If it were up to me:\r\n\r\n* `napoleon_custom_sections` would be called `napoleon_custom_aliases`, and only accept a list of `(new alias, existing section)` tuples.\r\n* A hypothetical new `napoleon_custom_sections` would only accept a list of `(new section, existing section)` or `(new section, callback function)` tuples, and the output would always use `new section` as the title, in either case.\r\n\r\nThat would be a backwards-incompatible change, but you could argue that the current behavior isn’t actually documented in the Sphinx docs, and thus is fair game.\r\n\r\nCheers,\r\nTim\nI also don't know napoleon module has such option. It was added at #4387. It has not been documented, but it was introduced in CHANGES. So I consider it's a secret feature. So -1 for incompatible change.\r\n\r\nBut I'm interested in the enhancement itself. Could you submit a PR please? I'll take a look.\r\n",
  "created_at": "2021-01-05T21:26:21Z",
  "version": "3.5",
  "FAIL_TO_PASS": "[\"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_custom_generic_sections\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_napoleon_docstring.py::NamedtupleSubclassTest::test_attributes_docstring\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline_no_type\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline_ref_in_type\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_attributes_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_code_block_in_returns_section\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_colon_in_return_type\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_docstrings\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_keywords_with_types\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_kwargs_in_arguments\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_list_in_parameter_description\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_noindex\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_parameters_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_pep526_annotations\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_raises_types\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_section_header_formatting\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_sphinx_admonitions\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_xrefs_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_colon_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_convert_numpy_type_spec\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_docstrings\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_list_in_parameter_description\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_multiple_parameters\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameter_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameters_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameters_without_class_reference\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_raises_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_recombine_set_tokens\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_recombine_set_tokens_invalid\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_return_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_section_header_underline_length\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_see_also_refs\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_sphinx_admonitions\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_token_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_tokenize_type_spec\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_type_preprocessor\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_underscore_in_attribute\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_underscore_in_attribute_strip_signature_backslash\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_xrefs_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_yield_types\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[x,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*args,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*x,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_pep526_annotations\"]",
  "environment_setup_commit": "4f8cb861e3b29186b38248fe81e4944fd987fcce",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.058845",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}