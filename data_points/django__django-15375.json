{
  "repo": "django/django",
  "instance_id": "django__django-15375",
  "base_commit": "beb7ddbcee03270e833b2f74927ccfc8027aa693",
  "patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -65,7 +65,9 @@ def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize\n         if hasattr(default, 'resolve_expression'):\n             default = default.resolve_expression(query, allow_joins, reuse, summarize)\n         c.default = None  # Reset the default argument before wrapping.\n-        return Coalesce(c, default, output_field=c._output_field_or_none)\n+        coalesce = Coalesce(c, default, output_field=c._output_field_or_none)\n+        coalesce.is_summary = c.is_summary\n+        return coalesce\n \n     @property\n     def default_alias(self):\n",
  "test_patch": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,6 +1630,18 @@ def test_aggregation_default_passed_another_aggregate(self):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n+    def test_aggregation_default_after_annotation(self):\n+        result = Publisher.objects.annotate(\n+            double_num_awards=F('num_awards') * 2,\n+        ).aggregate(value=Sum('double_num_awards', default=0))\n+        self.assertEqual(result['value'], 40)\n+\n+    def test_aggregation_default_not_in_aggregate(self):\n+        result = Publisher.objects.annotate(\n+            avg_rating=Avg('book__rating', default=2.5),\n+        ).aggregate(Sum('num_awards'))\n+        self.assertEqual(result['num_awards__sum'], 20)\n+\n     def test_exists_none_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n",
  "problem_statement": "aggregate() with 'default' after annotate() crashes.\nDescription\n\t\nI saw this on a PostgreSQL project and reproduced it with SQLite. Django 4.0.1.\nAnnotate (anything) then aggregate works fine:\n$ ./manage.py shell\nPython 3.10.2 (main, Jan 21 2022, 19:45:54) [Clang 13.0.0 (clang-1300.0.29.30)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.30.1 -- An enhanced Interactive Python. Type '?' for help.\nIn [1]: from django.db.models import *\nIn [2]: from django.db.models.functions import *\nIn [3]: from example.core.models import *\nIn [4]: Book.objects.count()\nOut[4]: 95\nIn [5]: Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\"))\nOut[5]: {'id__sum': 4560}\nBut add the aggregate classes‚Äô default argument (new in 4.0), and it breaks:\nIn [6]: Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n---------------------------------------------------------------------------\nOperationalError\t\t\t\t\t\t Traceback (most recent call last)\n...\nOperationalError: near \"FROM\": syntax error\nThe generated SQL:\nIn [7]: %debug\n> /.../django/db/backends/sqlite3/base.py(416)execute()\n\t414\t\t\t return Database.Cursor.execute(self, query)\n\t415\t\t query = self.convert_query(query)\n--> 416\t\t return Database.Cursor.execute(self, query, params)\n\t417\n\t418\t def executemany(self, query, param_list):\nipdb> query\n'SELECT FROM (SELECT \"core_book\".\"id\" AS \"idx\", COALESCE(SUM(\"core_book\".\"id\"), ?) AS \"id__sum\" FROM \"core_book\") subquery'\nipdb> params\n(0,)\nipdb>\nThe ‚Äúlong form‚Äù using Coalesce works:\nIn [8]: Book.objects.annotate(idx=F(\"id\")).aggregate(x=Coalesce(Sum(\"id\"), 0))\nOut[8]: {'x': 4560}\n",
  "hints_text": "Thanks for the report! Would you like to prepare a patch? If not, you can assign it me as 4.0.2 will be issued on Tuesday.\nI have had a quick look but I got a bit lost. Aggregate.default generates a Coalesce internally so it seems a little lower level. If you have the capacity that would be appreciated.\nReplying to Adam Johnson: If you have the capacity that would be appreciated. Always, that's my job üòâ\nJust to note - the title isn't quite accurate. The crash happens whether or not the aggregate uses the annotated field.\nThis issue should be fixed by: django/db/models/aggregates.py diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py index 8c4eae7906..e4c81547c1 100644 a b class Aggregate(Func): 6565 if hasattr(default, 'resolve_expression'): 6666 default = default.resolve_expression(query, allow_joins, reuse, summarize) 6767 c.default = None # Reset the default argument before wrapping. 68 return Coalesce(c, default, output_field=c._output_field_or_none) 68 coalesce = Coalesce(c, default, output_field=c._output_field_or_none) 69 coalesce.is_summary = True 70 return coalesce 6971 7072 @property 7173 def default_alias(self): I will prepare a proper patch in the evening.\nI can confirm that change fixes my test project.\nThanks to both of you!",
  "created_at": "2022-01-28T14:48:03Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_aggregation_default_after_annotation (aggregation.tests.AggregateTestCase)\"]",
  "PASS_TO_PASS": "[\"test_add_implementation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_alias (aggregation.tests.AggregateTestCase)\", \"test_aggregate_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_in_order_by (aggregation.tests.AggregateTestCase)\", \"test_aggregate_join_transform (aggregation.tests.AggregateTestCase)\", \"test_aggregate_multi_join (aggregation.tests.AggregateTestCase)\", \"test_aggregate_over_aggregate (aggregation.tests.AggregateTestCase)\", \"test_aggregate_over_complex_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_transform (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_compound_expression (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_expression (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_group_by (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_integer (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_not_in_aggregate (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_passed_another_aggregate (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_unset (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_unsupported_by_count (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_date_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_date_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_datetime_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_datetime_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_decimal_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_decimal_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_duration_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_duration_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_time_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_time_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_zero (aggregation.tests.AggregateTestCase)\", \"test_aggregation_exists_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregation_expressions (aggregation.tests.AggregateTestCase)\", \"test_aggregation_nested_subquery_outerref (aggregation.tests.AggregateTestCase)\", \"test_aggregation_order_by_not_selected_annotation_values (aggregation.tests.AggregateTestCase)\", \"Random() is not included in the GROUP BY when used for ordering.\", \"Subquery annotations are excluded from the GROUP BY if they are\", \"test_aggregation_subquery_annotation_exists (aggregation.tests.AggregateTestCase)\", \"Subquery annotations must be included in the GROUP BY if they use\", \"test_aggregation_subquery_annotation_related_field (aggregation.tests.AggregateTestCase)\", \"Subquery annotations and external aliases are excluded from the GROUP\", \"test_aggregation_subquery_annotation_values_collision (aggregation.tests.AggregateTestCase)\", \"test_annotate_basic (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer_select_related (aggregation.tests.AggregateTestCase)\", \"test_annotate_m2m (aggregation.tests.AggregateTestCase)\", \"test_annotate_ordering (aggregation.tests.AggregateTestCase)\", \"test_annotate_over_annotate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_list (aggregation.tests.AggregateTestCase)\", \"test_annotated_aggregate_over_annotated_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotation (aggregation.tests.AggregateTestCase)\", \"test_annotation_expressions (aggregation.tests.AggregateTestCase)\", \"test_arguments_must_be_expressions (aggregation.tests.AggregateTestCase)\", \"test_avg_decimal_field (aggregation.tests.AggregateTestCase)\", \"test_avg_duration_field (aggregation.tests.AggregateTestCase)\", \"test_backwards_m2m_annotate (aggregation.tests.AggregateTestCase)\", \"test_coalesced_empty_result_set (aggregation.tests.AggregateTestCase)\", \"test_combine_different_types (aggregation.tests.AggregateTestCase)\", \"test_complex_aggregations_require_kwarg (aggregation.tests.AggregateTestCase)\", \"test_complex_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_count (aggregation.tests.AggregateTestCase)\", \"test_count_distinct_expression (aggregation.tests.AggregateTestCase)\", \"test_count_star (aggregation.tests.AggregateTestCase)\", \".dates() returns a distinct set of dates when applied to a\", \"test_decimal_max_digits_has_no_effect (aggregation.tests.AggregateTestCase)\", \"test_distinct_on_aggregate (aggregation.tests.AggregateTestCase)\", \"test_empty_aggregate (aggregation.tests.AggregateTestCase)\", \"test_empty_result_optimization (aggregation.tests.AggregateTestCase)\", \"test_even_more_aggregate (aggregation.tests.AggregateTestCase)\", \"test_exists_extra_where_with_aggregate (aggregation.tests.AggregateTestCase)\", \"test_exists_none_with_aggregate (aggregation.tests.AggregateTestCase)\", \"test_expression_on_aggregation (aggregation.tests.AggregateTestCase)\", \"test_filter_aggregate (aggregation.tests.AggregateTestCase)\", \"Filtering against an aggregate requires the usage of the HAVING clause.\", \"test_filtering (aggregation.tests.AggregateTestCase)\", \"test_fkey_aggregate (aggregation.tests.AggregateTestCase)\", \"Exists annotations are included in the GROUP BY if they are\", \"Subquery annotations are included in the GROUP BY if they are\", \"An annotation included in values() before an aggregate should be\", \"test_more_aggregation (aggregation.tests.AggregateTestCase)\", \"test_multi_arg_aggregate (aggregation.tests.AggregateTestCase)\", \"test_multiple_aggregates (aggregation.tests.AggregateTestCase)\", \"An annotation not included in values() before an aggregate should be\", \"test_nonaggregate_aggregation_throws (aggregation.tests.AggregateTestCase)\", \"test_nonfield_annotation (aggregation.tests.AggregateTestCase)\", \"test_order_of_precedence (aggregation.tests.AggregateTestCase)\", \"test_related_aggregate (aggregation.tests.AggregateTestCase)\", \"test_reverse_fkey_annotate (aggregation.tests.AggregateTestCase)\", \"test_single_aggregate (aggregation.tests.AggregateTestCase)\", \"Sum on a distinct() QuerySet should aggregate only the distinct items.\", \"test_sum_duration_field (aggregation.tests.AggregateTestCase)\", \"Subqueries do not needlessly contain ORDER BY, SELECT FOR UPDATE or\", \"Aggregation over sliced queryset works correctly.\", \"Doing exclude() on a foreign model after annotate() doesn't crash.\", \"test_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_values_annotation_with_expression (aggregation.tests.AggregateTestCase)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.727088",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}