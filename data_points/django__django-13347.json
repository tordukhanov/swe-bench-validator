{
  "repo": "django/django",
  "instance_id": "django__django-13347",
  "base_commit": "b9be11d44265308863e4e8cfb458cd3605091452",
  "patch": "diff --git a/django/views/debug.py b/django/views/debug.py\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -91,18 +91,19 @@ def cleanse_setting(self, key, value):\n         value is a dictionary, recursively cleanse the keys in that dictionary.\n         \"\"\"\n         try:\n-            if self.hidden_settings.search(key):\n-                cleansed = self.cleansed_substitute\n-            elif isinstance(value, dict):\n-                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n-            elif isinstance(value, list):\n-                cleansed = [self.cleanse_setting('', v) for v in value]\n-            elif isinstance(value, tuple):\n-                cleansed = tuple([self.cleanse_setting('', v) for v in value])\n-            else:\n-                cleansed = value\n+            is_sensitive = self.hidden_settings.search(key)\n         except TypeError:\n-            # If the key isn't regex-able, just return as-is.\n+            is_sensitive = False\n+\n+        if is_sensitive:\n+            cleansed = self.cleansed_substitute\n+        elif isinstance(value, dict):\n+            cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+        elif isinstance(value, list):\n+            cleansed = [self.cleanse_setting('', v) for v in value]\n+        elif isinstance(value, tuple):\n+            cleansed = tuple([self.cleanse_setting('', v) for v in value])\n+        else:\n             cleansed = value\n \n         if callable(cleansed):\n",
  "test_patch": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1274,6 +1274,19 @@ def test_cleanse_setting_recurses_in_dictionary(self):\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n+    def test_cleanse_setting_recurses_in_dictionary_with_non_string_key(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {('localhost', 8000): {'login': 'cooper', 'password': 'secret'}}\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            {\n+                ('localhost', 8000): {\n+                    'login': 'cooper',\n+                    'password': reporter_filter.cleansed_substitute,\n+                },\n+            },\n+        )\n+\n     def test_cleanse_setting_recurses_in_list_tuples(self):\n         reporter_filter = SafeExceptionReporterFilter()\n         initial = [\n",
  "problem_statement": "SafeExceptionReporterFilter does not recurse into dictionaries with non-string keys\nDescription\n\t\nSafeExceptionReporterFilter has provisions for recursively cleaning settings by descending into lists / tuples / dictionaries - which is great! However, recursing on dictionaries only works if the keys of the dictionary are strings.\nFor instance it will fail to sanitize the following example:\nSOME_SETTING = {1: {'login': 'cooper', 'password': 'secret'}}\nThe reason for this is that cleanse_setting starts by trying to apply a the hidden_settings regex to the key before attempting to recurse into the value:\nâ€‹https://github.com/django/django/blob/0b0658111cba538b91072b9a133fd5545f3f46d1/django/views/debug.py#L94\n",
  "hints_text": "",
  "created_at": "2020-08-25T13:01:21Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_cleanse_setting_recurses_in_dictionary_with_non_string_key (view_tests.tests.test_debug.ExceptionReporterFilterTests)\"]",
  "PASS_TO_PASS": "[\"test_sensitive_post_parameters_not_called (view_tests.tests.test_debug.DecoratorsTests)\", \"test_sensitive_variables_not_called (view_tests.tests.test_debug.DecoratorsTests)\", \"test_repr (view_tests.tests.test_debug.CallableSettingWrapperTests)\", \"test_cleansed_substitute_override (view_tests.tests.test_debug.CustomExceptionReporterFilterTests)\", \"test_hidden_settings_override (view_tests.tests.test_debug.CustomExceptionReporterFilterTests)\", \"test_setting_allows_custom_subclass (view_tests.tests.test_debug.CustomExceptionReporterFilterTests)\", \"test_handle_db_exception (view_tests.tests.test_debug.DebugViewQueriesAllowedTests)\", \"An exception report can be generated even for a disallowed host.\", \"test_message_only (view_tests.tests.test_debug.PlainTextReportTests)\", \"An exception report can be generated for just a request\", \"An exception report can be generated without request\", \"A simple exception report can be generated\", \"A message can be provided in addition to a request\", \"test_request_with_items_key (view_tests.tests.test_debug.PlainTextReportTests)\", \"test_template_exception (view_tests.tests.test_debug.PlainTextReportTests)\", \"test_400 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_403 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_404 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_template_not_found_error (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_custom_exception_reporter_filter (view_tests.tests.test_debug.NonHTMLResponseExceptionReporterFilter)\", \"test_non_html_response_encoding (view_tests.tests.test_debug.NonHTMLResponseExceptionReporterFilter)\", \"test_non_sensitive_request (view_tests.tests.test_debug.NonHTMLResponseExceptionReporterFilter)\", \"test_paranoid_request (view_tests.tests.test_debug.NonHTMLResponseExceptionReporterFilter)\", \"test_sensitive_request (view_tests.tests.test_debug.NonHTMLResponseExceptionReporterFilter)\", \"test_400 (view_tests.tests.test_debug.DebugViewTests)\", \"test_403 (view_tests.tests.test_debug.DebugViewTests)\", \"test_403_template (view_tests.tests.test_debug.DebugViewTests)\", \"test_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_404_empty_path_not_in_urls (view_tests.tests.test_debug.DebugViewTests)\", \"test_404_not_in_urls (view_tests.tests.test_debug.DebugViewTests)\", \"test_classbased_technical_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_default_urlconf_template (view_tests.tests.test_debug.DebugViewTests)\", \"test_exception_reporter_from_request (view_tests.tests.test_debug.DebugViewTests)\", \"test_exception_reporter_from_settings (view_tests.tests.test_debug.DebugViewTests)\", \"test_files (view_tests.tests.test_debug.DebugViewTests)\", \"test_no_template_source_loaders (view_tests.tests.test_debug.DebugViewTests)\", \"test_non_l10ned_numeric_ids (view_tests.tests.test_debug.DebugViewTests)\", \"test_regression_21530 (view_tests.tests.test_debug.DebugViewTests)\", \"test_technical_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_technical_404_converter_raise_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_template_encoding (view_tests.tests.test_debug.DebugViewTests)\", \"test_template_exceptions (view_tests.tests.test_debug.DebugViewTests)\", \"Tests for not existing file\", \"test_encoding_error (view_tests.tests.test_debug.ExceptionReporterTests)\", \"The ExceptionReporter supports Unix, Windows and Macintosh EOL markers\", \"test_exception_fetching_user (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_ignore_traceback_evaluation_exceptions (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Safe strings in local variables are escaped.\", \"test_message_only (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Non-UTF-8 exceptions/values should not make the output generation choke.\", \"test_reporting_frames_for_cyclic_reference (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_frames_source_not_match (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_frames_without_source (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_of_nested_exceptions (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_request_with_items_key (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_suppressed_context (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_template_encoding (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Large values should not create a large HTML.\", \"test_unfrozen_importlib (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Unprintable values should not make the output generation choke.\", \"test_callable_settings (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_callable_settings_forbidding_to_set_attributes (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_cleanse_setting_basic (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_cleanse_setting_ignore_case (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_cleanse_setting_recurses_in_dictionary (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_cleanse_setting_recurses_in_list_tuples (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_custom_exception_reporter_filter (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_dict_setting_with_non_str_key (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_exception_report_uses_meta_filtering (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_multivalue_dict_key_error (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_non_sensitive_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_paranoid_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_request_meta_filtering (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_function_arguments (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_function_keyword_arguments (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_method (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_settings (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_settings_with_sensitive_keys (view_tests.tests.test_debug.ExceptionReporterFilterTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.654887",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}