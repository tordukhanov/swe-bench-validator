{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-25638",
  "base_commit": "6adb209acd63825affc884abcd85381f148fb1b0",
  "patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -155,14 +155,25 @@ def is_multilabel(y):\n     if hasattr(y, \"__array__\") or isinstance(y, Sequence) or is_array_api:\n         # DeprecationWarning will be replaced by ValueError, see NEP 34\n         # https://numpy.org/neps/nep-0034-infer-dtype-is-object.html\n+        check_y_kwargs = dict(\n+            accept_sparse=True,\n+            allow_nd=True,\n+            force_all_finite=False,\n+            ensure_2d=False,\n+            ensure_min_samples=0,\n+            ensure_min_features=0,\n+        )\n         with warnings.catch_warnings():\n             warnings.simplefilter(\"error\", np.VisibleDeprecationWarning)\n             try:\n-                y = xp.asarray(y)\n-            except (np.VisibleDeprecationWarning, ValueError):\n+                y = check_array(y, dtype=None, **check_y_kwargs)\n+            except (np.VisibleDeprecationWarning, ValueError) as e:\n+                if str(e).startswith(\"Complex data not supported\"):\n+                    raise\n+\n                 # dtype=object should be provided explicitly for ragged arrays,\n                 # see NEP 34\n-                y = xp.asarray(y, dtype=object)\n+                y = check_array(y, dtype=object, **check_y_kwargs)\n \n     if not (hasattr(y, \"shape\") and y.ndim == 2 and y.shape[1] > 1):\n         return False\n@@ -302,15 +313,27 @@ def type_of_target(y, input_name=\"\"):\n     # https://numpy.org/neps/nep-0034-infer-dtype-is-object.html\n     # We therefore catch both deprecation (NumPy < 1.24) warning and\n     # value error (NumPy >= 1.24).\n+    check_y_kwargs = dict(\n+        accept_sparse=True,\n+        allow_nd=True,\n+        force_all_finite=False,\n+        ensure_2d=False,\n+        ensure_min_samples=0,\n+        ensure_min_features=0,\n+    )\n+\n     with warnings.catch_warnings():\n         warnings.simplefilter(\"error\", np.VisibleDeprecationWarning)\n         if not issparse(y):\n             try:\n-                y = xp.asarray(y)\n-            except (np.VisibleDeprecationWarning, ValueError):\n+                y = check_array(y, dtype=None, **check_y_kwargs)\n+            except (np.VisibleDeprecationWarning, ValueError) as e:\n+                if str(e).startswith(\"Complex data not supported\"):\n+                    raise\n+\n                 # dtype=object should be provided explicitly for ragged arrays,\n                 # see NEP 34\n-                y = xp.asarray(y, dtype=object)\n+                y = check_array(y, dtype=object, **check_y_kwargs)\n \n     # The old sequence of sequences format\n     try:\n",
  "test_patch": "diff --git a/sklearn/metrics/tests/test_classification.py b/sklearn/metrics/tests/test_classification.py\n--- a/sklearn/metrics/tests/test_classification.py\n+++ b/sklearn/metrics/tests/test_classification.py\n@@ -1079,6 +1079,24 @@ def test_confusion_matrix_dtype():\n     assert cm[1, 1] == -2\n \n \n+@pytest.mark.parametrize(\"dtype\", [\"Int64\", \"Float64\", \"boolean\"])\n+def test_confusion_matrix_pandas_nullable(dtype):\n+    \"\"\"Checks that confusion_matrix works with pandas nullable dtypes.\n+\n+    Non-regression test for gh-25635.\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    y_ndarray = np.array([1, 0, 0, 1, 0, 1, 1, 0, 1])\n+    y_true = pd.Series(y_ndarray, dtype=dtype)\n+    y_predicted = pd.Series([0, 0, 1, 1, 0, 1, 1, 1, 1], dtype=\"int64\")\n+\n+    output = confusion_matrix(y_true, y_predicted)\n+    expected_output = confusion_matrix(y_ndarray, y_predicted)\n+\n+    assert_array_equal(output, expected_output)\n+\n+\n def test_classification_report_multiclass():\n     # Test performance report\n     iris = datasets.load_iris()\ndiff --git a/sklearn/preprocessing/tests/test_label.py b/sklearn/preprocessing/tests/test_label.py\n--- a/sklearn/preprocessing/tests/test_label.py\n+++ b/sklearn/preprocessing/tests/test_label.py\n@@ -117,6 +117,22 @@ def test_label_binarizer_set_label_encoding():\n     assert_array_equal(lb.inverse_transform(got), inp)\n \n \n+@pytest.mark.parametrize(\"dtype\", [\"Int64\", \"Float64\", \"boolean\"])\n+def test_label_binarizer_pandas_nullable(dtype):\n+    \"\"\"Checks that LabelBinarizer works with pandas nullable dtypes.\n+\n+    Non-regression test for gh-25637.\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    from sklearn.preprocessing import LabelBinarizer\n+\n+    y_true = pd.Series([1, 0, 0, 1, 0, 1, 1, 0, 1], dtype=dtype)\n+    lb = LabelBinarizer().fit(y_true)\n+    y_out = lb.transform([1, 0])\n+\n+    assert_array_equal(y_out, [[1], [0]])\n+\n+\n @ignore_warnings\n def test_label_binarizer_errors():\n     # Check that invalid arguments yield ValueError\ndiff --git a/sklearn/utils/tests/test_multiclass.py b/sklearn/utils/tests/test_multiclass.py\n--- a/sklearn/utils/tests/test_multiclass.py\n+++ b/sklearn/utils/tests/test_multiclass.py\n@@ -346,6 +346,42 @@ def test_type_of_target_pandas_sparse():\n         type_of_target(y)\n \n \n+def test_type_of_target_pandas_nullable():\n+    \"\"\"Check that type_of_target works with pandas nullable dtypes.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    for dtype in [\"Int32\", \"Float32\"]:\n+        y_true = pd.Series([1, 0, 2, 3, 4], dtype=dtype)\n+        assert type_of_target(y_true) == \"multiclass\"\n+\n+        y_true = pd.Series([1, 0, 1, 0], dtype=dtype)\n+        assert type_of_target(y_true) == \"binary\"\n+\n+    y_true = pd.DataFrame([[1.4, 3.1], [3.1, 1.4]], dtype=\"Float32\")\n+    assert type_of_target(y_true) == \"continuous-multioutput\"\n+\n+    y_true = pd.DataFrame([[0, 1], [1, 1]], dtype=\"Int32\")\n+    assert type_of_target(y_true) == \"multilabel-indicator\"\n+\n+    y_true = pd.DataFrame([[1, 2], [3, 1]], dtype=\"Int32\")\n+    assert type_of_target(y_true) == \"multiclass-multioutput\"\n+\n+\n+@pytest.mark.parametrize(\"dtype\", [\"Int64\", \"Float64\", \"boolean\"])\n+def test_unique_labels_pandas_nullable(dtype):\n+    \"\"\"Checks that unique_labels work with pandas nullable dtypes.\n+\n+    Non-regression test for gh-25634.\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    y_true = pd.Series([1, 0, 0, 1, 0, 1, 1, 0, 1], dtype=dtype)\n+    y_predicted = pd.Series([0, 0, 1, 1, 0, 1, 1, 1, 1], dtype=\"int64\")\n+\n+    labels = unique_labels(y_true, y_predicted)\n+    assert_array_equal(labels, [0, 1])\n+\n+\n def test_class_distribution():\n     y = np.array(\n         [\n",
  "problem_statement": "Support nullable pandas dtypes in `unique_labels`\n### Describe the workflow you want to enable\n\nI would like to be able to pass the nullable pandas dtypes (\"Int64\", \"Float64\", \"boolean\") into sklearn's `unique_labels` function. Because the dtypes become `object` dtype when converted to numpy arrays we get `ValueError: Mix type of y not allowed, got types {'binary', 'unknown'}`:\r\n\r\nRepro with sklearn 1.2.1\r\n```py \r\n    import pandas as pd\r\n    import pytest\r\n    from sklearn.utils.multiclass import unique_labels\r\n    \r\n    for dtype in [\"Int64\", \"Float64\", \"boolean\"]:\r\n        y_true = pd.Series([1, 0, 0, 1, 0, 1, 1, 0, 1], dtype=dtype)\r\n        y_predicted = pd.Series([0, 0, 1, 1, 0, 1, 1, 1, 1], dtype=\"int64\")\r\n\r\n        with pytest.raises(ValueError, match=\"Mix type of y not allowed, got types\"):\r\n            unique_labels(y_true, y_predicted)\r\n```\n\n### Describe your proposed solution\n\nWe should get the same behavior as when `int64`, `float64`, and `bool` dtypes are used, which is no error:  \r\n\r\n```python\r\n    import pandas as pd\r\n    from sklearn.utils.multiclass import unique_labels\r\n    \r\n    for dtype in [\"int64\", \"float64\", \"bool\"]:\r\n        y_true = pd.Series([1, 0, 0, 1, 0, 1, 1, 0, 1], dtype=dtype)\r\n        y_predicted = pd.Series([0, 0, 1, 1, 0, 1, 1, 1, 1], dtype=\"int64\")\r\n\r\n        unique_labels(y_true, y_predicted)\r\n```\n\n### Describe alternatives you've considered, if relevant\n\nOur current workaround is to convert the data to numpy arrays with the corresponding dtype that works prior to passing it into `unique_labels`.\n\n### Additional context\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2023-02-17T22:17:50Z",
  "version": "1.3",
  "FAIL_TO_PASS": "[\"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_pandas_nullable[Int64]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_pandas_nullable[Float64]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_pandas_nullable[boolean]\", \"sklearn/preprocessing/tests/test_label.py::test_label_binarizer_pandas_nullable[Int64]\", \"sklearn/preprocessing/tests/test_label.py::test_label_binarizer_pandas_nullable[Float64]\", \"sklearn/preprocessing/tests/test_label.py::test_label_binarizer_pandas_nullable[boolean]\", \"sklearn/utils/tests/test_multiclass.py::test_type_of_target_pandas_nullable\", \"sklearn/utils/tests/test_multiclass.py::test_unique_labels_pandas_nullable[Int64]\", \"sklearn/utils/tests/test_multiclass.py::test_unique_labels_pandas_nullable[Float64]\", \"sklearn/utils/tests/test_multiclass.py::test_unique_labels_pandas_nullable[boolean]\"]",
  "PASS_TO_PASS": "[\"sklearn/metrics/tests/test_classification.py::test_classification_report_dictionary_output\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_output_dict_empty_input\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_zero_division_warning[warn]\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_zero_division_warning[0]\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_zero_division_warning[1]\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_accuracy_score_subset_accuracy\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_binary_single_class\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_extra_labels\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_ignored_labels\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_score_non_binary_class\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_duplicate_values\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_tied_values\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_fscore_support_errors\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_unused_pos_label\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_binary\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_binary\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_multilabel\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_errors\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[true-f-0.333333333]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[pred-f-0.333333333]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[all-f-0.1111111111]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[None-i-2]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize_single_class\", \"sklearn/metrics/tests/test_classification.py::test_likelihood_ratios_warnings[params0-samples\", \"sklearn/metrics/tests/test_classification.py::test_likelihood_ratios_warnings[params1-positive_likelihood_ratio\", \"sklearn/metrics/tests/test_classification.py::test_likelihood_ratios_warnings[params2-no\", \"sklearn/metrics/tests/test_classification.py::test_likelihood_ratios_warnings[params3-negative_likelihood_ratio\", \"sklearn/metrics/tests/test_classification.py::test_likelihood_ratios_warnings[params4-no\", \"sklearn/metrics/tests/test_classification.py::test_likelihood_ratios_errors[params0-class_likelihood_ratios\", \"sklearn/metrics/tests/test_classification.py::test_likelihood_ratios\", \"sklearn/metrics/tests/test_classification.py::test_cohen_kappa\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_nan\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_numpy_corrcoef\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_jurman\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[100]\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[10000]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[samples]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[micro]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[macro]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[weighted]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[None]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary_averaged\", \"sklearn/metrics/tests/test_classification.py::test_zero_precision_recall\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_multiclass_subset_labels\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_error[empty\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_error[unknown\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_on_zero_length_input[None]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_on_zero_length_input[binary]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_on_zero_length_input[multiclass]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_dtype\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_balanced\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_label_detection\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_digits\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_string_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_unicode_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_long_string_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_labels_target_names_unequal_length\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_no_labels_target_names_unequal_length\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_classification_report\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_zero_one_loss_subset\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_hamming_loss\", \"sklearn/metrics/tests/test_classification.py::test_jaccard_score_validation\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_jaccard_score\", \"sklearn/metrics/tests/test_classification.py::test_multiclass_jaccard_score\", \"sklearn/metrics/tests/test_classification.py::test_average_binary_jaccard_score\", \"sklearn/metrics/tests/test_classification.py::test_jaccard_score_zero_division_warning\", \"sklearn/metrics/tests/test_classification.py::test_jaccard_score_zero_division_set_value[0-0]\", \"sklearn/metrics/tests/test_classification.py::test_jaccard_score_zero_division_set_value[1-0.5]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_2\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction[warn]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction[0]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction[1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-macro-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-micro-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-weighted-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-samples-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-macro-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-micro-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-weighted-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-samples-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[macro]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[micro]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[weighted]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[samples]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_average_none[0]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_average_none[1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_average_none_warn\", \"sklearn/metrics/tests/test_classification.py::test_prf_warnings\", \"sklearn/metrics/tests/test_classification.py::test_prf_no_warnings_if_zero_division_set[0]\", \"sklearn/metrics/tests/test_classification.py::test_prf_no_warnings_if_zero_division_set[1]\", \"sklearn/metrics/tests/test_classification.py::test_recall_warnings[warn]\", \"sklearn/metrics/tests/test_classification.py::test_recall_warnings[0]\", \"sklearn/metrics/tests/test_classification.py::test_recall_warnings[1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_warnings[warn]\", \"sklearn/metrics/tests/test_classification.py::test_precision_warnings[0]\", \"sklearn/metrics/tests/test_classification.py::test_precision_warnings[1]\", \"sklearn/metrics/tests/test_classification.py::test_fscore_warnings[warn]\", \"sklearn/metrics/tests/test_classification.py::test_fscore_warnings[0]\", \"sklearn/metrics/tests/test_classification.py::test_fscore_warnings[1]\", \"sklearn/metrics/tests/test_classification.py::test_prf_average_binary_data_non_binary\", \"sklearn/metrics/tests/test_classification.py::test__check_targets\", \"sklearn/metrics/tests/test_classification.py::test__check_targets_multiclass_with_both_y_true_and_y_pred_binary\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_binary\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_missing_labels_with_labels_none\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_no_consistent_pred_decision_shape\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_with_missing_labels\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_missing_labels_only_two_unq_in_y_true\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_invariance_lists\", \"sklearn/metrics/tests/test_classification.py::test_log_loss\", \"sklearn/metrics/tests/test_classification.py::test_log_loss_eps_auto[float64]\", \"sklearn/metrics/tests/test_classification.py::test_log_loss_eps_auto_float16\", \"sklearn/metrics/tests/test_classification.py::test_log_loss_pandas_input\", \"sklearn/metrics/tests/test_classification.py::test_brier_score_loss\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score_unseen\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true0-y_pred0]\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true1-y_pred1]\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true2-y_pred2]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes0-jaccard_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes0-f1_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes0-metric2]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes0-precision_recall_fscore_support]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes0-precision_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes0-recall_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes0-brier_score_loss]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes1-jaccard_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes1-f1_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes1-metric2]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes1-precision_recall_fscore_support]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes1-precision_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes1-recall_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes1-brier_score_loss]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes2-jaccard_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes2-f1_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes2-metric2]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes2-precision_recall_fscore_support]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes2-precision_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes2-recall_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes2-brier_score_loss]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes3-jaccard_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes3-f1_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes3-metric2]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes3-precision_recall_fscore_support]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes3-precision_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes3-recall_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes3-brier_score_loss]\", \"sklearn/preprocessing/tests/test_label.py::test_label_binarizer\", \"sklearn/preprocessing/tests/test_label.py::test_label_binarizer_unseen_labels\", \"sklearn/preprocessing/tests/test_label.py::test_label_binarizer_set_label_encoding\", \"sklearn/preprocessing/tests/test_label.py::test_label_binarizer_errors\", \"sklearn/preprocessing/tests/test_label.py::test_label_encoder[int64]\", \"sklearn/preprocessing/tests/test_label.py::test_label_encoder[object]\", \"sklearn/preprocessing/tests/test_label.py::test_label_encoder[str]\", \"sklearn/preprocessing/tests/test_label.py::test_label_encoder_negative_ints\", \"sklearn/preprocessing/tests/test_label.py::test_label_encoder_str_bad_shape[str]\", \"sklearn/preprocessing/tests/test_label.py::test_label_encoder_str_bad_shape[object]\", \"sklearn/preprocessing/tests/test_label.py::test_label_encoder_errors\", \"sklearn/preprocessing/tests/test_label.py::test_label_encoder_empty_array[int64]\", \"sklearn/preprocessing/tests/test_label.py::test_label_encoder_empty_array[object]\", \"sklearn/preprocessing/tests/test_label.py::test_label_encoder_empty_array[str]\", \"sklearn/preprocessing/tests/test_label.py::test_sparse_output_multilabel_binarizer\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer_empty_sample\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer_unknown_class\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer_given_classes\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer_multiple_calls\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer_same_length_sequence\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer_non_integer_labels\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer_non_unique\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer_inverse_validation\", \"sklearn/preprocessing/tests/test_label.py::test_label_binarize_with_class_order\", \"sklearn/preprocessing/tests/test_label.py::test_label_binarize_binary\", \"sklearn/preprocessing/tests/test_label.py::test_label_binarize_multiclass\", \"sklearn/preprocessing/tests/test_label.py::test_label_binarize_multilabel\", \"sklearn/preprocessing/tests/test_label.py::test_invalid_input_label_binarize\", \"sklearn/preprocessing/tests/test_label.py::test_inverse_binarize_multiclass\", \"sklearn/preprocessing/tests/test_label.py::test_nan_label_encoder\", \"sklearn/utils/tests/test_multiclass.py::test_unique_labels\", \"sklearn/utils/tests/test_multiclass.py::test_unique_labels_non_specific\", \"sklearn/utils/tests/test_multiclass.py::test_unique_labels_mixed_types\", \"sklearn/utils/tests/test_multiclass.py::test_is_multilabel\", \"sklearn/utils/tests/test_multiclass.py::test_check_classification_targets\", \"sklearn/utils/tests/test_multiclass.py::test_type_of_target\", \"sklearn/utils/tests/test_multiclass.py::test_type_of_target_pandas_sparse\", \"sklearn/utils/tests/test_multiclass.py::test_class_distribution\", \"sklearn/utils/tests/test_multiclass.py::test_safe_split_with_precomputed_kernel\", \"sklearn/utils/tests/test_multiclass.py::test_ovr_decision_function\"]",
  "environment_setup_commit": "1e8a5b833d1b58f3ab84099c4582239af854b23a",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.021155",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}