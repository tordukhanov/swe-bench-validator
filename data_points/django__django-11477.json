{
  "repo": "django/django",
  "instance_id": "django__django-11477",
  "base_commit": "e28671187903e6aca2428374fdd504fca3032aee",
  "patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -153,7 +153,7 @@ def match(self, path):\n             # If there are any named groups, use those as kwargs, ignoring\n             # non-named groups. Otherwise, pass all non-named arguments as\n             # positional arguments.\n-            kwargs = match.groupdict()\n+            kwargs = {k: v for k, v in match.groupdict().items() if v is not None}\n             args = () if kwargs else match.groups()\n             return path[match.end():], args, kwargs\n         return None\n",
  "test_patch": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -158,6 +158,15 @@ def test_translate_url_utility(self):\n             # path() URL pattern\n             self.assertEqual(translate_url('/en/account/register-as-path/', 'nl'), '/nl/profiel/registreren-als-pad/')\n             self.assertEqual(translation.get_language(), 'en')\n+            # URL with parameters.\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                '/nl/with-arguments/regular-argument/',\n+            )\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                '/nl/with-arguments/regular-argument/optional.html',\n+            )\n \n         with translation.override('nl'):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\ndiff --git a/tests/i18n/patterns/urls/default.py b/tests/i18n/patterns/urls/default.py\n--- a/tests/i18n/patterns/urls/default.py\n+++ b/tests/i18n/patterns/urls/default.py\n@@ -15,6 +15,11 @@\n urlpatterns += i18n_patterns(\n     path('prefixed/', view, name='prefixed'),\n     path('prefixed.xml', view, name='prefixed_xml'),\n+    re_path(\n+        _(r'^with-arguments/(?P<argument>[\\w-]+)/(?:(?P<optional>[\\w-]+).html)?$'),\n+        view,\n+        name='with-arguments',\n+    ),\n     re_path(_(r'^users/$'), view, name='users'),\n     re_path(_(r'^account/'), include('i18n.patterns.urls.namespace', namespace='account')),\n )\ndiff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -11,6 +11,7 @@\n     path('users/<id>/', views.empty_view, name='user-with-id'),\n     path('included_urls/', include('urlpatterns.included_urls')),\n     re_path(r'^regex/(?P<pk>[0-9]+)/$', views.empty_view, name='regex'),\n+    re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n ]\ndiff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -54,6 +54,20 @@ def test_re_path(self):\n         self.assertEqual(match.kwargs, {'pk': '1'})\n         self.assertEqual(match.route, '^regex/(?P<pk>[0-9]+)/$')\n \n+    def test_re_path_with_optional_parameter(self):\n+        for url, kwargs in (\n+            ('/regex_optional/1/2/', {'arg1': '1', 'arg2': '2'}),\n+            ('/regex_optional/1/', {'arg1': '1'}),\n+        ):\n+            with self.subTest(url=url):\n+                match = resolve(url)\n+                self.assertEqual(match.url_name, 'regex_optional')\n+                self.assertEqual(match.kwargs, kwargs)\n+                self.assertEqual(\n+                    match.route,\n+                    r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n+                )\n+\n     def test_path_lookup_with_inclusion(self):\n         match = resolve('/included_urls/extra/something/')\n         self.assertEqual(match.url_name, 'inner-extra')\ndiff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -180,6 +180,8 @@\n     ('named_optional', '/optional/1/', [], {'arg1': 1}),\n     ('named_optional', '/optional/1/2/', [1, 2], {}),\n     ('named_optional', '/optional/1/2/', [], {'arg1': 1, 'arg2': 2}),\n+    ('named_optional_terminated', '/optional/1/', [1], {}),\n+    ('named_optional_terminated', '/optional/1/', [], {'arg1': 1}),\n     ('named_optional_terminated', '/optional/1/2/', [1, 2], {}),\n     ('named_optional_terminated', '/optional/1/2/', [], {'arg1': 1, 'arg2': 2}),\n     ('hardcoded', '/hardcoded/', [], {}),\n",
  "problem_statement": "translate_url() creates an incorrect URL when optional named groups are missing in the URL pattern\nDescription\n\t\nThere is a problem when translating urls with absent 'optional' arguments\n(it's seen in test case of the patch)\n",
  "hints_text": "Could you please provide the patch as a pull request against master? Unless this is a regression, it probably doesn't qualify for a backport to 1.9 (see our ​supported versions policy). Please check the patch on Python 3 as well (dict.iteritems() doesn't exist there).\nThe issue here is that resolve() will return None for any optional capture groups that aren't captured, but reverse() will use force_text() and convert it to the literal string 'None'. This causes an asymmetry between resolve() and reverse(). I think it's a better idea to treat this asymmetry as a bug, and solve it within reverse(). We would discard any arguments that are None. Incidentally this will allow for cleaner code when you don't know if an optional parameter is set when you call reverse() or the {% url %} template tag: {% if obj.might_be_none != None %} {% url 'my_view' obj.might_be_none %} {% else %} {% url 'my_view' %} {% endif %} vs. {% url 'my_view' obj.might_be_none %} I think that's a reasonably common usecase, so it would be nice to support this cleaner syntax. Non-existent template variables will still pass an empty string rather than None, so this won't hide any typos in your template variable names.\nThis also affects the set_language function. When changing language on a page with an URL pattern containing an optional group, the empty optional part is set to none and translating the page leads to a 404. The bug on translation did not exist back in 1.8, not sure when it was introduced. I'm on 2.2. The best way to resolve both issues would be to patch directly _reverse_with_prefix in django.urls.resolvers.\n​PR",
  "created_at": "2019-06-14T17:40:45Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_re_path_with_optional_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_two_variable_at_start_of_path_pattern (urlpatterns.tests.SimplifiedURLTests)\", \"test_translate_url_utility (i18n.patterns.tests.URLTranslationTests)\"]",
  "PASS_TO_PASS": "[\"test_include_2_tuple (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_2_tuple_namespace (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_3_tuple (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_3_tuple_namespace (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_4_tuple (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_app_name (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_app_name_namespace (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_namespace (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_urls (urlpatterns_reverse.tests.IncludeTests)\", \"test_allows_non_ascii_but_valid_identifiers (urlpatterns.tests.ParameterRestrictionTests)\", \"test_non_identifier_parameter_name_causes_exception (urlpatterns.tests.ParameterRestrictionTests)\", \"test_resolve_type_error_propagates (urlpatterns.tests.ConversionExceptionTests)\", \"test_resolve_value_error_means_no_match (urlpatterns.tests.ConversionExceptionTests)\", \"test_reverse_value_error_propagates (urlpatterns.tests.ConversionExceptionTests)\", \"test_matching_urls (urlpatterns.tests.ConverterTests)\", \"test_nonmatching_urls (urlpatterns.tests.ConverterTests)\", \"test_request_urlconf_considered (i18n.patterns.tests.RequestURLConfTests)\", \"test_attributeerror_not_hidden (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_module_does_not_exist (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_non_string_value (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_not_callable (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_parent_module_does_not_exist (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_string_without_dot (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_view_does_not_exist (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_view_loading (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_account_register (i18n.patterns.tests.URLNamespaceTests)\", \"test_prefixed_i18n_disabled (i18n.patterns.tests.URLDisabledTests)\", \"test_converter_resolve (urlpatterns.tests.SimplifiedURLTests)\", \"test_converter_reverse (urlpatterns.tests.SimplifiedURLTests)\", \"test_converter_reverse_with_second_layer_instance_namespace (urlpatterns.tests.SimplifiedURLTests)\", \"test_invalid_converter (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_inclusion_is_matchable (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_inclusion_is_reversible (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_double_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_empty_string_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_multiple_paramaters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_typed_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_without_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_reverse_with_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_reverse_without_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_re_path (urlpatterns.tests.SimplifiedURLTests)\", \"test_no_urls_exception (urlpatterns_reverse.tests.NoURLPatternsTests)\", \"test_callable_handlers (urlpatterns_reverse.tests.ErrorHandlerResolutionTests)\", \"test_named_handlers (urlpatterns_reverse.tests.ErrorHandlerResolutionTests)\", \"test_invalid_regex (urlpatterns_reverse.tests.ErroneousViewTests)\", \"test_noncallable_view (urlpatterns_reverse.tests.ErroneousViewTests)\", \"test_invalid_prefix_use (i18n.patterns.tests.URLPrefixTests)\", \"test_not_prefixed (i18n.patterns.tests.URLPrefixTests)\", \"test_prefixed (i18n.patterns.tests.URLPrefixTests)\", \"test_no_prefix_translated (i18n.patterns.tests.URLTranslationTests)\", \"test_users_url (i18n.patterns.tests.URLTranslationTests)\", \"test_args (i18n.patterns.tests.URLTagTests)\", \"test_context (i18n.patterns.tests.URLTagTests)\", \"test_kwargs (i18n.patterns.tests.URLTagTests)\", \"test_strings_only (i18n.patterns.tests.URLTagTests)\", \"test_no_lang_activate (i18n.patterns.tests.PathUnusedTests)\", \"test_en_redirect (i18n.patterns.tests.URLRedirectWithoutTrailingSlashSettingTests)\", \"test_not_prefixed_redirect (i18n.patterns.tests.URLRedirectWithoutTrailingSlashSettingTests)\", \"test_repr (urlpatterns_reverse.tests.ResolverMatchTests)\", \"test_resolver_match_on_request (urlpatterns_reverse.tests.ResolverMatchTests)\", \"test_resolver_match_on_request_before_resolution (urlpatterns_reverse.tests.ResolverMatchTests)\", \"test_urlpattern_resolve (urlpatterns_reverse.tests.ResolverMatchTests)\", \"test_language_prefix_with_script_prefix (i18n.patterns.tests.URLRedirectWithScriptAliasTests)\", \"test_en_redirect (i18n.patterns.tests.URLVaryAcceptLanguageTests)\", \"test_no_prefix_response (i18n.patterns.tests.URLVaryAcceptLanguageTests)\", \"test_en_redirect (i18n.patterns.tests.URLRedirectWithoutTrailingSlashTests)\", \"test_not_prefixed_redirect (i18n.patterns.tests.URLRedirectWithoutTrailingSlashTests)\", \"test_no_illegal_imports (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_redirect_to_object (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_redirect_to_url (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_redirect_to_view_name (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_redirect_view_object (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_reverse_by_path_nested (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_invalid_resolve (urlpatterns_reverse.tests.LookaheadTests)\", \"test_invalid_reverse (urlpatterns_reverse.tests.LookaheadTests)\", \"test_valid_resolve (urlpatterns_reverse.tests.LookaheadTests)\", \"test_valid_reverse (urlpatterns_reverse.tests.LookaheadTests)\", \"test_illegal_args_message (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_illegal_kwargs_message (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_mixing_args_and_kwargs (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_no_args_message (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_non_urlsafe_prefix_with_args (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_patterns_reported (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_prefix_braces (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_prefix_format_char (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_prefix_parenthesis (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_reverse_none (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_script_name_escaping (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_urlpattern_reverse (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_view_not_found_message (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_en_path (i18n.patterns.tests.URLResponseTests)\", \"test_en_url (i18n.patterns.tests.URLResponseTests)\", \"test_nl_path (i18n.patterns.tests.URLResponseTests)\", \"test_nl_url (i18n.patterns.tests.URLResponseTests)\", \"test_not_prefixed_with_prefix (i18n.patterns.tests.URLResponseTests)\", \"test_pt_br_url (i18n.patterns.tests.URLResponseTests)\", \"test_wrong_en_prefix (i18n.patterns.tests.URLResponseTests)\", \"test_wrong_nl_prefix (i18n.patterns.tests.URLResponseTests)\", \"test_inserting_reverse_lazy_into_string (urlpatterns_reverse.tests.ReverseLazyTest)\", \"test_redirect_with_lazy_reverse (urlpatterns_reverse.tests.ReverseLazyTest)\", \"test_user_permission_with_lazy_reverse (urlpatterns_reverse.tests.ReverseLazyTest)\", \"test_custom_redirect_class (i18n.patterns.tests.URLRedirectTests)\", \"test_en_redirect (i18n.patterns.tests.URLRedirectTests)\", \"test_en_redirect_wrong_url (i18n.patterns.tests.URLRedirectTests)\", \"test_nl_redirect (i18n.patterns.tests.URLRedirectTests)\", \"test_nl_redirect_wrong_url (i18n.patterns.tests.URLRedirectTests)\", \"test_no_prefix_response (i18n.patterns.tests.URLRedirectTests)\", \"test_pl_pl_redirect (i18n.patterns.tests.URLRedirectTests)\", \"test_pt_br_redirect (i18n.patterns.tests.URLRedirectTests)\", \"test_ambiguous_object (urlpatterns_reverse.tests.NamespaceTests)\", \"test_ambiguous_urlpattern (urlpatterns_reverse.tests.NamespaceTests)\", \"A default application namespace can be used for lookup.\", \"A default application namespace is sensitive to the current app.\", \"test_app_lookup_object_without_default (urlpatterns_reverse.tests.NamespaceTests)\", \"test_app_name_pattern (urlpatterns_reverse.tests.NamespaceTests)\", \"test_app_object (urlpatterns_reverse.tests.NamespaceTests)\", \"test_app_object_default_namespace (urlpatterns_reverse.tests.NamespaceTests)\", \"current_app shouldn't be used unless it matches the whole path.\", \"Namespaces can be installed anywhere in the URL pattern tree.\", \"Namespaces can be embedded.\", \"Dynamic URL objects can be found using a namespace.\", \"Namespaces can be applied to include()'d urlpatterns.\", \"test_namespace_pattern_with_variable_prefix (urlpatterns_reverse.tests.NamespaceTests)\", \"Namespace prefixes can capture variables.\", \"test_nested_app_lookup (urlpatterns_reverse.tests.NamespaceTests)\", \"Namespaces can be nested.\", \"Nonexistent namespaces raise errors.\", \"Normal lookups work as expected.\", \"Normal lookups work on names included from other patterns.\", \"test_special_chars_namespace (urlpatterns_reverse.tests.NamespaceTests)\", \"test_404_tried_urls_have_names (urlpatterns_reverse.tests.ResolverTests)\", \"test_namespaced_view_detail (urlpatterns_reverse.tests.ResolverTests)\", \"test_non_regex (urlpatterns_reverse.tests.ResolverTests)\", \"test_populate_concurrency (urlpatterns_reverse.tests.ResolverTests)\", \"test_resolver_repr (urlpatterns_reverse.tests.ResolverTests)\", \"test_resolver_reverse (urlpatterns_reverse.tests.ResolverTests)\", \"test_resolver_reverse_conflict (urlpatterns_reverse.tests.ResolverTests)\", \"test_reverse_lazy_object_coercion_by_resolve (urlpatterns_reverse.tests.ResolverTests)\", \"test_view_detail_as_method (urlpatterns_reverse.tests.ResolverTests)\", \"test_no_handler_exception (urlpatterns_reverse.tests.NoRootUrlConfTests)\", \"If the urls.py doesn't specify handlers, the defaults are used\", \"test_reverse_inner_in_response_middleware (urlpatterns_reverse.tests.RequestURLconfTests)\", \"test_reverse_inner_in_streaming (urlpatterns_reverse.tests.RequestURLconfTests)\", \"test_reverse_outer_in_response_middleware (urlpatterns_reverse.tests.RequestURLconfTests)\", \"test_reverse_outer_in_streaming (urlpatterns_reverse.tests.RequestURLconfTests)\", \"test_urlconf (urlpatterns_reverse.tests.RequestURLconfTests)\", \"The URLconf is reset after each request.\", \"test_urlconf_overridden (urlpatterns_reverse.tests.RequestURLconfTests)\", \"test_urlconf_overridden_with_null (urlpatterns_reverse.tests.RequestURLconfTests)\", \"test_lazy_in_settings (urlpatterns_reverse.tests.ReverseLazySettingsTest)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.573536",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}