{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-14308",
  "base_commit": "fb536869fb7aa28b2695ad7a3b70949926b291c4",
  "patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -931,26 +931,49 @@ def _print_BasisDependent(self, expr):\n         #Fixing the newlines\n         lengths = []\n         strs = ['']\n+        flag = []\n         for i, partstr in enumerate(o1):\n+            flag.append(0)\n             # XXX: What is this hack?\n             if '\\n' in partstr:\n                 tempstr = partstr\n                 tempstr = tempstr.replace(vectstrs[i], '')\n-                tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\n-                                          u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\n-                                          + ' ' + vectstrs[i])\n+                if u'\\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction\n+                    for paren in range(len(tempstr)):\n+                        flag[i] = 1\n+                        if tempstr[paren] == u'\\N{right parenthesis extension}':\n+                            tempstr = tempstr[:paren] + u'\\N{right parenthesis extension}'\\\n+                                         + ' '  + vectstrs[i] + tempstr[paren + 1:]\n+                            break\n+                elif u'\\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:\n+                    flag[i] = 1\n+                    tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS LOWER HOOK}',\n+                                        u'\\N{RIGHT PARENTHESIS LOWER HOOK}'\n+                                        + ' ' + vectstrs[i])\n+                else:\n+                    tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\n+                                        u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\n+                                        + ' ' + vectstrs[i])\n                 o1[i] = tempstr\n+\n         o1 = [x.split('\\n') for x in o1]\n-        n_newlines = max([len(x) for x in o1])\n-        for parts in o1:\n-            lengths.append(len(parts[0]))\n+        n_newlines = max([len(x) for x in o1])  # Width of part in its pretty form\n+\n+        if 1 in flag:                           # If there was a fractional scalar\n+            for i, parts in enumerate(o1):\n+                if len(parts) == 1:             # If part has no newline\n+                    parts.insert(0, ' ' * (len(parts[0])))\n+                    flag[i] = 1\n+\n+        for i, parts in enumerate(o1):\n+            lengths.append(len(parts[flag[i]]))\n             for j in range(n_newlines):\n                 if j+1 <= len(parts):\n                     if j >= len(strs):\n                         strs.append(' ' * (sum(lengths[:-1]) +\n                                            3*(len(lengths)-1)))\n-                    if j == 0:\n-                        strs[0] += parts[0] + ' + '\n+                    if j == flag[i]:\n+                        strs[flag[i]] += parts[flag[i]] + ' + '\n                     else:\n                         strs[j] += parts[j] + ' '*(lengths[-1] -\n                                                    len(parts[j])+\n",
  "test_patch": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6089,6 +6089,28 @@ def test_MatrixElement_printing():\n     assert upretty(F) == ucode_str1\n \n \n+def test_issue_12675():\n+    from sympy.vector import CoordSys3D\n+    x, y, t, j = symbols('x y t j')\n+    e = CoordSys3D('e')\n+\n+    ucode_str = \\\n+u(\"\"\"\\\n+⎛   t⎞    \\n\\\n+⎜⎛x⎞ ⎟ e_j\\n\\\n+⎜⎜─⎟ ⎟    \\n\\\n+⎝⎝y⎠ ⎠    \\\n+\"\"\")\n+    assert upretty((x/y)**t*e.j) == ucode_str\n+    ucode_str = \\\n+u(\"\"\"\\\n+⎛1⎞    \\n\\\n+⎜─⎟ e_j\\n\\\n+⎝y⎠    \\\n+\"\"\")\n+    assert upretty((1/y)*e.j) == ucode_str\n+\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\ndiff --git a/sympy/vector/tests/test_printing.py b/sympy/vector/tests/test_printing.py\n--- a/sympy/vector/tests/test_printing.py\n+++ b/sympy/vector/tests/test_printing.py\n@@ -37,8 +37,8 @@ def upretty(expr):\n v.append(N.j - (Integral(f(b)) - C.x**2)*N.k)\n upretty_v_8 = u(\n \"\"\"\\\n-N_j + ⎛   2   ⌠        ⎞ N_k\\n\\\n-      ⎜C_x  - ⎮ f(b) db⎟    \\n\\\n+      ⎛   2   ⌠        ⎞    \\n\\\n+N_j + ⎜C_x  - ⎮ f(b) db⎟ N_k\\n\\\n       ⎝       ⌡        ⎠    \\\n \"\"\")\n pretty_v_8 = u(\n@@ -55,9 +55,9 @@ def upretty(expr):\n v.append((a**2 + b)*N.i + (Integral(f(b)))*N.k)\n upretty_v_11 = u(\n \"\"\"\\\n-⎛ 2    ⎞ N_i + ⎛⌠        ⎞ N_k\\n\\\n-⎝a  + b⎠       ⎜⎮ f(b) db⎟    \\n\\\n-               ⎝⌡        ⎠    \\\n+⎛ 2    ⎞        ⎛⌠        ⎞    \\n\\\n+⎝a  + b⎠ N_i  + ⎜⎮ f(b) db⎟ N_k\\n\\\n+                ⎝⌡        ⎠    \\\n \"\"\")\n pretty_v_11 = u(\n \"\"\"\\\n@@ -85,8 +85,8 @@ def upretty(expr):\n # This is the pretty form for ((a**2 + b)*N.i + 3*(C.y - c)*N.k) | N.k\n upretty_d_7 = u(\n \"\"\"\\\n-⎛ 2    ⎞ (N_i|N_k) + (3⋅C_y - 3⋅c) (N_k|N_k)\\n\\\n-⎝a  + b⎠                                    \\\n+⎛ 2    ⎞                                     \\n\\\n+⎝a  + b⎠ (N_i|N_k)  + (3⋅C_y - 3⋅c) (N_k|N_k)\\\n \"\"\")\n pretty_d_7 = u(\n \"\"\"\\\n",
  "problem_statement": "vectors break pretty printing\n```py\r\nIn [1]: from sympy.vector import *\r\n\r\nIn [2]: e = CoordSysCartesian('e')\r\n\r\nIn [3]: (x/y)**t*e.j\r\nOut[3]:\r\n⎛   t⎞ e_j\r\n⎜⎛x⎞ e_j ⎟\r\n⎜⎜─⎟ ⎟\r\n⎝⎝y⎠ ⎠\r\n```\r\n\r\nAlso, when it does print correctly, the baseline is wrong (it should be centered). \n",
  "hints_text": "Hi @asmeurer . I would like to work on this issue . Could you help me with the same ? ",
  "created_at": "2018-02-22T16:54:06Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_issue_12675\", \"test_pretty_print_unicode\"]",
  "PASS_TO_PASS": "[\"test_pretty_ascii_str\", \"test_pretty_unicode_str\", \"test_upretty_greek\", \"test_upretty_multiindex\", \"test_upretty_sub_super\", \"test_upretty_subs_missing_in_24\", \"test_upretty_modifiers\", \"test_pretty_Cycle\", \"test_pretty_basic\", \"test_negative_fractions\", \"test_issue_5524\", \"test_pretty_ordering\", \"test_EulerGamma\", \"test_GoldenRatio\", \"test_pretty_relational\", \"test_Assignment\", \"test_AugmentedAssignment\", \"test_issue_7117\", \"test_pretty_rational\", \"test_pretty_functions\", \"test_pretty_sqrt\", \"test_pretty_sqrt_char_knob\", \"test_pretty_sqrt_longsymbol_no_sqrt_char\", \"test_pretty_KroneckerDelta\", \"test_pretty_product\", \"test_pretty_lambda\", \"test_pretty_order\", \"test_pretty_derivatives\", \"test_pretty_integrals\", \"test_pretty_matrix\", \"test_pretty_ndim_arrays\", \"test_tensor_TensorProduct\", \"test_diffgeom_print_WedgeProduct\", \"test_Adjoint\", \"test_pretty_Trace_issue_9044\", \"test_MatrixExpressions\", \"test_pretty_dotproduct\", \"test_pretty_piecewise\", \"test_pretty_ITE\", \"test_pretty_seq\", \"test_any_object_in_sequence\", \"test_print_builtin_set\", \"test_pretty_sets\", \"test_pretty_SetExpr\", \"test_pretty_ImageSet\", \"test_pretty_ConditionSet\", \"test_pretty_ComplexRegion\", \"test_pretty_Union_issue_10414\", \"test_pretty_Intersection_issue_10414\", \"test_ProductSet_paranthesis\", \"test_ProductSet_prod_char_issue_10413\", \"test_pretty_sequences\", \"test_pretty_FourierSeries\", \"test_pretty_FormalPowerSeries\", \"test_pretty_limits\", \"test_pretty_ComplexRootOf\", \"test_pretty_RootSum\", \"test_GroebnerBasis\", \"test_pretty_Boolean\", \"test_pretty_Domain\", \"test_pretty_prec\", \"test_pprint\", \"test_pretty_class\", \"test_pretty_no_wrap_line\", \"test_settings\", \"test_pretty_sum\", \"test_units\", \"test_pretty_Subs\", \"test_gammas\", \"test_beta\", \"test_function_subclass_different_name\", \"test_SingularityFunction\", \"test_deltas\", \"test_hyper\", \"test_meijerg\", \"test_noncommutative\", \"test_pretty_special_functions\", \"test_expint\", \"test_elliptic_functions\", \"test_RandomDomain\", \"test_PrettyPoly\", \"test_issue_6285\", \"test_issue_6359\", \"test_issue_6739\", \"test_complicated_symbol_unchanged\", \"test_categories\", \"test_PrettyModules\", \"test_QuotientRing\", \"test_Homomorphism\", \"test_Tr\", \"test_pretty_Add\", \"test_issue_7179\", \"test_issue_7180\", \"test_pretty_Complement\", \"test_pretty_SymmetricDifference\", \"test_pretty_Contains\", \"test_issue_4335\", \"test_issue_6324\", \"test_issue_7927\", \"test_issue_6134\", \"test_issue_9877\", \"test_issue_13651\", \"test_pretty_primenu\", \"test_pretty_primeomega\", \"test_pretty_Mod\", \"test_issue_11801\", \"test_pretty_UnevaluatedExpr\", \"test_issue_10472\", \"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\", \"test_degree_printing\", \"test_str_printing\", \"test_latex_printing\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.093353",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}