{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-18630",
  "base_commit": "44664d9f625a1c68bc492006cfe1012cb0b49ee4",
  "patch": "diff --git a/sympy/functions/special/hyper.py b/sympy/functions/special/hyper.py\n--- a/sympy/functions/special/hyper.py\n+++ b/sympy/functions/special/hyper.py\n@@ -220,6 +220,34 @@ def _eval_rewrite_as_Sum(self, ap, bq, z, **kwargs):\n         return Piecewise((Sum(coeff * z**n / factorial(n), (n, 0, oo)),\n                          self.convergence_statement), (self, True))\n \n+    def _eval_nseries(self, x, n, logx):\n+\n+        from sympy.functions import factorial, RisingFactorial\n+        from sympy import Order, Add\n+\n+        arg = self.args[2]\n+        x0 = arg.limit(x, 0)\n+        ap = self.args[0]\n+        bq = self.args[1]\n+\n+        if x0 != 0:\n+            return super(hyper, self)._eval_nseries(x, n, logx)\n+\n+        terms = []\n+\n+        for i in range(n):\n+            num = 1\n+            den = 1\n+            for a in ap:\n+                num *= RisingFactorial(a, i)\n+\n+            for b in bq:\n+                den *= RisingFactorial(b, i)\n+\n+            terms.append(((num/den) * (arg**i)) / factorial(i))\n+\n+        return (Add(*terms) + Order(x**n,x))\n+\n     @property\n     def argument(self):\n         \"\"\" Argument of the hypergeometric function. \"\"\"\n",
  "test_patch": "diff --git a/sympy/functions/special/tests/test_hyper.py b/sympy/functions/special/tests/test_hyper.py\n--- a/sympy/functions/special/tests/test_hyper.py\n+++ b/sympy/functions/special/tests/test_hyper.py\n@@ -341,10 +341,7 @@ def test_meijerg_eval():\n def test_limits():\n     k, x = symbols('k, x')\n     assert hyper((1,), (Rational(4, 3), Rational(5, 3)), k**2).series(k) == \\\n-           hyper((1,), (Rational(4, 3), Rational(5, 3)), 0) + \\\n-           9*k**2*hyper((2,), (Rational(7, 3), Rational(8, 3)), 0)/20 + \\\n-           81*k**4*hyper((3,), (Rational(10, 3), Rational(11, 3)), 0)/1120 + \\\n-           O(k**6) # issue 6350\n+           1 + 9*k**2/20 + 81*k**4/1120 + O(k**6) # issue 6350\n     assert limit(meijerg((), (), (1,), (0,), -x), x, 0) == \\\n             meijerg(((), ()), ((1,), (0,)), 0) # issue 6052\n \n@@ -366,3 +363,10 @@ def test_derivative_appellf1():\n     assert diff(appellf1(a, b1, b2, c, x, y), y) == a*b2*appellf1(a + 1, b1, b2 + 1, c + 1, x, y)/c\n     assert diff(appellf1(a, b1, b2, c, x, y), z) == 0\n     assert diff(appellf1(a, b1, b2, c, x, y), a) ==  Derivative(appellf1(a, b1, b2, c, x, y), a)\n+\n+\n+def test_eval_nseries():\n+    a1, b1, a2, b2 = symbols('a1 b1 a2 b2')\n+    assert hyper((1,2), (1,2,3), x**2)._eval_nseries(x, 7, None) == 1 + x**2/3 + x**4/24 + x**6/360 + O(x**7)\n+    assert exp(x)._eval_nseries(x,7,None) == hyper((a1, b1), (a1, b1), x)._eval_nseries(x, 7, None)\n+    assert hyper((a1, a2), (b1, b2), x)._eval_nseries(z, 7, None) == hyper((a1, a2), (b1, b2), x) + O(z**7)\n",
  "problem_statement": "AttributeError: integrate(1 / (1 + x**4)**(S(1)/4), [x, 0, oo])\n```\r\n>>> from sympy import *\r\n>>> x = Symbol('x')\r\n>>> integrate(1 / (1 + x**4)**(S(1)/4), [x, 0, oo])\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 40, in <module>\r\n    print(integrate(1 / (1 + x**4)**(S(1)/4), [x, 0, oo]))\r\n  File \"/home/eward/se/sympy/integrals/integrals.py\", line 1522, in integrate\r\n    return integral.doit(**doit_flags)\r\n  File \"/home/eward/se/sympy/integrals/integrals.py\", line 669, in doit\r\n    evalued = Add(*others)._eval_interval(x, a, b)\r\n  File \"/home/eward/se/sympy/core/expr.py\", line 964, in _eval_interval\r\n    B = _eval_endpoint(left=False)\r\n  File \"/home/eward/se/sympy/core/expr.py\", line 949, in _eval_endpoint\r\n    C = limit(self, x, c, \"+\" if left else \"-\")\r\n  File \"/home/eward/se/sympy/series/limits.py\", line 71, in limit\r\n    return Limit(e, z, z0, dir).doit(deep=False)\r\n  File \"/home/eward/se/sympy/series/limits.py\", line 261, in doit\r\n    r = gruntz(e, z, z0, dir)\r\n  File \"/home/eward/se/sympy/series/gruntz.py\", line 671, in gruntz\r\n    r = limitinf(e0, z)\r\n  File \"/home/eward/se/sympy/core/cache.py\", line 94, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\n  File \"/home/eward/se/sympy/series/gruntz.py\", line 435, in limitinf\r\n    c0, e0 = mrv_leadterm(e, x)\r\n  File \"/home/eward/se/sympy/core/cache.py\", line 94, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\n  File \"/home/eward/se/sympy/series/gruntz.py\", line 524, in mrv_leadterm\r\n    series = calculate_series(f, w, logx=logw)\r\n  File \"/home/eward/se/sympy/series/gruntz.py\", line 477, in calculate_series\r\n    for t in e.lseries(x, logx=logx):\r\n  File \"/home/eward/se/sympy/core/expr.py\", line 2924, in yield_lseries\r\n    for si in s:\r\n  File \"/home/eward/se/sympy/core/expr.py\", line 3136, in _eval_lseries\r\n    series = self._eval_nseries(x, n=n, logx=logx)\r\n  File \"/home/eward/se/sympy/core/mul.py\", line 1749, in _eval_nseries\r\n    terms = [t.nseries(x, n=n, logx=logx) for t in self.args]\r\n  File \"/home/eward/se/sympy/core/mul.py\", line 1749, in <listcomp>\r\n    terms = [t.nseries(x, n=n, logx=logx) for t in self.args]\r\n  File \"/home/eward/se/sympy/core/expr.py\", line 3223, in nseries\r\n    return self._eval_nseries(x, n=n, logx=logx)\r\n  File \"/home/eward/se/sympy/core/function.py\", line 673, in _eval_nseries\r\n    a = [t.compute_leading_term(x, logx=logx) for t in args]\r\n  File \"/home/eward/se/sympy/core/function.py\", line 673, in <listcomp>\r\n    a = [t.compute_leading_term(x, logx=logx) for t in args]\r\nAttributeError: 'TupleArg' object has no attribute 'compute_leading_term'\r\n```\r\n\r\nIt is trying to compute the `nseries` of a hypergeometric function:\r\n\r\n```\r\n>>> hyper((S(1)/4, S(1)/4), (S(5)/4,), exp_polar(I*pi)/x**4).nseries()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/eward/se/sympy/core/expr.py\", line 3221, in nseries\r\n    return self.series(x, x0, n, dir)\r\n  File \"/home/eward/se/sympy/core/expr.py\", line 2870, in series\r\n    rv = self.subs(x, xpos).series(xpos, x0, n, dir, logx=logx)\r\n  File \"/home/eward/se/sympy/core/expr.py\", line 2877, in series\r\n    s1 = self._eval_nseries(x, n=n, logx=logx)\r\n  File \"/home/eward/se/sympy/core/function.py\", line 673, in _eval_nseries\r\n    a = [t.compute_leading_term(x, logx=logx) for t in args]\r\n  File \"/home/eward/se/sympy/core/function.py\", line 673, in <listcomp>\r\n    a = [t.compute_leading_term(x, logx=logx) for t in args]\r\nAttributeError: 'TupleArg' object has no attribute 'compute_leading_term'\r\n```\n",
  "hints_text": "It seems that `hyper` (and other special functions) should have a private `_eval_nseries` method implemented.\nI would like to work on this. Could someone please guide where should i start.\nI would start by studying the existing implementations. Those can be found by running `git grep 'def _eval_nseries'`.\nWhy are the following limits taken and how are conditions which decide whether `super()._eval_nseries()` or `self._eval_nseries()` will be called determined ?\r\nhttps://github.com/sympy/sympy/blob/c31a29a77a8b405d19ef79193ff0878345c62189/sympy/functions/elementary/trigonometric.py#L1136\r\n\r\nhttps://github.com/sympy/sympy/blob/c31a29a77a8b405d19ef79193ff0878345c62189/sympy/functions/special/gamma_functions.py#L195-L196\n@jksuom will something like this work:\r\n```\r\ndef _eval_nseries(self, x, n, logx, ap, bq):\r\n\r\n\tfrom sympy.functions import factorial, RisingFactorial\r\n\r\n\tx0 = self.args[0].limit(x, 0)\r\n\r\n\tif not(x0==0):\r\n\treturn super(gamma, self)._eval_nseries(x, n, logx)\r\n\r\n\tRf1 = 1\r\n\tRf2 = 1\r\n\tsum = 0\r\n\r\n\tfor i in range(n):\r\n\t\tfor p in range(len(ap)):\r\n\t\t\tRf1 *= RisingFactorial(a,p+1)\r\n\t\t\r\n\t\tfor q in range(len(bq)):\r\n\t\t\tRf2 *= RisingFactorial(b,q+1)\r\n\r\n\t\tsum += ((Rf1/Rf2)*(x**i))/factorial(i)\r\n\r\n\treturn sum\r\n```\r\nAnother idea I had was to use an approach similar to ` _eval_rewrite_as_Sum()` but instead of taking a dummy variable a loop could be implemented\n> def _eval_nseries(self, x, n, logx, ap, bq)\r\n\r\n`_eval_nseries` has no parameters `ap`, `bq`. If this is for `hyper` (as I assume), then these are the first two arguments of `self`: `self.args[0]` and `self.args[1]`. `x0` will be obtained from `self.args[2]`. This can be seen from the code where instances of `hyper` are created: https://github.com/sympy/sympy/blob/a8a3a3b026cc55aa14010fc7cd7909806b6e116c/sympy/functions/special/hyper.py#L185-L187\r\n\r\n`not(x0==0)` is usually written `x0 != 0`.\r\n`return super(gamma, self)._eval_nseries(x, n, logx)`  should not contain gamma if this is for hyper. In fact, I think that `super()` should suffice as Python 2 need not be supported.\r\n\r\nOtherwise, the series expansion looks correct (though I did not check carefully).\n@jksuom I made the following changes but there are some tests failing locally.\r\n```\r\n--- a/sympy/functions/special/hyper.py\r\n+++ b/sympy/functions/special/hyper.py\r\n@@ -220,6 +220,32 @@ def _eval_rewrite_as_Sum(self, ap, bq, z, **kwargs):\r\n         return Piecewise((Sum(coeff * z**n / factorial(n), (n, 0, oo)),\r\n                          self.convergence_statement), (self, True))\r\n\r\n+    def _eval_nseries(self, x, n, logx):\r\n+\r\n+        from sympy.functions import factorial, RisingFactorial\r\n+\r\n+        x0 = self.args[2].limit(x, 0)\r\n+        ap = self.args[0]\r\n+        bq = self.args[1]\r\n+\r\n+        if x0 != 0:\r\n+            return super()._eval_nseries(x, n, logx)\r\n+\r\n+        Rf1 = 1\r\n+        Rf2 = 1\r\n+        series = 0\r\n+\r\n+        for i in range(n):\r\n+            for a in ap:\r\n+                Rf1 *= RisingFactorial(a, i)\r\n+\r\n+            for b in bq:\r\n+                Rf2 *= RisingFactorial(b, i)\r\n+\r\n+            series += ((Rf1 / Rf2) * (x ** i)) / factorial(i)\r\n+\r\n+        return series\r\n+\r\n     @property\r\n     def argument(self):\r\n         \"\"\" Argument of the hypergeometric function. \"\"\"\r\n\r\n```\r\n```\r\n________________________________________________________________________________\r\n_______ sympy\\functions\\special\\tests\\test_elliptic_integrals.py:test_K ________\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\mendiratta\\sympy\\sympy\\functions\\special\\tests\\test_elliptic_integrals.py\", line 41, in test_K\r\n    25*pi*z**3/512 + 1225*pi*z**4/32768 + 3969*pi*z**5/131072 + O(z**6)\r\nAssertionError\r\n________________________________________________________________________________\r\n_______ sympy\\functions\\special\\tests\\test_elliptic_integrals.py:test_E ________\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\mendiratta\\sympy\\sympy\\functions\\special\\tests\\test_elliptic_integrals.py\", line 111, in test_E\r\n    5*pi*z**3/512 - 175*pi*z**4/32768 - 441*pi*z**5/131072 + O(z**6)\r\nAssertionError\r\n________________________________________________________________________________\r\n___________ sympy\\functions\\special\\tests\\test_hyper.py:test_limits ____________\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\mendiratta\\sympy\\sympy\\functions\\special\\tests\\test_hyper.py\", line 347, in test_limits\r\n    O(k**6) # issue 6350\r\nAssertionError\r\n\r\n tests finished: 441 passed, 3 failed, 12 skipped, 10 expected to fail,\r\nin 146.80 seconds\r\nDO *NOT* COMMIT!\r\n```\r\nI can't understand why\r\n\r\n",
  "created_at": "2020-02-10T20:55:10Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_limits\"]",
  "PASS_TO_PASS": "[\"test_TupleParametersBase\", \"test_hyper\", \"test_expand_func\", \"test_hyper_rewrite_sum\", \"test_radius_of_convergence\", \"test_meijer\", \"test_meijerg_derivative\", \"test_meijerg_period\", \"test_hyper_unpolarify\", \"test_appellf1\", \"test_derivative_appellf1\"]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.125162",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}