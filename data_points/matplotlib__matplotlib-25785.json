{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25785",
  "base_commit": "950d0db55ac04e663d523144882af0ec2d172420",
  "patch": "diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py\n--- a/lib/matplotlib/backends/backend_ps.py\n+++ b/lib/matplotlib/backends/backend_ps.py\n@@ -867,18 +867,24 @@ def _print_figure(\n         # find the appropriate papertype\n         width, height = self.figure.get_size_inches()\n         if papertype == 'auto':\n-            papertype = _get_papertype(\n-                *orientation.swap_if_landscape((width, height)))\n-        paper_width, paper_height = orientation.swap_if_landscape(\n-            papersize[papertype])\n+            _api.warn_deprecated(\"3.8\", name=\"papertype='auto'\",\n+                                 addendum=\"Pass an explicit paper type, or omit the \"\n+                                 \"*papertype* argument entirely.\")\n+            papertype = _get_papertype(*orientation.swap_if_landscape((width, height)))\n \n-        if mpl.rcParams['ps.usedistiller']:\n-            # distillers improperly clip eps files if pagesize is too small\n-            if width > paper_width or height > paper_height:\n-                papertype = _get_papertype(\n-                    *orientation.swap_if_landscape((width, height)))\n-                paper_width, paper_height = orientation.swap_if_landscape(\n-                    papersize[papertype])\n+        if is_eps:\n+            paper_width, paper_height = width, height\n+        else:\n+            paper_width, paper_height = orientation.swap_if_landscape(\n+                papersize[papertype])\n+\n+            if mpl.rcParams['ps.usedistiller']:\n+                # distillers improperly clip eps files if pagesize is too small\n+                if width > paper_width or height > paper_height:\n+                    papertype = _get_papertype(\n+                        *orientation.swap_if_landscape((width, height)))\n+                    paper_width, paper_height = orientation.swap_if_landscape(\n+                        papersize[papertype])\n \n         # center the figure on the paper\n         xo = 72 * 0.5 * (paper_width - width)\n@@ -1055,6 +1061,9 @@ def _print_figure_tex(\n                     self.figure.get_size_inches())\n             else:\n                 if papertype == 'auto':\n+                    _api.warn_deprecated(\"3.8\", name=\"papertype='auto'\",\n+                                         addendum=\"Pass an explicit paper type, or \"\n+                                         \"omit the *papertype* argument entirely.\")\n                     papertype = _get_papertype(width, height)\n                 paper_width, paper_height = papersize[papertype]\n \ndiff --git a/lib/matplotlib/rcsetup.py b/lib/matplotlib/rcsetup.py\n--- a/lib/matplotlib/rcsetup.py\n+++ b/lib/matplotlib/rcsetup.py\n@@ -438,6 +438,19 @@ def validate_ps_distiller(s):\n         return ValidateInStrings('ps.usedistiller', ['ghostscript', 'xpdf'])(s)\n \n \n+def _validate_papersize(s):\n+    # Re-inline this validator when the 'auto' deprecation expires.\n+    s = ValidateInStrings(\"ps.papersize\",\n+                          [\"auto\", \"letter\", \"legal\", \"ledger\",\n+                           *[f\"{ab}{i}\" for ab in \"ab\" for i in range(11)]],\n+                          ignorecase=True)(s)\n+    if s == \"auto\":\n+        _api.warn_deprecated(\"3.8\", name=\"ps.papersize='auto'\",\n+                             addendum=\"Pass an explicit paper type, or omit the \"\n+                             \"*ps.papersize* rcParam entirely.\")\n+    return s\n+\n+\n # A validator dedicated to the named line styles, based on the items in\n # ls_mapper, and a list of possible strings read from Line2D.set_linestyle\n _validate_named_linestyle = ValidateInStrings(\n@@ -1180,9 +1193,7 @@ def _convert_validator_spec(key, conv):\n     \"tk.window_focus\": validate_bool,  # Maintain shell focus for TkAgg\n \n     # Set the papersize/type\n-    \"ps.papersize\":       _ignorecase([\"auto\", \"letter\", \"legal\", \"ledger\",\n-                                      *[f\"{ab}{i}\"\n-                                        for ab in \"ab\" for i in range(11)]]),\n+    \"ps.papersize\":       _validate_papersize,\n     \"ps.useafm\":          validate_bool,\n     # use ghostscript or xpdf to distill ps output\n     \"ps.usedistiller\":    validate_ps_distiller,\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -336,3 +336,12 @@ def test_colorbar_shift(tmp_path):\n     norm = mcolors.BoundaryNorm([-1, -0.5, 0.5, 1], cmap.N)\n     plt.scatter([0, 1], [1, 1], c=[0, 1], cmap=cmap, norm=norm)\n     plt.colorbar()\n+\n+\n+def test_auto_papersize_deprecation():\n+    fig = plt.figure()\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning):\n+        fig.savefig(io.BytesIO(), format='eps', papertype='auto')\n+\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning):\n+        mpl.rcParams['ps.papersize'] = 'auto'\n",
  "problem_statement": "automatic papersize selection by ps backend is almost certainly broken\nNo minimal example, but the relevant chunk (`backend_ps.py`) is\r\n```python\r\npapersize = {'letter': (8.5,11),\r\n             'legal': (8.5,14),\r\n             'ledger': (11,17),\r\n             'a0': (33.11,46.81),\r\n             'a1': (23.39,33.11),\r\n             <elided>\r\n             'a10': (1.02,1.457),\r\n             'b0': (40.55,57.32),\r\n             'b1': (28.66,40.55),\r\n             <elided>\r\n             'b10': (1.26,1.76)}\r\n\r\ndef _get_papertype(w, h):\r\n    keys = list(six.iterkeys(papersize))\r\n    keys.sort()\r\n    keys.reverse()\r\n    for key in keys:\r\n        if key.startswith('l'): continue\r\n        pw, ph = papersize[key]\r\n        if (w < pw) and (h < ph): return key\r\n    else:\r\n        return 'a0'\r\n```\r\n\r\nNote that the sorting is by name, which means that the size is the first one among \"a9, a8, ..., a2, a10, a1, b9, b8, ..., b2, b10, b1\" (in that order) that is larger than the requested size -- which makes no sense.\r\n\n",
  "hints_text": "Currently the code looks like:\r\nhttps://github.com/matplotlib/matplotlib/blob/9caa261595267001d75334a00698da500b0e4eef/lib/matplotlib/backends/backend_ps.py#L80-L85\r\nso slightly different sorting. I guess that\r\n`sorted(papersize.items(), key=lambda v: v[1])` will be better as it gives:\r\n```\r\n{'a10': (1.02, 1.46),\r\n 'b10': (1.26, 1.76),\r\n 'a9': (1.46, 2.05),\r\n 'b9': (1.76, 2.51),\r\n 'a8': (2.05, 2.91),\r\n 'b8': (2.51, 3.58),\r\n 'a7': (2.91, 4.13),\r\n 'b7': (3.58, 5.04),\r\n 'a6': (4.13, 5.83),\r\n 'b6': (5.04, 7.16),\r\n 'a5': (5.83, 8.27),\r\n 'b5': (7.16, 10.11),\r\n 'a4': (8.27, 11.69),\r\n 'letter': (8.5, 11),\r\n 'legal': (8.5, 14),\r\n 'b4': (10.11, 14.33),\r\n 'ledger': (11, 17),\r\n 'a3': (11.69, 16.54),\r\n 'b3': (14.33, 20.27),\r\n 'a2': (16.54, 23.39),\r\n 'b2': (20.27, 28.66),\r\n 'a1': (23.39, 33.11),\r\n 'b1': (28.66, 40.55),\r\n 'a0': (33.11, 46.81),\r\n 'b0': (40.55, 57.32)}\r\n```\nThis issue has been marked \"inactive\" because it has been 365 days since the last comment. If this issue is still present in recent Matplotlib releases, or the feature request is still wanted, please leave a comment and this label will be removed. If there are no updates in another 30 days, this issue will be automatically closed, but you are free to re-open or create a new issue if needed. We value issue reports, and this procedure is meant to help us resurface and prioritize issues that have not been addressed yet, not make them disappear.  Thanks for your help!\nBased on the discussions in #22796 this is very hard to fix in a back compatible way. (But easy to fix as such.)\r\n\r\nThere were some discussions if we actually require ps, as most people probably use eps anyway. One solution is to introduce a pending deprecation for ps and see the reactions?\nMy preference would be to completely deprecate and then drop papersize, and make ps output at the size of the figure, like all other backends.  We *could* (if there's really demand for it) additionally support `figsize=\"a4\"` (and similar), auto-translating these to the corresponding inches sizes (this would not be equivalent to papersize, as the axes would default to spanning the entire papersize minus the paddings).\nTalked about this on the call, the consensus was to remove the \"auto\" feature.",
  "created_at": "2023-04-28T02:15:05Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_backend_ps.py::test_auto_papersize_deprecation\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-portrait]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-landscape]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-portrait]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-landscape]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps\", \"lib/matplotlib/tests/test_backend_ps.py::test_patheffects\", \"lib/matplotlib/tests/test_backend_ps.py::test_transparency[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_bbox\", \"lib/matplotlib/tests/test_backend_ps.py::test_failing_latex\", \"lib/matplotlib/tests/test_backend_ps.py::test_useafm[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_type3_font[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_colored_hatch_zero_linewidth[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_text_clip[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_d_glyph\", \"lib/matplotlib/tests/test_backend_ps.py::test_type42_font_without_prep[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_fonttype[3]\", \"lib/matplotlib/tests/test_backend_ps.py::test_fonttype[42]\", \"lib/matplotlib/tests/test_backend_ps.py::test_linedash\", \"lib/matplotlib/tests/test_backend_ps.py::test_empty_line\", \"lib/matplotlib/tests/test_backend_ps.py::test_no_duplicate_definition\", \"lib/matplotlib/tests/test_backend_ps.py::test_path_collection[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_colorbar_shift[eps]\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.825577",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}