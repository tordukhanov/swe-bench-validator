{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-16943",
  "base_commit": "a6232c17a6d3c79e95353924df3a3cd062df0708",
  "patch": "diff --git a/sympy/series/formal.py b/sympy/series/formal.py\n--- a/sympy/series/formal.py\n+++ b/sympy/series/formal.py\n@@ -779,7 +779,11 @@ def _compute_fps(f, x, x0, dir, hyper, order, rational, full):\n                 result[2].subs(x, rep2 + rep2b))\n \n     if f.is_polynomial(x):\n-        return None\n+        k = Dummy('k')\n+        ak = sequence(Coeff(f, x, k), (k, 1, oo))\n+        xk = sequence(x**k, (k, 0, oo))\n+        ind = f.coeff(x, 0)\n+        return ak, xk, ind\n \n     #  Break instances of Add\n     #  this allows application of different\n@@ -901,6 +905,16 @@ def compute_fps(f, x, x0=0, dir=1, hyper=True, order=4, rational=True,\n     return _compute_fps(f, x, x0, dir, hyper, order, rational, full)\n \n \n+class Coeff(Function):\n+    \"\"\"\n+    Coeff(p, x, n) represents the nth coefficient of the polynomial p in x\n+    \"\"\"\n+    @classmethod\n+    def eval(cls, p, x, n):\n+        if p.is_polynomial(x) and n.is_integer:\n+            return p.coeff(x, n)\n+\n+\n class FormalPowerSeries(SeriesBase):\n     \"\"\"Represents Formal Power Series of a function.\n \n",
  "test_patch": "diff --git a/sympy/core/tests/test_args.py b/sympy/core/tests/test_args.py\n--- a/sympy/core/tests/test_args.py\n+++ b/sympy/core/tests/test_args.py\n@@ -3824,6 +3824,10 @@ def test_sympy__series__formal__FormalPowerSeries():\n     from sympy.series.formal import fps\n     assert _test_args(fps(log(1 + x), x))\n \n+def test_sympy__series__formal__Coeff():\n+    from sympy.series.formal import fps\n+    assert _test_args(fps(x**2 + x + 1, x))\n+\n \n def test_sympy__simplify__hyperexpand__Hyper_Function():\n     from sympy.simplify.hyperexpand import Hyper_Function\ndiff --git a/sympy/series/tests/test_formal.py b/sympy/series/tests/test_formal.py\n--- a/sympy/series/tests/test_formal.py\n+++ b/sympy/series/tests/test_formal.py\n@@ -146,10 +146,17 @@ def test_fps():\n     assert fps(2, x) == 2\n     assert fps(2, x, dir='+') == 2\n     assert fps(2, x, dir='-') == 2\n-    assert fps(x**2 + x + 1) == x**2 + x + 1\n     assert fps(1/x + 1/x**2) == 1/x + 1/x**2\n     assert fps(log(1 + x), hyper=False, rational=False) == log(1 + x)\n \n+    f = fps(x**2 + x + 1)\n+    assert isinstance(f, FormalPowerSeries)\n+    assert f.function == x**2 + x + 1\n+    assert f[0] == 1\n+    assert f[2] == x**2\n+    assert f.truncate(4) == x**2 + x + 1 + O(x**4)\n+    assert f.polynomial() == x**2 + x + 1\n+\n     f = fps(log(1 + x))\n     assert isinstance(f, FormalPowerSeries)\n     assert f.function == log(1 + x)\n",
  "problem_statement": "sympy.fps doesn't always return a formal power series\nSee the following:\r\n\r\n```pycon\r\n>>> from sympy import Symbol, fps\r\n>>> x = Symbol('x')\r\n>>> p = fps(x ** 2)\r\n>>> p\r\nx**2\r\n>>> type(p)\r\n<class 'sympy.core.power.Pow'>\r\n>>> p[0]\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: 'Pow' object does not support indexing\r\n```\r\n\r\nI assume the logic is that the value in question is already a polynomial so doesn't need expansion, but it doesn't support the same interface, and [the documentation](http://docs.sympy.org/dev/modules/series/formal.html#sympy.series.formal.fps) doesn't suggest that this is what is supposed to happen.\nfix issue #12310\nFixes #12310\n",
  "hints_text": "well could you please elaborate your issue, as of documentation it returns correct without `O` term\r\nif you wish to have value of p(0) try p.subs(x,0)\nThe issue is that the returned value is not a FormalPowerSeries object and doesn't support the same interface as it, so why is it being returned from a method that claims that's what it returns? \nI might be not completely sure about this, but according to what I understand fps can only be computed for a field, that is a series upto infinite number of terms, and I think that x**2 is treated here as an expression. Therefore it will not support the the same interface\nThere's no mathematical problem with treating a polynomial as a formal power series - it's just a power series where only finitely many coefficients are non zero. \r\n\r\nMy basic point remains:\r\n\r\n* the method's documentation says it returns a formal power series\r\n* it is not returning a formal power series\r\n* this seems bad, and implies that one of the documentation or the method must be wrong\r\n\r\nIt would seem very odd for this to be intended behaviour and it sharply limits the utility of the method if that is the case, but even if it is intended it's at the bare minimum a documentation bug. \nI agree that it doesn't makes sense to treat polynomials separately. \n@DRMacIver @asmeurer The documentation needs to updated. The documentation doesn't tell what the method returns if it is unable to compute the formal power series. In usage it just returns the expression unchanged. I did this keeping in mind how the series function works.\r\n\r\n```\r\n>>> series(x**2)\r\nx**2\r\n```\r\n\r\nWe need to think, if it is okay, to keep it as is and just update the documentation or should we raise an error? In either case documentation needs updation. Also, this is not the first time, users have been confused by this functionality.\n> The documentation doesn't tell what the method returns if it is unable to compute the formal power series.\r\n\r\nCould you elaborate on what's going on here? I don't see why it should be unable to compute a formal power series - as mentioned above, there's no problem with formal power series for polynomials, they just have all but finitely many coefficients zero.\r\n\r\nIt also seems like a very strange choice to return the value unmodified if it can't compute a formal power series as opposed to raising an error.\nI raised a similar concern [here](https://github.com/sympy/sympy/issues/11102). I think it should error, rather than returning the expression unchanged. That way you can always assume that the return value is a formal power series. \r\n\r\nAnd I agree that polynomials should be trivially representable as formal power series. \n+1. Agreed.\nI imagine making it error should be an easy change.\r\n\r\nHow hard is it to make the power series of polynomials work? Does it need a symbolic formula? The symbolic formula for the nth coefficient of p(x) is just coefficient(p(x), n), but we don't currently have a symbolic coefficient function. \nAlthough writing one would be trivial:\r\n\r\n```py\r\nclass Coeff(Function):\r\n    \"\"\"\r\n    Coeff(p, x, n) represents the nth coefficient of the polynomial p in x\r\n    \"\"\"\r\n    @classmethod\r\n    def eval(cls, p, x, n):\r\n        if p.is_polynomial and n.is_integer:\r\n            return p.coeff(x, n)\r\n```\n> How hard is it to make the power series of polynomials work? Does it need a symbolic formula? The symbolic formula for the nth coefficient of p(x) is just coefficient(p(x), n), but we don't currently have a symbolic coefficient function.\r\n\r\nWell there is a need to define a function that identifies the polynomials and converts them to a ``FormalPowerSeries`` object. Which essentially means finding out a formula for the coefficients and the powers of x (``ak`` and ``xk`` in the documentation). Both of which will can be a simple ``Piecewise`` function. I am not sure how hard this will be. I will try to look into the code, if I can find an easy solution.\nThat Coeff class I suggested would be the formula. You could also represent it with existing functions like with Piecewise or with Subs and derivatives, but a new Coeff object would be the clearest and also the most efficient. \n> That Coeff class I suggested would be the formula. You could also represent it with existing functions like with Piecewise or with Subs and derivatives, but a new Coeff object would be the clearest and also the most efficient.\r\n\r\nSomehow, missed your suggestion. Just did a small test. It seems to work very well.\r\n+1 for implementing this.\n",
  "created_at": "2019-06-02T14:57:30Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_fps\"]",
  "PASS_TO_PASS": "[\"test_all_classes_are_tested\", \"test_sympy__assumptions__assume__AppliedPredicate\", \"test_sympy__assumptions__assume__Predicate\", \"test_sympy__assumptions__sathandlers__UnevaluatedOnFree\", \"test_sympy__assumptions__sathandlers__AllArgs\", \"test_sympy__assumptions__sathandlers__AnyArgs\", \"test_sympy__assumptions__sathandlers__ExactlyOneArg\", \"test_sympy__assumptions__sathandlers__CheckOldAssump\", \"test_sympy__assumptions__sathandlers__CheckIsPrime\", \"test_sympy__codegen__ast__AddAugmentedAssignment\", \"test_sympy__codegen__ast__SubAugmentedAssignment\", \"test_sympy__codegen__ast__MulAugmentedAssignment\", \"test_sympy__codegen__ast__DivAugmentedAssignment\", \"test_sympy__codegen__ast__ModAugmentedAssignment\", \"test_sympy__codegen__ast__CodeBlock\", \"test_sympy__codegen__ast__For\", \"test_sympy__codegen__ast__Token\", \"test_sympy__codegen__ast__ContinueToken\", \"test_sympy__codegen__ast__BreakToken\", \"test_sympy__codegen__ast__NoneToken\", \"test_sympy__codegen__ast__String\", \"test_sympy__codegen__ast__QuotedString\", \"test_sympy__codegen__ast__Comment\", \"test_sympy__codegen__ast__Node\", \"test_sympy__codegen__ast__Type\", \"test_sympy__codegen__ast__IntBaseType\", \"test_sympy__codegen__ast___SizedIntType\", \"test_sympy__codegen__ast__SignedIntType\", \"test_sympy__codegen__ast__UnsignedIntType\", \"test_sympy__codegen__ast__FloatBaseType\", \"test_sympy__codegen__ast__FloatType\", \"test_sympy__codegen__ast__ComplexBaseType\", \"test_sympy__codegen__ast__ComplexType\", \"test_sympy__codegen__ast__Attribute\", \"test_sympy__codegen__ast__Variable\", \"test_sympy__codegen__ast__Pointer\", \"test_sympy__codegen__ast__Declaration\", \"test_sympy__codegen__ast__While\", \"test_sympy__codegen__ast__Scope\", \"test_sympy__codegen__ast__Stream\", \"test_sympy__codegen__ast__Print\", \"test_sympy__codegen__ast__FunctionPrototype\", \"test_sympy__codegen__ast__FunctionDefinition\", \"test_sympy__codegen__ast__Return\", \"test_sympy__codegen__ast__FunctionCall\", \"test_sympy__codegen__ast__Element\", \"test_sympy__codegen__cnodes__CommaOperator\", \"test_sympy__codegen__cnodes__goto\", \"test_sympy__codegen__cnodes__Label\", \"test_sympy__codegen__cnodes__PreDecrement\", \"test_sympy__codegen__cnodes__PostDecrement\", \"test_sympy__codegen__cnodes__PreIncrement\", \"test_sympy__codegen__cnodes__PostIncrement\", \"test_sympy__codegen__cnodes__struct\", \"test_sympy__codegen__cnodes__union\", \"test_sympy__codegen__cxxnodes__using\", \"test_sympy__codegen__fnodes__Program\", \"test_sympy__codegen__fnodes__Module\", \"test_sympy__codegen__fnodes__Subroutine\", \"test_sympy__codegen__fnodes__GoTo\", \"test_sympy__codegen__fnodes__FortranReturn\", \"test_sympy__codegen__fnodes__Extent\", \"test_sympy__codegen__fnodes__use_rename\", \"test_sympy__codegen__fnodes__use\", \"test_sympy__codegen__fnodes__SubroutineCall\", \"test_sympy__codegen__fnodes__Do\", \"test_sympy__codegen__fnodes__ImpliedDoLoop\", \"test_sympy__codegen__fnodes__ArrayConstructor\", \"test_sympy__codegen__fnodes__sum_\", \"test_sympy__codegen__fnodes__product_\", \"test_sympy__combinatorics__subsets__Subset\", \"test_sympy__combinatorics__perm_groups__PermutationGroup\", \"test_sympy__combinatorics__polyhedron__Polyhedron\", \"test_sympy__combinatorics__partitions__Partition\", \"test_sympy__concrete__products__Product\", \"test_sympy__concrete__summations__Sum\", \"test_sympy__core__add__Add\", \"test_sympy__core__basic__Atom\", \"test_sympy__core__basic__Basic\", \"test_sympy__core__containers__Dict\", \"test_sympy__core__containers__Tuple\", \"test_sympy__core__expr__AtomicExpr\", \"test_sympy__core__expr__Expr\", \"test_sympy__core__expr__UnevaluatedExpr\", \"test_sympy__core__function__Application\", \"test_sympy__core__function__AppliedUndef\", \"test_sympy__core__function__Derivative\", \"test_sympy__core__function__Lambda\", \"test_sympy__core__function__Subs\", \"test_sympy__core__function__WildFunction\", \"test_sympy__core__mod__Mod\", \"test_sympy__core__mul__Mul\", \"test_sympy__core__numbers__Catalan\", \"test_sympy__core__numbers__ComplexInfinity\", \"test_sympy__core__numbers__EulerGamma\", \"test_sympy__core__numbers__Exp1\", \"test_sympy__core__numbers__Float\", \"test_sympy__core__numbers__GoldenRatio\", \"test_sympy__core__numbers__TribonacciConstant\", \"test_sympy__core__numbers__Half\", \"test_sympy__core__numbers__ImaginaryUnit\", \"test_sympy__core__numbers__Infinity\", \"test_sympy__core__numbers__Integer\", \"test_sympy__core__numbers__NaN\", \"test_sympy__core__numbers__NegativeInfinity\", \"test_sympy__core__numbers__NegativeOne\", \"test_sympy__core__numbers__Number\", \"test_sympy__core__numbers__NumberSymbol\", \"test_sympy__core__numbers__One\", \"test_sympy__core__numbers__Pi\", \"test_sympy__core__numbers__Rational\", \"test_sympy__core__numbers__Zero\", \"test_sympy__core__power__Pow\", \"test_sympy__algebras__quaternion__Quaternion\", \"test_sympy__core__relational__Equality\", \"test_sympy__core__relational__GreaterThan\", \"test_sympy__core__relational__LessThan\", \"test_sympy__core__relational__StrictGreaterThan\", \"test_sympy__core__relational__StrictLessThan\", \"test_sympy__core__relational__Unequality\", \"test_sympy__sandbox__indexed_integrals__IndexedIntegral\", \"test_sympy__calculus__util__AccumulationBounds\", \"test_sympy__sets__ordinals__OmegaPower\", \"test_sympy__sets__ordinals__Ordinal\", \"test_sympy__sets__ordinals__OrdinalOmega\", \"test_sympy__sets__ordinals__OrdinalZero\", \"test_sympy__sets__sets__EmptySet\", \"test_sympy__sets__sets__UniversalSet\", \"test_sympy__sets__sets__FiniteSet\", \"test_sympy__sets__sets__Interval\", \"test_sympy__sets__sets__ProductSet\", \"test_sympy__sets__sets__Intersection\", \"test_sympy__sets__sets__Union\", \"test_sympy__sets__sets__Complement\", \"test_sympy__sets__sets__SymmetricDifference\", \"test_sympy__core__trace__Tr\", \"test_sympy__sets__setexpr__SetExpr\", \"test_sympy__sets__fancysets__Naturals\", \"test_sympy__sets__fancysets__Naturals0\", \"test_sympy__sets__fancysets__Integers\", \"test_sympy__sets__fancysets__Reals\", \"test_sympy__sets__fancysets__Complexes\", \"test_sympy__sets__fancysets__ComplexRegion\", \"test_sympy__sets__fancysets__ImageSet\", \"test_sympy__sets__fancysets__Range\", \"test_sympy__sets__conditionset__ConditionSet\", \"test_sympy__sets__contains__Contains\", \"test_sympy__stats__crv__ContinuousDomain\", \"test_sympy__stats__crv__SingleContinuousDomain\", \"test_sympy__stats__crv__ProductContinuousDomain\", \"test_sympy__stats__crv__ConditionalContinuousDomain\", \"test_sympy__stats__crv__ContinuousPSpace\", \"test_sympy__stats__crv__SingleContinuousPSpace\", \"test_sympy__stats__drv__SingleDiscreteDomain\", \"test_sympy__stats__drv__ProductDiscreteDomain\", \"test_sympy__stats__drv__SingleDiscretePSpace\", \"test_sympy__stats__drv__DiscretePSpace\", \"test_sympy__stats__drv__ConditionalDiscreteDomain\", \"test_sympy__stats__joint_rv__JointPSpace\", \"test_sympy__stats__joint_rv__JointRandomSymbol\", \"test_sympy__stats__joint_rv__JointDistributionHandmade\", \"test_sympy__stats__joint_rv__MarginalDistribution\", \"test_sympy__stats__joint_rv__CompoundDistribution\", \"test_sympy__stats__rv__RandomDomain\", \"test_sympy__stats__rv__SingleDomain\", \"test_sympy__stats__rv__ConditionalDomain\", \"test_sympy__stats__rv__PSpace\", \"test_sympy__stats__rv__RandomSymbol\", \"test_sympy__stats__rv__IndependentProductPSpace\", \"test_sympy__stats__rv__ProductDomain\", \"test_sympy__stats__symbolic_probability__Probability\", \"test_sympy__stats__symbolic_probability__Expectation\", \"test_sympy__stats__symbolic_probability__Covariance\", \"test_sympy__stats__symbolic_probability__Variance\", \"test_sympy__stats__frv_types__DiscreteUniformDistribution\", \"test_sympy__stats__frv_types__DieDistribution\", \"test_sympy__stats__frv_types__BernoulliDistribution\", \"test_sympy__stats__frv_types__BinomialDistribution\", \"test_sympy__stats__frv_types__HypergeometricDistribution\", \"test_sympy__stats__frv_types__RademacherDistribution\", \"test_sympy__stats__frv__FiniteDomain\", \"test_sympy__stats__frv__SingleFiniteDomain\", \"test_sympy__stats__frv__ProductFiniteDomain\", \"test_sympy__stats__frv__ConditionalFiniteDomain\", \"test_sympy__stats__frv__FinitePSpace\", \"test_sympy__stats__frv__SingleFinitePSpace\", \"test_sympy__stats__frv__ProductFinitePSpace\", \"test_sympy__stats__frv_types__FiniteDistributionHandmade\", \"test_sympy__stats__crv__ContinuousDistributionHandmade\", \"test_sympy__stats__drv__DiscreteDistributionHandmade\", \"test_sympy__stats__rv__Density\", \"test_sympy__stats__crv_types__ArcsinDistribution\", \"test_sympy__stats__crv_types__BeniniDistribution\", \"test_sympy__stats__crv_types__BetaDistribution\", \"test_sympy__stats__crv_types__BetaNoncentralDistribution\", \"test_sympy__stats__crv_types__BetaPrimeDistribution\", \"test_sympy__stats__crv_types__CauchyDistribution\", \"test_sympy__stats__crv_types__ChiDistribution\", \"test_sympy__stats__crv_types__ChiNoncentralDistribution\", \"test_sympy__stats__crv_types__ChiSquaredDistribution\", \"test_sympy__stats__crv_types__DagumDistribution\", \"test_sympy__stats__crv_types__ExponentialDistribution\", \"test_sympy__stats__crv_types__FDistributionDistribution\", \"test_sympy__stats__crv_types__FisherZDistribution\", \"test_sympy__stats__crv_types__FrechetDistribution\", \"test_sympy__stats__crv_types__GammaInverseDistribution\", \"test_sympy__stats__crv_types__GammaDistribution\", \"test_sympy__stats__crv_types__GumbelDistribution\", \"test_sympy__stats__crv_types__GompertzDistribution\", \"test_sympy__stats__crv_types__KumaraswamyDistribution\", \"test_sympy__stats__crv_types__LaplaceDistribution\", \"test_sympy__stats__crv_types__LogisticDistribution\", \"test_sympy__stats__crv_types__LogLogisticDistribution\", \"test_sympy__stats__crv_types__LogNormalDistribution\", \"test_sympy__stats__crv_types__MaxwellDistribution\", \"test_sympy__stats__crv_types__NakagamiDistribution\", \"test_sympy__stats__crv_types__NormalDistribution\", \"test_sympy__stats__crv_types__GaussianInverseDistribution\", \"test_sympy__stats__crv_types__ParetoDistribution\", \"test_sympy__stats__crv_types__QuadraticUDistribution\", \"test_sympy__stats__crv_types__RaisedCosineDistribution\", \"test_sympy__stats__crv_types__RayleighDistribution\", \"test_sympy__stats__crv_types__ShiftedGompertzDistribution\", \"test_sympy__stats__crv_types__StudentTDistribution\", \"test_sympy__stats__crv_types__TrapezoidalDistribution\", \"test_sympy__stats__crv_types__TriangularDistribution\", \"test_sympy__stats__crv_types__UniformDistribution\", \"test_sympy__stats__crv_types__UniformSumDistribution\", \"test_sympy__stats__crv_types__VonMisesDistribution\", \"test_sympy__stats__crv_types__WeibullDistribution\", \"test_sympy__stats__crv_types__WignerSemicircleDistribution\", \"test_sympy__stats__drv_types__GeometricDistribution\", \"test_sympy__stats__drv_types__LogarithmicDistribution\", \"test_sympy__stats__drv_types__NegativeBinomialDistribution\", \"test_sympy__stats__drv_types__PoissonDistribution\", \"test_sympy__stats__drv_types__YuleSimonDistribution\", \"test_sympy__stats__drv_types__ZetaDistribution\", \"test_sympy__stats__joint_rv__JointDistribution\", \"test_sympy__stats__joint_rv_types__MultivariateNormalDistribution\", \"test_sympy__stats__joint_rv_types__MultivariateLaplaceDistribution\", \"test_sympy__stats__joint_rv_types__MultivariateTDistribution\", \"test_sympy__stats__joint_rv_types__NormalGammaDistribution\", \"test_sympy__stats__joint_rv_types__GeneralizedMultivariateLogGammaDistribution\", \"test_sympy__stats__joint_rv_types__MultivariateBetaDistribution\", \"test_sympy__stats__joint_rv_types__MultivariateEwensDistribution\", \"test_sympy__stats__joint_rv_types__MultinomialDistribution\", \"test_sympy__stats__joint_rv_types__NegativeMultinomialDistribution\", \"test_sympy__core__symbol__Dummy\", \"test_sympy__core__symbol__Symbol\", \"test_sympy__core__symbol__Wild\", \"test_sympy__functions__combinatorial__factorials__FallingFactorial\", \"test_sympy__functions__combinatorial__factorials__MultiFactorial\", \"test_sympy__functions__combinatorial__factorials__RisingFactorial\", \"test_sympy__functions__combinatorial__factorials__binomial\", \"test_sympy__functions__combinatorial__factorials__subfactorial\", \"test_sympy__functions__combinatorial__factorials__factorial\", \"test_sympy__functions__combinatorial__factorials__factorial2\", \"test_sympy__functions__combinatorial__numbers__bell\", \"test_sympy__functions__combinatorial__numbers__bernoulli\", \"test_sympy__functions__combinatorial__numbers__catalan\", \"test_sympy__functions__combinatorial__numbers__genocchi\", \"test_sympy__functions__combinatorial__numbers__euler\", \"test_sympy__functions__combinatorial__numbers__carmichael\", \"test_sympy__functions__combinatorial__numbers__fibonacci\", \"test_sympy__functions__combinatorial__numbers__tribonacci\", \"test_sympy__functions__combinatorial__numbers__harmonic\", \"test_sympy__functions__combinatorial__numbers__lucas\", \"test_sympy__functions__combinatorial__numbers__partition\", \"test_sympy__functions__elementary__complexes__Abs\", \"test_sympy__functions__elementary__complexes__adjoint\", \"test_sympy__functions__elementary__complexes__arg\", \"test_sympy__functions__elementary__complexes__conjugate\", \"test_sympy__functions__elementary__complexes__im\", \"test_sympy__functions__elementary__complexes__re\", \"test_sympy__functions__elementary__complexes__sign\", \"test_sympy__functions__elementary__complexes__polar_lift\", \"test_sympy__functions__elementary__complexes__periodic_argument\", \"test_sympy__functions__elementary__complexes__principal_branch\", \"test_sympy__functions__elementary__complexes__transpose\", \"test_sympy__functions__elementary__exponential__LambertW\", \"test_sympy__functions__elementary__exponential__exp\", \"test_sympy__functions__elementary__exponential__exp_polar\", \"test_sympy__functions__elementary__exponential__log\", \"test_sympy__functions__elementary__hyperbolic__acosh\", \"test_sympy__functions__elementary__hyperbolic__acoth\", \"test_sympy__functions__elementary__hyperbolic__asinh\", \"test_sympy__functions__elementary__hyperbolic__atanh\", \"test_sympy__functions__elementary__hyperbolic__asech\", \"test_sympy__functions__elementary__hyperbolic__acsch\", \"test_sympy__functions__elementary__hyperbolic__cosh\", \"test_sympy__functions__elementary__hyperbolic__coth\", \"test_sympy__functions__elementary__hyperbolic__csch\", \"test_sympy__functions__elementary__hyperbolic__sech\", \"test_sympy__functions__elementary__hyperbolic__sinh\", \"test_sympy__functions__elementary__hyperbolic__tanh\", \"test_sympy__functions__elementary__integers__ceiling\", \"test_sympy__functions__elementary__integers__floor\", \"test_sympy__functions__elementary__integers__frac\", \"test_sympy__functions__elementary__miscellaneous__IdentityFunction\", \"test_sympy__functions__elementary__miscellaneous__Max\", \"test_sympy__functions__elementary__miscellaneous__Min\", \"test_sympy__functions__elementary__piecewise__ExprCondPair\", \"test_sympy__functions__elementary__piecewise__Piecewise\", \"test_sympy__functions__elementary__trigonometric__acos\", \"test_sympy__functions__elementary__trigonometric__acot\", \"test_sympy__functions__elementary__trigonometric__asin\", \"test_sympy__functions__elementary__trigonometric__asec\", \"test_sympy__functions__elementary__trigonometric__acsc\", \"test_sympy__functions__elementary__trigonometric__atan\", \"test_sympy__functions__elementary__trigonometric__atan2\", \"test_sympy__functions__elementary__trigonometric__cos\", \"test_sympy__functions__elementary__trigonometric__csc\", \"test_sympy__functions__elementary__trigonometric__cot\", \"test_sympy__functions__elementary__trigonometric__sin\", \"test_sympy__functions__elementary__trigonometric__sinc\", \"test_sympy__functions__elementary__trigonometric__sec\", \"test_sympy__functions__elementary__trigonometric__tan\", \"test_sympy__functions__special__bessel__besseli\", \"test_sympy__functions__special__bessel__besselj\", \"test_sympy__functions__special__bessel__besselk\", \"test_sympy__functions__special__bessel__bessely\", \"test_sympy__functions__special__bessel__hankel1\", \"test_sympy__functions__special__bessel__hankel2\", \"test_sympy__functions__special__bessel__jn\", \"test_sympy__functions__special__bessel__yn\", \"test_sympy__functions__special__bessel__hn1\", \"test_sympy__functions__special__bessel__hn2\", \"test_sympy__functions__special__bessel__AiryBase\", \"test_sympy__functions__special__bessel__airyai\", \"test_sympy__functions__special__bessel__airybi\", \"test_sympy__functions__special__bessel__airyaiprime\", \"test_sympy__functions__special__bessel__airybiprime\", \"test_sympy__functions__special__elliptic_integrals__elliptic_k\", \"test_sympy__functions__special__elliptic_integrals__elliptic_f\", \"test_sympy__functions__special__elliptic_integrals__elliptic_e\", \"test_sympy__functions__special__elliptic_integrals__elliptic_pi\", \"test_sympy__functions__special__delta_functions__DiracDelta\", \"test_sympy__functions__special__singularity_functions__SingularityFunction\", \"test_sympy__functions__special__delta_functions__Heaviside\", \"test_sympy__functions__special__error_functions__erf\", \"test_sympy__functions__special__error_functions__erfc\", \"test_sympy__functions__special__error_functions__erfi\", \"test_sympy__functions__special__error_functions__erf2\", \"test_sympy__functions__special__error_functions__erfinv\", \"test_sympy__functions__special__error_functions__erfcinv\", \"test_sympy__functions__special__error_functions__erf2inv\", \"test_sympy__functions__special__error_functions__fresnels\", \"test_sympy__functions__special__error_functions__fresnelc\", \"test_sympy__functions__special__error_functions__erfs\", \"test_sympy__functions__special__error_functions__Ei\", \"test_sympy__functions__special__error_functions__li\", \"test_sympy__functions__special__error_functions__Li\", \"test_sympy__functions__special__error_functions__Si\", \"test_sympy__functions__special__error_functions__Ci\", \"test_sympy__functions__special__error_functions__Shi\", \"test_sympy__functions__special__error_functions__Chi\", \"test_sympy__functions__special__error_functions__expint\", \"test_sympy__functions__special__gamma_functions__gamma\", \"test_sympy__functions__special__gamma_functions__loggamma\", \"test_sympy__functions__special__gamma_functions__lowergamma\", \"test_sympy__functions__special__gamma_functions__polygamma\", \"test_sympy__functions__special__gamma_functions__uppergamma\", \"test_sympy__functions__special__beta_functions__beta\", \"test_sympy__functions__special__mathieu_functions__MathieuBase\", \"test_sympy__functions__special__mathieu_functions__mathieus\", \"test_sympy__functions__special__mathieu_functions__mathieuc\", \"test_sympy__functions__special__mathieu_functions__mathieusprime\", \"test_sympy__functions__special__mathieu_functions__mathieucprime\", \"test_sympy__functions__special__hyper__hyper\", \"test_sympy__functions__special__hyper__meijerg\", \"test_sympy__functions__special__hyper__HyperRep_power1\", \"test_sympy__functions__special__hyper__HyperRep_power2\", \"test_sympy__functions__special__hyper__HyperRep_log1\", \"test_sympy__functions__special__hyper__HyperRep_atanh\", \"test_sympy__functions__special__hyper__HyperRep_asin1\", \"test_sympy__functions__special__hyper__HyperRep_asin2\", \"test_sympy__functions__special__hyper__HyperRep_sqrts1\", \"test_sympy__functions__special__hyper__HyperRep_sqrts2\", \"test_sympy__functions__special__hyper__HyperRep_log2\", \"test_sympy__functions__special__hyper__HyperRep_cosasin\", \"test_sympy__functions__special__hyper__HyperRep_sinasin\", \"test_sympy__functions__special__hyper__appellf1\", \"test_sympy__functions__special__polynomials__jacobi\", \"test_sympy__functions__special__polynomials__gegenbauer\", \"test_sympy__functions__special__polynomials__chebyshevt\", \"test_sympy__functions__special__polynomials__chebyshevt_root\", \"test_sympy__functions__special__polynomials__chebyshevu\", \"test_sympy__functions__special__polynomials__chebyshevu_root\", \"test_sympy__functions__special__polynomials__hermite\", \"test_sympy__functions__special__polynomials__legendre\", \"test_sympy__functions__special__polynomials__assoc_legendre\", \"test_sympy__functions__special__polynomials__laguerre\", \"test_sympy__functions__special__polynomials__assoc_laguerre\", \"test_sympy__functions__special__spherical_harmonics__Ynm\", \"test_sympy__functions__special__spherical_harmonics__Znm\", \"test_sympy__functions__special__tensor_functions__LeviCivita\", \"test_sympy__functions__special__tensor_functions__KroneckerDelta\", \"test_sympy__functions__special__zeta_functions__dirichlet_eta\", \"test_sympy__functions__special__zeta_functions__zeta\", \"test_sympy__functions__special__zeta_functions__lerchphi\", \"test_sympy__functions__special__zeta_functions__polylog\", \"test_sympy__functions__special__zeta_functions__stieltjes\", \"test_sympy__integrals__integrals__Integral\", \"test_sympy__integrals__risch__NonElementaryIntegral\", \"test_sympy__integrals__transforms__MellinTransform\", \"test_sympy__integrals__transforms__InverseMellinTransform\", \"test_sympy__integrals__transforms__LaplaceTransform\", \"test_sympy__integrals__transforms__InverseLaplaceTransform\", \"test_sympy__integrals__transforms__InverseFourierTransform\", \"test_sympy__integrals__transforms__FourierTransform\", \"test_sympy__integrals__transforms__InverseSineTransform\", \"test_sympy__integrals__transforms__SineTransform\", \"test_sympy__integrals__transforms__InverseCosineTransform\", \"test_sympy__integrals__transforms__CosineTransform\", \"test_sympy__integrals__transforms__InverseHankelTransform\", \"test_sympy__integrals__transforms__HankelTransform\", \"test_sympy__logic__boolalg__And\", \"test_sympy__logic__boolalg__BooleanFunction\", \"test_sympy__logic__boolalg__BooleanTrue\", \"test_sympy__logic__boolalg__BooleanFalse\", \"test_sympy__logic__boolalg__Equivalent\", \"test_sympy__logic__boolalg__ITE\", \"test_sympy__logic__boolalg__Implies\", \"test_sympy__logic__boolalg__Nand\", \"test_sympy__logic__boolalg__Nor\", \"test_sympy__logic__boolalg__Not\", \"test_sympy__logic__boolalg__Or\", \"test_sympy__logic__boolalg__Xor\", \"test_sympy__logic__boolalg__Xnor\", \"test_sympy__matrices__matrices__DeferredVector\", \"test_sympy__matrices__immutable__ImmutableDenseMatrix\", \"test_sympy__matrices__immutable__ImmutableSparseMatrix\", \"test_sympy__matrices__expressions__slice__MatrixSlice\", \"test_sympy__matrices__expressions__applyfunc__ElementwiseApplyFunction\", \"test_sympy__matrices__expressions__blockmatrix__BlockDiagMatrix\", \"test_sympy__matrices__expressions__blockmatrix__BlockMatrix\", \"test_sympy__matrices__expressions__inverse__Inverse\", \"test_sympy__matrices__expressions__matadd__MatAdd\", \"test_sympy__matrices__expressions__matexpr__Identity\", \"test_sympy__matrices__expressions__matexpr__GenericIdentity\", \"test_sympy__matrices__expressions__matexpr__MatrixElement\", \"test_sympy__matrices__expressions__matexpr__MatrixSymbol\", \"test_sympy__matrices__expressions__matexpr__ZeroMatrix\", \"test_sympy__matrices__expressions__matexpr__OneMatrix\", \"test_sympy__matrices__expressions__matexpr__GenericZeroMatrix\", \"test_sympy__matrices__expressions__matmul__MatMul\", \"test_sympy__matrices__expressions__dotproduct__DotProduct\", \"test_sympy__matrices__expressions__diagonal__DiagonalMatrix\", \"test_sympy__matrices__expressions__diagonal__DiagonalOf\", \"test_sympy__matrices__expressions__diagonal__DiagonalizeVector\", \"test_sympy__matrices__expressions__hadamard__HadamardProduct\", \"test_sympy__matrices__expressions__hadamard__HadamardPower\", \"test_sympy__matrices__expressions__kronecker__KroneckerProduct\", \"test_sympy__matrices__expressions__matpow__MatPow\", \"test_sympy__matrices__expressions__transpose__Transpose\", \"test_sympy__matrices__expressions__adjoint__Adjoint\", \"test_sympy__matrices__expressions__trace__Trace\", \"test_sympy__matrices__expressions__determinant__Determinant\", \"test_sympy__matrices__expressions__funcmatrix__FunctionMatrix\", \"test_sympy__matrices__expressions__fourier__DFT\", \"test_sympy__matrices__expressions__fourier__IDFT\", \"test_sympy__matrices__expressions__factorizations__LofLU\", \"test_sympy__matrices__expressions__factorizations__UofLU\", \"test_sympy__matrices__expressions__factorizations__QofQR\", \"test_sympy__matrices__expressions__factorizations__RofQR\", \"test_sympy__matrices__expressions__factorizations__LofCholesky\", \"test_sympy__matrices__expressions__factorizations__UofCholesky\", \"test_sympy__matrices__expressions__factorizations__EigenVectors\", \"test_sympy__matrices__expressions__factorizations__EigenValues\", \"test_sympy__matrices__expressions__factorizations__UofSVD\", \"test_sympy__matrices__expressions__factorizations__VofSVD\", \"test_sympy__matrices__expressions__factorizations__SofSVD\", \"test_sympy__physics__vector__frame__CoordinateSym\", \"test_sympy__physics__paulialgebra__Pauli\", \"test_sympy__physics__quantum__anticommutator__AntiCommutator\", \"test_sympy__physics__quantum__cartesian__PositionBra3D\", \"test_sympy__physics__quantum__cartesian__PositionKet3D\", \"test_sympy__physics__quantum__cartesian__PositionState3D\", \"test_sympy__physics__quantum__cartesian__PxBra\", \"test_sympy__physics__quantum__cartesian__PxKet\", \"test_sympy__physics__quantum__cartesian__PxOp\", \"test_sympy__physics__quantum__cartesian__XBra\", \"test_sympy__physics__quantum__cartesian__XKet\", \"test_sympy__physics__quantum__cartesian__XOp\", \"test_sympy__physics__quantum__cartesian__YOp\", \"test_sympy__physics__quantum__cartesian__ZOp\", \"test_sympy__physics__quantum__cg__CG\", \"test_sympy__physics__quantum__cg__Wigner3j\", \"test_sympy__physics__quantum__cg__Wigner6j\", \"test_sympy__physics__quantum__cg__Wigner9j\", \"test_sympy__physics__quantum__circuitplot__Mz\", \"test_sympy__physics__quantum__circuitplot__Mx\", \"test_sympy__physics__quantum__commutator__Commutator\", \"test_sympy__physics__quantum__constants__HBar\", \"test_sympy__physics__quantum__dagger__Dagger\", \"test_sympy__physics__quantum__gate__CGate\", \"test_sympy__physics__quantum__gate__CGateS\", \"test_sympy__physics__quantum__gate__CNotGate\", \"test_sympy__physics__quantum__gate__Gate\", \"test_sympy__physics__quantum__gate__HadamardGate\", \"test_sympy__physics__quantum__gate__IdentityGate\", \"test_sympy__physics__quantum__gate__OneQubitGate\", \"test_sympy__physics__quantum__gate__PhaseGate\", \"test_sympy__physics__quantum__gate__SwapGate\", \"test_sympy__physics__quantum__gate__TGate\", \"test_sympy__physics__quantum__gate__TwoQubitGate\", \"test_sympy__physics__quantum__gate__UGate\", \"test_sympy__physics__quantum__gate__XGate\", \"test_sympy__physics__quantum__gate__YGate\", \"test_sympy__physics__quantum__gate__ZGate\", \"test_sympy__physics__quantum__grover__WGate\", \"test_sympy__physics__quantum__hilbert__ComplexSpace\", \"test_sympy__physics__quantum__hilbert__DirectSumHilbertSpace\", \"test_sympy__physics__quantum__hilbert__FockSpace\", \"test_sympy__physics__quantum__hilbert__HilbertSpace\", \"test_sympy__physics__quantum__hilbert__L2\", \"test_sympy__physics__quantum__hilbert__TensorPowerHilbertSpace\", \"test_sympy__physics__quantum__hilbert__TensorProductHilbertSpace\", \"test_sympy__physics__quantum__innerproduct__InnerProduct\", \"test_sympy__physics__quantum__operator__DifferentialOperator\", \"test_sympy__physics__quantum__operator__HermitianOperator\", \"test_sympy__physics__quantum__operator__IdentityOperator\", \"test_sympy__physics__quantum__operator__Operator\", \"test_sympy__physics__quantum__operator__OuterProduct\", \"test_sympy__physics__quantum__operator__UnitaryOperator\", \"test_sympy__physics__quantum__piab__PIABBra\", \"test_sympy__physics__quantum__boson__BosonOp\", \"test_sympy__physics__quantum__boson__BosonFockKet\", \"test_sympy__physics__quantum__boson__BosonFockBra\", \"test_sympy__physics__quantum__boson__BosonCoherentKet\", \"test_sympy__physics__quantum__boson__BosonCoherentBra\", \"test_sympy__physics__quantum__fermion__FermionOp\", \"test_sympy__physics__quantum__fermion__FermionFockKet\", \"test_sympy__physics__quantum__fermion__FermionFockBra\", \"test_sympy__physics__quantum__pauli__SigmaOpBase\", \"test_sympy__physics__quantum__pauli__SigmaX\", \"test_sympy__physics__quantum__pauli__SigmaY\", \"test_sympy__physics__quantum__pauli__SigmaZ\", \"test_sympy__physics__quantum__pauli__SigmaMinus\", \"test_sympy__physics__quantum__pauli__SigmaPlus\", \"test_sympy__physics__quantum__pauli__SigmaZKet\", \"test_sympy__physics__quantum__pauli__SigmaZBra\", \"test_sympy__physics__quantum__piab__PIABHamiltonian\", \"test_sympy__physics__quantum__piab__PIABKet\", \"test_sympy__physics__quantum__qexpr__QExpr\", \"test_sympy__physics__quantum__qft__Fourier\", \"test_sympy__physics__quantum__qft__IQFT\", \"test_sympy__physics__quantum__qft__QFT\", \"test_sympy__physics__quantum__qft__RkGate\", \"test_sympy__physics__quantum__qubit__IntQubit\", \"test_sympy__physics__quantum__qubit__IntQubitBra\", \"test_sympy__physics__quantum__qubit__IntQubitState\", \"test_sympy__physics__quantum__qubit__Qubit\", \"test_sympy__physics__quantum__qubit__QubitBra\", \"test_sympy__physics__quantum__qubit__QubitState\", \"test_sympy__physics__quantum__density__Density\", \"test_sympy__physics__quantum__spin__CoupledSpinState\", \"test_sympy__physics__quantum__spin__J2Op\", \"test_sympy__physics__quantum__spin__JminusOp\", \"test_sympy__physics__quantum__spin__JplusOp\", \"test_sympy__physics__quantum__spin__JxBra\", \"test_sympy__physics__quantum__spin__JxBraCoupled\", \"test_sympy__physics__quantum__spin__JxKet\", \"test_sympy__physics__quantum__spin__JxKetCoupled\", \"test_sympy__physics__quantum__spin__JxOp\", \"test_sympy__physics__quantum__spin__JyBra\", \"test_sympy__physics__quantum__spin__JyBraCoupled\", \"test_sympy__physics__quantum__spin__JyKet\", \"test_sympy__physics__quantum__spin__JyKetCoupled\", \"test_sympy__physics__quantum__spin__JyOp\", \"test_sympy__physics__quantum__spin__JzBra\", \"test_sympy__physics__quantum__spin__JzBraCoupled\", \"test_sympy__physics__quantum__spin__JzKet\", \"test_sympy__physics__quantum__spin__JzKetCoupled\", \"test_sympy__physics__quantum__spin__JzOp\", \"test_sympy__physics__quantum__spin__Rotation\", \"test_sympy__physics__quantum__spin__SpinState\", \"test_sympy__physics__quantum__spin__WignerD\", \"test_sympy__physics__quantum__state__Bra\", \"test_sympy__physics__quantum__state__BraBase\", \"test_sympy__physics__quantum__state__Ket\", \"test_sympy__physics__quantum__state__KetBase\", \"test_sympy__physics__quantum__state__State\", \"test_sympy__physics__quantum__state__StateBase\", \"test_sympy__physics__quantum__state__TimeDepBra\", \"test_sympy__physics__quantum__state__TimeDepKet\", \"test_sympy__physics__quantum__state__TimeDepState\", \"test_sympy__physics__quantum__state__Wavefunction\", \"test_sympy__physics__quantum__tensorproduct__TensorProduct\", \"test_sympy__physics__quantum__identitysearch__GateIdentity\", \"test_sympy__physics__quantum__sho1d__SHOOp\", \"test_sympy__physics__quantum__sho1d__RaisingOp\", \"test_sympy__physics__quantum__sho1d__LoweringOp\", \"test_sympy__physics__quantum__sho1d__NumberOp\", \"test_sympy__physics__quantum__sho1d__Hamiltonian\", \"test_sympy__physics__quantum__sho1d__SHOState\", \"test_sympy__physics__quantum__sho1d__SHOKet\", \"test_sympy__physics__quantum__sho1d__SHOBra\", \"test_sympy__physics__secondquant__AnnihilateBoson\", \"test_sympy__physics__secondquant__AnnihilateFermion\", \"test_sympy__physics__secondquant__AntiSymmetricTensor\", \"test_sympy__physics__secondquant__BosonState\", \"test_sympy__physics__secondquant__Commutator\", \"test_sympy__physics__secondquant__CreateBoson\", \"test_sympy__physics__secondquant__CreateFermion\", \"test_sympy__physics__secondquant__Dagger\", \"test_sympy__physics__secondquant__FermionState\", \"test_sympy__physics__secondquant__FermionicOperator\", \"test_sympy__physics__secondquant__FockState\", \"test_sympy__physics__secondquant__FockStateBosonBra\", \"test_sympy__physics__secondquant__FockStateBosonKet\", \"test_sympy__physics__secondquant__FockStateBra\", \"test_sympy__physics__secondquant__FockStateFermionBra\", \"test_sympy__physics__secondquant__FockStateFermionKet\", \"test_sympy__physics__secondquant__FockStateKet\", \"test_sympy__physics__secondquant__InnerProduct\", \"test_sympy__physics__secondquant__NO\", \"test_sympy__physics__secondquant__PermutationOperator\", \"test_sympy__physics__secondquant__SqOperator\", \"test_sympy__physics__secondquant__TensorSymbol\", \"test_sympy__physics__units__dimensions__Dimension\", \"test_sympy__physics__units__dimensions__DimensionSystem\", \"test_sympy__physics__units__quantities__Quantity\", \"test_sympy__physics__units__prefixes__Prefix\", \"test_sympy__core__numbers__AlgebraicNumber\", \"test_sympy__polys__polytools__GroebnerBasis\", \"test_sympy__polys__polytools__Poly\", \"test_sympy__polys__polytools__PurePoly\", \"test_sympy__polys__rootoftools__ComplexRootOf\", \"test_sympy__polys__rootoftools__RootSum\", \"test_sympy__series__limits__Limit\", \"test_sympy__series__order__Order\", \"test_sympy__series__sequences__EmptySequence\", \"test_sympy__series__sequences__SeqPer\", \"test_sympy__series__sequences__SeqFormula\", \"test_sympy__series__sequences__RecursiveSeq\", \"test_sympy__series__sequences__SeqExprOp\", \"test_sympy__series__sequences__SeqAdd\", \"test_sympy__series__sequences__SeqMul\", \"test_sympy__series__fourier__FourierSeries\", \"test_sympy__series__fourier__FiniteFourierSeries\", \"test_sympy__series__formal__FormalPowerSeries\", \"test_sympy__series__formal__Coeff\", \"test_sympy__simplify__hyperexpand__Hyper_Function\", \"test_sympy__simplify__hyperexpand__G_Function\", \"test_sympy__tensor__array__dense_ndim_array__ImmutableDenseNDimArray\", \"test_sympy__tensor__array__sparse_ndim_array__ImmutableSparseNDimArray\", \"test_sympy__tensor__array__array_comprehension__ArrayComprehension\", \"test_sympy__tensor__functions__TensorProduct\", \"test_sympy__tensor__indexed__Idx\", \"test_sympy__tensor__indexed__Indexed\", \"test_sympy__tensor__indexed__IndexedBase\", \"test_sympy__tensor__tensor__TensorIndexType\", \"test_sympy__tensor__tensor__TensorSymmetry\", \"test_sympy__tensor__tensor__TensorType\", \"test_sympy__tensor__tensor__TensorHead\", \"test_sympy__tensor__tensor__TensorIndex\", \"test_sympy__tensor__tensor__TensAdd\", \"test_sympy__tensor__tensor__Tensor\", \"test_sympy__tensor__tensor__TensMul\", \"test_sympy__tensor__tensor__TensorElement\", \"test_sympy__tensor__toperators__PartialDerivative\", \"test_as_coeff_add\", \"test_sympy__geometry__curve__Curve\", \"test_sympy__geometry__point__Point\", \"test_sympy__geometry__point__Point2D\", \"test_sympy__geometry__point__Point3D\", \"test_sympy__geometry__ellipse__Ellipse\", \"test_sympy__geometry__ellipse__Circle\", \"test_sympy__geometry__parabola__Parabola\", \"test_sympy__geometry__line__Line\", \"test_sympy__geometry__line__Ray\", \"test_sympy__geometry__line__Segment\", \"test_sympy__geometry__line__Line2D\", \"test_sympy__geometry__line__Ray2D\", \"test_sympy__geometry__line__Segment2D\", \"test_sympy__geometry__line__Line3D\", \"test_sympy__geometry__line__Segment3D\", \"test_sympy__geometry__line__Ray3D\", \"test_sympy__geometry__plane__Plane\", \"test_sympy__geometry__polygon__Polygon\", \"test_sympy__geometry__polygon__RegularPolygon\", \"test_sympy__geometry__polygon__Triangle\", \"test_sympy__geometry__entity__GeometryEntity\", \"test_sympy__diffgeom__diffgeom__Manifold\", \"test_sympy__diffgeom__diffgeom__Patch\", \"test_sympy__diffgeom__diffgeom__CoordSystem\", \"test_sympy__diffgeom__diffgeom__BaseScalarField\", \"test_sympy__diffgeom__diffgeom__BaseVectorField\", \"test_sympy__diffgeom__diffgeom__Differential\", \"test_sympy__diffgeom__diffgeom__Commutator\", \"test_sympy__diffgeom__diffgeom__TensorProduct\", \"test_sympy__diffgeom__diffgeom__WedgeProduct\", \"test_sympy__diffgeom__diffgeom__LieDerivative\", \"test_sympy__diffgeom__diffgeom__CovarDerivativeOp\", \"test_sympy__categories__baseclasses__Class\", \"test_sympy__categories__baseclasses__Object\", \"test_sympy__categories__baseclasses__IdentityMorphism\", \"test_sympy__categories__baseclasses__NamedMorphism\", \"test_sympy__categories__baseclasses__CompositeMorphism\", \"test_sympy__categories__baseclasses__Diagram\", \"test_sympy__categories__baseclasses__Category\", \"test_sympy__ntheory__factor___totient\", \"test_sympy__ntheory__factor___reduced_totient\", \"test_sympy__ntheory__factor___divisor_sigma\", \"test_sympy__ntheory__factor___udivisor_sigma\", \"test_sympy__ntheory__factor___primenu\", \"test_sympy__ntheory__factor___primeomega\", \"test_sympy__ntheory__residue_ntheory__mobius\", \"test_sympy__ntheory__generate__primepi\", \"test_sympy__physics__optics__waves__TWave\", \"test_sympy__physics__optics__gaussopt__BeamParameter\", \"test_sympy__physics__optics__medium__Medium\", \"test_sympy__codegen__array_utils__CodegenArrayContraction\", \"test_sympy__codegen__array_utils__CodegenArrayDiagonal\", \"test_sympy__codegen__array_utils__CodegenArrayTensorProduct\", \"test_sympy__codegen__array_utils__CodegenArrayElementwiseAdd\", \"test_sympy__codegen__array_utils__CodegenArrayPermuteDims\", \"test_sympy__codegen__ast__Assignment\", \"test_sympy__codegen__cfunctions__expm1\", \"test_sympy__codegen__cfunctions__log1p\", \"test_sympy__codegen__cfunctions__exp2\", \"test_sympy__codegen__cfunctions__log2\", \"test_sympy__codegen__cfunctions__fma\", \"test_sympy__codegen__cfunctions__log10\", \"test_sympy__codegen__cfunctions__Sqrt\", \"test_sympy__codegen__cfunctions__Cbrt\", \"test_sympy__codegen__cfunctions__hypot\", \"test_sympy__codegen__fnodes__FFunction\", \"test_sympy__codegen__fnodes__F95Function\", \"test_sympy__codegen__fnodes__isign\", \"test_sympy__codegen__fnodes__dsign\", \"test_sympy__codegen__fnodes__cmplx\", \"test_sympy__codegen__fnodes__kind\", \"test_sympy__codegen__fnodes__merge\", \"test_sympy__codegen__fnodes___literal\", \"test_sympy__codegen__fnodes__literal_sp\", \"test_sympy__codegen__fnodes__literal_dp\", \"test_sympy__vector__coordsysrect__CoordSys3D\", \"test_sympy__vector__point__Point\", \"test_sympy__vector__basisdependent__BasisDependent\", \"test_sympy__vector__basisdependent__BasisDependentMul\", \"test_sympy__vector__basisdependent__BasisDependentAdd\", \"test_sympy__vector__basisdependent__BasisDependentZero\", \"test_sympy__vector__vector__BaseVector\", \"test_sympy__vector__vector__VectorAdd\", \"test_sympy__vector__vector__VectorMul\", \"test_sympy__vector__vector__VectorZero\", \"test_sympy__vector__vector__Vector\", \"test_sympy__vector__vector__Cross\", \"test_sympy__vector__vector__Dot\", \"test_sympy__vector__dyadic__Dyadic\", \"test_sympy__vector__dyadic__BaseDyadic\", \"test_sympy__vector__dyadic__DyadicMul\", \"test_sympy__vector__dyadic__DyadicAdd\", \"test_sympy__vector__dyadic__DyadicZero\", \"test_sympy__vector__deloperator__Del\", \"test_sympy__vector__operators__Curl\", \"test_sympy__vector__operators__Laplacian\", \"test_sympy__vector__operators__Divergence\", \"test_sympy__vector__operators__Gradient\", \"test_sympy__vector__orienters__Orienter\", \"test_sympy__vector__orienters__ThreeAngleOrienter\", \"test_sympy__vector__orienters__AxisOrienter\", \"test_sympy__vector__orienters__BodyOrienter\", \"test_sympy__vector__orienters__SpaceOrienter\", \"test_sympy__vector__orienters__QuaternionOrienter\", \"test_sympy__vector__scalar__BaseScalar\", \"test_sympy__physics__wigner__Wigner3j\", \"test_sympy__integrals__rubi__symbol__matchpyWC\", \"test_sympy__integrals__rubi__utility_function__rubi_unevaluated_expr\", \"test_sympy__integrals__rubi__utility_function__rubi_exp\", \"test_sympy__integrals__rubi__utility_function__rubi_log\", \"test_sympy__integrals__rubi__utility_function__Int\", \"test_sympy__integrals__rubi__utility_function__Util_Coefficient\", \"test_sympy__integrals__rubi__utility_function__Gamma\", \"test_sympy__integrals__rubi__utility_function__Util_Part\", \"test_sympy__integrals__rubi__utility_function__PolyGamma\", \"test_rational_algorithm\", \"test_rational_independent\", \"test_simpleDE\", \"test_exp_re\", \"test_hyper_re\", \"test_fps_shift\", \"test_fps__Add_expr\", \"test_fps__asymptotic\", \"test_fps__fractional\", \"test_fps__logarithmic_singularity\", \"test_fps__slow\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.111534",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}