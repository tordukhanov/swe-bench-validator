{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-9775",
  "base_commit": "5815bd58667da900814d8780d2a5ebfb976c08b1",
  "patch": "diff --git a/sklearn/manifold/t_sne.py b/sklearn/manifold/t_sne.py\n--- a/sklearn/manifold/t_sne.py\n+++ b/sklearn/manifold/t_sne.py\n@@ -9,6 +9,7 @@\n #   http://cseweb.ucsd.edu/~lvdmaaten/workshops/nips2010/papers/vandermaaten.pdf\n from __future__ import division\n \n+import warnings\n from time import time\n import numpy as np\n from scipy import linalg\n@@ -394,7 +395,8 @@ def _gradient_descent(objective, p0, it, n_iter,\n     return p, error, i\n \n \n-def trustworthiness(X, X_embedded, n_neighbors=5, precomputed=False):\n+def trustworthiness(X, X_embedded, n_neighbors=5,\n+                    precomputed=False, metric='euclidean'):\n     r\"\"\"Expresses to what extent the local structure is retained.\n \n     The trustworthiness is within [0, 1]. It is defined as\n@@ -431,15 +433,28 @@ def trustworthiness(X, X_embedded, n_neighbors=5, precomputed=False):\n     precomputed : bool, optional (default: False)\n         Set this flag if X is a precomputed square distance matrix.\n \n+        ..deprecated:: 0.20\n+            ``precomputed`` has been deprecated in version 0.20 and will be\n+            removed in version 0.22. Use ``metric`` instead.\n+\n+    metric : string, or callable, optional, default 'euclidean'\n+        Which metric to use for computing pairwise distances between samples\n+        from the original input space. If metric is 'precomputed', X must be a\n+        matrix of pairwise distances or squared distances. Otherwise, see the\n+        documentation of argument metric in sklearn.pairwise.pairwise_distances\n+        for a list of available metrics.\n+\n     Returns\n     -------\n     trustworthiness : float\n         Trustworthiness of the low-dimensional embedding.\n     \"\"\"\n     if precomputed:\n-        dist_X = X\n-    else:\n-        dist_X = pairwise_distances(X, squared=True)\n+        warnings.warn(\"The flag 'precomputed' has been deprecated in version \"\n+                      \"0.20 and will be removed in 0.22. See 'metric' \"\n+                      \"parameter instead.\", DeprecationWarning)\n+        metric = 'precomputed'\n+    dist_X = pairwise_distances(X, metric=metric)\n     ind_X = np.argsort(dist_X, axis=1)\n     ind_X_embedded = NearestNeighbors(n_neighbors).fit(X_embedded).kneighbors(\n         return_distance=False)\n",
  "test_patch": "diff --git a/sklearn/manifold/tests/test_t_sne.py b/sklearn/manifold/tests/test_t_sne.py\n--- a/sklearn/manifold/tests/test_t_sne.py\n+++ b/sklearn/manifold/tests/test_t_sne.py\n@@ -14,6 +14,8 @@\n from sklearn.utils.testing import assert_greater\n from sklearn.utils.testing import assert_raises_regexp\n from sklearn.utils.testing import assert_in\n+from sklearn.utils.testing import assert_warns\n+from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import skip_if_32bit\n from sklearn.utils import check_random_state\n from sklearn.manifold.t_sne import _joint_probabilities\n@@ -288,11 +290,39 @@ def test_preserve_trustworthiness_approximately_with_precomputed_distances():\n                     early_exaggeration=2.0, metric=\"precomputed\",\n                     random_state=i, verbose=0)\n         X_embedded = tsne.fit_transform(D)\n-        t = trustworthiness(D, X_embedded, n_neighbors=1,\n-                            precomputed=True)\n+        t = trustworthiness(D, X_embedded, n_neighbors=1, metric=\"precomputed\")\n         assert t > .95\n \n \n+def test_trustworthiness_precomputed_deprecation():\n+    # FIXME: Remove this test in v0.23\n+\n+    # Use of the flag `precomputed` in trustworthiness parameters has been\n+    # deprecated, but will still work until v0.23.\n+    random_state = check_random_state(0)\n+    X = random_state.randn(100, 2)\n+    assert_equal(assert_warns(DeprecationWarning, trustworthiness,\n+                              pairwise_distances(X), X, precomputed=True), 1.)\n+    assert_equal(assert_warns(DeprecationWarning, trustworthiness,\n+                              pairwise_distances(X), X, metric='precomputed',\n+                              precomputed=True), 1.)\n+    assert_raises(ValueError, assert_warns, DeprecationWarning,\n+                  trustworthiness, X, X, metric='euclidean', precomputed=True)\n+    assert_equal(assert_warns(DeprecationWarning, trustworthiness,\n+                              pairwise_distances(X), X, metric='euclidean',\n+                              precomputed=True), 1.)\n+\n+\n+def test_trustworthiness_not_euclidean_metric():\n+    # Test trustworthiness with a metric different from 'euclidean' and\n+    # 'precomputed'\n+    random_state = check_random_state(0)\n+    X = random_state.randn(100, 2)\n+    assert_equal(trustworthiness(X, X, metric='cosine'),\n+                 trustworthiness(pairwise_distances(X, metric='cosine'), X,\n+                                 metric='precomputed'))\n+\n+\n def test_early_exaggeration_too_small():\n     # Early exaggeration factor must be >= 1.\n     tsne = TSNE(early_exaggeration=0.99)\n",
  "problem_statement": "sklearn.manifold.t_sne.trustworthiness should allow custom metric\n`precomputed` boolean parameter should be replaced by more standard `metric='precomputed'`.\n",
  "hints_text": "Hi ! I'm a first time contributor, i will work on this one\nThanks.\n\nOn 13 September 2017 at 20:07, wdevazelhes <notifications@github.com> wrote:\n\n> Hi ! I'm a first time contributor, i will work on this one\n>\n> â€”\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/scikit-learn/scikit-learn/issues/9736#issuecomment-329121718>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEz60KBBpvdEXdMTtDGlt_9pzbRxZWVks5sh6lxgaJpZM4PT9bz>\n> .\n>\n",
  "created_at": "2017-09-15T08:31:41Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/manifold/tests/test_t_sne.py::test_preserve_trustworthiness_approximately_with_precomputed_distances\", \"sklearn/manifold/tests/test_t_sne.py::test_trustworthiness_precomputed_deprecation\", \"sklearn/manifold/tests/test_t_sne.py::test_trustworthiness_not_euclidean_metric\"]",
  "PASS_TO_PASS": "[\"sklearn/manifold/tests/test_t_sne.py::test_gradient_descent_stops\", \"sklearn/manifold/tests/test_t_sne.py::test_binary_search\", \"sklearn/manifold/tests/test_t_sne.py::test_binary_search_neighbors\", \"sklearn/manifold/tests/test_t_sne.py::test_binary_perplexity_stability\", \"sklearn/manifold/tests/test_t_sne.py::test_gradient\", \"sklearn/manifold/tests/test_t_sne.py::test_trustworthiness\", \"sklearn/manifold/tests/test_t_sne.py::test_preserve_trustworthiness_approximately\", \"sklearn/manifold/tests/test_t_sne.py::test_optimization_minimizes_kl_divergence\", \"sklearn/manifold/tests/test_t_sne.py::test_fit_csr_matrix\", \"sklearn/manifold/tests/test_t_sne.py::test_early_exaggeration_too_small\", \"sklearn/manifold/tests/test_t_sne.py::test_too_few_iterations\", \"sklearn/manifold/tests/test_t_sne.py::test_non_square_precomputed_distances\", \"sklearn/manifold/tests/test_t_sne.py::test_non_positive_precomputed_distances\", \"sklearn/manifold/tests/test_t_sne.py::test_non_positive_computed_distances\", \"sklearn/manifold/tests/test_t_sne.py::test_init_not_available\", \"sklearn/manifold/tests/test_t_sne.py::test_init_ndarray\", \"sklearn/manifold/tests/test_t_sne.py::test_init_ndarray_precomputed\", \"sklearn/manifold/tests/test_t_sne.py::test_distance_not_available\", \"sklearn/manifold/tests/test_t_sne.py::test_method_not_available\", \"sklearn/manifold/tests/test_t_sne.py::test_angle_out_of_range_checks\", \"sklearn/manifold/tests/test_t_sne.py::test_pca_initialization_not_compatible_with_precomputed_kernel\", \"sklearn/manifold/tests/test_t_sne.py::test_n_components_range\", \"sklearn/manifold/tests/test_t_sne.py::test_early_exaggeration_used\", \"sklearn/manifold/tests/test_t_sne.py::test_n_iter_used\", \"sklearn/manifold/tests/test_t_sne.py::test_answer_gradient_two_points\", \"sklearn/manifold/tests/test_t_sne.py::test_answer_gradient_four_points\", \"sklearn/manifold/tests/test_t_sne.py::test_skip_num_points_gradient\", \"sklearn/manifold/tests/test_t_sne.py::test_verbose\", \"sklearn/manifold/tests/test_t_sne.py::test_chebyshev_metric\", \"sklearn/manifold/tests/test_t_sne.py::test_reduction_to_one_component\", \"sklearn/manifold/tests/test_t_sne.py::test_no_sparse_on_barnes_hut\", \"sklearn/manifold/tests/test_t_sne.py::test_64bit\", \"sklearn/manifold/tests/test_t_sne.py::test_kl_divergence_not_nan\", \"sklearn/manifold/tests/test_t_sne.py::test_barnes_hut_angle\", \"sklearn/manifold/tests/test_t_sne.py::test_n_iter_without_progress\", \"sklearn/manifold/tests/test_t_sne.py::test_min_grad_norm\", \"sklearn/manifold/tests/test_t_sne.py::test_accessible_kl_divergence\", \"sklearn/manifold/tests/test_t_sne.py::test_bh_match_exact\", \"sklearn/manifold/tests/test_t_sne.py::test_tsne_with_different_distance_metrics\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.028987",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}