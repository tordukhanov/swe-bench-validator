{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15596",
  "base_commit": "6e716b1948071c2aaba2acf92c3d9106b018b57e",
  "patch": "diff --git a/sympy/calculus/util.py b/sympy/calculus/util.py\n--- a/sympy/calculus/util.py\n+++ b/sympy/calculus/util.py\n@@ -466,8 +466,9 @@ def _check(orig_f, period):\n         elif isinstance(a, TrigonometricFunction):\n             period = periodicity(a, symbol)\n         #check if 'f' is linear in 'symbol'\n-        elif degree(a, symbol) == 1 and symbol not in n.free_symbols:\n-            period = Abs(n / a.diff(symbol))\n+        elif (a.is_polynomial(symbol) and degree(a, symbol) == 1 and\n+            symbol not in n.free_symbols):\n+                period = Abs(n / a.diff(symbol))\n \n     elif period is None:\n         from sympy.solvers.decompogen import compogen\ndiff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -4445,18 +4445,22 @@ def degree(f, gen=0):\n     \"\"\"\n \n     f = sympify(f, strict=True)\n+    gen_is_Num = sympify(gen, strict=True).is_Number\n     if f.is_Poly:\n         p = f\n         isNum = p.as_expr().is_Number\n     else:\n         isNum = f.is_Number\n         if not isNum:\n-            p, _ = poly_from_expr(f)\n+            if gen_is_Num:\n+                p, _ = poly_from_expr(f)\n+            else:\n+                p, _ = poly_from_expr(f, gen)\n \n     if isNum:\n         return S.Zero if f else S.NegativeInfinity\n \n-    if not sympify(gen, strict=True).is_Number:\n+    if not gen_is_Num:\n         if f.is_Poly and gen not in p.gens:\n             # try recast without explicit gens\n             p, _ = poly_from_expr(f.as_expr())\n",
  "test_patch": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -1178,6 +1178,7 @@ def test_Poly_degree():\n     raises(TypeError, lambda: degree(y**2 + x**3))\n     raises(TypeError, lambda: degree(y**2 + x**3, 1))\n     raises(PolynomialError, lambda: degree(x, 1.1))\n+    raises(PolynomialError, lambda: degree(x**2/(x**3 + 1), x))\n \n     assert degree(Poly(0,x),z) == -oo\n     assert degree(Poly(1,x),z) == 0\n",
  "problem_statement": "The behavior of degree(f, x) on rational functions\nI wanted to know if SymPy can compute degrees of rational functions, so I tried\r\n```\r\n>>> degree((x-2)/(x**2+1), x)\r\n1\r\n```\r\nPerhaps the degree of a rational function is not implemented, but if so, should this fail instead? \n",
  "hints_text": "I think that it could fail in the same way as `Poly` does when the generator is given:\r\n```\r\n>>> Poly((x-2)/(x**2+1), x)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"sympy/polys/polytools.py\", line 129, in __new__\r\n    return cls._from_expr(rep, opt)\r\n  File \"sympy/polys/polytools.py\", line 239, in _from_expr\r\n    rep, opt = _dict_from_expr(rep, opt)\r\n  File \"sympy/polys/polyutils.py\", line 366, in _dict_from_expr\r\n    rep, gens = _dict_from_expr_if_gens(expr, opt)\r\n  File \"sympy/polys/polyutils.py\", line 305, in _dict_from_expr_if_gens\r\n    (poly,), gens = _parallel_dict_from_expr_if_gens((expr,), opt)\r\n  File \"sympy/polys/polyutils.py\", line 215, in _parallel_dict_from_expr_if_gens\r\n    \"the set of generators.\" % factor)\r\nsympy.polys.polyerrors.PolynomialError: 1/(x**2 + 1) contains an element of the set of generators.\r\n```\r\n(`gen` could be added [here](https://github.com/sympy/sympy/blob/master/sympy/polys/polytools.py#L4454) if it is given.)",
  "created_at": "2018-12-06T02:45:43Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_Poly_degree\"]",
  "PASS_TO_PASS": "[\"test_Poly_from_dict\", \"test_Poly_from_list\", \"test_Poly_from_poly\", \"test_Poly_from_expr\", \"test_Poly__new__\", \"test_Poly__args\", \"test_Poly__gens\", \"test_Poly_zero\", \"test_Poly_one\", \"test_Poly__unify\", \"test_Poly_free_symbols\", \"test_PurePoly_free_symbols\", \"test_Poly__eq__\", \"test_PurePoly__eq__\", \"test_PurePoly_Poly\", \"test_Poly_get_domain\", \"test_Poly_set_domain\", \"test_Poly_get_modulus\", \"test_Poly_set_modulus\", \"test_Poly_add_ground\", \"test_Poly_sub_ground\", \"test_Poly_mul_ground\", \"test_Poly_quo_ground\", \"test_Poly_exquo_ground\", \"test_Poly_abs\", \"test_Poly_neg\", \"test_Poly_add\", \"test_Poly_sub\", \"test_Poly_mul\", \"test_issue_13079\", \"test_Poly_sqr\", \"test_Poly_pow\", \"test_Poly_divmod\", \"test_Poly_eq_ne\", \"test_Poly_nonzero\", \"test_Poly_properties\", \"test_Poly_is_irreducible\", \"test_Poly_subs\", \"test_Poly_replace\", \"test_Poly_reorder\", \"test_Poly_ltrim\", \"test_Poly_has_only_gens\", \"test_Poly_to_ring\", \"test_Poly_to_field\", \"test_Poly_to_exact\", \"test_Poly_retract\", \"test_Poly_slice\", \"test_Poly_coeffs\", \"test_Poly_monoms\", \"test_Poly_terms\", \"test_Poly_all_coeffs\", \"test_Poly_all_monoms\", \"test_Poly_all_terms\", \"test_Poly_termwise\", \"test_Poly_length\", \"test_Poly_as_dict\", \"test_Poly_as_expr\", \"test_Poly_lift\", \"test_Poly_deflate\", \"test_Poly_inject\", \"test_Poly_eject\", \"test_Poly_exclude\", \"test_Poly__gen_to_level\", \"test_Poly_degree_list\", \"test_Poly_total_degree\", \"test_Poly_homogenize\", \"test_Poly_homogeneous_order\", \"test_Poly_LC\", \"test_Poly_TC\", \"test_Poly_EC\", \"test_Poly_coeff\", \"test_Poly_nth\", \"test_Poly_LM\", \"test_Poly_LM_custom_order\", \"test_Poly_EM\", \"test_Poly_LT\", \"test_Poly_ET\", \"test_Poly_max_norm\", \"test_Poly_l1_norm\", \"test_Poly_clear_denoms\", \"test_Poly_rat_clear_denoms\", \"test_Poly_integrate\", \"test_Poly_diff\", \"test_issue_9585\", \"test_Poly_eval\", \"test_Poly___call__\", \"test_parallel_poly_from_expr\", \"test_pdiv\", \"test_div\", \"test_gcdex\", \"test_revert\", \"test_subresultants\", \"test_resultant\", \"test_discriminant\", \"test_dispersion\", \"test_gcd_list\", \"test_lcm_list\", \"test_gcd\", \"test_gcd_numbers_vs_polys\", \"test_terms_gcd\", \"test_trunc\", \"test_monic\", \"test_content\", \"test_primitive\", \"test_compose\", \"test_shift\", \"test_transform\", \"test_sturm\", \"test_gff\", \"test_norm\", \"test_sqf_norm\", \"test_sqf\", \"test_factor\", \"test_factor_large\", \"test_factor_noeval\", \"test_intervals\", \"test_refine_root\", \"test_count_roots\", \"test_Poly_root\", \"test_real_roots\", \"test_all_roots\", \"test_nroots\", \"test_ground_roots\", \"test_nth_power_roots_poly\", \"test_torational_factor_list\", \"test_cancel\", \"test_reduced\", \"test_groebner\", \"test_fglm\", \"test_is_zero_dimensional\", \"test_GroebnerBasis\", \"test_poly\", \"test_keep_coeff\", \"test_noncommutative\", \"test_to_rational_coeffs\", \"test_factor_terms\", \"test_as_list\", \"test_issue_11198\", \"test_Poly_precision\", \"test_issue_12400\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.102450",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}