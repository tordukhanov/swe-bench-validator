{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-6412",
  "base_commit": "4b73e81df60db3a5e3706124185a3d37a363f7e7",
  "patch": "diff --git a/pylint/checkers/base_checker.py b/pylint/checkers/base_checker.py\n--- a/pylint/checkers/base_checker.py\n+++ b/pylint/checkers/base_checker.py\n@@ -41,6 +41,13 @@ class BaseChecker(_ArgumentsProvider):\n \n     def __init__(self, linter: PyLinter) -> None:\n         \"\"\"Checker instances should have the linter as argument.\"\"\"\n+        if getattr(self, \"__implements__\", None):\n+            warnings.warn(\n+                \"Using the __implements__ inheritance pattern for BaseChecker is no \"\n+                \"longer supported. Child classes should only inherit BaseChecker or any \"\n+                \"of the other checker types from pylint.checkers.\",\n+                DeprecationWarning,\n+            )\n         if self.name is not None:\n             self.name = self.name.lower()\n         self.linter = linter\n@@ -166,9 +173,15 @@ def create_message_definition_from_tuple(self, msgid, msg_tuple):\n             warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n             if isinstance(self, (BaseTokenChecker, BaseRawFileChecker)):\n                 default_scope = WarningScope.LINE\n-            # TODO: Interfaces: Deprecate looking for implements here # pylint: disable=fixme\n+            # TODO: 3.0: Remove deprecated if-statement # pylint: disable=fixme\n             elif implements(self, (IRawChecker, ITokenChecker)):\n-                default_scope = WarningScope.LINE\n+                warnings.warn(  # pragma: no cover\n+                    \"Checkers should subclass BaseTokenChecker or BaseRawFileChecker\"\n+                    \"instead of using the __implements__ mechanism. Use of __implements__\"\n+                    \"will no longer be supported in pylint 3.0\",\n+                    DeprecationWarning,\n+                )\n+                default_scope = WarningScope.LINE  # pragma: no cover\n             else:\n                 default_scope = WarningScope.NODE\n         options = {}\ndiff --git a/pylint/interfaces.py b/pylint/interfaces.py\n--- a/pylint/interfaces.py\n+++ b/pylint/interfaces.py\n@@ -51,6 +51,13 @@\n class Interface:\n     \"\"\"Base class for interfaces.\"\"\"\n \n+    def __init__(self) -> None:\n+        warnings.warn(\n+            \"Interface and all of its subclasses have been deprecated \"\n+            \"and will be removed in pylint 3.0.\",\n+            DeprecationWarning,\n+        )\n+\n     @classmethod\n     def is_implemented_by(cls, instance):\n         with warnings.catch_warnings():\ndiff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -874,25 +874,45 @@ def _astroid_module_checker(self):\n         \"\"\"\n         walker = ASTWalker(self)\n         _checkers = self.prepare_checkers()\n-        with warnings.catch_warnings():\n-            warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n-            tokencheckers = [\n-                c\n-                for c in _checkers\n+        tokencheckers = [\n+            c\n+            for c in _checkers\n+            if isinstance(c, checkers.BaseTokenChecker) and c is not self\n+        ]\n+        # TODO: 3.0: Remove deprecated for-loop # pylint: disable=fixme\n+        for c in _checkers:\n+            with warnings.catch_warnings():\n+                warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                 if (\n                     interfaces.implements(c, interfaces.ITokenChecker)\n-                    or isinstance(c, checkers.BaseTokenChecker)\n-                )\n-                and c is not self\n-            ]\n-        with warnings.catch_warnings():\n-            warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n-            rawcheckers = [\n-                c\n-                for c in _checkers\n-                if interfaces.implements(c, interfaces.IRawChecker)\n-                or isinstance(c, checkers.BaseRawFileChecker)\n-            ]\n+                    and c not in tokencheckers\n+                    and c is not self\n+                ):\n+                    tokencheckers.append(c)  # pragma: no cover\n+                    warnings.warn(  # pragma: no cover\n+                        \"Checkers should subclass BaseTokenChecker \"\n+                        \"instead of using the __implements__ mechanism. Use of __implements__ \"\n+                        \"will no longer be supported in pylint 3.0\",\n+                        DeprecationWarning,\n+                    )\n+        rawcheckers = [\n+            c for c in _checkers if isinstance(c, checkers.BaseRawFileChecker)\n+        ]\n+        # TODO: 3.0: Remove deprecated if-statement # pylint: disable=fixme\n+        for c in _checkers:\n+            with warnings.catch_warnings():\n+                warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n+                if (\n+                    interfaces.implements(c, interfaces.IRawChecker)\n+                    and c not in rawcheckers\n+                ):\n+                    rawcheckers.append(c)  # pragma: no cover\n+                    warnings.warn(  # pragma: no cover\n+                        \"Checkers should subclass BaseRawFileChecker \"\n+                        \"instead of using the __implements__ mechanism. Use of __implements__ \"\n+                        \"will no longer be supported in pylint 3.0\",\n+                        DeprecationWarning,\n+                    )\n         # notify global begin\n         for checker in _checkers:\n             checker.open()\ndiff --git a/pylint/reporters/base_reporter.py b/pylint/reporters/base_reporter.py\n--- a/pylint/reporters/base_reporter.py\n+++ b/pylint/reporters/base_reporter.py\n@@ -6,6 +6,7 @@\n \n import os\n import sys\n+import warnings\n from typing import TYPE_CHECKING, TextIO\n from warnings import warn\n \n@@ -30,6 +31,12 @@ class BaseReporter:\n     \"\"\"Name of the reporter.\"\"\"\n \n     def __init__(self, output: TextIO | None = None) -> None:\n+        if getattr(self, \"__implements__\", None):\n+            warnings.warn(\n+                \"Using the __implements__ inheritance pattern for BaseReporter is no \"\n+                \"longer supported. Child classes should only inherit BaseReporter\",\n+                DeprecationWarning,\n+            )\n         self.linter: PyLinter\n         self.section = 0\n         self.out: TextIO = output or sys.stdout\n",
  "test_patch": "diff --git a/tests/test_deprecation.py b/tests/test_deprecation.py\n--- a/tests/test_deprecation.py\n+++ b/tests/test_deprecation.py\n@@ -10,8 +10,19 @@\n \n import pytest\n \n+from pylint.checkers import BaseChecker\n from pylint.checkers.mapreduce_checker import MapReduceMixin\n+from pylint.interfaces import (\n+    IAstroidChecker,\n+    IChecker,\n+    Interface,\n+    IRawChecker,\n+    IReporter,\n+    ITokenChecker,\n+)\n from pylint.lint import PyLinter\n+from pylint.reporters import BaseReporter\n+from pylint.reporters.ureports.nodes import Section\n \n \n def test_mapreducemixin() -> None:\n@@ -26,3 +37,44 @@ def reduce_map_data(self, linter: PyLinter, data: list[Any]) -> None:\n \n     with pytest.warns(DeprecationWarning):\n         MyChecker()\n+\n+\n+def test_reporter_implements() -> None:\n+    \"\"\"Test that __implements__ on BaseReporer has been deprecated correctly.\"\"\"\n+\n+    class MyReporter(BaseReporter):\n+\n+        __implements__ = IReporter\n+\n+        def _display(self, layout: Section) -> None:\n+            ...\n+\n+    with pytest.warns(DeprecationWarning):\n+        MyReporter()\n+\n+\n+def test_checker_implements() -> None:\n+    \"\"\"Test that __implements__ on BaseChecker has been deprecated correctly.\"\"\"\n+\n+    class MyChecker(BaseChecker):\n+\n+        __implements__ = IAstroidChecker\n+\n+    with pytest.warns(DeprecationWarning):\n+        MyChecker(PyLinter())\n+\n+\n+def test_interfaces() -> None:\n+    \"\"\"Test that all interfaces have been deprecated correctly.\"\"\"\n+    with pytest.warns(DeprecationWarning):\n+        Interface()\n+    with pytest.warns(DeprecationWarning):\n+        IAstroidChecker()\n+    with pytest.warns(DeprecationWarning):\n+        IReporter()\n+    with pytest.warns(DeprecationWarning):\n+        IRawChecker()\n+    with pytest.warns(DeprecationWarning):\n+        IChecker()\n+    with pytest.warns(DeprecationWarning):\n+        ITokenChecker()\n",
  "problem_statement": "Support isinstance checks through ABCMeta for checkers and reporters\nCurrently the PyLinter categorizes checkers through the `__implements__` class attribute. This is not very standard, and is one more barrier for others to write plugins.\r\n\r\nI propose\r\n\r\n* Changing the interfaces to have a `ABCMeta` metaclass\r\n* Change PyLinter to do isinstance checks to categorize checkers/reporters in addition to keeping the old `__implements__` checks\n",
  "hints_text": "This sounds good but note that we'd need to support the old style until we move the plugins to the new format. \nAgreed\nI'm going to take this on as a next step towards `3.0`. I have been experimenting with this and it seems like this will be fairly easy to implement. The biggest difficulty comes from deprecating this in a clear way and giving plugins enough time to adapt.\r\n\r\nIt should be much less of a hassle (for us at least) than the `argparse` migration but will be crucial to put in `3.0`.\r\n\r\nAs a first step I have been working on https://github.com/DanielNoord/pylint/pull/129 which supports this for the first two interfaces.\r\n\r\n\nNote that the system we currently use seems to be based on a rejected PEP from 2001, see: https://peps.python.org/pep-0245/\nDoes anybody have any good ideas how to handle the deprecation of these `Interface` classes?\r\nBecause we do:\r\n```python\r\nclass MyChecker(BaseChecker):\r\n    __implements__ = IAstroidChecker\r\n```\r\nwe don't hit the ``__init__`` of ``IAstroidChecker`` so that doesn't really work. I'm not sure what the best approach would be here.\nCan we check if ``__implements__`` is defined inside ``BaseChecker``'s constructor and warn for each interface if that's the case ?\n> Can we check if `__implements__` is defined inside `BaseChecker`'s constructor and warn for each interface if that's the case ?\r\n\r\nThe issue with that is that we don't really check all uses of `IAstroidChecker`. This would not raise a warning:\r\n```python\r\nclass MyBaseChecker:\r\n    __implements__ = IAstroidChecker\r\n\r\n# All other methods needed to mimic BaseChecker\r\ndef add_message():\r\n    ...\r\n```\r\n\r\nThus, would that approach be enough?\nHa yes, I supposed everything would inherit from BaseChecker. We can also check that our checkers are instances of BaseChecker when we loop on them in the PyLinter then ?\nYeah, but then we still don't really check the imports. The difficult comes from the fact that the normal usage of these classes is to import them but not instantiate them. Thus, we can't warn during ``__init__`` and have no good way (that I know of) of checking whether they are imported/used. \nThe interface class are not instanced directly but they have no use apart from being used as a semantic interface in a checker (that I know off). And indeed they have no behavior inside them so I don't see how they could be used any other way than semantically. I think not warning for import is okay.\nOkay so we would want a warning in:\r\n1. The ``__init__`` of ``BaseChecker`` to check for a ``__implements__`` member\r\n2. The ``__init__`` of all interfaces (just to be sure)\r\n3. All current calls to ``__implements__``\r\n\r\nRight?\nSounds right !",
  "created_at": "2022-04-20T12:16:20Z",
  "version": "2.14",
  "FAIL_TO_PASS": "[\"tests/test_deprecation.py::test_reporter_implements\", \"tests/test_deprecation.py::test_checker_implements\", \"tests/test_deprecation.py::test_interfaces\"]",
  "PASS_TO_PASS": "[\"tests/test_deprecation.py::test_mapreducemixin\"]",
  "environment_setup_commit": "680edebc686cad664bbed934a490aeafa775f163",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.913050",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}