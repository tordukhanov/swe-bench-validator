{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25404",
  "base_commit": "b51a227058e16cdbc56890f49e3a0888ea02b9d2",
  "patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -2457,15 +2457,16 @@ def artists(self):\n \n     def set_props(self, **props):\n         \"\"\"\n-        Set the properties of the selector artist. See the `props` argument\n-        in the selector docstring to know which properties are supported.\n+        Set the properties of the selector artist.\n+\n+        See the *props* argument in the selector docstring to know which properties are\n+        supported.\n         \"\"\"\n         artist = self._selection_artist\n         props = cbook.normalize_kwargs(props, artist)\n         artist.set(**props)\n         if self.useblit:\n             self.update()\n-        self._props.update(props)\n \n     def set_handle_props(self, **handle_props):\n         \"\"\"\n@@ -2658,7 +2659,6 @@ def __init__(self, ax, onselect, direction, minspan=0, useblit=False,\n         # but we maintain it until it is removed\n         self._pressv = None\n \n-        self._props = props\n         self.onmove_callback = onmove_callback\n         self.minspan = minspan\n \n@@ -2670,7 +2670,7 @@ def __init__(self, ax, onselect, direction, minspan=0, useblit=False,\n \n         # Reset canvas so that `new_axes` connects events.\n         self.canvas = None\n-        self.new_axes(ax)\n+        self.new_axes(ax, _props=props)\n \n         # Setup handles\n         self._handle_props = {\n@@ -2686,7 +2686,7 @@ def __init__(self, ax, onselect, direction, minspan=0, useblit=False,\n         # prev attribute is deprecated but we still need to maintain it\n         self._prev = (0, 0)\n \n-    def new_axes(self, ax):\n+    def new_axes(self, ax, *, _props=None):\n         \"\"\"Set SpanSelector to operate on a new Axes.\"\"\"\n         self.ax = ax\n         if self.canvas is not ax.figure.canvas:\n@@ -2705,10 +2705,11 @@ def new_axes(self, ax):\n         else:\n             trans = ax.get_yaxis_transform()\n             w, h = 1, 0\n-        rect_artist = Rectangle((0, 0), w, h,\n-                                transform=trans,\n-                                visible=False,\n-                                **self._props)\n+        rect_artist = Rectangle((0, 0), w, h, transform=trans, visible=False)\n+        if _props is not None:\n+            rect_artist.update(_props)\n+        elif self._selection_artist is not None:\n+            rect_artist.update_from(self._selection_artist)\n \n         self.ax.add_patch(rect_artist)\n         self._selection_artist = rect_artist\n@@ -3287,9 +3288,9 @@ def __init__(self, ax, onselect, *, minspanx=0, minspany=0, useblit=False,\n         if props is None:\n             props = dict(facecolor='red', edgecolor='black',\n                          alpha=0.2, fill=True)\n-        self._props = {**props, 'animated': self.useblit}\n-        self._visible = self._props.pop('visible', self._visible)\n-        to_draw = self._init_shape(**self._props)\n+        props = {**props, 'animated': self.useblit}\n+        self._visible = props.pop('visible', self._visible)\n+        to_draw = self._init_shape(**props)\n         self.ax.add_patch(to_draw)\n \n         self._selection_artist = to_draw\n@@ -3305,8 +3306,7 @@ def __init__(self, ax, onselect, *, minspanx=0, minspany=0, useblit=False,\n \n         if self._interactive:\n             self._handle_props = {\n-                'markeredgecolor': (self._props or {}).get(\n-                    'edgecolor', 'black'),\n+                'markeredgecolor': (props or {}).get('edgecolor', 'black'),\n                 **cbook.normalize_kwargs(handle_props, Line2D)}\n \n             self._corner_order = ['SW', 'SE', 'NE', 'NW']\n@@ -3942,13 +3942,13 @@ def __init__(self, ax, onselect, useblit=False,\n \n         if props is None:\n             props = dict(color='k', linestyle='-', linewidth=2, alpha=0.5)\n-        self._props = {**props, 'animated': self.useblit}\n-        self._selection_artist = line = Line2D([], [], **self._props)\n+        props = {**props, 'animated': self.useblit}\n+        self._selection_artist = line = Line2D([], [], **props)\n         self.ax.add_line(line)\n \n         if handle_props is None:\n             handle_props = dict(markeredgecolor='k',\n-                                markerfacecolor=self._props.get('color', 'k'))\n+                                markerfacecolor=props.get('color', 'k'))\n         self._handle_props = handle_props\n         self._polygon_handles = ToolHandles(self.ax, [], [],\n                                             useblit=self.useblit,\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -987,6 +987,19 @@ def test_lasso_selector(ax, kwargs):\n     onselect.assert_called_once_with([(100, 100), (125, 125), (150, 150)])\n \n \n+def test_lasso_selector_set_props(ax):\n+    onselect = mock.Mock(spec=noop, return_value=None)\n+\n+    tool = widgets.LassoSelector(ax, onselect, props=dict(color='b', alpha=0.2))\n+\n+    artist = tool._selection_artist\n+    assert mcolors.same_color(artist.get_color(), 'b')\n+    assert artist.get_alpha() == 0.2\n+    tool.set_props(color='r', alpha=0.3)\n+    assert mcolors.same_color(artist.get_color(), 'r')\n+    assert artist.get_alpha() == 0.3\n+\n+\n def test_CheckButtons(ax):\n     check = widgets.CheckButtons(ax, ('a', 'b', 'c'), (True, False, True))\n     assert check.get_status() == [True, False, True]\n",
  "problem_statement": "[Bug]: AttributeError: 'LassoSelector' object has no attribute '_props'\n### Summary\r\n\r\nI used the LassoSelector object to select the single point in the scatterplot. But when I try to update the line color of LassoSelector with the set_props function, I get an error like this **AttributeError: 'LassoSelector' object has no attribute '_props'**.\r\n\r\n### Proposed fix\r\n\r\nThis warning does not occur when the comment symbol is placed at the beginning of the line \"**self._props.update(props)**\" in the \"**set_ props**\" function of the matplotlib library's widget.py code.\n",
  "hints_text": "The properties for `LassoSelector` is applied to the line stored as `self._selection_artist`. As such `self._props` is not defined in the constructor.\r\n\r\nI *think* the correct solution is to redefine `set_props` for `LassoSelector` (and in that method set the props of the line), but there may be someone knowing better.\nFrom a quick look, I'd perhaps try to just get rid of the _props attribute and always store the properties directly in the instantiated artist (creating it as early as possible).\nIt appears that the artist _is_ generally used, and the only real need for `_SelectorWidget._props` is in `SpanSelector.new_axes`, which needs to know the properties when attaching a new `Axes`.",
  "created_at": "2023-03-07T09:33:22Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_widgets.py::test_lasso_selector_set_props\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_widgets.py::test_save_blitted_widget_as_pdf\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs0]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs1]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs2]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs3]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_deprecation_selector_visible_attribute\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[True-new_center0]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[False-new_center1]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_set_props_handle_props\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_add_state\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[RectangleSelector]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[EllipseSelector]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_add_remove_set\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_ellipse\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_handles\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs0]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[vertical-True-kwargs1]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs2]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs3]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_direction\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_set_props_handle_props\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear[span]\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear[rectangle]\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[span]\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[rectangle]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_add_state\", \"lib/matplotlib/tests/test_widgets.py::test_tool_line_handle\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_snapping_values_span_selector\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_snap\", \"lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs0]\", \"lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs1]\", \"lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs2]\", \"lib/matplotlib/tests/test_widgets.py::test_CheckButtons\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox[none]\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox[toolbar2]\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox[toolmanager]\", \"lib/matplotlib/tests/test_widgets.py::test_check_radio_buttons_image[png]\", \"lib/matplotlib/tests/test_widgets.py::test_radio_buttons[png]\", \"lib/matplotlib/tests/test_widgets.py::test_radio_buttons_props[png]\", \"lib/matplotlib/tests/test_widgets.py::test_radio_button_active_conflict\", \"lib/matplotlib/tests/test_widgets.py::test_radio_buttons_activecolor_change[png]\", \"lib/matplotlib/tests/test_widgets.py::test_check_buttons[png]\", \"lib/matplotlib/tests/test_widgets.py::test_check_button_props[png]\", \"lib/matplotlib/tests/test_widgets.py::test_check_buttons_rectangles[png]\", \"lib/matplotlib/tests/test_widgets.py::test_check_buttons_lines[png]\", \"lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax_invalid\", \"lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax\", \"lib/matplotlib/tests/test_widgets.py::test_slider_valmin_valmax\", \"lib/matplotlib/tests/test_widgets.py::test_slider_valstep_snapping\", \"lib/matplotlib/tests/test_widgets.py::test_slider_horizontal_vertical\", \"lib/matplotlib/tests/test_widgets.py::test_slider_reset\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector[True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rect_visibility[png]\", \"lib/matplotlib/tests/test_widgets.py::test_rect_visibility[pdf]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-1]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-2]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-3]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-1]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-2]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-3]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_box\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-False]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-True]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-False]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-True]\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.820335",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}