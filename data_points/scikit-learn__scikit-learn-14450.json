{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-14450",
  "base_commit": "68044b061d7abc0c16f632890939438033306161",
  "patch": "diff --git a/sklearn/cross_decomposition/pls_.py b/sklearn/cross_decomposition/pls_.py\n--- a/sklearn/cross_decomposition/pls_.py\n+++ b/sklearn/cross_decomposition/pls_.py\n@@ -31,7 +31,11 @@ def _nipals_twoblocks_inner_loop(X, Y, mode=\"A\", max_iter=500, tol=1e-06,\n     similar to the Power method for determining the eigenvectors and\n     eigenvalues of a X'Y.\n     \"\"\"\n-    y_score = Y[:, [0]]\n+    for col in Y.T:\n+        if np.any(np.abs(col) > np.finfo(np.double).eps):\n+            y_score = col.reshape(len(col), 1)\n+            break\n+\n     x_weights_old = 0\n     ite = 1\n     X_pinv = Y_pinv = None\n",
  "test_patch": "diff --git a/sklearn/cross_decomposition/tests/test_pls.py b/sklearn/cross_decomposition/tests/test_pls.py\n--- a/sklearn/cross_decomposition/tests/test_pls.py\n+++ b/sklearn/cross_decomposition/tests/test_pls.py\n@@ -261,6 +261,47 @@ def check_ortho(M, err_msg):\n     check_ortho(pls_ca.x_scores_, \"x scores are not orthogonal\")\n     check_ortho(pls_ca.y_scores_, \"y scores are not orthogonal\")\n \n+    # 4) Another \"Non regression test\" of PLS Regression (PLS2):\n+    #    Checking behavior when the first column of Y is constant\n+    # ===============================================\n+    # The results were compared against a modified version of plsreg2\n+    # from the R-package plsdepot\n+    X = d.data\n+    Y = d.target\n+    Y[:, 0] = 1\n+    pls_2 = pls_.PLSRegression(n_components=X.shape[1])\n+    pls_2.fit(X, Y)\n+\n+    x_weights = np.array(\n+        [[-0.6273573, 0.007081799, 0.7786994],\n+         [-0.7493417, -0.277612681, -0.6011807],\n+         [-0.2119194, 0.960666981, -0.1794690]])\n+    x_weights_sign_flip = pls_2.x_weights_ / x_weights\n+\n+    x_loadings = np.array(\n+        [[-0.6273512, -0.22464538, 0.7786994],\n+         [-0.6643156, -0.09871193, -0.6011807],\n+         [-0.5125877, 1.01407380, -0.1794690]])\n+    x_loadings_sign_flip = pls_2.x_loadings_ / x_loadings\n+\n+    y_loadings = np.array(\n+        [[0.0000000, 0.0000000, 0.0000000],\n+         [0.4357300, 0.5828479, 0.2174802],\n+         [-0.1353739, -0.2486423, -0.1810386]])\n+\n+    # R/python sign flip should be the same in x_weight and x_rotation\n+    assert_array_almost_equal(x_loadings_sign_flip, x_weights_sign_flip, 4)\n+\n+    # This test that R / python give the same result up to column\n+    # sign indeterminacy\n+    assert_array_almost_equal(np.abs(x_loadings_sign_flip), 1, 4)\n+    assert_array_almost_equal(np.abs(x_weights_sign_flip), 1, 4)\n+\n+    # For the PLSRegression with default parameters, it holds that\n+    # y_loadings==y_weights. In this case we only test that R/python\n+    # give the same result for the y_loadings irrespective of the sign\n+    assert_array_almost_equal(np.abs(pls_2.y_loadings_), np.abs(y_loadings), 4)\n+\n \n def test_convergence_fail():\n     d = load_linnerud()\n",
  "problem_statement": "PLS reports \"array must not contain nan\" if a feature is constant\nOriginally reported at https://github.com/scikit-learn/scikit-learn/issues/2089#issuecomment-152753095 by @Franck-Dernoncourt. Reproduce with:\r\n```py\r\nimport numpy as np\r\nimport sklearn.cross_decomposition\r\n\r\npls2 = sklearn.cross_decomposition.PLSRegression()\r\nxx = np.random.random((5,5))\r\nyy = np.zeros((5,5) ) \r\n\r\nyy[0,:] = [0,1,0,0,0]\r\nyy[1,:] = [0,0,0,1,0]\r\nyy[2,:] = [0,0,0,0,1]\r\n#yy[3,:] = [1,0,0,0,0] # Uncommenting this line solves the issue\r\n\r\npls2.fit(xx, yy)\r\n```\r\n\r\nThe obscure error message is due to the presence of a column containing only 0.\n",
  "hints_text": "What would you like to see instead? An assertion when the `fit` method is called that checks that no feature is constant, and returns a clear error if the assertion fails?\nAlready we raise an error. Better that we actually do the pls but disregard\nthe 0-variance column. See some of the comments at the original post.\n\nAs far as I understand we need to remove the warning message keeping the correct answer (when line yy[3,:] = [1,0,0,0,0] is uncommented ).\r\nCan I try to solve this issue if nobody minds?\nThat's ok with me :)\r\n\r\nOn Wed, 17 Apr 2019, 00:46 iodapro, <notifications@github.com> wrote:\r\n\r\n> As far as I understand we need to remove the warning message keeping the\r\n> correct answer (when line yy[3,:] = [1,0,0,0,0] is uncommented ).\r\n> Can I try to solve this issue if nobody minds?\r\n>\r\n> â€”\r\n> You are receiving this because you commented.\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/scikit-learn/scikit-learn/issues/13609#issuecomment-483883450>,\r\n> or mute the thread\r\n> <https://github.com/notifications/unsubscribe-auth/Af8KsEcpWvUXFQhRVgyeBbVCyvCxEwpEks5vhmDBgaJpZM4cmyf4>\r\n> .\r\n>\r\n\n> As far as I understand we need to remove the warning message keeping the correct answer\r\n\r\nI'm not an expert on PLS; I was relying on the comments historically related to this issue to describe it as a simple fix. But certainly the problem is constant features.\r\n\r\nGo ahead and submit a pull request, @iodapro \n@jnothman there is something I can't undestand about the example you give in the issue:  Even when we are uncommenting the line yy[3,:] = [1,0,0,0,0],  the third column of yy is constant, but in that case pls2.fit(xx, yy) works. Do we need two columns to be constant for the PLS to fail?\nAfter taking a deeper look at the problem, the problem is not constant features. The problem is that the first column of the target (yy) is constant. For instance, this case will work (constant features and some constant columns in the target that are not the first column):\r\n```\r\nimport numpy as np\r\nimport sklearn.cross_decomposition\r\n\r\npls2 = sklearn.cross_decomposition.PLSRegression()\r\nxx = np.random.random((5,5))\r\nxx[:,1] = 1\r\nxx[:,2] = 0\r\nyy = np.random.random((5,5))\r\nyy[:,2] = 5\r\nyy[:,4] = 1\r\npls2.fit(xx, yy)\r\npls2.predict(xx)\r\n```\r\n\r\nBut this case won't (the first column in the target is a constant):\r\n```\r\nimport numpy as np\r\nimport sklearn.cross_decomposition\r\n\r\npls2 = sklearn.cross_decomposition.PLSRegression()\r\nxx = np.random.random((5,5))\r\nyy = np.random.random((5,5))\r\nyy[:,0] = 4\r\npls2.fit(xx, yy)\r\npls2.predict(xx)\r\n```\r\n\r\nThis is because the first step of the `_nipals_twoblocks_inner_loop` algorithm is to calculate `y_score = Y[:, [0]]`  and this will cause the `x_weights = np.dot(X.T, y_score) / np.dot(y_score.T, y_score)` to be an array of nan.  This happens because `_center_scale_xy` will cause  the first column of yy to be a column of zeros.\r\n\r\n\r\n",
  "created_at": "2019-07-23T19:31:07Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/cross_decomposition/tests/test_pls.py::test_pls\"]",
  "PASS_TO_PASS": "[\"sklearn/cross_decomposition/tests/test_pls.py::test_convergence_fail\", \"sklearn/cross_decomposition/tests/test_pls.py::test_PLSSVD\", \"sklearn/cross_decomposition/tests/test_pls.py::test_univariate_pls_regression\", \"sklearn/cross_decomposition/tests/test_pls.py::test_predict_transform_copy\", \"sklearn/cross_decomposition/tests/test_pls.py::test_scale_and_stability\", \"sklearn/cross_decomposition/tests/test_pls.py::test_pls_errors\", \"sklearn/cross_decomposition/tests/test_pls.py::test_pls_scaling\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.004460",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}