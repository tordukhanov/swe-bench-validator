{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13392",
  "base_commit": "21fc1d97452d4e3a6d744d0eef95ecaf7e87859c",
  "patch": "diff --git a/examples/model_selection/plot_roc.py b/examples/model_selection/plot_roc.py\n--- a/examples/model_selection/plot_roc.py\n+++ b/examples/model_selection/plot_roc.py\n@@ -150,7 +150,7 @@\n # Area under ROC for the multiclass problem\n # .........................................\n # The :func:`sklearn.metrics.roc_auc_score` function can be used for\n-# multi-class classification. The mutliclass One-vs-One scheme compares every\n+# multi-class classification. The multi-class One-vs-One scheme compares every\n # unique pairwise combination of classes. In this section, we calcuate the AUC\n # using the OvR and OvO schemes. We report a macro average, and a\n # prevalence-weighted average.\ndiff --git a/sklearn/linear_model/coordinate_descent.py b/sklearn/linear_model/coordinate_descent.py\n--- a/sklearn/linear_model/coordinate_descent.py\n+++ b/sklearn/linear_model/coordinate_descent.py\n@@ -1388,6 +1388,8 @@ def __init__(self, eps=1e-3, n_alphas=100, alphas=None, fit_intercept=True,\n             cv=cv, verbose=verbose, n_jobs=n_jobs, positive=positive,\n             random_state=random_state, selection=selection)\n \n+    def _more_tags(self):\n+        return {'multioutput': False}\n \n class ElasticNetCV(RegressorMixin, LinearModelCV):\n     \"\"\"Elastic Net model with iterative fitting along a regularization path.\n@@ -1593,6 +1595,8 @@ def __init__(self, l1_ratio=0.5, eps=1e-3, n_alphas=100, alphas=None,\n         self.random_state = random_state\n         self.selection = selection\n \n+    def _more_tags(self):\n+        return {'multioutput': False}\n \n ###############################################################################\n # Multi Task ElasticNet and Lasso models (with joint feature selection)\ndiff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py\n--- a/sklearn/linear_model/least_angle.py\n+++ b/sklearn/linear_model/least_angle.py\n@@ -1358,6 +1358,9 @@ def __init__(self, fit_intercept=True, verbose=False, max_iter=500,\n                          n_nonzero_coefs=500,\n                          eps=eps, copy_X=copy_X, fit_path=True)\n \n+    def _more_tags(self):\n+        return {'multioutput': False}\n+\n     def fit(self, X, y):\n         \"\"\"Fit the model using X, y as training data.\n \n@@ -1729,6 +1732,9 @@ def __init__(self, criterion='aic', fit_intercept=True, verbose=False,\n         self.eps = eps\n         self.fit_path = True\n \n+    def _more_tags(self):\n+        return {'multioutput': False}\n+\n     def fit(self, X, y, copy_X=None):\n         \"\"\"Fit the model using X, y as training data.\n \ndiff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -521,7 +521,7 @@ def _ridge_regression(X, y, alpha, sample_weight=None, solver='auto',\n         return coef\n \n \n-class _BaseRidge(MultiOutputMixin, LinearModel, metaclass=ABCMeta):\n+class _BaseRidge(LinearModel, metaclass=ABCMeta):\n     @abstractmethod\n     def __init__(self, alpha=1.0, fit_intercept=True, normalize=False,\n                  copy_X=True, max_iter=None, tol=1e-3, solver=\"auto\",\n@@ -602,7 +602,7 @@ def fit(self, X, y, sample_weight=None):\n         return self\n \n \n-class Ridge(RegressorMixin, _BaseRidge):\n+class Ridge(MultiOutputMixin, RegressorMixin, _BaseRidge):\n     \"\"\"Linear least squares with l2 regularization.\n \n     Minimizes the objective function::\n@@ -1506,7 +1506,7 @@ def identity_estimator():\n         return self\n \n \n-class _BaseRidgeCV(MultiOutputMixin, LinearModel):\n+class _BaseRidgeCV(LinearModel):\n     def __init__(self, alphas=(0.1, 1.0, 10.0),\n                  fit_intercept=True, normalize=False, scoring=None,\n                  cv=None, gcv_mode=None,\n@@ -1578,7 +1578,7 @@ def fit(self, X, y, sample_weight=None):\n         return self\n \n \n-class RidgeCV(RegressorMixin, _BaseRidgeCV):\n+class RidgeCV(MultiOutputMixin, RegressorMixin, _BaseRidgeCV):\n     \"\"\"Ridge regression with built-in cross-validation.\n \n     See glossary entry for :term:`cross-validation estimator`.\ndiff --git a/sklearn/neighbors/regression.py b/sklearn/neighbors/regression.py\n--- a/sklearn/neighbors/regression.py\n+++ b/sklearn/neighbors/regression.py\n@@ -148,6 +148,11 @@ def __init__(self, n_neighbors=5, weights='uniform',\n               metric_params=metric_params, n_jobs=n_jobs, **kwargs)\n         self.weights = _check_weights(weights)\n \n+    @property\n+    def _pairwise(self):\n+        # For cross-validation routines to split data correctly\n+        return self.metric == 'precomputed'\n+\n     def predict(self, X):\n         \"\"\"Predict the target for the provided data\n \ndiff --git a/sklearn/utils/estimator_checks.py b/sklearn/utils/estimator_checks.py\n--- a/sklearn/utils/estimator_checks.py\n+++ b/sklearn/utils/estimator_checks.py\n@@ -38,7 +38,6 @@\n                     BaseEstimator)\n \n from ..metrics import accuracy_score, adjusted_rand_score, f1_score\n-\n from ..random_projection import BaseRandomProjection\n from ..feature_selection import SelectKBest\n from ..pipeline import make_pipeline\n@@ -54,13 +53,13 @@\n from .import deprecated\n from .validation import has_fit_parameter, _num_samples\n from ..preprocessing import StandardScaler\n-from ..datasets import load_iris, load_boston, make_blobs\n+from ..datasets import (load_iris, load_boston, make_blobs,\n+                        make_multilabel_classification, make_regression)\n \n \n BOSTON = None\n CROSS_DECOMPOSITION = ['PLSCanonical', 'PLSRegression', 'CCA', 'PLSSVD']\n \n-\n def _safe_tags(estimator, key=None):\n     # if estimator doesn't have _get_tags, use _DEFAULT_TAGS\n     # if estimator has tags but not key, use _DEFAULT_TAGS[key]\n@@ -125,6 +124,8 @@ def _yield_classifier_checks(name, classifier):\n     yield check_classifiers_one_label\n     yield check_classifiers_classes\n     yield check_estimators_partial_fit_n_features\n+    if tags[\"multioutput\"]:\n+        yield check_classifier_multioutput\n     # basic consistency testing\n     yield check_classifiers_train\n     yield partial(check_classifiers_train, readonly_memmap=True)\n@@ -174,6 +175,8 @@ def _yield_regressor_checks(name, regressor):\n     yield partial(check_regressors_train, readonly_memmap=True)\n     yield check_regressor_data_not_an_array\n     yield check_estimators_partial_fit_n_features\n+    if tags[\"multioutput\"]:\n+        yield check_regressor_multioutput\n     yield check_regressors_no_decision_function\n     if not tags[\"no_validation\"]:\n         yield check_supervised_y_2d\n@@ -1495,6 +1498,87 @@ def check_estimators_partial_fit_n_features(name, estimator_orig):\n         estimator.partial_fit(X[:, :-1], y)\n \n \n+@ignore_warnings(category=(DeprecationWarning, FutureWarning))\n+def check_classifier_multioutput(name, estimator):\n+    n_samples, n_labels, n_classes = 42, 5, 3\n+    tags = _safe_tags(estimator)\n+    estimator = clone(estimator)\n+    X, y = make_multilabel_classification(random_state=42,\n+                                          n_samples=n_samples,\n+                                          n_labels=n_labels,\n+                                          n_classes=n_classes)\n+    estimator.fit(X, y)\n+    y_pred = estimator.predict(X)\n+\n+    assert y_pred.shape == (n_samples, n_classes), (\n+        \"The shape of the prediction for multioutput data is \"\n+        \"incorrect. Expected {}, got {}.\"\n+        .format((n_samples, n_labels), y_pred.shape))\n+    assert y_pred.dtype.kind == 'i'\n+\n+    if hasattr(estimator, \"decision_function\"):\n+        decision = estimator.decision_function(X)\n+        assert isinstance(decision, np.ndarray)\n+        assert decision.shape == (n_samples, n_classes), (\n+            \"The shape of the decision function output for \"\n+            \"multioutput data is incorrect. Expected {}, got {}.\"\n+            .format((n_samples, n_classes), decision.shape))\n+\n+        dec_pred = (decision > 0).astype(np.int)\n+        dec_exp = estimator.classes_[dec_pred]\n+        assert_array_equal(dec_exp, y_pred)\n+\n+    if hasattr(estimator, \"predict_proba\"):\n+        y_prob = estimator.predict_proba(X)\n+\n+        if isinstance(y_prob, list) and not tags['poor_score']:\n+            for i in range(n_classes):\n+                assert y_prob[i].shape == (n_samples, 2), (\n+                    \"The shape of the probability for multioutput data is\"\n+                    \" incorrect. Expected {}, got {}.\"\n+                    .format((n_samples, 2), y_prob[i].shape))\n+                assert_array_equal(\n+                    np.argmax(y_prob[i], axis=1).astype(np.int),\n+                    y_pred[:, i]\n+                )\n+        elif not tags['poor_score']:\n+            assert y_prob.shape == (n_samples, n_classes), (\n+                \"The shape of the probability for multioutput data is\"\n+                \" incorrect. Expected {}, got {}.\"\n+                .format((n_samples, n_classes), y_prob.shape))\n+            assert_array_equal(y_prob.round().astype(int), y_pred)\n+\n+    if (hasattr(estimator, \"decision_function\") and\n+            hasattr(estimator, \"predict_proba\")):\n+        for i in range(n_classes):\n+            y_proba = estimator.predict_proba(X)[:, i]\n+            y_decision = estimator.decision_function(X)\n+            assert_array_equal(rankdata(y_proba), rankdata(y_decision[:, i]))\n+\n+\n+@ignore_warnings(category=(DeprecationWarning, FutureWarning))\n+def check_regressor_multioutput(name, estimator):\n+    estimator = clone(estimator)\n+    n_samples = n_features = 10\n+\n+    if not _is_pairwise_metric(estimator):\n+        n_samples = n_samples + 1\n+\n+    X, y = make_regression(random_state=42, n_targets=5,\n+                           n_samples=n_samples, n_features=n_features)\n+    X = pairwise_estimator_convert_X(X, estimator)\n+\n+    estimator.fit(X, y)\n+    y_pred = estimator.predict(X)\n+\n+    assert y_pred.dtype == np.dtype('float64'), (\n+        \"Multioutput predictions by a regressor are expected to be\"\n+        \" floating-point precision. Got {} instead\".format(y_pred.dtype))\n+    assert y_pred.shape == y.shape, (\n+        \"The shape of the orediction for multioutput data is incorrect.\"\n+        \" Expected {}, got {}.\")\n+\n+\n @ignore_warnings(category=(DeprecationWarning, FutureWarning))\n def check_clustering(name, clusterer_orig, readonly_memmap=False):\n     clusterer = clone(clusterer_orig)\n",
  "test_patch": "diff --git a/sklearn/ensemble/tests/test_forest.py b/sklearn/ensemble/tests/test_forest.py\n--- a/sklearn/ensemble/tests/test_forest.py\n+++ b/sklearn/ensemble/tests/test_forest.py\n@@ -1294,27 +1294,6 @@ def test_backend_respected():\n     assert ba.count == 0\n \n \n-@pytest.mark.parametrize('name', FOREST_CLASSIFIERS)\n-@pytest.mark.parametrize('oob_score', (True, False))\n-def test_multi_target(name, oob_score):\n-    ForestClassifier = FOREST_CLASSIFIERS[name]\n-\n-    clf = ForestClassifier(bootstrap=True, oob_score=oob_score)\n-\n-    X = iris.data\n-\n-    # Make multi column mixed type target.\n-    y = np.vstack([\n-        iris.target.astype(float),\n-        iris.target.astype(int),\n-        iris.target.astype(str),\n-    ]).T\n-\n-    # Try to fit and predict.\n-    clf.fit(X, y)\n-    clf.predict(X)\n-\n-\n def test_forest_feature_importances_sum():\n     X, y = make_classification(n_samples=15, n_informative=3, random_state=1,\n                                n_classes=3)\ndiff --git a/sklearn/tree/tests/test_tree.py b/sklearn/tree/tests/test_tree.py\n--- a/sklearn/tree/tests/test_tree.py\n+++ b/sklearn/tree/tests/test_tree.py\n@@ -1823,26 +1823,6 @@ def test_empty_leaf_infinite_threshold():\n         assert len(empty_leaf) == 0\n \n \n-@pytest.mark.parametrize('name', CLF_TREES)\n-def test_multi_target(name):\n-    Tree = CLF_TREES[name]\n-\n-    clf = Tree()\n-\n-    X = iris.data\n-\n-    # Make multi column mixed type target.\n-    y = np.vstack([\n-        iris.target.astype(float),\n-        iris.target.astype(int),\n-        iris.target.astype(str),\n-    ]).T\n-\n-    # Try to fit and predict.\n-    clf.fit(X, y)\n-    clf.predict(X)\n-\n-\n def test_decision_tree_memmap():\n     # check that decision trees supports read-only buffer (#13626)\n     X = np.random.RandomState(0).random_sample((10, 2)).astype(np.float32)\ndiff --git a/sklearn/utils/tests/test_estimator_checks.py b/sklearn/utils/tests/test_estimator_checks.py\n--- a/sklearn/utils/tests/test_estimator_checks.py\n+++ b/sklearn/utils/tests/test_estimator_checks.py\n@@ -282,7 +282,7 @@ class UntaggedBinaryClassifier(DecisionTreeClassifier):\n     # Toy classifier that only supports binary classification, will fail tests.\n     def fit(self, X, y, sample_weight=None):\n         super().fit(X, y, sample_weight)\n-        if self.n_classes_ > 2:\n+        if np.all(self.n_classes_ > 2):\n             raise ValueError('Only 2 classes are supported')\n         return self\n \n@@ -296,7 +296,7 @@ def _more_tags(self):\n class RequiresPositiveYRegressor(LinearRegression):\n \n     def fit(self, X, y):\n-        X, y = check_X_y(X, y)\n+        X, y = check_X_y(X, y, multi_output=True)\n         if (y <= 0).any():\n             raise ValueError('negative y values not supported!')\n         return super().fit(X, y)\n@@ -423,7 +423,9 @@ def test_check_estimator():\n     check_estimator(TaggedBinaryClassifier)\n \n     # Check regressor with requires_positive_y estimator tag\n-    check_estimator(RequiresPositiveYRegressor)\n+    msg = 'negative y values not supported!'\n+    assert_raises_regex(ValueError, msg, check_estimator,\n+                        RequiresPositiveYRegressor)\n \n \n def test_check_outlier_corruption():\n@@ -511,7 +513,7 @@ def __init__(self, you_should_set_this_=None):\n \n def test_check_estimator_pairwise():\n     # check that check_estimator() works on estimator with _pairwise\n-    # kernel or  metric\n+    # kernel or metric\n \n     # test precomputed kernel\n     est = SVC(kernel='precomputed')\n",
  "problem_statement": "Missing multi-output checks in common tests\n#### Description\r\nSome classifiers and regressors support multi-output, however we do not have a common test for that. We should add it. See discussion in #11458.\r\n\r\nWe should also remember to remove redundant individual tests introduced by 95993a4b2b7d067d8d7fff91ccb2463dbd427e7c. \r\n\r\n#### Example of code for individual test\r\n```\r\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\r\nfrom sklearn import datasets\r\n\r\nX, y = datasets.make_multilabel_classification(n_classes=3)\r\n\r\n# Test multi-output classifier\r\nclf = RandomForestClassifier()\r\nclf.fit(X, y.astype(str)).predict(X)\r\n\r\n# Test multi-output regressor\r\nrfr = RandomForestRegressor()\r\nrfr.fit(X, y).predict(X)[:3]\r\n```\r\n#### Expected Results\r\nNo error is thrown for these checks. Some regressors and classifiers are omitted from this check.\n",
  "hints_text": "Thanks for raising this issue!\r\n\r\nIt might be worth waiting for https://github.com/scikit-learn/scikit-learn/pull/8022 to be merged (probably next week) before adding these tests.",
  "created_at": "2019-03-05T15:33:46Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator\"]",
  "PASS_TO_PASS": "[\"sklearn/ensemble/tests/test_forest.py::test_classification_toy[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_classification_toy[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_iris[gini-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_iris[gini-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_iris[entropy-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_iris[entropy-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_boston[mse-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_boston[mse-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_boston[mae-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_boston[mae-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_boston[friedman_mse-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_boston[friedman_mse-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_regressor_attributes[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_regressor_attributes[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_probability[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_probability[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesClassifier-gini-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesClassifier-gini-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesClassifier-entropy-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesClassifier-entropy-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestClassifier-gini-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestClassifier-gini-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestClassifier-entropy-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestClassifier-entropy-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-mse-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-mse-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-friedman_mse-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-friedman_mse-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-mae-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-mae-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-mse-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-mse-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-friedman_mse-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-friedman_mse-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-mae-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-mae-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances_asymptotic\", \"sklearn/ensemble/tests/test_forest.py::test_unfitted_feature_importances[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_unfitted_feature_importances[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_unfitted_feature_importances[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_unfitted_feature_importances[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_unfitted_feature_importances[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_classifiers[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_classifiers[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_regressors[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_regressors[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_raise_error[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_raise_error[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_raise_error[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_raise_error[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_raise_error[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_gridsearch[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_gridsearch[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_parallel[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_parallel[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_parallel[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_parallel[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_pickle[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_pickle[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_pickle[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_pickle[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput_string[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput_string[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_classes_shape[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_classes_shape[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_random_trees_dense_type\", \"sklearn/ensemble/tests/test_forest.py::test_random_trees_dense_equal\", \"sklearn/ensemble/tests/test_forest.py::test_random_hasher\", \"sklearn/ensemble/tests/test_forest.py::test_random_hasher_sparse_data\", \"sklearn/ensemble/tests/test_forest.py::test_parallel_train\", \"sklearn/ensemble/tests/test_forest.py::test_distribution\", \"sklearn/ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_split[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_split[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_split[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_split[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_split[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_leaf[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_leaf[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_leaf[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_leaf[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_leaf[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_min_weight_fraction_leaf[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_weight_fraction_leaf[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_weight_fraction_leaf[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_weight_fraction_leaf[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_weight_fraction_leaf[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csr_matrix-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csr_matrix-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csr_matrix-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csr_matrix-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csr_matrix-RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csc_matrix-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csc_matrix-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csc_matrix-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csc_matrix-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csc_matrix-RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[coo_matrix-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[coo_matrix-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[coo_matrix-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[coo_matrix-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[coo_matrix-RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float64-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float64-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float64-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float64-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float32-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float32-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float32-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float32-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_1d_input[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_1d_input[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_1d_input[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_1d_input[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_1d_input[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weights[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weights[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weight_balanced_and_bootstrap_multi_output[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weight_balanced_and_bootstrap_multi_output[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weight_errors[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weight_errors[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_clear[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_clear[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_clear[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_clear[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_clear[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_smaller_n_estimators[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_smaller_n_estimators[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_smaller_n_estimators[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_smaller_n_estimators[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_smaller_n_estimators[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_equal_n_estimators[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_equal_n_estimators[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_equal_n_estimators[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_equal_n_estimators[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_equal_n_estimators[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_oob[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_oob[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_oob[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_oob[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_dtype_convert\", \"sklearn/ensemble/tests/test_forest.py::test_decision_path[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_decision_path[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_decision_path[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_decision_path[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_impurity_split\", \"sklearn/ensemble/tests/test_forest.py::test_min_impurity_decrease\", \"sklearn/ensemble/tests/test_forest.py::test_backend_respected\", \"sklearn/ensemble/tests/test_forest.py::test_forest_feature_importances_sum\", \"sklearn/ensemble/tests/test_forest.py::test_forest_degenerate_feature_importances\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_exceptions[1000000000-ValueError-`max_samples`\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_exceptions[1.0-ValueError-`max_samples`\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_exceptions[2.0-ValueError-`max_samples`\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_exceptions[0.0-ValueError-`max_samples`\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_exceptions[nan-ValueError-`max_samples`\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_exceptions[inf-ValueError-`max_samples`\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_exceptions[str\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_exceptions[max_samples7-TypeError-`max_samples`\", \"sklearn/ensemble/tests/test_forest.py::test_little_tree_with_small_max_samples[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_little_tree_with_small_max_samples[RandomForestRegressor]\", \"sklearn/tree/tests/test_tree.py::test_classification_toy\", \"sklearn/tree/tests/test_tree.py::test_weighted_classification_toy\", \"sklearn/tree/tests/test_tree.py::test_regression_toy\", \"sklearn/tree/tests/test_tree.py::test_xor\", \"sklearn/tree/tests/test_tree.py::test_iris\", \"sklearn/tree/tests/test_tree.py::test_boston\", \"sklearn/tree/tests/test_tree.py::test_probability\", \"sklearn/tree/tests/test_tree.py::test_arrayrepr\", \"sklearn/tree/tests/test_tree.py::test_pure_set\", \"sklearn/tree/tests/test_tree.py::test_numerical_stability\", \"sklearn/tree/tests/test_tree.py::test_importances\", \"sklearn/tree/tests/test_tree.py::test_importances_raises\", \"sklearn/tree/tests/test_tree.py::test_importances_gini_equal_mse\", \"sklearn/tree/tests/test_tree.py::test_max_features\", \"sklearn/tree/tests/test_tree.py::test_error\", \"sklearn/tree/tests/test_tree.py::test_min_samples_split\", \"sklearn/tree/tests/test_tree.py::test_min_samples_leaf\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_dense_input[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_dense_input[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_dense_input[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_dense_input[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_sparse_input[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_sparse_input[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_sparse_input[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_sparse_input[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_dense_input[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_dense_input[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_dense_input[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_dense_input[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_sparse_input[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_sparse_input[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_sparse_input[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_sparse_input[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_impurity_split\", \"sklearn/tree/tests/test_tree.py::test_min_impurity_decrease\", \"sklearn/tree/tests/test_tree.py::test_multioutput\", \"sklearn/tree/tests/test_tree.py::test_classes_shape\", \"sklearn/tree/tests/test_tree.py::test_unbalanced_iris\", \"sklearn/tree/tests/test_tree.py::test_memory_layout\", \"sklearn/tree/tests/test_tree.py::test_sample_weight\", \"sklearn/tree/tests/test_tree.py::test_sample_weight_invalid\", \"sklearn/tree/tests/test_tree.py::test_class_weights[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_class_weights[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_class_weight_errors[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_class_weight_errors[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_max_leaf_nodes\", \"sklearn/tree/tests/test_tree.py::test_max_leaf_nodes_max_depth\", \"sklearn/tree/tests/test_tree.py::test_arrays_persist\", \"sklearn/tree/tests/test_tree.py::test_only_constant_features\", \"sklearn/tree/tests/test_tree.py::test_behaviour_constant_feature_after_splits\", \"sklearn/tree/tests/test_tree.py::test_with_only_one_non_constant_features\", \"sklearn/tree/tests/test_tree.py::test_big_input\", \"sklearn/tree/tests/test_tree.py::test_realloc\", \"sklearn/tree/tests/test_tree.py::test_huge_allocations\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[clf_small-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[clf_small-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[clf_small-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[clf_small-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[toy-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[toy-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[toy-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[toy-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[digits-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[digits-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[digits-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[digits-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[multilabel-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[multilabel-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[multilabel-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[multilabel-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-pos-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-pos-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-pos-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-pos-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-neg-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-neg-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-neg-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-neg-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-mix-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-mix-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-mix-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-mix-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[zeros-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[zeros-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[zeros-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[zeros-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input_reg_trees[boston-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input_reg_trees[boston-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input_reg_trees[reg_small-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input_reg_trees[reg_small-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-pos-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-pos-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-pos-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-pos-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-neg-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-neg-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-neg-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-neg-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-mix-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-mix-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-mix-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-mix-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-zeros-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-zeros-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-zeros-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-zeros-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-pos-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-pos-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-pos-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-pos-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-neg-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-neg-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-neg-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-neg-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-mix-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-mix-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-mix-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-mix-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-zeros-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-zeros-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-zeros-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-zeros-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_explicit_sparse_zeros[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_explicit_sparse_zeros[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_explicit_sparse_zeros[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_explicit_sparse_zeros[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_1d_input[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_1d_input[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_1d_input[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_1d_input[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_leaf_split_level[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_leaf_split_level[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_leaf_split_level[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_leaf_split_level[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_all_trees[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_all_trees[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_all_trees[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_all_trees[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_sparse_trees[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_sparse_trees[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_sparse_trees[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_sparse_trees[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_presort_deprecated[auto-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_presort_deprecated[auto-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_presort_deprecated[True-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_presort_deprecated[True-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_presort_deprecated[False-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_presort_deprecated[False-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_decision_path_hardcoded\", \"sklearn/tree/tests/test_tree.py::test_decision_path[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_decision_path[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_decision_path[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_decision_path[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_no_sparse_y_support[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_no_sparse_y_support[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_no_sparse_y_support[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_no_sparse_y_support[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_mae\", \"sklearn/tree/tests/test_tree.py::test_criterion_copy\", \"sklearn/tree/tests/test_tree.py::test_empty_leaf_infinite_threshold\", \"sklearn/tree/tests/test_tree.py::test_decision_tree_memmap\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-clf_small-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-clf_small-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-digits-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-digits-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-iris-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-iris-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-multilabel-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-multilabel-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-sparse-mix-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-sparse-mix-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-sparse-neg-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-sparse-neg-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-sparse-pos-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-sparse-pos-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-toy-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-toy-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-zeros-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-zeros-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-clf_small-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-clf_small-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-digits-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-digits-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-iris-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-iris-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-multilabel-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-multilabel-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-sparse-mix-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-sparse-mix-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-sparse-neg-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-sparse-neg-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-sparse-pos-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-sparse-pos-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-toy-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-toy-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-zeros-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-zeros-entropy]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-iris-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-iris-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-iris-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-boston-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-boston-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-boston-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-digits-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-digits-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-digits-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-toy-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-toy-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-toy-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-clf_small-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-clf_small-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-clf_small-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-reg_small-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-reg_small-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-reg_small-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-multilabel-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-multilabel-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-multilabel-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-pos-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-pos-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-pos-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-neg-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-neg-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-neg-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-mix-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-mix-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-mix-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-zeros-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-zeros-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-zeros-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-iris-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-iris-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-iris-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-boston-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-boston-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-boston-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-digits-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-digits-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-digits-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-toy-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-toy-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-toy-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-clf_small-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-clf_small-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-clf_small-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-reg_small-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-reg_small-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-reg_small-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-multilabel-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-multilabel-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-multilabel-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-pos-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-pos-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-pos-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-neg-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-neg-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-neg-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-mix-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-mix-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-mix-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-zeros-mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-zeros-mae]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-zeros-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_single_node_tree\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_raises_negative_ccp_alpha\", \"sklearn/tree/tests/test_tree.py::test_classes_deprecated\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_fit_score_takes_y_works_on_deprecated_fit\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_outlier_corruption\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator_transformer_no_mixin\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator_clones\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_estimators_unfitted\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_no_attributes_set_in_init\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator_pairwise\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator_required_parameters_skip\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_class_weight_balanced_linear_classifier\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.993445",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}