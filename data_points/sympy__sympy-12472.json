{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-12472",
  "base_commit": "0cd4f13ab5dd4ecb7700ba5d2d94672cb40fd1e3",
  "patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -350,6 +350,30 @@ def as_coeff_Add(self, rational=False):\n     # let Expr.as_coeff_mul() just always return (S.One, self) for an Add.  See\n     # issue 5524.\n \n+    def _eval_power(self, e):\n+        if e.is_Rational and self.is_number:\n+            from sympy.core.evalf import pure_complex\n+            from sympy.core.mul import _unevaluated_Mul\n+            from sympy.core.exprtools import factor_terms\n+            from sympy.core.function import expand_multinomial\n+            from sympy.functions.elementary.complexes import sign\n+            from sympy.functions.elementary.miscellaneous import sqrt\n+            ri = pure_complex(self)\n+            if ri:\n+                r, i = ri\n+                if e.q == 2:\n+                    D = sqrt(r**2 + i**2)\n+                    if D.is_Rational:\n+                        # (r, i, D) is a Pythagorean triple\n+                        root = sqrt(factor_terms((D - r)/2))**e.p\n+                        return root*expand_multinomial((\n+                            # principle value\n+                            (D + r)/abs(i) + sign(i)*S.ImaginaryUnit)**e.p)\n+                elif e == -1:\n+                    return _unevaluated_Mul(\n+                        r - i*S.ImaginaryUnit,\n+                        1/(r**2 + i**2))\n+\n     @cacheit\n     def _eval_derivative(self, s):\n         return self.func(*[a.diff(s) for a in self.args])\ndiff --git a/sympy/core/expr.py b/sympy/core/expr.py\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -1928,10 +1928,17 @@ def as_numer_denom(self):\n         return self, S.One\n \n     def normal(self):\n+        from .mul import _unevaluated_Mul\n         n, d = self.as_numer_denom()\n         if d is S.One:\n             return n\n-        return n/d\n+        if d.is_Number:\n+            if d is S.One:\n+                return n\n+            else:\n+                return _unevaluated_Mul(n, 1/d)\n+        else:\n+            return n/d\n \n     def extract_multiplicatively(self, c):\n         \"\"\"Return None if it's not possible to make self in the form\ndiff --git a/sympy/core/mul.py b/sympy/core/mul.py\n--- a/sympy/core/mul.py\n+++ b/sympy/core/mul.py\n@@ -625,6 +625,19 @@ def _eval_power(b, e):\n         if e.is_Integer:\n             return Mul(*[Pow(b, e, evaluate=False) for b in cargs]) * \\\n                 Pow(Mul._from_args(nc), e, evaluate=False)\n+        if e.is_Rational and e.q == 2:\n+            from sympy.core.power import integer_nthroot\n+            from sympy.functions.elementary.complexes import sign\n+            if b.is_imaginary:\n+                a = b.as_real_imag()[1]\n+                if a.is_Rational:\n+                    n, d = abs(a/2).as_numer_denom()\n+                    n, t = integer_nthroot(n, 2)\n+                    if t:\n+                        d, t = integer_nthroot(d, 2)\n+                        if t:\n+                            r = sympify(n)/d\n+                            return _unevaluated_Mul(r**e.p, (1 + sign(a)*S.ImaginaryUnit)**e.p)\n \n         p = Pow(b, e, evaluate=False)\n \n@@ -764,10 +777,11 @@ def as_real_imag(self, deep=True, **hints):\n         coeffi = []\n         addterms = S.One\n         for a in self.args:\n-            if a.is_real:\n-                coeffr.append(a)\n-            elif a.is_imaginary:\n-                coeffi.append(a)\n+            r, i = a.as_real_imag()\n+            if i.is_zero:\n+                coeffr.append(r)\n+            elif r.is_zero:\n+                coeffi.append(i*S.ImaginaryUnit)\n             elif a.is_commutative:\n                 # search for complex conjugate pairs:\n                 for i, x in enumerate(other):\n@@ -1114,14 +1128,15 @@ def _eval_is_real(self):\n         return self._eval_real_imag(True)\n \n     def _eval_real_imag(self, real):\n-        zero = one_neither = False\n+        zero = False\n+        t_not_re_im = None\n \n         for t in self.args:\n             if not t.is_complex:\n                 return t.is_complex\n-            elif t.is_imaginary:\n+            elif t.is_imaginary:  # I\n                 real = not real\n-            elif t.is_real:\n+            elif t.is_real:  # 2\n                 if not zero:\n                     z = t.is_zero\n                     if not z and zero is False:\n@@ -1131,15 +1146,24 @@ def _eval_real_imag(self, real):\n                             return True\n                         return\n             elif t.is_real is False:\n-                if one_neither:\n+                # symbolic or literal like `2 + I` or symbolic imaginary\n+                if t_not_re_im:\n                     return  # complex terms might cancel\n-                one_neither = True\n+                t_not_re_im = t\n+            elif t.is_imaginary is False:  # symbolic like `2` or `2 + I`\n+                if t_not_re_im:\n+                    return  # complex terms might cancel\n+                t_not_re_im = t\n             else:\n                 return\n \n-        if one_neither:  # self is a+I*b or I*b\n-            if real:\n-                return zero  # real*self is like self: neither is real\n+        if t_not_re_im:\n+            if t_not_re_im.is_real is False:\n+                if real:  # like 3\n+                    return zero  # 3*(smthng like 2 + I or i) is not real\n+            if t_not_re_im.is_imaginary is False:  # symbolic 2 or 2 + I\n+                if not real:  # like I\n+                    return zero  # I*(smthng like 2 or 2 + I) is not real\n         elif zero is False:\n             return real  # can't be trumped by 0\n         elif real:\ndiff --git a/sympy/core/power.py b/sympy/core/power.py\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -288,7 +288,7 @@ def _n2(e):\n                 # floor(S.Half - e*arg(b)/2/pi) == 0\n \n                 # handle -1 as special case\n-                if (e == -1) == True:\n+                if e == -1:\n                     # floor arg. is 1/2 + arg(b)/2/pi\n                     if _half(other):\n                         if b.is_negative is True:\n@@ -301,13 +301,13 @@ def _n2(e):\n                     if b.is_imaginary:\n                         b = abs(im(b))*S.ImaginaryUnit\n \n-                if (abs(e) < 1) == True or (e == 1) == True:\n+                if (abs(e) < 1) == True or e == 1:\n                     s = 1  # floor = 0\n                 elif b.is_nonnegative:\n                     s = 1  # floor = 0\n                 elif re(b).is_nonnegative and (abs(e) < 2) == True:\n                     s = 1  # floor = 0\n-                elif fuzzy_not(im(b).is_zero) and (abs(e) == 2) == True:\n+                elif fuzzy_not(im(b).is_zero) and abs(e) == 2:\n                     s = 1  # floor = 0\n                 elif _half(other):\n                     s = exp(2*S.Pi*S.ImaginaryUnit*other*floor(\n@@ -735,6 +735,9 @@ def _eval_expand_power_base(self, **hints):\n             nc = [Mul(*nc)]\n \n         # sift the commutative bases\n+        sifted = sift(cargs, lambda x: x.is_real)\n+        maybe_real = sifted[True] + sifted[None]\n+        other = sifted[False]\n         def pred(x):\n             if x is S.ImaginaryUnit:\n                 return S.ImaginaryUnit\n@@ -743,9 +746,9 @@ def pred(x):\n                 return True\n             if polar is None:\n                 return fuzzy_bool(x.is_nonnegative)\n-        sifted = sift(cargs, pred)\n+        sifted = sift(maybe_real, pred)\n         nonneg = sifted[True]\n-        other = sifted[None]\n+        other += sifted[None]\n         neg = sifted[False]\n         imag = sifted[S.ImaginaryUnit]\n         if imag:\ndiff --git a/sympy/simplify/hyperexpand.py b/sympy/simplify/hyperexpand.py\n--- a/sympy/simplify/hyperexpand.py\n+++ b/sympy/simplify/hyperexpand.py\n@@ -462,6 +462,8 @@ def make_simp(z):\n     def simp(expr):\n         \"\"\" Efficiently simplify the rational function ``expr``. \"\"\"\n         numer, denom = expr.as_numer_denom()\n+        numer = numer.expand()\n+        # denom = denom.expand()  # is this needed?\n         c, numer, denom = poly(numer, z).cancel(poly(denom, z))\n         return c * numer.as_expr() / denom.as_expr()\n \ndiff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -651,8 +651,6 @@ def radsimp(expr, symbolic=True, max_terms=4):\n     >>> from sympy.simplify.radsimp import collect_sqrt\n     >>> from sympy.abc import a, b, c\n \n-    >>> radsimp(1/(I + 1))\n-    (1 - I)/2\n     >>> radsimp(1/(2 + sqrt(2)))\n     (-sqrt(2) + 2)/2\n     >>> x,y = map(Symbol, 'xy')\n@@ -735,14 +733,14 @@ def ispow2(d, log2=False):\n         if not d.is_Pow:\n             return False\n         e = d.exp\n-        if e.is_Rational and e.q == 2 or symbolic and fraction(e)[1] == 2:\n+        if e.is_Rational and e.q == 2 or symbolic and denom(e) == 2:\n             return True\n         if log2:\n             q = 1\n             if e.is_Rational:\n                 q = e.q\n             elif symbolic:\n-                d = fraction(e)[1]\n+                d = denom(e)\n                 if d.is_Integer:\n                     q = d\n             if q != 1 and log(q, 2).is_Integer:\n@@ -772,7 +770,7 @@ def handle(expr):\n             return expr\n \n         if ispow2(d):\n-            d2 = sqrtdenest(sqrt(d.base))**fraction(d.exp)[0]\n+            d2 = sqrtdenest(sqrt(d.base))**numer(d.exp)\n             if d2 != d:\n                 return handle(1/d2)\n         elif d.is_Pow and (d.exp.is_integer or d.base.is_positive):\n@@ -936,7 +934,7 @@ def fraction(expr, exact=False):\n        flag is unset, then structure this exponent's structure will\n        be analyzed and pretty fraction will be returned:\n \n-       >>> from sympy import exp\n+       >>> from sympy import exp, Mul\n        >>> fraction(2*x**(-y))\n        (2, x**y)\n \n@@ -946,6 +944,14 @@ def fraction(expr, exact=False):\n        >>> fraction(exp(-x), exact=True)\n        (exp(-x), 1)\n \n+       The `exact` flag will also keep any unevaluated Muls from\n+       being evaluated:\n+\n+       >>> u = Mul(2, x + 1, evaluate=False)\n+       >>> fraction(u)\n+       (2*x + 2, 1)\n+       >>> fraction(u, exact=True)\n+       (2*(x  + 1), 1)\n     \"\"\"\n     expr = sympify(expr)\n \n",
  "test_patch": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1255,13 +1255,20 @@ def test_Mul_is_imaginary_real():\n     assert (r*i*ii).is_real is True\n \n     # Github's issue 5874:\n-    nr = Symbol('nr', real=False, complex=True)\n+    nr = Symbol('nr', real=False, complex=True)  # e.g. I or 1 + I\n     a = Symbol('a', real=True, nonzero=True)\n     b = Symbol('b', real=True)\n     assert (i*nr).is_real is None\n     assert (a*nr).is_real is False\n     assert (b*nr).is_real is None\n \n+    ni = Symbol('ni', imaginary=False, complex=True)  # e.g. 2 or 1 + I\n+    a = Symbol('a', real=True, nonzero=True)\n+    b = Symbol('b', real=True)\n+    assert (i*ni).is_real is False\n+    assert (a*ni).is_real is None\n+    assert (b*ni).is_real is None\n+\n \n def test_Mul_hermitian_antihermitian():\n     a = Symbol('a', hermitian=True, zero=False)\ndiff --git a/sympy/core/tests/test_eval_power.py b/sympy/core/tests/test_eval_power.py\n--- a/sympy/core/tests/test_eval_power.py\n+++ b/sympy/core/tests/test_eval_power.py\n@@ -1,7 +1,8 @@\n from sympy.core import (\n-    Rational, Symbol, S, Float, Integer, Number, Pow,\n+    Rational, Symbol, S, Float, Integer, Mul, Number, Pow,\n     Basic, I, nan, pi, symbols, oo, zoo)\n from sympy.core.tests.test_evalf import NS\n+from sympy.core.function import expand_multinomial\n from sympy.functions.elementary.miscellaneous import sqrt, cbrt\n from sympy.functions.elementary.exponential import exp, log\n from sympy.functions.elementary.trigonometric import sin, cos\n@@ -320,7 +321,7 @@ def test_issue_7638():\n     p = symbols('p', positive=True)\n     assert cbrt(p**2) == p**(2/S(3))\n     assert NS(((0.2 + 0.7*I)**(0.7 + 1.0*I))**(0.5 - 0.1*I), 1) == '0.4 + 0.2*I'\n-    assert sqrt(1/(1 + I)) == sqrt((1 - I)/2)  # or 1/sqrt(1 + I)\n+    assert sqrt(1/(1 + I)) == sqrt(1 - I)/sqrt(2)  # or 1/sqrt(1 + I)\n     e = 1/(1 - sqrt(2))\n     assert sqrt(e) == I/sqrt(-1 + sqrt(2))\n     assert e**-S.Half == -I*sqrt(-1 + sqrt(2))\n@@ -347,5 +348,63 @@ def test_issue_8582():\n def test_issue_8650():\n     n = Symbol('n', integer=True, nonnegative=True)\n     assert (n**n).is_positive is True\n-    x = 5*n+5\n-    assert (x**(5*(n+1))).is_positive is True\n+    x = 5*n + 5\n+    assert (x**(5*(n + 1))).is_positive is True\n+\n+\n+def test_better_sqrt():\n+    n = Symbol('n', integer=True, nonnegative=True)\n+    assert sqrt(3 + 4*I) == 2 + I\n+    assert sqrt(3 - 4*I) == 2 - I\n+    assert sqrt(-3 - 4*I) == 1 - 2*I\n+    assert sqrt(-3 + 4*I) == 1 + 2*I\n+    assert sqrt(32 + 24*I) == 6 + 2*I\n+    assert sqrt(32 - 24*I) == 6 - 2*I\n+    assert sqrt(-32 - 24*I) == 2 - 6*I\n+    assert sqrt(-32 + 24*I) == 2 + 6*I\n+\n+    # triple (3, 4, 5):\n+    # parity of 3 matches parity of 5 and\n+    # den, 4, is a square\n+    assert sqrt((3 + 4*I)/4) == 1 + I/2\n+    # triple (8, 15, 17)\n+    # parity of 8 doesn't match parity of 17 but\n+    # den/2, 8/2, is a square\n+    assert sqrt((8 + 15*I)/8) == (5 + 3*I)/4\n+    # handle the denominator\n+    assert sqrt((3 - 4*I)/25) == (2 - I)/5\n+    assert sqrt((3 - 4*I)/26) == (2 - I)/sqrt(26)\n+    # mul\n+    #  issue #12739\n+    assert sqrt((3 + 4*I)/(3 - 4*I)) == (3 + 4*I)/5\n+    assert sqrt(2/(3 + 4*I)) == sqrt(2)/5*(2 - I)\n+    assert sqrt(n/(3 + 4*I)).subs(n, 2) == sqrt(2)/5*(2 - I)\n+    assert sqrt(-2/(3 + 4*I)) == sqrt(2)/5*(1 + 2*I)\n+    assert sqrt(-n/(3 + 4*I)).subs(n, 2) == sqrt(2)/5*(1 + 2*I)\n+    # power\n+    assert sqrt(1/(3 + I*4)) == (2 - I)/5\n+    assert sqrt(1/(3 - I)) == sqrt(10)*sqrt(3 + I)/10\n+    # symbolic\n+    i = symbols('i', imaginary=True)\n+    assert sqrt(3/i) == Mul(sqrt(3), sqrt(-i)/abs(i), evaluate=False)\n+    # multiples of 1/2; don't make this too automatic\n+    assert sqrt((3 + 4*I))**3 == (2 + I)**3\n+    assert Pow(3 + 4*I, S(3)/2) == 2 + 11*I\n+    assert Pow(6 + 8*I, S(3)/2) == 2*sqrt(2)*(2 + 11*I)\n+    n, d = (3 + 4*I), (3 - 4*I)**3\n+    a = n/d\n+    assert a.args == (1/d, n)\n+    eq = sqrt(a)\n+    assert eq.args == (a, S.Half)\n+    assert expand_multinomial(eq) == sqrt((-117 + 44*I)*(3 + 4*I))/125\n+    assert eq.expand() == (7 - 24*I)/125\n+\n+    # issue 12775\n+    # pos im part\n+    assert sqrt(2*I) == (1 + I)\n+    assert sqrt(2*9*I) == Mul(3, 1 + I, evaluate=False)\n+    assert Pow(2*I, 3*S.Half) == (1 + I)**3\n+    # neg im part\n+    assert sqrt(-I/2) == Mul(S.Half, 1 - I, evaluate=False)\n+    # fractional im part\n+    assert Pow(-9*I/2, 3/S(2)) == 27*(1 - I)**3/8\ndiff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1768,6 +1768,7 @@ def test_issue_1112():\n     x = Symbol('x', positive=False)\n     assert (x > 0) is S.false\n \n+\n def test_issue_10161():\n     x = symbols('x', real=True)\n     assert x*abs(x)*abs(x) == x**3\n@@ -1778,6 +1779,13 @@ def test_issue_10755():\n     raises(TypeError, lambda: int(log(x)))\n     raises(TypeError, lambda: log(x).round(2))\n \n+\n def test_issue_11877():\n     x = symbols('x')\n     assert integrate(log(S(1)/2 - x), (x, 0, S(1)/2)) == -S(1)/2 -log(2)/2\n+\n+\n+def test_normal():\n+    x = symbols('x')\n+    e = Mul(S.Half, 1 + x, evaluate=False)\n+    assert e.normal() == e\ndiff --git a/sympy/core/tests/test_relational.py b/sympy/core/tests/test_relational.py\n--- a/sympy/core/tests/test_relational.py\n+++ b/sympy/core/tests/test_relational.py\n@@ -667,7 +667,7 @@ def test_issue_8444():\n \n \n def test_issue_10304():\n-    d = -(3*2**pi)**(1/pi) + 2*3**(1/pi)\n+    d = cos(1)**2 + sin(1)**2 - 1\n     assert d.is_comparable is False  # if this fails, find a new d\n     e = 1 + d*I\n     assert simplify(Eq(e, 0)) is S.false\ndiff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -340,6 +340,9 @@ def test_as_real_imag():\n     i = symbols('i', imaginary=True)\n     assert sqrt(i**2).as_real_imag() == (0, abs(i))\n \n+    assert ((1 + I)/(1 - I)).as_real_imag() == (0, 1)\n+    assert ((1 + I)**3/(1 - I)).as_real_imag() == (-2, 0)\n+\n \n @XFAIL\n def test_sign_issue_3068():\ndiff --git a/sympy/holonomic/tests/test_holonomic.py b/sympy/holonomic/tests/test_holonomic.py\n--- a/sympy/holonomic/tests/test_holonomic.py\n+++ b/sympy/holonomic/tests/test_holonomic.py\n@@ -389,8 +389,8 @@ def test_evalf_rk4():\n \n     # close to the exact solution 1.09861228866811\n     # imaginary part also close to zero\n-    s = '1.09861574485151 + 1.36082967699958e-7*I'\n-    assert sstr(p.evalf(r)[-1]) == s\n+    s = '1.098616 + 1.36083e-7*I'\n+    assert sstr(p.evalf(r)[-1].n(7)) == s\n \n     # sin(x)\n     p = HolonomicFunction(Dx**2 + 1, x, 0, [0, 1])\ndiff --git a/sympy/polys/tests/test_partfrac.py b/sympy/polys/tests/test_partfrac.py\n--- a/sympy/polys/tests/test_partfrac.py\n+++ b/sympy/polys/tests/test_partfrac.py\n@@ -83,7 +83,7 @@ def test_apart_extension():\n \n     f = x/((x - 2)*(x + I))\n \n-    assert factor(together(apart(f))) == f\n+    assert factor(together(apart(f)).expand()) == f\n \n \n def test_apart_full():\ndiff --git a/sympy/solvers/tests/test_solvers.py b/sympy/solvers/tests/test_solvers.py\n--- a/sympy/solvers/tests/test_solvers.py\n+++ b/sympy/solvers/tests/test_solvers.py\n@@ -1779,19 +1779,20 @@ def test_issue_8828():\n \n def test_issue_2840_8155():\n     assert solve(sin(3*x) + sin(6*x)) == [\n-        0, -pi, pi, 2*pi, -2*I*log(-(-1)**(S(1)/9)), -2*I*log(-(-1)**(S(2)/9)),\n-        -2*I*log((-1)**(S(7)/9)), -2*I*log((-1)**(S(8)/9)), -2*I*log(-S(1)/2 -\n-        sqrt(3)*I/2), -2*I*log(-S(1)/2 + sqrt(3)*I/2), -2*I*log(S(1)/2 -\n-        sqrt(3)*I/2), -2*I*log(S(1)/2 + sqrt(3)*I/2), -2*I*log(-sqrt(3)/2 - I/2),\n-        -2*I*log(-sqrt(3)/2 + I/2), -2*I*log(sqrt(3)/2 - I/2),\n-        -2*I*log(sqrt(3)/2 + I/2), -2*I*log(-sin(pi/18) - I*cos(pi/18)),\n-        -2*I*log(-sin(pi/18) + I*cos(pi/18)), -2*I*log(sin(pi/18) -\n-        I*cos(pi/18)), -2*I*log(sin(pi/18) + I*cos(pi/18)),\n-        -2*I*log(exp(-2*I*pi/9)), -2*I*log(exp(-I*pi/9)),\n+        0, -pi, pi, 2*pi, 2*I*(log(2) - log(-1 - sqrt(3)*I)), 2*I*(log(2) -\n+        log(-1 + sqrt(3)*I)), 2*I*(log(2) - log(1 - sqrt(3)*I)), 2*I*(log(2) -\n+        log(1 + sqrt(3)*I)), 2*I*(log(2) - log(-sqrt(3) - I)), 2*I*(log(2) -\n+        log(-sqrt(3) + I)), 2*I*(log(2) - log(sqrt(3) - I)), 2*I*(log(2) -\n+        log(sqrt(3) + I)), -2*I*log(-(-1)**(S(1)/9)), -2*I*log(-(-1)**(S(2)/9)),\n+        -2*I*log((-1)**(S(7)/9)), -2*I*log((-1)**(S(8)/9)), -2*I*log(-sin(pi/18) -\n+        I*cos(pi/18)), -2*I*log(-sin(pi/18) + I*cos(pi/18)),\n+        -2*I*log(sin(pi/18) - I*cos(pi/18)), -2*I*log(sin(pi/18) +\n+        I*cos(pi/18)), -2*I*log(exp(-2*I*pi/9)), -2*I*log(exp(-I*pi/9)),\n         -2*I*log(exp(I*pi/9)), -2*I*log(exp(2*I*pi/9))]\n     assert solve(2*sin(x) - 2*sin(2*x)) == [\n-        0, -pi, pi, -2*I*log(-sqrt(3)/2 - I/2), -2*I*log(-sqrt(3)/2 + I/2),\n-        -2*I*log(sqrt(3)/2 - I/2), -2*I*log(sqrt(3)/2 + I/2)]\n+        0, -pi, pi, 2*I*(log(2) - log(-sqrt(3) - I)), 2*I*(log(2) -\n+        log(-sqrt(3) + I)), 2*I*(log(2) - log(sqrt(3) - I)), 2*I*(log(2) -\n+        log(sqrt(3) + I))]\n \n \n def test_issue_9567():\n",
  "problem_statement": "sqrt splits out non-real factors\n```\r\n>>> sqrt((3 + 4*I)/(3 - 4*I))\r\nsqrt(-1/(3 - 4*I))*sqrt(-3 - 4*I)\r\n```\r\n\r\nIt does this because that factor is nonnegative (but it's not real so it should remain in the sqrt).\r\n\r\nI have this fixed in #12472; this is here as a reminder to make sure this is tested.\n",
  "hints_text": "",
  "created_at": "2017-04-02T00:43:33Z",
  "version": "1.0",
  "FAIL_TO_PASS": "[\"test_as_real_imag\", \"test_arg_rewrite\", \"test_apart_extension\"]",
  "PASS_TO_PASS": "[\"test_bug1\", \"test_Symbol\", \"test_arit0\", \"test_pow\", \"test_pow3\", \"test_pow_issue_3516\", \"test_pow_im\", \"test_real_mul\", \"test_ncmul\", \"test_ncpow\", \"test_powerbug\", \"test_Mul_is_even_odd\", \"test_evenness_in_ternary_integer_product_with_even\", \"test_oddness_in_ternary_integer_product_with_even\", \"test_Mul_is_rational\", \"test_Add_is_rational\", \"test_Mul_is_negative_positive\", \"test_Mul_is_negative_positive_2\", \"test_Mul_is_nonpositive_nonnegative\", \"test_Pow_is_zero\", \"test_Mul_hermitian_antihermitian\", \"test_Add_is_comparable\", \"test_Mul_is_comparable\", \"test_Pow_is_comparable\", \"test_Add_is_irrational\", \"test_issue_3531b\", \"test_bug3\", \"test_suppressed_evaluation\", \"test_Add_as_coeff_mul\", \"test_Pow_as_coeff_mul_doesnt_expand\", \"test_issue_3514\", \"test_make_args\", \"test_issue_5126\", \"test_Rational_as_content_primitive\", \"test_Add_as_content_primitive\", \"test_Mul_as_content_primitive\", \"test_Pow_as_content_primitive\", \"test_issue_5460\", \"test_product_irrational\", \"test_issue_5919\", \"test_issue_6001\", \"test_polar\", \"test_issue_6040\", \"test_issue_6082\", \"test_issue_6077\", \"test_mul_flatten_oo\", \"test_issue_5160_6087_6089_6090\", \"test_issue_6611a\", \"test_denest_add_mul\", \"test_mul_zero_detection\", \"test_Mul_with_zero_infinite\", \"test_rational\", \"test_large_rational\", \"test_negative_real\", \"test_expand\", \"test_issue_3866\", \"test_negative_one\", \"test_Pow_signs\", \"test_power_with_noncommutative_mul_as_base\", \"test_zero\", \"test_pow_as_base_exp\", \"test_issue_6100\", \"test_issue_8650\", \"test_rel_ne\", \"test_rel_subs\", \"test_wrappers\", \"test_Eq\", \"test_rel_Infinity\", \"test_bool\", \"test_rich_cmp\", \"test_new_relational\", \"test_relational_bool_output\", \"test_relational_logic_symbols\", \"test_univariate_relational_as_set\", \"test_Not\", \"test_evaluate\", \"test_imaginary_compare_raises_TypeError\", \"test_complex_compare_not_real\", \"test_imaginary_and_inf_compare_raises_TypeError\", \"test_x_minus_y_not_same_as_x_lt_y\", \"test_nan_equality_exceptions\", \"test_nan_inequality_raise_errors\", \"test_nan_complex_inequalities\", \"test_complex_infinity_inequalities\", \"test_inequalities_symbol_name_same_complex\", \"test_inequalities_cant_sympify_other\", \"test_ineq_avoid_wild_symbol_flip\", \"test_issue_8449\", \"test_simplify\", \"test_reversed\", \"test_canonical\", \"test_issue_10633\", \"test_Abs_rewrite\", \"test_Abs_properties\", \"test_abs\", \"test_adjoint\", \"test_conjugate\", \"test_conjugate_transpose\", \"test_transpose\", \"test_issue_4035\", \"test_issue_3206\", \"test_issue_4754_derivative_conjugate\", \"test_issue_11413\", \"test_DifferentialOperator\", \"test_HolonomicFunction_addition\", \"test_HolonomicFunction_multiplication\", \"test_HolonomicFunction_composition\", \"test_to_Sequence\", \"test_to_Sequence_Initial_Coniditons\", \"test_evalf_euler\", \"test_evalf_rk4\", \"test_apart_matrix\", \"test_apart_symbolic\", \"test_apart_full\", \"test_apart_undetermined_coeffs\", \"test_apart_list\", \"test_assemble_partfrac_list\", \"test_noncommutative\"]",
  "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.077539",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}