{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-5595",
  "base_commit": "b4bf5168621f0a4bf7cca795862e2b5c139fc8cb",
  "patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -310,8 +310,8 @@ def make_options() -> Tuple[Tuple[str, OptionDict], ...]:\n                     \"metavar\": \"<python_expression>\",\n                     \"group\": \"Reports\",\n                     \"level\": 1,\n-                    \"default\": \"0 if fatal else 10.0 - ((float(5 * error + warning + refactor + \"\n-                    \"convention) / statement) * 10)\",\n+                    \"default\": \"max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + \"\n+                    \"convention) / statement) * 10))\",\n                     \"help\": \"Python expression which should return a score less \"\n                     \"than or equal to 10. You have access to the variables 'fatal', \"\n                     \"'error', 'warning', 'refactor', 'convention', and 'info' which \"\n",
  "test_patch": "diff --git a/tests/test_self.py b/tests/test_self.py\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -718,11 +718,15 @@ def test_fail_under(self) -> None:\n             ],\n             code=0,\n         )\n+        # Need the old evaluation formula to test a negative score\n+        # failing below a negative --fail-under threshold\n         self._runtest(\n             [\n                 \"--fail-under\",\n                 \"-9\",\n                 \"--enable=all\",\n+                \"--evaluation\",\n+                \"0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\",\n                 join(HERE, \"regrtest_data\", \"fail_under_minus10.py\"),\n             ],\n             code=22,\n@@ -732,6 +736,8 @@ def test_fail_under(self) -> None:\n                 \"--fail-under\",\n                 \"-5\",\n                 \"--enable=all\",\n+                \"--evaluation\",\n+                \"0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\",\n                 join(HERE, \"regrtest_data\", \"fail_under_minus10.py\"),\n             ],\n             code=22,\n@@ -777,6 +783,9 @@ def test_fail_on(self, fu_score, fo_msgs, fname, out):\n                 f\"--fail-on={fo_msgs}\",\n                 \"--enable=all\",\n                 join(HERE, \"regrtest_data\", fname),\n+                # Use the old form of the evaluation that can go negative\n+                \"--evaluation\",\n+                \"0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\",\n             ],\n             code=out,\n         )\ndiff --git a/tests/unittest_reporting.py b/tests/unittest_reporting.py\n--- a/tests/unittest_reporting.py\n+++ b/tests/unittest_reporting.py\n@@ -332,8 +332,8 @@ def test_multi_format_output(tmp_path):\n         \"\\n\"\n         \"\\n\"\n         \"\\n\"\n-        \"-------------------------------------\\n\"\n-        \"Your code has been rated at -10.00/10\\n\"\n+        \"-----------------------------------\\n\"\n+        \"Your code has been rated at 0.00/10\\n\"\n         \"\\n\"\n         \"direct output\\n\"\n     )\n",
  "problem_statement": "The negative score is not very beginner friendly\nFor the past months I've been under the impression that the negative score is not very friendly for beginners. It somewhat demotivating to run `pylint` over your project just to get a `-24/10.0` as a score, which would make `pylint` look like a super drastic tool, that's super nitpicky about everything.\r\n\r\nI think we could do a better job here at welcoming everyone to using `pylint`. Instead of having a `0-10` score, we could check if other tools are doing something different and see what works best in general. \nThe negative score is not very beginner friendly\nFor the past months I've been under the impression that the negative score is not very friendly for beginners. It somewhat demotivating to run `pylint` over your project just to get a `-24/10.0` as a score, which would make `pylint` look like a super drastic tool, that's super nitpicky about everything.\r\n\r\nI think we could do a better job here at welcoming everyone to using `pylint`. Instead of having a `0-10` score, we could check if other tools are doing something different and see what works best in general. \n",
  "hints_text": "agree, it is very unusual.\nI've toyed with the idea of adjusting the scoring such that larger amounts of issues result in a score that becomes closer and closer to 0 while keeping scores rated 5 and above by the current algorithm the same.  I've arrived at [10( (x^a + 1)^(1/a) - x)](https://www.desmos.com/calculator/1frsbnwoid), loosely based on how Minkowski distance works, where x is the density of issues and a is a taper factor.  4 seems to be a good value for a.\r\n\r\nI guess a function like this could be added\r\n```py\r\ndef taper_score(x, a):\r\n    \"\"\"Turns a value going from 0 to infinity into a score from 10 to 0\r\n\r\n    Starts off linear with the relation 10 - 10 * x and gradually turns\r\n    into an exponential fall off, with a sharpness determined by a.\r\n\r\n    Increasing the parameter a gives a sharper taper, and as a goes\r\n    to infinity this function converges to max(10 - 10 * x, 0).\r\n    \"\"\"\r\n    return 10 * (x ** a + 1) ** (1 / a) - 10 * x\r\n```\r\nAnd then update the scoring expression to\r\n```py\r\ntaper_score((5 * error + warning + refactor + convention) / statement, 4.0)\r\n```\r\n\r\nBut I don't really see a difference between your code being rated `0.1/10.0` instead of`-24/10.0`.  Usability wise my biggest issue would be the difficulty sorting through and inspecting the messages.  The defaults when run on a medium sized project tends to [spew out 1500 messages](http://www.hornwitser.no/x/discord/lint/#ref=rapp/rewrite&types=all&modules=all&hide=reports,filters) straight into the terminal.\n@Hornwitser That's interesting, thanks for posting the comment. It might be worth giving it a try if you have some time to send a PR. Regarding your second comment, you might be interested in #746 which unfortunately stalled, but would provide a solution to the sorting and inspecting the messages that pylint emits.\nThe /10 strongly implied a rating of 0 or 1 to 10 for me, until I got a negative rating and questioned the whole system, started searching and found this issue.\r\n\r\nNo idea if the scoring system is good or bad in the bigger picture, but I can tell you it ain't intuitive.\nFrom FAQ:\r\n\r\n> However, this option can be changed in the Pylint rc file. If having negative\r\nvalues really bugs you, you can set the formula to be the maximum of 0 and the\r\nabove expression.\r\n\r\nAny reason we wouldn't just do this now? I don't know why we would need to wait an unspecified amount of time for v.3.0, especially if it's so easy to get the old behavior back. Do folks really have CI pipelines where the passing scores is negative and a score 0.0 will unexpectedly pass?\r\n\r\nOne argument for doing this in v2.13.0 is that we merged #5521 -- now a run with a fatal error can score higher than a negative score.\nAlthough I'm generally for changing things sooner rather than later I think the `2.12` update showed me that plugins and other integrations of `pylint` use our internals in very particular ways.\r\nI don't think we can guarantee that nobody is relying on the fact that scores can be negative. I would be hesitant to change this right now. Also because there is not that much benefit to us. Although unintuitive, the fact that scores can be negative is not really limiting us in working on or improving pylint.\nDaniel is right about the fact that it might breaks things for some plugin mainteners / users. Sometime it's surprising.\r\n\r\n![workflow](https://user-images.githubusercontent.com/5493666/147258919-6fa89c74-922c-4d7f-a172-ab8241553454.png)\r\n\r\nBut it's also making users feel bad (I remember I felt hurt with my first negative score 😄) and it's easy to change so we could change it. \r\n\r\nI was thinking about this lately and maybe a solution would be to add levels, i.e. if you have an error, you'll have between 0 and 2.5/10 (Or between 0 and 10 but you're at level 0 of code quality), if you do not have any errors you'll have between 2.5 and 10.0 (Or 0 and 10 at level 1 of quality). This could affect more than the score and could also be the philosophy behind a kind of guide to what should be done next for a particular user instead of just dumping thousands of messages on their legacy code base. We made a pretty lengthy comments chain about the next step in gamification of pylint with @cdce8p in the last MR before a release and rather stupidly I did not create an issue with the discussion. Now it's lost in a MR from a long time ago that I can't find again 😄 Let me know if you remember where / when we talked about that Marc :)\nDidn't know it either, but a search for `gamification` seems to work 🤷🏻‍♂️ https://github.com/PyCQA/pylint/pull/4538#issuecomment-853355683\nThere is also this comment here that mentioned it: https://github.com/PyCQA/pylint/issues/746#issue-122747071\n> I don't think we can guarantee that nobody is relying on the fact that scores can be negative.\r\n\r\nThe scoring algorithm is a config option (`--evalutation`), if someone depends on the exact value returned by pylint's score they can set it to use the old algorithm when it's changed.\n> The scoring algorithm is a config option (`--evalutation`), if someone depends on the exact value returned by pylint's score they can set it to use the old algorithm when it's changed.\r\n\r\nI think I misinterpreted @jacobtylerwalls. Sorry about that! Changing the default score evaluation should be fine indeed, not allowing negative scores should not be done (for now). Thanks for pointing this out @Hornwitser 👍 \nCool. Yeah. That's what I was thinking. #5521 already changed the default evaluation for fatal errors and so it would make for a more consistent release story to say that in tandem with that we also set the (default) score floor to 0. I can push a PR to keep discussion going, not to be pushy!\nagree, it is very unusual.\nI've toyed with the idea of adjusting the scoring such that larger amounts of issues result in a score that becomes closer and closer to 0 while keeping scores rated 5 and above by the current algorithm the same.  I've arrived at [10( (x^a + 1)^(1/a) - x)](https://www.desmos.com/calculator/1frsbnwoid), loosely based on how Minkowski distance works, where x is the density of issues and a is a taper factor.  4 seems to be a good value for a.\r\n\r\nI guess a function like this could be added\r\n```py\r\ndef taper_score(x, a):\r\n    \"\"\"Turns a value going from 0 to infinity into a score from 10 to 0\r\n\r\n    Starts off linear with the relation 10 - 10 * x and gradually turns\r\n    into an exponential fall off, with a sharpness determined by a.\r\n\r\n    Increasing the parameter a gives a sharper taper, and as a goes\r\n    to infinity this function converges to max(10 - 10 * x, 0).\r\n    \"\"\"\r\n    return 10 * (x ** a + 1) ** (1 / a) - 10 * x\r\n```\r\nAnd then update the scoring expression to\r\n```py\r\ntaper_score((5 * error + warning + refactor + convention) / statement, 4.0)\r\n```\r\n\r\nBut I don't really see a difference between your code being rated `0.1/10.0` instead of`-24/10.0`.  Usability wise my biggest issue would be the difficulty sorting through and inspecting the messages.  The defaults when run on a medium sized project tends to [spew out 1500 messages](http://www.hornwitser.no/x/discord/lint/#ref=rapp/rewrite&types=all&modules=all&hide=reports,filters) straight into the terminal.\n@Hornwitser That's interesting, thanks for posting the comment. It might be worth giving it a try if you have some time to send a PR. Regarding your second comment, you might be interested in #746 which unfortunately stalled, but would provide a solution to the sorting and inspecting the messages that pylint emits.\nThe /10 strongly implied a rating of 0 or 1 to 10 for me, until I got a negative rating and questioned the whole system, started searching and found this issue.\r\n\r\nNo idea if the scoring system is good or bad in the bigger picture, but I can tell you it ain't intuitive.\nFrom FAQ:\r\n\r\n> However, this option can be changed in the Pylint rc file. If having negative\r\nvalues really bugs you, you can set the formula to be the maximum of 0 and the\r\nabove expression.\r\n\r\nAny reason we wouldn't just do this now? I don't know why we would need to wait an unspecified amount of time for v.3.0, especially if it's so easy to get the old behavior back. Do folks really have CI pipelines where the passing scores is negative and a score 0.0 will unexpectedly pass?\r\n\r\nOne argument for doing this in v2.13.0 is that we merged #5521 -- now a run with a fatal error can score higher than a negative score.\nAlthough I'm generally for changing things sooner rather than later I think the `2.12` update showed me that plugins and other integrations of `pylint` use our internals in very particular ways.\r\nI don't think we can guarantee that nobody is relying on the fact that scores can be negative. I would be hesitant to change this right now. Also because there is not that much benefit to us. Although unintuitive, the fact that scores can be negative is not really limiting us in working on or improving pylint.\nDaniel is right about the fact that it might breaks things for some plugin mainteners / users. Sometime it's surprising.\r\n\r\n![workflow](https://user-images.githubusercontent.com/5493666/147258919-6fa89c74-922c-4d7f-a172-ab8241553454.png)\r\n\r\nBut it's also making users feel bad (I remember I felt hurt with my first negative score 😄) and it's easy to change so we could change it. \r\n\r\nI was thinking about this lately and maybe a solution would be to add levels, i.e. if you have an error, you'll have between 0 and 2.5/10 (Or between 0 and 10 but you're at level 0 of code quality), if you do not have any errors you'll have between 2.5 and 10.0 (Or 0 and 10 at level 1 of quality). This could affect more than the score and could also be the philosophy behind a kind of guide to what should be done next for a particular user instead of just dumping thousands of messages on their legacy code base. We made a pretty lengthy comments chain about the next step in gamification of pylint with @cdce8p in the last MR before a release and rather stupidly I did not create an issue with the discussion. Now it's lost in a MR from a long time ago that I can't find again 😄 Let me know if you remember where / when we talked about that Marc :)\nDidn't know it either, but a search for `gamification` seems to work 🤷🏻‍♂️ https://github.com/PyCQA/pylint/pull/4538#issuecomment-853355683\nThere is also this comment here that mentioned it: https://github.com/PyCQA/pylint/issues/746#issue-122747071\n> I don't think we can guarantee that nobody is relying on the fact that scores can be negative.\r\n\r\nThe scoring algorithm is a config option (`--evalutation`), if someone depends on the exact value returned by pylint's score they can set it to use the old algorithm when it's changed.\n> The scoring algorithm is a config option (`--evalutation`), if someone depends on the exact value returned by pylint's score they can set it to use the old algorithm when it's changed.\r\n\r\nI think I misinterpreted @jacobtylerwalls. Sorry about that! Changing the default score evaluation should be fine indeed, not allowing negative scores should not be done (for now). Thanks for pointing this out @Hornwitser 👍 \nCool. Yeah. That's what I was thinking. #5521 already changed the default evaluation for fatal errors and so it would make for a more consistent release story to say that in tandem with that we also set the (default) score floor to 0. I can push a PR to keep discussion going, not to be pushy!",
  "created_at": "2021-12-23T23:10:43Z",
  "version": "2.13",
  "FAIL_TO_PASS": "[\"tests/unittest_reporting.py::test_multi_format_output\"]",
  "PASS_TO_PASS": "[\"tests/test_self.py::TestRunTC::test_pkginfo\", \"tests/test_self.py::TestRunTC::test_all\", \"tests/test_self.py::TestRunTC::test_no_ext_file\", \"tests/test_self.py::TestRunTC::test_w0704_ignored\", \"tests/test_self.py::TestRunTC::test_exit_zero\", \"tests/test_self.py::TestRunTC::test_generate_config_option\", \"tests/test_self.py::TestRunTC::test_generate_config_option_order\", \"tests/test_self.py::TestRunTC::test_generate_config_disable_symbolic_names\", \"tests/test_self.py::TestRunTC::test_generate_rcfile_no_obsolete_methods\", \"tests/test_self.py::TestRunTC::test_nonexistent_config_file\", \"tests/test_self.py::TestRunTC::test_help_message_option\", \"tests/test_self.py::TestRunTC::test_error_help_message_option\", \"tests/test_self.py::TestRunTC::test_error_missing_arguments\", \"tests/test_self.py::TestRunTC::test_no_out_encoding\", \"tests/test_self.py::TestRunTC::test_parallel_execution\", \"tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments\", \"tests/test_self.py::TestRunTC::test_abbreviations_are_not_supported\", \"tests/test_self.py::TestRunTC::test_enable_all_works\", \"tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled\", \"tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports\", \"tests/test_self.py::TestRunTC::test_reject_empty_indent_strings\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing\", \"tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes\", \"tests/test_self.py::TestRunTC::test_information_category_disabled_by_default\", \"tests/test_self.py::TestRunTC::test_error_mode_shows_no_score\", \"tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default\", \"tests/test_self.py::TestRunTC::test_confidence_levels\", \"tests/test_self.py::TestRunTC::test_bom_marker\", \"tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options\", \"tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values\", \"tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults\", \"tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8\", \"tests/test_self.py::TestRunTC::test_parseable_file_path\", \"tests/test_self.py::TestRunTC::test_stdin[/mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin_missing_modulename\", \"tests/test_self.py::TestRunTC::test_relative_imports[False]\", \"tests/test_self.py::TestRunTC::test_relative_imports[True]\", \"tests/test_self.py::TestRunTC::test_stdin_syntaxerror\", \"tests/test_self.py::TestRunTC::test_version\", \"tests/test_self.py::TestRunTC::test_fail_under\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-except-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-broad-except-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-broad-except-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-broad-except-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-broad-except-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-except-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-broad-except-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-broad-except-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0116-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-fake1,C,fake2-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0115-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts2-16]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts3-16]\", \"tests/test_self.py::TestRunTC::test_modify_sys_path\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory_with_pythonpath\", \"tests/test_self.py::TestRunTC::test_import_plugin_from_local_directory_if_pythonpath_cwd\", \"tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check\", \"tests/test_self.py::TestRunTC::test_can_list_directories_without_dunder_init\", \"tests/test_self.py::TestRunTC::test_jobs_score\", \"tests/test_self.py::TestRunTC::test_duplicate_code_raw_strings\", \"tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath\", \"tests/test_self.py::TestRunTC::test_output_file_valid_path\", \"tests/test_self.py::TestRunTC::test_output_file_invalid_path_exits_with_code_32\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args3-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args4-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args5-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args6-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args7-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args8-22]\", \"tests/test_self.py::TestRunTC::test_one_module_fatal_error\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args3-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args4-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args5-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args6-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args7-1]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args8-1]\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[text-tests/regrtest_data/unused_variable.py:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[parseable-tests/regrtest_data/unused_variable.py:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[msvs-tests/regrtest_data/unused_variable.py(4):\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[colorized-tests/regrtest_data/unused_variable.py:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json-\\\"message\\\":\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_custom_reporter\", \"tests/test_self.py::TestRunTC::test_output_file_specified_in_rcfile\", \"tests/test_self.py::TestRunTC::test_enable_all_extensions\", \"tests/test_self.py::TestRunTC::test_load_text_repoter_if_not_provided\", \"tests/test_self.py::TestRunTC::test_regex_paths_csv_validator\", \"tests/unittest_reporting.py::test_template_option\", \"tests/unittest_reporting.py::test_template_option_default\", \"tests/unittest_reporting.py::test_template_option_end_line\", \"tests/unittest_reporting.py::test_template_option_non_existing\", \"tests/unittest_reporting.py::test_deprecation_set_output\", \"tests/unittest_reporting.py::test_parseable_output_deprecated\", \"tests/unittest_reporting.py::test_parseable_output_regression\", \"tests/unittest_reporting.py::test_display_results_is_renamed\"]",
  "environment_setup_commit": "3b2fbaec045697d53bdd4435e59dbfc2b286df4b",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.910563",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}