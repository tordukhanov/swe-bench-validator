{
  "repo": "django/django",
  "instance_id": "django__django-15747",
  "base_commit": "e286ce17ff8bf72a248ce3177bbd5163c50a6ded",
  "patch": "diff --git a/django/db/backends/mysql/features.py b/django/db/backends/mysql/features.py\n--- a/django/db/backends/mysql/features.py\n+++ b/django/db/backends/mysql/features.py\n@@ -109,6 +109,12 @@ def django_test_skips(self):\n             \"scalar value but it's not implemented (#25287).\": {\n                 \"expressions.tests.FTimeDeltaTests.test_durationfield_multiply_divide\",\n             },\n+            \"UPDATE ... ORDER BY syntax on MySQL/MariaDB does not support ordering by\"\n+            \"related fields.\": {\n+                \"update.tests.AdvancedTests.\"\n+                \"test_update_ordered_by_inline_m2m_annotation\",\n+                \"update.tests.AdvancedTests.test_update_ordered_by_m2m_annotation\",\n+            },\n         }\n         if \"ONLY_FULL_GROUP_BY\" in self.connection.sql_mode:\n             skips.update(\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1169,6 +1169,20 @@ def update(self, **kwargs):\n         self._for_write = True\n         query = self.query.chain(sql.UpdateQuery)\n         query.add_update_values(kwargs)\n+\n+        # Inline annotations in order_by(), if possible.\n+        new_order_by = []\n+        for col in query.order_by:\n+            if annotation := query.annotations.get(col):\n+                if getattr(annotation, \"contains_aggregate\", False):\n+                    raise exceptions.FieldError(\n+                        f\"Cannot update when ordering by an aggregate: {annotation}\"\n+                    )\n+                new_order_by.append(annotation)\n+            else:\n+                new_order_by.append(col)\n+        query.order_by = tuple(new_order_by)\n+\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n",
  "test_patch": "diff --git a/tests/update/models.py b/tests/update/models.py\n--- a/tests/update/models.py\n+++ b/tests/update/models.py\n@@ -41,6 +41,7 @@ class Foo(models.Model):\n class Bar(models.Model):\n     foo = models.ForeignKey(Foo, models.CASCADE, to_field=\"target\")\n     m2m_foo = models.ManyToManyField(Foo, related_name=\"m2m_foo\")\n+    x = models.IntegerField(default=0)\n \n \n class UniqueNumber(models.Model):\ndiff --git a/tests/update/tests.py b/tests/update/tests.py\n--- a/tests/update/tests.py\n+++ b/tests/update/tests.py\n@@ -225,6 +225,30 @@ def test_update_with_joined_field_annotation(self):\n                             new_name=annotation,\n                         ).update(name=F(\"new_name\"))\n \n+    def test_update_ordered_by_m2m_aggregation_annotation(self):\n+        msg = (\n+            \"Cannot update when ordering by an aggregate: \"\n+            \"Count(Col(update_bar_m2m_foo, update.Bar_m2m_foo.foo))\"\n+        )\n+        with self.assertRaisesMessage(FieldError, msg):\n+            Bar.objects.annotate(m2m_count=Count(\"m2m_foo\")).order_by(\n+                \"m2m_count\"\n+            ).update(x=2)\n+\n+    def test_update_ordered_by_inline_m2m_annotation(self):\n+        foo = Foo.objects.create(target=\"test\")\n+        Bar.objects.create(foo=foo)\n+\n+        Bar.objects.order_by(Abs(\"m2m_foo\")).update(x=2)\n+        self.assertEqual(Bar.objects.get().x, 2)\n+\n+    def test_update_ordered_by_m2m_annotation(self):\n+        foo = Foo.objects.create(target=\"test\")\n+        Bar.objects.create(foo=foo)\n+\n+        Bar.objects.annotate(abs_id=Abs(\"m2m_foo\")).order_by(\"abs_id\").update(x=3)\n+        self.assertEqual(Bar.objects.get().x, 3)\n+\n \n @unittest.skipUnless(\n     connection.vendor == \"mysql\",\n@@ -252,14 +276,12 @@ def test_order_by_update_on_unique_constraint(self):\n                 self.assertEqual(updated, 2)\n \n     def test_order_by_update_on_unique_constraint_annotation(self):\n-        # Ordering by annotations is omitted because they cannot be resolved in\n-        # .update().\n-        with self.assertRaises(IntegrityError):\n-            UniqueNumber.objects.annotate(number_inverse=F(\"number\").desc(),).order_by(\n-                \"number_inverse\"\n-            ).update(\n-                number=F(\"number\") + 1,\n-            )\n+        updated = (\n+            UniqueNumber.objects.annotate(number_inverse=F(\"number\").desc())\n+            .order_by(\"number_inverse\")\n+            .update(number=F(\"number\") + 1)\n+        )\n+        self.assertEqual(updated, 2)\n \n     def test_order_by_update_on_parent_unique_constraint(self):\n         # Ordering by inherited fields is omitted because joined fields cannot\n",
  "problem_statement": "QuerySet.update() raises FieldError on queryset ordered by an annotated field.\nDescription\n\t\nA FieldError results if I try to perform a custom a custom action on data in the admin interface IF that data is sorted by an annotated field. The action is obviously not acting on an annotated field as those fields do not exist in the database, but raises a FieldError saying it 'Cannot resolve keyword 'field_that_data_is_currently_sorted_by' into field.' and then lists the choices for fields (all of which are the raw model fields, not the annotated fields in the custom queryset).\nMy admin model:\n@admin.register(Position)\nclass PositionAdmin(admin.ModelAdmin):\n\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)\n\tdef get_queryset(self, request):\n\t\tqs = super(PositionAdmin, self).get_queryset(request).prefetch_related(\n\t\t\t'orders').select_related(\n\t\t\t\t'portfolio', 'current_position').select_related(\n\t\t\t\t\t'current_position').annotate(\n\t\t\t\tCount('orders', distinct=True),\n\t\t\t\tCount('short_requests'),\n\t\t\t\ttotal_position_value=ExpressionWrapper(\n\t\t\t\t\tF('price') * F('quantity'), output_field=IntegerField()),\n\t\t\t\tdiff_shares=Coalesce(\n\t\t\t\t\tF('quantity')\n\t\t\t\t\t- F('current_position__quantity'),\n\t\t\t\t\tF('quantity')),\n\t\t\t\tdiff_value=ExpressionWrapper(\n\t\t\t\t\tF('diff_shares') * F('price'),\n\t\t\t\t\toutput_field=IntegerField()),\n\t\t\t\torders_with_errors=Count(\n\t\t\t\t\tCase(When(~Q(orders__error=''), then=1))),\n\t\t\t\tnon_accepted_orders=Count(\n\t\t\t\t\tCase(When(Q(orders__status=''), then=1))),\n\t\t\t\torder_today=Count(\n\t\t\t\t\tCase(When(\n\t\t\t\t\t\torders__created_at__gte=_brokerage_today_start(),\n\t\t\t\t\t\tthen=1))))\n\t\treturn qs\n\t# Custom Action\n\tdef approve_position_for_trading(self, request, queryset):\n\t\ttry:\n\t\t\tnum_pos_approved = queryset.update(approved=True)\n\t\texcept FieldError:\n\t\t\tself.message_user(\n\t\t\t\trequest, \"You cannot perform actions when you have sorted by \"\n\t\t\t\t\"this column. Please remove your column sortings and then try \"\n\t\t\t\t\"your action again.\", level=messages.ERROR)\n\t\telse:\n\t\t\tif num_pos_approved == 1:\n\t\t\t\tmessage_bit = \"1 position was was\"\n\t\t\telse:\n\t\t\t\tmessage_bit = \"%s positions were\" % num_pos_approved\n\t\t\tself.message_user(\n\t\t\t\trequest, \"%s successfully approved for trading.\" % message_bit)\nI had to write code to handle the error so that the user will know how to proceed. However, this seems like bad behavior. Django can successfully perform that action (changing the 'Approved' field to 'True') on the data if it is sorted by any core model field, or if sorted by no field at all. However, if the data is sorted by a field resulting from the annotation of my queryset, then I get the FieldError when I try to perform the action. This seems like a bug.\n",
  "hints_text": "Could you provide traceback and try minimize your example?\nYes, a more minimal (but complete, with models) example seems needed.\nHey folks, I've run into this bug both on django 3.x and 4.x. Here is a small showcase project: ​https://github.com/salomvary/django_admin_action_bug Steps to reproduce: Run the project Sign in to admin Create a few \"Things\" Go to Home › My_App › Things and select a Thing using the checkboxes Go to Actions > \"Update Something\" Click \"Go\" You will see the following error page: FieldError at /admin/my_app/thing/ Cannot resolve keyword 'other_things_count' into field. Choices are: id, is_something, other_things Few things to note: Removing queryset.order_by eliminates the problem Removing annotations that involve joins also eliminates the problem Stack trace: Internal Server Error: /admin/my_app/thing/ Traceback (most recent call last): File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/core/handlers/exception.py\", line 47, in inner response = get_response(request) File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/core/handlers/base.py\", line 181, in _get_response response = wrapped_callback(request, *callback_args, **callback_kwargs) File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/contrib/admin/options.py\", line 622, in wrapper return self.admin_site.admin_view(view)(*args, **kwargs) File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/utils/decorators.py\", line 130, in _wrapped_view response = view_func(request, *args, **kwargs) File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/views/decorators/cache.py\", line 56, in _wrapped_view_func response = view_func(request, *args, **kwargs) File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/contrib/admin/sites.py\", line 236, in inner return view(request, *args, **kwargs) File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/utils/decorators.py\", line 43, in _wrapper return bound_method(*args, **kwargs) File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/utils/decorators.py\", line 130, in _wrapped_view response = view_func(request, *args, **kwargs) File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/contrib/admin/options.py\", line 1736, in changelist_view response = self.response_action(request, queryset=cl.get_queryset(request)) File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/contrib/admin/options.py\", line 1417, in response_action response = func(self, request, queryset) File \"/Users/mrc/Projects/django_admin_action_bug/my_app/admin.py\", line 9, in update_something queryset.update(is_something=True) File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/db/models/query.py\", line 790, in update rows = query.get_compiler(self.db).execute_sql(CURSOR) File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/db/models/sql/compiler.py\", line 1591, in execute_sql cursor = super().execute_sql(result_type) File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/db/models/sql/compiler.py\", line 1189, in execute_sql sql, params = self.as_sql() File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/db/models/sql/compiler.py\", line 1526, in as_sql self.pre_sql_setup() File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/db/models/sql/compiler.py\", line 1626, in pre_sql_setup super().pre_sql_setup() File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/db/models/sql/compiler.py\", line 60, in pre_sql_setup order_by = self.get_order_by() File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/db/models/sql/compiler.py\", line 389, in get_order_by for expr, is_ref in self._order_by_pairs(): File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/db/models/sql/compiler.py\", line 373, in _order_by_pairs yield from self.find_ordering_name( File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/db/models/sql/compiler.py\", line 767, in find_ordering_name field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias) File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/db/models/sql/compiler.py\", line 807, in _setup_joins field, targets, opts, joins, path, transform_function = self.query.setup_joins(pieces, opts, alias) File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/db/models/sql/query.py\", line 1604, in setup_joins path, final_field, targets, rest = self.names_to_path( File \"/Users/mrc/Projects/django_admin_action_bug/.venv/lib/python3.9/site-packages/django/db/models/sql/query.py\", line 1522, in names_to_path raise FieldError(\"Cannot resolve keyword '%s' into field. \" django.core.exceptions.FieldError: Cannot resolve keyword 'other_things_count' into field. Choices are: id, is_something, other_things [09/Dec/2021 17:00:45] \"POST /admin/my_app/thing/ HTTP/1.1\" 500 154267\nThanks for details! QuerySet.update() removes all annotations (see a84344bc539c66589c8d4fe30c6ceaecf8ba1af3) that's why order_by() raises a FieldError. We should probably clear ordering in QuerySet.update() or at least remove all annotated fields from it, e.g. django/db/models/query.py diff --git a/django/db/models/query.py b/django/db/models/query.py index fb6639793a..1db9de0b5c 100644 a b class QuerySet: 790790 query = self.query.chain(sql.UpdateQuery) 791791 query.add_update_values(kwargs) 792792 # Clear any annotations so that they won't be present in subqueries. 793 query.clear_ordering() 793794 query.annotations = {} 794795 with transaction.mark_for_rollback_on_error(using=self.db): 795796 rows = query.get_compiler(self.db).execute_sql(CURSOR) or django/db/models/query.py diff --git a/django/db/models/query.py b/django/db/models/query.py index fb6639793a..90a0041d66 100644 a b class QuerySet: 790790 query = self.query.chain(sql.UpdateQuery) 791791 query.add_update_values(kwargs) 792792 # Clear any annotations so that they won't be present in subqueries. 793 query.order_by = tuple( 794 col for col in query.order_by if col not in query.annotations 795 ) 793796 query.annotations = {} 794797 with transaction.mark_for_rollback_on_error(using=self.db): 795798 rows = query.get_compiler(self.db).execute_sql(CURSOR) As a workaround you can clear ordering in your actions, e.g. def update_something(admin, request, queryset): queryset.order_by().update(is_something=True)\nThanks for the workaround, I can confirm it makes the exception go away.\nHi, guys I'd love to work in this, any suggestions ! I need help to understand this more and what can you do next\nSaeed, Have you seen my comment?\nThe suggested code seems to fix it indeed :) I could only reproduce when annotating/ordering on a ManyToManyField. I used the snippet that keeps some order_by and doesn't clear it entirely ¯\\_(ツ)_/¯ ​PR",
  "created_at": "2022-05-31T14:32:38Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_update_ordered_by_m2m_aggregation_annotation (update.tests.AdvancedTests)\", \"test_update_ordered_by_m2m_annotation (update.tests.AdvancedTests)\"]",
  "PASS_TO_PASS": "[\"Objects are updated by first filtering the candidates into a queryset\", \"In the rare case you want to update every instance of a model, update()\", \"Update of a queryset that's been annotated and involves multiple tables.\", \"Update of a queryset that's been annotated.\", \"Foreign key fields can also be updated, although you can only update\", \"test_update_m2m_field (update.tests.AdvancedTests)\", \"Multiple fields can be updated at once\", \"We can update multiple objects at once.\", \"test_update_ordered_by_inline_m2m_annotation (update.tests.AdvancedTests)\", \"Update of an FK field which specifies a to_field works.\", \"We do not support update on already sliced query sets.\", \"test_update_transformed_field (update.tests.AdvancedTests)\", \"test_update_with_joined_field_annotation (update.tests.AdvancedTests)\", \"Update changes the right number of rows for an empty queryset\", \"Update works using <field>_id for foreign keys\", \"Update changes the right number of rows for a nonempty queryset\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.740042",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}