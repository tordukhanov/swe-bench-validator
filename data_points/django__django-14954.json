{
  "repo": "django/django",
  "instance_id": "django__django-14954",
  "base_commit": "9be36f8044c3bdfe5d1819d4b3b62bee64a039e3",
  "patch": "diff --git a/django/contrib/auth/management/commands/createsuperuser.py b/django/contrib/auth/management/commands/createsuperuser.py\n--- a/django/contrib/auth/management/commands/createsuperuser.py\n+++ b/django/contrib/auth/management/commands/createsuperuser.py\n@@ -185,6 +185,10 @@ def handle(self, *args, **options):\n                         raise CommandError('You must use --%s with --noinput.' % field_name)\n                     field = self.UserModel._meta.get_field(field_name)\n                     user_data[field_name] = field.clean(value, None)\n+                    if field.many_to_many and isinstance(user_data[field_name], str):\n+                        user_data[field_name] = [\n+                            pk.strip() for pk in user_data[field_name].split(',')\n+                        ]\n \n             self.UserModel._default_manager.db_manager(database).create_superuser(**user_data)\n             if options['verbosity'] >= 1:\n",
  "test_patch": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -994,6 +994,25 @@ def test_environment_variable_non_interactive(self):\n         # Environment variables are ignored for non-required fields.\n         self.assertEqual(user.first_name, '')\n \n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithM2m')\n+    def test_environment_variable_m2m_non_interactive(self):\n+        new_io = StringIO()\n+        org_id_1 = Organization.objects.create(name='Organization 1').pk\n+        org_id_2 = Organization.objects.create(name='Organization 2').pk\n+        with mock.patch.dict(os.environ, {\n+            'DJANGO_SUPERUSER_ORGS': f'{org_id_1},{org_id_2}',\n+        }):\n+            call_command(\n+                'createsuperuser',\n+                interactive=False,\n+                username='joe',\n+                stdout=new_io,\n+            )\n+        command_output = new_io.getvalue().strip()\n+        self.assertEqual(command_output, 'Superuser created successfully.')\n+        user = CustomUserWithM2M._default_manager.get(username='joe')\n+        self.assertEqual(user.orgs.count(), 2)\n+\n     @mock.patch.dict(os.environ, {\n         'DJANGO_SUPERUSER_USERNAME': 'test_superuser',\n         'DJANGO_SUPERUSER_EMAIL': 'joe@somewhere.org',\n",
  "problem_statement": "createsuperuser doesn't work in non-interactive mode if a ManyToManyField is in REQUIRED_FIELDS.\nDescription\n\t\n#21755 added ForeignKey support to REQUIRED_FIELDS in createsuperuser command but this support is not working in non-interactive mode.\nThe buggy line is ​this line. If value is an integer, field.clean() simply returns it after validation while ​`create_superuser(**user_data)` on the next line would expect a model instance for the ForeignKey field.\nIf you go one step further and override createsuperuser to pass an instance of the model, then field.clean() raises an error because ​`ForeignKey.to_python()` expects an integer.\nThere may be the same problem with ManyToManyField.\n",
  "hints_text": "Proposed patch to fix the bug\nI just posted a patch proposing a fix for this bug. I'm open to comments on this solutions and suggestions on how to fix the ManyToManyField case.\nProposed patch to fix the bug\n​#14913 is fixing this one and is ready for review.",
  "created_at": "2021-10-07T10:03:56Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_environment_variable_m2m_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\"]",
  "PASS_TO_PASS": "[\"test_input_not_found (auth_tests.test_management.MockInputTests)\", \"test_actual_implementation (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_existing (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_i18n (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_simple (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_with_database (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"changepassword --database should operate on the specified DB.\", \"test_createsuperuser_command_suggested_username_with_database_option (auth_tests.test_management.MultiDBCreatesuperuserTestCase)\", \"createsuperuser --database should operate on the specified DB.\", \"`post_migrate` handler ordering isn't guaranteed. Simulate a case\", \"test_default_permissions (auth_tests.test_management.CreatePermissionsTests)\", \"A proxy model's permissions use its own content type rather than the\", \"#24075 - Permissions shouldn't be created or deleted if the ContentType\", \"test_get_pass (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"test_get_pass_no_input (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"test_nonexistent_username (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"A CommandError should be raised if the user enters in passwords which\", \"The system username is used if --username isn't provided.\", \"Executing the changepassword management command should change joe's password\", \"#21627 -- Executing the changepassword management command should allow\", \"A CommandError should be thrown by handle() if the user enters in\", \"Check the operation of the createsuperuser management command\", \"Creation fails if --username is blank.\", \"test_blank_username_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"createsuperuser uses a default username when one isn't provided.\", \"test_email_in_username (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_environment_variable_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"Creation fails if the username already exists.\", \"call_command() gets username='janet' and interactive=True.\", \"test_fields_with_fk (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_fk_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m_and_through (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m_interactive_blank (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_ignore_environment_variable_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_ignore_environment_variable_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"Creation fails if the username fails validation.\", \"test_keyboard_interrupt (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_no_email_argument (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_non_ascii_verbose_name (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"You can pass a stdin object as an option and it should be\", \"Creation should fail if the password fails validation.\", \"Password validation can be bypassed by entering 'y' at the prompt.\", \"If the command is not called from a TTY, it should be skipped and a\", \"A superuser can be created when a custom user model is in use\", \"A Custom superuser won't be created when a required field isn't provided\", \"test_swappable_user_username_non_unique (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_usermodel_without_password (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_usermodel_without_password_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_password_against_required_fields (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_password_against_username (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"Creation should fail if the user enters blank passwords.\", \"Creation should fail if the user enters mismatched passwords.\", \"test_verbosity_zero (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.709579",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}