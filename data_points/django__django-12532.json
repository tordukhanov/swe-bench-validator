{
  "repo": "django/django",
  "instance_id": "django__django-12532",
  "base_commit": "7d8cdad6b704051bb69a47721913701349463ead",
  "patch": "diff --git a/django/forms/models.py b/django/forms/models.py\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -2,7 +2,7 @@\n Helper functions for creating Form classes from Django models\n and database field objects.\n \"\"\"\n-\n+import warnings\n from itertools import chain\n \n from django.core.exceptions import (\n@@ -15,6 +15,7 @@\n from django.forms.widgets import (\n     HiddenInput, MultipleHiddenInput, RadioSelect, SelectMultiple,\n )\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.text import capfirst, get_text_list\n from django.utils.translation import gettext, gettext_lazy as _\n \n@@ -1291,7 +1292,7 @@ class ModelMultipleChoiceField(ModelChoiceField):\n     widget = SelectMultiple\n     hidden_widget = MultipleHiddenInput\n     default_error_messages = {\n-        'list': _('Enter a list of values.'),\n+        'invalid_list': _('Enter a list of values.'),\n         'invalid_choice': _('Select a valid choice. %(value)s is not one of the'\n                             ' available choices.'),\n         'invalid_pk_value': _('“%(pk)s” is not a valid value.')\n@@ -1299,6 +1300,13 @@ class ModelMultipleChoiceField(ModelChoiceField):\n \n     def __init__(self, queryset, **kwargs):\n         super().__init__(queryset, empty_label=None, **kwargs)\n+        if self.error_messages.get('list') is not None:\n+            warnings.warn(\n+                \"The 'list' error message key is deprecated in favor of \"\n+                \"'invalid_list'.\",\n+                RemovedInDjango40Warning, stacklevel=2,\n+            )\n+            self.error_messages['invalid_list'] = self.error_messages['list']\n \n     def to_python(self, value):\n         if not value:\n@@ -1312,7 +1320,10 @@ def clean(self, value):\n         elif not self.required and not value:\n             return self.queryset.none()\n         if not isinstance(value, (list, tuple)):\n-            raise ValidationError(self.error_messages['list'], code='list')\n+            raise ValidationError(\n+                self.error_messages['invalid_list'],\n+                code='invalid_list',\n+            )\n         qs = self._check_values(value)\n         # Since this overrides the inherited ModelChoiceField.clean\n         # we run custom validators here\n@@ -1333,8 +1344,8 @@ def _check_values(self, value):\n         except TypeError:\n             # list of lists isn't hashable, for example\n             raise ValidationError(\n-                self.error_messages['list'],\n-                code='list',\n+                self.error_messages['invalid_list'],\n+                code='invalid_list',\n             )\n         for pk in value:\n             try:\n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -7,7 +7,8 @@\n     SplitDateTimeField, TimeField, URLField, ValidationError, utils,\n )\n from django.template import Context, Template\n-from django.test import SimpleTestCase, TestCase\n+from django.test import SimpleTestCase, TestCase, ignore_warnings\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.safestring import mark_safe\n \n from ..models import ChoiceModel\n@@ -301,9 +302,30 @@ def test_modelchoicefield(self):\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': '%(value)s IS INVALID CHOICE',\n-            'list': 'NOT A LIST OF VALUES',\n+            'invalid_list': 'NOT A LIST OF VALUES',\n         }\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n         self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+\n+\n+class DeprecationTests(TestCase, AssertFormErrorsMixin):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_list_error_message(self):\n+        f = ModelMultipleChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={'list': 'NOT A LIST OF VALUES'},\n+        )\n+        self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n+\n+    def test_list_error_message_warning(self):\n+        msg = (\n+            \"The 'list' error message key is deprecated in favor of \"\n+            \"'invalid_list'.\"\n+        )\n+        with self.assertRaisesMessage(RemovedInDjango40Warning, msg):\n+            ModelMultipleChoiceField(\n+                queryset=ChoiceModel.objects.all(),\n+                error_messages={'list': 'NOT A LIST OF VALUES'},\n+            )\n",
  "problem_statement": "forms.ModelMultipleChoiceField should use \"invalid_list\" as error message key\nDescription\n\t\nThe MultipleChoiceField uses \"invalid_list\", but ModelMultipleChoiceField uses \"list\" as the key for the similar error message.\n",
  "hints_text": "It's a slight inconsistency, sure, but they are two different fields, so different error message keys are reasonable. Pushing post-1.0.\nMilestone post-1.0 deleted\nChange UI/UX from NULL to False.\nChange Easy pickings from NULL to False.\nShould this change happen? The comments are ambiguous :)\nThe implementation isn't difficult (see attached patch). The question is whether or not we accept this as a backwards incompatible change (to be documented if so) or try for some deprecation path. I'm not sure how a deprecation would work.",
  "created_at": "2020-03-05T22:30:13Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_modelchoicefield (forms_tests.tests.test_error_messages.ModelChoiceFieldErrorMessagesTestCase)\", \"test_list_error_message_warning (forms_tests.tests.test_error_messages.DeprecationTests)\"]",
  "PASS_TO_PASS": "[\"test_list_error_message (forms_tests.tests.test_error_messages.DeprecationTests)\", \"test_booleanfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_charfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_choicefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_datefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_datetimefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_decimalfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_emailfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_error_messages_escaping (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_filefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_floatfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_generic_ipaddressfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_integerfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_multiplechoicefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_regexfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_splitdatetimefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_subclassing_errorlist (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_timefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_urlfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.629923",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}