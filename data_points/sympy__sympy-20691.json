{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-20691",
  "base_commit": "b4c1da60fa4e8201b2b929083df2610da7a5b52f",
  "patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -9,6 +9,7 @@\n from .decorators import call_highest_priority, sympify_method_args, sympify_return\n from .cache import cacheit\n from .compatibility import as_int, default_sort_key\n+from .kind import NumberKind\n from sympy.utilities.misc import func_name\n from mpmath.libmp import mpf_log, prec_to_dps\n \n@@ -650,9 +651,12 @@ def check_denominator_zeros(expression):\n         if expr.is_zero:\n             return True\n \n+        # Don't attempt subsitution or differentiation with non-number symbols\n+        wrt_number = {sym for sym in wrt if sym.kind is NumberKind}\n+\n         # try numerical evaluation to see if we get two different values\n         failing_number = None\n-        if wrt == free:\n+        if wrt_number == free:\n             # try 0 (for a) and 1 (for b)\n             try:\n                 a = expr.subs(list(zip(free, [0]*len(free))),\n@@ -688,7 +692,7 @@ def check_denominator_zeros(expression):\n         # expression depends on them or not using differentiation. This is\n         # not sufficient for all expressions, however, so we don't return\n         # False if we get a derivative other than 0 with free symbols.\n-        for w in wrt:\n+        for w in wrt_number:\n             deriv = expr.diff(w)\n             if simplify:\n                 deriv = deriv.simplify()\ndiff --git a/sympy/core/kind.py b/sympy/core/kind.py\n--- a/sympy/core/kind.py\n+++ b/sympy/core/kind.py\n@@ -322,15 +322,17 @@ def dispatch_kinds(self, kinds, **kwargs):\n                 prev_kind = result\n \n                 t1, t2 = type(prev_kind), type(kind)\n+                k1, k2 = prev_kind, kind\n                 func = self._dispatcher.dispatch(t1, t2)\n                 if func is None and self.commutative:\n                     # try reversed order\n                     func = self._dispatcher.dispatch(t2, t1)\n+                    k1, k2 = k2, k1\n                 if func is None:\n                     # unregistered kind relation\n                     result = UndefinedKind\n                 else:\n-                    result = func(prev_kind, kind)\n+                    result = func(k1, k2)\n                 if not isinstance(result, Kind):\n                     raise RuntimeError(\n                         \"Dispatcher for {!r} and {!r} must return a Kind, but got {!r}\".format(\ndiff --git a/sympy/core/power.py b/sympy/core/power.py\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -11,6 +11,7 @@\n from .logic import fuzzy_bool, fuzzy_not, fuzzy_and, fuzzy_or\n from .compatibility import as_int, HAS_GMPY, gmpy\n from .parameters import global_parameters\n+from .kind import NumberKind, UndefinedKind\n from sympy.utilities.iterables import sift\n from sympy.utilities.exceptions import SymPyDeprecationWarning\n from sympy.multipledispatch import Dispatcher\n@@ -357,6 +358,13 @@ def base(self):\n     def exp(self):\n         return self._args[1]\n \n+    @property\n+    def kind(self):\n+        if self.exp.kind is NumberKind:\n+            return self.base.kind\n+        else:\n+            return UndefinedKind\n+\n     @classmethod\n     def class_key(cls):\n         return 3, 2, cls.__name__\ndiff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -32,6 +32,10 @@ class ExpBase(Function):\n     unbranched = True\n     _singularities = (S.ComplexInfinity,)\n \n+    @property\n+    def kind(self):\n+        return self.exp.kind\n+\n     def inverse(self, argindex=1):\n         \"\"\"\n         Returns the inverse function of ``exp(x)``.\ndiff --git a/sympy/matrices/expressions/determinant.py b/sympy/matrices/expressions/determinant.py\n--- a/sympy/matrices/expressions/determinant.py\n+++ b/sympy/matrices/expressions/determinant.py\n@@ -33,6 +33,10 @@ def __new__(cls, mat):\n     def arg(self):\n         return self.args[0]\n \n+    @property\n+    def kind(self):\n+        return self.arg.kind.element_kind\n+\n     def doit(self, expand=False):\n         try:\n             return self.arg._eval_determinant()\ndiff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -543,10 +543,26 @@ def recurse_expr(expr, index_ranges={}):\n                 return [(MatrixElement(Add.fromiter(v), *k), k) for k, v in d.items()]\n             elif isinstance(expr, KroneckerDelta):\n                 i1, i2 = expr.args\n-                if dimensions is not None:\n-                    identity = Identity(dimensions[0])\n-                else:\n-                    identity = S.One\n+                shape = dimensions\n+                if shape is None:\n+                    shape = []\n+                    for kr_ind in expr.args:\n+                        if kr_ind not in index_ranges:\n+                            continue\n+                        r1, r2 = index_ranges[kr_ind]\n+                        if r1 != 0:\n+                            raise ValueError(f\"index ranges should start from zero: {index_ranges}\")\n+                        shape.append(r2)\n+                    if len(shape) == 0:\n+                        shape = None\n+                    elif len(shape) == 1:\n+                        shape = (shape[0] + 1, shape[0] + 1)\n+                    else:\n+                        shape = (shape[0] + 1, shape[1] + 1)\n+                        if shape[0] != shape[1]:\n+                            raise ValueError(f\"upper index ranges should be equal: {index_ranges}\")\n+\n+                identity = Identity(shape[0])\n                 return [(MatrixElement(identity, i1, i2), (i1, i2))]\n             elif isinstance(expr, MatrixElement):\n                 matrix_symbol, i1, i2 = expr.args\n@@ -708,7 +724,10 @@ def __new__(cls, name, n, m):\n                 return name[n, m]\n         if isinstance(name, str):\n             name = Symbol(name)\n-        name = _sympify(name)\n+        else:\n+            name = _sympify(name)\n+            if not isinstance(name.kind, MatrixKind):\n+                raise TypeError(\"First argument of MatrixElement should be a matrix\")\n         obj = Expr.__new__(cls, name, n, m)\n         return obj\n \ndiff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -6,7 +6,7 @@\n     Callable, NotIterable, as_int, is_sequence)\n from sympy.core.decorators import deprecated\n from sympy.core.expr import Expr\n-from sympy.core.kind import _NumberKind, NumberKind, UndefinedKind\n+from sympy.core.kind import _NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n from sympy.core.power import Pow\n from sympy.core.singleton import S\n@@ -754,9 +754,16 @@ def num_mat_mul(k1, k2):\n     searches for this automatically.\n     \"\"\"\n     # Deal with Mul._kind_dispatcher's commutativity\n-    elemk = Mul._kind_dispatcher(NumberKind, k2.element_kind)\n+    # XXX: this function is called with either k1 or k2 as MatrixKind because\n+    # the Mul kind dispatcher is commutative. Maybe it shouldn't be. Need to\n+    # swap the args here because NumberKind doesn't have an element_kind\n+    # attribute.\n+    if not isinstance(k2, MatrixKind):\n+        k1, k2 = k2, k1\n+    elemk = Mul._kind_dispatcher(k1, k2.element_kind)\n     return MatrixKind(elemk)\n \n+\n @Mul._kind_dispatcher.register(MatrixKind, MatrixKind)\n def mat_mat_mul(k1, k2):\n     \"\"\"\n@@ -765,6 +772,7 @@ def mat_mat_mul(k1, k2):\n     elemk = Mul._kind_dispatcher(k1.element_kind, k2.element_kind)\n     return MatrixKind(elemk)\n \n+\n class MatrixBase(MatrixDeprecated,\n                  MatrixCalculus,\n                  MatrixEigen,\n",
  "test_patch": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -179,6 +179,7 @@ def test_invariants():\n     for obj in objs:\n         assert obj == obj.__class__(*obj.args)\n \n+\n def test_indexing():\n     A = MatrixSymbol('A', n, m)\n     A[1, 2]\n@@ -305,6 +306,17 @@ def test_inv():\n     B = MatrixSymbol('B', 3, 3)\n     assert B.inv() == B**-1\n \n+    # https://github.com/sympy/sympy/issues/19162\n+    X = MatrixSymbol('X', 1, 1).as_explicit()\n+    assert X.inv() == Matrix([[1/X[0, 0]]])\n+\n+    X = MatrixSymbol('X', 2, 2).as_explicit()\n+    detX = X[0, 0]*X[1, 1] - X[0, 1]*X[1, 0]\n+    invX = Matrix([[ X[1, 1], -X[0, 1]],\n+                   [-X[1, 0],  X[0, 0]]]) / detX\n+    assert X.inv() == invX\n+\n+\n @XFAIL\n def test_factor_expand():\n     A = MatrixSymbol(\"A\", n, n)\n@@ -320,6 +332,7 @@ def test_factor_expand():\n     # Ideally we get the first, but we at least don't want a wrong answer\n     assert factor(expr) in [I - C, B**-1*(A**-1*(I - C)*B**-1)**-1*A**-1]\n \n+\n def test_issue_2749():\n     A = MatrixSymbol(\"A\", 5, 2)\n     assert (A.T * A).I.as_explicit() == Matrix([[(A.T * A).I[0, 0], (A.T * A).I[0, 1]], \\\n@@ -381,6 +394,7 @@ def test_MatMul_postprocessor():\n \n     assert Mul(A, x, M, M, x) == MatMul(A, Mx**2)\n \n+\n @XFAIL\n def test_MatAdd_postprocessor_xfail():\n     # This is difficult to get working because of the way that Add processes\n@@ -388,6 +402,7 @@ def test_MatAdd_postprocessor_xfail():\n     z = zeros(2)\n     assert Add(z, S.NaN) == Add(S.NaN, z)\n \n+\n def test_MatAdd_postprocessor():\n     # Some of these are nonsensical, but we do not raise errors for Add\n     # because that breaks algorithms that want to replace matrices with dummy\n@@ -434,6 +449,7 @@ def test_MatAdd_postprocessor():\n     assert isinstance(a, Add)\n     assert a.args == (2*x, A + 2*M)\n \n+\n def test_simplify_matrix_expressions():\n     # Various simplification functions\n     assert type(gcd_terms(C*D + D*C)) == MatAdd\n@@ -441,6 +457,7 @@ def test_simplify_matrix_expressions():\n     assert type(a) == MatAdd\n     assert a.args == (2*C*D, 4*D*C)\n \n+\n def test_exp():\n     A = MatrixSymbol('A', 2, 2)\n     B = MatrixSymbol('B', 2, 2)\n@@ -451,9 +468,11 @@ def test_exp():\n     assert not isinstance(expr1, exp)\n     assert not isinstance(expr2, exp)\n \n+\n def test_invalid_args():\n     raises(SympifyError, lambda: MatrixSymbol(1, 2, 'A'))\n \n+\n def test_matrixsymbol_from_symbol():\n     # The label should be preserved during doit and subs\n     A_label = Symbol('A', complex=True)\n@@ -473,6 +492,7 @@ def test_as_explicit():\n     ])\n     raises(ValueError, lambda: A.as_explicit())\n \n+\n def test_MatrixSet():\n     M = MatrixSet(2, 2, set=S.Reals)\n     assert M.shape == (2, 2)\n@@ -496,6 +516,7 @@ def test_MatrixSet():\n     raises(ValueError, lambda: MatrixSet(2.4, -1, S.Reals))\n     raises(TypeError, lambda: MatrixSet(2, 2, (1, 2, 3)))\n \n+\n def test_matrixsymbol_solving():\n     A = MatrixSymbol('A', 2, 2)\n     B = MatrixSymbol('B', 2, 2)\n",
  "problem_statement": "Modification of is_constant to take into account the MatrixSymbol case.\nFixes #19162\r\n\r\n#### Brief description of what is fixed or changed\r\n\r\nThe present issue was detected when calculating the inverse of a MatrixSymbol. The reason came from the is_constant method that did not take into account the case of MatrixSymbol giving the error that the zero value is not subscriptable.\r\n\r\n#### Other comments\r\n\r\nA test has been added to test_matrices to check this case.\r\n\r\n#### Release Notes\r\n\r\n<!-- Write the release notes for this release below. See\r\nhttps://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information\r\non how to write release notes. The bot will check your release notes\r\nautomatically to see if they are formatted correctly. -->\r\n\r\n<!-- BEGIN RELEASE NOTES -->\r\n\r\n* matrices\r\n    * Solved a bug that prevented the use of the MatrixSymbol inversion. \r\n\r\n<!-- END RELEASE NOTES -->\n",
  "hints_text": ":white_check_mark:\n\nHi, I am the [SymPy bot](https://github.com/sympy/sympy-bot) (v161). I'm here to help you write a release notes entry. Please read the [guide on how to write release notes](https://github.com/sympy/sympy/wiki/Writing-Release-Notes).\n\n\n\nYour release notes are in good order.\n\nHere is what the release notes will look like:\n* matrices\n  * Solved a bug that prevented the use of the MatrixSymbol inversion. ([#20386](https://github.com/sympy/sympy/pull/20386) by [@jmgc](https://github.com/jmgc))\n\nThis will be added to https://github.com/sympy/sympy/wiki/Release-Notes-for-1.8.\n\n<details><summary>Click here to see the pull request description that was parsed.</summary>\n\n    Fixes #19162\r\n\r\n    #### Brief description of what is fixed or changed\r\n\r\n    The present issue was detected when calculating the inverse of a MatrixSymbol. The reason came from the is_constant method that did not take into account the case of MatrixSymbol giving the error that the zero value is not subscriptable.\r\n\r\n    #### Other comments\r\n\r\n    A test has been added to test_matrices to check this case.\r\n\r\n    #### Release Notes\r\n\r\n    <!-- Write the release notes for this release below. See\r\n    https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information\r\n    on how to write release notes. The bot will check your release notes\r\n    automatically to see if they are formatted correctly. -->\r\n\r\n    <!-- BEGIN RELEASE NOTES -->\r\n\r\n    * matrices\r\n        * Solved a bug that prevented the use of the MatrixSymbol inversion. \r\n\r\n    <!-- END RELEASE NOTES -->\n\n</details><p>\n\n# [Codecov](https://codecov.io/gh/sympy/sympy/pull/20386?src=pr&el=h1) Report\n> Merging [#20386](https://codecov.io/gh/sympy/sympy/pull/20386?src=pr&el=desc) (e83b757) into [master](https://codecov.io/gh/sympy/sympy/commit/9b613a56582f36421dea9e7720ad929630251741?el=desc) (9b613a5) will **increase** coverage by `0.012%`.\n> The diff coverage is `100.000%`.\n\n```diff\n@@              Coverage Diff              @@\n##            master    #20386       +/-   ##\n=============================================\n+ Coverage   75.747%   75.760%   +0.012%     \n=============================================\n  Files          673       673               \n  Lines       174410    174411        +1     \n  Branches     41205     41207        +2     \n=============================================\n+ Hits        132112    132135       +23     \n+ Misses       36587     36563       -24     \n- Partials      5711      5713        +2     \n```\n\nDoes this work when it reaches random expression substitution cases like `expr._random(None, 1, 0, 1, 0)`?\r\n\nIt passes the different tests, however, I do not know if it reaches this specific line.\nI think that this is not really the right approach to fixing the issue. I suggested something in https://github.com/sympy/sympy/issues/19162#issuecomment-620631559 that `MatrixElement` should check its arguments in the constructor.\n> I suggested something in #19162 (comment) that MatrixElement should check its arguments in the constructor.\r\n\r\n@jmgc Any thoughts on this? Please let us know if you are proceeding with this PR. Thanks for your contributions. \r\n\r\nPlease do not close this PR.\nMy understanding is that if the solution proposed by @oscarbenjamin is more general, I think it is the one that should be used. However, the tests included in the present PR shall be kept to avoid new unexpected behaviour.\r\n\r\nThanks\r\n",
  "created_at": "2020-12-29T08:35:05Z",
  "version": "1.9",
  "FAIL_TO_PASS": "[\"test_inv\"]",
  "PASS_TO_PASS": "[\"test_matrix_symbol_creation\", \"test_shape\", \"test_matexpr\", \"test_subs\", \"test_addition\", \"test_multiplication\", \"test_MatPow\", \"test_MatrixSymbol\", \"test_dense_conversion\", \"test_free_symbols\", \"test_zero_matmul\", \"test_matadd_simplify\", \"test_matmul_simplify\", \"test_invariants\", \"test_indexing\", \"test_single_indexing\", \"test_MatrixElement_commutative\", \"test_MatrixSymbol_determinant\", \"test_MatrixElement_diff\", \"test_MatrixElement_doit\", \"test_identity_powers\", \"test_Zero_power\", \"test_matrixelement_diff\", \"test_MatrixElement_with_values\", \"test_issue_2749\", \"test_issue_2750\", \"test_issue_7842\", \"test_issue_21195\", \"test_MatMul_postprocessor\", \"test_MatAdd_postprocessor\", \"test_simplify_matrix_expressions\", \"test_exp\", \"test_invalid_args\", \"test_matrixsymbol_from_symbol\", \"test_as_explicit\", \"test_MatrixSet\"]",
  "environment_setup_commit": "f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.140020",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}