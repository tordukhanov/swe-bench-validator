{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-7500",
  "base_commit": "358150c30ee77c4b38dd63125d42d071304baf48",
  "patch": "diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -286,12 +286,17 @@ def maybe_delete_a_numbered_dir(path: Path) -> None:\n \n \n def ensure_deletable(path: Path, consider_lock_dead_if_created_before: float) -> bool:\n-    \"\"\"checks if a lock exists and breaks it if its considered dead\"\"\"\n+    \"\"\"checks if `path` is deletable based on whether the lock file is expired\"\"\"\n     if path.is_symlink():\n         return False\n     lock = get_lock_path(path)\n-    if not lock.exists():\n-        return True\n+    try:\n+        if not lock.is_file():\n+            return True\n+    except OSError:\n+        # we might not have access to the lock file at all, in this case assume\n+        # we don't have access to the entire directory (#7491).\n+        return False\n     try:\n         lock_time = lock.stat().st_mtime\n     except Exception:\n",
  "test_patch": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -358,17 +358,25 @@ def test_get_extended_length_path_str():\n \n \n def test_suppress_error_removing_lock(tmp_path):\n-    \"\"\"ensure_deletable should not raise an exception if the lock file cannot be removed (#5456)\"\"\"\n+    \"\"\"ensure_deletable should be resilient if lock file cannot be removed (#5456, #7491)\"\"\"\n     path = tmp_path / \"dir\"\n     path.mkdir()\n     lock = get_lock_path(path)\n     lock.touch()\n     mtime = lock.stat().st_mtime\n \n-    with unittest.mock.patch.object(Path, \"unlink\", side_effect=OSError):\n+    with unittest.mock.patch.object(Path, \"unlink\", side_effect=OSError) as m:\n         assert not ensure_deletable(\n             path, consider_lock_dead_if_created_before=mtime + 30\n         )\n+        assert m.call_count == 1\n+    assert lock.is_file()\n+\n+    with unittest.mock.patch.object(Path, \"is_file\", side_effect=OSError) as m:\n+        assert not ensure_deletable(\n+            path, consider_lock_dead_if_created_before=mtime + 30\n+        )\n+        assert m.call_count == 1\n     assert lock.is_file()\n \n     # check now that we can remove the lock file in normal circumstances\n",
  "problem_statement": "Cleaning up temporary directories occasionally raises PermissionError\nOn Windows, I'm finding that *pytest* occasionally raises an exception starting with `PermissionError: [WinError 5] Access is denied` while cleaning up its temporary directories.  Below is an example of the output of a test session in which the exception arises.  The test file contains only the function `test_temp` shown in the output.  A necessary condition for the exception is that *pytest*'s base temporary directory already contains at least three temporary directories to cause *pytest* to try to clean up at least one directory.  Also, the exception occurred more often when the computer was under load.\r\n\r\n    ============================= test session starts =============================\r\n    platform win32 -- Python 3.7.7, pytest-5.4.3, py-1.9.0, pluggy-0.13.1\r\n    rootdir: C:\\Users\\stan.west\\Desktop\\pytest-garbage\r\n    collected 1 item\r\n\r\n    test_temp.py F                                                           [100%]\r\n\r\n    ================================== FAILURES ===================================\r\n    __________________________________ test_temp __________________________________\r\n\r\n    tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x0000026E365FECC8>, _basetemp=None)\r\n\r\n        def test_temp(tmp_path_factory):\r\n            for _ in range(1000):\r\n    >           tmp_path_factory.mktemp(\"temp\")\r\n\r\n    test_temp.py:3:\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    ..\\..\\Programs\\Miniconda3-64\\envs\\pytest-garbage\\lib\\site-packages\\_pytest\\tmpdir.py:71: in mktemp\r\n        basename = self._ensure_relative_to_basetemp(basename)\r\n    ..\\..\\Programs\\Miniconda3-64\\envs\\pytest-garbage\\lib\\site-packages\\_pytest\\tmpdir.py:50: in _ensure_relative_to_basetemp\r\n        if (self.getbasetemp() / basename).resolve().parent != self.getbasetemp():\r\n    ..\\..\\Programs\\Miniconda3-64\\envs\\pytest-garbage\\lib\\site-packages\\_pytest\\tmpdir.py:98: in getbasetemp\r\n        prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\r\n    ..\\..\\Programs\\Miniconda3-64\\envs\\pytest-garbage\\lib\\site-packages\\_pytest\\pathlib.py:344: in make_numbered_dir_with_cleanup\r\n        consider_lock_dead_if_created_before=consider_lock_dead_if_created_before,\r\n    ..\\..\\Programs\\Miniconda3-64\\envs\\pytest-garbage\\lib\\site-packages\\_pytest\\pathlib.py:323: in cleanup_numbered_dir\r\n        try_cleanup(path, consider_lock_dead_if_created_before)\r\n    ..\\..\\Programs\\Miniconda3-64\\envs\\pytest-garbage\\lib\\site-packages\\_pytest\\pathlib.py:300: in try_cleanup\r\n        if ensure_deletable(path, consider_lock_dead_if_created_before):\r\n    ..\\..\\Programs\\Miniconda3-64\\envs\\pytest-garbage\\lib\\site-packages\\_pytest\\pathlib.py:284: in ensure_deletable\r\n        if not lock.exists():\r\n    ..\\..\\Programs\\Miniconda3-64\\envs\\pytest-garbage\\lib\\pathlib.py:1356: in exists\r\n        self.stat()\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n    self = WindowsPath('C:/Users/stan.west/AppData/Local/Temp/pytest-of-stan.west/garbage-f1c50674-fd35-4f5b-b6c5-1ad95ba7ffa7/.lock')\r\n\r\n        def stat(self):\r\n            \"\"\"\r\n            Return the result of the stat() system call on this path, like\r\n            os.stat() does.\r\n            \"\"\"\r\n    >       return self._accessor.stat(self)\r\n    E       PermissionError: [WinError 5] Access is denied: 'C:\\\\Users\\\\stan.west\\\\AppData\\\\Local\\\\Temp\\\\pytest-of-stan.west\\\\garbage-f1c50674-fd35-4f5b-b6c5-1ad95ba7ffa7\\\\.lock'\r\n\r\n    ..\\..\\Programs\\Miniconda3-64\\envs\\pytest-garbage\\lib\\pathlib.py:1178: PermissionError\r\n    =========================== short test summary info ===========================\r\n    FAILED test_temp.py::test_temp - PermissionError: [WinError 5] Access is deni...\r\n\r\n    ============================== 1 failed in 0.83s ==============================\r\n\r\nIt seems that sometimes the operating system continued to actually delete the files and directories inside an old directory even after the `cleanup_numbered_dir` function (below) completed the call in its first `for` statement to `try_cleanup`.  Then, the second `for` statement found that lingering directory, which `try_cleanup` renamed to the form `garbage-*`.  While `try_cleanup` was attempting again to delete its contents, the operating system finished actually deleting them, and the exception occurred.\r\n\r\n    def cleanup_numbered_dir(\r\n        root: Path, prefix: str, keep: int, consider_lock_dead_if_created_before: float\r\n    ) -> None:\r\n        \"\"\"cleanup for lock driven numbered directories\"\"\"\r\n        for path in cleanup_candidates(root, prefix, keep):\r\n            try_cleanup(path, consider_lock_dead_if_created_before)\r\n        for path in root.glob(\"garbage-*\"):\r\n            try_cleanup(path, consider_lock_dead_if_created_before)\r\n\r\nI tested simply reversing the two `for` statements, so that *pytest* cleans old `garbage-*` directories before numbered directories, and that appeared to prevent the exception in my testing.\r\n\r\nThe operating system is Windows 10.0.17134 Build 17134, the file system is NTFS on a solid-state drive, I'm using a *conda* environment, and `pip list` produces:\r\n\r\n    Package            Version\r\n    ------------------ -------------------\r\n    atomicwrites       1.4.0\r\n    attrs              19.3.0\r\n    certifi            2020.6.20\r\n    colorama           0.4.3\r\n    importlib-metadata 1.7.0\r\n    more-itertools     8.4.0\r\n    packaging          20.4\r\n    pip                20.1.1\r\n    pluggy             0.13.1\r\n    py                 1.9.0\r\n    pyparsing          2.4.7\r\n    pytest             5.4.3\r\n    setuptools         47.3.1.post20200622\r\n    six                1.15.0\r\n    wcwidth            0.2.5\r\n    wheel              0.34.2\r\n    wincertstore       0.2\r\n    zipp               3.1.0\r\n\r\nI also encountered the same exception using *pytest* version 6.0.0rc1, although the session output differs because *pytest* defers the clean-up until exit:\r\n\r\n    ============================= test session starts =============================\r\n    platform win32 -- Python 3.7.7, pytest-6.0.0rc1, py-1.9.0, pluggy-0.13.1\r\n    rootdir: C:\\Users\\stan.west\\Desktop\\pytest-garbage\r\n    collected 1 item\r\n\r\n    test_temp.py .                                                           [100%]\r\n\r\n    ============================== 1 passed in 2.67s ==============================\r\n    Error in atexit._run_exitfuncs:\r\n    Traceback (most recent call last):\r\n    File \"c:\\users\\stan.west\\programs\\miniconda3-64\\envs\\pytest-garbage\\lib\\pathlib.py\", line 1356, in exists\r\n        self.stat()\r\n    File \"c:\\users\\stan.west\\programs\\miniconda3-64\\envs\\pytest-garbage\\lib\\pathlib.py\", line 1178, in stat\r\n        return self._accessor.stat(self)\r\n    PermissionError: [WinError 5] Access is denied: 'C:\\\\Users\\\\stan.west\\\\AppData\\\\Local\\\\Temp\\\\pytest-of-stan.west\\\\garbage-02f6a08e-f05a-46d7-bd84-4a35962efb26\\\\.lock'\r\n\r\nIs swapping the `for` statements within `cleanup_numbered_dir` a good way to resolve this issue?\n",
  "hints_text": "Hi @stanwest,\r\n\r\nThe order should not really matter in that situation, what might be happening is that by first cleaning up the `garbage-*` directories, this is giving more time for whatever is holding the locked directories to release that lock (say a background process), and then it might appear to solve the problem.\r\n\r\nI believe the proper solution is to explicitly catch errors around that `exists` call, and assume it is locked in case of any errors. ",
  "created_at": "2020-07-14T23:09:45Z",
  "version": "6.0",
  "FAIL_TO_PASS": "[\"testing/test_pathlib.py::test_suppress_error_removing_lock\"]",
  "PASS_TO_PASS": "[\"testing/test_pathlib.py::TestFNMatcherPort::test_matching[pathlib-*.py-foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[pathlib-*.py-bar/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[pathlib-test_*.py-foo/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[pathlib-tests/*.py-tests/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[pathlib-/c/*.py-/c/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[pathlib-/c/foo/*.py-/c/foo/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[pathlib-tests/**/test*.py-tests/foo/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[pathlib-tests/**/doc/test*.py-tests/foo/bar/doc/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[pathlib-tests/**/doc/**/test*.py-tests/foo/doc/bar/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[py.path-*.py-foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[py.path-*.py-bar/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[py.path-test_*.py-foo/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[py.path-tests/*.py-tests/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[py.path-/c/*.py-/c/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[py.path-/c/foo/*.py-/c/foo/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[py.path-tests/**/test*.py-tests/foo/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[py.path-tests/**/doc/test*.py-tests/foo/bar/doc/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[py.path-tests/**/doc/**/test*.py-tests/foo/doc/bar/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching_abspath[pathlib]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching_abspath[py.path]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[pathlib-*.py-foo.pyc]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[pathlib-*.py-foo/foo.pyc]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[pathlib-tests/*.py-foo/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[pathlib-/c/*.py-/d/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[pathlib-/c/foo/*.py-/d/foo/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[pathlib-tests/**/test*.py-tests/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[pathlib-tests/**/test*.py-foo/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[pathlib-tests/**/doc/test*.py-tests/foo/bar/doc/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[pathlib-tests/**/doc/test*.py-tests/foo/bar/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[py.path-*.py-foo.pyc]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[py.path-*.py-foo/foo.pyc]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[py.path-tests/*.py-foo/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[py.path-/c/*.py-/d/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[py.path-/c/foo/*.py-/d/foo/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[py.path-tests/**/test*.py-tests/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[py.path-tests/**/test*.py-foo/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[py.path-tests/**/doc/test*.py-tests/foo/bar/doc/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[py.path-tests/**/doc/test*.py-tests/foo/bar/test_foo.py]\", \"testing/test_pathlib.py::TestImportPath::test_smoke_test\", \"testing/test_pathlib.py::TestImportPath::test_renamed_dir_creates_mismatch\", \"testing/test_pathlib.py::TestImportPath::test_messy_name\", \"testing/test_pathlib.py::TestImportPath::test_dir\", \"testing/test_pathlib.py::TestImportPath::test_a\", \"testing/test_pathlib.py::TestImportPath::test_b\", \"testing/test_pathlib.py::TestImportPath::test_c\", \"testing/test_pathlib.py::TestImportPath::test_d\", \"testing/test_pathlib.py::TestImportPath::test_import_after\", \"testing/test_pathlib.py::TestImportPath::test_check_filepath_consistency\", \"testing/test_pathlib.py::TestImportPath::test_issue131_on__init__\", \"testing/test_pathlib.py::TestImportPath::test_ensuresyspath_append\", \"testing/test_pathlib.py::TestImportPath::test_invalid_path\", \"testing/test_pathlib.py::TestImportPath::test_importmode_importlib\", \"testing/test_pathlib.py::TestImportPath::test_importmode_twice_is_different_module\", \"testing/test_pathlib.py::TestImportPath::test_no_meta_path_found\", \"testing/test_pathlib.py::test_resolve_package_path\", \"testing/test_pathlib.py::test_package_unimportable\", \"testing/test_pathlib.py::test_access_denied_during_cleanup\", \"testing/test_pathlib.py::test_long_path_during_cleanup\", \"testing/test_pathlib.py::test_get_extended_length_path_str\"]",
  "environment_setup_commit": "634cde9506eb1f48dec3ec77974ee8dc952207c6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.937910",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}