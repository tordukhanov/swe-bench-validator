{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-9646",
  "base_commit": "6aaa017b1e81f6eccc48ee4f6b52d25c49747554",
  "patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -656,20 +656,6 @@ class Item(Node):\n \n     nextitem = None\n \n-    def __init_subclass__(cls) -> None:\n-        problems = \", \".join(\n-            base.__name__ for base in cls.__bases__ if issubclass(base, Collector)\n-        )\n-        if problems:\n-            warnings.warn(\n-                f\"{cls.__name__} is an Item subclass and should not be a collector, \"\n-                f\"however its bases {problems} are collectors.\\n\"\n-                \"Please split the Collectors and the Item into separate node types.\\n\"\n-                \"Pytest Doc example: https://docs.pytest.org/en/latest/example/nonpython.html\\n\"\n-                \"example pull request on a plugin: https://github.com/asmeurer/pytest-flakes/pull/40/\",\n-                PytestWarning,\n-            )\n-\n     def __init__(\n         self,\n         name,\n@@ -697,6 +683,37 @@ def __init__(\n         #: for this test.\n         self.user_properties: List[Tuple[str, object]] = []\n \n+        self._check_item_and_collector_diamond_inheritance()\n+\n+    def _check_item_and_collector_diamond_inheritance(self) -> None:\n+        \"\"\"\n+        Check if the current type inherits from both File and Collector\n+        at the same time, emitting a warning accordingly (#8447).\n+        \"\"\"\n+        cls = type(self)\n+\n+        # We inject an attribute in the type to avoid issuing this warning\n+        # for the same class more than once, which is not helpful.\n+        # It is a hack, but was deemed acceptable in order to avoid\n+        # flooding the user in the common case.\n+        attr_name = \"_pytest_diamond_inheritance_warning_shown\"\n+        if getattr(cls, attr_name, False):\n+            return\n+        setattr(cls, attr_name, True)\n+\n+        problems = \", \".join(\n+            base.__name__ for base in cls.__bases__ if issubclass(base, Collector)\n+        )\n+        if problems:\n+            warnings.warn(\n+                f\"{cls.__name__} is an Item subclass and should not be a collector, \"\n+                f\"however its bases {problems} are collectors.\\n\"\n+                \"Please split the Collectors and the Item into separate node types.\\n\"\n+                \"Pytest Doc example: https://docs.pytest.org/en/latest/example/nonpython.html\\n\"\n+                \"example pull request on a plugin: https://github.com/asmeurer/pytest-flakes/pull/40/\",\n+                PytestWarning,\n+            )\n+\n     def runtest(self) -> None:\n         \"\"\"Run the test case for this item.\n \n",
  "test_patch": "diff --git a/testing/test_nodes.py b/testing/test_nodes.py\n--- a/testing/test_nodes.py\n+++ b/testing/test_nodes.py\n@@ -1,3 +1,5 @@\n+import re\n+import warnings\n from pathlib import Path\n from typing import cast\n from typing import List\n@@ -58,30 +60,31 @@ def test_subclassing_both_item_and_collector_deprecated(\n     request, tmp_path: Path\n ) -> None:\n     \"\"\"\n-    Verifies we warn on diamond inheritance\n-    as well as correctly managing legacy inheritance ctors with missing args\n-    as found in plugins\n+    Verifies we warn on diamond inheritance as well as correctly managing legacy\n+    inheritance constructors with missing args as found in plugins.\n     \"\"\"\n \n-    with pytest.warns(\n-        PytestWarning,\n-        match=(\n-            \"(?m)SoWrong is an Item subclass and should not be a collector, however its bases File are collectors.\\n\"\n-            \"Please split the Collectors and the Item into separate node types.\\n.*\"\n-        ),\n-    ):\n+    # We do not expect any warnings messages to issued during class definition.\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\")\n \n         class SoWrong(nodes.Item, nodes.File):\n             def __init__(self, fspath, parent):\n                 \"\"\"Legacy ctor with legacy call # don't wana see\"\"\"\n                 super().__init__(fspath, parent)\n \n-    with pytest.warns(\n-        PytestWarning, match=\".*SoWrong.* not using a cooperative constructor.*\"\n-    ):\n+    with pytest.warns(PytestWarning) as rec:\n         SoWrong.from_parent(\n             request.session, fspath=legacy_path(tmp_path / \"broken.txt\")\n         )\n+    messages = [str(x.message) for x in rec]\n+    assert any(\n+        re.search(\".*SoWrong.* not using a cooperative constructor.*\", x)\n+        for x in messages\n+    )\n+    assert any(\n+        re.search(\"(?m)SoWrong .* should not be a collector\", x) for x in messages\n+    )\n \n \n @pytest.mark.parametrize(\n",
  "problem_statement": "Pytest 7 not ignoring warnings as instructed on `pytest.ini`\n<!--\r\nThanks for submitting an issue!\r\n\r\nQuick check-list while reporting bugs:\r\n-->\r\n\r\n- [x] a detailed description of the bug or problem you are having\r\n- [x] output of `pip list` from the virtual environment you are using\r\n- [x] pytest and operating system versions\r\n- [x] minimal example if possible\r\n\r\n## Problem\r\n\r\nHello, with the latest version of Pytest a series of new issues has started to pop-up to warn users (and plugin maintainers) about future changes on how Pytest will work. This is a great work done by Pytest maintainers, and pushes the community towards a better future.\r\n\r\nHowever, after informing plugin maintainers about the upcoming changes, I would like to silence these warnings so I can focus in fixing the errors detected on the tests (otherwise the output is too big and difficult to scroll through to find useful information).\r\n\r\nTo solve this, I naturally tried to modify my `pytest.ini` file with a `ignore` filter for these warnings, however Pytest is still printing some of them even after I added the warning filters.\r\n\r\n### Example for reproduction\r\n\r\nThe following script can be used to reproduce the problem:\r\n\r\n```bash\r\ngit clone https://github.com/pypa/sampleproject.git\r\ncd sampleproject\r\nsed -i '/^\\s*pytest$/a \\    pytest-flake8' tox.ini\r\nsed -i '/^\\s*pytest$/a \\    pytest-black' tox.ini\r\nsed -i 's/py.test tests/py.test tests --black --flake8/' tox.ini\r\ncat << _STR > pytest.ini\r\n[pytest]\r\nfilterwarnings=\r\n    # Fail on warnings\r\n    error\r\n\r\n    # tholo/pytest-flake8#83\r\n    # shopkeep/pytest-black#55\r\n    # dbader/pytest-mypy#131\r\n    ignore:<class '.*'> is not using a cooperative constructor:pytest.PytestDeprecationWarning\r\n    ignore:The \\(fspath. py.path.local\\) argument to .* is deprecated.:pytest.PytestDeprecationWarning\r\n    ignore:.* is an Item subclass and should not be a collector.*:pytest.PytestWarning\r\n_STR\r\ntox -e py38\r\n```\r\n\r\nRelevant output:\r\n\r\n```\r\n(...)\r\npy38 run-test: commands[3] | py.test tests --black --flake8\r\n/tmp/sampleproject/.tox/py38/lib/python3.8/site-packages/_pytest/nodes.py:664: PytestWarning: BlackItem is an Item subclass and should not be a collector, however its bases File are collectors.\r\nPlease split the Collectors and the Item into separate node types.\r\nPytest Doc example: https://docs.pytest.org/en/latest/example/nonpython.html\r\nexample pull request on a plugin: https://github.com/asmeurer/pytest-flakes/pull/40/\r\n  warnings.warn(\r\n/tmp/sampleproject/.tox/py38/lib/python3.8/site-packages/_pytest/nodes.py:664: PytestWarning: Flake8Item is an Item subclass and should not be a collector, however its bases File are collectors.\r\nPlease split the Collectors and the Item into separate node types.\r\nPytest Doc example: https://docs.pytest.org/en/latest/example/nonpython.html\r\nexample pull request on a plugin: https://github.com/asmeurer/pytest-flakes/pull/40/\r\n  warnings.warn(\r\n(...)\r\n```\r\n\r\n(The warnings seem to be shown only once per worker per plugin, but considering you have 32 workers with `pytest-xdist` and 4 plugins that haven't adapted to the changes yet, the output can be very verbose and difficult to navigate)\r\n\r\n### Expected behaviour\r\n\r\nPytest should not print the warnings:\r\n- `Flake8Item is an Item subclass and should not be a collector...`\r\n- `BlackItem is an Item subclass and should not be a collector...`\r\n\r\n### Environment information\r\n\r\n```bash\r\n$ .tox/py38/bin/python -V\r\nPython 3.8.10\r\n\r\n\r\n$ .tox/py38/bin/pip list\r\nPackage           Version\r\n----------------- -------\r\nattrs             21.4.0\r\nblack             22.1.0\r\nbuild             0.7.0\r\ncheck-manifest    0.47\r\nclick             8.0.3\r\nflake8            4.0.1\r\niniconfig         1.1.1\r\nmccabe            0.6.1\r\nmypy-extensions   0.4.3\r\npackaging         21.3\r\npathspec          0.9.0\r\npep517            0.12.0\r\npeppercorn        0.6\r\npip               21.3.1\r\nplatformdirs      2.4.1\r\npluggy            1.0.0\r\npy                1.11.0\r\npycodestyle       2.8.0\r\npyflakes          2.4.0\r\npyparsing         3.0.7\r\npytest            7.0.0\r\npytest-black      0.3.12\r\npytest-flake8     1.0.7\r\nsampleproject     2.0.0\r\nsetuptools        60.5.0\r\ntoml              0.10.2\r\ntomli             2.0.0\r\ntyping_extensions 4.0.1\r\nwheel             0.37.1\r\n\r\n\r\n$ lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 20.04.3 LTS\r\nRelease:        20.04\r\nCodename:       focal\r\n\r\n\r\n$ tox --version\r\n3.24.4 imported from ~/.local/lib/python3.8/site-packages/tox/__init__.py\r\n```\n",
  "hints_text": "",
  "created_at": "2022-02-08T13:38:22Z",
  "version": "7.1",
  "FAIL_TO_PASS": "[\"testing/test_nodes.py::test_subclassing_both_item_and_collector_deprecated\"]",
  "PASS_TO_PASS": "[\"testing/test_nodes.py::test_iterparentnodeids[-expected0]\", \"testing/test_nodes.py::test_iterparentnodeids[a-expected1]\", \"testing/test_nodes.py::test_iterparentnodeids[aa/b-expected2]\", \"testing/test_nodes.py::test_iterparentnodeids[a/b/c-expected3]\", \"testing/test_nodes.py::test_iterparentnodeids[a/bbb/c::D-expected4]\", \"testing/test_nodes.py::test_iterparentnodeids[a/b/c::D::eee-expected5]\", \"testing/test_nodes.py::test_iterparentnodeids[::xx-expected6]\", \"testing/test_nodes.py::test_iterparentnodeids[a/b/c::D/d::e-expected7]\", \"testing/test_nodes.py::test_iterparentnodeids[a/b::D:e:f::g-expected8]\", \"testing/test_nodes.py::test_iterparentnodeids[a/b::c/d::e[/test]-expected9]\", \"testing/test_nodes.py::test_node_from_parent_disallowed_arguments\", \"testing/test_nodes.py::test_node_direct_construction_deprecated\", \"testing/test_nodes.py::test__check_initialpaths_for_relpath\", \"testing/test_nodes.py::test_node_warn_is_no_longer_only_pytest_warnings[DeprecationWarning-deprecated]\", \"testing/test_nodes.py::test_node_warn_is_no_longer_only_pytest_warnings[PytestWarning-pytest]\", \"testing/test_nodes.py::test_node_warning_enforces_warning_types\", \"testing/test_nodes.py::test_failure_with_changed_cwd\"]",
  "environment_setup_commit": "4a8f8ada431974f2837260af3ed36299fd382814",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.947327",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}