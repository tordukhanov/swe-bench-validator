{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-20518",
  "base_commit": "1d129737743d7a1c000367c363cbb890183450bc",
  "patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -690,6 +690,9 @@ def set_sketch_params(self, scale=None, length=None, randomness=None):\n             The scale factor by which the length is shrunken or\n             expanded (default 16.0)\n \n+            The PGF backend uses this argument as an RNG seed and not as\n+            described above. Using the same seed yields the same random shape.\n+\n             .. ACCEPTS: (scale: float, length: float, randomness: float)\n         \"\"\"\n         if scale is None:\ndiff --git a/lib/matplotlib/backends/backend_pgf.py b/lib/matplotlib/backends/backend_pgf.py\n--- a/lib/matplotlib/backends/backend_pgf.py\n+++ b/lib/matplotlib/backends/backend_pgf.py\n@@ -600,6 +600,30 @@ def _print_pgf_path(self, gc, path, transform, rgbFace=None):\n                         r\"{\\pgfqpoint{%fin}{%fin}}\"\n                         % coords)\n \n+        # apply pgf decorators\n+        sketch_params = gc.get_sketch_params() if gc else None\n+        if sketch_params is not None:\n+            # Only \"length\" directly maps to \"segment length\" in PGF's API.\n+            # PGF uses \"amplitude\" to pass the combined deviation in both x-\n+            # and y-direction, while matplotlib only varies the length of the\n+            # wiggle along the line (\"randomness\" and \"length\" parameters)\n+            # and has a separate \"scale\" argument for the amplitude.\n+            # -> Use \"randomness\" as PRNG seed to allow the user to force the\n+            # same shape on multiple sketched lines\n+            scale, length, randomness = sketch_params\n+            if scale is not None:\n+                # make matplotlib and PGF rendering visually similar\n+                length *= 0.5\n+                scale *= 2\n+                # PGF guarantees that repeated loading is a no-op\n+                writeln(self.fh, r\"\\usepgfmodule{decorations}\")\n+                writeln(self.fh, r\"\\usepgflibrary{decorations.pathmorphing}\")\n+                writeln(self.fh, r\"\\pgfkeys{/pgf/decoration/.cd, \"\n+                        f\"segment length = {(length * f):f}in, \"\n+                        f\"amplitude = {(scale * f):f}in}}\")\n+                writeln(self.fh, f\"\\\\pgfmathsetseed{{{int(randomness)}}}\")\n+                writeln(self.fh, r\"\\pgfdecoratecurrentpath{random steps}\")\n+\n     def _pgf_path_draw(self, stroke=True, fill=False):\n         actions = []\n         if stroke:\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_pgf.py b/lib/matplotlib/tests/test_backend_pgf.py\n--- a/lib/matplotlib/tests/test_backend_pgf.py\n+++ b/lib/matplotlib/tests/test_backend_pgf.py\n@@ -337,3 +337,30 @@ def test_minus_signs_with_tex(fig_test, fig_ref, texsystem):\n     mpl.rcParams[\"pgf.texsystem\"] = texsystem\n     fig_test.text(.5, .5, \"$-1$\")\n     fig_ref.text(.5, .5, \"$\\N{MINUS SIGN}1$\")\n+\n+\n+@pytest.mark.backend(\"pgf\")\n+def test_sketch_params():\n+    fig, ax = plt.subplots(figsize=(3, 3))\n+    ax.set_xticks([])\n+    ax.set_yticks([])\n+    ax.set_frame_on(False)\n+    handle, = ax.plot([0, 1])\n+    handle.set_sketch_params(scale=5, length=30, randomness=42)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='pgf')\n+        buf = fd.getvalue().decode()\n+\n+    baseline = r\"\"\"\\pgfpathmoveto{\\pgfqpoint{0.375000in}{0.300000in}}%\n+\\pgfpathlineto{\\pgfqpoint{2.700000in}{2.700000in}}%\n+\\usepgfmodule{decorations}%\n+\\usepgflibrary{decorations.pathmorphing}%\n+\\pgfkeys{/pgf/decoration/.cd, \"\"\" \\\n+    r\"\"\"segment length = 0.150000in, amplitude = 0.100000in}%\n+\\pgfmathsetseed{42}%\n+\\pgfdecoratecurrentpath{random steps}%\n+\\pgfusepath{stroke}%\"\"\"\n+    # \\pgfdecoratecurrentpath must be after the path definition and before the\n+    # path is used (\\pgfusepath)\n+    assert baseline in buf\n",
  "problem_statement": "Sketch params ignored when using PGF backend\n### Bug report\r\n\r\n**Bug summary**\r\nCalls to `set_sketch_params()` are ignored by the PGF backend and do not have any influence in the resulting pgf or pdf file.\r\n\r\n**Code for reproduction**\r\n\r\n```python\r\n#!/usr/bin/env python3\r\nimport matplotlib as mpl\r\nimport matplotlib.pyplot as plt\r\nmpl.use(\"pgf\")\r\n\r\nmpl.rcParams.update({\r\n    'font.family': 'serif',\r\n    'text.usetex': True,\r\n    'pgf.rcfonts': False,\r\n    'pgf.preamble': [ \r\n            # enable this when using PGF backend with pdf output:\r\n            #r\"\\usepackage{pgf}\",\r\n            #r\"\\usepgfmodule{decorations}\",\r\n            #r\"\\usepgflibrary{decorations.pathmorphing}\",\r\n        ],\r\n})\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(111)\r\nax.plot(range(10))\r\n\r\nax.spines[\"bottom\"].set_sketch_params(scale=5, length=10, randomness=42)\r\n\r\nfig.savefig(f\"foo.pgf\")\r\n#fig.savefig(f\"foo.pdf\")\r\n```\r\n\r\n**Actual outcome**\r\n![grafik](https://user-images.githubusercontent.com/37397269/123399005-6ae9eb80-d5a4-11eb-9da8-c05b9d0efa96.png)\r\n\r\n**Expected outcome**\r\n![grafik](https://user-images.githubusercontent.com/37397269/123399084-7e955200-d5a4-11eb-976e-03ae3d5b2275.png)\r\n\r\n\r\n**Matplotlib version**\r\n<!--Please specify your platform and versions of the relevant libraries you are using:-->\r\n  * Matplotlib version: '3.0.2'\r\n\r\nI am working on a fix for this.\n",
  "hints_text": "",
  "created_at": "2021-06-25T09:59:27Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_backend_pgf.py::test_sketch_params\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_backend_pgf.py::test_common_texification[quad_sum:\", \"lib/matplotlib/tests/test_backend_pgf.py::test_common_texification[no\", \"lib/matplotlib/tests/test_backend_pgf.py::test_common_texification[with_underscores-with\\\\\\\\_underscores]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_common_texification[%\", \"lib/matplotlib/tests/test_backend_pgf.py::test_common_texification[^not-\\\\\\\\^not]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_xelatex[pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdflatex[pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pathclip\", \"lib/matplotlib/tests/test_backend_pgf.py::test_mixedmode[pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_bbox_inches\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages[lualatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages[pdflatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages[xelatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages_metadata_check[lualatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages_metadata_check[pdflatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages_metadata_check[xelatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_tex_restart_after_error\", \"lib/matplotlib/tests/test_backend_pgf.py::test_bbox_inches_tight\", \"lib/matplotlib/tests/test_backend_pgf.py::test_png\", \"lib/matplotlib/tests/test_backend_pgf.py::test_unknown_font\", \"lib/matplotlib/tests/test_backend_pgf.py::test_minus_signs_with_tex[pdflatex-pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_minus_signs_with_tex[xelatex-pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_minus_signs_with_tex[lualatex-pdf]\"]",
  "environment_setup_commit": "f93c0a3dcb82feed0262d758626c90d4002685f3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.789803",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}