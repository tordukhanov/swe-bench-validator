{
  "repo": "django/django",
  "instance_id": "django__django-16136",
  "base_commit": "19e6efa50b603af325e7f62058364f278596758f",
  "patch": "diff --git a/django/views/generic/base.py b/django/views/generic/base.py\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -148,7 +148,16 @@ def http_method_not_allowed(self, request, *args, **kwargs):\n             request.path,\n             extra={\"status_code\": 405, \"request\": request},\n         )\n-        return HttpResponseNotAllowed(self._allowed_methods())\n+        response = HttpResponseNotAllowed(self._allowed_methods())\n+\n+        if self.view_is_async:\n+\n+            async def func():\n+                return response\n+\n+            return func()\n+        else:\n+            return response\n \n     def options(self, request, *args, **kwargs):\n         \"\"\"Handle responding to requests for the OPTIONS HTTP verb.\"\"\"\n",
  "test_patch": "diff --git a/tests/async/tests.py b/tests/async/tests.py\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -6,8 +6,8 @@\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory, SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n@@ -119,6 +119,25 @@ def test_options_handler_responds_correctly(self):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n+    def test_http_method_not_allowed_responds_correctly(self):\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n+\n     def test_base_view_class_is_sync(self):\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n",
  "problem_statement": "object HttpResponseNotAllowed can't be used in 'await' expression\nDescription\n\t\nWhen defining a simple View subclass with only an async \"post\" method, GET requests to this view cause the following exception:\n[29/Sep/2022 07:50:48] \"GET /demo HTTP/1.1\" 500 81134\nMethod Not Allowed (GET): /demo\nInternal Server Error: /demo\nTraceback (most recent call last):\n File \"/home/alorence/.cache/pypoetry/virtualenvs/dj-bug-demo-FlhD0jMY-py3.10/lib/python3.10/site-packages/django/core/handlers/exception.py\", line 55, in inner\n\tresponse = get_response(request)\n File \"/home/alorence/.cache/pypoetry/virtualenvs/dj-bug-demo-FlhD0jMY-py3.10/lib/python3.10/site-packages/django/core/handlers/base.py\", line 197, in _get_response\n\tresponse = wrapped_callback(request, *callback_args, **callback_kwargs)\n File \"/home/alorence/.cache/pypoetry/virtualenvs/dj-bug-demo-FlhD0jMY-py3.10/lib/python3.10/site-packages/asgiref/sync.py\", line 218, in __call__\n\treturn call_result.result()\n File \"/usr/lib/python3.10/concurrent/futures/_base.py\", line 451, in result\n\treturn self.__get_result()\n File \"/usr/lib/python3.10/concurrent/futures/_base.py\", line 403, in __get_result\n\traise self._exception\n File \"/home/alorence/.cache/pypoetry/virtualenvs/dj-bug-demo-FlhD0jMY-py3.10/lib/python3.10/site-packages/asgiref/sync.py\", line 284, in main_wrap\n\tresult = await self.awaitable(*args, **kwargs)\nTypeError: object HttpResponseNotAllowed can't be used in 'await' expression\nThis can be easily reproduced with an empty project (no external dependencies) started with Django 4.1.1 and python 3.10.6.\nBasic view to reproduce the bug:\nfrom django.views import View\nfrom django.http import HttpResponse\nclass Demo(View):\n\t\"\"\"This basic view supports only POST requests\"\"\"\n\tasync def post(self, request):\n\t\treturn HttpResponse(\"ok\")\nURL pattern to access it:\nfrom django.urls import path\nfrom views import Demo\nurlpatterns = [\n\tpath(\"demo\", Demo.as_view()),\n]\nStart the local dev server (manage.py runserver) and open ‚Äãhttp://127.0.0.1:8000/demo in the browser.\nServer crash with 500 error with the given traceback.\n",
  "hints_text": "Yes, looks right. http_method_not_allowed() needs to be adjusted to handle both sync and async cases in the same way as options() Do you have capacity to do a patch quickly? (Otherwise I'll take it on.) Thanks for the report! Regression in 9ffd4eae2ce7a7100c98f681e2b6ab818df384a4.\nThank you very much for your confirmation. I've never contributed to Django codebase, but the fix for this issue seems obvious. I think this is a good occasion to contribute for the first tme. I will follow contributions guide and try to provide a regression test and a patch for that issue.\nGreat, welcome aboard Antoine! I pushed a draft here ‚Äãhttps://github.com/django/django/compare/main...carltongibson:django:4.1.2/ticket-34062 that you can use for inspiration. If you open a PR on GitHub, I'm happy to advise. Normally there's no rush here, but we have releases due for the beginning of next week, and as a regression this needs to go in. As such, if you hit any barriers please reach out so I can help out. Thanks üèÖ\nWow, your draft is almost exactly what I already wrote in my local fork. I ended with the exact same modification in View.http_method_not_allowed() (to the letter). I also written the almost same test in \"async/tests\" (I didn't use RequestFactory, then your version is better). I was currently looking into \"asgi/tests\" to check if I can add a full request-response lifecycle test in such case, but this appear to be more challenging. Do you think this is feasible / required ?\nIt's feasible, but I don't think it's required. (We already test the full dispatch in many places elsewhere. What we're looking for here is the http_method_not_allowed() is correctly adapted when the view is async (i.e. has async handlers). Make sense?\nThat totally makes sense. What is the next step now ? Your draft is perfect, more complete than mine (I didn't write into release notes). I think you can merge your branch django:4.1.2/ticket-34062.",
  "created_at": "2022-09-29T11:47:50Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_http_method_not_allowed_responds_correctly (async.tests.ViewTests)\", \"test_mixed_views_raise_error (async.tests.ViewTests)\"]",
  "PASS_TO_PASS": "[\"View and by extension any subclasses that don't define handlers are\", \"test_options_handler_responds_correctly (async.tests.ViewTests)\", \"test_views_are_correctly_marked (async.tests.ViewTests)\", \"test_caches_local (async.tests.CacheTest)\", \"test_async_unsafe (async.tests.AsyncUnsafeTest)\", \"Utility class which turns an awaitable that only works on the thread with\", \"test_get_async_connection (async.tests.DatabaseConnectionTest)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.749670",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}