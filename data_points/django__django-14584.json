{
  "repo": "django/django",
  "instance_id": "django__django-14584",
  "base_commit": "313c3d1aa14d80922003f841c257ec4e153f8653",
  "patch": "diff --git a/django/db/backends/utils.py b/django/db/backends/utils.py\n--- a/django/db/backends/utils.py\n+++ b/django/db/backends/utils.py\n@@ -121,11 +121,12 @@ def debug_sql(self, sql=None, params=None, use_last_executed_query=False, many=F\n                 'time': '%.3f' % duration,\n             })\n             logger.debug(\n-                '(%.3f) %s; args=%s',\n+                '(%.3f) %s; args=%s; alias=%s',\n                 duration,\n                 sql,\n                 params,\n-                extra={'duration': duration, 'sql': sql, 'params': params},\n+                self.db.alias,\n+                extra={'duration': duration, 'sql': sql, 'params': params, 'alias': self.db.alias},\n             )\n \n \n",
  "test_patch": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -3,6 +3,7 @@\n import threading\n import unittest\n import warnings\n+from unittest import mock\n \n from django.core.management.color import no_style\n from django.db import (\n@@ -491,6 +492,23 @@ def test_queries_limit(self):\n             BaseDatabaseWrapper.queries_limit = old_queries_limit\n             new_connection.close()\n \n+    @mock.patch('django.db.backends.utils.logger')\n+    @override_settings(DEBUG=True)\n+    def test_queries_logger(self, mocked_logger):\n+        sql = 'SELECT 1' + connection.features.bare_select_suffix\n+        with connection.cursor() as cursor:\n+            cursor.execute(sql)\n+        params, kwargs = mocked_logger.debug.call_args\n+        self.assertIn('; alias=%s', params[0])\n+        self.assertEqual(params[2], sql)\n+        self.assertEqual(params[3], None)\n+        self.assertEqual(params[4], connection.alias)\n+        self.assertEqual(\n+            list(kwargs['extra']),\n+            ['duration', 'sql', 'params', 'alias'],\n+        )\n+        self.assertEqual(tuple(kwargs['extra'].values()), params[1:])\n+\n     def test_timezone_none_use_tz_false(self):\n         connection.ensure_connection()\n         with self.settings(TIME_ZONE=None, USE_TZ=False):\n",
  "problem_statement": "django.db.backends logging output should include the database alias\nDescription\n\t \n\t\t(last modified by David Winterbottom)\n\t \nAs this is essential information when working with database routing. \nPR: ​https://github.com/django/django/pull/11994\n",
  "hints_text": "​PR This sounds perfectly reasonable to me and is a trivial change.\nCarlosMirdeSouza, please check ​patch-review-checklist before you will mark a ticked as \"Ready for checkin\", few changes are missing e.g. versionchanged admonitions.\nPatch: ​https://github.com/django/django/pull/12265 @felixxm",
  "created_at": "2021-07-02T10:01:12Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_queries_logger (backends.tests.BackendTestCase)\"]",
  "PASS_TO_PASS": "[\"test_parameter_escaping (backends.tests.EscapingChecks)\", \"test_paramless_no_escaping (backends.tests.EscapingChecks)\", \"An executemany call with too many/not enough parameters will raise an exception (Refs #12612)\", \"test_parameter_escaping (backends.tests.EscapingChecksDebug)\", \"test_paramless_no_escaping (backends.tests.EscapingChecksDebug)\", \"Sequence names are correct when resetting generic relations (Ref #13941)\", \"test_debug_sql (backends.tests.LastExecutedQueryTest)\", \"test_last_executed_query (backends.tests.LastExecutedQueryTest)\", \"last_executed_query should not raise an exception even if no previous\", \"last_executed_query() returns a string.\", \"Test the custom ``django_date_extract method``, in particular against fields\", \"Test the custom ``django_date_trunc method``, in particular against\", \"test_can_reference_existent (backends.tests.DBConstraintTestCase)\", \"test_can_reference_non_existent (backends.tests.DBConstraintTestCase)\", \"test_many_to_many (backends.tests.DBConstraintTestCase)\", \"Test creation of model with long name and long pk name doesn't error. Ref #8901\", \"Sequence resetting as part of a flush with model with long name and\", \"An m2m save of a model with a long name and a long m2m field name\", \"A connection that is not explicitly shareable cannot be closed by\", \"The connections are different for each thread (#17258).\", \"The default connection (i.e. django.db.connection) is different for\", \"A connection can be passed from one thread to the other (#17258).\", \"test_thread_sharing_count (backends.tests.ThreadTests)\", \"Constraint checks should raise an IntegrityError when bad data is in the DB.\", \"test_check_constraints_sql_keywords (backends.tests.FkConstraintsTests)\", \"When constraint checks are disabled (using context manager), should be\", \"When constraint checks are disabled, should be able to write bad data\", \"Try to create a model instance that violates a FK constraint. If it\", \"Try to update a model instance introducing a FK constraint violation.\", \"test_cached_db_features (backends.tests.BackendTestCase)\", \"Cursors can be used as a context manager\", \"test_cursor_executemany (backends.tests.BackendTestCase)\", \"test_cursor_executemany_with_empty_params_list (backends.tests.BackendTestCase)\", \"test_cursor_executemany_with_iterator (backends.tests.BackendTestCase)\", \"test_database_operations_helper_class (backends.tests.BackendTestCase)\", \"DatabaseOperations initialization doesn't query the database.\", \"Creating an existing table returns a DatabaseError\", \"Test the documented API of connection.queries.\", \"test_timezone_none_use_tz_false (backends.tests.BackendTestCase)\", \"test_unicode_fetches (backends.tests.BackendTestCase)\", \"test_unicode_password (backends.tests.BackendTestCase)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.697284",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}