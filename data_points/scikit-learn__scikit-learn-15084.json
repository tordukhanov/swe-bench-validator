{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-15084",
  "base_commit": "5e4b2757d61563889672e395d9e92d9372d357f6",
  "patch": "diff --git a/sklearn/ensemble/_stacking.py b/sklearn/ensemble/_stacking.py\n--- a/sklearn/ensemble/_stacking.py\n+++ b/sklearn/ensemble/_stacking.py\n@@ -15,6 +15,7 @@\n from ..base import MetaEstimatorMixin\n \n from .base import _parallel_fit_estimator\n+from .base import _BaseHeterogeneousEnsemble\n \n from ..linear_model import LogisticRegression\n from ..linear_model import RidgeCV\n@@ -32,80 +33,26 @@\n from ..utils.validation import column_or_1d\n \n \n-class _BaseStacking(TransformerMixin, MetaEstimatorMixin, _BaseComposition,\n+class _BaseStacking(TransformerMixin, _BaseHeterogeneousEnsemble,\n                     metaclass=ABCMeta):\n     \"\"\"Base class for stacking method.\"\"\"\n-    _required_parameters = ['estimators']\n \n     @abstractmethod\n     def __init__(self, estimators, final_estimator=None, cv=None,\n                  stack_method='auto', n_jobs=None, verbose=0):\n-        self.estimators = estimators\n+        super().__init__(estimators=estimators)\n         self.final_estimator = final_estimator\n         self.cv = cv\n         self.stack_method = stack_method\n         self.n_jobs = n_jobs\n         self.verbose = verbose\n \n-    @abstractmethod\n-    def _validate_estimators(self):\n-        if self.estimators is None or len(self.estimators) == 0:\n-            raise ValueError(\n-                \"Invalid 'estimators' attribute, 'estimators' should be a list\"\n-                \" of (string, estimator) tuples.\"\n-            )\n-        names, estimators = zip(*self.estimators)\n-        self._validate_names(names)\n-        return names, estimators\n-\n     def _clone_final_estimator(self, default):\n         if self.final_estimator is not None:\n             self.final_estimator_ = clone(self.final_estimator)\n         else:\n             self.final_estimator_ = clone(default)\n \n-    def set_params(self, **params):\n-        \"\"\"Set the parameters for the stacking estimator.\n-\n-        Valid parameter keys can be listed with `get_params()`.\n-\n-        Parameters\n-        ----------\n-        params : keyword arguments\n-            Specific parameters using e.g.\n-            `set_params(parameter_name=new_value)`. In addition, to setting the\n-            parameters of the stacking estimator, the individual estimator of\n-            the stacking estimators can also be set, or can be removed by\n-            setting them to 'drop'.\n-\n-        Examples\n-        --------\n-        In this example, the RandomForestClassifier is removed.\n-\n-        >>> from sklearn.linear_model import LogisticRegression\n-        >>> from sklearn.ensemble import RandomForestClassifier\n-        >>> from sklearn.ensemble import VotingClassifier\n-        >>> clf1 = LogisticRegression()\n-        >>> clf2 = RandomForestClassifier()\n-        >>> eclf = StackingClassifier(estimators=[('lr', clf1), ('rf', clf2)])\n-        >>> eclf.set_params(rf='drop')\n-        StackingClassifier(estimators=[('lr', LogisticRegression()),\n-                                        ('rf', 'drop')])\n-        \"\"\"\n-        super()._set_params('estimators', **params)\n-        return self\n-\n-    def get_params(self, deep=True):\n-        \"\"\"Get the parameters of the stacking estimator.\n-\n-        Parameters\n-        ----------\n-        deep : bool\n-            Setting it to True gets the various classifiers and the parameters\n-            of the classifiers as well.\n-        \"\"\"\n-        return super()._get_params('estimators', deep=deep)\n-\n     def _concatenate_predictions(self, predictions):\n         \"\"\"Concatenate the predictions of each first layer learner.\n \n@@ -172,13 +119,6 @@ def fit(self, X, y, sample_weight=None):\n         names, all_estimators = self._validate_estimators()\n         self._validate_final_estimator()\n \n-        has_estimator = any(est != 'drop' for est in all_estimators)\n-        if not has_estimator:\n-            raise ValueError(\n-                \"All estimators are dropped. At least one is required \"\n-                \"to be an estimator.\"\n-            )\n-\n         stack_method = [self.stack_method] * len(all_estimators)\n \n         # Fit the base estimators on the whole training data. Those\n@@ -416,16 +356,6 @@ def __init__(self, estimators, final_estimator=None, cv=None,\n             verbose=verbose\n         )\n \n-    def _validate_estimators(self):\n-        names, estimators = super()._validate_estimators()\n-        for est in estimators:\n-            if est != 'drop' and not is_classifier(est):\n-                raise ValueError(\n-                    \"The estimator {} should be a classifier.\"\n-                    .format(est.__class__.__name__)\n-                )\n-        return names, estimators\n-\n     def _validate_final_estimator(self):\n         self._clone_final_estimator(default=LogisticRegression())\n         if not is_classifier(self.final_estimator_):\n@@ -651,16 +581,6 @@ def __init__(self, estimators, final_estimator=None, cv=None, n_jobs=None,\n             verbose=verbose\n         )\n \n-    def _validate_estimators(self):\n-        names, estimators = super()._validate_estimators()\n-        for est in estimators:\n-            if est != 'drop' and not is_regressor(est):\n-                raise ValueError(\n-                    \"The estimator {} should be a regressor.\"\n-                    .format(est.__class__.__name__)\n-                )\n-        return names, estimators\n-\n     def _validate_final_estimator(self):\n         self._clone_final_estimator(default=RidgeCV())\n         if not is_regressor(self.final_estimator_):\ndiff --git a/sklearn/ensemble/base.py b/sklearn/ensemble/base.py\n--- a/sklearn/ensemble/base.py\n+++ b/sklearn/ensemble/base.py\n@@ -5,16 +5,20 @@\n # Authors: Gilles Louppe\n # License: BSD 3 clause\n \n-import numpy as np\n+from abc import ABCMeta, abstractmethod\n import numbers\n \n+import numpy as np\n+\n from joblib import effective_n_jobs\n \n from ..base import clone\n+from ..base import is_classifier, is_regressor\n from ..base import BaseEstimator\n from ..base import MetaEstimatorMixin\n+from ..utils import Bunch\n from ..utils import check_random_state\n-from abc import ABCMeta, abstractmethod\n+from ..utils.metaestimators import _BaseComposition\n \n MAX_RAND_SEED = np.iinfo(np.int32).max\n \n@@ -178,3 +182,92 @@ def _partition_estimators(n_estimators, n_jobs):\n     starts = np.cumsum(n_estimators_per_job)\n \n     return n_jobs, n_estimators_per_job.tolist(), [0] + starts.tolist()\n+\n+\n+class _BaseHeterogeneousEnsemble(MetaEstimatorMixin, _BaseComposition,\n+                                 metaclass=ABCMeta):\n+    \"\"\"Base class for heterogeneous ensemble of learners.\n+\n+    Parameters\n+    ----------\n+    estimators : list of (str, estimator) tuples\n+        The ensemble of estimators to use in the ensemble. Each element of the\n+        list is defined as a tuple of string (i.e. name of the estimator) and\n+        an estimator instance. An estimator can be set to `'drop'` using\n+        `set_params`.\n+\n+    Attributes\n+    ----------\n+    estimators_ : list of estimators\n+        The elements of the estimators parameter, having been fitted on the\n+        training data. If an estimator has been set to `'drop'`, it will not\n+        appear in `estimators_`.\n+    \"\"\"\n+    _required_parameters = ['estimators']\n+\n+    @property\n+    def named_estimators(self):\n+        return Bunch(**dict(self.estimators))\n+\n+    @abstractmethod\n+    def __init__(self, estimators):\n+        self.estimators = estimators\n+\n+    def _validate_estimators(self):\n+        if self.estimators is None or len(self.estimators) == 0:\n+            raise ValueError(\n+                \"Invalid 'estimators' attribute, 'estimators' should be a list\"\n+                \" of (string, estimator) tuples.\"\n+            )\n+        names, estimators = zip(*self.estimators)\n+        # defined by MetaEstimatorMixin\n+        self._validate_names(names)\n+\n+        has_estimator = any(est not in (None, 'drop') for est in estimators)\n+        if not has_estimator:\n+            raise ValueError(\n+                \"All estimators are dropped. At least one is required \"\n+                \"to be an estimator.\"\n+            )\n+\n+        is_estimator_type = (is_classifier if is_classifier(self)\n+                             else is_regressor)\n+\n+        for est in estimators:\n+            if est not in (None, 'drop') and not is_estimator_type(est):\n+                raise ValueError(\n+                    \"The estimator {} should be a {}.\"\n+                    .format(\n+                        est.__class__.__name__, is_estimator_type.__name__[3:]\n+                    )\n+                )\n+\n+        return names, estimators\n+\n+    def set_params(self, **params):\n+        \"\"\"Set the parameters of an estimator from the ensemble.\n+\n+        Valid parameter keys can be listed with `get_params()`.\n+\n+        Parameters\n+        ----------\n+        **params : keyword arguments\n+            Specific parameters using e.g.\n+            `set_params(parameter_name=new_value)`. In addition, to setting the\n+            parameters of the stacking estimator, the individual estimator of\n+            the stacking estimators can also be set, or can be removed by\n+            setting them to 'drop'.\n+        \"\"\"\n+        super()._set_params('estimators', **params)\n+        return self\n+\n+    def get_params(self, deep=True):\n+        \"\"\"Get the parameters of an estimator from the ensemble.\n+\n+        Parameters\n+        ----------\n+        deep : bool\n+            Setting it to True gets the various classifiers and the parameters\n+            of the classifiers as well.\n+        \"\"\"\n+        return super()._get_params('estimators', deep=deep)\ndiff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -24,25 +24,20 @@\n from ..base import TransformerMixin\n from ..base import clone\n from .base import _parallel_fit_estimator\n+from .base import _BaseHeterogeneousEnsemble\n from ..preprocessing import LabelEncoder\n from ..utils import Bunch\n from ..utils.validation import check_is_fitted\n-from ..utils.metaestimators import _BaseComposition\n from ..utils.multiclass import check_classification_targets\n from ..utils.validation import column_or_1d\n \n \n-class _BaseVoting(TransformerMixin, _BaseComposition):\n+class _BaseVoting(TransformerMixin, _BaseHeterogeneousEnsemble):\n     \"\"\"Base class for voting.\n \n     Warning: This class should not be used directly. Use derived classes\n     instead.\n     \"\"\"\n-    _required_parameters = ['estimators']\n-\n-    @property\n-    def named_estimators(self):\n-        return Bunch(**dict(self.estimators))\n \n     @property\n     def _weights_not_none(self):\n@@ -61,10 +56,7 @@ def fit(self, X, y, sample_weight=None):\n         \"\"\"\n         common fit operations.\n         \"\"\"\n-        if self.estimators is None or len(self.estimators) == 0:\n-            raise AttributeError('Invalid `estimators` attribute, `estimators`'\n-                                 ' should be a list of (string, estimator)'\n-                                 ' tuples')\n+        names, clfs = self._validate_estimators()\n \n         if (self.weights is not None and\n                 len(self.weights) != len(self.estimators)):\n@@ -72,17 +64,6 @@ def fit(self, X, y, sample_weight=None):\n                              '; got %d weights, %d estimators'\n                              % (len(self.weights), len(self.estimators)))\n \n-        names, clfs = zip(*self.estimators)\n-        self._validate_names(names)\n-\n-        n_isnone = np.sum(\n-            [clf in (None, 'drop') for _, clf in self.estimators]\n-        )\n-        if n_isnone == len(self.estimators):\n-            raise ValueError(\n-                'All estimators are None or \"drop\". At least one is required!'\n-            )\n-\n         self.estimators_ = Parallel(n_jobs=self.n_jobs)(\n                 delayed(_parallel_fit_estimator)(clone(clf), X, y,\n                                                  sample_weight=sample_weight)\n@@ -94,46 +75,6 @@ def fit(self, X, y, sample_weight=None):\n             self.named_estimators_[k[0]] = e\n         return self\n \n-    def set_params(self, **params):\n-        \"\"\" Setting the parameters for the ensemble estimator\n-\n-        Valid parameter keys can be listed with get_params().\n-\n-        Parameters\n-        ----------\n-        **params : keyword arguments\n-            Specific parameters using e.g. set_params(parameter_name=new_value)\n-            In addition, to setting the parameters of the ensemble estimator,\n-            the individual estimators of the ensemble estimator can also be\n-            set or replaced by setting them to None.\n-\n-        Examples\n-        --------\n-        In this example, the RandomForestClassifier is removed.\n-\n-        >>> from sklearn.linear_model import LogisticRegression\n-        >>> from sklearn.ensemble import RandomForestClassifier\n-        >>> from sklearn.ensemble import VotingClassifier\n-        >>> clf1 = LogisticRegression()\n-        >>> clf2 = RandomForestClassifier()\n-        >>> eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2)])\n-        >>> eclf.set_params(rf=None)\n-        VotingClassifier(estimators=[('lr', LogisticRegression()),\n-                                     ('rf', None)])\n-        \"\"\"\n-        return self._set_params('estimators', **params)\n-\n-    def get_params(self, deep=True):\n-        \"\"\" Get the parameters of the ensemble estimator\n-\n-        Parameters\n-        ----------\n-        deep : bool\n-            Setting it to True gets the various estimators and the parameters\n-            of the estimators as well\n-        \"\"\"\n-        return self._get_params('estimators', deep=deep)\n-\n \n class VotingClassifier(ClassifierMixin, _BaseVoting):\n     \"\"\"Soft Voting/Majority Rule classifier for unfitted estimators.\n@@ -230,7 +171,7 @@ class VotingClassifier(ClassifierMixin, _BaseVoting):\n \n     def __init__(self, estimators, voting='hard', weights=None, n_jobs=None,\n                  flatten_transform=True):\n-        self.estimators = estimators\n+        super().__init__(estimators=estimators)\n         self.voting = voting\n         self.weights = weights\n         self.n_jobs = n_jobs\n@@ -423,7 +364,7 @@ class VotingRegressor(RegressorMixin, _BaseVoting):\n     \"\"\"\n \n     def __init__(self, estimators, weights=None, n_jobs=None):\n-        self.estimators = estimators\n+        super().__init__(estimators=estimators)\n         self.weights = weights\n         self.n_jobs = n_jobs\n \n",
  "test_patch": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -37,9 +37,9 @@\n \n def test_estimator_init():\n     eclf = VotingClassifier(estimators=[])\n-    msg = ('Invalid `estimators` attribute, `estimators` should be'\n-           ' a list of (string, estimator) tuples')\n-    assert_raise_message(AttributeError, msg, eclf.fit, X, y)\n+    msg = (\"Invalid 'estimators' attribute, 'estimators' should be\"\n+           \" a list of (string, estimator) tuples.\")\n+    assert_raise_message(ValueError, msg, eclf.fit, X, y)\n \n     clf = LogisticRegression(random_state=1)\n \n@@ -417,7 +417,7 @@ def test_set_estimator_none(drop):\n     eclf2.set_params(voting='soft').fit(X, y)\n     assert_array_equal(eclf1.predict(X), eclf2.predict(X))\n     assert_array_almost_equal(eclf1.predict_proba(X), eclf2.predict_proba(X))\n-    msg = 'All estimators are None or \"drop\". At least one is required!'\n+    msg = 'All estimators are dropped. At least one is required'\n     assert_raise_message(\n         ValueError, msg, eclf2.set_params(lr=drop, rf=drop, nb=drop).fit, X, y)\n \n",
  "problem_statement": "VotingClassifier and roc_auc TypeError: Cannot cast array data from dtype('float64') to dtype('int64') according to the rule 'safe' and\n#### Description\r\nVotingClassifier\r\nTypeError: Cannot cast array data from dtype('float64') to dtype('int64') according to the rule 'safe'\r\n\r\n#### Steps/Code to Reproduce\r\n```python\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.preprocessing import StandardScaler, Normalizer\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.impute import SimpleImputer\r\nfrom sklearn.ensemble import VotingClassifier\r\nfrom sklearn.linear_model import LinearRegression\r\nfrom sklearn.linear_model import Ridge\r\nfrom sklearn.linear_model import LogisticRegression\r\nfrom sklearn.metrics import roc_auc_score\r\n\r\npipePre = Pipeline([\r\n    ('simpleimputer', SimpleImputer(missing_values=np.nan, strategy='constant', fill_value=0)),\r\n    ('standardscaler', StandardScaler()),\r\n    ('normalizer', Normalizer())\r\n     ])\r\n\r\ndf_train_x = pipePre.fit_transform(df_train_x)\r\n\r\nX_train, X_test, y_train, y_test = train_test_split(df_train_x, df_train_y, test_size = 0.25, random_state=42)\r\n\r\nlrg = LinearRegression().fit(X_train, y_train)\r\n\r\nrig = Ridge().fit(X_train, y_train)\r\n\r\nlreg = LogisticRegression().fit(X_train, y_train)\r\n\r\nvoting = VotingClassifier(estimators=[('lrg_v', lrg), ('rig_v', rig), \r\n                                      ('lreg_v', lreg)], voting='hard')\r\nvoting_fit = voting.fit(X_train, y_train)\r\n\r\ny_pred = voting_fit.predict(X_test)\r\nroc_auc_score(y_test, y_pred)\r\n\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-50-506a80086b81> in <module>\r\n----> 1 val_error(voting_fit, X_test, y_test)\r\n\r\n<ipython-input-6-0fa46ec754f8> in val_error(model, tested, prediction)\r\n     14         Data, prepaired as tested labels\r\n     15     \"\"\"\r\n---> 16     y_pred = model.predict(tested)\r\n     17     err = roc_auc_score(prediction, y_pred)\r\n     18     return err\r\n\r\n~\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\voting.py in predict(self, X)\r\n    302                 lambda x: np.argmax(\r\n    303                     np.bincount(x, weights=self._weights_not_none)),\r\n--> 304                 axis=1, arr=predictions)\r\n    305 \r\n    306         maj = self.le_.inverse_transform(maj)\r\n\r\n~\\Anaconda3\\lib\\site-packages\\numpy\\lib\\shape_base.py in apply_along_axis(func1d, axis, arr, *args, **kwargs)\r\n    378     except StopIteration:\r\n    379         raise ValueError('Cannot apply_along_axis when any iteration dimensions are 0')\r\n--> 380     res = asanyarray(func1d(inarr_view[ind0], *args, **kwargs))\r\n    381 \r\n    382     # build a buffer for storing evaluations of func1d.\r\n\r\n~\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\voting.py in <lambda>(x)\r\n    301             maj = np.apply_along_axis(\r\n    302                 lambda x: np.argmax(\r\n--> 303                     np.bincount(x, weights=self._weights_not_none)),\r\n    304                 axis=1, arr=predictions)\r\n    305 \r\n\r\nTypeError: Cannot cast array data from dtype('float64') to dtype('int64') according to the rule 'safe'\r\n\r\n```\r\n\r\nscikit-learn  0.21.2  anaconda\r\n\r\n\r\n<!-- Thanks for contributing! -->\r\n\n",
  "hints_text": "`Ridge` and `LinearRegression` are not classifiers, which makes them incompatible with `VotingClassifier`.\n> Ridge and LinearRegression are not classifiers, which makes them incompatible with VotingClassifier.\r\n\r\n+1 though maybe we should return a better error message.\nShall we check the base estimators with `sklearn.base.is_classifier` in the `VotingClassifier.__init__` or `fit` and raise a `ValueError`? \n> Shall we check the base estimators with sklearn.base.is_classifier in the VotingClassifier.__init__ or fit and raise a ValueError?\r\n\r\nWe have something similar for the StackingClassifier and StackingRegressor.\r\n\r\nActually, these 2 classes shared something in common by having `estimators` parameters. In some way they are an ensemble of \"heterogeneous\" estimators (i.e. multiple estimators) while bagging, RF, GBDT is an ensemble of \"homogeneous\" estimator (i.e. single \"base_estimator\").\r\n\r\nWe could have a separate base class for each type. Not sure about the naming but it will reduce code redundancy and make checking easier and consistent.",
  "created_at": "2019-09-24T17:25:41Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/ensemble/tests/test_voting.py::test_estimator_init\", \"sklearn/ensemble/tests/test_voting.py::test_set_estimator_none[None]\", \"sklearn/ensemble/tests/test_voting.py::test_set_estimator_none[drop]\"]",
  "PASS_TO_PASS": "[\"sklearn/ensemble/tests/test_voting.py::test_predictproba_hardvoting\", \"sklearn/ensemble/tests/test_voting.py::test_notfitted\", \"sklearn/ensemble/tests/test_voting.py::test_majority_label_iris\", \"sklearn/ensemble/tests/test_voting.py::test_tie_situation\", \"sklearn/ensemble/tests/test_voting.py::test_weights_iris\", \"sklearn/ensemble/tests/test_voting.py::test_weights_regressor\", \"sklearn/ensemble/tests/test_voting.py::test_predict_on_toy_problem\", \"sklearn/ensemble/tests/test_voting.py::test_predict_proba_on_toy_problem\", \"sklearn/ensemble/tests/test_voting.py::test_multilabel\", \"sklearn/ensemble/tests/test_voting.py::test_gridsearch\", \"sklearn/ensemble/tests/test_voting.py::test_parallel_fit\", \"sklearn/ensemble/tests/test_voting.py::test_sample_weight\", \"sklearn/ensemble/tests/test_voting.py::test_sample_weight_kwargs\", \"sklearn/ensemble/tests/test_voting.py::test_set_params\", \"sklearn/ensemble/tests/test_voting.py::test_estimator_weights_format\", \"sklearn/ensemble/tests/test_voting.py::test_transform\", \"sklearn/ensemble/tests/test_voting.py::test_none_estimator_with_weights[None-X0-y0-voter0]\", \"sklearn/ensemble/tests/test_voting.py::test_none_estimator_with_weights[None-X1-y1-voter1]\", \"sklearn/ensemble/tests/test_voting.py::test_none_estimator_with_weights[drop-X0-y0-voter0]\", \"sklearn/ensemble/tests/test_voting.py::test_none_estimator_with_weights[drop-X1-y1-voter1]\", \"sklearn/ensemble/tests/test_voting.py::test_check_estimators_voting_estimator[VotingRegressor]\", \"sklearn/ensemble/tests/test_voting.py::test_check_estimators_voting_estimator[VotingClassifier]\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.010589",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}