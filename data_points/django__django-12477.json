{
  "repo": "django/django",
  "instance_id": "django__django-12477",
  "base_commit": "41ebe60728a15aa273f4d70de92f5246a89c3d4e",
  "patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -528,6 +528,10 @@ def _check_unique_target(self):\n             frozenset(ut)\n             for ut in self.remote_field.model._meta.unique_together\n         })\n+        unique_foreign_fields.update({\n+            frozenset(uc.fields)\n+            for uc in self.remote_field.model._meta.total_unique_constraints\n+        })\n         foreign_fields = {f.name for f in self.foreign_related_fields}\n         has_unique_constraint = any(u <= foreign_fields for u in unique_foreign_fields)\n \n@@ -541,8 +545,10 @@ def _check_unique_target(self):\n                     \"No subset of the fields %s on model '%s' is unique.\"\n                     % (field_combination, model_name),\n                     hint=(\n-                        \"Add unique=True on any of those fields or add at \"\n-                        \"least a subset of them to a unique_together constraint.\"\n+                        'Mark a single field as unique=True or add a set of '\n+                        'fields to a unique constraint (via unique_together '\n+                        'or a UniqueConstraint (without condition) in the '\n+                        'model Meta.constraints).'\n                     ),\n                     obj=self,\n                     id='fields.E310',\n@@ -553,8 +559,13 @@ def _check_unique_target(self):\n             model_name = self.remote_field.model.__name__\n             return [\n                 checks.Error(\n-                    \"'%s.%s' must set unique=True because it is referenced by \"\n+                    \"'%s.%s' must be unique because it is referenced by \"\n                     \"a foreign key.\" % (model_name, field_name),\n+                    hint=(\n+                        'Add unique=True to this field or add a '\n+                        'UniqueConstraint (without condition) in the model '\n+                        'Meta.constraints.'\n+                    ),\n                     obj=self,\n                     id='fields.E311',\n                 )\n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -352,7 +352,11 @@ class Model(models.Model):\n         field = Model._meta.get_field('foreign_key')\n         self.assertEqual(field.check(), [\n             Error(\n-                \"'Target.bad' must set unique=True because it is referenced by a foreign key.\",\n+                \"'Target.bad' must be unique because it is referenced by a foreign key.\",\n+                hint=(\n+                    'Add unique=True to this field or add a UniqueConstraint '\n+                    '(without condition) in the model Meta.constraints.'\n+                ),\n                 obj=field,\n                 id='fields.E311',\n             ),\n@@ -368,12 +372,64 @@ class Model(models.Model):\n         field = Model._meta.get_field('field')\n         self.assertEqual(field.check(), [\n             Error(\n-                \"'Target.bad' must set unique=True because it is referenced by a foreign key.\",\n+                \"'Target.bad' must be unique because it is referenced by a foreign key.\",\n+                hint=(\n+                    'Add unique=True to this field or add a UniqueConstraint '\n+                    '(without condition) in the model Meta.constraints.'\n+                ),\n                 obj=field,\n                 id='fields.E311',\n             ),\n         ])\n \n+    def test_foreign_key_to_partially_unique_field(self):\n+        class Target(models.Model):\n+            source = models.IntegerField()\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['source'],\n+                        name='tfktpuf_partial_unique',\n+                        condition=models.Q(pk__gt=2),\n+                    ),\n+                ]\n+\n+        class Model(models.Model):\n+            field = models.ForeignKey(Target, models.CASCADE, to_field='source')\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'Target.source' must be unique because it is referenced by a \"\n+                \"foreign key.\",\n+                hint=(\n+                    'Add unique=True to this field or add a UniqueConstraint '\n+                    '(without condition) in the model Meta.constraints.'\n+                ),\n+                obj=field,\n+                id='fields.E311',\n+            ),\n+        ])\n+\n+    def test_foreign_key_to_unique_field_with_meta_constraint(self):\n+        class Target(models.Model):\n+            source = models.IntegerField()\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['source'],\n+                        name='tfktufwmc_unique',\n+                    ),\n+                ]\n+\n+        class Model(models.Model):\n+            field = models.ForeignKey(Target, models.CASCADE, to_field='source')\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n+\n     def test_foreign_object_to_non_unique_fields(self):\n         class Person(models.Model):\n             # Note that both fields are not unique.\n@@ -396,14 +452,82 @@ class MMembership(models.Model):\n             Error(\n                 \"No subset of the fields 'country_id', 'city_id' on model 'Person' is unique.\",\n                 hint=(\n-                    \"Add unique=True on any of those fields or add at least \"\n-                    \"a subset of them to a unique_together constraint.\"\n+                    'Mark a single field as unique=True or add a set of '\n+                    'fields to a unique constraint (via unique_together or a '\n+                    'UniqueConstraint (without condition) in the model '\n+                    'Meta.constraints).'\n                 ),\n                 obj=field,\n                 id='fields.E310',\n             )\n         ])\n \n+    def test_foreign_object_to_partially_unique_field(self):\n+        class Person(models.Model):\n+            country_id = models.IntegerField()\n+            city_id = models.IntegerField()\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['country_id', 'city_id'],\n+                        name='tfotpuf_partial_unique',\n+                        condition=models.Q(pk__gt=2),\n+                    ),\n+                ]\n+\n+        class MMembership(models.Model):\n+            person_country_id = models.IntegerField()\n+            person_city_id = models.IntegerField()\n+            person = models.ForeignObject(\n+                Person,\n+                on_delete=models.CASCADE,\n+                from_fields=['person_country_id', 'person_city_id'],\n+                to_fields=['country_id', 'city_id'],\n+            )\n+\n+        field = MMembership._meta.get_field('person')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"No subset of the fields 'country_id', 'city_id' on model \"\n+                \"'Person' is unique.\",\n+                hint=(\n+                    'Mark a single field as unique=True or add a set of '\n+                    'fields to a unique constraint (via unique_together or a '\n+                    'UniqueConstraint (without condition) in the model '\n+                    'Meta.constraints).'\n+                ),\n+                obj=field,\n+                id='fields.E310',\n+            ),\n+        ])\n+\n+    def test_foreign_object_to_unique_field_with_meta_constraint(self):\n+        class Person(models.Model):\n+            country_id = models.IntegerField()\n+            city_id = models.IntegerField()\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['country_id', 'city_id'],\n+                        name='tfotpuf_unique',\n+                    ),\n+                ]\n+\n+        class MMembership(models.Model):\n+            person_country_id = models.IntegerField()\n+            person_city_id = models.IntegerField()\n+            person = models.ForeignObject(\n+                Person,\n+                on_delete=models.CASCADE,\n+                from_fields=['person_country_id', 'person_city_id'],\n+                to_fields=['country_id', 'city_id'],\n+            )\n+\n+        field = MMembership._meta.get_field('person')\n+        self.assertEqual(field.check(), [])\n+\n     def test_on_delete_set_null_on_non_nullable_field(self):\n         class Person(models.Model):\n             pass\n@@ -1453,8 +1577,10 @@ class Child(models.Model):\n             Error(\n                 \"No subset of the fields 'a', 'b' on model 'Parent' is unique.\",\n                 hint=(\n-                    \"Add unique=True on any of those fields or add at least \"\n-                    \"a subset of them to a unique_together constraint.\"\n+                    'Mark a single field as unique=True or add a set of '\n+                    'fields to a unique constraint (via unique_together or a '\n+                    'UniqueConstraint (without condition) in the model '\n+                    'Meta.constraints).'\n                 ),\n                 obj=field,\n                 id='fields.E310',\n@@ -1489,8 +1615,10 @@ class Child(models.Model):\n             Error(\n                 \"No subset of the fields 'a', 'b', 'd' on model 'Parent' is unique.\",\n                 hint=(\n-                    \"Add unique=True on any of those fields or add at least \"\n-                    \"a subset of them to a unique_together constraint.\"\n+                    'Mark a single field as unique=True or add a set of '\n+                    'fields to a unique constraint (via unique_together or a '\n+                    'UniqueConstraint (without condition) in the model '\n+                    'Meta.constraints).'\n                 ),\n                 obj=field,\n                 id='fields.E310',\n",
  "problem_statement": "fields.E310-E311 should take into account UniqueConstraints without conditions.\nDescription\n\t\nHello, \nI'm trying to create migration with this kind of model.\nclass AppUsers(models.Model):\n\tname = models.CharField(...)\n\tuid = models.CharField(...)\n\tsource = models.ForeignKey(...)\n\tclass Meta:\n\t\tconstraints = [models.UniqueConstraint(fields=['uid', 'source'], name='appusers_uniqueness')]\nWhen I start makemigrations command in manage.py I've faced fields.E310 ​https://docs.djangoproject.com/en/2.2/ref/checks/#related-fields error \nIt says that I should add unique_together field in Meta options:\napp_name.AppUsers.field: (fields.E310) No subset of the fields 'uid', 'source' on model 'AppUsers' is unique.\nHINT: Add unique=True on any of those fields or add at least a subset of them to a unique_together constraint.\nIf I change Meta options to unique_together constraint migration passes with no errors.\nclass AppUsers(models.Model):\n\tname = models.CharField(...)\n\tuid = models.CharField(...)\n\tsource = models.ForeignKey(...)\n\tclass Meta:\n\t\tunique_together = [['uid', 'source']]\nAs mentioned in docs ​https://docs.djangoproject.com/en/2.2/ref/models/options/#unique-together unique_together may be deprecated in the future. So I think nobody wants to face this issue when this will be deprecated :) \nThanks,\nPavel\n",
  "hints_text": "Agreed, both checks should take into UniqueConstraint's without condition's.\nPosting a patch soon",
  "created_at": "2020-02-19T22:26:20Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_intersection_foreign_object (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_superset_foreign_object (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_foreign_key_to_non_unique_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_non_unique_field_under_explicit_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_partially_unique_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_unique_field_with_meta_constraint (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_object_to_non_unique_fields (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_object_to_partially_unique_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_object_to_unique_field_with_meta_constraint (invalid_models_tests.test_relative_fields.RelativeFieldTests)\"]",
  "PASS_TO_PASS": "[\"test_accessor_clash (invalid_models_tests.test_relative_fields.SelfReferentialFKClashTests)\", \"test_clash_under_explicit_related_name (invalid_models_tests.test_relative_fields.SelfReferentialFKClashTests)\", \"test_reverse_query_name_clash (invalid_models_tests.test_relative_fields.SelfReferentialFKClashTests)\", \"test_clash_parent_link (invalid_models_tests.test_relative_fields.ComplexClashTests)\", \"test_complex_clash (invalid_models_tests.test_relative_fields.ComplexClashTests)\", \"test_explicit_field_names (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_invalid_field (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_invalid_order (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_m2m_field_argument_validation (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_accessor_clash (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_clash_between_accessors (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_clash_under_explicit_related_name (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_reverse_query_name_clash (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_valid_model (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_fk_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_fk_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_fk_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_m2m_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_m2m_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_m2m_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_clash_between_accessors (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"Ref #22047.\", \"test_no_clash_for_hidden_related_name (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_ambiguous_relationship_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_abstract_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_isolate_apps_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_missing_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_invalid_related_query_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_m2m_to_abstract_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_through_isolate_apps_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_to_isolate_apps_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_to_missing_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_with_limit_choices_auto_created_no_warning (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_with_useless_options (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_missing_relationship_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_missing_relationship_model_on_model_check (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_not_swapped_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_nullable_primary_key (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_on_delete_set_default_without_default_value (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_on_delete_set_null_on_non_nullable_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_referencing_to_swapped_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_related_field_has_invalid_related_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_related_field_has_valid_related_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_relationship_model_missing_foreign_key (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_relationship_model_with_foreign_key_to_wrong_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_to_fields_exist (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_to_fields_not_checked_if_related_model_doesnt_exist (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_too_many_foreign_keys_in_self_referential_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_unique_m2m (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_valid_foreign_key_without_accessor (invalid_models_tests.test_relative_fields.RelativeFieldTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.626610",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}