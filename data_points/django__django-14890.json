{
  "repo": "django/django",
  "instance_id": "django__django-14890",
  "base_commit": "25cbd1e6aa4178c31d60e3900a5bd4aa177c01c9",
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -325,6 +325,7 @@ def __class_getitem__(cls, *args, **kwargs):\n         return cls\n \n     def __and__(self, other):\n+        self._check_operator_queryset(other, '&')\n         self._merge_sanity_check(other)\n         if isinstance(other, EmptyQuerySet):\n             return other\n@@ -336,6 +337,7 @@ def __and__(self, other):\n         return combined\n \n     def __or__(self, other):\n+        self._check_operator_queryset(other, '|')\n         self._merge_sanity_check(other)\n         if isinstance(self, EmptyQuerySet):\n             return other\n@@ -1430,6 +1432,10 @@ def _not_support_combined_queries(self, operation_name):\n                 % (operation_name, self.query.combinator)\n             )\n \n+    def _check_operator_queryset(self, other, operator_):\n+        if self.query.combinator or other.query.combinator:\n+            raise TypeError(f'Cannot use {operator_} operator with combined queryset.')\n+\n \n class InstanceCheckMeta(type):\n     def __instancecheck__(self, instance):\n",
  "test_patch": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -441,3 +441,24 @@ def test_get_with_filters_unsupported_on_combined_qs(self):\n             with self.subTest(combinator=combinator):\n                 with self.assertRaisesMessage(NotSupportedError, msg % combinator):\n                     getattr(qs, combinator)(qs).get(num=2)\n+\n+    def test_operator_on_combined_qs_error(self):\n+        qs = Number.objects.all()\n+        msg = 'Cannot use %s operator with combined queryset.'\n+        combinators = ['union']\n+        if connection.features.supports_select_difference:\n+            combinators.append('difference')\n+        if connection.features.supports_select_intersection:\n+            combinators.append('intersection')\n+        operators = [\n+            ('|', operator.or_),\n+            ('&', operator.and_),\n+        ]\n+        for combinator in combinators:\n+            combined_qs = getattr(qs, combinator)(qs)\n+            for operator_, operator_func in operators:\n+                with self.subTest(combinator=combinator):\n+                    with self.assertRaisesMessage(TypeError, msg % operator_):\n+                        operator_func(qs, combined_qs)\n+                    with self.assertRaisesMessage(TypeError, msg % operator_):\n+                        operator_func(combined_qs, qs)\n",
  "problem_statement": "\"&\" and \"|\" operators are silently ignored after QuerySet.union(), intersection(), and difference().\nDescription\n\t\nThis looks like a similar issue to the one fixed in #27995\nExample:\nclass MyModel(models.Model):\n\tname = models.CharField()\nfor name in ['a', 'b', 'c']:\n MyModel.objects.create(name=name)\ngroup1 = MyModel.objects.filter(name='a')\ngroup2 = MyModel.objects.filter(name='b')\ngroup3 = MyModel.objects.filter(name='c')\ncombined_group = group1.union(group2)\ngroup_and = combined_group & group1\ngroup_or = combined_group | group 3\nIn this example, combined_group, group_and and group_or all have the same SQL. These operators should raise an exception if they can not be applied after combinator functions.\n",
  "hints_text": "Thanks for the report. I'm not sure what behavior would be expected, so we should raise TypeError.",
  "created_at": "2021-09-23T16:43:07Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_operator_on_combined_qs_error (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_by_same_type (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
  "PASS_TO_PASS": "[\"test_combining_multiple_models (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_empty_qs_union_with_ordered_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_with_filters_unsupported_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_limits (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_raises_on_non_selected_column (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_alias (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression_and_alias (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_qs_with_subcompound_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_distinct (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_multiple_models_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_multiple_models_with_values_list_and_order_by_extra_select (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_none (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_extra_and_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_two_annotated_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_and_order_on_annotation (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_on_annotated_and_unannotated (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_operations_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_ordering_slicing_raises_db_error (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.706714",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}