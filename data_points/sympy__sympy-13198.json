{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-13198",
  "base_commit": "b3e01a97bd5dfb67fb7b6d2f051b7187b8c41abf",
  "patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -1218,14 +1218,15 @@ def dup_factor_list(f, K0):\n                 factors[i] = (dup_convert(f, K, K0), k)\n \n             coeff = K0.convert(coeff, K)\n+            coeff = K0.quo(coeff, denom)\n \n-            if K0_inexact is None:\n-                coeff = coeff/denom\n-            else:\n+            if K0_inexact:\n                 for i, (f, k) in enumerate(factors):\n-                    f = dup_quo_ground(f, denom, K0)\n+                    max_norm = dup_max_norm(f, K0)\n+                    f = dup_quo_ground(f, max_norm, K0)\n                     f = dup_convert(f, K0, K0_inexact)\n                     factors[i] = (f, k)\n+                    coeff = K0.mul(coeff, K0.pow(max_norm, k))\n \n                 coeff = K0_inexact.convert(coeff, K0)\n                 K0 = K0_inexact\n@@ -1297,14 +1298,15 @@ def dmp_factor_list(f, u, K0):\n                 factors[i] = (dmp_convert(f, u, K, K0), k)\n \n             coeff = K0.convert(coeff, K)\n+            coeff = K0.quo(coeff, denom)\n \n-            if K0_inexact is None:\n-                coeff = coeff/denom\n-            else:\n+            if K0_inexact:\n                 for i, (f, k) in enumerate(factors):\n-                    f = dmp_quo_ground(f, denom, u, K0)\n+                    max_norm = dmp_max_norm(f, u, K0)\n+                    f = dmp_quo_ground(f, max_norm, u, K0)\n                     f = dmp_convert(f, u, K0, K0_inexact)\n                     factors[i] = (f, k)\n+                    coeff = K0.mul(coeff, K0.pow(max_norm, k))\n \n                 coeff = K0_inexact.convert(coeff, K0)\n                 K0 = K0_inexact\n",
  "test_patch": "diff --git a/sympy/polys/tests/test_factortools.py b/sympy/polys/tests/test_factortools.py\n--- a/sympy/polys/tests/test_factortools.py\n+++ b/sympy/polys/tests/test_factortools.py\n@@ -528,7 +528,10 @@ def test_dup_factor_list():\n \n     f = 6.7225336055071*x**2 - 10.6463972754741*x - 0.33469524022264\n     coeff, factors = R.dup_factor_list(f)\n-    assert coeff == RR(1.0) and len(factors) == 1 and factors[0][0].almosteq(f, 1e-10) and factors[0][1] == 1\n+    assert coeff == RR(10.6463972754741)\n+    assert len(factors) == 1\n+    assert factors[0][0].max_norm() == RR(1.0)\n+    assert factors[0][1] == 1\n \n     Rt, t = ring(\"t\", ZZ)\n     R, x = ring(\"x\", Rt)\n@@ -628,12 +631,15 @@ def test_dmp_factor_list():\n     f = 2.0*x**2 - 8.0*y**2\n \n     assert R.dmp_factor_list(f) == \\\n-        (RR(2.0), [(1.0*x - 2.0*y, 1),\n-                   (1.0*x + 2.0*y, 1)])\n+        (RR(8.0), [(0.5*x - y, 1),\n+                   (0.5*x + y, 1)])\n \n     f = 6.7225336055071*x**2*y**2 - 10.6463972754741*x*y - 0.33469524022264\n     coeff, factors = R.dmp_factor_list(f)\n-    assert coeff == RR(1.0) and len(factors) == 1 and factors[0][0].almosteq(f, 1e-10) and factors[0][1] == 1\n+    assert coeff == RR(10.6463972754741)\n+    assert len(factors) == 1\n+    assert factors[0][0].max_norm() == RR(1.0)\n+    assert factors[0][1] == 1\n \n     Rt, t = ring(\"t\", ZZ)\n     R, x, y = ring(\"x,y\", Rt)\ndiff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -2444,6 +2444,11 @@ def test_factor():\n \n     assert factor(sqrt(x**2)) == sqrt(x**2)\n \n+    # issue 13149\n+    assert factor(expand((0.5*x+1)*(0.5*y+1))) == Mul(1.0, 0.5*x + 1.0,\n+        0.5*y + 1.0, evaluate = False)\n+    assert factor(expand((0.5*x+0.5)**2)) == 0.25*(1.0*x + 1.0)**2\n+\n \n def test_factor_large():\n     f = (x**2 + 4*x + 4)**10000000*(x**2 + 1)*(x**2 + 2*x + 1)**1234567\ndiff --git a/sympy/simplify/tests/test_combsimp.py b/sympy/simplify/tests/test_combsimp.py\n--- a/sympy/simplify/tests/test_combsimp.py\n+++ b/sympy/simplify/tests/test_combsimp.py\n@@ -1,7 +1,7 @@\n from sympy import (\n     Rational, combsimp, factorial, gamma, binomial, Symbol, pi, S,\n     sin, exp, powsimp, sqrt, sympify, FallingFactorial, RisingFactorial,\n-    simplify, symbols, cos, rf)\n+    simplify, symbols, cos, rf, Mul)\n \n from sympy.abc import x, y, z, t, a, b, c, d, e, f, g, h, i, k\n \n@@ -28,7 +28,8 @@ def test_combsimp():\n     assert combsimp(binomial(n + 2, k + S(1)/2)) == 4*((n + 1)*(n + 2) *\n         binomial(n, k + S(1)/2))/((2*k - 2*n - 1)*(2*k - 2*n - 3))\n     assert combsimp(binomial(n + 2, k + 2.0)) == \\\n-        -((1.0*n + 2.0)*binomial(n + 1.0, k + 2.0))/(k - n)\n+        Mul(-2.0, 0.5*n + 1.0, binomial(n + 1.0, k + 2.0),\n+        evaluate = False)/(k - n)\n \n     # coverage tests\n     assert combsimp(factorial(n*(1 + n) - n**2 - n)) == 1\n",
  "problem_statement": "Problem factoring trivial polynomial\n```\n>>> import sympy as sp\n>>> x, y = sp.symbols('x y')\n>>> z = 0.0001 * (x * (x + (4.0 * y))) + 0.0001 * (y * (x + (4.0 * y)))\n>>> z\n0.0001*x*(x + 4.0*y) + 0.0001*y*(x + 4.0*y)\n>>> w = sp.expand(z)\n>>> w\n0.0001*x**2 + 0.0005*x*y + 0.0004*y**2\n>>> v = sp.factor(w)\n>>> v\n1.0*(0.0001*x + 0.0001*y)*(0.0001*x + 0.0004*y)\n>>> sp.expand(v)\n1.0e-8*x**2 + 5.0e-8*x*y + 4.0e-8*y**2\n>>> sp.__version__\n'0.7.6'\n```\n\nThe factoring of w is incorrect - look at the order of x it is 10^-8 not 10^-4.\n\nBug in simplify ?\nHi, I'm running into issues where simplify comes up with incorrect results.\r\n\r\nsympy verion 1.0, python version 3.52, ubuntu 16.04. I've also verified the same with the Sympy online console (http://live.sympy.org/).\r\n\r\nThe problem comes when trying to simplify a mass matrix for a simple 3-DOF robot:\r\n```\r\nq_1 = Symbol('q_1')\r\nq_2 = Symbol('q_2')\r\nq_3 = Symbol('q_3')\r\nq = [q_1,q_2,q_3]\r\n\r\nMq = Matrix([[(1.0*cos(q_2) + 0.5*cos(q_2 + q_3))**2*sin(q_1)**2 + (1.0*cos(q_2) + 0.5*cos(q_2 + q_3))**2*cos(q_1)**2 + 0.25*sin(q_1)**2*cos(q_2)**2 + 0.25*cos(q_1)**2*cos(q_2)**2, 0, 0], [0, (-1.0*sin(q_2) - 0.5*sin(q_2 + q_3))**2*sin(q_1)**2 + (-1.0*sin(q_2) - 0.5*sin(q_2 + q_3))**2*cos(q_1)**2 + (-1.0*cos(q_2) - 0.5*cos(q_2 + q_3))**2 + 0.25*sin(q_1)**2*sin(q_2)**2 + 0.25*sin(q_2)**2*cos(q_1)**2 + 0.25*cos(q_2)**2, -0.5*(-1.0*sin(q_2) - 0.5*sin(q_2 + q_3))*sin(q_1)**2*sin(q_2 + q_3) - 0.5*(-1.0*sin(q_2) - 0.5*sin(q_2 + q_3))*sin(q_2 + q_3)*cos(q_1)**2 - 0.5*(-1.0*cos(q_2) - 0.5*cos(q_2 + q_3))*cos(q_2 + q_3)], [0, -0.5*(-1.0*sin(q_2) - 0.5*sin(q_2 + q_3))*sin(q_1)**2*sin(q_2 + q_3) - 0.5*(-1.0*sin(q_2) - 0.5*sin(q_2 + q_3))*sin(q_2 + q_3)*cos(q_1)**2 - 0.5*(-1.0*cos(q_2) - 0.5*cos(q_2 + q_3))*cos(q_2 + q_3), 0.25*sin(q_1)**2*sin(q_2 + q_3)**2 + 0.25*sin(q_2 + q_3)**2*cos(q_1)**2 + 0.25*cos(q_2 + q_3)**2]])\r\n```\r\n\r\nIf I use the matrix above directly, I get correct results:\r\n```\r\nMq_fnc = lambdify(q,Mq)\r\nprint(Mq_fnc(0,0,0))\r\n```\r\nwhich should be:\r\n```\r\n[[ 2.5   0.    0.  ]\r\n [ 0.    2.5   0.75]\r\n [ 0.    0.75  0.25]]\r\n```\r\n\r\nIf on the other hand, I simplify first\r\n```\r\nMqs = simplify(Mq)\r\nMqs_fnc = lambdify(q,Mqs)\r\nprint(Mqs_fnc(0,0,0))\r\n```\r\n\r\nI get an incorrect result:\r\n\r\n```\r\n[[ 0.625  0.     0.   ]\r\n [ 0.     2.5    0.75 ]\r\n [ 0.     0.75   0.25 ]]\r\n```\r\n\r\nI was wondering if this is a bug with simplify, or am I doing something wrong?\r\n\r\nThanks.\n",
  "hints_text": "Oh, just another example why Float's are dangerous for CAS.\n\nNo issue if coefficients from the field of rationals:\n\n``` python\nIn [29]: z_r = Rational(0.0001) * (x * (x + (Rational(4.0) * y))) + Rational(0.0001) * (y * (x + (Rational(4.0) * y)))\n\nIn [30]: w_r = expand(z_r); w_r\nOut[30]: \n                  2                                              2 \n7378697629483821⋅x     36893488147419105⋅x⋅y   7378697629483821⋅y  \n──────────────────── + ───────────────────── + ────────────────────\n73786976294838206464    73786976294838206464   18446744073709551616\n\nIn [31]: v_r = factor(w_r); v_r\nOut[31]: \n7378697629483821⋅(x + y)⋅(x + 4⋅y)\n──────────────────────────────────\n       73786976294838206464       \n\nIn [32]: expand(v_r)\nOut[32]: \n                  2                                              2 \n7378697629483821⋅x     36893488147419105⋅x⋅y   7378697629483821⋅y  \n──────────────────── + ───────────────────── + ────────────────────\n73786976294838206464    73786976294838206464   18446744073709551616\n\nIn [33]: _.n()\nOut[33]: \n        2                        2\n0.0001⋅x  + 0.0005⋅x⋅y + 0.0004⋅y \n```\n\ni would like to work on this\n\nThe `denom` is being mishandled. The following \"fixes\" the problem but I would have expected the solution to be `0.0001*(x + y)*(x + 4*y)`\n\n```\n10000.0*(0.0001*x + 0.0001*y)*(0.0001*x + 0.0004*y)\n>>> ^Z\n\n\n$ git diff\ndiff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex ce49142..81df7f8 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -1306,7 +1306,7 @@ def dmp_factor_list(f, u, K0):\n                     f = dmp_convert(f, u, K0, K0_inexact)\n                     factors[i] = (f, k)\n\n-                coeff = K0_inexact.convert(coeff, K0)\n+                coeff = K0_inexact.convert(coeff, K0)*denom\n```\n\n`factor()` seems to be the problem.\r\n\r\n```python\r\n>>> expr = (1.0*cos(q_2) + 0.5*cos(q_2 + q_3))**2*sin(q_1)**2 + (1.0*cos(q_2) + 0.5*cos(q_2 + q_3))**2*cos(q_1)**2 + 0.25*sin(q_1)**2*cos(q_2)**2 + 0.25*cos(q_1)**2*cos(q_2)**2\r\n>>> expand(expr)\r\n1.25*sin(q_1)**2*cos(q_2)**2 + 1.0*sin(q_1)**2*cos(q_2)*cos(q_2 + q_3) + 0.25*sin(q_1)**2*cos(q_2 + q_3)**2 + 1.25*cos(q_1)**2*cos(q_2)**2 + 1.0*cos(q_1)**2*cos(q_2)*cos(q_2 + q_3) + 0.25*cos(q_1)**2*cos(q_2 + q_3)**2\r\n>>> expand(factor(expr))\r\n0.3125*sin(q_1)**2*cos(q_2)**2 + 0.25*sin(q_1)**2*cos(q_2)*cos(q_2 + q_3) + 0.0625*sin(q_1)**2*cos(q_2 + q_3)**2 + 0.3125*cos(q_1)**2*cos(q_2)**2 + 0.25*cos(q_1)**2*cos(q_2)*cos(q_2 + q_3) + 0.0625*cos(q_1)**2*cos(q_2 + q_3)**2\r\n```\nI've been looking more through the issues, and there are also #12506 and #12140. Not sure if related, but both have to do with errors in simplify().",
  "created_at": "2017-08-26T06:08:13Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_dup_factor_list\", \"test_dmp_factor_list\", \"test_combsimp\"]",
  "PASS_TO_PASS": "[\"test_dup_trial_division\", \"test_dmp_trial_division\", \"test_dup_zz_mignotte_bound\", \"test_dmp_zz_mignotte_bound\", \"test_dup_zz_hensel_step\", \"test_dup_zz_hensel_lift\", \"test_dup_zz_irreducible_p\", \"test_dup_cyclotomic_p\", \"test_dup_zz_cyclotomic_poly\", \"test_dup_zz_cyclotomic_factor\", \"test_dup_zz_factor\", \"test_dmp_zz_wang\", \"test_issue_6355\", \"test_dmp_zz_factor\", \"test_dup_ext_factor\", \"test_dmp_ext_factor\", \"test_dup_irreducible_p\", \"test_Poly_from_dict\", \"test_Poly_from_list\", \"test_Poly_from_poly\", \"test_Poly_from_expr\", \"test_Poly__new__\", \"test_Poly__args\", \"test_Poly__gens\", \"test_Poly_zero\", \"test_Poly_one\", \"test_Poly__unify\", \"test_Poly_free_symbols\", \"test_PurePoly_free_symbols\", \"test_Poly__eq__\", \"test_PurePoly__eq__\", \"test_PurePoly_Poly\", \"test_Poly_get_domain\", \"test_Poly_set_domain\", \"test_Poly_get_modulus\", \"test_Poly_set_modulus\", \"test_Poly_add_ground\", \"test_Poly_sub_ground\", \"test_Poly_mul_ground\", \"test_Poly_quo_ground\", \"test_Poly_exquo_ground\", \"test_Poly_abs\", \"test_Poly_neg\", \"test_Poly_add\", \"test_Poly_sub\", \"test_Poly_mul\", \"test_Poly_sqr\", \"test_Poly_pow\", \"test_Poly_divmod\", \"test_Poly_eq_ne\", \"test_Poly_nonzero\", \"test_Poly_properties\", \"test_Poly_is_irreducible\", \"test_Poly_subs\", \"test_Poly_replace\", \"test_Poly_reorder\", \"test_Poly_ltrim\", \"test_Poly_has_only_gens\", \"test_Poly_to_ring\", \"test_Poly_to_field\", \"test_Poly_to_exact\", \"test_Poly_retract\", \"test_Poly_slice\", \"test_Poly_coeffs\", \"test_Poly_monoms\", \"test_Poly_terms\", \"test_Poly_all_coeffs\", \"test_Poly_all_monoms\", \"test_Poly_all_terms\", \"test_Poly_termwise\", \"test_Poly_length\", \"test_Poly_as_dict\", \"test_Poly_as_expr\", \"test_Poly_lift\", \"test_Poly_deflate\", \"test_Poly_inject\", \"test_Poly_eject\", \"test_Poly_exclude\", \"test_Poly__gen_to_level\", \"test_Poly_degree\", \"test_Poly_degree_list\", \"test_Poly_total_degree\", \"test_Poly_homogenize\", \"test_Poly_homogeneous_order\", \"test_Poly_LC\", \"test_Poly_TC\", \"test_Poly_EC\", \"test_Poly_coeff\", \"test_Poly_nth\", \"test_Poly_LM\", \"test_Poly_LM_custom_order\", \"test_Poly_EM\", \"test_Poly_LT\", \"test_Poly_ET\", \"test_Poly_max_norm\", \"test_Poly_l1_norm\", \"test_Poly_clear_denoms\", \"test_Poly_rat_clear_denoms\", \"test_Poly_integrate\", \"test_Poly_diff\", \"test_issue_9585\", \"test_Poly_eval\", \"test_Poly___call__\", \"test_parallel_poly_from_expr\", \"test_pdiv\", \"test_div\", \"test_gcdex\", \"test_revert\", \"test_subresultants\", \"test_resultant\", \"test_discriminant\", \"test_dispersion\", \"test_gcd_list\", \"test_lcm_list\", \"test_gcd\", \"test_gcd_numbers_vs_polys\", \"test_terms_gcd\", \"test_trunc\", \"test_monic\", \"test_content\", \"test_primitive\", \"test_compose\", \"test_shift\", \"test_transform\", \"test_sturm\", \"test_gff\", \"test_sqf_norm\", \"test_sqf\", \"test_factor_large\", \"test_intervals\", \"test_refine_root\", \"test_count_roots\", \"test_Poly_root\", \"test_real_roots\", \"test_all_roots\", \"test_nroots\", \"test_ground_roots\", \"test_nth_power_roots_poly\", \"test_cancel\", \"test_reduced\", \"test_groebner\", \"test_fglm\", \"test_is_zero_dimensional\", \"test_GroebnerBasis\", \"test_poly\", \"test_keep_coeff\", \"test_noncommutative\", \"test_to_rational_coeffs\", \"test_factor_terms\", \"test_issue_11198\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.081092",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}