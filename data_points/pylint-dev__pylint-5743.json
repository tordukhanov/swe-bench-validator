{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-5743",
  "base_commit": "dc4c709e9bca44952decdb74d76cf4e62799890a",
  "patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -1212,7 +1212,9 @@ def _astroid_module_checker(self):\n         for checker in reversed(_checkers):\n             checker.close()\n \n-    def get_ast(self, filepath, modname, data=None):\n+    def get_ast(\n+        self, filepath: str, modname: str, data: Optional[str] = None\n+    ) -> nodes.Module:\n         \"\"\"Return an ast(roid) representation of a module or a string.\n \n         :param str filepath: path to checked file.\n@@ -1220,6 +1222,7 @@ def get_ast(self, filepath, modname, data=None):\n         :param str data: optional contents of the checked file.\n         :returns: the AST\n         :rtype: astroid.nodes.Module\n+        :raises AstroidBuildingError: Whenever we encounter an unexpected exception\n         \"\"\"\n         try:\n             if data is None:\n@@ -1235,11 +1238,17 @@ def get_ast(self, filepath, modname, data=None):\n                 col_offset=getattr(ex.error, \"offset\", None),\n                 args=str(ex.error),\n             )\n-        except astroid.AstroidBuildingException as ex:\n+        except astroid.AstroidBuildingError as ex:\n             self.add_message(\"parse-error\", args=ex)\n-        except Exception as ex:  # pylint: disable=broad-except\n+        except Exception as ex:\n             traceback.print_exc()\n-            self.add_message(\"astroid-error\", args=(ex.__class__, ex))\n+            # We raise BuildingError here as this is essentially an astroid issue\n+            # Creating an issue template and adding the 'astroid-error' message is handled\n+            # by caller: _check_files\n+            raise astroid.AstroidBuildingError(\n+                \"Building error when trying to create ast representation of module '{modname}'\",\n+                modname=modname,\n+            ) from ex\n         return None\n \n     def check_astroid_module(self, ast_node, walker, rawcheckers, tokencheckers):\n",
  "test_patch": "diff --git a/tests/lint/test_utils.py b/tests/lint/test_utils.py\n--- a/tests/lint/test_utils.py\n+++ b/tests/lint/test_utils.py\n@@ -1,5 +1,9 @@\n+import unittest.mock\n from pathlib import Path, PosixPath\n \n+import pytest\n+\n+from pylint.lint import Run\n from pylint.lint.utils import get_fatal_error_message, prepare_crash_report\n \n \n@@ -31,3 +35,16 @@ def test_get_fatal_error_message() -> None:\n     assert python_path in msg\n     assert crash_path in msg\n     assert \"open an issue\" in msg\n+\n+\n+def test_issue_template_on_fatal_errors(capsys: pytest.CaptureFixture) -> None:\n+    \"\"\"Test that we also create an issue template if the offending exception isn't from astroid.\"\"\"\n+    with pytest.raises(SystemExit):\n+        with unittest.mock.patch(\n+            \"astroid.MANAGER.ast_from_file\", side_effect=RecursionError()\n+        ):\n+            Run([__file__])\n+    captured = capsys.readouterr()\n+    assert \"Fatal error while checking\" in captured.out\n+    assert \"Please open an issue\" in captured.out\n+    assert \"Traceback\" in captured.err\n",
  "problem_statement": "Investigate #5495 (crash without a provided template)\nSee https://github.com/PyCQA/pylint/issues/5495#issuecomment-1011022169\n",
  "hints_text": "The following also crashes without any provided template:\r\n```python\r\nimport distutils\r\n\r\nimport six\r\n\r\n\r\ndef get_unpatched_class(cls):\r\n    ...\r\n\r\ndef get_unpatched(item):\r\n    lookup = (\r\n        get_unpatched_class if isinstance(item, six.class_types) else\r\n        lambda item: None\r\n    )\r\n    return lookup(item)\r\n\r\n\r\n_Distribution = get_unpatched(distutils.core.Distribution)\r\n\r\nclass Distribution(_Distribution):\r\n   \r\n    def patch(cls):\r\n        distutils.core.Distribution = cls\r\n```\r\n\r\nThis is for `astroid` 2.9.4 and `pylint` on https://github.com/PyCQA/pylint/commit/44ad84a4332dfb89e810106fef2616a0bc7e47e4\n@Pierre-Sassoulas Did some investigation and found the issue in 5 minutes. I have a fix, just need to figure out a good test. If you got one as well, please go ahead otherwise you can assign me to this!\nYou're fast ðŸ˜„ âš¡ I assigned to myself yesterday but haven't been able to investigate since :)\nI had 20 minutes to spare on an airplane without internet and this was the only issue I could reproduce without any further information ðŸ˜„ \nFix itself is quite easy, but I need to look up method patching with `pytest`. That's something I can't do without internet ðŸ˜… ",
  "created_at": "2022-01-29T16:04:04Z",
  "version": "2.13",
  "FAIL_TO_PASS": "[\"tests/lint/test_utils.py::test_issue_template_on_fatal_errors\"]",
  "PASS_TO_PASS": "[\"tests/lint/test_utils.py::test_prepare_crash_report\", \"tests/lint/test_utils.py::test_get_fatal_error_message\"]",
  "environment_setup_commit": "3b2fbaec045697d53bdd4435e59dbfc2b286df4b",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.911157",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}