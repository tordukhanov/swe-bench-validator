{
  "repo": "django/django",
  "instance_id": "django__django-13111",
  "base_commit": "d2c135da4c75079e45661ec609bd72f27dddf2a9",
  "patch": "diff --git a/django/views/generic/dates.py b/django/views/generic/dates.py\n--- a/django/views/generic/dates.py\n+++ b/django/views/generic/dates.py\n@@ -218,7 +218,7 @@ def _get_weekday(self, date):\n         The first day according to the week format is 0 and the last day is 6.\n         \"\"\"\n         week_format = self.get_week_format()\n-        if week_format == '%W':                 # week starts on Monday\n+        if week_format in {'%W', '%V'}:         # week starts on Monday\n             return date.weekday()\n         elif week_format == '%U':               # week starts on Sunday\n             return (date.weekday() + 1) % 7\n@@ -485,7 +485,7 @@ def get_dated_items(self):\n \n         date_field = self.get_date_field()\n         week_format = self.get_week_format()\n-        week_choices = {'%W': '1', '%U': '0'}\n+        week_choices = {'%W': '1', '%U': '0', '%V': '1'}\n         try:\n             week_start = week_choices[week_format]\n         except KeyError:\n@@ -493,10 +493,15 @@ def get_dated_items(self):\n                 week_format,\n                 ', '.join(sorted(week_choices)),\n             ))\n-        date = _date_from_string(year, self.get_year_format(),\n-                                 week_start, '%w',\n-                                 week, week_format)\n-\n+        year_format = self.get_year_format()\n+        if week_format == '%V' and year_format != '%G':\n+            raise ValueError(\n+                \"ISO week directive '%s' is incompatible with the year \"\n+                \"directive '%s'. Use the ISO year '%%G' instead.\" % (\n+                    week_format, year_format,\n+                )\n+            )\n+        date = _date_from_string(year, year_format, week_start, '%w', week, week_format)\n         since = self._make_date_lookup_arg(date)\n         until = self._make_date_lookup_arg(self._get_next_week(date))\n         lookup_kwargs = {\n",
  "test_patch": "diff --git a/tests/generic_views/test_dates.py b/tests/generic_views/test_dates.py\n--- a/tests/generic_views/test_dates.py\n+++ b/tests/generic_views/test_dates.py\n@@ -538,10 +538,29 @@ def test_week_start_Monday(self):\n         self.assertEqual(res.status_code, 200)\n         self.assertEqual(res.context['week'], datetime.date(2008, 9, 29))\n \n+    def test_week_iso_format(self):\n+        res = self.client.get('/dates/books/2008/week/40/iso_format/')\n+        self.assertEqual(res.status_code, 200)\n+        self.assertTemplateUsed(res, 'generic_views/book_archive_week.html')\n+        self.assertEqual(\n+            list(res.context['book_list']),\n+            [Book.objects.get(pubdate=datetime.date(2008, 10, 1))],\n+        )\n+        self.assertEqual(res.context['week'], datetime.date(2008, 9, 29))\n+\n     def test_unknown_week_format(self):\n-        with self.assertRaisesMessage(ValueError, \"Unknown week format '%T'. Choices are: %U, %W\"):\n+        msg = \"Unknown week format '%T'. Choices are: %U, %V, %W\"\n+        with self.assertRaisesMessage(ValueError, msg):\n             self.client.get('/dates/books/2008/week/39/unknown_week_format/')\n \n+    def test_incompatible_iso_week_format_view(self):\n+        msg = (\n+            \"ISO week directive '%V' is incompatible with the year directive \"\n+            \"'%Y'. Use the ISO year '%G' instead.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            self.client.get('/dates/books/2008/week/40/invalid_iso_week_year_format/')\n+\n     def test_datetime_week_view(self):\n         BookSigning.objects.create(event_date=datetime.datetime(2008, 4, 2, 12, 0))\n         res = self.client.get('/dates/booksignings/2008/week/13/')\ndiff --git a/tests/generic_views/urls.py b/tests/generic_views/urls.py\n--- a/tests/generic_views/urls.py\n+++ b/tests/generic_views/urls.py\n@@ -190,6 +190,14 @@\n         'dates/books/<int:year>/week/<int:week>/unknown_week_format/',\n         views.BookWeekArchive.as_view(week_format='%T'),\n     ),\n+    path(\n+        'dates/books/<int:year>/week/<int:week>/iso_format/',\n+        views.BookWeekArchive.as_view(year_format='%G', week_format='%V'),\n+    ),\n+    path(\n+        'dates/books/<int:year>/week/<int:week>/invalid_iso_week_year_format/',\n+        views.BookWeekArchive.as_view(week_format='%V'),\n+    ),\n     path('dates/booksignings/<int:year>/week/<int:week>/', views.BookSigningWeekArchive.as_view()),\n \n     # DayArchiveView\n",
  "problem_statement": "Support \"%V\" format in WeekArchiveView.\nDescription\n\t\n#26217 (Docs for WeekArchiveView are misleading about %W) - closed 4 years ago mentioned support for %V week format.\nSince python 3.6, %G, %u and %V ISO 8601 formatters were added to strptime.\nWeekArchiveView should add %V to the list of accepted week formatters. This would require as well the special case to change the year format to %G, or simply ValueError in _date_from_string should mention the message passed from datetime.datetime.strptime:\nISO week directive '%V' is incompatible with the year directive '%Y'. Use the ISO year '%G'.\n",
  "hints_text": "",
  "created_at": "2020-06-25T21:05:18Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_incompatible_iso_week_format_view (generic_views.test_dates.WeekArchiveViewTests)\", \"test_unknown_week_format (generic_views.test_dates.WeekArchiveViewTests)\", \"test_week_iso_format (generic_views.test_dates.WeekArchiveViewTests)\"]",
  "PASS_TO_PASS": "[\"test_aware_datetime_month_view (generic_views.test_dates.MonthArchiveViewTests)\", \"test_custom_month_format (generic_views.test_dates.MonthArchiveViewTests)\", \"date_list should be sorted ascending in month view\", \"test_datetime_month_view (generic_views.test_dates.MonthArchiveViewTests)\", \"test_month_view (generic_views.test_dates.MonthArchiveViewTests)\", \"test_month_view_allow_empty (generic_views.test_dates.MonthArchiveViewTests)\", \"test_month_view_allow_future (generic_views.test_dates.MonthArchiveViewTests)\", \"test_month_view_get_month_from_request (generic_views.test_dates.MonthArchiveViewTests)\", \"test_month_view_invalid_pattern (generic_views.test_dates.MonthArchiveViewTests)\", \"test_month_view_paginated (generic_views.test_dates.MonthArchiveViewTests)\", \"test_month_view_without_month_in_url (generic_views.test_dates.MonthArchiveViewTests)\", \"Content can exist on any day of the previous month. Refs #14711\", \"test_aware_datetime_date_detail (generic_views.test_dates.DateDetailViewTests)\", \"test_date_detail_allow_future (generic_views.test_dates.DateDetailViewTests)\", \"test_date_detail_by_pk (generic_views.test_dates.DateDetailViewTests)\", \"test_date_detail_by_slug (generic_views.test_dates.DateDetailViewTests)\", \"test_date_detail_custom_month_format (generic_views.test_dates.DateDetailViewTests)\", \"test_datetime_date_detail (generic_views.test_dates.DateDetailViewTests)\", \"test_get_object_custom_queryset (generic_views.test_dates.DateDetailViewTests)\", \"test_get_object_custom_queryset_numqueries (generic_views.test_dates.DateDetailViewTests)\", \"test_invalid_url (generic_views.test_dates.DateDetailViewTests)\", \"test_year_out_of_range (generic_views.test_dates.DateDetailViewTests)\", \"test_aware_datetime_day_view (generic_views.test_dates.DayArchiveViewTests)\", \"test_custom_month_format (generic_views.test_dates.DayArchiveViewTests)\", \"test_datetime_day_view (generic_views.test_dates.DayArchiveViewTests)\", \"test_day_view (generic_views.test_dates.DayArchiveViewTests)\", \"test_day_view_allow_empty (generic_views.test_dates.DayArchiveViewTests)\", \"test_day_view_allow_future (generic_views.test_dates.DayArchiveViewTests)\", \"test_day_view_invalid_pattern (generic_views.test_dates.DayArchiveViewTests)\", \"test_day_view_paginated (generic_views.test_dates.DayArchiveViewTests)\", \"test_next_prev_context (generic_views.test_dates.DayArchiveViewTests)\", \"test_today_view (generic_views.test_dates.DayArchiveViewTests)\", \"test_aware_datetime_year_view (generic_views.test_dates.YearArchiveViewTests)\", \"date_list should be sorted ascending in year view\", \"test_datetime_year_view (generic_views.test_dates.YearArchiveViewTests)\", \"test_get_context_data_receives_extra_context (generic_views.test_dates.YearArchiveViewTests)\", \"test_get_dated_items_not_implemented (generic_views.test_dates.YearArchiveViewTests)\", \"test_no_duplicate_query (generic_views.test_dates.YearArchiveViewTests)\", \"test_year_view (generic_views.test_dates.YearArchiveViewTests)\", \"test_year_view_allow_future (generic_views.test_dates.YearArchiveViewTests)\", \"test_year_view_custom_sort_order (generic_views.test_dates.YearArchiveViewTests)\", \"test_year_view_empty (generic_views.test_dates.YearArchiveViewTests)\", \"test_year_view_invalid_pattern (generic_views.test_dates.YearArchiveViewTests)\", \"test_year_view_make_object_list (generic_views.test_dates.YearArchiveViewTests)\", \"test_year_view_paginated (generic_views.test_dates.YearArchiveViewTests)\", \"test_year_view_two_custom_sort_orders (generic_views.test_dates.YearArchiveViewTests)\", \"test_aware_datetime_week_view (generic_views.test_dates.WeekArchiveViewTests)\", \"test_datetime_week_view (generic_views.test_dates.WeekArchiveViewTests)\", \"test_week_start_Monday (generic_views.test_dates.WeekArchiveViewTests)\", \"test_week_view (generic_views.test_dates.WeekArchiveViewTests)\", \"test_week_view_allow_empty (generic_views.test_dates.WeekArchiveViewTests)\", \"test_week_view_allow_future (generic_views.test_dates.WeekArchiveViewTests)\", \"test_week_view_invalid_pattern (generic_views.test_dates.WeekArchiveViewTests)\", \"test_week_view_paginated (generic_views.test_dates.WeekArchiveViewTests)\", \"test_allow_empty_archive_view (generic_views.test_dates.ArchiveIndexViewTests)\", \"test_archive_view (generic_views.test_dates.ArchiveIndexViewTests)\", \"test_archive_view_by_month (generic_views.test_dates.ArchiveIndexViewTests)\", \"test_archive_view_context_object_name (generic_views.test_dates.ArchiveIndexViewTests)\", \"test_archive_view_custom_sorting (generic_views.test_dates.ArchiveIndexViewTests)\", \"test_archive_view_custom_sorting_dec (generic_views.test_dates.ArchiveIndexViewTests)\", \"test_archive_view_invalid (generic_views.test_dates.ArchiveIndexViewTests)\", \"test_archive_view_template (generic_views.test_dates.ArchiveIndexViewTests)\", \"test_archive_view_template_suffix (generic_views.test_dates.ArchiveIndexViewTests)\", \"test_archive_view_without_date_field (generic_views.test_dates.ArchiveIndexViewTests)\", \"test_aware_datetime_archive_view (generic_views.test_dates.ArchiveIndexViewTests)\", \"date_list should be sorted descending in index\", \"test_datetime_archive_view (generic_views.test_dates.ArchiveIndexViewTests)\", \"test_empty_archive_view (generic_views.test_dates.ArchiveIndexViewTests)\", \"test_no_duplicate_query (generic_views.test_dates.ArchiveIndexViewTests)\", \"test_paginated_archive_view (generic_views.test_dates.ArchiveIndexViewTests)\", \"test_paginated_archive_view_does_not_load_entire_table (generic_views.test_dates.ArchiveIndexViewTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.643770",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}