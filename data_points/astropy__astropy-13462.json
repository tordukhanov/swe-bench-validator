{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-13462",
  "base_commit": "d441bfdbb8e6dc57a52d8c1b117cadd030f0657a",
  "patch": "diff --git a/astropy/time/utils.py b/astropy/time/utils.py\n--- a/astropy/time/utils.py\n+++ b/astropy/time/utils.py\n@@ -60,14 +60,16 @@ def day_frac(val1, val2, factor=None, divisor=None):\n \n     # get integer fraction\n     day = np.round(sum12)\n-    extra, frac = two_sum(sum12, -day)\n-    frac += extra + err12\n-    # Our fraction can now have gotten >0.5 or <-0.5, which means we would\n-    # loose one bit of precision. So, correct for that.\n-    excess = np.round(frac)\n+    # Calculate remaining fraction. This can have gotten >0.5 or <-0.5, which means\n+    # we would lose one bit of precision. So, correct for that.  Here, we need\n+    # particular care for the case that frac=0.5 and check>0 or frac=-0.5 and check<0,\n+    # since in that case if check is large enough, rounding was done the wrong way.\n+    frac, check = two_sum(sum12 - day, err12)\n+    excess = np.where(frac * np.sign(check) != 0.5, np.round(frac),\n+                      np.round(frac+2*check))\n     day += excess\n-    extra, frac = two_sum(sum12, -day)\n-    frac += extra + err12\n+    frac = sum12 - day\n+    frac += err12\n     return day, frac\n \n \n",
  "test_patch": "diff --git a/astropy/time/tests/test_basic.py b/astropy/time/tests/test_basic.py\n--- a/astropy/time/tests/test_basic.py\n+++ b/astropy/time/tests/test_basic.py\n@@ -2399,7 +2399,7 @@ def test_linspace():\n     \"\"\"\n     t1 = Time(['2021-01-01 00:00:00', '2021-01-02 00:00:00'])\n     t2 = Time(['2021-01-01 01:00:00', '2021-12-28 00:00:00'])\n-    atol = 1 * u.ps\n+    atol = 2 * np.finfo(float).eps * abs(t1 - t2).max()\n \n     ts = np.linspace(t1[0], t2[0], 3)\n     assert ts[0].isclose(Time('2021-01-01 00:00:00'), atol=atol)\n@@ -2409,13 +2409,13 @@ def test_linspace():\n     ts = np.linspace(t1, t2[0], 2, endpoint=False)\n     assert ts.shape == (2, 2)\n     assert all(ts[0].isclose(Time(['2021-01-01 00:00:00', '2021-01-02 00:00:00']), atol=atol))\n-    assert all(ts[1].isclose(Time(['2021-01-01 00:30:00', '2021-01-01 12:30:00']), atol=atol*10))\n+    assert all(ts[1].isclose(Time(['2021-01-01 00:30:00', '2021-01-01 12:30:00']), atol=atol))\n \n     ts = np.linspace(t1, t2, 7)\n     assert ts.shape == (7, 2)\n     assert all(ts[0].isclose(Time(['2021-01-01 00:00:00', '2021-01-02 00:00:00']), atol=atol))\n-    assert all(ts[1].isclose(Time(['2021-01-01 00:10:00', '2021-03-03 00:00:00']), atol=atol*300))\n-    assert all(ts[5].isclose(Time(['2021-01-01 00:50:00', '2021-10-29 00:00:00']), atol=atol*3000))\n+    assert all(ts[1].isclose(Time(['2021-01-01 00:10:00', '2021-03-03 00:00:00']), atol=atol))\n+    assert all(ts[5].isclose(Time(['2021-01-01 00:50:00', '2021-10-29 00:00:00']), atol=atol))\n     assert all(ts[6].isclose(Time(['2021-01-01 01:00:00', '2021-12-28 00:00:00']), atol=atol))\n \n \n@@ -2424,7 +2424,7 @@ def test_linspace_steps():\n     \"\"\"\n     t1 = Time(['2021-01-01 00:00:00', '2021-01-01 12:00:00'])\n     t2 = Time('2021-01-02 00:00:00')\n-    atol = 1 * u.ps\n+    atol = 2 * np.finfo(float).eps * abs(t1 - t2).max()\n \n     ts, st = np.linspace(t1, t2, 7, retstep=True)\n     assert ts.shape == (7, 2)\n@@ -2441,7 +2441,7 @@ def test_linspace_fmts():\n     t1 = Time(['2020-01-01 00:00:00', '2020-01-02 00:00:00'])\n     t2 = Time(2458850, format='jd')\n     t3 = Time(1578009600, format='unix')\n-    atol = 1 * u.ps\n+    atol = 2 * np.finfo(float).eps * abs(t1 - Time([t2, t3])).max()\n \n     ts = np.linspace(t1, t2, 3)\n     assert ts.shape == (3, 2)\ndiff --git a/astropy/time/tests/test_precision.py b/astropy/time/tests/test_precision.py\n--- a/astropy/time/tests/test_precision.py\n+++ b/astropy/time/tests/test_precision.py\n@@ -310,7 +310,12 @@ def test_two_sum(i, f):\n         assert_almost_equal(a, b, atol=Decimal(tiny), rtol=Decimal(0))\n \n \n-@given(floats(), floats())\n+# The bounds are here since we want to be sure the sum does not go to infinity,\n+# which does not have to be completely symmetric; e.g., this used to fail:\n+#     @example(f1=-3.089785075544792e307, f2=1.7976931348623157e308)\n+# See https://github.com/astropy/astropy/issues/12955#issuecomment-1186293703\n+@given(floats(min_value=np.finfo(float).min/2, max_value=np.finfo(float).max/2),\n+       floats(min_value=np.finfo(float).min/2, max_value=np.finfo(float).max/2))\n def test_two_sum_symmetric(f1, f2):\n     np.testing.assert_equal(two_sum(f1, f2), two_sum(f2, f1))\n \n@@ -339,6 +344,7 @@ def test_day_frac_harmless(i, f):\n \n @given(integers(-2**52+2, 2**52-2), floats(-0.5, 0.5))\n @example(i=65536, f=3.637978807091714e-12)\n+@example(i=1, f=0.49999999999999994)\n def test_day_frac_exact(i, f):\n     assume(abs(f) < 0.5 or i % 2 == 0)\n     i_d, f_d = day_frac(i, f)\n@@ -353,7 +359,7 @@ def test_day_frac_idempotent(i, f):\n     assert (i_d, f_d) == day_frac(i_d, f_d)\n \n \n-@given(integers(-2**52+2, 2**52-2), floats(-1, 1))\n+@given(integers(-2**52+2, 2**52-int(erfa.DJM0)-3), floats(-1, 1))\n @example(i=65536, f=3.637978807091714e-12)\n def test_mjd_initialization_precise(i, f):\n     t = Time(val=i, val2=f, format=\"mjd\", scale=\"tai\")\n@@ -377,24 +383,32 @@ def test_day_frac_round_to_even(jd1, jd2):\n     assert (abs(t_jd2) == 0.5) and (t_jd1 % 2 == 0)\n \n \n-@given(scale=sampled_from(STANDARD_TIME_SCALES), jds=unreasonable_jd())\n+@given(scale=sampled_from([sc for sc in STANDARD_TIME_SCALES if sc != 'utc']),\n+       jds=unreasonable_jd())\n @example(scale=\"tai\", jds=(0.0, 0.0))\n @example(scale=\"tai\", jds=(0.0, -31738.500000000346))\n def test_resolution_never_decreases(scale, jds):\n     jd1, jd2 = jds\n-    assume(not scale == 'utc' or 2440000 < jd1 + jd2 < 2460000)\n     t = Time(jd1, jd2, format=\"jd\", scale=scale)\n     with quiet_erfa():\n         assert t != t + dt_tiny\n \n \n @given(reasonable_jd())\n+@example(jds=(2442777.5, 0.9999999999999999))\n def test_resolution_never_decreases_utc(jds):\n-    \"\"\"UTC is very unhappy with unreasonable times\"\"\"\n+    \"\"\"UTC is very unhappy with unreasonable times,\n+\n+    Unlike for the other timescales, in which addition is done\n+    directly, here the time is transformed to TAI before addition, and\n+    then back to UTC.  Hence, some rounding errors can occur and only\n+    a change of 2*dt_tiny is guaranteed to give a different time.\n+\n+    \"\"\"\n     jd1, jd2 = jds\n     t = Time(jd1, jd2, format=\"jd\", scale=\"utc\")\n     with quiet_erfa():\n-        assert t != t + dt_tiny\n+        assert t != t + 2*dt_tiny\n \n \n @given(scale1=sampled_from(STANDARD_TIME_SCALES),\n@@ -422,6 +436,8 @@ def test_conversion_preserves_jd1_jd2_invariant(iers_b, scale1, scale2, jds):\n        scale2=sampled_from(STANDARD_TIME_SCALES),\n        jds=unreasonable_jd())\n @example(scale1='tai', scale2='utc', jds=(0.0, 0.0))\n+@example(scale1='utc', scale2='ut1', jds=(2441316.5, 0.9999999999999991))\n+@example(scale1='ut1', scale2='tai', jds=(2441498.5, 0.9999999999999999))\n def test_conversion_never_loses_precision(iers_b, scale1, scale2, jds):\n     \"\"\"Check that time ordering remains if we convert to another scale.\n \n@@ -440,7 +456,9 @@ def test_conversion_never_loses_precision(iers_b, scale1, scale2, jds):\n     try:\n         with quiet_erfa():\n             t2 = t + tiny\n-            assert getattr(t, scale2) < getattr(t2, scale2)\n+            t_scale2 = getattr(t, scale2)\n+            t2_scale2 = getattr(t2, scale2)\n+            assert t_scale2 < t2_scale2\n     except iers.IERSRangeError:  # UT1 conversion needs IERS data\n         assume(scale1 != 'ut1' or 2440000 < jd1 + jd2 < 2458000)\n         assume(scale2 != 'ut1' or 2440000 < jd1 + jd2 < 2458000)\n@@ -454,6 +472,19 @@ def test_conversion_never_loses_precision(iers_b, scale1, scale2, jds):\n         geocentric = {scale1, scale2}.issubset({'tai', 'tt', 'tcg'})\n         assume(jd1 + jd2 >= -31738.5 or geocentric or barycentric)\n         raise\n+    except AssertionError:\n+        # Before 1972, TAI-UTC changed smoothly but not always very\n+        # consistently; this can cause trouble on day boundaries for UTC to\n+        # UT1; it is not clear whether this will ever be resolved (and is\n+        # unlikely ever to matter).\n+        # Furthermore, exactly at leap-second boundaries, it is possible to\n+        # get the wrong leap-second correction due to rounding errors.\n+        # The latter is xfail'd for now, but should be fixed; see gh-13517.\n+        if 'ut1' in (scale1, scale2):\n+            if abs(t_scale2 - t2_scale2 - 1 * u.s) < 1*u.ms:\n+                pytest.xfail()\n+            assume(t.jd > 2441317.5 or t.jd2 < 0.4999999)\n+        raise\n \n \n @given(sampled_from(leap_second_deltas), floats(0.1, 0.9))\n@@ -477,9 +508,11 @@ def test_leap_stretch_mjd(d, f):\n          jds=(2441682.5, 2.2204460492503136e-16),\n          delta=7.327471962526035e-12)\n @example(scale='utc', jds=(0.0, 5.787592627370942e-13), delta=0.0)\n+@example(scale='utc', jds=(1.0, 0.25000000023283064), delta=-1.0)\n def test_jd_add_subtract_round_trip(scale, jds, delta):\n     jd1, jd2 = jds\n-    if scale == 'utc' and abs(jd1+jd2) < 1:\n+    if scale == 'utc' and (jd1+jd2 < 1\n+                           or jd1+jd2+delta < 1):\n         # Near-zero UTC JDs degrade accuracy; not clear why,\n         # but also not so relevant, so ignoring.\n         thresh = 100*u.us\n@@ -498,17 +531,25 @@ def test_jd_add_subtract_round_trip(scale, jds, delta):\n         raise\n \n \n-@given(scale=sampled_from(STANDARD_TIME_SCALES),\n+@given(scale=sampled_from(TimeDelta.SCALES),\n        jds=reasonable_jd(),\n        delta=floats(-3*tiny, 3*tiny))\n @example(scale='tai', jds=(0.0, 3.5762786865234384), delta=2.220446049250313e-16)\n+@example(scale='tai', jds=(2441316.5, 0.0), delta=6.938893903907228e-17)\n+@example(scale='tai', jds=(2441317.5, 0.0), delta=-6.938893903907228e-17)\n+@example(scale='tai', jds=(2440001.0, 0.49999999999999994), delta=5.551115123125783e-17)\n def test_time_argminmaxsort(scale, jds, delta):\n     jd1, jd2 = jds\n-    t = Time(jd1, jd2+np.array([0, delta]), scale=scale, format=\"jd\")\n+    t = (Time(jd1, jd2, scale=scale, format=\"jd\")\n+         + TimeDelta([0, delta], scale=scale, format='jd'))\n     imin = t.argmin()\n     imax = t.argmax()\n     isort = t.argsort()\n-    diff = (t.jd1[1]-t.jd1[0]) + (t.jd2[1]-t.jd2[0])\n+    # Be careful in constructing diff, for case that abs(jd2[1]-jd2[0]) ~ 1.\n+    # and that is compensated by jd1[1]-jd1[0] (see example above).\n+    diff, extra = two_sum(t.jd2[1], -t.jd2[0])\n+    diff += t.jd1[1]-t.jd1[0]\n+    diff += extra\n     if diff < 0:  # item 1 smaller\n         assert delta < 0\n         assert imin == 1 and imax == 0 and np.all(isort == [1, 0])\n",
  "problem_statement": "TST: time/tests/test_precision.py failed in pyinstaller (computed error is different depending on the order of the arguments)\nFirst failing log (2022-03-13): https://github.com/astropy/astropy/runs/5525474634\r\n\r\nLast successful log (2022-03-12): https://github.com/astropy/astropy/runs/5519547613\r\n\r\nLooks like this test was added in #10373 . Any idea how to fix, @Zac-HD or @mhvk ? 🙏 \r\n\r\nhttps://github.com/astropy/astropy/blob/c7b0e928e82dc7a4e099124d5223700e5bb4cfe2/astropy/time/tests/test_precision.py#L313-L315\r\n\r\n```\r\n____________________________ test_two_sum_symmetric ____________________________\r\n\r\n    @given(floats(), floats())\r\n>   def test_two_sum_symmetric(f1, f2):\r\n\r\nastropy_tests/time/tests/test_precision.py:314: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nf1 = -3.089785075544792e+307, f2 = 1.7976931348623157e+308\r\n\r\n    @given(floats(), floats())\r\n    def test_two_sum_symmetric(f1, f2):\r\n>       np.testing.assert_equal(two_sum(f1, f2), two_sum(f2, f1))\r\nE       AssertionError: \r\nE       Items are not equal:\r\nE       item=1\r\nE       \r\nE        ACTUAL: nan\r\nE        DESIRED: -9.9792015476736e+291\r\n\r\nastropy_tests/time/tests/test_precision.py:315: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\nFalsifying example: test_two_sum_symmetric(\r\n    f1=-3.089785075544792e+307, f2=1.7976931348623157e+308,\r\n)\r\n```\n",
  "hints_text": "At a glance, I don't see any version change in numpy, hypothesis, etc. Is this transient? 🤔 (Restarted the failed job.)\nOK passed now. Sorry for the noise.\nLooks to me like a genuine failing example, where the computed error is different depending on the order of the arguments:\r\n\r\n```python\r\n@example(f1=-3.089785075544792e307, f2=1.7976931348623157e308)\r\n@given(st.floats(), st.floats())\r\ndef test_two_sum_symmetric(f1, f2):\r\n    f1_f2 = two_sum(f1, f2)\r\n    f2_f1 = two_sum(f2, f1)\r\n    note(f\"{f1_f2=}\")\r\n    note(f\"{f2_f1=}\")\r\n    numpy.testing.assert_equal(f1_f2, f2_f1)\r\n```\r\n```python-traceback\r\n---------------------------------------------- Hypothesis ----------------------------------------------- \r\nFalsifying explicit example: test_two_sum_symmetric(\r\n    f1=-3.089785075544792e+307, f2=1.7976931348623157e+308,\r\n)\r\nf1_f2=(1.4887146273078366e+308, nan)\r\nf2_f1=(1.4887146273078366e+308, -9.9792015476736e+291)\r\n```\r\n\r\nThis might have been latent for a while, since it looks like it only fails for args *very* close to the maximum finite float64, but there you are.  You might also take this as an argument in favor of persisting the database between CI runs, to avoid losing rare failures once you find them.\nThanks for the clarification, @Zac-HD ! I re-opened the issue and marked it as a real bug.",
  "created_at": "2022-07-16T16:57:17Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"astropy/time/tests/test_precision.py::test_day_frac_exact\"]",
  "PASS_TO_PASS": "[\"astropy/time/tests/test_basic.py::TestBasic::test_different_dimensions\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[jd]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[mjd]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[decimalyear]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[unix]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[unix_tai]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[cxcsec]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[gps]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[plot_date]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[stardate]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[datetime]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[ymdhms]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[iso]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[isot]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[yday]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[datetime64]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[fits]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[byear]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[jyear]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[byear_str]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[jyear_str]\", \"astropy/time/tests/test_basic.py::TestBasic::test_copy_time[2455197.5]\", \"astropy/time/tests/test_basic.py::TestBasic::test_copy_time[value1]\", \"astropy/time/tests/test_basic.py::TestBasic::test_getitem\", \"astropy/time/tests/test_basic.py::TestBasic::test_properties\", \"astropy/time/tests/test_basic.py::TestBasic::test_precision\", \"astropy/time/tests/test_basic.py::TestBasic::test_precision_input\", \"astropy/time/tests/test_basic.py::TestBasic::test_transforms\", \"astropy/time/tests/test_basic.py::TestBasic::test_transforms_no_location\", \"astropy/time/tests/test_basic.py::TestBasic::test_location\", \"astropy/time/tests/test_basic.py::TestBasic::test_location_array\", \"astropy/time/tests/test_basic.py::TestBasic::test_all_scale_transforms\", \"astropy/time/tests/test_basic.py::TestBasic::test_creating_all_formats\", \"astropy/time/tests/test_basic.py::TestBasic::test_local_format_transforms\", \"astropy/time/tests/test_basic.py::TestBasic::test_datetime\", \"astropy/time/tests/test_basic.py::TestBasic::test_datetime64\", \"astropy/time/tests/test_basic.py::TestBasic::test_epoch_transform\", \"astropy/time/tests/test_basic.py::TestBasic::test_input_validation\", \"astropy/time/tests/test_basic.py::TestBasic::test_utc_leap_sec\", \"astropy/time/tests/test_basic.py::TestBasic::test_init_from_time_objects\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d0]\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d1]\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d2]\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d3]\", \"astropy/time/tests/test_basic.py::TestVal2::test_val2\", \"astropy/time/tests/test_basic.py::TestVal2::test_val_broadcasts_against_val2\", \"astropy/time/tests/test_basic.py::TestVal2::test_broadcast_not_writable\", \"astropy/time/tests/test_basic.py::TestVal2::test_broadcast_one_not_writable\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_input_subformat\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_input_subformat_fail\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_bad_input_subformat\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_output_subformat\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_fits_format\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_yday_format\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_scale_input\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_fits_scale\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_scale_default\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_epoch_times\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_plot_date\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_example\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_longdouble\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_longdouble_one_val\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_longdouble_for_other_types[mjd]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_longdouble_for_other_types[unix]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_longdouble_for_other_types[cxcsec]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_subformat_input\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_subformat_output[str]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_subformat_output[bytes]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[jd-2451544.5333981-2451544.5-0.0333981]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[decimalyear-2000.54321-2000.0-0.54321]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[cxcsec-100.0123456-100.0123456-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[unix-100.0123456-100.0123456-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[gps-100.0123456-100.0123456-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[byear-1950.1-1950.1-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[jyear-2000.1-2000.1-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_basic_subformat_setting\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_basic_subformat_cache_does_not_crash\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[jd]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[mjd]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[cxcsec]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[unix]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[gps]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[jyear]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_caching\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_timedelta_basic[sec-long-longdouble]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_timedelta_basic[sec-decimal-Decimal]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_timedelta_basic[sec-str-str]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_need_format_argument\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_wrong_in_subfmt\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_wrong_subfmt\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_not_allowed_subfmt\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_switch_to_format_with_no_out_subfmt\", \"astropy/time/tests/test_basic.py::TestSofaErrors::test_bad_time\", \"astropy/time/tests/test_basic.py::TestCopyReplicate::test_immutable_input\", \"astropy/time/tests/test_basic.py::TestCopyReplicate::test_replicate\", \"astropy/time/tests/test_basic.py::TestCopyReplicate::test_copy\", \"astropy/time/tests/test_basic.py::TestStardate::test_iso_to_stardate\", \"astropy/time/tests/test_basic.py::TestStardate::test_stardate_to_iso[dates0]\", \"astropy/time/tests/test_basic.py::TestStardate::test_stardate_to_iso[dates1]\", \"astropy/time/tests/test_basic.py::TestStardate::test_stardate_to_iso[dates2]\", \"astropy/time/tests/test_basic.py::test_python_builtin_copy\", \"astropy/time/tests/test_basic.py::test_now\", \"astropy/time/tests/test_basic.py::test_decimalyear\", \"astropy/time/tests/test_basic.py::test_fits_year0\", \"astropy/time/tests/test_basic.py::test_fits_year10000\", \"astropy/time/tests/test_basic.py::test_dir\", \"astropy/time/tests/test_basic.py::test_time_from_epoch_jds\", \"astropy/time/tests/test_basic.py::test_bool\", \"astropy/time/tests/test_basic.py::test_len_size\", \"astropy/time/tests/test_basic.py::test_TimeFormat_scale\", \"astropy/time/tests/test_basic.py::test_byteorder\", \"astropy/time/tests/test_basic.py::test_datetime_tzinfo\", \"astropy/time/tests/test_basic.py::test_subfmts_regex\", \"astropy/time/tests/test_basic.py::test_set_format_basic\", \"astropy/time/tests/test_basic.py::test_unix_tai_format\", \"astropy/time/tests/test_basic.py::test_set_format_shares_subfmt\", \"astropy/time/tests/test_basic.py::test_set_format_does_not_share_subfmt\", \"astropy/time/tests/test_basic.py::test_replicate_value_error\", \"astropy/time/tests/test_basic.py::test_remove_astropy_time\", \"astropy/time/tests/test_basic.py::test_isiterable\", \"astropy/time/tests/test_basic.py::test_to_datetime\", \"astropy/time/tests/test_basic.py::test_cache\", \"astropy/time/tests/test_basic.py::test_epoch_date_jd_is_day_fraction\", \"astropy/time/tests/test_basic.py::test_sum_is_equivalent\", \"astropy/time/tests/test_basic.py::test_string_valued_columns\", \"astropy/time/tests/test_basic.py::test_bytes_input\", \"astropy/time/tests/test_basic.py::test_writeable_flag\", \"astropy/time/tests/test_basic.py::test_setitem_location\", \"astropy/time/tests/test_basic.py::test_setitem_from_python_objects\", \"astropy/time/tests/test_basic.py::test_setitem_from_time_objects\", \"astropy/time/tests/test_basic.py::test_setitem_bad_item\", \"astropy/time/tests/test_basic.py::test_setitem_deltas\", \"astropy/time/tests/test_basic.py::test_subclass\", \"astropy/time/tests/test_basic.py::test_strftime_scalar\", \"astropy/time/tests/test_basic.py::test_strftime_array\", \"astropy/time/tests/test_basic.py::test_strftime_array_2\", \"astropy/time/tests/test_basic.py::test_strftime_leapsecond\", \"astropy/time/tests/test_basic.py::test_strptime_scalar\", \"astropy/time/tests/test_basic.py::test_strptime_array\", \"astropy/time/tests/test_basic.py::test_strptime_badinput\", \"astropy/time/tests/test_basic.py::test_strptime_input_bytes_scalar\", \"astropy/time/tests/test_basic.py::test_strptime_input_bytes_array\", \"astropy/time/tests/test_basic.py::test_strptime_leapsecond\", \"astropy/time/tests/test_basic.py::test_strptime_3_digit_year\", \"astropy/time/tests/test_basic.py::test_strptime_fracsec_scalar\", \"astropy/time/tests/test_basic.py::test_strptime_fracsec_array\", \"astropy/time/tests/test_basic.py::test_strftime_scalar_fracsec\", \"astropy/time/tests/test_basic.py::test_strftime_scalar_fracsec_precision\", \"astropy/time/tests/test_basic.py::test_strftime_array_fracsec\", \"astropy/time/tests/test_basic.py::test_insert_time\", \"astropy/time/tests/test_basic.py::test_insert_exceptions\", \"astropy/time/tests/test_basic.py::test_datetime64_no_format\", \"astropy/time/tests/test_basic.py::test_hash_time\", \"astropy/time/tests/test_basic.py::test_hash_time_delta\", \"astropy/time/tests/test_basic.py::test_get_time_fmt_exception_messages\", \"astropy/time/tests/test_basic.py::test_ymdhms_defaults\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs0-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs0-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs0-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs1-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs1-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs1-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs0-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs0-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs0-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs1-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs1-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs1-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_dict_array\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_dict_scalar[kwargs0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_dict_scalar[kwargs1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_exceptions\", \"astropy/time/tests/test_basic.py::test_ymdhms_masked\", \"astropy/time/tests/test_basic.py::test_ymdhms_output\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[jd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[mjd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[decimalyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[unix]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[unix_tai]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[cxcsec]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[gps]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[plot_date]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[stardate]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[datetime]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[ymdhms]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[iso]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[isot]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[yday]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[datetime64]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[fits]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[byear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[jyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[byear_str]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[jyear_str]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[jd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[mjd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[decimalyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[unix]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[unix_tai]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[cxcsec]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[gps]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[plot_date]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[stardate]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[datetime]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[ymdhms]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[iso]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[isot]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[yday]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[datetime64]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[fits]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[byear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[jyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[byear_str]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[jyear_str]\", \"astropy/time/tests/test_basic.py::test_broadcasting_writeable\", \"astropy/time/tests/test_basic.py::test_format_subformat_compatibility\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[jd-TimeJD]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[mjd-TimeMJD]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[decimalyear-TimeDecimalYear]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[unix-TimeUnix]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[unix_tai-TimeUnixTai]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[cxcsec-TimeCxcSec]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[gps-TimeGPS]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[plot_date-TimePlotDate]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[stardate-TimeStardate]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[datetime-TimeDatetime]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[ymdhms-TimeYMDHMS]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[iso-TimeISO]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[isot-TimeISOT]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[yday-TimeYearDayTime]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[datetime64-TimeDatetime64]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[fits-TimeFITS]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[byear-TimeBesselianEpoch]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[jyear-TimeJulianEpoch]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[byear_str-TimeBesselianEpochString]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[jyear_str-TimeJulianEpochString]\", \"astropy/time/tests/test_basic.py::test_location_init[None]\", \"astropy/time/tests/test_basic.py::test_location_init[location1]\", \"astropy/time/tests/test_basic.py::test_location_init_fail\", \"astropy/time/tests/test_basic.py::test_linspace\", \"astropy/time/tests/test_basic.py::test_linspace_steps\", \"astropy/time/tests/test_basic.py::test_linspace_fmts\", \"astropy/time/tests/test_precision.py::test_abs_jd2_always_less_than_half\", \"astropy/time/tests/test_precision.py::test_abs_jd2_always_less_than_half_on_construction\", \"astropy/time/tests/test_precision.py::test_round_to_even\", \"astropy/time/tests/test_precision.py::test_addition\", \"astropy/time/tests/test_precision.py::test_mult_div\", \"astropy/time/tests/test_precision.py::test_init_variations\", \"astropy/time/tests/test_precision.py::test_precision_exceeds_64bit\", \"astropy/time/tests/test_precision.py::test_through_scale_change\", \"astropy/time/tests/test_precision.py::test_iso_init\", \"astropy/time/tests/test_precision.py::test_jd1_is_mult_of_one\", \"astropy/time/tests/test_precision.py::test_precision_neg\", \"astropy/time/tests/test_precision.py::test_precision_epoch\", \"astropy/time/tests/test_precision.py::test_leap_seconds_rounded_correctly\", \"astropy/time/tests/test_precision.py::test_two_sum\", \"astropy/time/tests/test_precision.py::test_two_sum_symmetric\", \"astropy/time/tests/test_precision.py::test_two_sum_size\", \"astropy/time/tests/test_precision.py::test_day_frac_harmless\", \"astropy/time/tests/test_precision.py::test_day_frac_idempotent\", \"astropy/time/tests/test_precision.py::test_mjd_initialization_precise\", \"astropy/time/tests/test_precision.py::test_day_frac_always_less_than_half\", \"astropy/time/tests/test_precision.py::test_day_frac_round_to_even\", \"astropy/time/tests/test_precision.py::test_resolution_never_decreases\", \"astropy/time/tests/test_precision.py::test_resolution_never_decreases_utc\", \"astropy/time/tests/test_precision.py::test_conversion_preserves_jd1_jd2_invariant\", \"astropy/time/tests/test_precision.py::test_leap_stretch_mjd\", \"astropy/time/tests/test_precision.py::test_jd_add_subtract_round_trip\", \"astropy/time/tests/test_precision.py::test_time_argminmaxsort\", \"astropy/time/tests/test_precision.py::test_timedelta_full_precision\", \"astropy/time/tests/test_precision.py::test_timedelta_full_precision_arithmetic\", \"astropy/time/tests/test_precision.py::test_timedelta_conversion\", \"astropy/time/tests/test_precision.py::test_datetime_difference_agrees_with_timedelta[tai]\", \"astropy/time/tests/test_precision.py::test_datetime_difference_agrees_with_timedelta[tcb]\", \"astropy/time/tests/test_precision.py::test_datetime_difference_agrees_with_timedelta[tcg]\", \"astropy/time/tests/test_precision.py::test_datetime_difference_agrees_with_timedelta[tdb]\", \"astropy/time/tests/test_precision.py::test_datetime_difference_agrees_with_timedelta[tt]\", \"astropy/time/tests/test_precision.py::test_datetime_difference_agrees_with_timedelta[ut1]\", \"astropy/time/tests/test_precision.py::test_datetime_to_timedelta[tai]\", \"astropy/time/tests/test_precision.py::test_datetime_to_timedelta[tcb]\", \"astropy/time/tests/test_precision.py::test_datetime_to_timedelta[tcg]\", \"astropy/time/tests/test_precision.py::test_datetime_to_timedelta[tdb]\", \"astropy/time/tests/test_precision.py::test_datetime_to_timedelta[tt]\", \"astropy/time/tests/test_precision.py::test_datetime_to_timedelta[ut1]\", \"astropy/time/tests/test_precision.py::test_datetime_timedelta_roundtrip[tai]\", \"astropy/time/tests/test_precision.py::test_datetime_timedelta_roundtrip[tcb]\", \"astropy/time/tests/test_precision.py::test_datetime_timedelta_roundtrip[tcg]\", \"astropy/time/tests/test_precision.py::test_datetime_timedelta_roundtrip[tdb]\", \"astropy/time/tests/test_precision.py::test_datetime_timedelta_roundtrip[tt]\", \"astropy/time/tests/test_precision.py::test_datetime_timedelta_roundtrip[ut1]\", \"astropy/time/tests/test_precision.py::test_timedelta_datetime_roundtrip[tai]\", \"astropy/time/tests/test_precision.py::test_timedelta_datetime_roundtrip[tcb]\", \"astropy/time/tests/test_precision.py::test_timedelta_datetime_roundtrip[tcg]\", \"astropy/time/tests/test_precision.py::test_timedelta_datetime_roundtrip[tdb]\", \"astropy/time/tests/test_precision.py::test_timedelta_datetime_roundtrip[tt]\", \"astropy/time/tests/test_precision.py::test_timedelta_datetime_roundtrip[ut1]\", \"astropy/time/tests/test_precision.py::test_timedelta_from_parts[tai]\", \"astropy/time/tests/test_precision.py::test_timedelta_from_parts[tcb]\", \"astropy/time/tests/test_precision.py::test_timedelta_from_parts[tcg]\", \"astropy/time/tests/test_precision.py::test_timedelta_from_parts[tdb]\", \"astropy/time/tests/test_precision.py::test_timedelta_from_parts[tt]\", \"astropy/time/tests/test_precision.py::test_timedelta_from_parts[ut1]\", \"astropy/time/tests/test_precision.py::test_datetime_difference_agrees_with_timedelta_no_hypothesis\", \"astropy/time/tests/test_precision.py::test_datetime_timedelta_sum[tai]\", \"astropy/time/tests/test_precision.py::test_datetime_timedelta_sum[tcb]\", \"astropy/time/tests/test_precision.py::test_datetime_timedelta_sum[tcg]\", \"astropy/time/tests/test_precision.py::test_datetime_timedelta_sum[tdb]\", \"astropy/time/tests/test_precision.py::test_datetime_timedelta_sum[tt]\", \"astropy/time/tests/test_precision.py::test_datetime_timedelta_sum[ut1]\", \"astropy/time/tests/test_precision.py::test_sidereal_lat_independent[apparent]\", \"astropy/time/tests/test_precision.py::test_sidereal_lat_independent[mean]\", \"astropy/time/tests/test_precision.py::test_sidereal_lon_independent[apparent]\", \"astropy/time/tests/test_precision.py::test_sidereal_lon_independent[mean]\"]",
  "environment_setup_commit": "cdf311e0714e611d48b0a31eb1f0e2cbffab7f23",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.531816",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}