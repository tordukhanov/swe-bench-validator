{
  "repo": "django/django",
  "instance_id": "django__django-14969",
  "base_commit": "4bfe8c0eec835b8eaffcda7dc1e3b203751a790a",
  "patch": "diff --git a/django/contrib/auth/models.py b/django/contrib/auth/models.py\n--- a/django/contrib/auth/models.py\n+++ b/django/contrib/auth/models.py\n@@ -8,6 +8,7 @@\n from django.db import models\n from django.db.models.manager import EmptyManager\n from django.utils import timezone\n+from django.utils.itercompat import is_iterable\n from django.utils.translation import gettext_lazy as _\n \n from .validators import UnicodeUsernameValidator\n@@ -304,6 +305,8 @@ def has_perms(self, perm_list, obj=None):\n         Return True if the user has each of the specified permissions. If\n         object is passed, check if the user has all required perms for it.\n         \"\"\"\n+        if not is_iterable(perm_list) or isinstance(perm_list, str):\n+            raise ValueError('perm_list must be an iterable of permissions.')\n         return all(self.has_perm(perm, obj) for perm in perm_list)\n \n     def has_module_perms(self, app_label):\n@@ -452,6 +455,8 @@ def has_perm(self, perm, obj=None):\n         return _user_has_perm(self, perm, obj=obj)\n \n     def has_perms(self, perm_list, obj=None):\n+        if not is_iterable(perm_list) or isinstance(perm_list, str):\n+            raise ValueError('perm_list must be an iterable of permissions.')\n         return all(self.has_perm(perm, obj) for perm in perm_list)\n \n     def has_module_perms(self, module):\n",
  "test_patch": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -53,6 +53,13 @@ def test_has_perm(self):\n         self.assertIs(self.user.has_perm('group_perm'), True)\n         self.assertIs(self.user.has_perm('other_perm', TestObj()), False)\n \n+    def test_has_perms_perm_list_invalid(self):\n+        msg = 'perm_list must be an iterable of permissions.'\n+        with self.assertRaisesMessage(ValueError, msg):\n+            self.user.has_perms('user_perm')\n+        with self.assertRaisesMessage(ValueError, msg):\n+            self.user.has_perms(object())\n+\n \n class CountingMD5PasswordHasher(MD5PasswordHasher):\n     \"\"\"Hasher that counts how many times it computes a hash.\"\"\"\n@@ -476,6 +483,13 @@ def test_has_perms(self):\n         self.assertIs(self.user1.has_perms(['anon'], TestObj()), True)\n         self.assertIs(self.user1.has_perms(['anon', 'perm'], TestObj()), False)\n \n+    def test_has_perms_perm_list_invalid(self):\n+        msg = 'perm_list must be an iterable of permissions.'\n+        with self.assertRaisesMessage(ValueError, msg):\n+            self.user1.has_perms('perm')\n+        with self.assertRaisesMessage(ValueError, msg):\n+            self.user1.has_perms(object())\n+\n     def test_has_module_perms(self):\n         self.assertIs(self.user1.has_module_perms(\"app1\"), True)\n         self.assertIs(self.user1.has_module_perms(\"app2\"), False)\n",
  "problem_statement": "Raise an error if a string is passed into has_perms() instead of a list\nDescription\n\t \n\t\t(last modified by lieryan)\n\t \nA colleague made this error recently doing a user.has_perms(\"foobar\") instead of the correct user.has_perms([\"foobar\"]) or user.has_perm(\"foobar\"). The code initially appeared to work fine since in Python, str is an iterable that returned individual characters as string when iterated over.\nWe checked for str in particular rather than enforcing it to be a list, since perm_list may actually be tuple, set, generators, or other iterables.\nAn alternative way this could be fixed is to just silently behave like has_perm() if perm_list is actually a string rather than raising an error, but that'll probably enforce a bad habit.\nPull request in Github (â€‹https://github.com/django/django/pull/14969).\n",
  "hints_text": "",
  "created_at": "2021-10-11T04:15:07Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_has_perms_perm_list_invalid (auth_tests.test_auth_backends.AnonymousUserBackendTest)\", \"test_has_perms_perm_list_invalid (auth_tests.test_auth_backends.BaseBackendTest)\"]",
  "PASS_TO_PASS": "[\"test_get_all_permissions (auth_tests.test_auth_backends.AnonymousUserBackendTest)\", \"test_has_module_perms (auth_tests.test_auth_backends.AnonymousUserBackendTest)\", \"test_has_perm (auth_tests.test_auth_backends.AnonymousUserBackendTest)\", \"test_has_perms (auth_tests.test_auth_backends.AnonymousUserBackendTest)\", \"test_raises_exception (auth_tests.test_auth_backends.NoBackendsTest)\", \"test_has_module_perms (auth_tests.test_auth_backends.InActiveUserBackendTest)\", \"test_has_perm (auth_tests.test_auth_backends.InActiveUserBackendTest)\", \"test_get_all_permissions (auth_tests.test_auth_backends.BaseBackendTest)\", \"test_get_group_permissions (auth_tests.test_auth_backends.BaseBackendTest)\", \"test_get_user_permissions (auth_tests.test_auth_backends.BaseBackendTest)\", \"test_has_perm (auth_tests.test_auth_backends.BaseBackendTest)\", \"test_get_all_permissions (auth_tests.test_auth_backends.RowlevelBackendTest)\", \"test_get_group_permissions (auth_tests.test_auth_backends.RowlevelBackendTest)\", \"test_has_perm (auth_tests.test_auth_backends.RowlevelBackendTest)\", \"test_authenticates (auth_tests.test_auth_backends.PermissionDeniedBackendTest)\", \"test_has_perm (auth_tests.test_auth_backends.PermissionDeniedBackendTest)\", \"test_has_perm_denied (auth_tests.test_auth_backends.PermissionDeniedBackendTest)\", \"user is not authenticated after a backend raises permission denied #2550\", \"test_authenticate (auth_tests.test_auth_backends.AllowAllUsersModelBackendTest)\", \"test_get_user (auth_tests.test_auth_backends.AllowAllUsersModelBackendTest)\", \"test_backend_path (auth_tests.test_auth_backends.ImportedBackendTests)\", \"Removing a backend configured in AUTHENTICATION_BACKENDS makes already\", \"test_backend_path_login_with_explicit_backends (auth_tests.test_auth_backends.SelectingBackendTests)\", \"test_backend_path_login_without_authenticate_multiple_backends (auth_tests.test_auth_backends.SelectingBackendTests)\", \"test_backend_path_login_without_authenticate_single_backend (auth_tests.test_auth_backends.SelectingBackendTests)\", \"test_non_string_backend (auth_tests.test_auth_backends.SelectingBackendTests)\", \"test_does_not_shadow_exception (auth_tests.test_auth_backends.ImproperlyConfiguredUserModelTest)\", \"test_authenticate (auth_tests.test_auth_backends.CustomUserModelBackendAuthenticateTest)\", \"A custom user with a UUID primary key should be able to login.\", \"#17903 -- Anonymous users shouldn't have permissions in\", \"An inactive user can't authenticate.\", \"A custom user without an `is_active` field is allowed to authenticate.\", \"Hasher is run once regardless of whether the user exists. Refs #20760.\", \"test_authentication_without_credentials (auth_tests.test_auth_backends.ModelBackendTest)\", \"test_custom_perms (auth_tests.test_auth_backends.ModelBackendTest)\", \"A superuser has all permissions. Refs #14795.\", \"Regressiontest for #12462\", \"test_has_perm (auth_tests.test_auth_backends.ModelBackendTest)\", \"#17903 -- Inactive users shouldn't have permissions in\", \"test_authentication_without_credentials (auth_tests.test_auth_backends.CustomPermissionsUserModelBackendTest)\", \"test_custom_perms (auth_tests.test_auth_backends.CustomPermissionsUserModelBackendTest)\", \"test_has_perm (auth_tests.test_auth_backends.CustomPermissionsUserModelBackendTest)\", \"test_authentication_without_credentials (auth_tests.test_auth_backends.ExtensionUserModelBackendTest)\", \"test_custom_perms (auth_tests.test_auth_backends.ExtensionUserModelBackendTest)\", \"test_has_perm (auth_tests.test_auth_backends.ExtensionUserModelBackendTest)\", \"test_authenticate_sensitive_variables (auth_tests.test_auth_backends.AuthenticateTests)\", \"test_clean_credentials_sensitive_variables (auth_tests.test_auth_backends.AuthenticateTests)\", \"test_skips_backends_with_decorated_method (auth_tests.test_auth_backends.AuthenticateTests)\", \"A backend (SkippedBackend) is ignored if it doesn't accept the\", \"A TypeError within a backend is propagated properly (#18171).\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.709910",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}