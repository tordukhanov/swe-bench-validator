{
  "repo": "django/django",
  "instance_id": "django__django-11323",
  "base_commit": "ef9f2eb69c9396683cefa742bc7d0a0792090e8d",
  "patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -979,7 +979,11 @@ def get_context(self, name, value, attrs):\n         date_context['year'] = self.select_widget(attrs, choices=year_choices).get_context(\n             name=year_name,\n             value=context['widget']['value']['year'],\n-            attrs={**context['widget']['attrs'], 'id': 'id_%s' % year_name},\n+            attrs={\n+                **context['widget']['attrs'],\n+                'id': 'id_%s' % year_name,\n+                'placeholder': _('Year') if self.is_required else False,\n+            },\n         )\n         month_choices = list(self.months.items())\n         if not self.is_required:\n@@ -988,7 +992,11 @@ def get_context(self, name, value, attrs):\n         date_context['month'] = self.select_widget(attrs, choices=month_choices).get_context(\n             name=month_name,\n             value=context['widget']['value']['month'],\n-            attrs={**context['widget']['attrs'], 'id': 'id_%s' % month_name},\n+            attrs={\n+                **context['widget']['attrs'],\n+                'id': 'id_%s' % month_name,\n+                'placeholder': _('Month') if self.is_required else False,\n+            },\n         )\n         day_choices = [(i, i) for i in range(1, 32)]\n         if not self.is_required:\n@@ -997,7 +1005,11 @@ def get_context(self, name, value, attrs):\n         date_context['day'] = self.select_widget(attrs, choices=day_choices,).get_context(\n             name=day_name,\n             value=context['widget']['value']['day'],\n-            attrs={**context['widget']['attrs'], 'id': 'id_%s' % day_name},\n+            attrs={\n+                **context['widget']['attrs'],\n+                'id': 'id_%s' % day_name,\n+                'placeholder': _('Day') if self.is_required else False,\n+            },\n         )\n         subwidgets = []\n         for field in self._parse_date_fmt():\n",
  "test_patch": "diff --git a/tests/forms_tests/widget_tests/test_selectdatewidget.py b/tests/forms_tests/widget_tests/test_selectdatewidget.py\n--- a/tests/forms_tests/widget_tests/test_selectdatewidget.py\n+++ b/tests/forms_tests/widget_tests/test_selectdatewidget.py\n@@ -314,6 +314,46 @@ class GetRequiredDate(Form):\n         self.assertFalse(GetNotRequiredDate().fields['mydate'].widget.is_required)\n         self.assertTrue(GetRequiredDate().fields['mydate'].widget.is_required)\n \n+    def test_selectdate_required_placeholder(self):\n+        for required in (True, False):\n+            field = DateField(widget=SelectDateWidget(years=('2018', '2019')), required=required)\n+            self.check_html(field.widget, 'my_date', '', html=(\n+                \"\"\"\n+                <select name=\"my_date_month\" id=\"id_my_date_month\" %(m_placeholder)s>\n+                    %(empty)s\n+                    <option value=\"1\">January</option>\n+                    <option value=\"2\">February</option>\n+                    <option value=\"3\">March</option>\n+                    <option value=\"4\">April</option>\n+                    <option value=\"5\">May</option>\n+                    <option value=\"6\">June</option>\n+                    <option value=\"7\">July</option>\n+                    <option value=\"8\">August</option>\n+                    <option value=\"9\">September</option>\n+                    <option value=\"10\">October</option>\n+                    <option value=\"11\">November</option>\n+                    <option value=\"12\">December</option>\n+                </select>\n+                <select name=\"my_date_day\" id=\"id_my_date_day\" %(d_placeholder)s>\n+                    %(empty)s\n+                    %(days_options)s\n+                </select>\n+                <select name=\"my_date_year\" id=\"id_my_date_year\" %(y_placeholder)s>\n+                    %(empty)s\n+                    <option value=\"2018\">2018</option>\n+                    <option value=\"2019\">2019</option>\n+                </select>\n+                \"\"\" % {\n+                    'days_options': '\\n'.join(\n+                        '<option value=\"%s\">%s</option>' % (i, i) for i in range(1, 32)\n+                    ),\n+                    'm_placeholder': 'placeholder=\"Month\"' if required else '',\n+                    'd_placeholder': 'placeholder=\"Day\"' if required else '',\n+                    'y_placeholder': 'placeholder=\"Year\"' if required else '',\n+                    'empty': '' if required else '<option selected value=\"\">---</option>',\n+                }\n+            ))\n+\n     def test_selectdate_empty_label(self):\n         w = SelectDateWidget(years=('2014',), empty_label='empty_label')\n \n",
  "problem_statement": "Required SelectDateWidget renders invalid HTML\nDescription\n\t\nSelectDateWidget in required field renders an invalid HTML. According to standard â€‹https://www.w3.org/TR/html5/sec-forms.html#placeholder-label-option every select with required attribute must have a placeholder option, i.e. first option must have an empty string as a value. That is not a case of SelectDateWidget.\nExample\nfrom django import forms\nclass FooForm(forms.Form):\n\ta_date = forms.DateField(widget=forms.SelectDateWidget)\nform = FooForm()\nstr(form) # >>> ...<select name=\"a_date_month\" required id=\"id_a_date_month\"><option value=\"1\">January</option>...\n",
  "hints_text": "I can fix this",
  "created_at": "2019-05-04T23:30:06Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_selectdate_required_placeholder (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\"]",
  "PASS_TO_PASS": "[\"test_custom_months (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\", \"test_format_value (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\", \"test_l10n (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\", \"test_render_datetime (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\", \"test_render_empty (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\", \"test_render_invalid_date (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\", \"test_render_none (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\", \"test_render_string (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\", \"test_selectdate_empty_label (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\", \"test_selectdate_required (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\", \"test_value_from_datadict (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\", \"test_value_omitted_from_data (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\", \"test_years_rendered_without_separator (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.568742",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}