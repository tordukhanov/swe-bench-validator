{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-11043",
  "base_commit": "19bc7e8af6ec3468b6c7f4718a31cd5f508528cd",
  "patch": "diff --git a/sklearn/preprocessing/_function_transformer.py b/sklearn/preprocessing/_function_transformer.py\n--- a/sklearn/preprocessing/_function_transformer.py\n+++ b/sklearn/preprocessing/_function_transformer.py\n@@ -42,10 +42,16 @@ class FunctionTransformer(BaseEstimator, TransformerMixin):\n \n     validate : bool, optional default=True\n         Indicate that the input X array should be checked before calling\n-        func. If validate is false, there will be no input validation.\n-        If it is true, then X will be converted to a 2-dimensional NumPy\n-        array or sparse matrix. If this conversion is not possible or X\n-        contains NaN or infinity, an exception is raised.\n+        ``func``. The possibilities are:\n+\n+        - If False, there is no input validation.\n+        - If True, then X will be converted to a 2-dimensional NumPy array or\n+          sparse matrix. If the conversion is not possible an exception is\n+          raised.\n+\n+        .. deprecated:: 0.20\n+           ``validate=True`` as default will be replaced by\n+           ``validate=False`` in 0.22.\n \n     accept_sparse : boolean, optional\n         Indicate that func accepts a sparse matrix as input. If validate is\n@@ -72,7 +78,7 @@ class FunctionTransformer(BaseEstimator, TransformerMixin):\n         Dictionary of additional keyword arguments to pass to inverse_func.\n \n     \"\"\"\n-    def __init__(self, func=None, inverse_func=None, validate=True,\n+    def __init__(self, func=None, inverse_func=None, validate=None,\n                  accept_sparse=False, pass_y='deprecated', check_inverse=True,\n                  kw_args=None, inv_kw_args=None):\n         self.func = func\n@@ -84,6 +90,19 @@ def __init__(self, func=None, inverse_func=None, validate=True,\n         self.kw_args = kw_args\n         self.inv_kw_args = inv_kw_args\n \n+    def _check_input(self, X):\n+        # FIXME: Future warning to be removed in 0.22\n+        if self.validate is None:\n+            self._validate = True\n+            warnings.warn(\"The default validate=True will be replaced by \"\n+                          \"validate=False in 0.22.\", FutureWarning)\n+        else:\n+            self._validate = self.validate\n+\n+        if self._validate:\n+            return check_array(X, accept_sparse=self.accept_sparse)\n+        return X\n+\n     def _check_inverse_transform(self, X):\n         \"\"\"Check that func and inverse_func are the inverse.\"\"\"\n         idx_selected = slice(None, None, max(1, X.shape[0] // 100))\n@@ -111,8 +130,7 @@ def fit(self, X, y=None):\n         -------\n         self\n         \"\"\"\n-        if self.validate:\n-            X = check_array(X, self.accept_sparse)\n+        X = self._check_input(X)\n         if (self.check_inverse and not (self.func is None or\n                                         self.inverse_func is None)):\n             self._check_inverse_transform(X)\n@@ -165,8 +183,7 @@ def inverse_transform(self, X, y='deprecated'):\n                                kw_args=self.inv_kw_args)\n \n     def _transform(self, X, y=None, func=None, kw_args=None):\n-        if self.validate:\n-            X = check_array(X, self.accept_sparse)\n+        X = self._check_input(X)\n \n         if func is None:\n             func = _identity\n",
  "test_patch": "diff --git a/sklearn/preprocessing/tests/test_function_transformer.py b/sklearn/preprocessing/tests/test_function_transformer.py\n--- a/sklearn/preprocessing/tests/test_function_transformer.py\n+++ b/sklearn/preprocessing/tests/test_function_transformer.py\n@@ -1,3 +1,4 @@\n+import pytest\n import numpy as np\n from scipy import sparse\n \n@@ -145,7 +146,8 @@ def test_check_inverse():\n         trans = FunctionTransformer(func=np.sqrt,\n                                     inverse_func=np.around,\n                                     accept_sparse=accept_sparse,\n-                                    check_inverse=True)\n+                                    check_inverse=True,\n+                                    validate=True)\n         assert_warns_message(UserWarning,\n                              \"The provided functions are not strictly\"\n                              \" inverse of each other. If you are sure you\"\n@@ -156,15 +158,38 @@ def test_check_inverse():\n         trans = FunctionTransformer(func=np.expm1,\n                                     inverse_func=np.log1p,\n                                     accept_sparse=accept_sparse,\n-                                    check_inverse=True)\n+                                    check_inverse=True,\n+                                    validate=True)\n         Xt = assert_no_warnings(trans.fit_transform, X)\n         assert_allclose_dense_sparse(X, trans.inverse_transform(Xt))\n \n     # check that we don't check inverse when one of the func or inverse is not\n     # provided.\n     trans = FunctionTransformer(func=np.expm1, inverse_func=None,\n-                                check_inverse=True)\n+                                check_inverse=True, validate=True)\n     assert_no_warnings(trans.fit, X_dense)\n     trans = FunctionTransformer(func=None, inverse_func=np.expm1,\n-                                check_inverse=True)\n+                                check_inverse=True, validate=True)\n     assert_no_warnings(trans.fit, X_dense)\n+\n+\n+@pytest.mark.parametrize(\"validate, expected_warning\",\n+                         [(None, FutureWarning),\n+                          (True, None),\n+                          (False, None)])\n+def test_function_transformer_future_warning(validate, expected_warning):\n+    # FIXME: to be removed in 0.22\n+    X = np.random.randn(100, 10)\n+    transformer = FunctionTransformer(validate=validate)\n+    with pytest.warns(expected_warning) as results:\n+        transformer.fit_transform(X)\n+    if expected_warning is None:\n+        assert len(results) == 0\n+\n+\n+def test_function_transformer_frame():\n+    pd = pytest.importorskip('pandas')\n+    X_df = pd.DataFrame(np.random.randn(100, 10))\n+    transformer = FunctionTransformer(validate=False)\n+    X_df_trans = transformer.fit_transform(X_df)\n+    assert hasattr(X_df_trans, 'loc')\n",
  "problem_statement": "FunctionTransformer should not convert DataFrames to arrays by default\nI would expect a common use of FunctionTransformer is to apply some function to a Pandas DataFrame, ideally using its own methods or accessors. As noted in #10648, it can be easy for users to miss that they need to set validate=False to pass through a DataFrame without converting it to a NumPy array. I think it would be more user-friendly to have `validate='array-or-frame'` by default, which would pass through DataFrames to the function, but otherwise convert its input to a 2d array. For strict backwards compatibility, the default should be changed through a deprecation cycle, warning whenever using the default validation means a DataFrame is currently converted to an array.\r\n\r\nDo others agree?\n",
  "hints_text": "Sounds reasonable, particularly since at present,\r\n\r\n> From: https://github.com/scikit-learn/scikit-learn/issues/10453\r\n> Some meta-estimators (notably model selection and pipeline tools) will pass a dataframe along as-is to nested estimators.\r\n\r\nSo this would be just one more step in https://github.com/scikit-learn/scikit-learn/issues/5523 ..\r\n\r\n> for strict backwards compatibility, the default should be changed through a deprecation cycle, warning whenever using the default validation means a DataFrame is currently converted to an array.\r\n\r\nThe warning could say to manually apply `check_array` to get previous behaviour. \nsounds good\nCan i work on this?\r\nI should change to `validate=False` in the `__init__()` method and issue a warning inside the `fit()` or `_transform()` method?\nwe aim to maintain backwards compatibility, so we can't change current\nbehaviour immediately.\n\nThere are two tasks here: creating a new option for validate, documenting\nand testing it; and deprecating the current default. Tackle the first task,\nthen we'll help describe what's needed for the second.\n\n@bmanohar16 are you working on this, or would you like me to take it over? \n@mohamed-ali, you can take over the issue.",
  "created_at": "2018-04-29T22:39:45Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/preprocessing/tests/test_function_transformer.py::test_function_transformer_future_warning[None-FutureWarning]\"]",
  "PASS_TO_PASS": "[\"sklearn/preprocessing/tests/test_function_transformer.py::test_delegate_to_func\", \"sklearn/preprocessing/tests/test_function_transformer.py::test_np_log\", \"sklearn/preprocessing/tests/test_function_transformer.py::test_kw_arg\", \"sklearn/preprocessing/tests/test_function_transformer.py::test_kw_arg_update\", \"sklearn/preprocessing/tests/test_function_transformer.py::test_kw_arg_reset\", \"sklearn/preprocessing/tests/test_function_transformer.py::test_inverse_transform\", \"sklearn/preprocessing/tests/test_function_transformer.py::test_check_inverse\", \"sklearn/preprocessing/tests/test_function_transformer.py::test_function_transformer_future_warning[True-None]\", \"sklearn/preprocessing/tests/test_function_transformer.py::test_function_transformer_future_warning[False-None]\", \"sklearn/preprocessing/tests/test_function_transformer.py::test_function_transformer_frame\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.957452",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}