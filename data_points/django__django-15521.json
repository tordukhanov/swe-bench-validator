{
  "repo": "django/django",
  "instance_id": "django__django-15521",
  "base_commit": "49b470b9187b6be60e573fed08c8f4a87f133750",
  "patch": "diff --git a/django/core/management/commands/makemessages.py b/django/core/management/commands/makemessages.py\n--- a/django/core/management/commands/makemessages.py\n+++ b/django/core/management/commands/makemessages.py\n@@ -40,6 +40,10 @@ def check_programs(*programs):\n             )\n \n \n+def is_valid_locale(locale):\n+    return re.match(r\"^[a-z]+$\", locale) or re.match(r\"^[a-z]+_[A-Z].*$\", locale)\n+\n+\n @total_ordering\n class TranslatableFile:\n     def __init__(self, dirpath, file_name, locale_dir):\n@@ -427,14 +431,41 @@ def handle(self, *args, **options):\n \n             # Build po files for each selected locale\n             for locale in locales:\n-                if \"-\" in locale:\n-                    self.stdout.write(\n-                        \"invalid locale %s, did you mean %s?\"\n-                        % (\n-                            locale,\n-                            locale.replace(\"-\", \"_\"),\n-                        ),\n+                if not is_valid_locale(locale):\n+                    # Try to guess what valid locale it could be\n+                    # Valid examples are: en_GB, shi_Latn_MA and nl_NL-x-informal\n+\n+                    # Search for characters followed by a non character (i.e. separator)\n+                    match = re.match(\n+                        r\"^(?P<language>[a-zA-Z]+)\"\n+                        r\"(?P<separator>[^a-zA-Z])\"\n+                        r\"(?P<territory>.+)$\",\n+                        locale,\n                     )\n+                    if match:\n+                        locale_parts = match.groupdict()\n+                        language = locale_parts[\"language\"].lower()\n+                        territory = (\n+                            locale_parts[\"territory\"][:2].upper()\n+                            + locale_parts[\"territory\"][2:]\n+                        )\n+                        proposed_locale = f\"{language}_{territory}\"\n+                    else:\n+                        # It could be a language in uppercase\n+                        proposed_locale = locale.lower()\n+\n+                    # Recheck if the proposed locale is valid\n+                    if is_valid_locale(proposed_locale):\n+                        self.stdout.write(\n+                            \"invalid locale %s, did you mean %s?\"\n+                            % (\n+                                locale,\n+                                proposed_locale,\n+                            ),\n+                        )\n+                    else:\n+                        self.stdout.write(\"invalid locale %s\" % locale)\n+\n                     continue\n                 if self.verbosity > 0:\n                     self.stdout.write(\"processing locale %s\" % locale)\n",
  "test_patch": "diff --git a/tests/i18n/test_extraction.py b/tests/i18n/test_extraction.py\n--- a/tests/i18n/test_extraction.py\n+++ b/tests/i18n/test_extraction.py\n@@ -175,7 +175,43 @@ def test_valid_locale(self):\n         self.assertIn(\"processing locale de\", out.getvalue())\n         self.assertIs(Path(self.PO_FILE).exists(), True)\n \n-    def test_invalid_locale(self):\n+    def test_valid_locale_with_country(self):\n+        out = StringIO()\n+        management.call_command(\n+            \"makemessages\", locale=[\"en_GB\"], stdout=out, verbosity=1\n+        )\n+        self.assertNotIn(\"invalid locale en_GB\", out.getvalue())\n+        self.assertIn(\"processing locale en_GB\", out.getvalue())\n+        self.assertIs(Path(\"locale/en_GB/LC_MESSAGES/django.po\").exists(), True)\n+\n+    def test_valid_locale_tachelhit_latin_morocco(self):\n+        out = StringIO()\n+        management.call_command(\n+            \"makemessages\", locale=[\"shi_Latn_MA\"], stdout=out, verbosity=1\n+        )\n+        self.assertNotIn(\"invalid locale shi_Latn_MA\", out.getvalue())\n+        self.assertIn(\"processing locale shi_Latn_MA\", out.getvalue())\n+        self.assertIs(Path(\"locale/shi_Latn_MA/LC_MESSAGES/django.po\").exists(), True)\n+\n+    def test_valid_locale_private_subtag(self):\n+        out = StringIO()\n+        management.call_command(\n+            \"makemessages\", locale=[\"nl_NL-x-informal\"], stdout=out, verbosity=1\n+        )\n+        self.assertNotIn(\"invalid locale nl_NL-x-informal\", out.getvalue())\n+        self.assertIn(\"processing locale nl_NL-x-informal\", out.getvalue())\n+        self.assertIs(\n+            Path(\"locale/nl_NL-x-informal/LC_MESSAGES/django.po\").exists(), True\n+        )\n+\n+    def test_invalid_locale_uppercase(self):\n+        out = StringIO()\n+        management.call_command(\"makemessages\", locale=[\"PL\"], stdout=out, verbosity=1)\n+        self.assertIn(\"invalid locale PL, did you mean pl?\", out.getvalue())\n+        self.assertNotIn(\"processing locale pl\", out.getvalue())\n+        self.assertIs(Path(\"locale/pl/LC_MESSAGES/django.po\").exists(), False)\n+\n+    def test_invalid_locale_hyphen(self):\n         out = StringIO()\n         management.call_command(\n             \"makemessages\", locale=[\"pl-PL\"], stdout=out, verbosity=1\n@@ -184,6 +220,52 @@ def test_invalid_locale(self):\n         self.assertNotIn(\"processing locale pl-PL\", out.getvalue())\n         self.assertIs(Path(\"locale/pl-PL/LC_MESSAGES/django.po\").exists(), False)\n \n+    def test_invalid_locale_lower_country(self):\n+        out = StringIO()\n+        management.call_command(\n+            \"makemessages\", locale=[\"pl_pl\"], stdout=out, verbosity=1\n+        )\n+        self.assertIn(\"invalid locale pl_pl, did you mean pl_PL?\", out.getvalue())\n+        self.assertNotIn(\"processing locale pl_pl\", out.getvalue())\n+        self.assertIs(Path(\"locale/pl_pl/LC_MESSAGES/django.po\").exists(), False)\n+\n+    def test_invalid_locale_private_subtag(self):\n+        out = StringIO()\n+        management.call_command(\n+            \"makemessages\", locale=[\"nl-nl-x-informal\"], stdout=out, verbosity=1\n+        )\n+        self.assertIn(\n+            \"invalid locale nl-nl-x-informal, did you mean nl_NL-x-informal?\",\n+            out.getvalue(),\n+        )\n+        self.assertNotIn(\"processing locale nl-nl-x-informal\", out.getvalue())\n+        self.assertIs(\n+            Path(\"locale/nl-nl-x-informal/LC_MESSAGES/django.po\").exists(), False\n+        )\n+\n+    def test_invalid_locale_plus(self):\n+        out = StringIO()\n+        management.call_command(\n+            \"makemessages\", locale=[\"en+GB\"], stdout=out, verbosity=1\n+        )\n+        self.assertIn(\"invalid locale en+GB, did you mean en_GB?\", out.getvalue())\n+        self.assertNotIn(\"processing locale en+GB\", out.getvalue())\n+        self.assertIs(Path(\"locale/en+GB/LC_MESSAGES/django.po\").exists(), False)\n+\n+    def test_invalid_locale_end_with_underscore(self):\n+        out = StringIO()\n+        management.call_command(\"makemessages\", locale=[\"en_\"], stdout=out, verbosity=1)\n+        self.assertIn(\"invalid locale en_\", out.getvalue())\n+        self.assertNotIn(\"processing locale en_\", out.getvalue())\n+        self.assertIs(Path(\"locale/en_/LC_MESSAGES/django.po\").exists(), False)\n+\n+    def test_invalid_locale_start_with_underscore(self):\n+        out = StringIO()\n+        management.call_command(\"makemessages\", locale=[\"_en\"], stdout=out, verbosity=1)\n+        self.assertIn(\"invalid locale _en\", out.getvalue())\n+        self.assertNotIn(\"processing locale _en\", out.getvalue())\n+        self.assertIs(Path(\"locale/_en/LC_MESSAGES/django.po\").exists(), False)\n+\n     def test_comments_extractor(self):\n         management.call_command(\"makemessages\", locale=[LOCALE], verbosity=0)\n         self.assertTrue(os.path.exists(self.PO_FILE))\n",
  "problem_statement": "makemessages command skips the nl-nl-x-informal folder\nDescription\n\t\nThere is a mismatch on the DjangoTranslation folder and the makemessages command for the value nl-nl-x-informal\nDjangoTranslation uses the to_locale method to determine the language folder to read the django.po. to_locale translates nl-nl-x-informal correctly to the nl_NL-x-informal folder.\nHowever makemessages skips the nl_NL-x-informal folder and displays the following message\ninvalid locale nl_NL-x-informal, did you mean nl_NL_x_informal?\n# This makemessages behaviour is introduced in commit\n​https://github.com/django/django/commit/f63f3cdf0969c23fd0c05de0f4a2a1df0cd5112e\nThe check for - in the locale should only be for the first section a.k.a. nl_NL\n",
  "hints_text": "Could you tell us more about the need of this complicated -x-informal stuff?\nIt's called a private-use subtag extension of the language_tag. Source: ​https://en.wikipedia.org/wiki/IETF_language_tag Source: ​https://www.w3.org/International/articles/language-tags/#extension An optional private-use subtag, composed of the letter x and a hyphen followed by subtags of one to eight characters each, separated by hyphens. For our use it's because of our language has a more fomal and informal way of communicating. e.g. \"Dear <name>\" vs \"Hi <name>\". With the use of the private-use subtag, we can have 2 variants of the same language. Ticket about a previous fix for private-use subtags: https://code.djangoproject.com/ticket/28546\nReplying to Ronnie van den Crommenacker: It's called a private-use subtag extension of the language_tag. Source: ​https://en.wikipedia.org/wiki/IETF_language_tag Source: ​https://www.w3.org/International/articles/language-tags/#extension An optional private-use subtag, composed of the letter x and a hyphen followed by subtags of one to eight characters each, separated by hyphens. makemessages --locale accepts locales in ISO/IEC 15897 format, not IETF language tags. I'm not sure what private subtags are formatted in ISO/IEC 15897 🤔.\nI cannot find examples of valid ISO/IEC 15897 private subtags either. But i found some, non standard locales: ​https://www.localeplanet.com/icu/sr-Latn-BA/index.html sr_Latn_BA (this case is mentioned in the django's to_locale comment) ​https://www.localeplanet.com/icu/en-US-POSIX/index.html en_US_POSIX Also in /usr/share/i18n/SUPPORTED i find some other exceptions ug_CN@latin sd_IN@devanagari ca_ES@valencia So looking at those examples i would suspect the to_locale should return nl_NL_X_INFORMAL or nl_NL_XINFORMAL or nl_Informal_NL or nl_NL@informal\nHi Ronnie. The check for - in the locale should only be for the first section a.k.a. nl_NL Do you have a particular patch in mind? Do you want to make a PR? I'm not sure reading whether this is really supported or not, but if a fix is small and doesn't break anything, then it's easier to think positively about. (If it's disruptive, the opposite might apply...)\nI'm going to mark this as needs info. If someone can point to clearer specs, or provide a PoC patch, happy to review… (but pending that 🤷)",
  "created_at": "2022-03-17T12:18:06Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_invalid_locale_end_with_underscore (i18n.test_extraction.BasicExtractorTests)\", \"test_invalid_locale_lower_country (i18n.test_extraction.BasicExtractorTests)\", \"test_invalid_locale_plus (i18n.test_extraction.BasicExtractorTests)\", \"test_invalid_locale_private_subtag (i18n.test_extraction.BasicExtractorTests)\", \"test_invalid_locale_start_with_underscore (i18n.test_extraction.BasicExtractorTests)\", \"test_invalid_locale_uppercase (i18n.test_extraction.BasicExtractorTests)\", \"test_valid_locale_private_subtag (i18n.test_extraction.BasicExtractorTests)\"]",
  "PASS_TO_PASS": "[\"test_symlink (i18n.test_extraction.SymlinkExtractorTests)\", \"test_no_locale_raises (i18n.test_extraction.CustomLayoutExtractionTests)\", \"test_project_locale_paths (i18n.test_extraction.CustomLayoutExtractionTests)\", \"test_project_locale_paths_pathlib (i18n.test_extraction.CustomLayoutExtractionTests)\", \"test_no_wrap_disabled (i18n.test_extraction.NoWrapExtractorTests)\", \"test_no_wrap_enabled (i18n.test_extraction.NoWrapExtractorTests)\", \"PO files are updated when new changes are detected.\", \"PO files are unchanged unless there are new changes.\", \"Regression test for #23717.\", \"test_javascript_literals (i18n.test_extraction.JavaScriptExtractorTests)\", \"Regression test for #23583.\", \"test_makemessages_no_settings (i18n.test_extraction.NoSettingsExtractionTests)\", \"test_copy_plural_forms (i18n.test_extraction.CopyPluralFormsExtractorTests)\", \"Ticket #20311.\", \"Ensures a correct workaround for the gettext bug when handling a literal\", \"test_keep_pot_disabled_by_default (i18n.test_extraction.KeepPotFileExtractorTests)\", \"test_keep_pot_enabled (i18n.test_extraction.KeepPotFileExtractorTests)\", \"test_keep_pot_explicitly_disabled (i18n.test_extraction.KeepPotFileExtractorTests)\", \"test_ignore_directory (i18n.test_extraction.IgnoredExtractorTests)\", \"test_ignore_file_patterns (i18n.test_extraction.IgnoredExtractorTests)\", \"test_ignore_subdirectory (i18n.test_extraction.IgnoredExtractorTests)\", \"test_media_static_dirs_ignored (i18n.test_extraction.IgnoredExtractorTests)\", \"test_command_help (i18n.test_extraction.ExcludedLocaleExtractionTests)\", \"test_multiple_locales_excluded (i18n.test_extraction.ExcludedLocaleExtractionTests)\", \"test_multiple_locales_excluded_with_locale (i18n.test_extraction.ExcludedLocaleExtractionTests)\", \"test_one_locale_excluded (i18n.test_extraction.ExcludedLocaleExtractionTests)\", \"test_one_locale_excluded_with_locale (i18n.test_extraction.ExcludedLocaleExtractionTests)\", \"makemessages --add-location=file\", \"makemessages --add-location=full\", \"CommandError is raised when using makemessages --add-location with\", \"makemessages --add-location=never\", \"Ensure no leaky paths in comments, e.g. #: path\\to\\file.html.py:123\", \"Behavior is correct if --no-location switch isn't specified.\", \"Behavior is correct if --no-location switch is specified. See #16903.\", \"When the `locale` flag is absent, all dirs from the parent locale dir\", \"test_multiple_locales (i18n.test_extraction.MultipleLocaleExtractionTests)\", \"test_blocktranslate_trimmed (i18n.test_extraction.BasicExtractorTests)\", \"test_comments_extractor (i18n.test_extraction.BasicExtractorTests)\", \"test_context_in_single_quotes (i18n.test_extraction.BasicExtractorTests)\", \"test_extraction_error (i18n.test_extraction.BasicExtractorTests)\", \"test xgettext warning about multiple bare interpolation placeholders\", \"test_invalid_locale_hyphen (i18n.test_extraction.BasicExtractorTests)\", \"find_files only discover files having the proper extensions.\", \"test_makemessages_gettext_version (i18n.test_extraction.BasicExtractorTests)\", \"test_no_option (i18n.test_extraction.BasicExtractorTests)\", \"Update of PO file doesn't corrupt it with non-UTF-8 encoding on Windows\", \"Content-Type: ... charset=CHARSET is replaced with charset=UTF-8\", \"test_special_char_extracted (i18n.test_extraction.BasicExtractorTests)\", \"Template comment tags on the same line of other constructs (#19552)\", \"Message contexts are correctly extracted for the {% translate %} and\", \"test_unicode_decode_error (i18n.test_extraction.BasicExtractorTests)\", \"test_unicode_file_name (i18n.test_extraction.BasicExtractorTests)\", \"makemessages also runs successfully when USE_I18N is False.\", \"test_valid_locale (i18n.test_extraction.BasicExtractorTests)\", \"test_valid_locale_tachelhit_latin_morocco (i18n.test_extraction.BasicExtractorTests)\", \"test_valid_locale_with_country (i18n.test_extraction.BasicExtractorTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.732470",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}