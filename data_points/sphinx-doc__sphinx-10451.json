{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-10451",
  "base_commit": "195e911f1dab04b8ddeacbe04b7d214aaf81bb0b",
  "patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -115,7 +115,15 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         if name == 'return':\n             continue\n \n-        arg = arguments.get(name, {})\n+        if '*' + name in arguments:\n+            name = '*' + name\n+            arguments.get(name)\n+        elif '**' + name in arguments:\n+            name = '**' + name\n+            arguments.get(name)\n+        else:\n+            arg = arguments.get(name, {})\n+\n         if not arg.get('type'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n@@ -167,13 +175,19 @@ def augment_descriptions_with_types(\n             has_type.add('return')\n \n     # Add 'type' for parameters with a description but no declared type.\n-    for name in annotations:\n+    for name, annotation in annotations.items():\n         if name in ('return', 'returns'):\n             continue\n+\n+        if '*' + name in has_description:\n+            name = '*' + name\n+        elif '**' + name in has_description:\n+            name = '**' + name\n+\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -94,8 +94,10 @@ def missing_attr(c,\n class _ClassWithDocumentedInit:\n     \"\"\"Class docstring.\"\"\"\n \n-    def __init__(self, x: int) -> None:\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n+        :param args: Some integer\n+        :param kwargs: Some integer\n         \"\"\"\ndiff --git a/tests/roots/test-ext-napoleon/conf.py b/tests/roots/test-ext-napoleon/conf.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-ext-napoleon/conf.py\n@@ -0,0 +1,5 @@\n+import os\n+import sys\n+\n+sys.path.insert(0, os.path.abspath('.'))\n+extensions = ['sphinx.ext.napoleon']\ndiff --git a/tests/roots/test-ext-napoleon/index.rst b/tests/roots/test-ext-napoleon/index.rst\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-ext-napoleon/index.rst\n@@ -0,0 +1,6 @@\n+test-ext-napoleon\n+=================\n+\n+.. toctree::\n+\n+   typehints\ndiff --git a/tests/roots/test-ext-napoleon/mypackage/__init__.py b/tests/roots/test-ext-napoleon/mypackage/__init__.py\nnew file mode 100644\ndiff --git a/tests/roots/test-ext-napoleon/mypackage/typehints.py b/tests/roots/test-ext-napoleon/mypackage/typehints.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-ext-napoleon/mypackage/typehints.py\n@@ -0,0 +1,11 @@\n+def hello(x: int, *args: int, **kwargs: int) -> None:\n+    \"\"\"\n+    Parameters\n+    ----------\n+    x\n+        X\n+    *args\n+        Additional arguments.\n+    **kwargs\n+        Extra arguments.\n+    \"\"\"\ndiff --git a/tests/roots/test-ext-napoleon/typehints.rst b/tests/roots/test-ext-napoleon/typehints.rst\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-ext-napoleon/typehints.rst\n@@ -0,0 +1,5 @@\n+typehints\n+=========\n+\n+.. automodule:: mypackage.typehints\n+   :members:\ndiff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1034,19 +1034,27 @@ def test_autodoc_typehints_description_with_documented_init(app):\n     )\n     app.build()\n     context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n-    assert ('class target.typehints._ClassWithDocumentedInit(x)\\n'\n+    assert ('class target.typehints._ClassWithDocumentedInit(x, *args, **kwargs)\\n'\n             '\\n'\n             '   Class docstring.\\n'\n             '\\n'\n             '   Parameters:\\n'\n-            '      **x** (*int*) --\\n'\n+            '      * **x** (*int*) --\\n'\n             '\\n'\n-            '   __init__(x)\\n'\n+            '      * **args** (*int*) --\\n'\n+            '\\n'\n+            '      * **kwargs** (*int*) --\\n'\n+            '\\n'\n+            '   __init__(x, *args, **kwargs)\\n'\n             '\\n'\n             '      Init docstring.\\n'\n             '\\n'\n             '      Parameters:\\n'\n-            '         **x** (*int*) -- Some integer\\n'\n+            '         * **x** (*int*) -- Some integer\\n'\n+            '\\n'\n+            '         * **args** (*int*) -- Some integer\\n'\n+            '\\n'\n+            '         * **kwargs** (*int*) -- Some integer\\n'\n             '\\n'\n             '      Return type:\\n'\n             '         None\\n' == context)\n@@ -1063,16 +1071,20 @@ def test_autodoc_typehints_description_with_documented_init_no_undoc(app):\n     )\n     app.build()\n     context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n-    assert ('class target.typehints._ClassWithDocumentedInit(x)\\n'\n+    assert ('class target.typehints._ClassWithDocumentedInit(x, *args, **kwargs)\\n'\n             '\\n'\n             '   Class docstring.\\n'\n             '\\n'\n-            '   __init__(x)\\n'\n+            '   __init__(x, *args, **kwargs)\\n'\n             '\\n'\n             '      Init docstring.\\n'\n             '\\n'\n             '      Parameters:\\n'\n-            '         **x** (*int*) -- Some integer\\n' == context)\n+            '         * **x** (*int*) -- Some integer\\n'\n+            '\\n'\n+            '         * **args** (*int*) -- Some integer\\n'\n+            '\\n'\n+            '         * **kwargs** (*int*) -- Some integer\\n' == context)\n \n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n@@ -1089,16 +1101,20 @@ def test_autodoc_typehints_description_with_documented_init_no_undoc_doc_rtype(a\n     )\n     app.build()\n     context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n-    assert ('class target.typehints._ClassWithDocumentedInit(x)\\n'\n+    assert ('class target.typehints._ClassWithDocumentedInit(x, *args, **kwargs)\\n'\n             '\\n'\n             '   Class docstring.\\n'\n             '\\n'\n-            '   __init__(x)\\n'\n+            '   __init__(x, *args, **kwargs)\\n'\n             '\\n'\n             '      Init docstring.\\n'\n             '\\n'\n             '      Parameters:\\n'\n-            '         **x** (*int*) -- Some integer\\n' == context)\n+            '         * **x** (*int*) -- Some integer\\n'\n+            '\\n'\n+            '         * **args** (*int*) -- Some integer\\n'\n+            '\\n'\n+            '         * **kwargs** (*int*) -- Some integer\\n' == context)\n \n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\ndiff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -2593,3 +2593,48 @@ def test_pep526_annotations(self):\n \"\"\"\n         print(actual)\n         assert expected == actual\n+\n+\n+@pytest.mark.sphinx('text', testroot='ext-napoleon',\n+                    confoverrides={'autodoc_typehints': 'description',\n+                                   'autodoc_typehints_description_target': 'all'})\n+def test_napoleon_and_autodoc_typehints_description_all(app, status, warning):\n+    app.build()\n+    content = (app.outdir / 'typehints.txt').read_text(encoding='utf-8')\n+    assert content == (\n+        'typehints\\n'\n+        '*********\\n'\n+        '\\n'\n+        'mypackage.typehints.hello(x, *args, **kwargs)\\n'\n+        '\\n'\n+        '   Parameters:\\n'\n+        '      * **x** (*int*) -- X\\n'\n+        '\\n'\n+        '      * ***args** (*int*) -- Additional arguments.\\n'\n+        '\\n'\n+        '      * ****kwargs** (*int*) -- Extra arguments.\\n'\n+        '\\n'\n+        '   Return type:\\n'\n+        '      None\\n'\n+    )\n+\n+\n+@pytest.mark.sphinx('text', testroot='ext-napoleon',\n+                    confoverrides={'autodoc_typehints': 'description',\n+                                   'autodoc_typehints_description_target': 'documented_params'})\n+def test_napoleon_and_autodoc_typehints_description_documented_params(app, status, warning):\n+    app.build()\n+    content = (app.outdir / 'typehints.txt').read_text(encoding='utf-8')\n+    assert content == (\n+        'typehints\\n'\n+        '*********\\n'\n+        '\\n'\n+        'mypackage.typehints.hello(x, *args, **kwargs)\\n'\n+        '\\n'\n+        '   Parameters:\\n'\n+        '      * **x** (*int*) -- X\\n'\n+        '\\n'\n+        '      * ***args** (*int*) -- Additional arguments.\\n'\n+        '\\n'\n+        '      * ****kwargs** (*int*) -- Extra arguments.\\n'\n+    )\n",
  "problem_statement": "Fix duplicated *args and **kwargs with autodoc_typehints\nFix duplicated *args and **kwargs with autodoc_typehints\r\n\r\n### Bugfix\r\n- Bugfix\r\n\r\n### Detail\r\nConsider this\r\n```python\r\nclass _ClassWithDocumentedInitAndStarArgs:\r\n    \"\"\"Class docstring.\"\"\"\r\n\r\n    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\r\n        \"\"\"Init docstring.\r\n\r\n        :param x: Some integer\r\n        :param *args: Some integer\r\n        :param **kwargs: Some integer\r\n        \"\"\"\r\n```\r\nwhen using the autodoc extension and the setting `autodoc_typehints = \"description\"`.\r\n\r\nWIth sphinx 4.2.0, the current output is\r\n```\r\nClass docstring.\r\n\r\n   Parameters:\r\n      * **x** (*int*) --\r\n\r\n      * **args** (*int*) --\r\n\r\n      * **kwargs** (*int*) --\r\n\r\n   Return type:\r\n      None\r\n\r\n   __init__(x, *args, **kwargs)\r\n\r\n      Init docstring.\r\n\r\n      Parameters:\r\n         * **x** (*int*) -- Some integer\r\n\r\n         * ***args** --\r\n\r\n           Some integer\r\n\r\n         * ****kwargs** --\r\n\r\n           Some integer\r\n\r\n         * **args** (*int*) --\r\n\r\n         * **kwargs** (*int*) --\r\n\r\n      Return type:\r\n         None\r\n```\r\nwhere the *args and **kwargs are duplicated and incomplete.\r\n\r\nThe expected output is\r\n```\r\n  Class docstring.\r\n\r\n   Parameters:\r\n      * **x** (*int*) --\r\n\r\n      * ***args** (*int*) --\r\n\r\n      * ****kwargs** (*int*) --\r\n\r\n   Return type:\r\n      None\r\n\r\n   __init__(x, *args, **kwargs)\r\n\r\n      Init docstring.\r\n\r\n      Parameters:\r\n         * **x** (*int*) -- Some integer\r\n\r\n         * ***args** (*int*) --\r\n\r\n           Some integer\r\n\r\n         * ****kwargs** (*int*) --\r\n\r\n           Some integer\r\n\r\n      Return type:\r\n         None\r\n\r\n```\n",
  "hints_text": "I noticed this docstring causes warnings because `*` and `**` are considered as mark-up symbols:\r\n\r\n```\r\n    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\r\n        \"\"\"Init docstring.\r\n\r\n        :param x: Some integer\r\n        :param *args: Some integer\r\n        :param **kwargs: Some integer\r\n        \"\"\"\r\n```\r\n\r\nHere are warnings:\r\n```\r\n/Users/tkomiya/work/tmp/doc/example.py:docstring of example.ClassWithDocumentedInitAndStarArgs:6: WARNING: Inline emphasis start-string without end-string.\r\n/Users/tkomiya/work/tmp/doc/example.py:docstring of example.ClassWithDocumentedInitAndStarArgs:7: WARNING: Inline strong start-string without end-string.\r\n```\r\n\r\nIt will work fine if we escape `*` character like the following. But it's not officially recommended way, I believe.\r\n\r\n```\r\n    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\r\n        \"\"\"Init docstring.\r\n\r\n        :param x: Some integer\r\n        :param \\*args: Some integer\r\n        :param \\*\\*kwargs: Some integer\r\n        \"\"\"\r\n```\r\n\r\nI'm not sure this feature is really needed?\n> I noticed this docstring causes warnings because `*` and `**` are considered as mark-up symbols:\r\n> \r\n> ```\r\n>     def __init__(self, x: int, *args: int, **kwargs: int) -> None:\r\n>         \"\"\"Init docstring.\r\n> \r\n>         :param x: Some integer\r\n>         :param *args: Some integer\r\n>         :param **kwargs: Some integer\r\n>         \"\"\"\r\n> ```\r\n> \r\n> Here are warnings:\r\n> \r\n> ```\r\n> /Users/tkomiya/work/tmp/doc/example.py:docstring of example.ClassWithDocumentedInitAndStarArgs:6: WARNING: Inline emphasis start-string without end-string.\r\n> /Users/tkomiya/work/tmp/doc/example.py:docstring of example.ClassWithDocumentedInitAndStarArgs:7: WARNING: Inline strong start-string without end-string.\r\n> ```\r\n> \r\n> It will work fine if we escape `*` character like the following. But it's not officially recommended way, I believe.\r\n> \r\n> ```\r\n>     def __init__(self, x: int, *args: int, **kwargs: int) -> None:\r\n>         \"\"\"Init docstring.\r\n> \r\n>         :param x: Some integer\r\n>         :param \\*args: Some integer\r\n>         :param \\*\\*kwargs: Some integer\r\n>         \"\"\"\r\n> ```\r\n> \r\n> I'm not sure this feature is really needed?\r\n\r\nThis is needed for the Numpy and Google docstring formats, which napoleon converts to `:param:`s.\r\n\nOh, I missed numpydoc format. Indeed, it recommends prepending stars.\r\nhttps://numpydoc.readthedocs.io/en/latest/format.html#parameters",
  "created_at": "2022-05-15T11:49:39Z",
  "version": "5.1",
  "FAIL_TO_PASS": "[\"tests/test_ext_napoleon_docstring.py::test_napoleon_and_autodoc_typehints_description_all\", \"tests/test_ext_napoleon_docstring.py::test_napoleon_and_autodoc_typehints_description_documented_params\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autoclass_content_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_mixed\", \"tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_new\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_both\", \"tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings\", \"tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both\", \"tests/test_ext_autodoc_configs.py::test_mocked_module_imports\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none_for_overload\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_no_undoc\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_no_undoc_doc_rtype\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init_no_undoc\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init_no_undoc_doc_rtype\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_both\", \"tests/test_ext_autodoc_configs.py::test_autodoc_type_aliases\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_and_type_aliases\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_format_fully_qualified\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_format_fully_qualified_for_class_alias\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_format_fully_qualified_for_generic_alias\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_format_fully_qualified_for_newtype_alias\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values\", \"tests/test_ext_napoleon_docstring.py::NamedtupleSubclassTest::test_attributes_docstring\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline_no_type\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline_ref_in_type\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_attributes_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_attributes_with_use_ivar\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_code_block_in_returns_section\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_colon_in_return_type\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_custom_generic_sections\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_docstrings\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_keywords_with_types\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_kwargs_in_arguments\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_list_in_parameter_description\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_noindex\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_parameters_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_pep526_annotations\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_preprocess_types\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_raises_types\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_section_header_formatting\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_sphinx_admonitions\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_xrefs_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_colon_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_convert_numpy_type_spec\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_docstrings\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_list_in_parameter_description\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_multiple_parameters\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameter_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameters_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameters_without_class_reference\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_raises_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_recombine_set_tokens\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_recombine_set_tokens_invalid\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_return_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_section_header_underline_length\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_see_also_refs\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_sphinx_admonitions\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_token_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_tokenize_type_spec\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_type_preprocessor\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_underscore_in_attribute\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_underscore_in_attribute_strip_signature_backslash\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_xrefs_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_yield_types\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_token_type_invalid\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[x,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*args,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*x,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_pep526_annotations\"]",
  "environment_setup_commit": "571b55328d401a6e1d50e37407df56586065a7be",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.033182",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}