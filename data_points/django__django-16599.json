{
  "repo": "django/django",
  "instance_id": "django__django-16599",
  "base_commit": "cc67344db9de0248ba1064f7e986c6b29276a7b1",
  "patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -1,7 +1,7 @@\n import itertools\n import math\n \n-from django.core.exceptions import EmptyResultSet\n+from django.core.exceptions import EmptyResultSet, FullResultSet\n from django.db.models.expressions import Case, Expression, Func, Value, When\n from django.db.models.fields import (\n     BooleanField,\n@@ -389,6 +389,24 @@ class LessThanOrEqual(FieldGetDbPrepValueMixin, BuiltinLookup):\n     lookup_name = \"lte\"\n \n \n+class IntegerFieldOverflow:\n+    underflow_exception = EmptyResultSet\n+    overflow_exception = EmptyResultSet\n+\n+    def process_rhs(self, compiler, connection):\n+        rhs = self.rhs\n+        if isinstance(rhs, int):\n+            field_internal_type = self.lhs.output_field.get_internal_type()\n+            min_value, max_value = connection.ops.integer_field_range(\n+                field_internal_type\n+            )\n+            if min_value is not None and rhs < min_value:\n+                raise self.underflow_exception\n+            if max_value is not None and rhs > max_value:\n+                raise self.overflow_exception\n+        return super().process_rhs(compiler, connection)\n+\n+\n class IntegerFieldFloatRounding:\n     \"\"\"\n     Allow floats to work as query values for IntegerField. Without this, the\n@@ -402,13 +420,30 @@ def get_prep_lookup(self):\n \n \n @IntegerField.register_lookup\n-class IntegerGreaterThanOrEqual(IntegerFieldFloatRounding, GreaterThanOrEqual):\n+class IntegerFieldExact(IntegerFieldOverflow, Exact):\n     pass\n \n \n @IntegerField.register_lookup\n-class IntegerLessThan(IntegerFieldFloatRounding, LessThan):\n-    pass\n+class IntegerGreaterThan(IntegerFieldOverflow, GreaterThan):\n+    underflow_exception = FullResultSet\n+\n+\n+@IntegerField.register_lookup\n+class IntegerGreaterThanOrEqual(\n+    IntegerFieldOverflow, IntegerFieldFloatRounding, GreaterThanOrEqual\n+):\n+    underflow_exception = FullResultSet\n+\n+\n+@IntegerField.register_lookup\n+class IntegerLessThan(IntegerFieldOverflow, IntegerFieldFloatRounding, LessThan):\n+    overflow_exception = FullResultSet\n+\n+\n+@IntegerField.register_lookup\n+class IntegerLessThanOrEqual(IntegerFieldOverflow, LessThanOrEqual):\n+    overflow_exception = FullResultSet\n \n \n @Field.register_lookup\n",
  "test_patch": "diff --git a/tests/model_fields/test_integerfield.py b/tests/model_fields/test_integerfield.py\n--- a/tests/model_fields/test_integerfield.py\n+++ b/tests/model_fields/test_integerfield.py\n@@ -1,3 +1,5 @@\n+from unittest import SkipTest\n+\n from django.core import validators\n from django.core.exceptions import ValidationError\n from django.db import IntegrityError, connection, models\n@@ -94,6 +96,43 @@ def test_backend_range_validation(self):\n             instance.value = max_value\n             instance.full_clean()\n \n+    def test_backend_range_min_value_lookups(self):\n+        min_value = self.backend_range[0]\n+        if min_value is None:\n+            raise SkipTest(\"Backend doesn't define an integer min value.\")\n+        underflow_value = min_value - 1\n+        self.model.objects.create(value=min_value)\n+        # A refresh of obj is necessary because last_insert_id() is bugged\n+        # on MySQL and returns invalid values.\n+        obj = self.model.objects.get(value=min_value)\n+        with self.assertNumQueries(0), self.assertRaises(self.model.DoesNotExist):\n+            self.model.objects.get(value=underflow_value)\n+        with self.assertNumQueries(1):\n+            self.assertEqual(self.model.objects.get(value__gt=underflow_value), obj)\n+        with self.assertNumQueries(1):\n+            self.assertEqual(self.model.objects.get(value__gte=underflow_value), obj)\n+        with self.assertNumQueries(0), self.assertRaises(self.model.DoesNotExist):\n+            self.model.objects.get(value__lt=underflow_value)\n+        with self.assertNumQueries(0), self.assertRaises(self.model.DoesNotExist):\n+            self.model.objects.get(value__lte=underflow_value)\n+\n+    def test_backend_range_max_value_lookups(self):\n+        max_value = self.backend_range[-1]\n+        if max_value is None:\n+            raise SkipTest(\"Backend doesn't define an integer max value.\")\n+        overflow_value = max_value + 1\n+        obj = self.model.objects.create(value=max_value)\n+        with self.assertNumQueries(0), self.assertRaises(self.model.DoesNotExist):\n+            self.model.objects.get(value=overflow_value)\n+        with self.assertNumQueries(0), self.assertRaises(self.model.DoesNotExist):\n+            self.model.objects.get(value__gt=overflow_value)\n+        with self.assertNumQueries(0), self.assertRaises(self.model.DoesNotExist):\n+            self.model.objects.get(value__gte=overflow_value)\n+        with self.assertNumQueries(1):\n+            self.assertEqual(self.model.objects.get(value__lt=overflow_value), obj)\n+        with self.assertNumQueries(1):\n+            self.assertEqual(self.model.objects.get(value__lte=overflow_value), obj)\n+\n     def test_redundant_backend_range_validators(self):\n         \"\"\"\n         If there are stricter validators than the ones from the database\n",
  "problem_statement": "Querying with an integer larger than SQLite supports crashes with OverflowError\nDescription\n\t\nHi,\ni don't know, you accept this behavior Overflow on SQLite or there is max length here?\nStep : \n​http://127.0.0.1:8000/admin/auth/user/1111111111111111111111/change/\nError :\nOverflowError at /admin/auth/user/1111111111111111111111/change/\nPython int too large to convert to SQLite INTEGER\nRequest Method:\tGET\nRequest URL:\thttp://127.0.0.1:8000/admin/auth/user/1111111111111111111111/change/\nDjango Version:\t1.10.2\nException Type:\tOverflowError\nException Value:\t\nPython int too large to convert to SQLite INTEGER\nException Location:\tC:\\Python27\\lib\\site-packages\\django\\db\\backends\\sqlite3\\operations.py in _quote_params_for_last_executed_query, line 129\nPython Executable:\tC:\\Python27\\python.exe\nPython Version:\t2.7.11\nPython Path:\t\n['E:/Programmer Language/NodeJS/untitled1',\n 'C:\\\\Users\\\\RaminFP\\\\.IntelliJIdea14\\\\config\\\\plugins\\\\python\\\\helpers\\\\pydev',\n 'C:\\\\Python27\\\\lib\\\\site-packages\\\\six-1.10.0-py2.7.egg',\n 'C:\\\\Python27\\\\lib\\\\site-packages\\\\pisa-3.0.33-py2.7.egg',\n 'C:\\\\Python27\\\\lib\\\\site-packages\\\\sqlacodegen-1.1.6-py2.7.egg',\n 'C:\\\\Python27\\\\lib\\\\site-packages\\\\inflect-0.2.5-py2.7.egg',\n 'C:\\\\Python27\\\\lib\\\\site-packages\\\\0x10c_asm-0.0.2-py2.7.egg',\n 'C:\\\\Python27\\\\lib\\\\site-packages\\\\jpype1-0.6.1-py2.7-win32.egg',\n 'C:\\\\Python27\\\\lib\\\\site-packages\\\\simpleaes-1.0-py2.7.egg',\n 'C:\\\\Python27\\\\lib\\\\site-packages\\\\celery-3.1.23-py2.7.egg',\n 'C:\\\\Python27\\\\lib\\\\site-packages\\\\kombu-3.0.35-py2.7.egg',\n 'C:\\\\Python27\\\\lib\\\\site-packages\\\\anyjson-0.3.3-py2.7.egg',\n 'C:\\\\Python27\\\\lib\\\\site-packages\\\\pythonnet-2.1.0.dev1-py2.7-win32.egg',\n 'E:\\\\Programmer Language\\\\NodeJS\\\\untitled1',\n 'C:\\\\Windows\\\\SYSTEM32\\\\python27.zip',\n 'C:\\\\Python27\\\\DLLs',\n 'C:\\\\Python27\\\\lib',\n 'C:\\\\Python27\\\\lib\\\\plat-win',\n 'C:\\\\Python27\\\\lib\\\\lib-tk',\n 'C:\\\\Python27',\n 'C:\\\\Python27\\\\lib\\\\site-packages',\n 'c:\\\\python27\\\\lib\\\\site-packages']\nServer time:\tFri, 28 Oct 2016 11:43:05 +0000\n",
  "hints_text": "I'm not sure how to fix that, but it would be nice not to crash if possible.\nI have reproduced this error. This is an error on SQLite side as the integer is too large to be handled by SQLite. You will see this error as above when you search for User ID 1111111111111111111111 The max integer is 9223372036854775807. Using this will give you the following error: Page not found (404) Request Method: GET Request URL: ​http://127.0.0.1:8000/admin/auth/user/9223372036854775807/change/ Raised by: django.contrib.admin.options.change_view Out of interest, if you use the user ID 9223372036854775808, you will get the same error you saw. Was not able to recreate the server crashing on my side. It held up fine and simply throws a Server Error when running under production (Debug = False).\nReplying to nickparkin: Looking into if this happens on Postgres now to see if Django is able to handle of these errors. query can not check max length of valid integer? if check raise on excpetion Page not found (404) Request Method: GET Request URL: ​​http://127.0.0.1:8000/admin/auth/user/9223372036854775807/change/ Raised by: django.contrib.admin.options.change_view check range int after execute query on SQLLite ,\nHave confirmed this error by Django handled in Postgres: e.g. ​http://127.0.0.1:8000/admin/auth/user/922337203685477582000000000000000000/change/ This does not throw the same Overflow error and rather gives a 404 not found. As such, keeping this open as this could be handled for SQLLite.\ni test on mysql with many id integer nothing of overflow\nHi Tim, please look this patch and your feedback ,\n​PR\nAssuming a 404 should be raised wherever an OverflowError is raised doesn't seem correct. A fix at the query level seems more correct. Tests are also needed.\nWhich query change? (please give me python file this query) max length range define on sqllite wherever return OverflowError ,\nFor example, I was thinking that QuerySet.filter() with a filter parameter value that overflows (and hence can't match anything) might return zero results.\ni think you means this , this patch is a very easy Tim, and best way, $ git diff HEAD diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py index 499d27d..58049ed 100644 --- a/django/contrib/admin/options.py +++ b/django/contrib/admin/options.py @@ -668,7 +668,7 @@ class ModelAdmin(BaseModelAdmin): try: object_id = field.to_python(object_id) return queryset.get(**{field.name: object_id}) - except (model.DoesNotExist, ValidationError, ValueError): + except (model.DoesNotExist, ValidationError, ValueError, OverflowError): return None def get_changelist_form(self, request, **kwargs): view : Page not found (404) Request Method: GET Request URL: http://127.0.0.1:8000/admin/auth/user/1111111111111111111111111111/change/ Raised by: django.contrib.admin.options.change_view user object with primary key u'1111111111111111111111111111' does not exist. Overflow Code ; return queryset.get(**{field.name: object_id})\ni'm missing for use which test folders ​tests ? please give me sample python file tests object_id, ready for new PR , Thanks, Ramin\nThe issue affects all queries, not just those from the admin. A proper fix my go somewhere in the SQLite database backend (django/db/backends/sqlite3) but I'm not sure.\nare you sure \"The issue affects all queries, not just those from the admin\"? where is issue? i think just happen object_id change_view _ _ i test patch is working (​http://127.0.0.1:8000/admin/auth/user/1111111111111111111111/change/), i need more information a fix,what your means \"A proper fix my go somewhere in the SQLite database backend (django/db/backends/sqlite3)\"\nstill i'm not sure because i test ​http://127.0.0.1:8000/admin/auth/group/11111111111111111111111111111111111111111/change/ nothing error of OverflowError,\nThe idea is to fix things so that Question.objects.filter(id=10000000000000000000) doesn't crash. Doing so should also fix the admin.\n>CREATE TABLE numbers (i INTEGER, r REAL, t TEXT, b BLOB); >INSERT INTO numbers VALUES (9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807); > SELECT * FROM numbers; i r t b -------------------- -------------------- -------------------- -------------------- 9223372036854775807 9.22337203685478e+18 9223372036854775807 9223372036854775807 > SELECT typeof(i),typeof(r),typeof(t),typeof(b) FROM numbers; typeof(i) typeof(r) typeof(t) typeof(b) ---------- ---------- ---------- ---------- integer real text integer > SELECT i+1,r+1,t+1,b+1 FROM numbers; i+1 r+1 t+1 b+1 -------------------- -------------------- -------------------- -------------------- -9223372036854775808 9.22337203685478e+18 -9223372036854775808 -9223372036854775808 you see shift +1 and -9223372036854775808 INTEGER. The value is a signed integer, stored in 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value. REAL. The value is a floating point value, stored as an 8-byte IEEE floating point number. That is, you can only store values from 2**63 to (2**63-1) Be careful when you need to store large numbers in SQLite. If you really need to support unsigned 64-bit numbers, ?? but it makes a SQLite bad choice for developing please look : ​https://github.com/python/cpython/blob/master/Modules/_sqlite/util.c#L129&L153\nTim, i see ​https://docs.djangoproject.com/en/dev/ref/models/fields/#bigintegerfield , do you think change fieldid int to biginteger or BigAutoField is good?\nfinal patch diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py index 66ad278..36c1351 100644 --- a/django/db/backends/sqlite3/base.py +++ b/django/db/backends/sqlite3/base.py @@ -325,8 +325,11 @@ class SQLiteCursorWrapper(Database.Cursor): if params is None: return Database.Cursor.execute(self, query) query = self.convert_query(query) - return Database.Cursor.execute(self, query, params) - + try: + return Database.Cursor.execute(self, query, params) + except OverflowError: + return None + def executemany(self, query, param_list): query = self.convert_query(query) return Database.Cursor.executemany(self, query, param_list) diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py index 47a26b5..6404ea6 100644 --- a/django/db/backends/sqlite3/operations.py +++ b/django/db/backends/sqlite3/operations.py @@ -122,6 +122,8 @@ class DatabaseOperations(BaseDatabaseOperations): # Native sqlite3 cursors cannot be used as context managers. try: return cursor.execute(sql, params).fetchone() + except OverflowError: + return None finally: cursor.close() usage : >>> User.objects.get(id=1111111111111111111111111111111111111111111111111111111111111111111111111111111111) Traceback (most recent call last): File \"<console>\", line 1, in <module> File \"C:\\Python27\\lib\\site-packages\\django\\db\\models\\manager.py\", line 85, in manager_method return getattr(self.get_queryset(), name)(*args, **kwargs) File \"C:\\Python27\\lib\\site-packages\\django\\db\\models\\query.py\", line 385, in get self.model._meta.object_name DoesNotExist: User matching query does not exist. >>> User.objects.get(id=111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111) Traceback (most recent call last): File \"<console>\", line 1, in <module> File \"C:\\Python27\\lib\\site-packages\\django\\db\\models\\manager.py\", line 85, in manager_method return getattr(self.get_queryset(), name)(*args, **kwargs) File \"C:\\Python27\\lib\\site-packages\\django\\db\\models\\query.py\", line 385, in get self.model._meta.object_name DoesNotExist: User matching query does not exist. >>> User.objects.filter(id=1111111111111111111111111111111111111111111111111111111111111111111111111111111111) <QuerySet []> >>>\nthis change is not important i will remove code, diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py index 499d27d..58049ed 100644 --- a/django/contrib/admin/options.py +++ b/django/contrib/admin/options.py @@ -668,7 +668,7 @@ class ModelAdmin(BaseModelAdmin): try: object_id = field.to_python(object_id) return queryset.get(**{field.name: object_id}) - except (model.DoesNotExist, ValidationError, ValueError): + except (model.DoesNotExist, ValidationError, ValueError, OverflowError): return None def get_changelist_form(self, request, **kwargs): do you confirm fix and patch for PR? https://github.com/django/django/blob/master/tests/queries/modles.py class Ticket27397(models.Model): id = models.AutoField(primary_key=True) name = models.CharField(max_length=10) https://github.com/django/django/blob/master/tests/queries/tests.py def test_ticket27397(self): self.assertEqual(len(Ticket27397.objects.filter(id=111111111111111111111111111111111111)),0)\nI'm not sure if the fix is the cleanest one, but I'd have to look at the issue in more detail. I guess you can create a pull request at this point. You should be able to reuse an existing model for the test.\nAs noted on the ​PR, the proposal doesn't work correctly for QuerySet.exclude().",
  "created_at": "2023-02-25T18:17:11Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_backend_range_max_value_lookups (model_fields.test_integerfield.BigIntegerFieldTests.test_backend_range_max_value_lookups)\", \"test_backend_range_min_value_lookups (model_fields.test_integerfield.BigIntegerFieldTests.test_backend_range_min_value_lookups)\", \"test_backend_range_max_value_lookups (model_fields.test_integerfield.PositiveSmallIntegerFieldTests.test_backend_range_max_value_lookups)\", \"test_backend_range_min_value_lookups (model_fields.test_integerfield.PositiveSmallIntegerFieldTests.test_backend_range_min_value_lookups)\", \"test_backend_range_max_value_lookups (model_fields.test_integerfield.PositiveBigIntegerFieldTests.test_backend_range_max_value_lookups)\", \"test_backend_range_min_value_lookups (model_fields.test_integerfield.PositiveBigIntegerFieldTests.test_backend_range_min_value_lookups)\", \"test_backend_range_max_value_lookups (model_fields.test_integerfield.IntegerFieldTests.test_backend_range_max_value_lookups)\", \"test_backend_range_min_value_lookups (model_fields.test_integerfield.IntegerFieldTests.test_backend_range_min_value_lookups)\", \"test_backend_range_max_value_lookups (model_fields.test_integerfield.SmallIntegerFieldTests.test_backend_range_max_value_lookups)\", \"test_backend_range_min_value_lookups (model_fields.test_integerfield.SmallIntegerFieldTests.test_backend_range_min_value_lookups)\", \"test_backend_range_max_value_lookups (model_fields.test_integerfield.PositiveIntegerFieldTests.test_backend_range_max_value_lookups)\", \"test_backend_range_min_value_lookups (model_fields.test_integerfield.PositiveIntegerFieldTests.test_backend_range_min_value_lookups)\"]",
  "PASS_TO_PASS": "[\"test_choices_validation_supports_named_groups (model_fields.test_integerfield.ValidationTests.test_choices_validation_supports_named_groups)\", \"test_enum_choices_cleans_valid_string (model_fields.test_integerfield.ValidationTests.test_enum_choices_cleans_valid_string)\", \"test_enum_choices_invalid_input (model_fields.test_integerfield.ValidationTests.test_enum_choices_invalid_input)\", \"test_integerfield_cleans_valid_string (model_fields.test_integerfield.ValidationTests.test_integerfield_cleans_valid_string)\", \"test_integerfield_raises_error_on_empty_input (model_fields.test_integerfield.ValidationTests.test_integerfield_raises_error_on_empty_input)\", \"test_integerfield_raises_error_on_invalid_intput (model_fields.test_integerfield.ValidationTests.test_integerfield_raises_error_on_invalid_intput)\", \"test_integerfield_validates_zero_against_choices (model_fields.test_integerfield.ValidationTests.test_integerfield_validates_zero_against_choices)\", \"test_nullable_integerfield_cleans_none_on_null_and_blank_true (model_fields.test_integerfield.ValidationTests.test_nullable_integerfield_cleans_none_on_null_and_blank_true)\", \"test_nullable_integerfield_raises_error_with_blank_false (model_fields.test_integerfield.ValidationTests.test_nullable_integerfield_raises_error_with_blank_false)\", \"Backend specific ranges can be saved without corruption.\", \"Backend specific ranges are enforced at the model validation level\", \"test_coercing (model_fields.test_integerfield.BigIntegerFieldTests.test_coercing)\", \"Values within the documented safe range pass validation, and can be\", \"test_invalid_value (model_fields.test_integerfield.BigIntegerFieldTests.test_invalid_value)\", \"If there are stricter validators than the ones from the database\", \"test_rel_db_type (model_fields.test_integerfield.BigIntegerFieldTests.test_rel_db_type)\", \"test_types (model_fields.test_integerfield.BigIntegerFieldTests.test_types)\", \"test_coercing (model_fields.test_integerfield.PositiveSmallIntegerFieldTests.test_coercing)\", \"test_invalid_value (model_fields.test_integerfield.PositiveSmallIntegerFieldTests.test_invalid_value)\", \"test_rel_db_type (model_fields.test_integerfield.PositiveSmallIntegerFieldTests.test_rel_db_type)\", \"test_types (model_fields.test_integerfield.PositiveSmallIntegerFieldTests.test_types)\", \"test_coercing (model_fields.test_integerfield.PositiveBigIntegerFieldTests.test_coercing)\", \"test_invalid_value (model_fields.test_integerfield.PositiveBigIntegerFieldTests.test_invalid_value)\", \"test_rel_db_type (model_fields.test_integerfield.PositiveBigIntegerFieldTests.test_rel_db_type)\", \"test_types (model_fields.test_integerfield.PositiveBigIntegerFieldTests.test_types)\", \"test_coercing (model_fields.test_integerfield.IntegerFieldTests.test_coercing)\", \"test_invalid_value (model_fields.test_integerfield.IntegerFieldTests.test_invalid_value)\", \"test_rel_db_type (model_fields.test_integerfield.IntegerFieldTests.test_rel_db_type)\", \"test_types (model_fields.test_integerfield.IntegerFieldTests.test_types)\", \"test_coercing (model_fields.test_integerfield.SmallIntegerFieldTests.test_coercing)\", \"test_invalid_value (model_fields.test_integerfield.SmallIntegerFieldTests.test_invalid_value)\", \"test_rel_db_type (model_fields.test_integerfield.SmallIntegerFieldTests.test_rel_db_type)\", \"test_types (model_fields.test_integerfield.SmallIntegerFieldTests.test_types)\", \"test_coercing (model_fields.test_integerfield.PositiveIntegerFieldTests.test_coercing)\", \"test_invalid_value (model_fields.test_integerfield.PositiveIntegerFieldTests.test_invalid_value)\", \"test_negative_values (model_fields.test_integerfield.PositiveIntegerFieldTests.test_negative_values)\", \"test_rel_db_type (model_fields.test_integerfield.PositiveIntegerFieldTests.test_rel_db_type)\", \"test_types (model_fields.test_integerfield.PositiveIntegerFieldTests.test_types)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.763493",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}