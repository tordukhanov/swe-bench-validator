{
  "repo": "django/django",
  "instance_id": "django__django-13097",
  "base_commit": "2e8941b6f90e65ffad3f07083b8de59e8ed29767",
  "patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -372,9 +372,10 @@ def has_changed(self):\n \n     def add_fields(self, form, index):\n         \"\"\"A hook for adding extra fields on to each form instance.\"\"\"\n+        initial_form_count = self.initial_form_count()\n         if self.can_order:\n             # Only pre-fill the ordering field for initial forms.\n-            if index is not None and index < self.initial_form_count():\n+            if index is not None and index < initial_form_count:\n                 form.fields[ORDERING_FIELD_NAME] = IntegerField(\n                     label=_('Order'),\n                     initial=index + 1,\n@@ -387,7 +388,7 @@ def add_fields(self, form, index):\n                     required=False,\n                     widget=self.get_ordering_widget(),\n                 )\n-        if self.can_delete:\n+        if self.can_delete and (self.can_delete_extra or index < initial_form_count):\n             form.fields[DELETION_FIELD_NAME] = BooleanField(label=_('Delete'), required=False)\n \n     def add_prefix(self, index):\n@@ -433,7 +434,8 @@ def as_ul(self):\n \n def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,\n                     can_delete=False, max_num=None, validate_max=False,\n-                    min_num=None, validate_min=False, absolute_max=None):\n+                    min_num=None, validate_min=False, absolute_max=None,\n+                    can_delete_extra=True):\n     \"\"\"Return a FormSet for the given form class.\"\"\"\n     if min_num is None:\n         min_num = DEFAULT_MIN_NUM\n@@ -453,6 +455,7 @@ def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,\n         'extra': extra,\n         'can_order': can_order,\n         'can_delete': can_delete,\n+        'can_delete_extra': can_delete_extra,\n         'min_num': min_num,\n         'max_num': max_num,\n         'absolute_max': absolute_max,\ndiff --git a/django/forms/models.py b/django/forms/models.py\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -863,7 +863,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None):\n+                         absolute_max=None, can_delete_extra=True):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -881,7 +881,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n-                              absolute_max=absolute_max)\n+                              absolute_max=absolute_max, can_delete_extra=can_delete_extra)\n     FormSet.model = model\n     return FormSet\n \n@@ -1051,7 +1051,7 @@ def inlineformset_factory(parent_model, model, form=ModelForm,\n                           widgets=None, validate_max=False, localized_fields=None,\n                           labels=None, help_texts=None, error_messages=None,\n                           min_num=None, validate_min=False, field_classes=None,\n-                          absolute_max=None):\n+                          absolute_max=None, can_delete_extra=True):\n     \"\"\"\n     Return an ``InlineFormSet`` for the given kwargs.\n \n@@ -1082,6 +1082,7 @@ def inlineformset_factory(parent_model, model, form=ModelForm,\n         'error_messages': error_messages,\n         'field_classes': field_classes,\n         'absolute_max': absolute_max,\n+        'can_delete_extra': can_delete_extra,\n     }\n     FormSet = modelformset_factory(model, **kwargs)\n     FormSet.fk = fk\n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1197,6 +1197,51 @@ def test_html_safe(self):\n         self.assertTrue(hasattr(formset, '__html__'))\n         self.assertEqual(str(formset), formset.__html__())\n \n+    def test_can_delete_extra_formset_forms(self):\n+        ChoiceFormFormset = formset_factory(form=Choice, can_delete=True, extra=2)\n+        formset = ChoiceFormFormset()\n+        self.assertEqual(len(formset), 2)\n+        self.assertIn('DELETE', formset.forms[0].fields)\n+        self.assertIn('DELETE', formset.forms[1].fields)\n+\n+    def test_disable_delete_extra_formset_forms(self):\n+        ChoiceFormFormset = formset_factory(\n+            form=Choice,\n+            can_delete=True,\n+            can_delete_extra=False,\n+            extra=2,\n+        )\n+        formset = ChoiceFormFormset()\n+        self.assertEqual(len(formset), 2)\n+        self.assertNotIn('DELETE', formset.forms[0].fields)\n+        self.assertNotIn('DELETE', formset.forms[1].fields)\n+\n+        formset = ChoiceFormFormset(initial=[{'choice': 'Zero', 'votes': '1'}])\n+        self.assertEqual(len(formset), 3)\n+        self.assertIn('DELETE', formset.forms[0].fields)\n+        self.assertNotIn('DELETE', formset.forms[1].fields)\n+        self.assertNotIn('DELETE', formset.forms[2].fields)\n+\n+        formset = ChoiceFormFormset(data={\n+            'form-0-choice': 'Zero',\n+            'form-0-votes': '0',\n+            'form-0-DELETE': 'on',\n+            'form-1-choice': 'One',\n+            'form-1-votes': '1',\n+            'form-2-choice': '',\n+            'form-2-votes': '',\n+            'form-TOTAL_FORMS': '3',\n+            'form-INITIAL_FORMS': '1',\n+        }, initial=[{'choice': 'Zero', 'votes': '1'}])\n+        self.assertEqual(formset.cleaned_data, [\n+            {'choice': 'Zero', 'votes': 0, 'DELETE': True},\n+            {'choice': 'One', 'votes': 1},\n+            {},\n+        ])\n+        self.assertIs(formset._should_delete_form(formset.forms[0]), True)\n+        self.assertIs(formset._should_delete_form(formset.forms[1]), False)\n+        self.assertIs(formset._should_delete_form(formset.forms[2]), False)\n+\n \n class FormsetAsTagTests(SimpleTestCase):\n     def setUp(self):\ndiff --git a/tests/model_formsets/tests.py b/tests/model_formsets/tests.py\n--- a/tests/model_formsets/tests.py\n+++ b/tests/model_formsets/tests.py\n@@ -1916,3 +1916,57 @@ def test_inlineformset_factory_absolute_max_with_max_num(self):\n             formset.non_form_errors(),\n             ['Please submit 20 or fewer forms.'],\n         )\n+\n+    def test_modelformset_factory_can_delete_extra(self):\n+        AuthorFormSet = modelformset_factory(\n+            Author,\n+            fields='__all__',\n+            can_delete=True,\n+            can_delete_extra=True,\n+            extra=2,\n+        )\n+        formset = AuthorFormSet()\n+        self.assertEqual(len(formset), 2)\n+        self.assertIn('DELETE', formset.forms[0].fields)\n+        self.assertIn('DELETE', formset.forms[1].fields)\n+\n+    def test_modelformset_factory_disable_delete_extra(self):\n+        AuthorFormSet = modelformset_factory(\n+            Author,\n+            fields='__all__',\n+            can_delete=True,\n+            can_delete_extra=False,\n+            extra=2,\n+        )\n+        formset = AuthorFormSet()\n+        self.assertEqual(len(formset), 2)\n+        self.assertNotIn('DELETE', formset.forms[0].fields)\n+        self.assertNotIn('DELETE', formset.forms[1].fields)\n+\n+    def test_inlineformset_factory_can_delete_extra(self):\n+        BookFormSet = inlineformset_factory(\n+            Author,\n+            Book,\n+            fields='__all__',\n+            can_delete=True,\n+            can_delete_extra=True,\n+            extra=2,\n+        )\n+        formset = BookFormSet()\n+        self.assertEqual(len(formset), 2)\n+        self.assertIn('DELETE', formset.forms[0].fields)\n+        self.assertIn('DELETE', formset.forms[1].fields)\n+\n+    def test_inlineformset_factory_can_not_delete_extra(self):\n+        BookFormSet = inlineformset_factory(\n+            Author,\n+            Book,\n+            fields='__all__',\n+            can_delete=True,\n+            can_delete_extra=False,\n+            extra=2,\n+        )\n+        formset = BookFormSet()\n+        self.assertEqual(len(formset), 2)\n+        self.assertNotIn('DELETE', formset.forms[0].fields)\n+        self.assertNotIn('DELETE', formset.forms[1].fields)\n",
  "problem_statement": "formsets with can_delete=True shouldn't add delete field to extra forms\nDescription\n\t\nCurrent behavior of formsets with can_delete=True is to add a delete field to every form. This behavior differs from that expected, however (why would one want a delete option on an \"add\" form?), as well as that of the builtin admin. I've included a patch on formsets.py, but haven't bothered with patching tests yet.\n",
  "hints_text": "don't add delete field to formset extra forms\nnewer diff with edit to forms.models to avoid error on save\nI thought brosner already had done this. Seems a valid issue, anyway.\nHaving lived with this for a while, I can see the case where one might want a delete field on extra forms. I'd still argue that it shouldn't be the default, but it could be another option on formsets. Perhaps delete_extra or extra_delete?\nI don't think this is the case on trunk anymore. I don't see delete checkboxes for \"add\" forms.\nThe delete fields still appear here on all rows with the latest trunk, r11468. from django import forms class Form(forms.Form): test = forms.CharField() FormSet = forms.formsets.formset_factory(Form, can_delete=1) formset = FormSet(initial=[{'test':'Some initial data for the first row'}]) The formset contains two rows, both of which have a delete checkbox.\nupdated patch for 1.3.1\nChange UI/UX from NULL to False.\nChange Easy pickings from NULL to False.\nWhile I can understand how from a usability perspective this could be confusing, the ability to delete can also be a useful way to discard a new form entry rather than having to clear each populated field for the given form(s). As a result, I propose adding a can_delete_extra option to formsets, which allow developers to decide whether they wish to omit deletion fields from their formsets without having to write any any additional logic in to their templates/views. I'm about to attach the relevant patches. If accepted, I'm happy to provide a patch to public documentation for reference also.\nLatest 'before' test to confirm behaviour\nPotential solution by adding in 'can_delete_extra' option\nTests introduced to ensure all is well following introduction of potential solution\n​PR\nLeft comments for improvement on the PR.\nAddressed points raised in PR (4772) and opened new PR (5323) as advised.\nThanks for the updating patch. After you do so, don't forget to uncheck \"Patch needs improvement\" so the ticket returns to the review queue. I'll leave it checked for now as we've hit the feature freeze for 1.9 and the patch will need to be updated for 1.10 once we cut the stable/1.9.x branch this week.\nThanks Tim, I've updated the version number in the associated documentation from 1.9 to 1.10 accordingly. I'll update the ticket once the automated builds have succeeded.\nThe new option should be available on model formsets too.",
  "created_at": "2020-06-22T19:27:10Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_disable_delete_extra_formset_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_inlineformset_factory_can_delete_extra (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_inlineformset_factory_can_not_delete_extra (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_can_delete_extra (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_disable_delete_extra (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\"]",
  "PASS_TO_PASS": "[\"all_valid() validates all forms, even when some are invalid.\", \"test_valid (forms_tests.tests.test_formsets.AllValidTests)\", \"is_multipart() works with an empty formset.\", \"An empty formset still calls clean()\", \"Media is available on empty formset.\", \"test_add_form_deletion_when_invalid (model_formsets.tests.DeletionTests)\", \"test_change_form_deletion_when_invalid (model_formsets.tests.DeletionTests)\", \"test_deletion (model_formsets.tests.DeletionTests)\", \"test_outdated_deletion (model_formsets.tests.DeletionTests)\", \"test_empty_forms_are_unbound (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_form_errors_are_caught_by_formset (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_no_data_raises_validation_error (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_with_management_data_attrs_work_fine (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_as_p (forms_tests.tests.test_formsets.FormsetAsTagTests)\", \"test_as_table (forms_tests.tests.test_formsets.FormsetAsTagTests)\", \"test_as_ul (forms_tests.tests.test_formsets.FormsetAsTagTests)\", \"test_callable_defaults (model_formsets.tests.ModelFormsetTest)\", \"test_commit_false (model_formsets.tests.ModelFormsetTest)\", \"test_custom_form (model_formsets.tests.ModelFormsetTest)\", \"test_custom_pk (model_formsets.tests.ModelFormsetTest)\", \"test_custom_queryset_init (model_formsets.tests.ModelFormsetTest)\", \"test_custom_save_method (model_formsets.tests.ModelFormsetTest)\", \"test_foreign_keys_in_parents (model_formsets.tests.ModelFormsetTest)\", \"test_initial_form_count_empty_data_raises_validation_error (model_formsets.tests.ModelFormsetTest)\", \"test_inline_formsets (model_formsets.tests.ModelFormsetTest)\", \"test_inline_formsets_save_as_new (model_formsets.tests.ModelFormsetTest)\", \"test_inline_formsets_with_custom_pk (model_formsets.tests.ModelFormsetTest)\", \"test_inline_formsets_with_custom_save_method (model_formsets.tests.ModelFormsetTest)\", \"test_inline_formsets_with_custom_save_method_related_instance (model_formsets.tests.ModelFormsetTest)\", \"test_inline_formsets_with_multi_table_inheritance (model_formsets.tests.ModelFormsetTest)\", \"test_inline_formsets_with_nullable_unique_together (model_formsets.tests.ModelFormsetTest)\", \"Regression for #23451\", \"test_inlineformset_factory_with_null_fk (model_formsets.tests.ModelFormsetTest)\", \"test_inlineformset_with_arrayfield (model_formsets.tests.ModelFormsetTest)\", \"test_max_num (model_formsets.tests.ModelFormsetTest)\", \"test_min_num (model_formsets.tests.ModelFormsetTest)\", \"test_min_num_with_existing (model_formsets.tests.ModelFormsetTest)\", \"test_model_formset_with_custom_pk (model_formsets.tests.ModelFormsetTest)\", \"test_model_formset_with_initial_model_instance (model_formsets.tests.ModelFormsetTest)\", \"test_model_formset_with_initial_queryset (model_formsets.tests.ModelFormsetTest)\", \"test_model_inheritance (model_formsets.tests.ModelFormsetTest)\", \"Regression for #19733\", \"test_modelformset_validate_max_flag (model_formsets.tests.ModelFormsetTest)\", \"test_prevent_change_outer_model_and_create_invalid_data (model_formsets.tests.ModelFormsetTest)\", \"test_prevent_duplicates_from_with_the_same_formset (model_formsets.tests.ModelFormsetTest)\", \"test_simple_save (model_formsets.tests.ModelFormsetTest)\", \"test_unique_together_validation (model_formsets.tests.ModelFormsetTest)\", \"test_unique_together_with_inlineformset_factory (model_formsets.tests.ModelFormsetTest)\", \"test_unique_true_enforces_max_num_one (model_formsets.tests.ModelFormsetTest)\", \"test_unique_validation (model_formsets.tests.ModelFormsetTest)\", \"test_validation_with_child_model_without_id (model_formsets.tests.ModelFormsetTest)\", \"test_validation_with_invalid_id (model_formsets.tests.ModelFormsetTest)\", \"test_validation_with_nonexistent_id (model_formsets.tests.ModelFormsetTest)\", \"test_validation_without_id (model_formsets.tests.ModelFormsetTest)\", \"test_absolute_max (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_absolute_max_invalid (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_absolute_max_with_max_num (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_basic_formset (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"A form that's displayed as blank may be submitted as blank.\", \"test_can_delete_extra_formset_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_clean_hook (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_default_absolute_max (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_delete_prefilled_data (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_displaying_more_than_one_blank_form (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_empty_ordered_fields (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_form_kwargs_empty_form (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_form_kwargs_formset (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"Form kwargs can be passed dynamically in a formset.\", \"Formsets call is_valid() on each form.\", \"Formset's forms use the formset's error_class.\", \"test_formset_has_changed (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_initial_data (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"Formset instances are iterable.\", \"A formsets without any forms evaluates as True.\", \"test_formset_splitdatetimefield (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"A valid formset should have 0 total errors.\", \"test_formset_total_error_count_with_non_form_errors (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_validate_max_flag (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_validate_min_excludes_empty_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_validate_min_flag (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_validate_min_unchanged_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_validation (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_validation_count (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_with_deletion (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_with_deletion_invalid_deleted_form (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_with_deletion_remove_deletion_flag (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"FormSets with ordering + deletion.\", \"test_formsets_with_order_custom_widget (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formsets_with_ordering (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"A formset has a hard limit on the number of forms instantiated.\", \"test_html_safe (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"Can increase the built-in forms limit via a higher max_num.\", \"test_invalid_deleted_form_with_ordering (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_limited_max_forms_two (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"max_num has no effect when extra is less than max_num.\", \"Limiting the maximum number of forms with max_num.\", \"The management form has the correct prefix.\", \"test_max_num_with_initial_data (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_max_num_zero (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_max_num_zero_with_initial (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"\\\"\", \"More than 1 empty form can be displayed using min_num.\", \"test_more_initial_data (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_more_initial_form_result_in_one (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_more_initial_than_max_num (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_non_form_errors (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_non_form_errors_run_full_clean (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"Ordering works with blank fieldsets.\", \"test_second_form_partially_filled (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"A partially completed form is invalid.\", \"Just one form may be completed.\", \"test_validate_max_ignores_forms_marked_for_deletion (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_inlineformset_factory_absolute_max (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_inlineformset_factory_absolute_max_with_max_num (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_inlineformset_factory_error_messages_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_inlineformset_factory_field_class_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_inlineformset_factory_help_text_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_inlineformset_factory_labels_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_inlineformset_factory_widgets (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_absolute_max (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_absolute_max_with_max_num (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_error_messages_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_field_class_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_help_text_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_labels_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_widgets (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.643219",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}