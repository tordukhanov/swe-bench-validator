{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-14371",
  "base_commit": "e2a2ca3eab1defc71aedf4cf3982f7d4793faacf",
  "patch": "diff --git a/astropy/coordinates/matrix_utilities.py b/astropy/coordinates/matrix_utilities.py\n--- a/astropy/coordinates/matrix_utilities.py\n+++ b/astropy/coordinates/matrix_utilities.py\n@@ -136,7 +136,7 @@ def angle_axis(matrix):\n     return Angle(angle, u.radian), -axis / r\n \n \n-def is_O3(matrix):\n+def is_O3(matrix, atol=None):\n     \"\"\"Check whether a matrix is in the length-preserving group O(3).\n \n     Parameters\n@@ -144,6 +144,11 @@ def is_O3(matrix):\n     matrix : (..., N, N) array-like\n         Must have attribute ``.shape`` and method ``.swapaxes()`` and not error\n         when using `~numpy.isclose`.\n+    atol : float, optional\n+        The allowed absolute difference.\n+        If `None` it defaults to 1e-15 or 5 * epsilon of the matrix's dtype, if floating.\n+\n+        .. versionadded:: 5.3\n \n     Returns\n     -------\n@@ -159,14 +164,20 @@ def is_O3(matrix):\n     \"\"\"\n     # matrix is in O(3) (rotations, proper and improper).\n     I = np.identity(matrix.shape[-1])\n+    if atol is None:\n+        if np.issubdtype(matrix.dtype, np.floating):\n+            atol = np.finfo(matrix.dtype).eps * 5\n+        else:\n+            atol = 1e-15\n+\n     is_o3 = np.all(\n-        np.isclose(matrix @ matrix.swapaxes(-2, -1), I, atol=1e-15), axis=(-2, -1)\n+        np.isclose(matrix @ matrix.swapaxes(-2, -1), I, atol=atol), axis=(-2, -1)\n     )\n \n     return is_o3\n \n \n-def is_rotation(matrix, allow_improper=False):\n+def is_rotation(matrix, allow_improper=False, atol=None):\n     \"\"\"Check whether a matrix is a rotation, proper or improper.\n \n     Parameters\n@@ -178,6 +189,11 @@ def is_rotation(matrix, allow_improper=False):\n         Whether to restrict check to the SO(3), the group of proper rotations,\n         or also allow improper rotations (with determinant -1).\n         The default (False) is only SO(3).\n+    atol : float, optional\n+        The allowed absolute difference.\n+        If `None` it defaults to 1e-15 or 5 * epsilon of the matrix's dtype, if floating.\n+\n+        .. versionadded:: 5.3\n \n     Returns\n     -------\n@@ -198,13 +214,19 @@ def is_rotation(matrix, allow_improper=False):\n     For more information, see https://en.wikipedia.org/wiki/Orthogonal_group\n \n     \"\"\"\n+    if atol is None:\n+        if np.issubdtype(matrix.dtype, np.floating):\n+            atol = np.finfo(matrix.dtype).eps * 5\n+        else:\n+            atol = 1e-15\n+\n     # matrix is in O(3).\n-    is_o3 = is_O3(matrix)\n+    is_o3 = is_O3(matrix, atol=atol)\n \n     # determinant checks  for rotation (proper and improper)\n     if allow_improper:  # determinant can be +/- 1\n-        is_det1 = np.isclose(np.abs(np.linalg.det(matrix)), 1.0)\n+        is_det1 = np.isclose(np.abs(np.linalg.det(matrix)), 1.0, atol=atol)\n     else:  # restrict to SO(3)\n-        is_det1 = np.isclose(np.linalg.det(matrix), 1.0)\n+        is_det1 = np.isclose(np.linalg.det(matrix), 1.0, atol=atol)\n \n     return is_o3 & is_det1\n",
  "test_patch": "diff --git a/astropy/coordinates/tests/test_matrix_utilities.py b/astropy/coordinates/tests/test_matrix_utilities.py\n--- a/astropy/coordinates/tests/test_matrix_utilities.py\n+++ b/astropy/coordinates/tests/test_matrix_utilities.py\n@@ -72,6 +72,10 @@ def test_is_O3():\n     # and (M, 3, 3)\n     n1 = np.tile(m1, (2, 1, 1))\n     assert tuple(is_O3(n1)) == (True, True)  # (show the broadcasting)\n+    # Test atol parameter\n+    nn1 = np.tile(0.5 * m1, (2, 1, 1))\n+    assert tuple(is_O3(nn1)) == (False, False)  # (show the broadcasting)\n+    assert tuple(is_O3(nn1, atol=1)) == (True, True)  # (show the broadcasting)\n \n     # reflection\n     m2 = m1.copy()\n@@ -98,6 +102,10 @@ def test_is_rotation():\n     # and (M, 3, 3)\n     n1 = np.tile(m1, (2, 1, 1))\n     assert tuple(is_rotation(n1)) == (True, True)  # (show the broadcasting)\n+    # Test atol parameter\n+    nn1 = np.tile(0.5 * m1, (2, 1, 1))\n+    assert tuple(is_rotation(nn1)) == (False, False)  # (show the broadcasting)\n+    assert tuple(is_rotation(nn1, atol=10)) == (True, True)  # (show the broadcasting)\n \n     # Improper rotation (unit rotation + reflection)\n     m2 = np.identity(3)\n",
  "problem_statement": "Add ``atol`` argument to function ``is_O3``\nOr at least use the maximum precision of the matrix dtype instead of the arbitrarily chosen 1e-15.\r\n\r\nhttps://github.com/astropy/astropy/blob/3912916dad56920514ba648be400a5f82add041a/astropy/coordinates/matrix_utilities.py#L137-L163\n",
  "hints_text": "Sounds like a reasonable request, especially given you were the one who added it in https://github.com/astropy/astropy/pull/11444 . ðŸ˜¸ \nYeah ðŸ˜† . An effective, if somewhat incompletely-implemented solution. ",
  "created_at": "2023-02-08T19:31:02Z",
  "version": "5.1",
  "FAIL_TO_PASS": "[\"astropy/coordinates/tests/test_matrix_utilities.py::test_is_O3\", \"astropy/coordinates/tests/test_matrix_utilities.py::test_is_rotation\"]",
  "PASS_TO_PASS": "[\"astropy/coordinates/tests/test_matrix_utilities.py::test_rotation_matrix\", \"astropy/coordinates/tests/test_matrix_utilities.py::test_angle_axis\", \"astropy/coordinates/tests/test_matrix_utilities.py::test_matrix_product_deprecation\"]",
  "environment_setup_commit": "5f74eacbcc7fff707a44d8eb58adaa514cb7dcb5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.538555",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}