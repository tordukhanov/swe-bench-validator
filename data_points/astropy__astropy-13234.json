{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-13234",
  "base_commit": "11b3214f18b74aea5e3f8349e50ae1b09c39d30e",
  "patch": "diff --git a/astropy/table/serialize.py b/astropy/table/serialize.py\n--- a/astropy/table/serialize.py\n+++ b/astropy/table/serialize.py\n@@ -293,14 +293,18 @@ def _construct_mixin_from_obj_attrs_and_info(obj_attrs, info):\n     # untrusted code by only importing known astropy classes.\n     cls_full_name = obj_attrs.pop('__class__', None)\n     if cls_full_name is None:\n-        cls = SerializedColumn\n-    elif cls_full_name not in __construct_mixin_classes:\n+        # We're dealing with a SerializedColumn holding columns, stored in\n+        # obj_attrs. For this case, info holds the name (and nothing else).\n+        mixin = SerializedColumn(obj_attrs)\n+        mixin.info.name = info['name']\n+        return mixin\n+\n+    if cls_full_name not in __construct_mixin_classes:\n         raise ValueError(f'unsupported class for construct {cls_full_name}')\n-    else:\n-        mod_name, _, cls_name = cls_full_name.rpartition('.')\n-        module = import_module(mod_name)\n-        cls = getattr(module, cls_name)\n \n+    mod_name, _, cls_name = cls_full_name.rpartition('.')\n+    module = import_module(mod_name)\n+    cls = getattr(module, cls_name)\n     for attr, value in info.items():\n         if attr in cls.info.attrs_from_parent:\n             obj_attrs[attr] = value\n@@ -342,7 +346,11 @@ def _construct_mixin_from_columns(new_name, obj_attrs, out):\n     data_attrs_map = {}\n     for name, val in obj_attrs.items():\n         if isinstance(val, SerializedColumn):\n-            if 'name' in val:\n+            # A SerializedColumn can just link to a serialized column using a name\n+            # (e.g., time.jd1), or itself be a mixin (e.g., coord.obstime).  Note\n+            # that in principle a mixin could have include a column called 'name',\n+            # hence we check whether the value is actually a string (see gh-13232).\n+            if 'name' in val and isinstance(val['name'], str):\n                 data_attrs_map[val['name']] = name\n             else:\n                 out_name = f'{new_name}.{name}'\n@@ -352,24 +360,26 @@ def _construct_mixin_from_columns(new_name, obj_attrs, out):\n     for name in data_attrs_map.values():\n         del obj_attrs[name]\n \n-    # Get the index where to add new column\n-    idx = min(out.colnames.index(name) for name in data_attrs_map)\n+    # The order of data_attrs_map may not match the actual order, as it is set\n+    # by the yaml description.  So, sort names by position in the serialized table.\n+    # Keep the index of the first column, so we can insert the new one there later.\n+    names = sorted(data_attrs_map, key=out.colnames.index)\n+    idx = out.colnames.index(names[0])\n \n     # Name is the column name in the table (e.g. \"coord.ra\") and\n     # data_attr is the object attribute name  (e.g. \"ra\").  A different\n     # example would be a formatted time object that would have (e.g.)\n     # \"time_col\" and \"value\", respectively.\n-    for name, data_attr in data_attrs_map.items():\n-        obj_attrs[data_attr] = out[name]\n+    for name in names:\n+        obj_attrs[data_attrs_map[name]] = out[name]\n         del out[name]\n \n     info = obj_attrs.pop('__info__', {})\n-    if len(data_attrs_map) == 1:\n+    if len(names) == 1:\n         # col is the first and only serialized column; in that case, use info\n         # stored on the column. First step is to get that first column which\n         # has been moved from `out` to `obj_attrs` above.\n-        data_attr = next(iter(data_attrs_map.values()))\n-        col = obj_attrs[data_attr]\n+        col = obj_attrs[data_attrs_map[name]]\n \n         # Now copy the relevant attributes\n         for attr, nontrivial in (('unit', lambda x: x not in (None, '')),\n",
  "test_patch": "diff --git a/astropy/io/ascii/tests/test_ecsv.py b/astropy/io/ascii/tests/test_ecsv.py\n--- a/astropy/io/ascii/tests/test_ecsv.py\n+++ b/astropy/io/ascii/tests/test_ecsv.py\n@@ -267,15 +267,10 @@ def assert_objects_equal(obj1, obj2, attrs, compare_class=True):\n     if compare_class:\n         assert obj1.__class__ is obj2.__class__\n \n-    # For a column that is a native astropy Column, ignore the specified\n-    # `attrs`. This happens for a mixin like Quantity that is stored in a\n-    # `Table` (not QTable).\n-    if isinstance(obj1, Column):\n-        attrs = []\n-\n     assert obj1.shape == obj2.shape\n \n-    info_attrs = ['info.name', 'info.format', 'info.unit', 'info.description']\n+    info_attrs = ['info.name', 'info.format', 'info.unit', 'info.description',\n+                  'info.dtype']\n     for attr in attrs + info_attrs:\n         a1 = obj1\n         a2 = obj2\n@@ -416,7 +411,12 @@ def test_ecsv_mixins_per_column(table_cls, name_col, ndim):\n \n     for colname in t.colnames:\n         assert len(t2[colname].shape) == ndim\n-        compare = ['data'] if colname in ('c1', 'c2') else compare_attrs[colname]\n+        if colname in ('c1', 'c2'):\n+            compare = ['data']\n+        else:\n+            # Storing Longitude as Column loses wrap_angle.\n+            compare = [attr for attr in compare_attrs[colname]\n+                       if not (attr == 'wrap_angle' and table_cls is Table)]\n         assert_objects_equal(t[colname], t2[colname], compare)\n \n     # Special case to make sure Column type doesn't leak into Time class data\ndiff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -18,6 +18,7 @@\n from astropy.table.table_helpers import simple_table\n from astropy.units import allclose as quantity_allclose\n from astropy.units.format.fits import UnitScaleError\n+from astropy.utils.compat import NUMPY_LT_1_22\n from astropy.utils.data import get_pkg_data_filename\n from astropy.utils.exceptions import (AstropyUserWarning,\n                                       AstropyDeprecationWarning)\n@@ -723,7 +724,8 @@ def assert_objects_equal(obj1, obj2, attrs, compare_class=True):\n     if compare_class:\n         assert obj1.__class__ is obj2.__class__\n \n-    info_attrs = ['info.name', 'info.format', 'info.unit', 'info.description', 'info.meta']\n+    info_attrs = ['info.name', 'info.format', 'info.unit', 'info.description', 'info.meta',\n+                  'info.dtype']\n     for attr in attrs + info_attrs:\n         a1 = obj1\n         a2 = obj2\n@@ -745,6 +747,15 @@ def assert_objects_equal(obj1, obj2, attrs, compare_class=True):\n \n         if isinstance(a1, np.ndarray) and a1.dtype.kind == 'f':\n             assert quantity_allclose(a1, a2, rtol=1e-15)\n+        elif isinstance(a1, np.dtype):\n+            # FITS does not perfectly preserve dtype: byte order can change, and\n+            # unicode gets stored as bytes.  So, we just check safe casting, to\n+            # ensure we do not, e.g., accidentally change integer to float, etc.\n+            if NUMPY_LT_1_22 and a1.names:\n+                # For old numpy, can_cast does not deal well with structured dtype.\n+                assert a1.names == a2.names\n+            else:\n+                assert np.can_cast(a2, a1, casting='safe')\n         else:\n             assert np.all(a1 == a2)\n \ndiff --git a/astropy/io/misc/tests/test_hdf5.py b/astropy/io/misc/tests/test_hdf5.py\n--- a/astropy/io/misc/tests/test_hdf5.py\n+++ b/astropy/io/misc/tests/test_hdf5.py\n@@ -13,6 +13,7 @@\n from astropy.utils.data import get_pkg_data_filename\n from astropy.utils.misc import _NOT_OVERWRITING_MSG_MATCH\n from astropy.io.misc.hdf5 import meta_path\n+from astropy.utils.compat import NUMPY_LT_1_22\n from astropy.utils.compat.optional_deps import HAS_H5PY  # noqa\n if HAS_H5PY:\n     import h5py\n@@ -651,7 +652,8 @@ def assert_objects_equal(obj1, obj2, attrs, compare_class=True):\n     if compare_class:\n         assert obj1.__class__ is obj2.__class__\n \n-    info_attrs = ['info.name', 'info.format', 'info.unit', 'info.description', 'info.meta']\n+    info_attrs = ['info.name', 'info.format', 'info.unit', 'info.description', 'info.meta',\n+                  'info.dtype']\n     for attr in attrs + info_attrs:\n         a1 = obj1\n         a2 = obj2\n@@ -673,6 +675,15 @@ def assert_objects_equal(obj1, obj2, attrs, compare_class=True):\n \n         if isinstance(a1, np.ndarray) and a1.dtype.kind == 'f':\n             assert quantity_allclose(a1, a2, rtol=1e-15)\n+        elif isinstance(a1, np.dtype):\n+            # HDF5 does not perfectly preserve dtype: byte order can change, and\n+            # unicode gets stored as bytes.  So, we just check safe casting, to\n+            # ensure we do not, e.g., accidentally change integer to float, etc.\n+            if NUMPY_LT_1_22 and a1.names:\n+                # For old numpy, can_cast does not deal well with structured dtype.\n+                assert a1.names == a2.names\n+            else:\n+                assert np.can_cast(a2, a1, casting='safe')\n         else:\n             assert np.all(a1 == a2)\n \ndiff --git a/astropy/io/tests/mixin_columns.py b/astropy/io/tests/mixin_columns.py\n--- a/astropy/io/tests/mixin_columns.py\n+++ b/astropy/io/tests/mixin_columns.py\n@@ -45,10 +45,10 @@\n                    (2, (2.5, 2.6))],\n                   name='su',\n                   dtype=[('i', np.int64),\n-                         ('f', [('p0', np.float64), ('p1', np.float64)])])\n-su2 = table.Column([(['d', 'c'], [1.6, 1.5]),\n-                    (['b', 'a'], [2.5, 2.6])],\n-                   dtype=[('s', 'U1', (2,)), ('f', 'f8', (2,))])\n+                         ('f', [('p1', np.float64), ('p0', np.float64)])])\n+su2 = table.Column([(['snake', 'c'], [1.6, 1.5]),\n+                    (['eal', 'a'], [2.5, 2.6])],\n+                   dtype=[('name', 'U5', (2,)), ('f', 'f8', (2,))])\n \n # NOTE: for testing, the name of the column \"x\" for the\n # Quantity is important since it tests the fix for #10215\n@@ -113,7 +113,7 @@\n             'differentials.s.d_lat', 'differentials.s.d_distance'],\n     'obj': [],\n     'su': ['i', 'f.p0', 'f.p1'],\n-    'su2': ['s', 'f'],\n+    'su2': ['name', 'f'],\n }\n non_trivial_names = {\n     'cr': ['cr.x', 'cr.y', 'cr.z'],\n@@ -139,8 +139,8 @@\n             'srd.differentials.s.d_lon_coslat',\n             'srd.differentials.s.d_lat',\n             'srd.differentials.s.d_distance'],\n-    'su': ['su.i', 'su.f.p0', 'su.f.p1'],\n-    'su2': ['su2.s', 'su2.f'],\n+    'su': ['su.i', 'su.f.p1', 'su.f.p0'],\n+    'su2': ['su2.name', 'su2.f'],\n     'tm': ['tm.jd1', 'tm.jd2'],\n     'tm2': ['tm2.jd1', 'tm2.jd2'],\n     'tm3': ['tm3.jd1', 'tm3.jd2',\n",
  "problem_statement": "Structured column serialization round-trip fails with field name of \"name\"\n<!-- This comments are hidden when you submit the issue,\r\nso you do not need to remove them! -->\r\n\r\n<!-- Please be sure to check out our contributing guidelines,\r\nhttps://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .\r\nPlease be sure to check out our code of conduct,\r\nhttps://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->\r\n\r\n<!-- Please have a search on our GitHub repository to see if a similar\r\nissue has already been posted.\r\nIf a similar issue is closed, have a quick look to see if you are satisfied\r\nby the resolution.\r\nIf not please go ahead and open an issue! -->\r\n\r\n<!-- Please check that the development version still produces the same bug.\r\nYou can install development version with\r\npip install git+https://github.com/astropy/astropy\r\ncommand. -->\r\n\r\n### Description\r\n<!-- Provide a general description of the bug. -->\r\nA structured column with a field name of `name` cannot be round-tripped through ECSV. Along with #13231 this suggests a tweak to the serialization format is needed. Perhaps:\r\n\r\n```\r\n#       data: !astropy.table.SerializedColumn\r\n#         - {name:z:, data:!astropy.table.SerializedColumn {name: c.z}}\r\n#         - {name:name, data:!astropy.table.SerializedColumn {name: c.name}}\r\n#         - {name:y, data:!astropy.table.SerializedColumn {name: c.y}}\r\n```\r\ncc: @mhvk \r\n\r\n### Expected behavior\r\n<!-- What did you expect to happen. -->\r\nIt should work!\r\n\r\n### Steps to Reproduce\r\n<!-- Ideally a code example could be provided so we can run it ourselves. -->\r\n<!-- If you are pasting code, use triple backticks (```) around\r\nyour code snippet. -->\r\n<!-- If necessary, sanitize your screen output to be pasted so you do not\r\nreveal secrets like tokens and passwords. -->\r\n\r\nCode:\r\n```python\r\nimport io\r\nimport numpy as np\r\nfrom astropy.table import Table, Column\r\ndtype = np.dtype([('z', 'f8'), ('name', 'f8'), ('y', 'i4')])\r\nt = Table()\r\nt['c'] = Column([(1, 2, 3), (4, 5, 6)], dtype=dtype)\r\nout = io.StringIO()\r\nt.write(out, format='ascii.ecsv')\r\nprint(out.getvalue())\r\nt2 = Table.read(out.getvalue(), format='ascii.ecsv')\r\n```\r\nOutput:\r\n```\r\n# %ECSV 1.0\r\n# ---\r\n# datatype:\r\n# - {name: c.z, datatype: float64}\r\n# - {name: c.name, datatype: float64}\r\n# - {name: c.y, datatype: int32}\r\n# meta: !!omap\r\n# - __serialized_columns__:\r\n#     c:\r\n#       __class__: astropy.table.column.Column\r\n#       data: !astropy.table.SerializedColumn\r\n#         name: !astropy.table.SerializedColumn {name: c.name}\r\n#         y: !astropy.table.SerializedColumn {name: c.y}\r\n#         z: !astropy.table.SerializedColumn {name: c.z}\r\n# schema: astropy-2.0\r\nc.z c.name c.y\r\n1.0 2.0 3\r\n4.0 5.0 6\r\n\r\nTraceback (most recent call last):\r\n  File ~/git/astropy/go2.py:10 in <module>\r\n    t2 = Table.read(out.getvalue(), format='ascii.ecsv')\r\n  File ~/git/astropy/astropy/table/connect.py:62 in __call__\r\n    out = self.registry.read(cls, *args, **kwargs)\r\n  File ~/git/astropy/astropy/io/registry/core.py:212 in read\r\n    data = reader(*args, **kwargs)\r\n  File ~/git/astropy/astropy/io/ascii/connect.py:18 in io_read\r\n    return read(filename, **kwargs)\r\n  File ~/git/astropy/astropy/io/ascii/ui.py:396 in read\r\n    dat = reader.read(table)\r\n  File ~/git/astropy/astropy/io/ascii/core.py:1403 in read\r\n    table = self.outputter(self.header.cols, self.meta)\r\n  File ~/git/astropy/astropy/io/ascii/ecsv.py:232 in __call__\r\n    out = serialize._construct_mixins_from_columns(out)\r\n  File ~/git/astropy/astropy/table/serialize.py:398 in _construct_mixins_from_columns\r\n    _construct_mixin_from_columns(new_name, obj_attrs, out)\r\n  File ~/git/astropy/astropy/table/serialize.py:346 in _construct_mixin_from_columns\r\n    data_attrs_map[val['name']] = name\r\nTypeError: unhashable type: 'SerializedColumn'\r\n```\r\n\r\n### System Details\r\n<!-- Even if you do not think this is necessary, it is useful information for the maintainers.\r\nPlease run the following snippet and paste the output below:\r\nimport platform; print(platform.platform())\r\nimport sys; print(\"Python\", sys.version)\r\nimport numpy; print(\"Numpy\", numpy.__version__)\r\nimport erfa; print(\"pyerfa\", erfa.__version__)\r\nimport astropy; print(\"astropy\", astropy.__version__)\r\nimport scipy; print(\"Scipy\", scipy.__version__)\r\nimport matplotlib; print(\"Matplotlib\", matplotlib.__version__)\r\n-->\r\n```\r\nmacOS-10.16-x86_64-i386-64bit\r\nPython 3.8.12 (default, Oct 12 2021, 06:23:56) \r\n[Clang 10.0.0 ]\r\nNumpy 1.22.2\r\npyerfa 2.0.0.1\r\nastropy 5.1.dev956+g1d10de9d45.d20220422\r\nScipy 1.8.0\r\nMatplotlib 3.5.1\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2022-05-07T22:16:47Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col24]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col25]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col24]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col25]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col24]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col25]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col24]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col25]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col24]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col25]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col24]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col25]\"]",
  "PASS_TO_PASS": "[\"astropy/io/ascii/tests/test_ecsv.py::astropy.io.ascii.tests.test_ecsv.test_round_trip_masked_table_default\", \"astropy/io/ascii/tests/test_ecsv.py::test_write_simple\", \"astropy/io/ascii/tests/test_ecsv.py::test_write_full\", \"astropy/io/ascii/tests/test_ecsv.py::test_write_read_roundtrip\", \"astropy/io/ascii/tests/test_ecsv.py::test_bad_delimiter\", \"astropy/io/ascii/tests/test_ecsv.py::test_bad_header_start\", \"astropy/io/ascii/tests/test_ecsv.py::test_bad_delimiter_input\", \"astropy/io/ascii/tests/test_ecsv.py::test_multidim_input\", \"astropy/io/ascii/tests/test_ecsv.py::test_structured_input\", \"astropy/io/ascii/tests/test_ecsv.py::test_round_trip_empty_table\", \"astropy/io/ascii/tests/test_ecsv.py::test_csv_ecsv_colnames_mismatch\", \"astropy/io/ascii/tests/test_ecsv.py::test_regression_5604\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col0]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col1]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col2]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col3]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col4]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col5]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col6]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col8]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col9]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col10]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col11]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col12]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col13]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col14]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col15]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col16]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col17]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col18]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col19]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col20]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col21]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col22]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-Table-name_col23]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col0]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col1]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col2]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col3]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col4]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col5]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col6]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col8]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col9]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col10]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col11]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col12]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col13]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col14]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col15]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col16]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col17]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col18]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col19]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col20]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col21]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col22]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[1-QTable-name_col23]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col0]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col1]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col2]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col3]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col4]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col5]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col6]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col8]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col9]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col10]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col11]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col12]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col13]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col14]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col15]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col16]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col17]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col18]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col19]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col20]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col21]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col22]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-Table-name_col23]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col0]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col1]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col2]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col3]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col4]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col5]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col6]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col8]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col9]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col10]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col11]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col12]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col13]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col14]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col15]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col16]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col17]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col18]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col19]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col20]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col21]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col22]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[2-QTable-name_col23]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col0]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col1]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col2]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col3]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col4]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col5]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col6]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col8]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col9]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col10]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col11]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col12]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col13]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col14]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col15]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col16]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col17]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col18]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col19]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col20]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col21]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col22]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-Table-name_col23]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col0]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col1]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col2]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col3]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col4]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col5]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col6]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col8]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col9]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col10]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col11]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col12]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col13]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col14]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col15]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col16]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col17]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col18]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col19]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col20]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col21]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col22]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_mixins_per_column[3-QTable-name_col23]\", \"astropy/io/ascii/tests/test_ecsv.py::test_round_trip_masked_table_default\", \"astropy/io/ascii/tests/test_ecsv.py::test_round_trip_masked_table_serialize_mask\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_round_trip_user_defined_unit[Table]\", \"astropy/io/ascii/tests/test_ecsv.py::test_ecsv_round_trip_user_defined_unit[QTable]\", \"astropy/io/ascii/tests/test_ecsv.py::test_read_masked_bool\", \"astropy/io/ascii/tests/test_ecsv.py::test_roundtrip_multidim_masked_array[,-int64-null_value]\", \"astropy/io/ascii/tests/test_ecsv.py::test_roundtrip_multidim_masked_array[,-int64-data_mask]\", \"astropy/io/ascii/tests/test_ecsv.py::test_roundtrip_multidim_masked_array[,-float64-null_value]\", \"astropy/io/ascii/tests/test_ecsv.py::test_roundtrip_multidim_masked_array[,-float64-data_mask]\", \"astropy/io/ascii/tests/test_ecsv.py::test_roundtrip_multidim_masked_array[,-bool-null_value]\", \"astropy/io/ascii/tests/test_ecsv.py::test_roundtrip_multidim_masked_array[,-bool-data_mask]\", \"astropy/io/ascii/tests/test_ecsv.py::test_roundtrip_multidim_masked_array[,-str-null_value]\", \"astropy/io/ascii/tests/test_ecsv.py::test_roundtrip_multidim_masked_array[,-str-data_mask]\", \"astropy/io/ascii/tests/test_ecsv.py::test_roundtrip_multidim_masked_array[\", \"astropy/io/ascii/tests/test_ecsv.py::test_multidim_unknown_subtype[some-user-type]\", \"astropy/io/ascii/tests/test_ecsv.py::test_multidim_unknown_subtype[complex]\", \"astropy/io/ascii/tests/test_ecsv.py::test_multidim_bad_shape\", \"astropy/io/ascii/tests/test_ecsv.py::test_write_not_json_serializable\", \"astropy/io/ascii/tests/test_ecsv.py::test_read_not_json_serializable\", \"astropy/io/ascii/tests/test_ecsv.py::test_read_bad_datatype\", \"astropy/io/ascii/tests/test_ecsv.py::test_read_complex\", \"astropy/io/ascii/tests/test_ecsv.py::test_read_str\", \"astropy/io/ascii/tests/test_ecsv.py::test_read_bad_datatype_for_object_subtype\", \"astropy/io/ascii/tests/test_ecsv.py::test_full_repr_roundtrip\", \"astropy/io/ascii/tests/test_ecsv.py::test_specialized_columns[scalar-col0-exp0]\", \"astropy/io/ascii/tests/test_ecsv.py::test_specialized_columns[2-d\", \"astropy/io/ascii/tests/test_ecsv.py::test_specialized_columns[1-d\", \"astropy/io/ascii/tests/test_ecsv.py::test_specialized_columns[scalar\", \"astropy/io/ascii/tests/test_ecsv.py::test_full_subtypes\", \"astropy/io/ascii/tests/test_ecsv.py::test_masked_empty_subtypes\", \"astropy/io/ascii/tests/test_ecsv.py::test_masked_vals_in_array_subtypes\", \"astropy/io/ascii/tests/test_ecsv.py::test_guess_ecsv_with_one_column\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_simple_meta_conflicting\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_with_custom_units_qtable\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_read_with_unit_aliases[Table]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_read_with_unit_aliases[QTable]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_masked\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_masked_nan[True]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_masked_nan[False]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_masked_serialize_data_mask\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_read_from_fileobj\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_read_with_nonstandard_units\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_write_drop_nonstandard_units[Table]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_write_drop_nonstandard_units[QTable]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_memmap\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_oned_single_element\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_write_append\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_write_overwrite\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_mask_nans_on_read\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_mask_null_on_read\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_mask_str_on_read\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_0\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_1[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_1[first]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_2[2]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_2[second]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_3[3]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_3[third]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_4\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_missing[2]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_missing[3]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_missing[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_missing[second]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_missing[]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_warning[0]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_warning[2]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_warning[third]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_in_last_hdu[0]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_in_last_hdu[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_in_last_hdu[third]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_0\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_single_table[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_single_table[first]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_single_table[None]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_1[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_1[first]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_2[2]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_2[second]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_3[3]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_3[third]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_warning[0]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_warning[2]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_warning[third]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_missing[2]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_missing[3]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_missing[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_missing[second]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_missing[]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_in_last_hdu[0]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_in_last_hdu[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_in_last_hdu[third]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_single_hdu[None]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_single_hdu[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_single_hdu[first]\", \"astropy/io/fits/tests/test_connect.py::test_masking_regression_1795\", \"astropy/io/fits/tests/test_connect.py::test_scale_error\", \"astropy/io/fits/tests/test_connect.py::test_parse_tdisp_format[EN10.5-format_return0]\", \"astropy/io/fits/tests/test_connect.py::test_parse_tdisp_format[F6.2-format_return1]\", \"astropy/io/fits/tests/test_connect.py::test_parse_tdisp_format[B5.10-format_return2]\", \"astropy/io/fits/tests/test_connect.py::test_parse_tdisp_format[E10.5E3-format_return3]\", \"astropy/io/fits/tests/test_connect.py::test_parse_tdisp_format[A21-format_return4]\", \"astropy/io/fits/tests/test_connect.py::test_fortran_to_python_format[G15.4E2-{:15.4g}]\", \"astropy/io/fits/tests/test_connect.py::test_fortran_to_python_format[Z5.10-{:5x}]\", \"astropy/io/fits/tests/test_connect.py::test_fortran_to_python_format[I6.5-{:6d}]\", \"astropy/io/fits/tests/test_connect.py::test_fortran_to_python_format[L8-{:>8}]\", \"astropy/io/fits/tests/test_connect.py::test_fortran_to_python_format[E20.7-{:20.7e}]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[{:3d}-I3]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[3d-I3]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[7.3f-F7.3]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[{:>4}-A4]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[{:7.4f}-F7.4]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[%5.3g-G5.3]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[%10s-A10]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[%.4f-F13.4]\", \"astropy/io/fits/tests/test_connect.py::test_logical_python_to_tdisp\", \"astropy/io/fits/tests/test_connect.py::test_bool_column\", \"astropy/io/fits/tests/test_connect.py::test_unicode_column\", \"astropy/io/fits/tests/test_connect.py::test_unit_warnings_read_write\", \"astropy/io/fits/tests/test_connect.py::test_convert_comment_convention\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col0]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col1]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col2]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col3]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col4]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col5]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col7]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col8]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col13]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col14]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col15]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col16]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col17]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col18]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col0]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col1]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col2]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col3]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col4]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col5]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col7]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col8]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col9]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col10]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col11]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col12]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col13]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col14]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col15]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col16]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col17]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col18]\", \"astropy/io/fits/tests/test_connect.py::test_info_attributes_with_no_mixins\", \"astropy/io/fits/tests/test_connect.py::test_round_trip_masked_table_serialize_mask[set_cols]\", \"astropy/io/fits/tests/test_connect.py::test_round_trip_masked_table_serialize_mask[names]\", \"astropy/io/fits/tests/test_connect.py::test_round_trip_masked_table_serialize_mask[class]\", \"astropy/io/fits/tests/test_connect.py::test_meta_not_modified\", \"astropy/io/misc/tests/test_hdf5.py::astropy.io.misc.tests.test_hdf5.test_round_trip_masked_table_default\"]",
  "environment_setup_commit": "cdf311e0714e611d48b0a31eb1f0e2cbffab7f23",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.527021",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}