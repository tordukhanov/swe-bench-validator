{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-17288",
  "base_commit": "2c5dbb45e2cd8832b09f1c3318b70e972e16b71d",
  "patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -206,6 +206,18 @@ def parenthesize(self, item, level, strict=False):\n         else:\n             return self._print(item)\n \n+    def parenthesize_super(self, s):\n+        \"\"\" Parenthesize s if there is a superscript in s\"\"\"\n+        if \"^\" in s:\n+            return r\"\\left({}\\right)\".format(s)\n+        return s\n+\n+    def embed_super(self, s):\n+        \"\"\" Embed s in {} if there is a superscript in s\"\"\"\n+        if \"^\" in s:\n+            return \"{{{}}}\".format(s)\n+        return s\n+\n     def doprint(self, expr):\n         tex = Printer.doprint(self, expr)\n \n@@ -671,7 +683,9 @@ def _print_Derivative(self, expr):\n             if num == 1:\n                 tex += r\"%s %s\" % (diff_symbol, self._print(x))\n             else:\n-                tex += r\"%s %s^{%s}\" % (diff_symbol, self._print(x), num)\n+                tex += r\"%s %s^{%s}\" % (diff_symbol,\n+                                        self.parenthesize_super(self._print(x)),\n+                                        num)\n \n         if dim == 1:\n             tex = r\"\\frac{%s}{%s}\" % (diff_symbol, tex)\n@@ -938,7 +952,7 @@ def _print_Not(self, e):\n         if isinstance(e.args[0], Implies):\n             return self._print_Implies(e.args[0], r\"\\not\\Rightarrow\")\n         if (e.args[0].is_Boolean):\n-            return r\"\\neg (%s)\" % self._print(e.args[0])\n+            return r\"\\neg \\left(%s\\right)\" % self._print(e.args[0])\n         else:\n             return r\"\\neg %s\" % self._print(e.args[0])\n \n",
  "test_patch": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,7 +1,7 @@\n from sympy import (\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, Indexed, IndexedBase, Integral,\n-    Interval, InverseCosineTransform, InverseFourierTransform,\n+    Interval, InverseCosineTransform, InverseFourierTransform, Derivative,\n     InverseLaplaceTransform, InverseMellinTransform, InverseSineTransform,\n     Lambda, LaplaceTransform, Limit, Matrix, Max, MellinTransform, Min, Mul,\n     Order, Piecewise, Poly, ring, field, ZZ, Pow, Product, Range, Rational,\n@@ -137,6 +137,7 @@ def test_latex_basic():\n     assert latex(~(x >> ~y)) == r\"x \\not\\Rightarrow \\neg y\"\n     assert latex(Implies(Or(x,y), z)) == r\"\\left(x \\vee y\\right) \\Rightarrow z\"\n     assert latex(Implies(z, Or(x,y))) == r\"z \\Rightarrow \\left(x \\vee y\\right)\"\n+    assert latex(~(x & y)) == r\"\\neg \\left(x \\wedge y\\right)\"\n \n     assert latex(~x, symbol_names={x: \"x_i\"}) == r\"\\neg x_i\"\n     assert latex(x & y, symbol_names={x: \"x_i\", y: \"y_i\"}) == \\\n@@ -2291,6 +2292,12 @@ def test_unit_ptinting():\n     assert latex(3*gibibyte) == r'3 \\text{gibibyte}'\n     assert latex(4*microgram/second) == r'\\frac{4 \\mu\\text{g}}{\\text{s}}'\n \n+\n+def test_issue_17092():\n+    x_star = Symbol('x^*')\n+    assert latex(Derivative(x_star, x_star,2)) == r'\\frac{d^{2}}{d \\left(x^{*}\\right)^{2}} x^{*}'\n+\n+\n def test_latex_decimal_separator():\n \n     x, y, z, t = symbols('x y z t')\n",
  "problem_statement": "Latex printing issue on derivatives with superscripted symbols\nWhen I display the derivatives of second-or-more order with superscipted symbols, it gives wrong latex expression and fails to print correctly with IPython environment.\r\n\r\nFor example,\r\n\r\n```python\r\nx_star = Symbol('x^{*}')\r\nDerivative(x_star, x_star,2)\r\n```\r\n\r\nthis gives `\\displaystyle \\frac{d^{2}}{d x^{*}^{2}} x^{*}` instead of nice latex formula.\r\n\r\nI figure that this is because  x^{*}^{2} is wrong latex expression. It should be x^{*2}, and thus I report it as an issue.\n",
  "hints_text": "I have a fix in progress. Do you really want `x^{*2}`? I think either `{x^{*}}^{2}` or `(x^{*})^{2}` makes more sense (and is easier to implement, to the extent that I can say that  `x^{*2}` will not happen, at least not now, since it requires something of a LaTeX parser...).\r\n\r\nBtw, using {} inside symbol names disables some parsing, so it may be better to use `x^*` as a symbol name and the printer will automatically translate it to `x^{*}` when outputting LaTeX and something similar when outputting to other formats. Using {} will leave the curly brackets there in the other output formats as well. (This works even for multi-character superscripts, so `x_foo^bar` comes out as `x_{foo}^{bar}`.)\nAlthough I'd like to use `x^{*2}` in my current programming, I agree with that `(x^{*})^{2}` would be more appropriate for general case.\r\n\r\nAnd thanks for the advice on using curly brackets! :)",
  "created_at": "2019-07-28T10:52:19Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_latex_basic\", \"test_issue_17092\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_latex_builtins\", \"test_latex_SingularityFunction\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_latex_functions\", \"test_function_subclass_different_name\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_indexed\", \"test_latex_derivatives\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_SetExpr\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_FourierSeries\", \"test_latex_FormalPowerSeries\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_universalset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_intersection\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_Complexes\", \"test_latex_productset\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_latex_log\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_matrix_with_functions\", \"test_latex_NDimArray\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_noncommutative\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_Poly_order\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_settings\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_PrettyPoly\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_categories\", \"test_Modules\", \"test_QuotientRing\", \"test_Tr\", \"test_Adjoint\", \"test_Transpose\", \"test_Hadamard\", \"test_ElementwiseApplyFunction\", \"test_ZeroMatrix\", \"test_OneMatrix\", \"test_Identity\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_7180\", \"test_issue_8409\", \"test_issue_7117\", \"test_issue_15439\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_issue_13651\", \"test_latex_UnevaluatedExpr\", \"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\", \"test_KroneckerProduct_printing\", \"test_Quaternion_latex_printing\", \"test_TensorProduct_printing\", \"test_WedgeProduct_printing\", \"test_issue_14041\", \"test_issue_9216\", \"test_latex_printer_tensor\", \"test_multiline_latex\", \"test_issue_15353\", \"test_trace\", \"test_print_basic\", \"test_MatrixSymbol_bold\", \"test_imaginary_unit\", \"test_text_re_im\", \"test_DiffGeomMethods\", \"test_unit_ptinting\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.115647",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}