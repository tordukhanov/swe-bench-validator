{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-7760",
  "base_commit": "074a5216f8e35288045455ccda37f87a19d4cbde",
  "patch": "diff --git a/sklearn/utils/_unittest_backport.py b/sklearn/utils/_unittest_backport.py\n--- a/sklearn/utils/_unittest_backport.py\n+++ b/sklearn/utils/_unittest_backport.py\n@@ -149,7 +149,7 @@ def __exit__(self, exc_type, exc_value, tb):\n \n \n class TestCase(unittest.TestCase):\n-    longMessage = False\n+    longMessage = True\n     failureException = AssertionError\n \n     def _formatMessage(self, msg, standardMsg):\ndiff --git a/sklearn/utils/estimator_checks.py b/sklearn/utils/estimator_checks.py\n--- a/sklearn/utils/estimator_checks.py\n+++ b/sklearn/utils/estimator_checks.py\n@@ -261,6 +261,7 @@ def _yield_all_checks(name, estimator):\n     yield check_fit2d_1feature\n     yield check_fit1d\n     yield check_get_params_invariance\n+    yield check_set_params\n     yield check_dict_unchanged\n     yield check_dont_overwrite_parameters\n \n@@ -2180,6 +2181,59 @@ def transform(self, X):\n                     shallow_params.items()))\n \n \n+@ignore_warnings(category=(DeprecationWarning, FutureWarning))\n+def check_set_params(name, estimator_orig):\n+    # Check that get_params() returns the same thing\n+    # before and after set_params() with some fuzz\n+    estimator = clone(estimator_orig)\n+\n+    orig_params = estimator.get_params(deep=False)\n+    msg = (\"get_params result does not match what was passed to set_params\")\n+\n+    estimator.set_params(**orig_params)\n+    curr_params = estimator.get_params(deep=False)\n+    assert_equal(set(orig_params.keys()), set(curr_params.keys()), msg)\n+    for k, v in curr_params.items():\n+        assert orig_params[k] is v, msg\n+\n+    # some fuzz values\n+    test_values = [-np.inf, np.inf, None]\n+\n+    test_params = deepcopy(orig_params)\n+    for param_name in orig_params.keys():\n+        default_value = orig_params[param_name]\n+        for value in test_values:\n+            test_params[param_name] = value\n+            try:\n+                estimator.set_params(**test_params)\n+            except (TypeError, ValueError) as e:\n+                e_type = e.__class__.__name__\n+                # Exception occurred, possibly parameter validation\n+                warnings.warn(\"{} occurred during set_params. \"\n+                              \"It is recommended to delay parameter \"\n+                              \"validation until fit.\".format(e_type))\n+\n+                change_warning_msg = \"Estimator's parameters changed after \" \\\n+                                     \"set_params raised {}\".format(e_type)\n+                params_before_exception = curr_params\n+                curr_params = estimator.get_params(deep=False)\n+                try:\n+                    assert_equal(set(params_before_exception.keys()),\n+                                 set(curr_params.keys()))\n+                    for k, v in curr_params.items():\n+                        assert params_before_exception[k] is v\n+                except AssertionError:\n+                    warnings.warn(change_warning_msg)\n+            else:\n+                curr_params = estimator.get_params(deep=False)\n+                assert_equal(set(test_params.keys()),\n+                             set(curr_params.keys()),\n+                             msg)\n+                for k, v in curr_params.items():\n+                    assert test_params[k] is v, msg\n+        test_params[param_name] = default_value\n+\n+\n @ignore_warnings(category=(DeprecationWarning, FutureWarning))\n def check_classifiers_regression_target(name, estimator_orig):\n     # Check if classifier throws an exception when fed regression targets\n",
  "test_patch": "diff --git a/sklearn/utils/tests/test_estimator_checks.py b/sklearn/utils/tests/test_estimator_checks.py\n--- a/sklearn/utils/tests/test_estimator_checks.py\n+++ b/sklearn/utils/tests/test_estimator_checks.py\n@@ -10,7 +10,8 @@\n from sklearn.base import BaseEstimator, ClassifierMixin\n from sklearn.utils import deprecated\n from sklearn.utils.testing import (assert_raises_regex, assert_true,\n-                                   assert_equal, ignore_warnings)\n+                                   assert_equal, ignore_warnings,\n+                                   assert_warns)\n from sklearn.utils.estimator_checks import check_estimator\n from sklearn.utils.estimator_checks import set_random_state\n from sklearn.utils.estimator_checks import set_checking_parameters\n@@ -86,6 +87,61 @@ def fit(self, X, y=None):\n         return self\n \n \n+class RaisesErrorInSetParams(BaseEstimator):\n+    def __init__(self, p=0):\n+        self.p = p\n+\n+    def set_params(self, **kwargs):\n+        if 'p' in kwargs:\n+            p = kwargs.pop('p')\n+            if p < 0:\n+                raise ValueError(\"p can't be less than 0\")\n+            self.p = p\n+        return super(RaisesErrorInSetParams, self).set_params(**kwargs)\n+\n+    def fit(self, X, y=None):\n+        X, y = check_X_y(X, y)\n+        return self\n+\n+\n+class ModifiesValueInsteadOfRaisingError(BaseEstimator):\n+    def __init__(self, p=0):\n+        self.p = p\n+\n+    def set_params(self, **kwargs):\n+        if 'p' in kwargs:\n+            p = kwargs.pop('p')\n+            if p < 0:\n+                p = 0\n+            self.p = p\n+        return super(ModifiesValueInsteadOfRaisingError,\n+                     self).set_params(**kwargs)\n+\n+    def fit(self, X, y=None):\n+        X, y = check_X_y(X, y)\n+        return self\n+\n+\n+class ModifiesAnotherValue(BaseEstimator):\n+    def __init__(self, a=0, b='method1'):\n+        self.a = a\n+        self.b = b\n+\n+    def set_params(self, **kwargs):\n+        if 'a' in kwargs:\n+            a = kwargs.pop('a')\n+            self.a = a\n+            if a is None:\n+                kwargs.pop('b')\n+                self.b = 'method2'\n+        return super(ModifiesAnotherValue,\n+                     self).set_params(**kwargs)\n+\n+    def fit(self, X, y=None):\n+        X, y = check_X_y(X, y)\n+        return self\n+\n+\n class NoCheckinPredict(BaseBadClassifier):\n     def fit(self, X, y):\n         X, y = check_X_y(X, y)\n@@ -219,6 +275,13 @@ def test_check_estimator():\n     msg = \"it does not implement a 'get_params' methods\"\n     assert_raises_regex(TypeError, msg, check_estimator, object)\n     assert_raises_regex(TypeError, msg, check_estimator, object())\n+    # check that values returned by get_params match set_params\n+    msg = \"get_params result does not match what was passed to set_params\"\n+    assert_raises_regex(AssertionError, msg, check_estimator,\n+                        ModifiesValueInsteadOfRaisingError())\n+    assert_warns(UserWarning, check_estimator, RaisesErrorInSetParams())\n+    assert_raises_regex(AssertionError, msg, check_estimator,\n+                        ModifiesAnotherValue())\n     # check that we have a fit method\n     msg = \"object has no attribute 'fit'\"\n     assert_raises_regex(AttributeError, msg, check_estimator, BaseEstimator)\n",
  "problem_statement": "Stronger common tests for setting init params? / check_estimator\nIn #7477 a solution was proposed that did something like\n\n``` python\nclass Estimator(BaseEstimator):\n    def __init__(self, param=None):\n        self._param = param\n\n    @property\n    def param(self):\n        return some_stuff(self._param)\n```\n\nThe common tests let this pass, though that should wreck havoc on `get_params` and `set_params`.\nI haven't looked into it but I think the tests should fail on this.\n\n",
  "hints_text": "I am interested in contributing. It sounds to me like you want `check_estimator` to verify that there are no properties which are parameter names?\n\nThanks for wanting to contribute.\nI think we want to check that calling `set_params` is equivalent to passing parameters in `__init__`.\nActually, I'm a bit appalled to see that we never test `set_params` at all, it seems.\n\nCan you please double check that with the current common tests the example I gave above passes?\nThe simplest test I can think of is to add a line to `check_parameters_default_constructible`\nthat does `estimator.set_params(**estimator.get_params())`. That should fail with the example I gave.\n",
  "created_at": "2016-10-26T16:03:36Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator\"]",
  "PASS_TO_PASS": "[\"sklearn/utils/tests/test_estimator_checks.py::test_check_fit_score_takes_y_works_on_deprecated_fit\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator_transformer_no_mixin\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator_clones\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_estimators_unfitted\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_no_attributes_set_in_init\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator_pairwise\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.027921",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}