{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25640",
  "base_commit": "61ed3f40057a48821ccad758fd5f04f0df1b8aab",
  "patch": "diff --git a/lib/matplotlib/backends/backend_pgf.py b/lib/matplotlib/backends/backend_pgf.py\n--- a/lib/matplotlib/backends/backend_pgf.py\n+++ b/lib/matplotlib/backends/backend_pgf.py\n@@ -657,6 +657,7 @@ def draw_text(self, gc, x, y, s, prop, angle, ismath=False, mtext=None):\n         s = _escape_and_apply_props(s, prop)\n \n         _writeln(self.fh, r\"\\begin{pgfscope}\")\n+        self._print_pgf_clip(gc)\n \n         alpha = gc.get_alpha()\n         if alpha != 1.0:\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_pgf.py b/lib/matplotlib/tests/test_backend_pgf.py\n--- a/lib/matplotlib/tests/test_backend_pgf.py\n+++ b/lib/matplotlib/tests/test_backend_pgf.py\n@@ -67,6 +67,8 @@ def create_figure():\n              ha='right', fontsize=20)\n     plt.ylabel('sans-serif, blue, $\\\\frac{\\\\sqrt{x}}{y^2}$..',\n                family='sans-serif', color='blue')\n+    plt.text(1, 1, 'should be clipped as default clip_box is Axes bbox',\n+             fontsize=20, clip_on=True)\n \n     plt.xlim(0, 1)\n     plt.ylim(0, 1)\n",
  "problem_statement": "PGF output: Contour labels extend beyond figure boundary\n### Bug report\r\n\r\n**Bug summary**\r\nWhen using contour plots with the PGF backend, contour labels close to the axes can protrude beyond the axis boundary. This was originally posted as a [question at StackOverflow](https://stackoverflow.com/q/50554835).\r\n\r\n**Code for reproduction**\r\n(See the [`contour_demo.py` example][1].)\r\n\r\n```python\r\nimport matplotlib\r\nimport numpy as np\r\nimport matplotlib.cm as cm\r\nimport matplotlib.mlab as mlab\r\nimport matplotlib.pyplot as plt\r\n\r\nmatplotlib.rcParams['xtick.direction'] = 'out'\r\nmatplotlib.rcParams['ytick.direction'] = 'out'\r\n\r\ndelta = 0.025\r\nx = np.arange(-3.0, 3.0, delta)\r\ny = np.arange(-2.0, 2.0, delta)\r\nX, Y = np.meshgrid(x, y)\r\nZ1 = mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)\r\nZ2 = mlab.bivariate_normal(X, Y, 1.5, 0.5, 1, 1)\r\n# difference of Gaussians\r\nZ = 10.0 * (Z2 - Z1)\r\n\r\n\r\n# Create a simple contour plot with labels using default colors.  The\r\n# inline argument to clabel will control whether the labels are draw\r\n# over the line segments of the contour, removing the lines beneath\r\n# the label\r\nplt.figure()\r\nCS = plt.contour(X, Y, Z)\r\nplt.clabel(CS, inline=1, fontsize=10)\r\nplt.title('Simplest default with labels')\r\n\r\nplt.savefig('plot.pgf')\r\n```\r\n\r\n**Actual outcome**\r\n\r\n![LaTeX output](https://user-images.githubusercontent.com/1915511/40949200-38ffa954-686d-11e8-8bbd-64b2b8786526.png)\r\n\r\n**Expected outcome**\r\n\r\nThe contour label at the top should be clipped, just as in the first image shown in the [`contour_demo.py` example][1].\r\n\r\n**Matplotlib version**\r\n  * Operating system: Ubuntu 17.10\r\n  * Matplotlib version: 2.2.2\r\n  * Matplotlib backend: PGF (`matplotlib.get_backend()` shows `TkAgg`, though)\r\n  * Python version: 3.6.3\r\n\r\n`matplotlib` was installed through `pip`.\r\n\r\n\r\n  [1]: https://matplotlib.org/examples/pylab_examples/contour_demo.html\n",
  "hints_text": "I can confirm the issue on master (with Fedora 28, and Python 3.6 from conda).\r\n\r\nWorkflow to play with the issue:\r\n1. a Python script `mwe.py` based on @Socob's snippet:\r\n```python\r\nimport numpy as np\r\nimport matplotlib\r\nimport matplotlib.mlab as mlab\r\nimport matplotlib.pyplot as plt\r\n\r\nmpl_version = matplotlib.__version__\r\n\r\ndelta = 0.025\r\nX, Y = np.meshgrid(np.arange(-3, 3, delta), np.arange(-2, 2, delta))\r\nZ1 = mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)\r\nZ2 = mlab.bivariate_normal(X, Y, 1.5, 0.5, 1.0, 1.0)\r\nZ = 10.0 * (Z2 - Z1)\r\n\r\nfig, ax = plt.subplots(num=\"pgf_clabel_issue\")\r\ncs = ax.contour(X, Y, Z)\r\nax.clabel(cs, inline=True, fontsize=12)\r\nax.set_title('Matplotlib {}'.format(mpl_version))\r\n\r\n#print(\"The backend is {}.\".format(matplotlib.get_backend()))\r\nfig.savefig(\"{0}_{1}.pgf\".format(fig.get_label(), mpl_version))\r\n```\r\n2. a (La)TeX file `export_pgf.tex` to process the PGF file:\r\n```latex\r\n%% https://tex.stackexchange.com/questions/13349/tikz-to-non-pdf\r\n\\documentclass[convert={density=100,size=640x480,outext=.png}]{standalone}\r\n\\usepackage{pgf}\r\n\r\n\\begin{document}\r\n    \\input{target.pgf}\r\n\\end{document}\r\n```\r\n3. a Bash script `process.sh` that calls pdflatex to export the PGF file into PNG format:\r\n```bash\r\nPGFTARGET=$1  # the PGF file one wants to process and export\r\nTMPTARGET=\"target.pgf\"  # the file the TeX file will actually look for\r\ncp $PGFTARGET $TMPTARGET\r\n\r\npdflatex --shell-escape export_pgf.tex\r\nmv export_pgf.png \"${PGFTARGET%.*}\".png\r\n#rm $TMPTARGET  # if one really wants to clean the temporary file\r\n```\r\n4. then one just has to run in CLI (leveraging the autocompletion to make things easier with the weird name of the PGF file ^^):\r\n```bash\r\npython mwe.py\r\n./process.sh pgf_clabel_issue_<TAB>\r\n```\r\nExample of output file:\r\n![pgf_clabel_issue_2 2 2 post1246 g6ec80eac6](https://user-images.githubusercontent.com/17270724/40994639-9c5446d8-68b1-11e8-8a08-33e5821b4ffc.png)\r\n\r\n**Edit:** note to myself, a fully self-sufficient workflow, with *all* files is better...\nSo I think the issue is just that text clipping doesn't work for PGF:\r\n\r\n```python\r\nimport matplotlib\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax = plt.subplots(num=\"pgf_clabel_issue\")\r\nax.set_xlim([0, 1])\r\nax.set_ylim([0, 1])\r\nax.text(0.75, 0.5, 'Hi there this should clip, but bet it doesnot', clip_on=True)\r\n\r\nfig.savefig(\"target.pgf\")\r\n```\r\n\r\n[export_pgf.pdf](https://github.com/matplotlib/matplotlib/files/2174265/export_pgf.pdf)\r\n",
  "created_at": "2023-04-07T06:09:01Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_backend_pgf.py::test_xelatex[pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdflatex[pdf]\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_backend_pgf.py::test_tex_special_chars\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pathclip\", \"lib/matplotlib/tests/test_backend_pgf.py::test_mixedmode[pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_bbox_inches\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages[lualatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages[pdflatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages[xelatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages_metadata_check[lualatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages_metadata_check[pdflatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages_metadata_check[xelatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_tex_restart_after_error\", \"lib/matplotlib/tests/test_backend_pgf.py::test_bbox_inches_tight\", \"lib/matplotlib/tests/test_backend_pgf.py::test_png_transparency\", \"lib/matplotlib/tests/test_backend_pgf.py::test_unknown_font\", \"lib/matplotlib/tests/test_backend_pgf.py::test_minus_signs_with_tex[pdflatex-pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_minus_signs_with_tex[xelatex-pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_minus_signs_with_tex[lualatex-pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_sketch_params\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.823531",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}