{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9261",
  "base_commit": "4d90277c49633705148793ab02b28353c8a59b48",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1704,7 +1704,7 @@ def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:\n             __init__ = self.get_attr(self.object, '__init__', None)\n             initdocstring = getdoc(__init__, self.get_attr,\n                                    self.config.autodoc_inherit_docstrings,\n-                                   self.parent, self.object_name)\n+                                   self.object, '__init__')\n             # for new-style classes, no __init__ means default __init__\n             if (initdocstring is not None and\n                 (initdocstring == object.__init__.__doc__ or  # for pypy\n@@ -1715,7 +1715,7 @@ def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:\n                 __new__ = self.get_attr(self.object, '__new__', None)\n                 initdocstring = getdoc(__new__, self.get_attr,\n                                        self.config.autodoc_inherit_docstrings,\n-                                       self.parent, self.object_name)\n+                                       self.object, '__new__')\n                 # for new-style classes, no __new__ means default __new__\n                 if (initdocstring is not None and\n                     (initdocstring == object.__new__.__doc__ or  # for pypy\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -838,16 +838,25 @@ def getdoc(obj: Any, attrgetter: Callable = safe_getattr,\n     if ispartial(obj) and doc == obj.__class__.__doc__:\n         return getdoc(obj.func)\n     elif doc is None and allow_inherited:\n-        doc = inspect.getdoc(obj)\n-\n-        if doc is None and cls and name:\n-            # inspect.getdoc() does not support some kind of inherited and decorated methods.\n-            # This tries to obtain the docstring from super classes.\n-            for basecls in getattr(cls, '__mro__', []):\n+        if cls and name:\n+            # Check a docstring of the attribute or method from super classes.\n+            for basecls in getmro(cls):\n                 meth = safe_getattr(basecls, name, None)\n                 if meth is not None:\n-                    doc = inspect.getdoc(meth)\n-                    if doc:\n+                    doc = attrgetter(meth, '__doc__', None)\n+                    if doc is not None:\n                         break\n \n+            if doc is None:\n+                # retry using `inspect.getdoc()`\n+                for basecls in getmro(cls):\n+                    meth = safe_getattr(basecls, name, None)\n+                    if meth is not None:\n+                        doc = inspect.getdoc(meth)\n+                        if doc is not None:\n+                            break\n+\n+        if doc is None:\n+            doc = inspect.getdoc(obj)\n+\n     return doc\n",
  "test_patch": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -674,7 +674,10 @@ def func1(a, b, c):\n def test_getdoc_inherited_decorated_method():\n     class Foo:\n         def meth(self):\n-            \"\"\"docstring.\"\"\"\n+            \"\"\"\n+            docstring\n+                indented text\n+            \"\"\"\n \n     class Bar(Foo):\n         @functools.lru_cache()\n@@ -683,7 +686,7 @@ def meth(self):\n             pass\n \n     assert inspect.getdoc(Bar.meth, getattr, False, Bar, \"meth\") is None\n-    assert inspect.getdoc(Bar.meth, getattr, True, Bar, \"meth\") == \"docstring.\"\n+    assert inspect.getdoc(Bar.meth, getattr, True, Bar, \"meth\") == Foo.meth.__doc__\n \n \n def test_is_builtin_class_method():\n",
  "problem_statement": "Building autodocs for derived classes produces invalid warnings\n**Describe the bug**\r\nGenerating API docs using the autodoc extensions, when a base class has doc strings in the constructor as well as in the class definition, and the autoclass_content feature is set to \"both\", produces superfluous warnings when parsing derived classes with overloaded constructors with no doc strings on them. \r\n\r\n**To Reproduce**\r\n1. Create a base class with a constructor, and provide both a class doc string and a constructor doc string, something like this:\r\n\r\n```\r\nclass MyBase:\r\n    \"\"\"Base class docstring\"\"\"\r\n\r\n    def __init__(self, fubar):\r\n        \"\"\"\r\n        Args:\r\n            fubar (str):\r\n                parameter description here\r\n        \"\"\"\r\n```\r\n\r\n2. Create a derived class that has an overloaded constructor, with no doc string, something like this:\r\n```\r\nclass MyDerived(MyBase):\r\n    def __init__(self):\r\n        pass\r\n```\r\n\r\n3. Enable the auto content option in Sphinx to combine the class doc string and constructor doc strings together (ie: `autoclass_content = \"both\"` in the conf.py script)\r\n\r\n4. Attempt to generate the docs using the apidoc extension (ie: when using sphinxcontrib.apidoc, just run `sphinx-build docs/ htmldocs/`)\r\n\r\n\r\n**Expected behavior**\r\nExpected behavior: the API docs for both the base and derived classes should be generated without warnings.\r\nActual behavior: docs for the base class generate correctly, but docs for the derived class produce the following warning\r\n\"docstring of sample.MyDerived: WARNING: Unexpected indentation.\" \r\n\r\n\r\n**Environment info**\r\n- OS: MacOS 11.3.1 (reproducible on several other Linux / Mac systems)\r\n- Python version: 3.6.8 (reproducible on several newer versions as well)\r\n- Sphinx version: 4.0.1 (reproducible on versions as far back as v2.2.0)\r\n- Sphinx extensions:  sphinx.ext.autodoc,sphinx.ext.napoleon\r\n- Extra tools: (optional) sphinxcontrib.apidoc\r\n\n",
  "hints_text": "This is a rather insidious warning because it points the developer to the derived class as the root cause of the problem, but there is no obvious correlation between the code of the derived class and the actual cause of the problem. This is further exacerbated when the derived class is in a different project or library from the base class, because then the developer needs to review the contents of the full inheritance stack. However, even after reviewing the code for the base class (which may or may not be the direct parent class of the one exposing the error) there is no obvious correlation between the warning and the code because the doc strings on the base class(es) are defined and correctly formatted, and Sphinx does not complain when generating the docs for the base class. \r\n\r\nAfter much ad-hoc testing I was able to deduce that simply adding a doc string to the constructor on the derived class was sufficient to circumvent the error, but when working on a large number of Python projects and sharing those projects across many developers, problems like this are hard to avoid in practice.\r\n\r\nMy team manages dozens of Python projects, and are trying to build docs for all without having any warnings produced, so we've opted to disable the combined auto content flag to avoid these superfluous warnings. However, this is just a hack/workaround to get us by for now. I hope someone can investigate the root cause of this problem and fix it so that docs for derived classes can be generated without warnings. \nI think what you want is `autodoc_inherit_docstrings = False`, right? There are no way to disable warnings during processing docstrings in superclasses.\nDisabling inherited doc strings is not the solution for this bug. The doc strings can and should be inheritable here. \r\n\r\nThe problem is that one of the pre-processing steps involved with the auto content logic is trying to combine doc strings from the class and constructor of the base class as well as the derived class, and not aligning the formatting between them.\nTo be clear, this code snippet produces warnings:\r\n\r\n```\r\nclass MyBase:\r\n    \"\"\"Base class docstring\"\"\"\r\n\r\n    def __init__(self, fubar):\r\n        \"\"\"\r\n        Args:\r\n            fubar (str):\r\n                parameter description here\r\n        \"\"\"\r\nclass MyDerived(MyBase):\r\n    def __init__(self):\r\n        pass\r\n```\r\n\r\nWhere as this code snippet does not:\r\n\r\n\r\n```\r\nclass MyBase:\r\n    \"\"\"Base class docstring\"\"\"\r\n\r\n    def __init__(self, fubar):\r\n        \"\"\"\r\n        Args:\r\n            fubar (str):\r\n                parameter description here\r\n        \"\"\"\r\nclass MyDerived(MyBase):\r\n    def __init__(self):\r\n        \"\"\"testing\"\"\"\r\n        pass\r\n```\r\n\r\nBoth of these examples are valid Python class definitions, with valid doc strings. Both the inherited docstring functionality AND the auto content combining logic should work in both situations.\nThank you for your explanation. I misunderstood the problem!\nInternally, the example is expanded to the following code (without napoleon extension):\r\n\r\n```\r\n.. py:class:: MyBase(fubar)\r\n   :module: example\r\n\r\n   Base class docstring\r\n\r\n   :param fubar: parameter description here\r\n   :type fubar: str\r\n\r\n\r\n.. py:class:: MyDerived()\r\n   :module: example\r\n\r\n   Args:\r\n   fubar (str):\r\n       parameter description here\r\n```\r\n\r\nThe second and following lines of the inherited method not having docstring is unindented. This is unexpected behavior and it's a bug.",
  "created_at": "2021-05-22T13:30:56Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"tests/test_util_inspect.py::test_getdoc_inherited_decorated_method\"]",
  "PASS_TO_PASS": "[\"tests/test_util_inspect.py::test_TypeAliasNamespace\", \"tests/test_util_inspect.py::test_signature\", \"tests/test_util_inspect.py::test_signature_partial\", \"tests/test_util_inspect.py::test_signature_methods\", \"tests/test_util_inspect.py::test_signature_partialmethod\", \"tests/test_util_inspect.py::test_signature_annotations\", \"tests/test_util_inspect.py::test_signature_annotations_py38\", \"tests/test_util_inspect.py::test_signature_from_str_basic\", \"tests/test_util_inspect.py::test_signature_from_str_default_values\", \"tests/test_util_inspect.py::test_signature_from_str_annotations\", \"tests/test_util_inspect.py::test_signature_from_str_complex_annotations\", \"tests/test_util_inspect.py::test_signature_from_str_kwonly_args\", \"tests/test_util_inspect.py::test_signature_from_str_positionaly_only_args\", \"tests/test_util_inspect.py::test_signature_from_str_invalid\", \"tests/test_util_inspect.py::test_signature_from_ast\", \"tests/test_util_inspect.py::test_safe_getattr_with_default\", \"tests/test_util_inspect.py::test_safe_getattr_with_exception\", \"tests/test_util_inspect.py::test_safe_getattr_with_property_exception\", \"tests/test_util_inspect.py::test_safe_getattr_with___dict___override\", \"tests/test_util_inspect.py::test_dictionary_sorting\", \"tests/test_util_inspect.py::test_set_sorting\", \"tests/test_util_inspect.py::test_set_sorting_fallback\", \"tests/test_util_inspect.py::test_frozenset_sorting\", \"tests/test_util_inspect.py::test_frozenset_sorting_fallback\", \"tests/test_util_inspect.py::test_dict_customtype\", \"tests/test_util_inspect.py::test_getslots\", \"tests/test_util_inspect.py::test_isclassmethod\", \"tests/test_util_inspect.py::test_isstaticmethod\", \"tests/test_util_inspect.py::test_iscoroutinefunction\", \"tests/test_util_inspect.py::test_isfunction\", \"tests/test_util_inspect.py::test_isbuiltin\", \"tests/test_util_inspect.py::test_isdescriptor\", \"tests/test_util_inspect.py::test_isattributedescriptor\", \"tests/test_util_inspect.py::test_isproperty\", \"tests/test_util_inspect.py::test_isgenericalias\", \"tests/test_util_inspect.py::test_unpartial\", \"tests/test_util_inspect.py::test_is_builtin_class_method\"]",
  "environment_setup_commit": "9a2c3c4a1559e37e95fdee88c128bb116642c897",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.065330",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}