{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-11919",
  "base_commit": "8d181f4bf6d415bb424f7577b274f53694c9bdb4",
  "patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1193,10 +1193,14 @@ def _print_SingularityFunction(self, e):\n             return base**n\n \n     def _print_gamma(self, e):\n+        from sympy.functions import gamma\n         if self._use_unicode:\n             pform = self._print(e.args[0])\n             pform = prettyForm(*pform.parens())\n-            pform = prettyForm(*pform.left(greek_unicode['Gamma']))\n+            if e.func == gamma:\n+                pform = prettyForm(*pform.left(greek_unicode['Gamma']))\n+            else:\n+                pform = prettyForm(*pform.left(greek_unicode['gamma']))\n             return pform\n         else:\n             return self._print_Function(e)\n",
  "test_patch": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -12,7 +12,7 @@\n \n from sympy.functions import (Abs, Chi, Ci, Ei, KroneckerDelta,\n     Piecewise, Shi, Si, atan2, binomial, catalan, ceiling, cos,\n-    euler, exp, expint, factorial, factorial2, floor, gamma, hyper, log,\n+    euler, exp, expint, factorial, factorial2, floor, hyper, log,\n     lowergamma, meijerg, sin, sqrt, subfactorial, tan, uppergamma,\n     elliptic_k, elliptic_f, elliptic_e, elliptic_pi, DiracDelta)\n \n@@ -4623,9 +4623,11 @@ def test_pretty_Subs():\n \n \n def test_gammas():\n+    from sympy import gamma\n     assert upretty(lowergamma(x, y)) == u\"γ(x, y)\"\n     assert upretty(uppergamma(x, y)) == u\"Γ(x, y)\"\n     assert xpretty(gamma(x), use_unicode=True) == u'Γ(x)'\n+    assert xpretty(symbols('gamma', cls=Function)(x), use_unicode=True) == u'γ(x)'\n \n \n def test_SingularityFunction():\n",
  "problem_statement": "Function('gamma') pretty prints as Γ\n```\r\nIn [13]: from sympy import *\r\n\r\nIn [14]: t = symbols('t')\r\n\r\nIn [15]: init_printing()\r\n\r\nIn [16]: gamma = symbols('gamma', cls=Function)(t)\r\n\r\nIn [17]: gamma\r\nOut[17]: Γ(t)\r\n```\r\n\r\nThis should not create the [Gamma Function](https://en.wikipedia.org/wiki/Gamma_function).\n",
  "hints_text": "I would like to work on this, @moorepants could you explain how to start.\n\nThe issue is the printing I guess. \n\nThis is also somewhat related to https://github.com/sympy/sympy/issues/6938. \n\nI updated the issue title. The function itself is distinct from `gamma`. The problem is that the printer is hardcoded to print gamma as Γ instead of γ. It should distinguish UndefinedFunctions and only apply the simple Symbol printing rules to them. \n\nFine, then I'm working on it.\n\n@asmeurer here, if we are defining gamma as a symbol it should print γ rather than Γ. This is the bug I guess, if I've got it right. \n\nI've been working on this issue but unable to locate where to make changes in the sympy code. @asmeurer \r\nplease help.\nThe change should be made in sympy/printing/pretty/pretty.py. ",
  "created_at": "2016-12-08T19:11:02Z",
  "version": "1.0",
  "FAIL_TO_PASS": "[\"test_gammas\"]",
  "PASS_TO_PASS": "[\"test_pretty_ascii_str\", \"test_pretty_unicode_str\", \"test_upretty_greek\", \"test_upretty_multiindex\", \"test_upretty_sub_super\", \"test_upretty_subs_missing_in_24\", \"test_upretty_modifiers\", \"test_pretty_Cycle\", \"test_pretty_basic\", \"test_negative_fractions\", \"test_issue_5524\", \"test_EulerGamma\", \"test_GoldenRatio\", \"test_pretty_relational\", \"test_Assignment\", \"test_AugmentedAssignment\", \"test_issue_7117\", \"test_pretty_rational\", \"test_pretty_functions\", \"test_pretty_sqrt\", \"test_pretty_sqrt_char_knob\", \"test_pretty_sqrt_longsymbol_no_sqrt_char\", \"test_pretty_KroneckerDelta\", \"test_pretty_product\", \"test_pretty_lambda\", \"test_pretty_integrals\", \"test_pretty_matrix\", \"test_Adjoint\", \"test_pretty_Trace_issue_9044\", \"test_MatrixExpressions\", \"test_pretty_dotproduct\", \"test_pretty_piecewise\", \"test_pretty_seq\", \"test_any_object_in_sequence\", \"test_pretty_sets\", \"test_pretty_ConditionSet\", \"test_pretty_ComplexRegion\", \"test_pretty_Union_issue_10414\", \"test_pretty_Intersection_issue_10414\", \"test_ProductSet_paranthesis\", \"test_ProductSet_prod_char_issue_10413\", \"test_pretty_sequences\", \"test_pretty_limits\", \"test_pretty_ComplexRootOf\", \"test_pretty_RootSum\", \"test_GroebnerBasis\", \"test_pretty_Boolean\", \"test_pretty_Domain\", \"test_pretty_prec\", \"test_pprint\", \"test_pretty_class\", \"test_pretty_no_wrap_line\", \"test_settings\", \"test_pretty_sum\", \"test_units\", \"test_SingularityFunction\", \"test_deltas\", \"test_hyper\", \"test_meijerg\", \"test_noncommutative\", \"test_pretty_special_functions\", \"test_RandomDomain\", \"test_PrettyPoly\", \"test_issue_6285\", \"test_issue_6739\", \"test_complicated_symbol_unchanged\", \"test_categories\", \"test_PrettyModules\", \"test_QuotientRing\", \"test_Homomorphism\", \"test_Tr\", \"test_pretty_Add\", \"test_issue_7179\", \"test_issue_7180\", \"test_pretty_Complement\", \"test_pretty_SymmetricDifference\", \"test_pretty_Contains\", \"test_issue_6324\", \"test_issue_7927\", \"test_issue_6134\", \"test_issue_9877\", \"test_pretty_primenu\", \"test_pretty_primeomega\", \"test_pretty_Mod\", \"test_issue_11801\"]",
  "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.074552",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}