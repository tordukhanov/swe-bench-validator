{
  "repo": "django/django",
  "instance_id": "django__django-11185",
  "base_commit": "29601bca9b584b254ded0a8f59cf776194f1bd28",
  "patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -212,7 +212,8 @@ def collect(self, objs, source=None, nullable=False, collect_related=True,\n                                  collect_related=False,\n                                  reverse_dependency=True)\n         if collect_related:\n-            parents = model._meta.parents\n+            if keep_parents:\n+                parents = set(model._meta.get_parent_list())\n             for related in get_candidate_relations_to_delete(model._meta):\n                 # Preserve parent reverse relationships if keep_parents=True.\n                 if keep_parents and related.model in parents:\n",
  "test_patch": "diff --git a/tests/delete/models.py b/tests/delete/models.py\n--- a/tests/delete/models.py\n+++ b/tests/delete/models.py\n@@ -28,6 +28,10 @@ class RChild(R):\n     pass\n \n \n+class RChildChild(RChild):\n+    pass\n+\n+\n class A(models.Model):\n     name = models.CharField(max_length=30)\n \ndiff --git a/tests/delete/tests.py b/tests/delete/tests.py\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -7,8 +7,8 @@\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n-    M2MTo, MRNull, Origin, Parent, R, RChild, Referrer, S, T, User, create_a,\n-    get_default_r,\n+    M2MTo, MRNull, Origin, Parent, R, RChild, RChildChild, Referrer, S, T,\n+    User, create_a, get_default_r,\n )\n \n \n@@ -371,6 +371,16 @@ def test_delete_with_keeping_parents_relationships(self):\n         self.assertTrue(R.objects.filter(id=parent_id).exists())\n         self.assertTrue(S.objects.filter(pk=parent_referent_id).exists())\n \n+        childchild = RChildChild.objects.create()\n+        parent_id = childchild.rchild_ptr.r_ptr_id\n+        child_id = childchild.rchild_ptr_id\n+        parent_referent_id = S.objects.create(r=childchild.rchild_ptr.r_ptr).pk\n+        childchild.delete(keep_parents=True)\n+        self.assertFalse(RChildChild.objects.filter(id=childchild.id).exists())\n+        self.assertTrue(RChild.objects.filter(id=child_id).exists())\n+        self.assertTrue(R.objects.filter(id=parent_id).exists())\n+        self.assertTrue(S.objects.filter(pk=parent_referent_id).exists())\n+\n     def test_queryset_delete_returns_num_rows(self):\n         \"\"\"\n         QuerySet.delete() should return the number of deleted rows and a\n",
  "problem_statement": "Model.delete(keep_parents=True) does not preserve all parent reverse relationships\nDescription\n\t \n\t\t(last modified by Stephen Brown)\n\t \nThere was a partial fix for this in #27407, but it doesn't cater for relationships toward parents of parents, and so on.\n",
  "hints_text": "",
  "created_at": "2019-04-08T10:40:34Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_delete_with_keeping_parents_relationships (delete.tests.DeletionTests)\"]",
  "PASS_TO_PASS": "[\"test_fast_delete_empty_no_update_can_self_select (delete.tests.FastDeleteTests)\", \"test_fast_delete_fk (delete.tests.FastDeleteTests)\", \"test_fast_delete_inheritance (delete.tests.FastDeleteTests)\", \"test_fast_delete_instance_set_pk_none (delete.tests.FastDeleteTests)\", \"test_fast_delete_joined_qs (delete.tests.FastDeleteTests)\", \"test_fast_delete_large_batch (delete.tests.FastDeleteTests)\", \"test_fast_delete_m2m (delete.tests.FastDeleteTests)\", \"test_fast_delete_qs (delete.tests.FastDeleteTests)\", \"test_fast_delete_revm2m (delete.tests.FastDeleteTests)\", \"test_auto (delete.tests.OnDeleteTests)\", \"test_auto_nullable (delete.tests.OnDeleteTests)\", \"test_cascade (delete.tests.OnDeleteTests)\", \"test_cascade_from_child (delete.tests.OnDeleteTests)\", \"test_cascade_from_parent (delete.tests.OnDeleteTests)\", \"test_cascade_nullable (delete.tests.OnDeleteTests)\", \"test_do_nothing (delete.tests.OnDeleteTests)\", \"test_do_nothing_qscount (delete.tests.OnDeleteTests)\", \"test_inheritance_cascade_down (delete.tests.OnDeleteTests)\", \"test_inheritance_cascade_up (delete.tests.OnDeleteTests)\", \"test_o2o_setnull (delete.tests.OnDeleteTests)\", \"test_protect (delete.tests.OnDeleteTests)\", \"test_setdefault (delete.tests.OnDeleteTests)\", \"test_setdefault_none (delete.tests.OnDeleteTests)\", \"test_setnull (delete.tests.OnDeleteTests)\", \"test_setnull_from_child (delete.tests.OnDeleteTests)\", \"test_setnull_from_parent (delete.tests.OnDeleteTests)\", \"test_setvalue (delete.tests.OnDeleteTests)\", \"test_bulk (delete.tests.DeletionTests)\", \"test_can_defer_constraint_checks (delete.tests.DeletionTests)\", \"test_delete_with_keeping_parents (delete.tests.DeletionTests)\", \"test_deletion_order (delete.tests.DeletionTests)\", \"test_hidden_related (delete.tests.DeletionTests)\", \"test_instance_update (delete.tests.DeletionTests)\", \"test_large_delete (delete.tests.DeletionTests)\", \"test_large_delete_related (delete.tests.DeletionTests)\", \"test_m2m (delete.tests.DeletionTests)\", \"test_model_delete_returns_num_rows (delete.tests.DeletionTests)\", \"test_only_referenced_fields_selected (delete.tests.DeletionTests)\", \"test_proxied_model_duplicate_queries (delete.tests.DeletionTests)\", \"test_queryset_delete_returns_num_rows (delete.tests.DeletionTests)\", \"test_relational_post_delete_signals_happen_before_parent_object (delete.tests.DeletionTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.563923",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}