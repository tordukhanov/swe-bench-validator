{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13447",
  "base_commit": "a62775e99f2a5ea3d51db7160fad783f6cd8a4c5",
  "patch": "diff --git a/sklearn/metrics/ranking.py b/sklearn/metrics/ranking.py\n--- a/sklearn/metrics/ranking.py\n+++ b/sklearn/metrics/ranking.py\n@@ -728,13 +728,13 @@ def label_ranking_average_precision_score(y_true, y_score, sample_weight=None):\n         if (relevant.size == 0 or relevant.size == n_labels):\n             # If all labels are relevant or unrelevant, the score is also\n             # equal to 1. The label ranking has no meaning.\n-            out += 1.\n-            continue\n+            aux = 1.\n+        else:\n+            scores_i = y_score[i]\n+            rank = rankdata(scores_i, 'max')[relevant]\n+            L = rankdata(scores_i[relevant], 'max')\n+            aux = (L / rank).mean()\n \n-        scores_i = y_score[i]\n-        rank = rankdata(scores_i, 'max')[relevant]\n-        L = rankdata(scores_i[relevant], 'max')\n-        aux = (L / rank).mean()\n         if sample_weight is not None:\n             aux = aux * sample_weight[i]\n         out += aux\n",
  "test_patch": "diff --git a/sklearn/metrics/tests/test_ranking.py b/sklearn/metrics/tests/test_ranking.py\n--- a/sklearn/metrics/tests/test_ranking.py\n+++ b/sklearn/metrics/tests/test_ranking.py\n@@ -952,6 +952,25 @@ def test_alternative_lrap_implementation(n_samples, n_classes, random_state):\n                n_classes, n_samples, random_state)\n \n \n+def test_lrap_sample_weighting_zero_labels():\n+    # Degenerate sample labeling (e.g., zero labels for a sample) is a valid\n+    # special case for lrap (the sample is considered to achieve perfect\n+    # precision), but this case is not tested in test_common.\n+    # For these test samples, the APs are 0.5, 0.75, and 1.0 (default for zero\n+    # labels).\n+    y_true = np.array([[1, 0, 0, 0], [1, 0, 0, 1], [0, 0, 0, 0]],\n+                      dtype=np.bool)\n+    y_score = np.array([[0.3, 0.4, 0.2, 0.1], [0.1, 0.2, 0.3, 0.4],\n+                        [0.4, 0.3, 0.2, 0.1]])\n+    samplewise_lraps = np.array([0.5, 0.75, 1.0])\n+    sample_weight = np.array([1.0, 1.0, 0.0])\n+\n+    assert_almost_equal(\n+        label_ranking_average_precision_score(y_true, y_score,\n+                                              sample_weight=sample_weight),\n+        np.sum(sample_weight * samplewise_lraps) / np.sum(sample_weight))\n+\n+\n def test_coverage_error():\n     # Toy case\n     assert_almost_equal(coverage_error([[0, 1]], [[0.25, 0.75]]), 1)\n",
  "problem_statement": "label_ranking_average_precision_score: sample_weighting isn't applied to items with zero true labels\n#### Description\r\nlabel_ranking_average_precision_score offers a sample_weighting argument to allow nonuniform contribution of individual samples to the reported metric.  Separately, individual samples whose labels are the same for all classes (all true or all false) are treated as a special case (precision == 1, [line 732](https://github.com/scikit-learn/scikit-learn/blob/7b136e9/sklearn/metrics/ranking.py#L732)). However, this special case bypasses the application of sample_weight ([line 740](https://github.com/scikit-learn/scikit-learn/blob/7b136e9/sklearn/metrics/ranking.py#L740)).  So, in the case where there is both non-default sample_weighting and samples with, for instance, zero labels, the reported metric is wrong.\r\n\r\n<!-- Example: Joblib Error thrown when calling fit on LatentDirichletAllocation with evaluate_every > 0-->\r\n\r\n#### Steps/Code to Reproduce\r\nSee example in [this colab](https://colab.research.google.com/drive/19P-6UgIMZSUgBcLyR7jm9oELacrYNJE7)\r\n\r\n```\r\nimport numpy as np\r\nimport sklearn.metrics\r\n\r\n# Per sample APs are 0.5, 0.75, and 1.0 (default for zero labels).\r\ntruth = np.array([[1, 0, 0, 0], [1, 0, 0, 1], [0, 0, 0, 0]], dtype=np.bool)\r\nscores = np.array([[0.3, 0.4, 0.2, 0.1], [0.1, 0.2, 0.3, 0.4], [0.4, 0.3, 0.2, 0.1]])\r\nprint(sklearn.metrics.label_ranking_average_precision_score(\r\n    truth, scores, sample_weight=[1.0, 1.0, 0.0]))\r\n```\r\n\r\n#### Expected Results\r\nAverage of AP of first and second samples = 0.625\r\n\r\n#### Actual Results\r\nSum of AP of all three samples, divided by sum of weighting vector = 2.25/2 = 1.125\r\n\r\n#### Versions\r\nSystem:\r\n    python: 3.6.7 (default, Oct 22 2018, 11:32:17)  [GCC 8.2.0]\r\nexecutable: /usr/bin/python3\r\n   machine: Linux-4.14.79+-x86_64-with-Ubuntu-18.04-bionic\r\n\r\nBLAS:\r\n    macros: SCIPY_MKL_H=None, HAVE_CBLAS=None\r\n  lib_dirs: /usr/local/lib\r\ncblas_libs: mkl_rt, pthread\r\n\r\nPython deps:\r\n       pip: 19.0.3\r\nsetuptools: 40.8.0\r\n   sklearn: 0.20.3\r\n     numpy: 1.14.6\r\n     scipy: 1.1.0\r\n    Cython: 0.29.6\r\n    pandas: 0.22.0\r\n\r\n<!-- Thanks for contributing! -->\r\n\n",
  "hints_text": "Thanks for the bug report. A pull request with a fix is welcome\nWill take this\nIn the file `sklearn/metrics/ranking.py`. I added the following lines.\r\n\r\n<img width=\"977\" alt=\"Screen Shot 2019-03-10 at 2 46 53 PM\" src=\"https://user-images.githubusercontent.com/17526499/54089811-70738700-4343-11e9-89d5-a045c5a58326.png\">\r\n\r\n*negate the score we added above (typo in comment)\r\n\r\nbut it is NOT passing the checks that involve some unittests. Given that this is a bug, shouldn't it FAIL some unittests after fixing the bug? or am I interpreting the 'x' mark below COMPLETELY wrong?\r\n\r\n<img width=\"498\" alt=\"Screen Shot 2019-03-10 at 2 50 22 PM\" src=\"https://user-images.githubusercontent.com/17526499/54089853-f2fc4680-4343-11e9-8510-37b0547738f5.png\">\r\n\r\nSince I see a 'x' mark, I haven't submitted a pull request. \r\nCan I submit a pull request for a bug despite the 'x' mark?\nThe point is that this case was not tested. So it won't fail any unit\ntests, but any fix requires new tests or extensions to existing tests\n\nI don't think this is quite the fix we want.  The edge case is not that the sample weight is zero (I just used that in the example to make the impact easy to see).  The problem is to account for any kind of non-default sample weight in the case of constant labels for all classes.\r\n\r\nI'll work on a solution and some tests.",
  "created_at": "2019-03-14T11:56:35Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/metrics/tests/test_ranking.py::test_lrap_sample_weighting_zero_labels\"]",
  "PASS_TO_PASS": "[\"sklearn/metrics/tests/test_ranking.py::test_roc_curve[True]\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve[False]\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_end_points\", \"sklearn/metrics/tests/test_ranking.py::test_roc_returns_consistency\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_multi\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_confidence\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_hard\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_one_label\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_toydata\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_drop_intermediate\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_fpr_tpr_increasing\", \"sklearn/metrics/tests/test_ranking.py::test_auc\", \"sklearn/metrics/tests/test_ranking.py::test_auc_duplicate_values\", \"sklearn/metrics/tests/test_ranking.py::test_auc_errors\", \"sklearn/metrics/tests/test_ranking.py::test_deprecated_auc_reorder\", \"sklearn/metrics/tests/test_ranking.py::test_auc_score_non_binary_class\", \"sklearn/metrics/tests/test_ranking.py::test_binary_clf_curve\", \"sklearn/metrics/tests/test_ranking.py::test_precision_recall_curve\", \"sklearn/metrics/tests/test_ranking.py::test_precision_recall_curve_errors\", \"sklearn/metrics/tests/test_ranking.py::test_precision_recall_curve_toydata\", \"sklearn/metrics/tests/test_ranking.py::test_average_precision_constant_values\", \"sklearn/metrics/tests/test_ranking.py::test_average_precision_score_pos_label_errors\", \"sklearn/metrics/tests/test_ranking.py::test_score_scale_invariance\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[label_ranking_average_precision_score-check_lrap_toy]\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[label_ranking_average_precision_score-check_lrap_without_tie_and_increasing_score]\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[label_ranking_average_precision_score-check_lrap_only_ties]\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[label_ranking_average_precision_score-check_zero_or_all_relevant_labels]\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[_my_lrap-check_lrap_toy]\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[_my_lrap-check_lrap_without_tie_and_increasing_score]\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[_my_lrap-check_lrap_only_ties]\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[_my_lrap-check_zero_or_all_relevant_labels]\", \"sklearn/metrics/tests/test_ranking.py::test_lrap_error_raised\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-2-1]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-2-2]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-2-8]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-2-20]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-5-1]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-5-2]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-5-8]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-5-20]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-10-1]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-10-2]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-10-8]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-10-20]\", \"sklearn/metrics/tests/test_ranking.py::test_coverage_error\", \"sklearn/metrics/tests/test_ranking.py::test_coverage_tie_handling\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_loss\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_appropriate_input_shape\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_loss_ties_handling\", \"sklearn/metrics/tests/test_ranking.py::test_partial_roc_auc_score\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.994269",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}