{
  "repo": "django/django",
  "instance_id": "django__django-15766",
  "base_commit": "be63c78760924e1335603c36babd0ad6cfaea3c4",
  "patch": "diff --git a/django/db/backends/base/base.py b/django/db/backends/base/base.py\n--- a/django/db/backends/base/base.py\n+++ b/django/db/backends/base/base.py\n@@ -1,6 +1,7 @@\n import _thread\n import copy\n import datetime\n+import logging\n import threading\n import time\n import warnings\n@@ -26,6 +27,8 @@\n NO_DB_ALIAS = \"__no_db__\"\n RAN_DB_VERSION_CHECK = set()\n \n+logger = logging.getLogger(\"django.db.backends.base\")\n+\n \n # RemovedInDjango50Warning\n def timezone_constructor(tzname):\n@@ -417,7 +420,9 @@ def savepoint_rollback(self, sid):\n \n         # Remove any callbacks registered while this savepoint was active.\n         self.run_on_commit = [\n-            (sids, func) for (sids, func) in self.run_on_commit if sid not in sids\n+            (sids, func, robust)\n+            for (sids, func, robust) in self.run_on_commit\n+            if sid not in sids\n         ]\n \n     @async_unsafe\n@@ -723,12 +728,12 @@ def schema_editor(self, *args, **kwargs):\n             )\n         return self.SchemaEditorClass(self, *args, **kwargs)\n \n-    def on_commit(self, func):\n+    def on_commit(self, func, robust=False):\n         if not callable(func):\n             raise TypeError(\"on_commit()'s callback must be a callable.\")\n         if self.in_atomic_block:\n             # Transaction in progress; save for execution on commit.\n-            self.run_on_commit.append((set(self.savepoint_ids), func))\n+            self.run_on_commit.append((set(self.savepoint_ids), func, robust))\n         elif not self.get_autocommit():\n             raise TransactionManagementError(\n                 \"on_commit() cannot be used in manual transaction management\"\n@@ -736,15 +741,36 @@ def on_commit(self, func):\n         else:\n             # No transaction in progress and in autocommit mode; execute\n             # immediately.\n-            func()\n+            if robust:\n+                try:\n+                    func()\n+                except Exception as e:\n+                    logger.error(\n+                        f\"Error calling {func.__qualname__} in on_commit() (%s).\",\n+                        e,\n+                        exc_info=True,\n+                    )\n+            else:\n+                func()\n \n     def run_and_clear_commit_hooks(self):\n         self.validate_no_atomic_block()\n         current_run_on_commit = self.run_on_commit\n         self.run_on_commit = []\n         while current_run_on_commit:\n-            sids, func = current_run_on_commit.pop(0)\n-            func()\n+            _, func, robust = current_run_on_commit.pop(0)\n+            if robust:\n+                try:\n+                    func()\n+                except Exception as e:\n+                    logger.error(\n+                        f\"Error calling {func.__qualname__} in on_commit() during \"\n+                        f\"transaction (%s).\",\n+                        e,\n+                        exc_info=True,\n+                    )\n+            else:\n+                func()\n \n     @contextmanager\n     def execute_wrapper(self, wrapper):\ndiff --git a/django/db/transaction.py b/django/db/transaction.py\n--- a/django/db/transaction.py\n+++ b/django/db/transaction.py\n@@ -125,12 +125,12 @@ def mark_for_rollback_on_error(using=None):\n         raise\n \n \n-def on_commit(func, using=None):\n+def on_commit(func, using=None, robust=False):\n     \"\"\"\n     Register `func` to be called when the current transaction is committed.\n     If the current transaction is rolled back, `func` will not be called.\n     \"\"\"\n-    get_connection(using).on_commit(func)\n+    get_connection(using).on_commit(func, robust)\n \n \n #################################\n",
  "test_patch": "diff --git a/django/test/testcases.py b/django/test/testcases.py\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -59,6 +59,8 @@\n from django.utils.version import PY310\n from django.views.static import serve\n \n+logger = logging.getLogger(\"django.test\")\n+\n __all__ = (\n     \"TestCase\",\n     \"TransactionTestCase\",\n@@ -1510,10 +1512,23 @@ def captureOnCommitCallbacks(cls, *, using=DEFAULT_DB_ALIAS, execute=False):\n         finally:\n             while True:\n                 callback_count = len(connections[using].run_on_commit)\n-                for _, callback in connections[using].run_on_commit[start_count:]:\n+                for _, callback, robust in connections[using].run_on_commit[\n+                    start_count:\n+                ]:\n                     callbacks.append(callback)\n                     if execute:\n-                        callback()\n+                        if robust:\n+                            try:\n+                                callback()\n+                            except Exception as e:\n+                                logger.error(\n+                                    f\"Error calling {callback.__qualname__} in \"\n+                                    f\"on_commit() (%s).\",\n+                                    e,\n+                                    exc_info=True,\n+                                )\n+                        else:\n+                            callback()\n \n                 if callback_count == len(connections[using].run_on_commit):\n                     break\ndiff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -2285,6 +2285,32 @@ def branch_2():\n \n         self.assertEqual(callbacks, [branch_1, branch_2, leaf_3, leaf_1, leaf_2])\n \n+    def test_execute_robust(self):\n+        class MyException(Exception):\n+            pass\n+\n+        def hook():\n+            self.callback_called = True\n+            raise MyException(\"robust callback\")\n+\n+        with self.assertLogs(\"django.test\", \"ERROR\") as cm:\n+            with self.captureOnCommitCallbacks(execute=True) as callbacks:\n+                transaction.on_commit(hook, robust=True)\n+\n+        self.assertEqual(len(callbacks), 1)\n+        self.assertIs(self.callback_called, True)\n+\n+        log_record = cm.records[0]\n+        self.assertEqual(\n+            log_record.getMessage(),\n+            \"Error calling CaptureOnCommitCallbacksTests.test_execute_robust.<locals>.\"\n+            \"hook in on_commit() (robust callback).\",\n+        )\n+        self.assertIsNotNone(log_record.exc_info)\n+        raised_exception = log_record.exc_info[1]\n+        self.assertIsInstance(raised_exception, MyException)\n+        self.assertEqual(str(raised_exception), \"robust callback\")\n+\n \n class DisallowedDatabaseQueriesTests(SimpleTestCase):\n     def test_disallowed_database_connections(self):\ndiff --git a/tests/transaction_hooks/tests.py b/tests/transaction_hooks/tests.py\n--- a/tests/transaction_hooks/tests.py\n+++ b/tests/transaction_hooks/tests.py\n@@ -43,6 +43,47 @@ def test_executes_immediately_if_no_transaction(self):\n         self.do(1)\n         self.assertDone([1])\n \n+    def test_robust_if_no_transaction(self):\n+        def robust_callback():\n+            raise ForcedError(\"robust callback\")\n+\n+        with self.assertLogs(\"django.db.backends.base\", \"ERROR\") as cm:\n+            transaction.on_commit(robust_callback, robust=True)\n+            self.do(1)\n+\n+        self.assertDone([1])\n+        log_record = cm.records[0]\n+        self.assertEqual(\n+            log_record.getMessage(),\n+            \"Error calling TestConnectionOnCommit.test_robust_if_no_transaction.\"\n+            \"<locals>.robust_callback in on_commit() (robust callback).\",\n+        )\n+        self.assertIsNotNone(log_record.exc_info)\n+        raised_exception = log_record.exc_info[1]\n+        self.assertIsInstance(raised_exception, ForcedError)\n+        self.assertEqual(str(raised_exception), \"robust callback\")\n+\n+    def test_robust_transaction(self):\n+        def robust_callback():\n+            raise ForcedError(\"robust callback\")\n+\n+        with self.assertLogs(\"django.db.backends\", \"ERROR\") as cm:\n+            with transaction.atomic():\n+                transaction.on_commit(robust_callback, robust=True)\n+                self.do(1)\n+\n+        self.assertDone([1])\n+        log_record = cm.records[0]\n+        self.assertEqual(\n+            log_record.getMessage(),\n+            \"Error calling TestConnectionOnCommit.test_robust_transaction.<locals>.\"\n+            \"robust_callback in on_commit() during transaction (robust callback).\",\n+        )\n+        self.assertIsNotNone(log_record.exc_info)\n+        raised_exception = log_record.exc_info[1]\n+        self.assertIsInstance(raised_exception, ForcedError)\n+        self.assertEqual(str(raised_exception), \"robust callback\")\n+\n     def test_delays_execution_until_after_transaction_commit(self):\n         with transaction.atomic():\n             self.do(1)\n",
  "problem_statement": "Supporting robust on_commit handlers.\nDescription\n\t \n\t\t(last modified by Josh Smeaton)\n\t \nI recently tracked down an issue in my application where some on_commit handlers didn't execute because one of the previous handlers raised an exception. There appears to be no way to execute on_commit handlers *robustly* as you're able to do with signals [0] using send_robust.\nI could sprinkle try/catches around the place, but I'd like to avoid doing so because not all functions that are used as handlers should always swallow exceptions, but could do so when run as on_commit handlers.\nTargeting which handlers can be robust or not would be really useful, for example:\ndef update_search(user):\n\t# if updating search fails, it's fine, we'll bulk update later anyway\n\ttransaction.on_commit(lambda: search.update(user), robust=True)\ndef trigger_background_task_one(user):\n\t# if this task fails, we want to crash\n\ttransaction.on_commit(lambda: mytask.delay(user_id=user.id))\nHere if search fails to update it doesn't prevent the background task from being scheduled.\nI'm proposing to add a robust kwarg that defaults to False, for backward compatibility, but allows a user to tag specific handlers as such.\n[0] ​https://docs.djangoproject.com/en/4.0/topics/signals/#sending-signals\n",
  "hints_text": "Sounds reasonable. Please take into account that the current behavior is ​documented.\nJosh, Would you like to prepare a patch?\nI haven't got the time to put a patch together *right now* but I could do so in the near future. Consider tagging this as \"easy pickings\" for a budding contributor?\nI've started an easy pickings thread on -developers ML and would be happy to review and guide someone to make the change: ​https://groups.google.com/g/django-developers/c/Hyqd1Rz6cFs\nGood feature suggestion. The execution in captureOnCommitCallbacks would need extending too :)\n​PR\nCan this ticket be closed? Seems like the PR was accepted.\nReplying to Shivan Sivakumaran: Can this ticket be closed? Seems like the PR was accepted. Not until the PR is merged, then it'll be closed as fixed",
  "created_at": "2022-06-07T16:12:45Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_execute (test_utils.tests.CaptureOnCommitCallbacksTests)\", \"test_execute_recursive (test_utils.tests.CaptureOnCommitCallbacksTests)\", \"test_execute_robust (test_utils.tests.CaptureOnCommitCallbacksTests)\", \"A visualisation of the callback tree tested. Each node is expected to\", \"test_no_arguments (test_utils.tests.CaptureOnCommitCallbacksTests)\", \"test_pre_callback (test_utils.tests.CaptureOnCommitCallbacksTests)\", \"test_using (test_utils.tests.CaptureOnCommitCallbacksTests)\", \"test_robust_if_no_transaction (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_robust_transaction (transaction_hooks.tests.TestConnectionOnCommit)\"]",
  "PASS_TO_PASS": "[\"test_assert_raises_message (test_utils.tests.AssertRaisesMsgTest)\", \"assertRaisesMessage shouldn't interpret RE special chars.\", \"test_failure_in_setUpTestData_should_rollback_transaction (test_utils.tests.TestBadSetUpTestData)\", \"test_all (test_utils.tests.DatabaseAliasTests)\", \"test_close_match (test_utils.tests.DatabaseAliasTests)\", \"test_match (test_utils.tests.DatabaseAliasTests)\", \"test_no_close_match (test_utils.tests.DatabaseAliasTests)\", \"test_cleanups_run_after_tearDown (test_utils.tests.TestContextDecoratorTests)\", \"An exception is setUp() is reraised after disable() is called.\", \"test_allowed_hosts (test_utils.tests.SetupTestEnvironmentTests)\", \"test_setup_test_environment_calling_more_than_once (test_utils.tests.SetupTestEnvironmentTests)\", \"test_assert_field_output (test_utils.tests.AssertFieldOutputTests)\", \"test_custom_required_message (test_utils.tests.AssertFieldOutputTests)\", \"test_allowed_database_chunked_cursor_queries (test_utils.tests.AllowedDatabaseQueriesTests)\", \"test_allowed_database_queries (test_utils.tests.AllowedDatabaseQueriesTests)\", \"test_disallowed_database_chunked_cursor_queries (test_utils.tests.DisallowedDatabaseQueriesTests)\", \"test_disallowed_database_connections (test_utils.tests.DisallowedDatabaseQueriesTests)\", \"test_disallowed_database_queries (test_utils.tests.DisallowedDatabaseQueriesTests)\", \"Testing the django.test.skipIfDBFeature decorator.\", \"Testing the django.test.skipUnlessDBFeature decorator.\", \"test_missing_default_databases (test_utils.tests.SkippingClassTestCase)\", \"test_skip_class_unless_db_feature (test_utils.tests.SkippingClassTestCase)\", \"test_equal_parsing_errors (test_utils.tests.JSONEqualTests)\", \"test_not_equal_parsing_errors (test_utils.tests.JSONEqualTests)\", \"test_simple_equal (test_utils.tests.JSONEqualTests)\", \"test_simple_equal_raise (test_utils.tests.JSONEqualTests)\", \"test_simple_equal_unordered (test_utils.tests.JSONEqualTests)\", \"test_simple_not_equal (test_utils.tests.JSONEqualTests)\", \"test_simple_not_equal_raise (test_utils.tests.JSONEqualTests)\", \"test_class_decoration (test_utils.tests.IsolatedAppsTests)\", \"test_context_manager (test_utils.tests.IsolatedAppsTests)\", \"test_installed_apps (test_utils.tests.IsolatedAppsTests)\", \"test_method_decoration (test_utils.tests.IsolatedAppsTests)\", \"test_nested (test_utils.tests.IsolatedAppsTests)\", \"test_ignores_connection_configuration_queries (test_utils.tests.AssertNumQueriesUponConnectionTests)\", \"test_different_non_field_errors (test_utils.tests.AssertFormErrorTests)\", \"test_empty_errors_invalid_form (test_utils.tests.AssertFormErrorTests)\", \"test_empty_errors_valid_form (test_utils.tests.AssertFormErrorTests)\", \"test_empty_errors_valid_form_non_field_errors (test_utils.tests.AssertFormErrorTests)\", \"test_error_list (test_utils.tests.AssertFormErrorTests)\", \"test_field_not_in_form (test_utils.tests.AssertFormErrorTests)\", \"test_field_with_different_error (test_utils.tests.AssertFormErrorTests)\", \"test_field_with_no_errors (test_utils.tests.AssertFormErrorTests)\", \"test_form_not_in_context (test_utils.tests.AssertFormErrorTests)\", \"test_non_client_response (test_utils.tests.AssertFormErrorTests)\", \"test_non_field_errors (test_utils.tests.AssertFormErrorTests)\", \"test_response_with_no_context (test_utils.tests.AssertFormErrorTests)\", \"test_single_error (test_utils.tests.AssertFormErrorTests)\", \"test_unbound_form (test_utils.tests.AssertFormErrorTests)\", \"test_different_non_field_errors (test_utils.tests.AssertFormsetErrorTests)\", \"test_different_non_form_errors (test_utils.tests.AssertFormsetErrorTests)\", \"test_empty_errors_invalid_formset (test_utils.tests.AssertFormsetErrorTests)\", \"test_empty_errors_valid_formset (test_utils.tests.AssertFormsetErrorTests)\", \"test_error_list (test_utils.tests.AssertFormsetErrorTests)\", \"test_field_not_in_form (test_utils.tests.AssertFormsetErrorTests)\", \"test_field_with_different_error (test_utils.tests.AssertFormsetErrorTests)\", \"test_field_with_no_errors (test_utils.tests.AssertFormsetErrorTests)\", \"test_form_index_too_big (test_utils.tests.AssertFormsetErrorTests)\", \"test_form_index_too_big_plural (test_utils.tests.AssertFormsetErrorTests)\", \"test_formset_not_in_context (test_utils.tests.AssertFormsetErrorTests)\", \"test_multiple_forms (test_utils.tests.AssertFormsetErrorTests)\", \"test_no_non_field_errors (test_utils.tests.AssertFormsetErrorTests)\", \"test_no_non_form_errors (test_utils.tests.AssertFormsetErrorTests)\", \"test_non_client_response (test_utils.tests.AssertFormsetErrorTests)\", \"test_non_field_errors (test_utils.tests.AssertFormsetErrorTests)\", \"test_non_form_errors (test_utils.tests.AssertFormsetErrorTests)\", \"test_non_form_errors_with_field (test_utils.tests.AssertFormsetErrorTests)\", \"test_response_with_no_context (test_utils.tests.AssertFormsetErrorTests)\", \"test_single_error (test_utils.tests.AssertFormsetErrorTests)\", \"test_unbound_formset (test_utils.tests.AssertFormsetErrorTests)\", \"test_default_level (test_utils.tests.AssertNoLogsTest)\", \"test_does_not_hide_other_failures (test_utils.tests.AssertNoLogsTest)\", \"test_fails_when_log_emitted (test_utils.tests.AssertNoLogsTest)\", \"test_int_level (test_utils.tests.AssertNoLogsTest)\", \"test_text_level (test_utils.tests.AssertNoLogsTest)\", \"test_comment_root (test_utils.tests.XMLEqualTests)\", \"test_doctype_root (test_utils.tests.XMLEqualTests)\", \"test_parsing_errors (test_utils.tests.XMLEqualTests)\", \"test_processing_instruction (test_utils.tests.XMLEqualTests)\", \"test_simple_equal (test_utils.tests.XMLEqualTests)\", \"test_simple_equal_raise (test_utils.tests.XMLEqualTests)\", \"test_simple_equal_raises_message (test_utils.tests.XMLEqualTests)\", \"test_simple_equal_unordered (test_utils.tests.XMLEqualTests)\", \"test_simple_equal_with_leading_or_trailing_whitespace (test_utils.tests.XMLEqualTests)\", \"test_simple_not_equal (test_utils.tests.XMLEqualTests)\", \"test_simple_not_equal_raise (test_utils.tests.XMLEqualTests)\", \"test_simple_not_equal_with_whitespace_in_the_middle (test_utils.tests.XMLEqualTests)\", \"test_different_using (test_utils.tests.CaptureOnCommitCallbacksTests)\", \"test_with_rolled_back_savepoint (test_utils.tests.CaptureOnCommitCallbacksTests)\", \"test_equal (test_utils.tests.AssertURLEqualTests)\", \"test_message (test_utils.tests.AssertURLEqualTests)\", \"test_msg_prefix (test_utils.tests.AssertURLEqualTests)\", \"test_not_equal (test_utils.tests.AssertURLEqualTests)\", \"test_callable (test_utils.tests.AssertWarnsMessageTests)\", \"test_context_manager (test_utils.tests.AssertWarnsMessageTests)\", \"test_context_manager_failure (test_utils.tests.AssertWarnsMessageTests)\", \"test_special_re_chars (test_utils.tests.AssertWarnsMessageTests)\", \"test_attributes (test_utils.tests.HTMLEqualTests)\", \"test_boolean_attribute (test_utils.tests.HTMLEqualTests)\", \"test_class_attribute (test_utils.tests.HTMLEqualTests)\", \"test_complex_examples (test_utils.tests.HTMLEqualTests)\", \"test_contains_html (test_utils.tests.HTMLEqualTests)\", \"test_count (test_utils.tests.HTMLEqualTests)\", \"test_escaped_html_errors (test_utils.tests.HTMLEqualTests)\", \"test_html_contain (test_utils.tests.HTMLEqualTests)\", \"test_html_parser (test_utils.tests.HTMLEqualTests)\", \"test_ignore_comments (test_utils.tests.HTMLEqualTests)\", \"test_non_boolean_attibutes (test_utils.tests.HTMLEqualTests)\", \"test_normalize_refs (test_utils.tests.HTMLEqualTests)\", \"test_parse_html_in_script (test_utils.tests.HTMLEqualTests)\", \"test_parsing_errors (test_utils.tests.HTMLEqualTests)\", \"test_root_element_escaped_html (test_utils.tests.HTMLEqualTests)\", \"test_self_closing_tags (test_utils.tests.HTMLEqualTests)\", \"test_simple_equal_html (test_utils.tests.HTMLEqualTests)\", \"test_unequal_html (test_utils.tests.HTMLEqualTests)\", \"test_unicode_handling (test_utils.tests.HTMLEqualTests)\", \"test_assert_form_error_errors_none (test_utils.tests.AssertFormErrorDeprecationTests)\", \"test_assert_form_error_errors_none_warning (test_utils.tests.AssertFormErrorDeprecationTests)\", \"test_assert_form_error_old_api (test_utils.tests.AssertFormErrorDeprecationTests)\", \"test_assert_form_error_old_api_assertion_error (test_utils.tests.AssertFormErrorDeprecationTests)\", \"test_assert_formset_error_errors_none (test_utils.tests.AssertFormErrorDeprecationTests)\", \"test_assert_formset_error_errors_none_warning (test_utils.tests.AssertFormErrorDeprecationTests)\", \"test_assert_formset_error_old_api (test_utils.tests.AssertFormErrorDeprecationTests)\", \"test_assert_formset_error_old_api_assertion_error (test_utils.tests.AssertFormErrorDeprecationTests)\", \"test_empty (test_utils.tests.AssertQuerysetEqualTests)\", \"test_flat_values_list (test_utils.tests.AssertQuerysetEqualTests)\", \"test_maxdiff (test_utils.tests.AssertQuerysetEqualTests)\", \"test_ordered (test_utils.tests.AssertQuerysetEqualTests)\", \"test_queryset (test_utils.tests.AssertQuerysetEqualTests)\", \"assertQuerysetEqual checks the number of appearance of each item\", \"test_repr_transform (test_utils.tests.AssertQuerysetEqualTests)\", \"test_transform (test_utils.tests.AssertQuerysetEqualTests)\", \"test_undefined_order (test_utils.tests.AssertQuerysetEqualTests)\", \"test_unordered (test_utils.tests.AssertQuerysetEqualTests)\", \"Overriding DATABASE_ROUTERS should update the base router.\", \"Overriding the FILE_UPLOAD_DIRECTORY_PERMISSIONS setting should be\", \"Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\", \"Overriding the MEDIA_ROOT setting should be reflected in the\", \"Overriding the MEDIA_URL setting should be reflected in the\", \"Overriding the STATIC_ROOT setting should be reflected in the\", \"Overriding the STATIC_URL setting should be reflected in the\", \"Overriding the STATICFILES_DIRS setting should be reflected in\", \"Overriding the STATICFILES_FINDERS setting should be reflected in\", \"Overriding the STATICFILES_STORAGE setting should be reflected in\", \"test_urlconf_cache (test_utils.tests.OverrideSettingsTests)\", \"test_urlconf_first (test_utils.tests.OverrideSettingsTests)\", \"test_urlconf_second (test_utils.tests.OverrideSettingsTests)\", \"test_failure (test_utils.tests.CaptureQueriesContextManagerTests)\", \"test_nested (test_utils.tests.CaptureQueriesContextManagerTests)\", \"test_simple (test_utils.tests.CaptureQueriesContextManagerTests)\", \"test_with_client (test_utils.tests.CaptureQueriesContextManagerTests)\", \"test_within (test_utils.tests.CaptureQueriesContextManagerTests)\", \"test_failure (test_utils.tests.AssertNumQueriesContextManagerTests)\", \"test_simple (test_utils.tests.AssertNumQueriesContextManagerTests)\", \"test_with_client (test_utils.tests.AssertNumQueriesContextManagerTests)\", \"test_assert_num_queries (test_utils.tests.AssertNumQueriesTests)\", \"test_assert_num_queries_with_client (test_utils.tests.AssertNumQueriesTests)\", \"test_assert_used_on_http_response (test_utils.tests.AssertTemplateUsedContextManagerTests)\", \"test_count (test_utils.tests.AssertTemplateUsedContextManagerTests)\", \"test_error_message (test_utils.tests.AssertTemplateUsedContextManagerTests)\", \"test_failure (test_utils.tests.AssertTemplateUsedContextManagerTests)\", \"test_msg_prefix (test_utils.tests.AssertTemplateUsedContextManagerTests)\", \"test_nested_usage (test_utils.tests.AssertTemplateUsedContextManagerTests)\", \"test_not_used (test_utils.tests.AssertTemplateUsedContextManagerTests)\", \"test_usage (test_utils.tests.AssertTemplateUsedContextManagerTests)\", \"test_db_query_in_hook (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_delays_execution_until_after_transaction_commit (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_discards_hooks_from_rolled_back_savepoint (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_does_not_execute_if_transaction_rolled_back (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_error_in_hook_doesnt_prevent_clearing_hooks (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_executes_immediately_if_no_transaction (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_executes_only_after_final_transaction_committed (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_hook_in_hook (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_hooks_cleared_after_rollback (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_hooks_cleared_after_successful_commit (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_inner_savepoint_does_not_affect_outer (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_inner_savepoint_rolled_back_with_outer (transaction_hooks.tests.TestConnectionOnCommit)\", \"If outer transaction fails, no hooks from within it run.\", \"test_no_savepoints_atomic_merged_with_outer (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_raises_exception_non_autocommit_mode (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_raises_exception_non_callable (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_runs_hooks_in_order_registered (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_transaction_in_hook (transaction_hooks.tests.TestConnectionOnCommit)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.740362",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}