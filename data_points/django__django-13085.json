{
  "repo": "django/django",
  "instance_id": "django__django-13085",
  "base_commit": "f386454d1302b66d0eb331ed0ae9e4811e2f3a15",
  "patch": "diff --git a/django/core/management/commands/compilemessages.py b/django/core/management/commands/compilemessages.py\n--- a/django/core/management/commands/compilemessages.py\n+++ b/django/core/management/commands/compilemessages.py\n@@ -2,6 +2,7 @@\n import concurrent.futures\n import glob\n import os\n+from pathlib import Path\n \n from django.core.management.base import BaseCommand, CommandError\n from django.core.management.utils import (\n@@ -10,7 +11,7 @@\n \n \n def has_bom(fn):\n-    with open(fn, 'rb') as f:\n+    with fn.open('rb') as f:\n         sample = f.read(4)\n     return sample.startswith((codecs.BOM_UTF8, codecs.BOM_UTF16_LE, codecs.BOM_UTF16_BE))\n \n@@ -121,9 +122,21 @@ def compile_messages(self, locations):\n         with concurrent.futures.ThreadPoolExecutor() as executor:\n             futures = []\n             for i, (dirpath, f) in enumerate(locations):\n+                po_path = Path(dirpath) / f\n+                mo_path = po_path.with_suffix('.mo')\n+                try:\n+                    if mo_path.stat().st_mtime >= po_path.stat().st_mtime:\n+                        if self.verbosity > 0:\n+                            self.stdout.write(\n+                                'File “%s” is already compiled and up to date.'\n+                                % po_path\n+                            )\n+                        continue\n+                except FileNotFoundError:\n+                    pass\n                 if self.verbosity > 0:\n                     self.stdout.write('processing file %s in %s' % (f, dirpath))\n-                po_path = os.path.join(dirpath, f)\n+\n                 if has_bom(po_path):\n                     self.stderr.write(\n                         'The %s file has a BOM (Byte Order Mark). Django only '\n@@ -131,10 +144,9 @@ def compile_messages(self, locations):\n                     )\n                     self.has_errors = True\n                     continue\n-                base_path = os.path.splitext(po_path)[0]\n \n                 # Check writability on first location\n-                if i == 0 and not is_writable(base_path + '.mo'):\n+                if i == 0 and not is_writable(mo_path):\n                     self.stderr.write(\n                         'The po files under %s are in a seemingly not writable location. '\n                         'mo files will not be updated/created.' % dirpath\n@@ -142,9 +154,7 @@ def compile_messages(self, locations):\n                     self.has_errors = True\n                     return\n \n-                args = [self.program] + self.program_options + [\n-                    '-o', base_path + '.mo', base_path + '.po'\n-                ]\n+                args = [self.program, *self.program_options, '-o', mo_path, po_path]\n                 futures.append(executor.submit(popen_wrapper, args))\n \n             for future in concurrent.futures.as_completed(futures):\n",
  "test_patch": "diff --git a/tests/i18n/test_compilation.py b/tests/i18n/test_compilation.py\n--- a/tests/i18n/test_compilation.py\n+++ b/tests/i18n/test_compilation.py\n@@ -34,6 +34,7 @@ class PoFileTests(MessageCompilationTests):\n \n     LOCALE = 'es_AR'\n     MO_FILE = 'locale/%s/LC_MESSAGES/django.mo' % LOCALE\n+    MO_FILE_EN = 'locale/en/LC_MESSAGES/django.mo'\n \n     def test_bom_rejection(self):\n         stderr = StringIO()\n@@ -43,17 +44,27 @@ def test_bom_rejection(self):\n         self.assertFalse(os.path.exists(self.MO_FILE))\n \n     def test_no_write_access(self):\n-        mo_file_en = 'locale/en/LC_MESSAGES/django.mo'\n+        mo_file_en = Path(self.MO_FILE_EN)\n         err_buffer = StringIO()\n-        # put file in read-only mode\n-        old_mode = os.stat(mo_file_en).st_mode\n-        os.chmod(mo_file_en, stat.S_IREAD)\n+        # Put file in read-only mode.\n+        old_mode = mo_file_en.stat().st_mode\n+        mo_file_en.chmod(stat.S_IREAD)\n+        # Ensure .po file is more recent than .mo file.\n+        mo_file_en.with_suffix('.po').touch()\n         try:\n             with self.assertRaisesMessage(CommandError, 'compilemessages generated one or more errors.'):\n                 call_command('compilemessages', locale=['en'], stderr=err_buffer, verbosity=0)\n             self.assertIn('not writable location', err_buffer.getvalue())\n         finally:\n-            os.chmod(mo_file_en, old_mode)\n+            mo_file_en.chmod(old_mode)\n+\n+    def test_no_compile_when_unneeded(self):\n+        mo_file_en = Path(self.MO_FILE_EN)\n+        mo_file_en.touch()\n+        stdout = StringIO()\n+        call_command('compilemessages', locale=['en'], stdout=stdout, verbosity=1)\n+        msg = '%s” is already compiled and up to date.' % mo_file_en.with_suffix('.po')\n+        self.assertIn(msg, stdout.getvalue())\n \n \n class PoFileContentsTests(MessageCompilationTests):\n",
  "problem_statement": "compilemessages needlessly runs msgfmt on unchanged .po files\nDescription\n\t\nI have a project where running django-admin compilemessages takes 1.75 seconds. Running it again, when all the .mo files already exists and are up-to-date, also takes 1.75 seconds.\nI propose that compilemessages.py is changed so that it only invokes msgfmt when it would do anything useful. This can be implemented by checking the mtime of the .po file and the corresponding .mo file. (If statting the .mo file fails, treat that as if the mtime was 0.) Only submit the command to the executor if the mtime of the .po file is greater than that of the .mo file. In effect: don't do anything if the .mo file is newer than the .po file.\nThere is one issue with this: the way the code currently uses the is_writable function. Since it modifies the mtime of the .mo file, you would have to perform the stat of the .mo file before you check if it is writable. (Or, you could just remove the is_writable function and its use. That feature is, in my opinion, of dubious value, and it doesn't appear to be documented.)\nAfter I made the changes above, the runtime in the common case where nothing needs to be done was reduced from 1.75 seconds to 0.2 seconds.\n(Unfortunately, I doubt that I will be able to get a Corporate Contributor License Agreement signed, so I can unfortunately not contribute my change.)\n1.75 seconds may not be much, but when a CI system does it repeatedly, it adds up.\n",
  "hints_text": "Proposal makes sense. About the CLA, I don't remember one time where we refused a contribution because of that (should be time to drop it?).",
  "created_at": "2020-06-19T08:28:19Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_no_compile_when_unneeded (i18n.test_compilation.PoFileTests)\"]",
  "PASS_TO_PASS": "[\"test_locale_paths_pathlib (i18n.test_compilation.PathLibLocaleCompilationTests)\", \"test_percent_symbol_in_po_file (i18n.test_compilation.PoFileContentsTests)\", \"test_app_locale_compiled (i18n.test_compilation.AppCompilationTest)\", \"test_multiple_locales (i18n.test_compilation.MultipleLocaleCompilationTests)\", \"test_one_locale (i18n.test_compilation.MultipleLocaleCompilationTests)\", \"test_error_reported_by_msgfmt (i18n.test_compilation.CompilationErrorHandling)\", \"test_msgfmt_error_including_non_ascii (i18n.test_compilation.CompilationErrorHandling)\", \"test_bom_rejection (i18n.test_compilation.PoFileTests)\", \"test_no_write_access (i18n.test_compilation.PoFileTests)\", \"test_command_help (i18n.test_compilation.ExcludedLocaleCompilationTests)\", \"test_multiple_locales_excluded (i18n.test_compilation.ExcludedLocaleCompilationTests)\", \"test_multiple_locales_excluded_with_locale (i18n.test_compilation.ExcludedLocaleCompilationTests)\", \"test_one_locale_excluded (i18n.test_compilation.ExcludedLocaleCompilationTests)\", \"test_one_locale_excluded_with_locale (i18n.test_compilation.ExcludedLocaleCompilationTests)\", \"test_ignores_based_on_pattern (i18n.test_compilation.IgnoreDirectoryCompilationTests)\", \"test_multiple_locale_dirs_ignored (i18n.test_compilation.IgnoreDirectoryCompilationTests)\", \"test_one_locale_dir_ignored (i18n.test_compilation.IgnoreDirectoryCompilationTests)\", \"test_fuzzy_compiling (i18n.test_compilation.FuzzyTranslationTest)\", \"test_nofuzzy_compiling (i18n.test_compilation.FuzzyTranslationTest)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.642756",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}