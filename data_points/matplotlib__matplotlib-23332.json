{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-23332",
  "base_commit": "6e5a5415ddc513606eac5c116fde492370a3f7f6",
  "patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -5,7 +5,7 @@\n import functools\n import logging\n import math\n-import numbers\n+from numbers import Real\n import weakref\n \n import numpy as np\n@@ -181,7 +181,7 @@ def __init__(self,\n         self._renderer = None\n         if linespacing is None:\n             linespacing = 1.2  # Maybe use rcParam later.\n-        self._linespacing = linespacing\n+        self.set_linespacing(linespacing)\n         self.set_rotation_mode(rotation_mode)\n         self.update(kwargs)\n \n@@ -1000,6 +1000,7 @@ def set_linespacing(self, spacing):\n         ----------\n         spacing : float (multiple of font size)\n         \"\"\"\n+        _api.check_isinstance(Real, spacing=spacing)\n         self._linespacing = spacing\n         self.stale = True\n \n@@ -1186,7 +1187,7 @@ def set_rotation(self, s):\n             The rotation angle in degrees in mathematically positive direction\n             (counterclockwise). 'horizontal' equals 0, 'vertical' equals 90.\n         \"\"\"\n-        if isinstance(s, numbers.Real):\n+        if isinstance(s, Real):\n             self._rotation = float(s) % 360\n         elif cbook._str_equal(s, 'horizontal') or s is None:\n             self._rotation = 0.\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_text.py b/lib/matplotlib/tests/test_text.py\n--- a/lib/matplotlib/tests/test_text.py\n+++ b/lib/matplotlib/tests/test_text.py\n@@ -519,8 +519,8 @@ def test_two_2line_texts(spacing1, spacing2):\n     fig = plt.figure()\n     renderer = fig.canvas.get_renderer()\n \n-    text1 = plt.text(0.25, 0.5, text_string, linespacing=spacing1)\n-    text2 = plt.text(0.25, 0.5, text_string, linespacing=spacing2)\n+    text1 = fig.text(0.25, 0.5, text_string, linespacing=spacing1)\n+    text2 = fig.text(0.25, 0.5, text_string, linespacing=spacing2)\n     fig.canvas.draw()\n \n     box1 = text1.get_window_extent(renderer=renderer)\n@@ -534,6 +534,11 @@ def test_two_2line_texts(spacing1, spacing2):\n         assert box1.height != box2.height\n \n \n+def test_validate_linespacing():\n+    with pytest.raises(TypeError):\n+        plt.text(.25, .5, \"foo\", linespacing=\"abc\")\n+\n+\n def test_nonfinite_pos():\n     fig, ax = plt.subplots()\n     ax.text(0, np.nan, 'nan')\n",
  "problem_statement": "Certain non-hashable parameters to text() give cryptic error messages\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nPer the title.  See https://discourse.matplotlib.org/t/cryptic-exception-when-axes-parameters-are-not-as-expected/ as well.\r\n\r\n**Code for reproduction**\r\n\r\n<!--A minimum code snippet required to reproduce the bug.\r\nPlease make sure to minimize the number of dependencies required, and provide\r\nany necessary plotted data.\r\nAvoid using threads, as Matplotlib is (explicitly) not thread-safe.-->\r\n\r\n```python\r\nfigtext(.5, .5, \"foo\", rotation=[90])\r\n# or\r\nfigtext(.5, .5, \"foo\", transform_rotates_text=[0])\r\n# or\r\nfigtext(.5, .5, \"foo\", linespacing=[0])\r\n```\r\nall fail with\r\n```\r\nTypeError: unhashable type: 'list'\r\n```\r\n\r\n**Actual outcome**\r\n\r\nsee above\r\n\r\n**Expected outcome**\r\n\r\nError out in the setter instead.\r\n\r\n**Matplotlib version**\r\n<!--Please specify your platform and versions of the relevant libraries you are using:-->\r\n  * Operating system: linux\r\n  * Matplotlib version: (`import matplotlib; print(matplotlib.__version__)`): master\r\n  * Matplotlib backend (`print(matplotlib.get_backend())`): any\r\n  * Python version: 38\r\n  * Jupyter version (if applicable):\r\n  * Other libraries: \r\n\r\n<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->\r\n<!--If you installed from conda, please specify which channel you used if not the default-->\r\n\r\n\n",
  "hints_text": "Here's a full example and error trace:\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nfig = plt.figure()\r\nplt.figtext(.5, .5, \"foo\", rotation=[90])\r\nplt.show()\r\n```\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/Users/dstansby/github/matplotlib/lib/matplotlib/backends/backend_macosx.py\", line 45, in _draw\r\n    self.figure.draw(renderer)\r\n  File \"/Users/dstansby/github/matplotlib/lib/matplotlib/artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"/Users/dstansby/github/matplotlib/lib/matplotlib/artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer, *args, **kwargs)\r\n  File \"/Users/dstansby/github/matplotlib/lib/matplotlib/figure.py\", line 2879, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/Users/dstansby/github/matplotlib/lib/matplotlib/image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/Users/dstansby/github/matplotlib/lib/matplotlib/artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer, *args, **kwargs)\r\n  File \"/Users/dstansby/github/matplotlib/lib/matplotlib/text.py\", line 671, in draw\r\n    bbox, info, descent = textobj._get_layout(renderer)\r\n  File \"/Users/dstansby/github/matplotlib/lib/matplotlib/text.py\", line 294, in _get_layout\r\n    if key in self._cached:\r\nTypeError: unhashable type: 'list'\r\n```\nI'm currently working on this (via. making a decorator to validate arg/kwarg types)\nNote that `text.set_color` already has a hashable check for exactly the same reason.  ",
  "created_at": "2022-06-23T16:30:18Z",
  "version": "3.5",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_text.py::test_validate_linespacing\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_text.py::test_font_styles[png]\", \"lib/matplotlib/tests/test_text.py::test_font_styles[pdf]\", \"lib/matplotlib/tests/test_text.py::test_multiline[png]\", \"lib/matplotlib/tests/test_text.py::test_multiline[pdf]\", \"lib/matplotlib/tests/test_text.py::test_multiline2[png]\", \"lib/matplotlib/tests/test_text.py::test_multiline2[pdf]\", \"lib/matplotlib/tests/test_text.py::test_antialiasing[png]\", \"lib/matplotlib/tests/test_text.py::test_afm_kerning\", \"lib/matplotlib/tests/test_text.py::test_contains[png]\", \"lib/matplotlib/tests/test_text.py::test_annotation_contains\", \"lib/matplotlib/tests/test_text.py::test_annotate_errors[RuntimeError-print-Unknown\", \"lib/matplotlib/tests/test_text.py::test_annotate_errors[RuntimeError-xycoords1-Unknown\", \"lib/matplotlib/tests/test_text.py::test_annotate_errors[ValueError-foo-'foo'\", \"lib/matplotlib/tests/test_text.py::test_annotate_errors[ValueError-foo\", \"lib/matplotlib/tests/test_text.py::test_annotate_errors[ValueError-offset\", \"lib/matplotlib/tests/test_text.py::test_annotate_errors[ValueError-axes\", \"lib/matplotlib/tests/test_text.py::test_titles[png]\", \"lib/matplotlib/tests/test_text.py::test_titles[pdf]\", \"lib/matplotlib/tests/test_text.py::test_alignment[png]\", \"lib/matplotlib/tests/test_text.py::test_alignment[pdf]\", \"lib/matplotlib/tests/test_text.py::test_axes_titles[png]\", \"lib/matplotlib/tests/test_text.py::test_set_position\", \"lib/matplotlib/tests/test_text.py::test_non_default_dpi[empty]\", \"lib/matplotlib/tests/test_text.py::test_non_default_dpi[non-empty]\", \"lib/matplotlib/tests/test_text.py::test_get_rotation_string\", \"lib/matplotlib/tests/test_text.py::test_get_rotation_float\", \"lib/matplotlib/tests/test_text.py::test_get_rotation_int\", \"lib/matplotlib/tests/test_text.py::test_get_rotation_raises\", \"lib/matplotlib/tests/test_text.py::test_get_rotation_none\", \"lib/matplotlib/tests/test_text.py::test_get_rotation_mod360\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[center-center]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[center-right]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[center-left]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[top-center]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[top-right]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[top-left]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[bottom-center]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[bottom-right]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[bottom-left]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[baseline-center]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[baseline-right]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[baseline-left]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[center_baseline-center]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[center_baseline-right]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[center_baseline-left]\", \"lib/matplotlib/tests/test_text.py::test_bbox_clipping[png]\", \"lib/matplotlib/tests/test_text.py::test_bbox_clipping[pdf]\", \"lib/matplotlib/tests/test_text.py::test_annotation_negative_ax_coords[png]\", \"lib/matplotlib/tests/test_text.py::test_annotation_negative_fig_coords[png]\", \"lib/matplotlib/tests/test_text.py::test_text_stale\", \"lib/matplotlib/tests/test_text.py::test_agg_text_clip[png]\", \"lib/matplotlib/tests/test_text.py::test_text_size_binding\", \"lib/matplotlib/tests/test_text.py::test_font_scaling[pdf]\", \"lib/matplotlib/tests/test_text.py::test_two_2line_texts[0.4-2]\", \"lib/matplotlib/tests/test_text.py::test_two_2line_texts[2-0.4]\", \"lib/matplotlib/tests/test_text.py::test_two_2line_texts[2-2]\", \"lib/matplotlib/tests/test_text.py::test_nonfinite_pos\", \"lib/matplotlib/tests/test_text.py::test_hinting_factor_backends\", \"lib/matplotlib/tests/test_text.py::test_single_artist_usenotex[png]\", \"lib/matplotlib/tests/test_text.py::test_single_artist_usenotex[pdf]\", \"lib/matplotlib/tests/test_text.py::test_single_artist_usenotex[svg]\", \"lib/matplotlib/tests/test_text.py::test_text_repr\", \"lib/matplotlib/tests/test_text.py::test_annotation_update\", \"lib/matplotlib/tests/test_text.py::test_annotation_units[png]\", \"lib/matplotlib/tests/test_text.py::test_large_subscript_title[png]\", \"lib/matplotlib/tests/test_text.py::test_wrap\", \"lib/matplotlib/tests/test_text.py::test_long_word_wrap\", \"lib/matplotlib/tests/test_text.py::test_wrap_no_wrap\", \"lib/matplotlib/tests/test_text.py::test_buffer_size[png]\", \"lib/matplotlib/tests/test_text.py::test_fontproperties_kwarg_precedence\", \"lib/matplotlib/tests/test_text.py::test_transform_rotates_text\", \"lib/matplotlib/tests/test_text.py::test_update_mutate_input\", \"lib/matplotlib/tests/test_text.py::test_invalid_rotation_values[invalid\", \"lib/matplotlib/tests/test_text.py::test_invalid_rotation_values[rotation1]\", \"lib/matplotlib/tests/test_text.py::test_invalid_color\", \"lib/matplotlib/tests/test_text.py::test_pdf_kerning[pdf]\", \"lib/matplotlib/tests/test_text.py::test_unsupported_script\", \"lib/matplotlib/tests/test_text.py::test_parse_math\", \"lib/matplotlib/tests/test_text.py::test_parse_math_rcparams\", \"lib/matplotlib/tests/test_text.py::test_pdf_font42_kerning[pdf]\", \"lib/matplotlib/tests/test_text.py::test_pdf_chars_beyond_bmp[pdf]\"]",
  "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.802519",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}