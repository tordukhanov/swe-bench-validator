{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-10382",
  "base_commit": "1e1417cab24e5602d2d4db85e218d5277f13aeda",
  "patch": "diff --git a/sklearn/exceptions.py b/sklearn/exceptions.py\n--- a/sklearn/exceptions.py\n+++ b/sklearn/exceptions.py\n@@ -119,9 +119,9 @@ class FitFailedWarning(RuntimeWarning):\n     ...         pass\n     ...     print(repr(w[-1].message))\n     ... # doctest: +NORMALIZE_WHITESPACE\n-    FitFailedWarning(\"Classifier fit failed. The score on this train-test\n-    partition for these parameters will be set to 0.000000. Details:\n-    \\\\nValueError('Penalty term must be positive; got (C=-2)',)\",)\n+    FitFailedWarning('Estimator fit failed. The score on this train-test\n+    partition for these parameters will be set to 0.000000.\n+    Details: \\\\nValueError: Penalty term must be positive; got (C=-2)\\\\n',)\n \n     .. versionchanged:: 0.18\n        Moved from sklearn.cross_validation.\ndiff --git a/sklearn/model_selection/_validation.py b/sklearn/model_selection/_validation.py\n--- a/sklearn/model_selection/_validation.py\n+++ b/sklearn/model_selection/_validation.py\n@@ -15,6 +15,7 @@\n import warnings\n import numbers\n import time\n+from traceback import format_exception_only\n \n import numpy as np\n import scipy.sparse as sp\n@@ -474,9 +475,11 @@ def _fit_and_score(estimator, X, y, scorer, train, test, verbose,\n                 test_scores = error_score\n                 if return_train_score:\n                     train_scores = error_score\n-            warnings.warn(\"Classifier fit failed. The score on this train-test\"\n+            warnings.warn(\"Estimator fit failed. The score on this train-test\"\n                           \" partition for these parameters will be set to %f. \"\n-                          \"Details: \\n%r\" % (error_score, e), FitFailedWarning)\n+                          \"Details: \\n%s\" %\n+                          (error_score, format_exception_only(type(e), e)[0]),\n+                          FitFailedWarning)\n         else:\n             raise ValueError(\"error_score must be the string 'raise' or a\"\n                              \" numeric value. (Hint: if using 'raise', please\"\n",
  "test_patch": "diff --git a/sklearn/model_selection/tests/test_validation.py b/sklearn/model_selection/tests/test_validation.py\n--- a/sklearn/model_selection/tests/test_validation.py\n+++ b/sklearn/model_selection/tests/test_validation.py\n@@ -9,6 +9,9 @@\n \n import numpy as np\n from scipy.sparse import coo_matrix, csr_matrix\n+from sklearn.exceptions import FitFailedWarning\n+\n+from sklearn.tests.test_grid_search import FailingClassifier\n \n from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_false\n@@ -40,6 +43,7 @@\n from sklearn.model_selection import learning_curve\n from sklearn.model_selection import validation_curve\n from sklearn.model_selection._validation import _check_is_permutation\n+from sklearn.model_selection._validation import _fit_and_score\n \n from sklearn.datasets import make_regression\n from sklearn.datasets import load_boston\n@@ -1421,3 +1425,27 @@ def test_permutation_test_score_pandas():\n         check_series = lambda x: isinstance(x, TargetType)\n         clf = CheckingClassifier(check_X=check_df, check_y=check_series)\n         permutation_test_score(clf, X_df, y_ser)\n+\n+\n+def test_fit_and_score():\n+    # Create a failing classifier to deliberately fail\n+    failing_clf = FailingClassifier(FailingClassifier.FAILING_PARAMETER)\n+    # dummy X data\n+    X = np.arange(1, 10)\n+    fit_and_score_args = [failing_clf, X, None, dict(), None, None, 0,\n+                          None, None]\n+    # passing error score to trigger the warning message\n+    fit_and_score_kwargs = {'error_score': 0}\n+    # check if the warning message type is as expected\n+    assert_warns(FitFailedWarning, _fit_and_score, *fit_and_score_args,\n+                 **fit_and_score_kwargs)\n+    # since we're using FailingClassfier, our error will be the following\n+    error_message = \"ValueError: Failing classifier failed as required\"\n+    # the warning message we're expecting to see\n+    warning_message = (\"Estimator fit failed. The score on this train-test \"\n+                       \"partition for these parameters will be set to %f. \"\n+                       \"Details: \\n%s\" % (fit_and_score_kwargs['error_score'],\n+                                          error_message))\n+    # check if the same warning is triggered\n+    assert_warns_message(FitFailedWarning, warning_message, _fit_and_score,\n+                         *fit_and_score_args, **fit_and_score_kwargs)\n",
  "problem_statement": "TfidfVectorizer dtype argument ignored\n#### Description\r\nTfidfVectorizer's fit/fit_transform output is always np.float64 instead of the specified dtype\r\n\r\n#### Steps/Code to Reproduce\r\n```py\r\nfrom sklearn.feature_extraction.text import TfidfVectorizer\r\ntest = TfidfVectorizer(dtype=np.float32)\r\nprint(test.fit_transform([\"Help I have a bug\"]).dtype)\r\n```\r\n\r\n#### Expected Results\r\n```py\r\ndtype('float32')\r\n```\r\n\r\n#### Actual Results\r\n```py\r\ndtype('float64')\r\n```\r\n\r\n#### Versions\r\n```\r\nDarwin-17.2.0-x86_64-i386-64bit\r\nPython 3.6.1 |Anaconda 4.4.0 (x86_64)| (default, May 11 2017, 13:04:09) \r\n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)]\r\nNumPy 1.13.3\r\nSciPy 1.0.0\r\nScikit-Learn 0.19.0\r\n```\r\n  \nFitFailedWarning raised by cross validation could do with better message\nCurrent message says \"Classifier fit failed\" but the estimator is not necessarily a classifier. (Perhaps that's too pedantic of me...)\r\n\r\n`%r` is not technically the best way to display an error message. We could either use `traceback.format_exc` and include the whole traceback; or we can use `traceback.format_exception_only` to print it properly (though I think this is the same as `\"%s: %s\" % (type(exc), exc)`).\r\n\r\nAnother thing we can consider, now that `_fit_and_score` provides structured results to `*SearchCV` and `cross_validate`, is to store the full traceback in some array of `*SearchCV.cv_results_`.\n",
  "hints_text": "\nI've attempted to fix it, please check. \r\n",
  "created_at": "2017-12-28T07:05:13Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/model_selection/tests/test_validation.py::test_fit_and_score\"]",
  "PASS_TO_PASS": "[\"sklearn/model_selection/tests/test_validation.py::test_cross_val_score\", \"sklearn/model_selection/tests/test_validation.py::test_cross_validate_invalid_scoring_param\", \"sklearn/model_selection/tests/test_validation.py::test_cross_validate_return_train_score_warn\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_predict_groups\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_pandas\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_mask\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_precomputed\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_fit_params\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_score_func\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_errors\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_regression\", \"sklearn/model_selection/tests/test_validation.py::test_permutation_score\", \"sklearn/model_selection/tests/test_validation.py::test_permutation_test_score_allow_nans\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_allow_nans\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_multilabel\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_decision_function_shape\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_predict_proba_shape\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_predict_log_proba_shape\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_input_types\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_pandas\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_sparse_fit_params\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_unsupervised\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_verbose\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_incremental_learning_not_possible\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_incremental_learning\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_incremental_learning_unsupervised\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_batch_and_incremental_learning_are_equal\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_n_sample_range_out_of_bounds\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_remove_duplicate_sample_sizes\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_with_boolean_indices\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_with_shuffle\", \"sklearn/model_selection/tests/test_validation.py::test_validation_curve\", \"sklearn/model_selection/tests/test_validation.py::test_validation_curve_clone_estimator\", \"sklearn/model_selection/tests/test_validation.py::test_validation_curve_cv_splits_consistency\", \"sklearn/model_selection/tests/test_validation.py::test_check_is_permutation\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_sparse_prediction\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_with_method\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_method_checking\", \"sklearn/model_selection/tests/test_validation.py::test_gridsearchcv_cross_val_predict_with_method\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_class_subset\", \"sklearn/model_selection/tests/test_validation.py::test_score_memmap\", \"sklearn/model_selection/tests/test_validation.py::test_permutation_test_score_pandas\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.950068",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}