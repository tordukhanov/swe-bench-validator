{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-18191",
  "base_commit": "1923822ddf8265199dbd9ef9ce09641d3fd042b9",
  "patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -370,8 +370,8 @@ def _n2(e):\n                     if _half(other):\n                         if b.is_negative is True:\n                             return S.NegativeOne**other*Pow(-b, e*other)\n-                        if b.is_extended_real is False:\n-                            return Pow(b.conjugate()/Abs(b)**2, other)\n+                        elif b.is_negative is False:\n+                            return Pow(b, -other)\n                 elif e.is_even:\n                     if b.is_extended_real:\n                         b = abs(b)\n",
  "test_patch": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -433,7 +433,7 @@ def test_better_sqrt():\n     assert sqrt(1/(3 - I)) == sqrt(10)*sqrt(3 + I)/10\n     # symbolic\n     i = symbols('i', imaginary=True)\n-    assert sqrt(3/i) == Mul(sqrt(3), sqrt(-i)/abs(i), evaluate=False)\n+    assert sqrt(3/i) == Mul(sqrt(3), 1/sqrt(i), evaluate=False)\n     # multiples of 1/2; don't make this too automatic\n     assert sqrt((3 + 4*I))**3 == (2 + I)**3\n     assert Pow(3 + 4*I, Rational(3, 2)) == 2 + 11*I\n@@ -504,3 +504,7 @@ def test_issue_17450():\n     assert (Pow(exp(1+sqrt(2)), ((1-sqrt(2))*I*pi), evaluate=False)).is_real is None\n     assert ((-10)**(10*I*pi/3)).is_real is False\n     assert ((-5)**(4*I*pi)).is_real is False\n+\n+\n+def test_issue_18190():\n+    assert sqrt(1 / tan(1 + I)) == 1 / sqrt(tan(1 + I))\n",
  "problem_statement": "Recursion error: sqrt(1 / tan(1 + I))\n```\r\n>>> from sympy import *\r\n>>> sqrt(1 / tan(1 + I))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/eward/se/sympy/functions/elementary/miscellaneous.py\", line 128, in sqrt\r\n    return Pow(arg, S.Half, evaluate=evaluate)\r\n  File \"/home/eward/se/sympy/core/cache.py\", line 94, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\n  File \"/home/eward/se/sympy/core/power.py\", line 301, in __new__\r\n    obj = b._eval_power(e)\r\n...\r\n  File \"/home/eward/se/sympy/core/power.py\", line 375, in _eval_power\r\n    return Pow(b.conjugate()/Abs(b)**2, other)\r\n  File \"/home/eward/se/sympy/core/cache.py\", line 94, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\n  File \"/home/eward/se/sympy/core/power.py\", line 301, in __new__\r\n    obj = b._eval_power(e)\r\n  File \"/home/eward/se/sympy/core/power.py\", line 375, in _eval_power\r\n    return Pow(b.conjugate()/Abs(b)**2, other)\r\n  File \"/home/eward/se/sympy/core/expr.py\", line 212, in __pow__\r\n    return self._pow(other)\r\n  File \"/home/eward/se/sympy/core/decorators.py\", line 253, in _func\r\n    return func(self, other)\r\n  File \"/home/eward/se/sympy/core/decorators.py\", line 129, in binary_op_wrapper\r\n    return func(self, other)\r\n  File \"/home/eward/se/sympy/core/expr.py\", line 208, in _pow\r\n    return Pow(self, other)\r\n  File \"/home/eward/se/sympy/core/cache.py\", line 94, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n```\r\n\r\nThere should be an additional check on this line:\r\n\r\nhttps://github.com/sympy/sympy/blob/1923822ddf8265199dbd9ef9ce09641d3fd042b9/sympy/core/power.py#L373-L374\n",
  "hints_text": "",
  "created_at": "2019-12-31T18:41:08Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_better_sqrt\"]",
  "PASS_TO_PASS": "[\"test_rational\", \"test_large_rational\", \"test_negative_real\", \"test_expand\", \"test_issue_3449\", \"test_issue_3866\", \"test_negative_one\", \"test_issue_4362\", \"test_Pow_signs\", \"test_power_with_noncommutative_mul_as_base\", \"test_power_rewrite_exp\", \"test_zero\", \"test_pow_as_base_exp\", \"test_issue_6100_12942_4473\", \"test_issue_6208\", \"test_issue_6990\", \"test_issue_6068\", \"test_issue_6782\", \"test_issue_6653\", \"test_issue_6429\", \"test_issue_7638\", \"test_issue_8582\", \"test_issue_8650\", \"test_issue_13914\", \"test_issue_2993\", \"test_issue_17450\"]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.121491",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}