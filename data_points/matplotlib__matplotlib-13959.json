{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-13959",
  "base_commit": "bbd10ba989748c1ff94fb3f3a24b366dfe6b5ad3",
  "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -4133,7 +4133,7 @@ def dopatch(xs, ys, **kwargs):\n                     medians=medians, fliers=fliers, means=means)\n \n     @staticmethod\n-    def _parse_scatter_color_args(c, edgecolors, kwargs, xshape, yshape,\n+    def _parse_scatter_color_args(c, edgecolors, kwargs, xsize,\n                                   get_next_color_func):\n         \"\"\"\n         Helper function to process color related arguments of `.Axes.scatter`.\n@@ -4163,8 +4163,8 @@ def _parse_scatter_color_args(c, edgecolors, kwargs, xshape, yshape,\n             Additional kwargs. If these keys exist, we pop and process them:\n             'facecolors', 'facecolor', 'edgecolor', 'color'\n             Note: The dict is modified by this function.\n-        xshape, yshape : tuple of int\n-            The shape of the x and y arrays passed to `.Axes.scatter`.\n+        xsize : int\n+            The size of the x and y arrays passed to `.Axes.scatter`.\n         get_next_color_func : callable\n             A callable that returns a color. This color is used as facecolor\n             if no other color is provided.\n@@ -4187,9 +4187,6 @@ def _parse_scatter_color_args(c, edgecolors, kwargs, xshape, yshape,\n             The edgecolor specification.\n \n         \"\"\"\n-        xsize = functools.reduce(operator.mul, xshape, 1)\n-        ysize = functools.reduce(operator.mul, yshape, 1)\n-\n         facecolors = kwargs.pop('facecolors', None)\n         facecolors = kwargs.pop('facecolor', facecolors)\n         edgecolors = kwargs.pop('edgecolor', edgecolors)\n@@ -4229,7 +4226,7 @@ def _parse_scatter_color_args(c, edgecolors, kwargs, xshape, yshape,\n         # favor of mapping, not rgb or rgba.\n         # Convenience vars to track shape mismatch *and* conversion failures.\n         valid_shape = True  # will be put to the test!\n-        n_elem = -1  # used only for (some) exceptions\n+        csize = -1  # Number of colors; used for some exceptions.\n \n         if (c_was_none or\n                 kwcolor is not None or\n@@ -4241,9 +4238,9 @@ def _parse_scatter_color_args(c, edgecolors, kwargs, xshape, yshape,\n         else:\n             try:  # First, does 'c' look suitable for value-mapping?\n                 c_array = np.asanyarray(c, dtype=float)\n-                n_elem = c_array.shape[0]\n-                if c_array.shape in [xshape, yshape]:\n-                    c = np.ma.ravel(c_array)\n+                csize = c_array.size\n+                if csize == xsize:\n+                    c = c_array.ravel()\n                 else:\n                     if c_array.shape in ((3,), (4,)):\n                         _log.warning(\n@@ -4262,8 +4259,8 @@ def _parse_scatter_color_args(c, edgecolors, kwargs, xshape, yshape,\n         if c_array is None:\n             try:  # Then is 'c' acceptable as PathCollection facecolors?\n                 colors = mcolors.to_rgba_array(c)\n-                n_elem = colors.shape[0]\n-                if colors.shape[0] not in (0, 1, xsize, ysize):\n+                csize = colors.shape[0]\n+                if csize not in (0, 1, xsize):\n                     # NB: remember that a single color is also acceptable.\n                     # Besides *colors* will be an empty array if c == 'none'.\n                     valid_shape = False\n@@ -4271,19 +4268,14 @@ def _parse_scatter_color_args(c, edgecolors, kwargs, xshape, yshape,\n             except ValueError:\n                 if not valid_shape:  # but at least one conversion succeeded.\n                     raise ValueError(\n-                        \"'c' argument has {nc} elements, which is not \"\n-                        \"acceptable for use with 'x' with size {xs}, \"\n-                        \"'y' with size {ys}.\"\n-                            .format(nc=n_elem, xs=xsize, ys=ysize)\n-                    )\n+                        f\"'c' argument has {csize} elements, which is \"\n+                        \"inconsistent with 'x' and 'y' with size {xsize}.\")\n                 else:\n                     # Both the mapping *and* the RGBA conversion failed: pretty\n                     # severe failure => one may appreciate a verbose feedback.\n                     raise ValueError(\n-                        \"'c' argument must be a mpl color, a sequence of mpl \"\n-                        \"colors or a sequence of numbers, not {}.\"\n-                            .format(c)  # note: could be long depending on c\n-                    )\n+                        f\"'c' argument must be a mpl color, a sequence of mpl \"\n+                        \"colors, or a sequence of numbers, not {c}.\")\n         else:\n             colors = None  # use cmap, norm after collection is created\n         return c, colors, edgecolors\n@@ -4301,7 +4293,7 @@ def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n \n         Parameters\n         ----------\n-        x, y : array_like, shape (n, )\n+        x, y : scalar or array_like, shape (n, )\n             The data positions.\n \n         s : scalar or array_like, shape (n, ), optional\n@@ -4313,8 +4305,8 @@ def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n \n             - A single color format string.\n             - A sequence of color specifications of length n.\n-            - A sequence of n numbers to be mapped to colors using *cmap* and\n-              *norm*.\n+            - A scalar or sequence of n numbers to be mapped to colors using\n+              *cmap* and *norm*.\n             - A 2-D array in which the rows are RGB or RGBA.\n \n             Note that *c* should not be a single numeric RGB or RGBA sequence\n@@ -4403,7 +4395,7 @@ def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n           plotted.\n \n         * Fundamentally, scatter works with 1-D arrays; *x*, *y*, *s*, and *c*\n-          may be input as 2-D arrays, but within scatter they will be\n+          may be input as N-D arrays, but within scatter they will be\n           flattened. The exception is *c*, which will be flattened only if its\n           size matches the size of *x* and *y*.\n \n@@ -4416,7 +4408,6 @@ def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n \n         # np.ma.ravel yields an ndarray, not a masked array,\n         # unless its argument is a masked array.\n-        xshape, yshape = np.shape(x), np.shape(y)\n         x = np.ma.ravel(x)\n         y = np.ma.ravel(y)\n         if x.size != y.size:\n@@ -4425,11 +4416,13 @@ def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n         if s is None:\n             s = (20 if rcParams['_internal.classic_mode'] else\n                  rcParams['lines.markersize'] ** 2.0)\n-        s = np.ma.ravel(s)  # This doesn't have to match x, y in size.\n+        s = np.ma.ravel(s)\n+        if len(s) not in (1, x.size):\n+            raise ValueError(\"s must be a scalar, or the same size as x and y\")\n \n         c, colors, edgecolors = \\\n             self._parse_scatter_color_args(\n-                c, edgecolors, kwargs, xshape, yshape,\n+                c, edgecolors, kwargs, x.size,\n                 get_next_color_func=self._get_patches_for_fill.get_next_color)\n \n         if plotnonfinite and colors is None:\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -1862,6 +1862,13 @@ def test_scatter_color(self):\n         with pytest.raises(ValueError):\n             plt.scatter([1, 2, 3], [1, 2, 3], color=[1, 2, 3])\n \n+    def test_scatter_size_arg_size(self):\n+        x = np.arange(4)\n+        with pytest.raises(ValueError):\n+            plt.scatter(x, x, x[1:])\n+        with pytest.raises(ValueError):\n+            plt.scatter(x[1:], x[1:], x)\n+\n     @check_figures_equal(extensions=[\"png\"])\n     def test_scatter_invalid_color(self, fig_test, fig_ref):\n         ax = fig_test.subplots()\n@@ -1890,6 +1897,21 @@ def test_scatter_no_invalid_color(self, fig_test, fig_ref):\n         ax = fig_ref.subplots()\n         ax.scatter([0, 2], [0, 2], c=[1, 2], s=[1, 3], cmap=cmap)\n \n+    @check_figures_equal(extensions=[\"png\"])\n+    def test_scatter_single_point(self, fig_test, fig_ref):\n+        ax = fig_test.subplots()\n+        ax.scatter(1, 1, c=1)\n+        ax = fig_ref.subplots()\n+        ax.scatter([1], [1], c=[1])\n+\n+    @check_figures_equal(extensions=[\"png\"])\n+    def test_scatter_different_shapes(self, fig_test, fig_ref):\n+        x = np.arange(10)\n+        ax = fig_test.subplots()\n+        ax.scatter(x, x.reshape(2, 5), c=x.reshape(5, 2))\n+        ax = fig_ref.subplots()\n+        ax.scatter(x.reshape(5, 2), x, c=x.reshape(2, 5))\n+\n     # Parameters for *test_scatter_c*. NB: assuming that the\n     # scatter plot will have 4 elements. The tuple scheme is:\n     # (*c* parameter case, exception regexp key or None if no exception)\n@@ -1946,7 +1968,7 @@ def get_next_color():\n \n         from matplotlib.axes import Axes\n \n-        xshape = yshape = (4,)\n+        xsize = 4\n \n         # Additional checking of *c* (introduced in #11383).\n         REGEXP = {\n@@ -1956,21 +1978,18 @@ def get_next_color():\n \n         if re_key is None:\n             Axes._parse_scatter_color_args(\n-                c=c_case, edgecolors=\"black\", kwargs={},\n-                xshape=xshape, yshape=yshape,\n+                c=c_case, edgecolors=\"black\", kwargs={}, xsize=xsize,\n                 get_next_color_func=get_next_color)\n         else:\n             with pytest.raises(ValueError, match=REGEXP[re_key]):\n                 Axes._parse_scatter_color_args(\n-                    c=c_case, edgecolors=\"black\", kwargs={},\n-                    xshape=xshape, yshape=yshape,\n+                    c=c_case, edgecolors=\"black\", kwargs={}, xsize=xsize,\n                     get_next_color_func=get_next_color)\n \n \n-def _params(c=None, xshape=(2,), yshape=(2,), **kwargs):\n+def _params(c=None, xsize=2, **kwargs):\n     edgecolors = kwargs.pop('edgecolors', None)\n-    return (c, edgecolors, kwargs if kwargs is not None else {},\n-            xshape, yshape)\n+    return (c, edgecolors, kwargs if kwargs is not None else {}, xsize)\n _result = namedtuple('_result', 'c, colors')\n \n \n@@ -2022,8 +2041,7 @@ def get_next_color():\n     c = kwargs.pop('c', None)\n     edgecolors = kwargs.pop('edgecolors', None)\n     _, _, result_edgecolors = \\\n-        Axes._parse_scatter_color_args(c, edgecolors, kwargs,\n-                                       xshape=(2,), yshape=(2,),\n+        Axes._parse_scatter_color_args(c, edgecolors, kwargs, xsize=2,\n                                        get_next_color_func=get_next_color)\n     assert result_edgecolors == expected_edgecolors\n \n",
  "problem_statement": "Inconsistent shape handling of parameter c compared to x/y in scatter()\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\nAs described in https://github.com/matplotlib/matplotlib/pull/11663#pullrequestreview-171359644:\r\n\r\nSomething funny is going on here (I know it was already there before, but still seems worth pointing out): we take x and y of any shapes and flatten them (they just need to have the same size), but `c` has to match either the shape of `x` or `y`, not just the size.\r\n\r\nIn other words the following \"work\" (i.e. perform an implicit ravel()):\r\n```\r\nscatter(np.arange(12).reshape((3, 4)), np.arange(12).reshape((4, 3)), c=np.arange(12).reshape((3, 4)))\r\nscatter(np.arange(12).reshape((3, 4)), np.arange(12).reshape((4, 3)), c=np.arange(12).reshape((4, 3)))\r\n```\r\nbut the following fail:\r\n```\r\nscatter(np.arange(12).reshape((3, 4)), np.arange(12).reshape((4, 3)), c=np.arange(12).reshape((6, 2)))\r\n# and even\r\nscatter(np.arange(12).reshape((3, 4)), np.arange(12).reshape((4, 3)), c=np.arange(12))\r\n```\r\nOf course that last one has the best error message (irony intended):\r\n\r\n> ValueError: 'c' argument has 12 elements, which is not acceptable for use with 'x' with size 12, 'y' with size 12.\r\n\r\n\r\n\r\n\n",
  "hints_text": "(I think we should just reject (with deprecation, yada yada) any non-1D input (and yes, that includes (n, 1) and (1, n) input).)\nThe `ravel` that we do is a considerable convenience for common use cases such as working with gridded data for ocean or atmospheric fields.\nI dunno - it all seems pretty inconsistent to me, like whoever wrote `scatter` never looked at what `plot` does, or visce versa, whereas I think they are the same thing.  \r\n\r\n```python\r\nplt.plot(np.arange(12).reshape(3, 4), np.arange(12).reshape(3, 4))\r\nplt.scatter(np.arange(12).reshape(3, 4), np.arange(12).reshape(3, 4))\r\n```\r\nare pretty shockingly different.  I'm fine w/ them being different, but I'm somewhat against `scatter` just flattening the array without comment.  I think I'd go with @anntzer's proposal so the difference is explicit.  Its not like `scatter(X.flat, Y.flat)` is so hard...\r\n",
  "created_at": "2019-04-14T23:44:41Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgby-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgb-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgbrgb-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case4-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case30-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case31-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case32-conversion]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_get_labels\", \"lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_twinx_cla\", \"lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting\", \"lib/matplotlib/tests/test_axes.py::test_inverted_cla\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tight\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared\", \"lib/matplotlib/tests/test_axes.py::test_use_sticky_edges\", \"lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_empty\", \"lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow\", \"lib/matplotlib/tests/test_axes.py::test_structured_data\", \"lib/matplotlib/tests/test_axes.py::test_polar_rlim[png]\", \"lib/matplotlib/tests/test_axes.py::test_polar_rlim_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_pickable\", \"lib/matplotlib/tests/test_axes.py::test_inverted_limits\", \"lib/matplotlib/tests/test_axes.py::test_imshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs\", \"lib/matplotlib/tests/test_axes.py::test_arc_angles[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_bar_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_steplog[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_log_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_density_normed\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::test_pyplot_axes\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians_1\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians_2\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci_1\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_zorder\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci_2\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_manage_xticks\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_not_single\", \"lib/matplotlib/tests/test_axes.py::test_tick_space_size_0\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_shape\", \"lib/matplotlib/tests/test_axes.py::test_errobar_nonefmt\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/o\", \"lib/matplotlib/tests/test_axes.py::test_stem_params[png]\", \"lib/matplotlib/tests/test_axes.py::test_stem_args\", \"lib/matplotlib/tests/test_axes.py::test_stem_dates\", \"lib/matplotlib/tests/test_axes.py::test_hist_normed_density[False-False]\", \"lib/matplotlib/tests/test_axes.py::test_hist_normed_density[False-True]\", \"lib/matplotlib/tests/test_axes.py::test_hist_normed_density[True-False]\", \"lib/matplotlib/tests/test_axes.py::test_hist_normed_density[True-True]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_emptydata\", \"lib/matplotlib/tests/test_axes.py::test_hist_labels\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure\", \"lib/matplotlib/tests/test_axes.py::test_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors3]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]\", \"lib/matplotlib/tests/test_axes.py::test_empty_eventplot\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data0-_empty]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data1-vertical]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data2-horizontal]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data3-None]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data4-none]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data5-_empty]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data6-vertical]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data7-horizontal]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data8-None]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data9-none]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data10-_empty]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data11-vertical]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data12-horizontal]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data13-None]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data14-none]\", \"lib/matplotlib/tests/test_axes.py::test_marker_styles[png]\", \"lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]\", \"lib/matplotlib/tests/test_axes.py::test_subplot_key_hash\", \"lib/matplotlib/tests/test_axes.py::test_specgram_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_magnitude_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_magnitude_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_angle_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_noise_angle[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_freqs_phase[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_noise_phase[png]\", \"lib/matplotlib/tests/test_axes.py::test_psd_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_psd_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_csd_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_csd_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_magnitude_spectrum_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_magnitude_spectrum_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_angle_spectrum_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_angle_spectrum_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_phase_spectrum_freqs[png]\", \"lib/matplotlib/tests/test_axes.py::test_phase_spectrum_noise[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor\", \"lib/matplotlib/tests/test_axes.py::test_vline_limit\", \"lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]\", \"lib/matplotlib/tests/test_axes.py::test_relim_visible_only\", \"lib/matplotlib/tests/test_axes.py::test_text_labelsize\", \"lib/matplotlib/tests/test_axes.py::test_pie_textprops\", \"lib/matplotlib/tests/test_axes.py::test_tick_label_update\", \"lib/matplotlib/tests/test_axes.py::test_margins\", \"lib/matplotlib/tests/test_axes.py::test_length_one_hist\", \"lib/matplotlib/tests/test_axes.py::test_pathological_hexbin\", \"lib/matplotlib/tests/test_axes.py::test_color_None\", \"lib/matplotlib/tests/test_axes.py::test_color_alias\", \"lib/matplotlib/tests/test_axes.py::test_numerical_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_unicode_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_move_offsetlabel\", \"lib/matplotlib/tests/test_axes.py::test_rc_tick\", \"lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick\", \"lib/matplotlib/tests/test_axes.py::test_square_plot\", \"lib/matplotlib/tests/test_axes.py::test_no_None\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_fast_RGB\", \"lib/matplotlib/tests/test_axes.py::test_shared_scale\", \"lib/matplotlib/tests/test_axes.py::test_violin_point_mass\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs52]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs53]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs54]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs55]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs56]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs57]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs58]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs59]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs60]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs61]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs62]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs63]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs64]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs65]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs66]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs67]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs68]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs69]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs70]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs71]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs72]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs73]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs74]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs75]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs76]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs77]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs78]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs79]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs80]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs81]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs82]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs83]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_title_pad\", \"lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip\", \"lib/matplotlib/tests/test_axes.py::test_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]\", \"lib/matplotlib/tests/test_axes.py::test_axes_margins\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_empty\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside\", \"lib/matplotlib/tests/test_axes.py::test_none_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_ls_ds_conflict\", \"lib/matplotlib/tests/test_axes.py::test_bar_uint8\", \"lib/matplotlib/tests/test_axes.py::test_axisbelow[png]\", \"lib/matplotlib/tests/test_axes.py::test_titlesetpos\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both\", \"lib/matplotlib/tests/test_axes.py::test_offset_label_color\", \"lib/matplotlib/tests/test_axes.py::test_large_offset\", \"lib/matplotlib/tests/test_axes.py::test_barb_units\", \"lib/matplotlib/tests/test_axes.py::test_quiver_units\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_cycle\", \"lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation\", \"lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle\", \"lib/matplotlib/tests/test_axes.py::test_log_margins\", \"lib/matplotlib/tests/test_axes.py::test_color_length_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_legend\", \"lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args\", \"lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits\", \"lib/matplotlib/tests/test_axes.py::test_zero_linewidth\", \"lib/matplotlib/tests/test_axes.py::test_polar_gridlines\", \"lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_columns_cycle_deprecation\", \"lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox\", \"lib/matplotlib/tests/test_axes.py::test_zoom_inset\", \"lib/matplotlib/tests/test_axes.py::test_set_position\", \"lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom\", \"lib/matplotlib/tests/test_axes.py::test_cartopy_backcompat\", \"lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignoreNaN\", \"lib/matplotlib/tests/test_axes.py::test_scatter_empty_data\", \"lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]\", \"lib/matplotlib/tests/test_axes.py::test_deprecated_uppercase_colors\", \"lib/matplotlib/tests/test_axes.py::test_secondary_fail\", \"lib/matplotlib/tests/test_axes.py::test_secondary_resize\", \"lib/matplotlib/tests/test_axes.py::test_nodecorator\", \"lib/matplotlib/tests/test_axes.py::test_displaced_spine\", \"lib/matplotlib/tests/test_axes.py::test_tickdirs\", \"lib/matplotlib/tests/test_axes.py::test_minor_accountedfor\", \"lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]\", \"lib/matplotlib/tests/test_axes.py::test_datetime_masked\", \"lib/matplotlib/tests/test_axes.py::test_hist_auto_bins\", \"lib/matplotlib/tests/test_axes.py::test_hist_nan_data\"]",
  "environment_setup_commit": "d0628598f8d9ec7b0da6b60e7b29be2067b6ea17",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.785317",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}