{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-13477",
  "base_commit": "c40b75720a64186b57ad1de94ad7f21fa7728880",
  "patch": "diff --git a/astropy/coordinates/baseframe.py b/astropy/coordinates/baseframe.py\n--- a/astropy/coordinates/baseframe.py\n+++ b/astropy/coordinates/baseframe.py\n@@ -1650,6 +1650,9 @@ def __eq__(self, value):\n         This implements strict equality and requires that the frames are\n         equivalent and that the representation data are exactly equal.\n         \"\"\"\n+        if not isinstance(value, BaseCoordinateFrame):\n+            return NotImplemented\n+\n         is_equiv = self.is_equivalent_frame(value)\n \n         if self._data is None and value._data is None:\n@@ -1661,8 +1664,7 @@ def __eq__(self, value):\n                             f'{self.replicate_without_data()} vs. '\n                             f'{value.replicate_without_data()}')\n \n-        if ((value._data is None and self._data is not None)\n-                or (self._data is None and value._data is not None)):\n+        if (value._data is None) != (self._data is None):\n             raise ValueError('cannot compare: one frame has data and the other '\n                              'does not')\n \ndiff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -377,8 +377,16 @@ def __eq__(self, value):\n         equivalent, extra frame attributes are equivalent, and that the\n         representation data are exactly equal.\n         \"\"\"\n+\n+        if isinstance(value, BaseCoordinateFrame):\n+            if value._data is None:\n+                raise ValueError(\"Can only compare SkyCoord to Frame with data\")\n+\n+            return self.frame == value\n+\n         if not isinstance(value, SkyCoord):\n             return NotImplemented\n+\n         # Make sure that any extra frame attribute names are equivalent.\n         for attr in self._extra_frameattr_names | value._extra_frameattr_names:\n             if not self.frame._frameattr_equiv(getattr(self, attr),\n",
  "test_patch": "diff --git a/astropy/coordinates/tests/test_frames.py b/astropy/coordinates/tests/test_frames.py\n--- a/astropy/coordinates/tests/test_frames.py\n+++ b/astropy/coordinates/tests/test_frames.py\n@@ -1507,3 +1507,28 @@ class Test:\n     # This subclassing is the test!\n     class NewFrame(ICRS, Test):\n         pass\n+\n+\n+def test_frame_coord_comparison():\n+    \"\"\"Test that frame can be compared to a SkyCoord\"\"\"\n+    frame = ICRS(0 * u.deg, 0 * u.deg)\n+    coord = SkyCoord(frame)\n+    other = SkyCoord(ICRS(0 * u.deg, 1 * u.deg))\n+\n+    assert frame == coord\n+    assert frame != other\n+    assert not (frame == other)\n+    error_msg = \"objects must have equivalent frames\"\n+    with pytest.raises(TypeError, match=error_msg):\n+        frame == SkyCoord(AltAz(\"0d\", \"1d\"))\n+\n+    coord = SkyCoord(ra=12 * u.hourangle, dec=5 * u.deg, frame=FK5(equinox=\"J1950\"))\n+    frame = FK5(ra=12 * u.hourangle, dec=5 * u.deg, equinox=\"J2000\")\n+    with pytest.raises(TypeError, match=error_msg):\n+        coord == frame\n+\n+    frame = ICRS()\n+    coord = SkyCoord(0 * u.deg, 0 * u.deg, frame=frame)\n+    error_msg = \"Can only compare SkyCoord to Frame with data\"\n+    with pytest.raises(ValueError, match=error_msg):\n+        frame == coord\n",
  "problem_statement": "Comparing Frame with data and SkyCoord with same data raises exception\n<!-- This comments are hidden when you submit the issue,\r\nso you do not need to remove them! -->\r\n\r\n<!-- Please be sure to check out our contributing guidelines,\r\nhttps://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .\r\nPlease be sure to check out our code of conduct,\r\nhttps://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->\r\n\r\n<!-- Please have a search on our GitHub repository to see if a similar\r\nissue has already been posted.\r\nIf a similar issue is closed, have a quick look to see if you are satisfied\r\nby the resolution.\r\nIf not please go ahead and open an issue! -->\r\n\r\n<!-- Please check that the development version still produces the same bug.\r\nYou can install development version with\r\npip install git+https://github.com/astropy/astropy\r\ncommand. -->\r\n\r\n### Description\r\n\r\n`SkyCoord` instances and `Frame` instances with data are somewhat used interchangebly and I am still not sure after all this time spending with astropy what is preferable when...\r\n\r\nSo it's  a bit surprising to me, that comparing a frame with data to a `SkyCoord` instance with exactly the same data raises an exception:\r\n\r\n```\r\n\r\n### Expected behavior\r\n<!-- What did you expect to happen. -->\r\nCompare to true / false depending on data.\r\n\r\n### Actual behavior\r\nException\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n\r\n```python\r\nIn [1]: from astropy.coordinates import SkyCoord, ICRS\r\n\r\nIn [2]: frame = ICRS(\"0d\", \"0d\")\r\n\r\nIn [3]: coord = SkyCoord(frame)\r\n\r\nIn [4]: frame == coord\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nInput In [4], in <cell line: 1>()\r\n----> 1 frame == coord\r\n\r\nFile ~/.local/lib/python3.10/site-packages/astropy/coordinates/baseframe.py:1657, in BaseCoordinateFrame.__eq__(self, value)\r\n   1651 def __eq__(self, value):\r\n   1652     \"\"\"Equality operator for frame.\r\n   1653 \r\n   1654     This implements strict equality and requires that the frames are\r\n   1655     equivalent and that the representation data are exactly equal.\r\n   1656     \"\"\"\r\n-> 1657     is_equiv = self.is_equivalent_frame(value)\r\n   1659     if self._data is None and value._data is None:\r\n   1660         # For Frame with no data, == compare is same as is_equivalent_frame()\r\n   1661         return is_equiv\r\n\r\nFile ~/.local/lib/python3.10/site-packages/astropy/coordinates/baseframe.py:1360, in BaseCoordinateFrame.is_equivalent_frame(self, other)\r\n   1358     return True\r\n   1359 elif not isinstance(other, BaseCoordinateFrame):\r\n-> 1360     raise TypeError(\"Tried to do is_equivalent_frame on something that \"\r\n   1361                     \"isn't a frame\")\r\n   1362 else:\r\n   1363     return False\r\n\r\nTypeError: Tried to do is_equivalent_frame on something that isn't a frame\r\n\r\n```\r\n\nComparing Frame with data and SkyCoord with same data raises exception\n<!-- This comments are hidden when you submit the issue,\r\nso you do not need to remove them! -->\r\n\r\n<!-- Please be sure to check out our contributing guidelines,\r\nhttps://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .\r\nPlease be sure to check out our code of conduct,\r\nhttps://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->\r\n\r\n<!-- Please have a search on our GitHub repository to see if a similar\r\nissue has already been posted.\r\nIf a similar issue is closed, have a quick look to see if you are satisfied\r\nby the resolution.\r\nIf not please go ahead and open an issue! -->\r\n\r\n<!-- Please check that the development version still produces the same bug.\r\nYou can install development version with\r\npip install git+https://github.com/astropy/astropy\r\ncommand. -->\r\n\r\n### Description\r\n\r\n`SkyCoord` instances and `Frame` instances with data are somewhat used interchangebly and I am still not sure after all this time spending with astropy what is preferable when...\r\n\r\nSo it's  a bit surprising to me, that comparing a frame with data to a `SkyCoord` instance with exactly the same data raises an exception:\r\n\r\n```\r\n\r\n### Expected behavior\r\n<!-- What did you expect to happen. -->\r\nCompare to true / false depending on data.\r\n\r\n### Actual behavior\r\nException\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n\r\n```python\r\nIn [1]: from astropy.coordinates import SkyCoord, ICRS\r\n\r\nIn [2]: frame = ICRS(\"0d\", \"0d\")\r\n\r\nIn [3]: coord = SkyCoord(frame)\r\n\r\nIn [4]: frame == coord\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nInput In [4], in <cell line: 1>()\r\n----> 1 frame == coord\r\n\r\nFile ~/.local/lib/python3.10/site-packages/astropy/coordinates/baseframe.py:1657, in BaseCoordinateFrame.__eq__(self, value)\r\n   1651 def __eq__(self, value):\r\n   1652     \"\"\"Equality operator for frame.\r\n   1653 \r\n   1654     This implements strict equality and requires that the frames are\r\n   1655     equivalent and that the representation data are exactly equal.\r\n   1656     \"\"\"\r\n-> 1657     is_equiv = self.is_equivalent_frame(value)\r\n   1659     if self._data is None and value._data is None:\r\n   1660         # For Frame with no data, == compare is same as is_equivalent_frame()\r\n   1661         return is_equiv\r\n\r\nFile ~/.local/lib/python3.10/site-packages/astropy/coordinates/baseframe.py:1360, in BaseCoordinateFrame.is_equivalent_frame(self, other)\r\n   1358     return True\r\n   1359 elif not isinstance(other, BaseCoordinateFrame):\r\n-> 1360     raise TypeError(\"Tried to do is_equivalent_frame on something that \"\r\n   1361                     \"isn't a frame\")\r\n   1362 else:\r\n   1363     return False\r\n\r\nTypeError: Tried to do is_equivalent_frame on something that isn't a frame\r\n\r\n```\r\n\n",
  "hints_text": "\n",
  "created_at": "2022-07-22T07:51:19Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"astropy/coordinates/tests/test_frames.py::test_frame_coord_comparison\"]",
  "PASS_TO_PASS": "[\"astropy/coordinates/tests/test_frames.py::test_frame_attribute_descriptor\", \"astropy/coordinates/tests/test_frames.py::test_frame_subclass_attribute_descriptor\", \"astropy/coordinates/tests/test_frames.py::test_frame_multiple_inheritance_attribute_descriptor\", \"astropy/coordinates/tests/test_frames.py::test_differentialattribute\", \"astropy/coordinates/tests/test_frames.py::test_create_data_frames\", \"astropy/coordinates/tests/test_frames.py::test_create_orderered_data\", \"astropy/coordinates/tests/test_frames.py::test_create_nodata_frames\", \"astropy/coordinates/tests/test_frames.py::test_frame_repr\", \"astropy/coordinates/tests/test_frames.py::test_frame_repr_vels\", \"astropy/coordinates/tests/test_frames.py::test_converting_units\", \"astropy/coordinates/tests/test_frames.py::test_representation_info\", \"astropy/coordinates/tests/test_frames.py::test_realizing\", \"astropy/coordinates/tests/test_frames.py::test_replicating\", \"astropy/coordinates/tests/test_frames.py::test_getitem\", \"astropy/coordinates/tests/test_frames.py::test_transform\", \"astropy/coordinates/tests/test_frames.py::test_transform_to_nonscalar_nodata_frame\", \"astropy/coordinates/tests/test_frames.py::test_setitem_no_velocity\", \"astropy/coordinates/tests/test_frames.py::test_setitem_velocities\", \"astropy/coordinates/tests/test_frames.py::test_setitem_exceptions\", \"astropy/coordinates/tests/test_frames.py::test_sep\", \"astropy/coordinates/tests/test_frames.py::test_time_inputs\", \"astropy/coordinates/tests/test_frames.py::test_is_frame_attr_default\", \"astropy/coordinates/tests/test_frames.py::test_altaz_attributes\", \"astropy/coordinates/tests/test_frames.py::test_hadec_attributes\", \"astropy/coordinates/tests/test_frames.py::test_representation\", \"astropy/coordinates/tests/test_frames.py::test_represent_as\", \"astropy/coordinates/tests/test_frames.py::test_shorthand_representations\", \"astropy/coordinates/tests/test_frames.py::test_equal\", \"astropy/coordinates/tests/test_frames.py::test_equal_exceptions\", \"astropy/coordinates/tests/test_frames.py::test_dynamic_attrs\", \"astropy/coordinates/tests/test_frames.py::test_nodata_error\", \"astropy/coordinates/tests/test_frames.py::test_len0_data\", \"astropy/coordinates/tests/test_frames.py::test_quantity_attributes\", \"astropy/coordinates/tests/test_frames.py::test_quantity_attribute_default\", \"astropy/coordinates/tests/test_frames.py::test_eloc_attributes\", \"astropy/coordinates/tests/test_frames.py::test_equivalent_frames\", \"astropy/coordinates/tests/test_frames.py::test_equivalent_frame_coordinateattribute\", \"astropy/coordinates/tests/test_frames.py::test_equivalent_frame_locationattribute\", \"astropy/coordinates/tests/test_frames.py::test_representation_subclass\", \"astropy/coordinates/tests/test_frames.py::test_getitem_representation\", \"astropy/coordinates/tests/test_frames.py::test_component_error_useful\", \"astropy/coordinates/tests/test_frames.py::test_cache_clear\", \"astropy/coordinates/tests/test_frames.py::test_inplace_array\", \"astropy/coordinates/tests/test_frames.py::test_inplace_change\", \"astropy/coordinates/tests/test_frames.py::test_representation_with_multiple_differentials\", \"astropy/coordinates/tests/test_frames.py::test_missing_component_error_names\", \"astropy/coordinates/tests/test_frames.py::test_non_spherical_representation_unit_creation\", \"astropy/coordinates/tests/test_frames.py::test_attribute_repr\", \"astropy/coordinates/tests/test_frames.py::test_component_names_repr\", \"astropy/coordinates/tests/test_frames.py::test_galactocentric_defaults\", \"astropy/coordinates/tests/test_frames.py::test_galactocentric_references\", \"astropy/coordinates/tests/test_frames.py::test_coordinateattribute_transformation\", \"astropy/coordinates/tests/test_frames.py::test_realize_frame_accepts_kwargs\", \"astropy/coordinates/tests/test_frames.py::test_nameless_frame_subclass\"]",
  "environment_setup_commit": "cdf311e0714e611d48b0a31eb1f0e2cbffab7f23",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.532697",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}