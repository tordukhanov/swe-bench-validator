{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-5613",
  "base_commit": "019794b808271d45f86a7014e9c91cb04458a47a",
  "patch": "diff --git a/pylint/__init__.py b/pylint/__init__.py\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -11,17 +11,22 @@\n \n import os\n import sys\n+from typing import List, Optional\n \n from pylint.__pkginfo__ import __version__\n \n # pylint: disable=import-outside-toplevel\n \n \n-def run_pylint():\n+def run_pylint(*, arguments: Optional[List[str]] = None):\n+    \"\"\"Run pylint\n+\n+    Arguments can be a list of strings normally supplied as arguments on the command line\n+    \"\"\"\n     from pylint.lint import Run as PylintRun\n \n     try:\n-        PylintRun(sys.argv[1:])\n+        PylintRun(arguments or sys.argv[1:])\n     except KeyboardInterrupt:\n         sys.exit(1)\n \n@@ -32,18 +37,24 @@ def run_epylint():\n     EpylintRun()\n \n \n-def run_pyreverse():\n-    \"\"\"run pyreverse\"\"\"\n+def run_pyreverse(*, arguments: Optional[List[str]] = None):\n+    \"\"\"Run pyreverse\n+\n+    Arguments can be a list of strings normally supplied as arguments on the command line\n+    \"\"\"\n     from pylint.pyreverse.main import Run as PyreverseRun\n \n-    PyreverseRun(sys.argv[1:])\n+    PyreverseRun(arguments or sys.argv[1:])\n+\n \n+def run_symilar(*, arguments: Optional[List[str]] = None):\n+    \"\"\"Run symilar\n \n-def run_symilar():\n-    \"\"\"run symilar\"\"\"\n+    Arguments can be a list of strings normally supplied as arguments on the command line\n+    \"\"\"\n     from pylint.checkers.similar import Run as SimilarRun\n \n-    SimilarRun(sys.argv[1:])\n+    SimilarRun(arguments or sys.argv[1:])\n \n \n def modify_sys_path() -> None:\n",
  "test_patch": "diff --git a/tests/test_pylint_runners.py b/tests/test_pylint_runners.py\n--- a/tests/test_pylint_runners.py\n+++ b/tests/test_pylint_runners.py\n@@ -21,3 +21,14 @@ def test_runner(runner: Callable, tmpdir: LocalPath) -> None:\n             with pytest.raises(SystemExit) as err:\n                 runner()\n             assert err.value.code == 0\n+\n+\n+@pytest.mark.parametrize(\"runner\", [run_pylint, run_pyreverse, run_symilar])\n+def test_runner_with_arguments(runner: Callable, tmpdir: LocalPath) -> None:\n+    \"\"\"Check the runners with arguments as parameter instead of sys.argv\"\"\"\n+    filepath = os.path.abspath(__file__)\n+    testargs = [filepath]\n+    with tmpdir.as_cwd():\n+        with pytest.raises(SystemExit) as err:\n+            runner(arguments=testargs)\n+        assert err.value.code == 0\n",
  "problem_statement": "Please provide a better entry point to pyreverse\n### Current problem\r\n\r\nCurrently, I have to do:\r\n```python\r\nimport pylint\r\n\r\n# Set name.\r\n# Collect filenames in files...\r\n\r\nsys.argv = 'pyreverse -o png -p'.split() + [name] + files\r\ntry:\r\n    pylint.run_pyreverse()\r\nexcept SystemExit:\r\n    pass  # pylint always does this.\r\n```\r\n\r\n### Desired solution\r\n\r\nI would like to do something like:\r\n```python\r\nimport pylint\r\n\r\npylint.pyreverse(output=pylint.PNG, project=name, files=files)\r\n```\n",
  "hints_text": "This is reasonable and should not take too long either.",
  "created_at": "2021-12-30T16:46:38Z",
  "version": "2.13",
  "FAIL_TO_PASS": "[\"tests/test_pylint_runners.py::test_runner_with_arguments[run_pylint]\", \"tests/test_pylint_runners.py::test_runner_with_arguments[run_pyreverse]\", \"tests/test_pylint_runners.py::test_runner_with_arguments[run_symilar]\"]",
  "PASS_TO_PASS": "[\"tests/test_pylint_runners.py::test_runner[run_epylint]\", \"tests/test_pylint_runners.py::test_runner[run_pylint]\", \"tests/test_pylint_runners.py::test_runner[run_pyreverse]\", \"tests/test_pylint_runners.py::test_runner[run_symilar]\"]",
  "environment_setup_commit": "3b2fbaec045697d53bdd4435e59dbfc2b286df4b",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.910832",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}