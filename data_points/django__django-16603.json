{
  "repo": "django/django",
  "instance_id": "django__django-16603",
  "base_commit": "4e4eda6d6c8a5867dafd2ba9167ad8c064bb644a",
  "patch": "diff --git a/django/core/handlers/asgi.py b/django/core/handlers/asgi.py\n--- a/django/core/handlers/asgi.py\n+++ b/django/core/handlers/asgi.py\n@@ -1,3 +1,4 @@\n+import asyncio\n import logging\n import sys\n import tempfile\n@@ -177,15 +178,49 @@ async def handle(self, scope, receive, send):\n             body_file.close()\n             await self.send_response(error_response, send)\n             return\n-        # Get the response, using the async mode of BaseHandler.\n+        # Try to catch a disconnect while getting response.\n+        tasks = [\n+            asyncio.create_task(self.run_get_response(request)),\n+            asyncio.create_task(self.listen_for_disconnect(receive)),\n+        ]\n+        done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)\n+        done, pending = done.pop(), pending.pop()\n+        # Allow views to handle cancellation.\n+        pending.cancel()\n+        try:\n+            await pending\n+        except asyncio.CancelledError:\n+            # Task re-raised the CancelledError as expected.\n+            pass\n+        try:\n+            response = done.result()\n+        except RequestAborted:\n+            body_file.close()\n+            return\n+        except AssertionError:\n+            body_file.close()\n+            raise\n+        # Send the response.\n+        await self.send_response(response, send)\n+\n+    async def listen_for_disconnect(self, receive):\n+        \"\"\"Listen for disconnect from the client.\"\"\"\n+        message = await receive()\n+        if message[\"type\"] == \"http.disconnect\":\n+            raise RequestAborted()\n+        # This should never happen.\n+        assert False, \"Invalid ASGI message after request body: %s\" % message[\"type\"]\n+\n+    async def run_get_response(self, request):\n+        \"\"\"Get async response.\"\"\"\n+        # Use the async mode of BaseHandler.\n         response = await self.get_response_async(request)\n         response._handler_class = self.__class__\n         # Increase chunk size on file responses (ASGI servers handles low-level\n         # chunking).\n         if isinstance(response, FileResponse):\n             response.block_size = self.chunk_size\n-        # Send the response.\n-        await self.send_response(response, send)\n+        return response\n \n     async def read_body(self, receive):\n         \"\"\"Reads an HTTP body from an ASGI connection.\"\"\"\n",
  "test_patch": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -7,8 +7,10 @@\n \n from django.contrib.staticfiles.handlers import ASGIStaticFilesHandler\n from django.core.asgi import get_asgi_application\n+from django.core.handlers.asgi import ASGIHandler, ASGIRequest\n from django.core.signals import request_finished, request_started\n from django.db import close_old_connections\n+from django.http import HttpResponse\n from django.test import (\n     AsyncRequestFactory,\n     SimpleTestCase,\n@@ -16,6 +18,7 @@\n     modify_settings,\n     override_settings,\n )\n+from django.urls import path\n from django.utils.http import http_date\n \n from .urls import sync_waiter, test_filename\n@@ -234,6 +237,34 @@ async def test_disconnect(self):\n         with self.assertRaises(asyncio.TimeoutError):\n             await communicator.receive_output()\n \n+    async def test_disconnect_with_body(self):\n+        application = get_asgi_application()\n+        scope = self.async_request_factory._base_scope(path=\"/\")\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({\"type\": \"http.request\", \"body\": b\"some body\"})\n+        await communicator.send_input({\"type\": \"http.disconnect\"})\n+        with self.assertRaises(asyncio.TimeoutError):\n+            await communicator.receive_output()\n+\n+    async def test_assert_in_listen_for_disconnect(self):\n+        application = get_asgi_application()\n+        scope = self.async_request_factory._base_scope(path=\"/\")\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({\"type\": \"http.request\"})\n+        await communicator.send_input({\"type\": \"http.not_a_real_message\"})\n+        msg = \"Invalid ASGI message after request body: http.not_a_real_message\"\n+        with self.assertRaisesMessage(AssertionError, msg):\n+            await communicator.receive_output()\n+\n+    async def test_delayed_disconnect_with_body(self):\n+        application = get_asgi_application()\n+        scope = self.async_request_factory._base_scope(path=\"/delayed_hello/\")\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({\"type\": \"http.request\", \"body\": b\"some body\"})\n+        await communicator.send_input({\"type\": \"http.disconnect\"})\n+        with self.assertRaises(asyncio.TimeoutError):\n+            await communicator.receive_output()\n+\n     async def test_wrong_connection_type(self):\n         application = get_asgi_application()\n         scope = self.async_request_factory._base_scope(path=\"/\", type=\"other\")\n@@ -318,3 +349,56 @@ async def test_concurrent_async_uses_multiple_thread_pools(self):\n         self.assertEqual(len(sync_waiter.active_threads), 2)\n \n         sync_waiter.active_threads.clear()\n+\n+    async def test_asyncio_cancel_error(self):\n+        # Flag to check if the view was cancelled.\n+        view_did_cancel = False\n+\n+        # A view that will listen for the cancelled error.\n+        async def view(request):\n+            nonlocal view_did_cancel\n+            try:\n+                await asyncio.sleep(0.2)\n+                return HttpResponse(\"Hello World!\")\n+            except asyncio.CancelledError:\n+                # Set the flag.\n+                view_did_cancel = True\n+                raise\n+\n+        # Request class to use the view.\n+        class TestASGIRequest(ASGIRequest):\n+            urlconf = (path(\"cancel/\", view),)\n+\n+        # Handler to use request class.\n+        class TestASGIHandler(ASGIHandler):\n+            request_class = TestASGIRequest\n+\n+        # Request cycle should complete since no disconnect was sent.\n+        application = TestASGIHandler()\n+        scope = self.async_request_factory._base_scope(path=\"/cancel/\")\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({\"type\": \"http.request\"})\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start[\"type\"], \"http.response.start\")\n+        self.assertEqual(response_start[\"status\"], 200)\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body[\"type\"], \"http.response.body\")\n+        self.assertEqual(response_body[\"body\"], b\"Hello World!\")\n+        # Give response.close() time to finish.\n+        await communicator.wait()\n+        self.assertIs(view_did_cancel, False)\n+\n+        # Request cycle with a disconnect before the view can respond.\n+        application = TestASGIHandler()\n+        scope = self.async_request_factory._base_scope(path=\"/cancel/\")\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({\"type\": \"http.request\"})\n+        # Let the view actually start.\n+        await asyncio.sleep(0.1)\n+        # Disconnect the client.\n+        await communicator.send_input({\"type\": \"http.disconnect\"})\n+        # The handler should not send a response.\n+        with self.assertRaises(asyncio.TimeoutError):\n+            await communicator.receive_output()\n+        await communicator.wait()\n+        self.assertIs(view_did_cancel, True)\ndiff --git a/tests/asgi/urls.py b/tests/asgi/urls.py\n--- a/tests/asgi/urls.py\n+++ b/tests/asgi/urls.py\n@@ -1,4 +1,5 @@\n import threading\n+import time\n \n from django.http import FileResponse, HttpResponse\n from django.urls import path\n@@ -10,6 +11,12 @@ def hello(request):\n     return HttpResponse(\"Hello %s!\" % name)\n \n \n+def hello_with_delay(request):\n+    name = request.GET.get(\"name\") or \"World\"\n+    time.sleep(1)\n+    return HttpResponse(f\"Hello {name}!\")\n+\n+\n def hello_meta(request):\n     return HttpResponse(\n         \"From %s\" % request.META.get(\"HTTP_REFERER\") or \"\",\n@@ -46,4 +53,5 @@ def post_echo(request):\n     path(\"meta/\", hello_meta),\n     path(\"post/\", post_echo),\n     path(\"wait/\", sync_waiter),\n+    path(\"delayed_hello/\", hello_with_delay),\n ]\n",
  "problem_statement": "ASGI http.disconnect not handled on requests with body.\nDescription\n\t\nNoticed whilst reviewing ​PR 15704 for #33699, we're not handling the ASGI http.disconnect message correctly. Since it's only dealt with whilst reading the request body, http.disconnect is not processed on a request that includes a body. \n​https://github.com/django/django/blob/241fe59b74bb6031fa644f3ad55e6ad6a9187510/django/core/handlers/asgi.py#L189\n\tasync def read_body(self, receive):\n\t\t\"\"\"Reads an HTTP body from an ASGI connection.\"\"\"\n\t\t# Use the tempfile that auto rolls-over to a disk file as it fills up.\n\t\tbody_file = tempfile.SpooledTemporaryFile(\n\t\t\tmax_size=settings.FILE_UPLOAD_MAX_MEMORY_SIZE, mode=\"w+b\"\n\t\t)\n\t\twhile True:\n\t\t\tmessage = await receive()\n\t\t\tif message[\"type\"] == \"http.disconnect\":\t# This is the only place `http.disconnect` is handled. \n\t\t\t\tbody_file.close()\n\t\t\t\t# Early client disconnect.\n\t\t\t\traise RequestAborted()\n\t\t\t# Add a body chunk from the message, if provided.\n\t\t\tif \"body\" in message:\n\t\t\t\tbody_file.write(message[\"body\"])\n\t\t\t# Quit out if that's the end.\n\t\t\tif not message.get(\"more_body\", False):\n\t\t\t\tbreak\n\t\tbody_file.seek(0)\n\t\treturn body_file\nhttp.disconnect is designed for long-polling — so we imagine a client opening a request, with a request body, and then disconnecting before the response is generated. \nThe protocol server (Daphne/uvicorn/...) will send the http.diconnect message, but it's not handled.\nThis test fails on main (at 9f5548952906c6ea97200c016734b4f519520a64 — 4.2 pre-alpha)\ndiff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex ef7b55724e..a68ca8a473 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -188,6 +188,18 @@ class ASGITest(SimpleTestCase):\n\t\t with self.assertRaises(asyncio.TimeoutError):\n\t\t\t await communicator.receive_output()\n \n+\tasync def test_disconnect_with_body(self):\n+\t\tapplication = get_asgi_application()\n+\t\tscope = self.async_request_factory._base_scope(path=\"/\")\n+\t\tcommunicator = ApplicationCommunicator(application, scope)\n+\t\tawait communicator.send_input({\n+\t\t\t\"type\": \"http.request\",\n+\t\t\t\"body\": b\"some body\",\n+\t\t})\n+\t\tawait communicator.send_input({\"type\": \"http.disconnect\"})\n+\t\twith self.assertRaises(asyncio.TimeoutError):\n+\t\t\tawait communicator.receive_output()\n+\n\t async def test_wrong_connection_type(self):\n\t\t application = get_asgi_application()\n\t\t scope = self.async_request_factory._base_scope(path=\"/\", type=\"other\")\nTo handle this correctly it looks like we'd need something like Channel's ​`await_many_dispatch()` to keep receiving from the input queue whilst dispatching the request. 🤔\n",
  "hints_text": "Thanks! Don't you think it's a bug? 🤔\nDon't you think it's a bug? 🤔 I had it down as such, but it's never worked, and once I started thinking about the fix I thought it's probably a non-minor adjustment so... (But happy if you want to re-classify :)\nReplying to Carlton Gibson: async def read_body(self, receive): \"\"\"Reads an HTTP body from an ASGI connection.\"\"\" # Use the tempfile that auto rolls-over to a disk file as it fills up. body_file = tempfile.SpooledTemporaryFile( max_size=settings.FILE_UPLOAD_MAX_MEMORY_SIZE, mode=\"w+b\" ) while True: message = await receive() if message[\"type\"] == \"http.disconnect\": # This is the only place `http.disconnect` is handled. body_file.close() # Early client disconnect. raise RequestAborted() # Add a body chunk from the message, if provided. if \"body\" in message: body_file.write(message[\"body\"]) # Quit out if that's the end. if not message.get(\"more_body\", False): break body_file.seek(0) return body_file I'm following this ticket for some days and trying to understand the code base learned more about the asynchronous processes and long-polling, IDK this is a solution or not, if we perform a loop only while receiving the message and break it after X interval of time like while True: message = await receive() message_queue.append(message) if time_waited == X : break and do store it in a queue and then perform a loop on the queue data to read the message? Please correct me if I'm wrong or if this sounds immature, thanks\nHi Rahul. ... if we perform a loop only while receiving the message and break it after X interval of time... This won't work I'm afraid. We still need to be able to handle the incoming http.disconnect at any time. It's not 100% straightforward but something like Channels' await_many_dispatch() will be needed. See ​the usage here: it's able to route multiple messages. (I don't think the example there is 100% properly handling the disconnect, as a kind of interrupt there either, since the dispatch task will only process one message at a time, where we're looking to handle a disconnect whilst processing a long-running request… 🤔)\nHi Carlton, I'm not sure if the description of this bug is 100% accurate. From what I can see, http.disconnect is indeed only handled while receiving the body, so we're not going to handle this event once the (potentially empty) body is fully received. Adding \"more_body\": False to your proposed test makes it pass. I had a look for how Starlette handles http.disconnect, and from what I understand the pattern seems to rely on anyio.create_taskgroup() to tear down request processing if an http.disconnect is received.",
  "created_at": "2023-02-27T15:05:05Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_assert_in_listen_for_disconnect (asgi.tests.ASGITest.test_assert_in_listen_for_disconnect)\", \"test_asyncio_cancel_error (asgi.tests.ASGITest.test_asyncio_cancel_error)\", \"test_disconnect_with_body (asgi.tests.ASGITest.test_disconnect_with_body)\"]",
  "PASS_TO_PASS": "[\"test_concurrent_async_uses_multiple_thread_pools (asgi.tests.ASGITest.test_concurrent_async_uses_multiple_thread_pools)\", \"test_delayed_disconnect_with_body (asgi.tests.ASGITest.test_delayed_disconnect_with_body)\", \"test_disconnect (asgi.tests.ASGITest.test_disconnect)\", \"Makes sure that FileResponse works over ASGI.\", \"get_asgi_application() returns a functioning ASGI callable.\", \"test_get_query_string (asgi.tests.ASGITest.test_get_query_string)\", \"test_headers (asgi.tests.ASGITest.test_headers)\", \"test_non_unicode_query_string (asgi.tests.ASGITest.test_non_unicode_query_string)\", \"test_post_body (asgi.tests.ASGITest.test_post_body)\", \"test_request_lifecycle_signals_dispatched_with_thread_sensitive (asgi.tests.ASGITest.test_request_lifecycle_signals_dispatched_with_thread_sensitive)\", \"test_static_file_response (asgi.tests.ASGITest.test_static_file_response)\", \"test_untouched_request_body_gets_closed (asgi.tests.ASGITest.test_untouched_request_body_gets_closed)\", \"test_wrong_connection_type (asgi.tests.ASGITest.test_wrong_connection_type)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.763896",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}