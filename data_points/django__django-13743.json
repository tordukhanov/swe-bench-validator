{
  "repo": "django/django",
  "instance_id": "django__django-13743",
  "base_commit": "cf2ca22a5797cdd53a10954e9811893325b24a30",
  "patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -52,7 +52,11 @@ def get_internal_wsgi_application():\n \n def is_broken_pipe_error():\n     exc_type, _, _ = sys.exc_info()\n-    return issubclass(exc_type, BrokenPipeError)\n+    return issubclass(exc_type, (\n+        BrokenPipeError,\n+        ConnectionAbortedError,\n+        ConnectionResetError,\n+    ))\n \n \n class WSGIServer(simple_server.WSGIServer):\n",
  "test_patch": "diff --git a/tests/servers/test_basehttp.py b/tests/servers/test_basehttp.py\n--- a/tests/servers/test_basehttp.py\n+++ b/tests/servers/test_basehttp.py\n@@ -1,9 +1,10 @@\n from io import BytesIO\n \n from django.core.handlers.wsgi import WSGIRequest\n-from django.core.servers.basehttp import WSGIRequestHandler\n+from django.core.servers.basehttp import WSGIRequestHandler, WSGIServer\n from django.test import SimpleTestCase\n from django.test.client import RequestFactory\n+from django.test.utils import captured_stderr\n \n \n class Stub:\n@@ -102,3 +103,32 @@ def makefile(mode, *a, **kw):\n         body = list(wfile.readlines())[-1]\n \n         self.assertEqual(body, b'HTTP_SOME_HEADER:good')\n+\n+\n+class WSGIServerTestCase(SimpleTestCase):\n+    request_factory = RequestFactory()\n+\n+    def test_broken_pipe_errors(self):\n+        \"\"\"WSGIServer handles broken pipe errors.\"\"\"\n+        request = WSGIRequest(self.request_factory.get('/').environ)\n+        client_address = ('192.168.2.0', 8080)\n+        msg = f'- Broken pipe from {client_address}\\n'\n+        tests = [\n+            BrokenPipeError,\n+            ConnectionAbortedError,\n+            ConnectionResetError,\n+        ]\n+        for exception in tests:\n+            with self.subTest(exception=exception):\n+                try:\n+                    server = WSGIServer(('localhost', 0), WSGIRequestHandler)\n+                    try:\n+                        raise exception()\n+                    except Exception:\n+                        with captured_stderr() as err:\n+                            with self.assertLogs('django.server', 'INFO') as cm:\n+                                server.handle_error(request, client_address)\n+                        self.assertEqual(err.getvalue(), '')\n+                        self.assertEqual(cm.records[0].getMessage(), msg)\n+                finally:\n+                    server.server_close()\n",
  "problem_statement": "ConnectionAbortedError should be treated as a broken pipe error in the development server\nDescription\n\t\nPeople using Windows have been complaining about very long stack traces in the development server for a long time:\n​https://github.com/python/cpython/pull/9713\n​https://bugs.python.org/issue27682\nThese happen under normal interaction with the development server using Chrome.\nI have fixed one issue in CPython in wsgiref, but I belive that we should also fix is_broken_pipe_error in django/core/servers/basehttp.py\n",
  "hints_text": "Hi Petter. Thanks for the report. Happy to have a look at this yes!\nIt's related to many reports, e.g. #29872, #30503, #30932, #30909, or #31091.",
  "created_at": "2020-12-03T07:49:02Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"WSGIServer handles broken pipe errors.\"]",
  "PASS_TO_PASS": "[\"test_https (servers.test_basehttp.WSGIRequestHandlerTestCase)\", \"test_log_message (servers.test_basehttp.WSGIRequestHandlerTestCase)\", \"WSGIRequestHandler ignores headers containing underscores.\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.668410",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}