{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-20131",
  "base_commit": "706007ca2fe279020e099d36dd1db0e33123ac4c",
  "patch": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -1,6 +1,7 @@\n from __future__ import print_function, division\n from .vector import Vector, _check_vector\n from .frame import _check_frame\n+from warnings import warn\n \n __all__ = ['Point']\n \n@@ -529,24 +530,41 @@ def vel(self, frame):\n \n         _check_frame(frame)\n         if not (frame in self._vel_dict):\n+            valid_neighbor_found = False\n+            is_cyclic = False\n             visited = []\n             queue = [self]\n+            candidate_neighbor = []\n             while queue: #BFS to find nearest point\n                 node = queue.pop(0)\n                 if node not in visited:\n                     visited.append(node)\n                     for neighbor, neighbor_pos in node._pos_dict.items():\n+                        if neighbor in visited:\n+                            continue\n                         try:\n                             neighbor_pos.express(frame) #Checks if pos vector is valid\n                         except ValueError:\n                             continue\n+                        if neighbor in queue:\n+                            is_cyclic = True\n                         try :\n                             neighbor_velocity = neighbor._vel_dict[frame] #Checks if point has its vel defined in req frame\n                         except KeyError:\n                             queue.append(neighbor)\n                             continue\n-                        self.set_vel(frame, self.pos_from(neighbor).dt(frame) + neighbor_velocity)\n-                        return self._vel_dict[frame]\n+                        candidate_neighbor.append(neighbor)\n+                        if not valid_neighbor_found:\n+                            self.set_vel(frame, self.pos_from(neighbor).dt(frame) + neighbor_velocity)\n+                            valid_neighbor_found = True\n+            if is_cyclic:\n+                warn('Kinematic loops are defined among the positions of points. This is likely not desired and may cause errors in your calculations.')\n+            if len(candidate_neighbor) > 1:\n+                warn('Velocity automatically calculated based on point ' +\n+                    candidate_neighbor[0].name + ' but it is also possible from points(s):' +\n+                    str(candidate_neighbor[1:]) + '. Velocities from these points are not necessarily the same. This may cause errors in your calculations.')\n+            if valid_neighbor_found:\n+                return self._vel_dict[frame]\n             else:\n                 raise ValueError('Velocity of point ' + self.name + ' has not been'\n                              ' defined in ReferenceFrame ' + frame.name)\n",
  "test_patch": "diff --git a/sympy/physics/vector/tests/test_point.py b/sympy/physics/vector/tests/test_point.py\n--- a/sympy/physics/vector/tests/test_point.py\n+++ b/sympy/physics/vector/tests/test_point.py\n@@ -1,6 +1,6 @@\n from sympy.physics.vector import dynamicsymbols, Point, ReferenceFrame\n-from sympy.testing.pytest import raises\n-\n+from sympy.testing.pytest import raises, ignore_warnings\n+import warnings\n \n def test_point_v1pt_theorys():\n     q, q2 = dynamicsymbols('q q2')\n@@ -216,7 +216,10 @@ def test_auto_point_vel_shortest_path():\n     O1 = Point('O1')\n     O1.set_pos(O, q2 * B.z)\n     P4.set_pos(O1, q1 * B.x + q2 * B.z)\n-    assert P4.vel(B) == q1.diff(t) * B.x + u2 * B.y + 2 * q2.diff(t) * B.z\n+    with warnings.catch_warnings(): #There are two possible paths in this point tree, thus a warning is raised\n+        warnings.simplefilter('error')\n+        with ignore_warnings(UserWarning):\n+            assert P4.vel(B) == q1.diff(t) * B.x + u2 * B.y + 2 * q2.diff(t) * B.z\n \n def test_auto_point_vel_connected_frames():\n     t = dynamicsymbols._t\n@@ -230,3 +233,68 @@ def test_auto_point_vel_connected_frames():\n     raises(ValueError, lambda: P.vel(N))\n     N.orient(B, 'Axis', (q, B.x))\n     assert P.vel(N) == (u + q1.diff(t)) * N.x + q2.diff(t) * B.y - q2 * q.diff(t) * B.z\n+\n+def test_auto_point_vel_multiple_paths_warning_arises():\n+    q, u = dynamicsymbols('q u')\n+    N = ReferenceFrame('N')\n+    O = Point('O')\n+    P = Point('P')\n+    Q = Point('Q')\n+    R = Point('R')\n+    P.set_vel(N, u * N.x)\n+    Q.set_vel(N, u *N.y)\n+    R.set_vel(N, u * N.z)\n+    O.set_pos(P, q * N.z)\n+    O.set_pos(Q, q * N.y)\n+    O.set_pos(R, q * N.x)\n+    with warnings.catch_warnings(): #There are two possible paths in this point tree, thus a warning is raised\n+        warnings.simplefilter(\"error\")\n+        raises(UserWarning ,lambda: O.vel(N))\n+\n+def test_auto_vel_cyclic_warning_arises():\n+    P = Point('P')\n+    P1 = Point('P1')\n+    P2 = Point('P2')\n+    P3 = Point('P3')\n+    N = ReferenceFrame('N')\n+    P.set_vel(N, N.x)\n+    P1.set_pos(P, N.x)\n+    P2.set_pos(P1, N.y)\n+    P3.set_pos(P2, N.z)\n+    P1.set_pos(P3, N.x + N.y)\n+    with warnings.catch_warnings(): #The path is cyclic at P1, thus a warning is raised\n+        warnings.simplefilter(\"error\")\n+        raises(UserWarning ,lambda: P2.vel(N))\n+\n+def test_auto_vel_cyclic_warning_msg():\n+    P = Point('P')\n+    P1 = Point('P1')\n+    P2 = Point('P2')\n+    P3 = Point('P3')\n+    N = ReferenceFrame('N')\n+    P.set_vel(N, N.x)\n+    P1.set_pos(P, N.x)\n+    P2.set_pos(P1, N.y)\n+    P3.set_pos(P2, N.z)\n+    P1.set_pos(P3, N.x + N.y)\n+    with warnings.catch_warnings(record = True) as w: #The path is cyclic at P1, thus a warning is raised\n+        warnings.simplefilter(\"always\")\n+        P2.vel(N)\n+        assert issubclass(w[-1].category, UserWarning)\n+        assert 'Kinematic loops are defined among the positions of points. This is likely not desired and may cause errors in your calculations.' in str(w[-1].message)\n+\n+def test_auto_vel_multiple_path_warning_msg():\n+    N = ReferenceFrame('N')\n+    O = Point('O')\n+    P = Point('P')\n+    Q = Point('Q')\n+    P.set_vel(N, N.x)\n+    Q.set_vel(N, N.y)\n+    O.set_pos(P, N.z)\n+    O.set_pos(Q, N.y)\n+    with warnings.catch_warnings(record = True) as w: #There are two possible paths in this point tree, thus a warning is raised\n+        warnings.simplefilter(\"always\")\n+        O.vel(N)\n+        assert issubclass(w[-1].category, UserWarning)\n+        assert 'Velocity automatically calculated based on point' in str(w[-1].message)\n+        assert 'Velocities from these points are not necessarily the same. This may cause errors in your calculations.' in str(w[-1].message)\n",
  "problem_statement": "Warn the user when trees of points or trees of reference frames are not self consistent.\nsympy.physics.vector has Point and ReferenceFrame. These can be positioned and oriented relative to objects of their same type, respectively. The user is expected to define relative positions and orientations in a consistent manner and the relationships among the objects should be tree graphs. It would be helpful to warn the user if they set positions and orientations that create incorrect graphs, for example adding a cyclic branch; the graphs should be acyclic. You can also create inconsistencies when it comes to calculating velocities and angular velocities, which is done automatically if possible. Here is a point example:\r\n\r\n```\r\nN = ReferenceFrame('N')\r\nO = Point('O')\r\nP = Point('P')\r\nQ = Point('Q')\r\nP.set_vel(N, N.x)\r\nQ.set_vel(N, N.y)\r\nO.set_pos(P, 5*N.z)\r\nO.set_pos(Q, 6*N.y)\r\nO.vel(N)\r\n```\r\n\r\nThe velocities of O in N are different depending on if you calculate based on P or Q. It is also impossible to choose between P or Q. Right now, P or Q will be chosen based on which comes first in `_pos_dict.items()`. We should warn the user that this graph is inconsistent when trying to calculate the velocity of O in N. This same thing can happen with ReferenceFrame.\r\n\r\nI suspect there will be issues when users have kinematic loops and may want to define the loop of point positions that specify the loop. Currently, that is not supported. If you specify a loop through a succession of set_pos() or locate_new() calls, you get an invalid point tree. Kinematic loops have to be dealt with by adding the algebraic equation and forming DAEs instead.\r\n\r\nThese warnings need some careful thought. The first step would be to define precisely what graphs are consistent and non consistent, in terms of physics.vector's capabilities and design. Once that is defined, some methods to check for consistencies can be added. There will be inconsistencies related purely to position and orientation as well as inconsistencies related to the automated calculation of velocities.\r\n\r\nThere is discussion in this PR that is relevant: https://github.com/sympy/sympy/pull/20049\n",
  "hints_text": "If we have multiple points defined at a same level , currently automated velocity would choose the point which comes first, but what I suggest is that we calculate all possible velocities of shortest path by and update _vel_dict by a dictionary\r\n\r\np._vel_dict[frame] = { point1 : calculated_velocity, point2 : calc_velocity}\r\n\r\npoint1 , point2 being two points with velocity defined with required frame at same level.\r\n\r\nThis could give user a choice to choose between any velocity he requires\r\n\r\nIf he updates p's velocity using set_vel(frame) then the dictionary is overridden by user defined velocity.\nThat's not what we'd want. The goal is to calculate the correct velocity or none at all.\n> That's not what we'd want. The goal is to calculate the correct velocity or none at all.\r\n\r\nGot it",
  "created_at": "2020-09-22T12:39:33Z",
  "version": "1.7",
  "FAIL_TO_PASS": "[\"test_auto_point_vel_multiple_paths_warning_arises\", \"test_auto_vel_cyclic_warning_arises\", \"test_auto_vel_cyclic_warning_msg\"]",
  "PASS_TO_PASS": "[\"test_point_v1pt_theorys\", \"test_point_a1pt_theorys\", \"test_point_v2pt_theorys\", \"test_point_a2pt_theorys\", \"test_point_funcs\", \"test_point_pos\", \"test_point_partial_velocity\", \"test_point_vel\", \"test_auto_point_vel\", \"test_auto_point_vel_multiple_point_path\", \"test_auto_vel_dont_overwrite\", \"test_auto_point_vel_if_tree_has_vel_but_inappropriate_pos_vector\", \"test_auto_point_vel_shortest_path\", \"test_auto_point_vel_connected_frames\"]",
  "environment_setup_commit": "cffd4e0f86fefd4802349a9f9b19ed70934ea354",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.136210",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}