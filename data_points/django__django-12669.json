{
  "repo": "django/django",
  "instance_id": "django__django-12669",
  "base_commit": "4237050684427db45ea834fe89d9e11c0520201e",
  "patch": "diff --git a/django/db/models/sql/constants.py b/django/db/models/sql/constants.py\n--- a/django/db/models/sql/constants.py\n+++ b/django/db/models/sql/constants.py\n@@ -2,8 +2,6 @@\n Constants specific to the SQL storage portion of the ORM.\n \"\"\"\n \n-from django.utils.regex_helper import _lazy_re_compile\n-\n # Size of each \"chunk\" for get_iterator calls.\n # Larger values are slightly faster at the expense of more storage space.\n GET_ITERATOR_CHUNK_SIZE = 100\n@@ -16,7 +14,6 @@\n CURSOR = 'cursor'\n NO_RESULTS = 'no results'\n \n-ORDER_PATTERN = _lazy_re_compile(r'\\?|[-+]?[.\\w]+$')\n ORDER_DIR = {\n     'ASC': ('ASC', 'DESC'),\n     'DESC': ('DESC', 'ASC'),\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -30,9 +30,7 @@\n from django.db.models.query_utils import (\n     Q, check_rel_lookup_compatibility, refs_expression,\n )\n-from django.db.models.sql.constants import (\n-    INNER, LOUTER, ORDER_DIR, ORDER_PATTERN, SINGLE,\n-)\n+from django.db.models.sql.constants import INNER, LOUTER, ORDER_DIR, SINGLE\n from django.db.models.sql.datastructures import (\n     BaseTable, Empty, Join, MultiJoin,\n )\n@@ -1895,7 +1893,28 @@ def add_ordering(self, *ordering):\n         \"\"\"\n         errors = []\n         for item in ordering:\n-            if not hasattr(item, 'resolve_expression') and not ORDER_PATTERN.match(item):\n+            if isinstance(item, str):\n+                if '.' in item:\n+                    warnings.warn(\n+                        'Passing column raw column aliases to order_by() is '\n+                        'deprecated. Wrap %r in a RawSQL expression before '\n+                        'passing it to order_by().' % item,\n+                        category=RemovedInDjango40Warning,\n+                        stacklevel=3,\n+                    )\n+                    continue\n+                if item == '?':\n+                    continue\n+                if item.startswith('-'):\n+                    item = item[1:]\n+                if item in self.annotations:\n+                    continue\n+                if self.extra and item in self.extra:\n+                    continue\n+                # names_to_path() validates the lookup. A descriptive\n+                # FieldError will be raise if it's not.\n+                self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)\n+            elif not hasattr(item, 'resolve_expression'):\n                 errors.append(item)\n             if getattr(item, 'contains_aggregate', False):\n                 raise FieldError(\n",
  "test_patch": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -7,10 +7,12 @@\n from django.core.exceptions import EmptyResultSet, FieldError\n from django.db import DEFAULT_DB_ALIAS, connection\n from django.db.models import Count, Exists, F, OuterRef, Q\n+from django.db.models.expressions import RawSQL\n from django.db.models.sql.constants import LOUTER\n from django.db.models.sql.where import NothingNode, WhereNode\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n-from django.test.utils import CaptureQueriesContext\n+from django.test.utils import CaptureQueriesContext, ignore_warnings\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import (\n     FK1, Annotation, Article, Author, BaseA, Book, CategoryItem,\n@@ -609,14 +611,36 @@ def test_ticket7155(self):\n             ['datetime.datetime(2007, 12, 19, 0, 0)']\n         )\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n     def test_ticket7098(self):\n-        # Make sure semi-deprecated ordering by related models syntax still\n-        # works.\n         self.assertSequenceEqual(\n             Item.objects.values('note__note').order_by('queries_note.note', 'id'),\n             [{'note__note': 'n2'}, {'note__note': 'n3'}, {'note__note': 'n3'}, {'note__note': 'n3'}]\n         )\n \n+    def test_order_by_rawsql(self):\n+        self.assertSequenceEqual(\n+            Item.objects.values('note__note').order_by(\n+                RawSQL('queries_note.note', ()),\n+                'id',\n+            ),\n+            [\n+                {'note__note': 'n2'},\n+                {'note__note': 'n3'},\n+                {'note__note': 'n3'},\n+                {'note__note': 'n3'},\n+            ],\n+        )\n+\n+    def test_order_by_raw_column_alias_warning(self):\n+        msg = (\n+            \"Passing column raw column aliases to order_by() is deprecated. \"\n+            \"Wrap 'queries_author.name' in a RawSQL expression before \"\n+            \"passing it to order_by().\"\n+        )\n+        with self.assertRaisesMessage(RemovedInDjango40Warning, msg):\n+            Item.objects.values('creator__name').order_by('queries_author.name')\n+\n     def test_ticket7096(self):\n         # Make sure exclude() with multiple conditions continues to work.\n         self.assertQuerysetEqual(\n@@ -3086,20 +3110,13 @@ def test_iter_exceptions(self):\n         with self.assertRaisesMessage(AttributeError, msg):\n             list(qs)\n \n-    def test_invalid_qs_list(self):\n-        # Test for #19895 - second iteration over invalid queryset\n-        # raises errors.\n-        qs = Article.objects.order_by('invalid_column')\n-        msg = \"Cannot resolve keyword 'invalid_column' into field.\"\n-        with self.assertRaisesMessage(FieldError, msg):\n-            list(qs)\n-        with self.assertRaisesMessage(FieldError, msg):\n-            list(qs)\n-\n     def test_invalid_order_by(self):\n-        msg = \"Invalid order_by arguments: ['*']\"\n+        msg = (\n+            \"Cannot resolve keyword '*' into field. Choices are: created, id, \"\n+            \"name\"\n+        )\n         with self.assertRaisesMessage(FieldError, msg):\n-            list(Article.objects.order_by('*'))\n+            Article.objects.order_by('*')\n \n     def test_invalid_queryset_model(self):\n         msg = 'Cannot use QuerySet for \"Article\": Use a QuerySet for \"ExtraInfo\".'\n",
  "problem_statement": "Add proper field validation to QuerySet.order_by.\nDescription\n\t\nWhen you annotate a QuerySet with a uuid key, the order_by functionality breaks for the uuid column because the uuid is \"not a valid order_by argument\".\nChanging the constant django.db.models.sql.constants.ORDER_PATTERN by allowing a \"-\"\nfrom\nORDER_PATTERN = re.compile(r'\\?|[-+]?[.\\w]+$')\nto \nORDER_PATTERN = re.compile(r'\\?|[-+]?[.\\-\\w]+$')\nfixes this in PostgreSQL. \nIs there a reason the former pattern was used, is it incompatible with other dbs?\n",
  "hints_text": "ORDER_PATTERN is a long standing hack that was added more than 12 years ago during the first iteration of the ORM and augmented later on to address #7098. It should be replaced by proper field reference validation but could you go into more details about how you triggered this error? How did you manage to annotate a field containing an hyphen and pass it along to order_by. Just to make it clear, order_by(str(uuid.uuid4()) is effectively not allowed and annotation using uuid as name should also not be supported .annotate(**{str(uuid.uuid4()): expression}) is not supported and if you want to order by a programmatically added alias without risking field collision you should pass expression directly to .order_by().\nClosing as needsinfo for now until its determined whether or not it should be considered a cleanup of the regex based validation of order_by of if there's a legitimate issue with uuid annotation ordering.\nThe way I was able to annotate with an uuid as a key was by dict expansion like your example above. So while it might not be supported it did not throw any errors and from what I can tell works perfectly fine. I'm currently running Django==2.2",
  "created_at": "2020-04-05T19:55:36Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_invalid_order_by (queries.tests.QuerySetExceptionTests)\", \"test_order_by_raw_column_alias_warning (queries.tests.Queries1Tests)\"]",
  "PASS_TO_PASS": "[\"#13227 -- If a queryset is already evaluated, it can still be used as a query arg\", \"test_no_fields_cloning (queries.tests.CloneTests)\", \"test_no_model_options_cloning (queries.tests.CloneTests)\", \"test_no_extra_params (queries.tests.DefaultValuesInsertTest)\", \"test_ticket14729 (queries.tests.RawQueriesTests)\", \"test_tickets_3045_3288 (queries.tests.SelectRelatedTests)\", \"test_ticket7371 (queries.tests.CustomPkTests)\", \"test_empty_full_handling_conjunction (queries.tests.WhereNodeTest)\", \"test_empty_full_handling_disjunction (queries.tests.WhereNodeTest)\", \"test_empty_nodes (queries.tests.WhereNodeTest)\", \"test_ticket_7302 (queries.tests.EscapingTests)\", \"test_join_already_in_query (queries.tests.NullableRelOrderingTests)\", \"test_ticket10028 (queries.tests.NullableRelOrderingTests)\", \"test_ticket7778 (queries.tests.SubclassFKTests)\", \"test_ticket_21203 (queries.tests.Ticket21203Tests)\", \"test_reverse_trimming (queries.tests.ReverseJoinTrimmingTest)\", \"test_evaluated_proxy_count (queries.tests.ProxyQueryCleanupTest)\", \"test_ticket_14056 (queries.tests.Ticket14056Tests)\", \"test_empty_string_promotion (queries.tests.EmptyStringPromotionTests)\", \"test_ticket_21879 (queries.tests.ReverseM2MCustomPkTests)\", \"test_invalid_values (queries.tests.TestInvalidValuesRelation)\", \"test_exists (queries.tests.ExistsSql)\", \"test_ticket_18414 (queries.tests.ExistsSql)\", \"test_ticket8597 (queries.tests.ComparisonTests)\", \"test_ticket10432 (queries.tests.GeneratorExpressionTests)\", \"test_ticket_22429 (queries.tests.Ticket22429Tests)\", \"test_in_list_limit (queries.tests.ConditionalTests)\", \"test_infinite_loop (queries.tests.ConditionalTests)\", \"test_ticket_24278 (queries.tests.TestTicket24279)\", \"test_ticket_12807 (queries.tests.Ticket12807Tests)\", \"test_ticket_20788 (queries.tests.Ticket20788Tests)\", \"test_ticket22023 (queries.tests.Queries3Tests)\", \"test_ticket7107 (queries.tests.Queries3Tests)\", \"test_ticket8683 (queries.tests.Queries3Tests)\", \"test_annotated_ordering (queries.tests.QuerysetOrderedTests)\", \"test_cleared_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_empty_queryset (queries.tests.QuerysetOrderedTests)\", \"test_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_no_default_or_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_order_by_extra (queries.tests.QuerysetOrderedTests)\", \"test_ticket_21787 (queries.tests.ForeignKeyToBaseExcludeTests)\", \"test_or_with_both_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_both_slice_and_ordering (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_lhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_rhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_values_in_subquery (queries.tests.ValuesSubqueryTests)\", \"test_double_subquery_in (queries.tests.DoubleInSubqueryTests)\", \"test_ticket15786 (queries.tests.Exclude15786)\", \"test_primary_key (queries.tests.IsNullTests)\", \"test_to_field (queries.tests.IsNullTests)\", \"test_ticket_18785 (queries.tests.Ticket18785Tests)\", \"test_emptyqueryset_values (queries.tests.EmptyQuerySetTests)\", \"test_ticket_19151 (queries.tests.EmptyQuerySetTests)\", \"test_values_subquery (queries.tests.EmptyQuerySetTests)\", \"test_21001 (queries.tests.EmptyStringsAsNullTest)\", \"test_direct_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_joined_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_invalid_queryset_model (queries.tests.QuerySetExceptionTests)\", \"test_iter_exceptions (queries.tests.QuerySetExceptionTests)\", \"test_empty_resultset_sql (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery_exclude (queries.tests.WeirdQuerysetSlicingTests)\", \"test_tickets_7698_10202 (queries.tests.WeirdQuerysetSlicingTests)\", \"test_zero_length_values_slicing (queries.tests.WeirdQuerysetSlicingTests)\", \"test_ticket_19964 (queries.tests.RelabelCloneTest)\", \"test_ticket7872 (queries.tests.DisjunctiveFilterTests)\", \"test_ticket8283 (queries.tests.DisjunctiveFilterTests)\", \"test_double_exclude (queries.tests.NullInExcludeTest)\", \"test_null_in_exclude_qs (queries.tests.NullInExcludeTest)\", \"test_ticket_24605 (queries.tests.TestTicket24605)\", \"test_ticket_20101 (queries.tests.Ticket20101Tests)\", \"test_non_nullable_fk_not_promoted (queries.tests.ValuesJoinPromotionTests)\", \"test_ticket_21376 (queries.tests.ValuesJoinPromotionTests)\", \"test_values_no_promotion_for_existing (queries.tests.ValuesJoinPromotionTests)\", \"test_can_combine_queries_using_and_and_or_operators (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_items_using_index_and_slice_notation (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_number_of_items_in_queryset_using_standard_len (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_invalid_index (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_can_slice_again_after_slicing (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_combine_queries_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_filter_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_reorder_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"hint: inverting your ordering might do what you need\", \"test_slicing_with_steps_can_be_used (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_with_tests_is_not_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_without_step_is_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_ticket_20955 (queries.tests.Ticket20955Tests)\", \"test_ticket12239 (queries.tests.Queries2Tests)\", \"test_ticket4289 (queries.tests.Queries2Tests)\", \"test_ticket7759 (queries.tests.Queries2Tests)\", \"test_exclude_plain (queries.tests.ExcludeTest17600)\", \"test_exclude_plain_distinct (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_is_equal_to_plain_exclude (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_is_equal_to_plain_exclude_variation (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_object_distinct (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_object_no_distinct (queries.tests.ExcludeTest17600)\", \"test_exclude_many_to_many (queries.tests.ManyToManyExcludeTest)\", \"test_ticket_12823 (queries.tests.ManyToManyExcludeTest)\", \"test_ticket_23605 (queries.tests.Ticket23605Tests)\", \"test_correct_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_values_queryset_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_wrong_backward_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_wrong_type_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_fk_reuse (queries.tests.JoinReuseTest)\", \"test_fk_reuse_annotation (queries.tests.JoinReuseTest)\", \"test_fk_reuse_disjunction (queries.tests.JoinReuseTest)\", \"test_fk_reuse_order_by (queries.tests.JoinReuseTest)\", \"test_fk_reuse_select_related (queries.tests.JoinReuseTest)\", \"test_inverted_q_across_relations (queries.tests.JoinReuseTest)\", \"test_revfk_noreuse (queries.tests.JoinReuseTest)\", \"test_revo2o_reuse (queries.tests.JoinReuseTest)\", \"test_isnull_filter_promotion (queries.tests.NullJoinPromotionOrTest)\", \"test_null_join_demotion (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_17886 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21366 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_complex_filter (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_and (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_or (queries.tests.NullJoinPromotionOrTest)\", \"test_in_query (queries.tests.ToFieldTests)\", \"test_in_subquery (queries.tests.ToFieldTests)\", \"test_nested_in_subquery (queries.tests.ToFieldTests)\", \"test_recursive_fk (queries.tests.ToFieldTests)\", \"test_recursive_fk_reverse (queries.tests.ToFieldTests)\", \"test_reverse_in (queries.tests.ToFieldTests)\", \"test_single_object (queries.tests.ToFieldTests)\", \"test_single_object_reverse (queries.tests.ToFieldTests)\", \"test_exclude_reverse_fk_field_ref (queries.tests.ExcludeTests)\", \"test_exclude_with_circular_fk_relation (queries.tests.ExcludeTests)\", \"test_subquery_exclude_outerref (queries.tests.ExcludeTests)\", \"test_ticket14511 (queries.tests.ExcludeTests)\", \"test_to_field (queries.tests.ExcludeTests)\", \"test_distinct_ordered_sliced_subquery_aggregation (queries.tests.Queries6Tests)\", \"test_multiple_columns_with_the_same_name_slice (queries.tests.Queries6Tests)\", \"test_nested_queries_sql (queries.tests.Queries6Tests)\", \"test_parallel_iterators (queries.tests.Queries6Tests)\", \"test_ticket3739 (queries.tests.Queries6Tests)\", \"test_ticket_11320 (queries.tests.Queries6Tests)\", \"test_tickets_8921_9188 (queries.tests.Queries6Tests)\", \"test_disjunction_promotion1 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion2 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion5_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion6 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion7 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_fexpression (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_select_related (queries.tests.DisjunctionPromotionTests)\", \"test_extra_multiple_select_params_values_order_by (queries.tests.ValuesQuerysetTests)\", \"test_extra_select_params_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_multiple (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_twice (queries.tests.ValuesQuerysetTests)\", \"test_field_error_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_values_list (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_bad_field_name (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression_with_default_alias (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_flat (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_with_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_without_fields (queries.tests.ValuesQuerysetTests)\", \"test_extra_select_literal_percent_s (queries.tests.Queries5Tests)\", \"test_ordering (queries.tests.Queries5Tests)\", \"test_ticket5261 (queries.tests.Queries5Tests)\", \"test_ticket7045 (queries.tests.Queries5Tests)\", \"test_ticket7256 (queries.tests.Queries5Tests)\", \"test_ticket9848 (queries.tests.Queries5Tests)\", \"test_AB_ACB (queries.tests.UnionTests)\", \"test_A_AB (queries.tests.UnionTests)\", \"test_A_AB2 (queries.tests.UnionTests)\", \"test_BAB_BAC (queries.tests.UnionTests)\", \"test_BAB_BACB (queries.tests.UnionTests)\", \"test_BA_BCA__BAB_BAC_BCA (queries.tests.UnionTests)\", \"test_distinct_ordered_sliced_subquery (queries.tests.SubqueryTests)\", \"Subselects honor any manual ordering\", \"test_related_sliced_subquery (queries.tests.SubqueryTests)\", \"test_slice_subquery_and_query (queries.tests.SubqueryTests)\", \"Delete queries can safely contain sliced subqueries\", \"test_combine_join_reuse (queries.tests.Queries4Tests)\", \"test_filter_reverse_non_integer_pk (queries.tests.Queries4Tests)\", \"test_join_reuse_order (queries.tests.Queries4Tests)\", \"test_order_by_resetting (queries.tests.Queries4Tests)\", \"test_order_by_reverse_fk (queries.tests.Queries4Tests)\", \"test_ticket10181 (queries.tests.Queries4Tests)\", \"test_ticket11811 (queries.tests.Queries4Tests)\", \"test_ticket14876 (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_true (queries.tests.Queries4Tests)\", \"test_ticket24525 (queries.tests.Queries4Tests)\", \"test_ticket7095 (queries.tests.Queries4Tests)\", \"test_avoid_infinite_loop_on_too_many_subqueries (queries.tests.Queries1Tests)\", \"test_common_mixed_case_foreign_keys (queries.tests.Queries1Tests)\", \"test_deferred_load_qs_pickling (queries.tests.Queries1Tests)\", \"test_double_exclude (queries.tests.Queries1Tests)\", \"test_error_raised_on_filter_with_dictionary (queries.tests.Queries1Tests)\", \"test_exclude (queries.tests.Queries1Tests)\", \"test_exclude_in (queries.tests.Queries1Tests)\", \"test_excluded_intermediary_m2m_table_joined (queries.tests.Queries1Tests)\", \"test_get_clears_ordering (queries.tests.Queries1Tests)\", \"test_heterogeneous_qs_combination (queries.tests.Queries1Tests)\", \"test_lookup_constraint_fielderror (queries.tests.Queries1Tests)\", \"test_nested_exclude (queries.tests.Queries1Tests)\", \"test_order_by_join_unref (queries.tests.Queries1Tests)\", \"test_order_by_rawsql (queries.tests.Queries1Tests)\", \"test_order_by_tables (queries.tests.Queries1Tests)\", \"test_reasonable_number_of_subq_aliases (queries.tests.Queries1Tests)\", \"test_subquery_condition (queries.tests.Queries1Tests)\", \"test_ticket10205 (queries.tests.Queries1Tests)\", \"test_ticket10432 (queries.tests.Queries1Tests)\", \"test_ticket1050 (queries.tests.Queries1Tests)\", \"test_ticket10742 (queries.tests.Queries1Tests)\", \"test_ticket17429 (queries.tests.Queries1Tests)\", \"test_ticket1801 (queries.tests.Queries1Tests)\", \"test_ticket19672 (queries.tests.Queries1Tests)\", \"test_ticket2091 (queries.tests.Queries1Tests)\", \"test_ticket2253 (queries.tests.Queries1Tests)\", \"test_ticket2306 (queries.tests.Queries1Tests)\", \"test_ticket2400 (queries.tests.Queries1Tests)\", \"test_ticket2496 (queries.tests.Queries1Tests)\", \"test_ticket3037 (queries.tests.Queries1Tests)\", \"test_ticket3141 (queries.tests.Queries1Tests)\", \"test_ticket4358 (queries.tests.Queries1Tests)\", \"test_ticket4464 (queries.tests.Queries1Tests)\", \"test_ticket4510 (queries.tests.Queries1Tests)\", \"test_ticket6074 (queries.tests.Queries1Tests)\", \"test_ticket6154 (queries.tests.Queries1Tests)\", \"test_ticket6981 (queries.tests.Queries1Tests)\", \"test_ticket7076 (queries.tests.Queries1Tests)\", \"test_ticket7096 (queries.tests.Queries1Tests)\", \"test_ticket7098 (queries.tests.Queries1Tests)\", \"test_ticket7155 (queries.tests.Queries1Tests)\", \"test_ticket7181 (queries.tests.Queries1Tests)\", \"test_ticket7235 (queries.tests.Queries1Tests)\", \"test_ticket7277 (queries.tests.Queries1Tests)\", \"test_ticket7323 (queries.tests.Queries1Tests)\", \"test_ticket7378 (queries.tests.Queries1Tests)\", \"test_ticket7791 (queries.tests.Queries1Tests)\", \"test_ticket7813 (queries.tests.Queries1Tests)\", \"test_ticket8439 (queries.tests.Queries1Tests)\", \"test_ticket9411 (queries.tests.Queries1Tests)\", \"test_ticket9926 (queries.tests.Queries1Tests)\", \"test_ticket9985 (queries.tests.Queries1Tests)\", \"test_ticket9997 (queries.tests.Queries1Tests)\", \"test_ticket_10790_1 (queries.tests.Queries1Tests)\", \"test_ticket_10790_2 (queries.tests.Queries1Tests)\", \"test_ticket_10790_3 (queries.tests.Queries1Tests)\", \"test_ticket_10790_4 (queries.tests.Queries1Tests)\", \"test_ticket_10790_5 (queries.tests.Queries1Tests)\", \"test_ticket_10790_6 (queries.tests.Queries1Tests)\", \"test_ticket_10790_7 (queries.tests.Queries1Tests)\", \"test_ticket_10790_8 (queries.tests.Queries1Tests)\", \"test_ticket_10790_combine (queries.tests.Queries1Tests)\", \"test_ticket_20250 (queries.tests.Queries1Tests)\", \"test_tickets_1878_2939 (queries.tests.Queries1Tests)\", \"test_tickets_2076_7256 (queries.tests.Queries1Tests)\", \"test_tickets_2080_3592 (queries.tests.Queries1Tests)\", \"test_tickets_2874_3002 (queries.tests.Queries1Tests)\", \"test_tickets_4088_4306 (queries.tests.Queries1Tests)\", \"test_tickets_5321_7070 (queries.tests.Queries1Tests)\", \"test_tickets_5324_6704 (queries.tests.Queries1Tests)\", \"test_tickets_6180_6203 (queries.tests.Queries1Tests)\", \"test_tickets_7087_12242 (queries.tests.Queries1Tests)\", \"test_tickets_7204_7506 (queries.tests.Queries1Tests)\", \"test_tickets_7448_7707 (queries.tests.Queries1Tests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.632506",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}