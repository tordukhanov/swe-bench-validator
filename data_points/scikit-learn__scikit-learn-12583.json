{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12583",
  "base_commit": "e8c6cb151cff869cf1b61bddd3c72841318501ab",
  "patch": "diff --git a/sklearn/impute.py b/sklearn/impute.py\n--- a/sklearn/impute.py\n+++ b/sklearn/impute.py\n@@ -141,13 +141,26 @@ class SimpleImputer(BaseEstimator, TransformerMixin):\n         a new copy will always be made, even if `copy=False`:\n \n         - If X is not an array of floating values;\n-        - If X is encoded as a CSR matrix.\n+        - If X is encoded as a CSR matrix;\n+        - If add_indicator=True.\n+\n+    add_indicator : boolean, optional (default=False)\n+        If True, a `MissingIndicator` transform will stack onto output\n+        of the imputer's transform. This allows a predictive estimator\n+        to account for missingness despite imputation. If a feature has no\n+        missing values at fit/train time, the feature won't appear on\n+        the missing indicator even if there are missing values at\n+        transform/test time.\n \n     Attributes\n     ----------\n     statistics_ : array of shape (n_features,)\n         The imputation fill value for each feature.\n \n+    indicator_ : :class:`sklearn.impute.MissingIndicator`\n+        Indicator used to add binary indicators for missing values.\n+        ``None`` if add_indicator is False.\n+\n     See also\n     --------\n     IterativeImputer : Multivariate imputation of missing values.\n@@ -159,8 +172,8 @@ class SimpleImputer(BaseEstimator, TransformerMixin):\n     >>> imp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\n     >>> imp_mean.fit([[7, 2, 3], [4, np.nan, 6], [10, 5, 9]])\n     ... # doctest: +NORMALIZE_WHITESPACE\n-    SimpleImputer(copy=True, fill_value=None, missing_values=nan,\n-           strategy='mean', verbose=0)\n+    SimpleImputer(add_indicator=False, copy=True, fill_value=None,\n+            missing_values=nan, strategy='mean', verbose=0)\n     >>> X = [[np.nan, 2, 3], [4, np.nan, 6], [10, np.nan, 9]]\n     >>> print(imp_mean.transform(X))\n     ... # doctest: +NORMALIZE_WHITESPACE\n@@ -175,12 +188,13 @@ class SimpleImputer(BaseEstimator, TransformerMixin):\n \n     \"\"\"\n     def __init__(self, missing_values=np.nan, strategy=\"mean\",\n-                 fill_value=None, verbose=0, copy=True):\n+                 fill_value=None, verbose=0, copy=True, add_indicator=False):\n         self.missing_values = missing_values\n         self.strategy = strategy\n         self.fill_value = fill_value\n         self.verbose = verbose\n         self.copy = copy\n+        self.add_indicator = add_indicator\n \n     def _validate_input(self, X):\n         allowed_strategies = [\"mean\", \"median\", \"most_frequent\", \"constant\"]\n@@ -272,6 +286,13 @@ def fit(self, X, y=None):\n                                                self.missing_values,\n                                                fill_value)\n \n+        if self.add_indicator:\n+            self.indicator_ = MissingIndicator(\n+                missing_values=self.missing_values)\n+            self.indicator_.fit(X)\n+        else:\n+            self.indicator_ = None\n+\n         return self\n \n     def _sparse_fit(self, X, strategy, missing_values, fill_value):\n@@ -285,7 +306,6 @@ def _sparse_fit(self, X, strategy, missing_values, fill_value):\n             # for constant strategy, self.statistcs_ is used to store\n             # fill_value in each column\n             statistics.fill(fill_value)\n-\n         else:\n             for i in range(X.shape[1]):\n                 column = X.data[X.indptr[i]:X.indptr[i + 1]]\n@@ -382,6 +402,9 @@ def transform(self, X):\n             raise ValueError(\"X has %d features per sample, expected %d\"\n                              % (X.shape[1], self.statistics_.shape[0]))\n \n+        if self.add_indicator:\n+            X_trans_indicator = self.indicator_.transform(X)\n+\n         # Delete the invalid columns if strategy is not constant\n         if self.strategy == \"constant\":\n             valid_statistics = statistics\n@@ -420,6 +443,10 @@ def transform(self, X):\n \n             X[coordinates] = values\n \n+        if self.add_indicator:\n+            hstack = sparse.hstack if sparse.issparse(X) else np.hstack\n+            X = hstack((X, X_trans_indicator))\n+\n         return X\n \n     def _more_tags(self):\n",
  "test_patch": "diff --git a/sklearn/tests/test_impute.py b/sklearn/tests/test_impute.py\n--- a/sklearn/tests/test_impute.py\n+++ b/sklearn/tests/test_impute.py\n@@ -952,15 +952,15 @@ def test_missing_indicator_error(X_fit, X_trans, params, msg_err):\n      ])\n @pytest.mark.parametrize(\n     \"param_features, n_features, features_indices\",\n-    [('missing-only', 2, np.array([0, 1])),\n+    [('missing-only', 3, np.array([0, 1, 2])),\n      ('all', 3, np.array([0, 1, 2]))])\n def test_missing_indicator_new(missing_values, arr_type, dtype, param_features,\n                                n_features, features_indices):\n     X_fit = np.array([[missing_values, missing_values, 1],\n-                      [4, missing_values, 2]])\n+                      [4, 2, missing_values]])\n     X_trans = np.array([[missing_values, missing_values, 1],\n                         [4, 12, 10]])\n-    X_fit_expected = np.array([[1, 1, 0], [0, 1, 0]])\n+    X_fit_expected = np.array([[1, 1, 0], [0, 0, 1]])\n     X_trans_expected = np.array([[1, 1, 0], [0, 0, 0]])\n \n     # convert the input to the right array format and right dtype\n@@ -1144,3 +1144,54 @@ def test_missing_indicator_sparse_no_explicit_zeros():\n     Xt = mi.fit_transform(X)\n \n     assert Xt.getnnz() == Xt.sum()\n+\n+\n+@pytest.mark.parametrize(\"marker\", [np.nan, -1, 0])\n+def test_imputation_add_indicator(marker):\n+    X = np.array([\n+        [marker, 1,      5,       marker, 1],\n+        [2,      marker, 1,       marker, 2],\n+        [6,      3,      marker,  marker, 3],\n+        [1,      2,      9,       marker, 4]\n+    ])\n+    X_true = np.array([\n+        [3., 1., 5., 1., 1., 0., 0., 1.],\n+        [2., 2., 1., 2., 0., 1., 0., 1.],\n+        [6., 3., 5., 3., 0., 0., 1., 1.],\n+        [1., 2., 9., 4., 0., 0., 0., 1.]\n+    ])\n+\n+    imputer = SimpleImputer(missing_values=marker, add_indicator=True)\n+    X_trans = imputer.fit_transform(X)\n+\n+    assert_allclose(X_trans, X_true)\n+    assert_array_equal(imputer.indicator_.features_, np.array([0, 1, 2, 3]))\n+\n+\n+@pytest.mark.parametrize(\n+    \"arr_type\",\n+    [\n+        sparse.csc_matrix, sparse.csr_matrix, sparse.coo_matrix,\n+        sparse.lil_matrix, sparse.bsr_matrix\n+    ]\n+)\n+def test_imputation_add_indicator_sparse_matrix(arr_type):\n+    X_sparse = arr_type([\n+        [np.nan, 1, 5],\n+        [2, np.nan, 1],\n+        [6, 3, np.nan],\n+        [1, 2, 9]\n+    ])\n+    X_true = np.array([\n+        [3., 1., 5., 1., 0., 0.],\n+        [2., 2., 1., 0., 1., 0.],\n+        [6., 3., 5., 0., 0., 1.],\n+        [1., 2., 9., 0., 0., 0.],\n+    ])\n+\n+    imputer = SimpleImputer(missing_values=np.nan, add_indicator=True)\n+    X_trans = imputer.fit_transform(X_sparse)\n+\n+    assert sparse.issparse(X_trans)\n+    assert X_trans.shape == X_true.shape\n+    assert_allclose(X_trans.toarray(), X_true)\n",
  "problem_statement": "add_indicator switch in imputers\nFor whatever imputers we have, but especially [SimpleImputer](http://scikit-learn.org/dev/modules/generated/sklearn.impute.SimpleImputer.html), we should have an `add_indicator` parameter, which simply stacks a [MissingIndicator](http://scikit-learn.org/dev/modules/generated/sklearn.impute.MissingIndicator.html) transform onto the output of the imputer's `transform`.\n",
  "hints_text": "This allows downstream models to adjust for the fact that a value was imputed, rather than observed.\nCan I  take this up if no  one else is working on it yet @jnothman ?\nGo for it\n@prathusha94 are you still working on this?",
  "created_at": "2018-11-14T11:41:05Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/tests/test_impute.py::test_imputation_add_indicator[nan]\", \"sklearn/tests/test_impute.py::test_imputation_add_indicator[-1]\", \"sklearn/tests/test_impute.py::test_imputation_add_indicator[0]\", \"sklearn/tests/test_impute.py::test_imputation_add_indicator_sparse_matrix[csc_matrix]\", \"sklearn/tests/test_impute.py::test_imputation_add_indicator_sparse_matrix[csr_matrix]\", \"sklearn/tests/test_impute.py::test_imputation_add_indicator_sparse_matrix[coo_matrix]\", \"sklearn/tests/test_impute.py::test_imputation_add_indicator_sparse_matrix[lil_matrix]\", \"sklearn/tests/test_impute.py::test_imputation_add_indicator_sparse_matrix[bsr_matrix]\"]",
  "PASS_TO_PASS": "[\"sklearn/tests/test_impute.py::test_imputation_shape\", \"sklearn/tests/test_impute.py::test_imputation_error_invalid_strategy[const]\", \"sklearn/tests/test_impute.py::test_imputation_error_invalid_strategy[101]\", \"sklearn/tests/test_impute.py::test_imputation_error_invalid_strategy[None]\", \"sklearn/tests/test_impute.py::test_imputation_deletion_warning[mean]\", \"sklearn/tests/test_impute.py::test_imputation_deletion_warning[median]\", \"sklearn/tests/test_impute.py::test_imputation_deletion_warning[most_frequent]\", \"sklearn/tests/test_impute.py::test_imputation_error_sparse_0[mean]\", \"sklearn/tests/test_impute.py::test_imputation_error_sparse_0[median]\", \"sklearn/tests/test_impute.py::test_imputation_error_sparse_0[most_frequent]\", \"sklearn/tests/test_impute.py::test_imputation_error_sparse_0[constant]\", \"sklearn/tests/test_impute.py::test_imputation_mean_median\", \"sklearn/tests/test_impute.py::test_imputation_median_special_cases\", \"sklearn/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[None-mean]\", \"sklearn/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[None-median]\", \"sklearn/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[object-mean]\", \"sklearn/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[object-median]\", \"sklearn/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[str-mean]\", \"sklearn/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[str-median]\", \"sklearn/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[str-constant]\", \"sklearn/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[str-most_frequent]\", \"sklearn/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[dtype1-constant]\", \"sklearn/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[dtype1-most_frequent]\", \"sklearn/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[dtype2-constant]\", \"sklearn/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[dtype2-most_frequent]\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent_objects[None]\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent_objects[nan]\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent_objects[NAN]\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent_objects[]\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent_objects[0]\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent_pandas[object]\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent_pandas[category]\", \"sklearn/tests/test_impute.py::test_imputation_constant_error_invalid_type[1-0]\", \"sklearn/tests/test_impute.py::test_imputation_constant_error_invalid_type[1.0-nan]\", \"sklearn/tests/test_impute.py::test_imputation_constant_integer\", \"sklearn/tests/test_impute.py::test_imputation_constant_float[csr_matrix]\", \"sklearn/tests/test_impute.py::test_imputation_constant_float[asarray]\", \"sklearn/tests/test_impute.py::test_imputation_constant_object[None]\", \"sklearn/tests/test_impute.py::test_imputation_constant_object[nan]\", \"sklearn/tests/test_impute.py::test_imputation_constant_object[NAN]\", \"sklearn/tests/test_impute.py::test_imputation_constant_object[]\", \"sklearn/tests/test_impute.py::test_imputation_constant_object[0]\", \"sklearn/tests/test_impute.py::test_imputation_constant_pandas[object]\", \"sklearn/tests/test_impute.py::test_imputation_constant_pandas[category]\", \"sklearn/tests/test_impute.py::test_imputation_pipeline_grid_search\", \"sklearn/tests/test_impute.py::test_imputation_copy\", \"sklearn/tests/test_impute.py::test_iterative_imputer_zero_iters\", \"sklearn/tests/test_impute.py::test_iterative_imputer_verbose\", \"sklearn/tests/test_impute.py::test_iterative_imputer_all_missing\", \"sklearn/tests/test_impute.py::test_iterative_imputer_imputation_order[random]\", \"sklearn/tests/test_impute.py::test_iterative_imputer_imputation_order[roman]\", \"sklearn/tests/test_impute.py::test_iterative_imputer_imputation_order[ascending]\", \"sklearn/tests/test_impute.py::test_iterative_imputer_imputation_order[descending]\", \"sklearn/tests/test_impute.py::test_iterative_imputer_imputation_order[arabic]\", \"sklearn/tests/test_impute.py::test_iterative_imputer_estimators[None]\", \"sklearn/tests/test_impute.py::test_iterative_imputer_estimators[estimator1]\", \"sklearn/tests/test_impute.py::test_iterative_imputer_estimators[estimator2]\", \"sklearn/tests/test_impute.py::test_iterative_imputer_estimators[estimator3]\", \"sklearn/tests/test_impute.py::test_iterative_imputer_estimators[estimator4]\", \"sklearn/tests/test_impute.py::test_iterative_imputer_clip\", \"sklearn/tests/test_impute.py::test_iterative_imputer_clip_truncnorm\", \"sklearn/tests/test_impute.py::test_iterative_imputer_truncated_normal_posterior\", \"sklearn/tests/test_impute.py::test_iterative_imputer_missing_at_transform[mean]\", \"sklearn/tests/test_impute.py::test_iterative_imputer_missing_at_transform[median]\", \"sklearn/tests/test_impute.py::test_iterative_imputer_missing_at_transform[most_frequent]\", \"sklearn/tests/test_impute.py::test_iterative_imputer_transform_stochasticity\", \"sklearn/tests/test_impute.py::test_iterative_imputer_no_missing\", \"sklearn/tests/test_impute.py::test_iterative_imputer_rank_one\", \"sklearn/tests/test_impute.py::test_iterative_imputer_transform_recovery[3]\", \"sklearn/tests/test_impute.py::test_iterative_imputer_transform_recovery[5]\", \"sklearn/tests/test_impute.py::test_iterative_imputer_additive_matrix\", \"sklearn/tests/test_impute.py::test_iterative_imputer_error_param[-1-0.001-ValueError-should\", \"sklearn/tests/test_impute.py::test_iterative_imputer_error_param[1--0.001-ValueError-should\", \"sklearn/tests/test_impute.py::test_iterative_imputer_early_stopping\", \"sklearn/tests/test_impute.py::test_missing_indicator_error[X_fit0-X_trans0-params0-have\", \"sklearn/tests/test_impute.py::test_missing_indicator_error[X_fit1-X_trans1-params1-'features'\", \"sklearn/tests/test_impute.py::test_missing_indicator_error[X_fit2-X_trans2-params2-'sparse'\", \"sklearn/tests/test_impute.py::test_missing_indicator_error[X_fit3-X_trans3-params3-MissingIndicator\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0-nan-float64-array]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0-0-int32-array]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0--1-int32-array]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0-nan-float64-csc_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0--1-int32-csc_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0-nan-float64-csr_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0--1-int32-csr_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0-nan-float64-coo_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0--1-int32-coo_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0-nan-float64-lil_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0--1-int32-lil_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0-nan-float64-bsr_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0--1-int32-bsr_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-nan-float64-array]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-0-int32-array]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1--1-int32-array]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-nan-float64-csc_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1--1-int32-csc_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-nan-float64-csr_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1--1-int32-csr_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-nan-float64-coo_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1--1-int32-coo_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-nan-float64-lil_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1--1-int32-lil_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-nan-float64-bsr_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1--1-int32-bsr_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_raise_on_sparse_with_missing_0[csc_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_raise_on_sparse_with_missing_0[csr_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_raise_on_sparse_with_missing_0[coo_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_raise_on_sparse_with_missing_0[lil_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_raise_on_sparse_with_missing_0[bsr_matrix]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[nan-array-True]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[nan-array-False]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[nan-array-auto]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[0-array-True]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[0-array-False]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[0-array-auto]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[nan-csc_matrix-True]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[nan-csc_matrix-False]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[nan-csc_matrix-auto]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[nan-csr_matrix-True]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[nan-csr_matrix-False]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[nan-csr_matrix-auto]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[nan-coo_matrix-True]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[nan-coo_matrix-False]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[nan-coo_matrix-auto]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[nan-lil_matrix-True]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[nan-lil_matrix-False]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[nan-lil_matrix-auto]\", \"sklearn/tests/test_impute.py::test_missing_indicator_string\", \"sklearn/tests/test_impute.py::test_missing_indicator_with_imputer[X0-a-X_trans_exp0]\", \"sklearn/tests/test_impute.py::test_missing_indicator_with_imputer[X1-nan-X_trans_exp1]\", \"sklearn/tests/test_impute.py::test_missing_indicator_with_imputer[X2-nan-X_trans_exp2]\", \"sklearn/tests/test_impute.py::test_missing_indicator_with_imputer[X3-None-X_trans_exp3]\", \"sklearn/tests/test_impute.py::test_inconsistent_dtype_X_missing_values[NaN-nan-Input\", \"sklearn/tests/test_impute.py::test_inconsistent_dtype_X_missing_values[-1--1-types\", \"sklearn/tests/test_impute.py::test_missing_indicator_no_missing\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_no_explicit_zeros\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.965184",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}