{
  "repo": "django/django",
  "instance_id": "django__django-14444",
  "base_commit": "d3d95d645fc9f36355d27598475612de43587db1",
  "patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -420,7 +420,10 @@ def _alter_many_to_many(self, model, old_field, new_field, strict):\n \n     def add_constraint(self, model, constraint):\n         if isinstance(constraint, UniqueConstraint) and (\n-            constraint.condition or constraint.contains_expressions\n+            constraint.condition or\n+            constraint.contains_expressions or\n+            constraint.include or\n+            constraint.deferrable\n         ):\n             super().add_constraint(model, constraint)\n         else:\n@@ -428,7 +431,10 @@ def add_constraint(self, model, constraint):\n \n     def remove_constraint(self, model, constraint):\n         if isinstance(constraint, UniqueConstraint) and (\n-            constraint.condition or constraint.contains_expressions\n+            constraint.condition or\n+            constraint.contains_expressions or\n+            constraint.include or\n+            constraint.deferrable\n         ):\n             super().remove_constraint(model, constraint)\n         else:\n",
  "test_patch": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -8,6 +8,7 @@\n from django.db.models.functions import Abs\n from django.db.transaction import atomic\n from django.test import SimpleTestCase, override_settings, skipUnlessDBFeature\n+from django.test.utils import CaptureQueriesContext\n \n from .models import FoodManager, FoodQuerySet, UnicodeModel\n from .test_base import OperationTestBase\n@@ -2395,7 +2396,7 @@ def test_add_deferred_unique_constraint(self):\n         self.assertEqual(len(new_state.models[app_label, 'pony'].options['constraints']), 1)\n         Pony = new_state.apps.get_model(app_label, 'Pony')\n         self.assertEqual(len(Pony._meta.constraints), 1)\n-        with connection.schema_editor() as editor:\n+        with connection.schema_editor() as editor, CaptureQueriesContext(connection) as ctx:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         Pony.objects.create(pink=1, weight=4.0)\n         if connection.features.supports_deferrable_unique_constraints:\n@@ -2413,6 +2414,7 @@ def test_add_deferred_unique_constraint(self):\n                     obj.pink = 3\n                     obj.save()\n         else:\n+            self.assertEqual(len(ctx), 0)\n             Pony.objects.create(pink=1, weight=4.0)\n         # Reversal.\n         with connection.schema_editor() as editor:\n@@ -2447,11 +2449,13 @@ def test_remove_deferred_unique_constraint(self):\n         self.assertEqual(len(new_state.models[app_label, 'pony'].options['constraints']), 0)\n         Pony = new_state.apps.get_model(app_label, 'Pony')\n         self.assertEqual(len(Pony._meta.constraints), 0)\n-        with connection.schema_editor() as editor:\n+        with connection.schema_editor() as editor, CaptureQueriesContext(connection) as ctx:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         # Constraint doesn't work.\n         Pony.objects.create(pink=1, weight=4.0)\n         Pony.objects.create(pink=1, weight=4.0).delete()\n+        if not connection.features.supports_deferrable_unique_constraints:\n+            self.assertEqual(len(ctx), 0)\n         # Reversal.\n         with connection.schema_editor() as editor:\n             operation.database_backwards(app_label, editor, new_state, project_state)\n@@ -2499,13 +2503,14 @@ def test_add_covering_unique_constraint(self):\n         self.assertEqual(len(new_state.models[app_label, 'pony'].options['constraints']), 1)\n         Pony = new_state.apps.get_model(app_label, 'Pony')\n         self.assertEqual(len(Pony._meta.constraints), 1)\n-        with connection.schema_editor() as editor:\n+        with connection.schema_editor() as editor, CaptureQueriesContext(connection) as ctx:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         Pony.objects.create(pink=1, weight=4.0)\n         if connection.features.supports_covering_indexes:\n             with self.assertRaises(IntegrityError):\n                 Pony.objects.create(pink=1, weight=4.0)\n         else:\n+            self.assertEqual(len(ctx), 0)\n             Pony.objects.create(pink=1, weight=4.0)\n         # Reversal.\n         with connection.schema_editor() as editor:\n@@ -2540,11 +2545,13 @@ def test_remove_covering_unique_constraint(self):\n         self.assertEqual(len(new_state.models[app_label, 'pony'].options['constraints']), 0)\n         Pony = new_state.apps.get_model(app_label, 'Pony')\n         self.assertEqual(len(Pony._meta.constraints), 0)\n-        with connection.schema_editor() as editor:\n+        with connection.schema_editor() as editor, CaptureQueriesContext(connection) as ctx:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         # Constraint doesn't work.\n         Pony.objects.create(pink=1, weight=4.0)\n         Pony.objects.create(pink=1, weight=4.0).delete()\n+        if not connection.features.supports_covering_indexes:\n+            self.assertEqual(len(ctx), 0)\n         # Reversal.\n         with connection.schema_editor() as editor:\n             operation.database_backwards(app_label, editor, new_state, project_state)\n",
  "problem_statement": "Make covering and deferrable UniqueConstraint on SQLite a noop.\nDescription\n\t\nCreating a constraint like UniqueConstraint(fields=['name'], name='name_unq_covering', include=['weight']) on SQLite will issue the warning models.W039 stating that a constraint won't be created even though it is.\n",
  "hints_text": "",
  "created_at": "2021-05-24T20:08:45Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_add_covering_unique_constraint (migrations.test_operations.OperationTests)\", \"test_add_deferred_unique_constraint (migrations.test_operations.OperationTests)\", \"test_remove_covering_unique_constraint (migrations.test_operations.OperationTests)\", \"test_remove_deferred_unique_constraint (migrations.test_operations.OperationTests)\"]",
  "PASS_TO_PASS": "[\"test_references_model_mixin (migrations.test_operations.TestCreateModel)\", \"test_references_field_by_from_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_name (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_remote_field_model (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_through (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_to_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_model (migrations.test_operations.FieldOperationTests)\", \"Tests the AddField operation.\", \"The CreateTable operation ignores swapped models.\", \"Tests the DeleteModel operation ignores swapped models.\", \"Add/RemoveIndex operations ignore swapped models.\", \"Tests the AddField operation on TextField/BinaryField.\", \"Tests the AddField operation on TextField.\", \"test_add_constraint (migrations.test_operations.OperationTests)\", \"test_add_constraint_combinable (migrations.test_operations.OperationTests)\", \"test_add_constraint_percent_escaping (migrations.test_operations.OperationTests)\", \"Tests the AddField operation with a ManyToManyField.\", \"Tests the AddField operation's state alteration\", \"test_add_func_index (migrations.test_operations.OperationTests)\", \"test_add_func_unique_constraint (migrations.test_operations.OperationTests)\", \"Test the AddIndex operation.\", \"test_add_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_add_or_constraint (migrations.test_operations.OperationTests)\", \"test_add_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"Tests the AlterField operation.\", \"AlterField operation is a noop when adding only a db_column and the\", \"test_alter_field_m2m (migrations.test_operations.OperationTests)\", \"Tests the AlterField operation on primary keys (for things like PostgreSQL's SERIAL weirdness)\", \"Tests the AlterField operation on primary keys changes any FKs pointing to it.\", \"If AlterField doesn't reload state appropriately, the second AlterField\", \"test_alter_field_reloads_state_on_fk_with_to_field_related_name_target_type_change (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_with_to_field_target_type_change (migrations.test_operations.OperationTests)\", \"Test AlterField operation with an index to ensure indexes created via\", \"Creating and then altering an FK works correctly\", \"Altering an FK to a non-FK works (#23244)\", \"Tests the AlterIndexTogether operation.\", \"test_alter_index_together_remove (migrations.test_operations.OperationTests)\", \"test_alter_index_together_remove_with_unique_together (migrations.test_operations.OperationTests)\", \"The managers on a model are set.\", \"Tests the AlterModelOptions operation.\", \"The AlterModelOptions operation removes keys from the dict (#23121)\", \"Tests the AlterModelTable operation.\", \"AlterModelTable should rename auto-generated M2M tables.\", \"Tests the AlterModelTable operation if the table name is set to None.\", \"Tests the AlterModelTable operation if the table name is not changed.\", \"Tests the AlterOrderWithRespectTo operation.\", \"Tests the AlterUniqueTogether operation.\", \"test_alter_unique_together_remove (migrations.test_operations.OperationTests)\", \"A field may be migrated from AutoField to BigAutoField.\", \"Column names that are SQL keywords shouldn't cause problems when used\", \"Tests the CreateModel operation.\", \"Tests the CreateModel operation on a multi-table inheritance setup.\", \"Test the creation of a model with a ManyToMany field and the\", \"test_create_model_with_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_deferred_unique_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_base (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_field_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_manager_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"Tests the CreateModel operation directly followed by an\", \"CreateModel ignores proxy models.\", \"CreateModel ignores unmanaged models.\", \"Tests the DeleteModel operation.\", \"test_delete_mti_model (migrations.test_operations.OperationTests)\", \"Tests the DeleteModel operation ignores proxy models.\", \"A model with BigAutoField can be created.\", \"test_remove_constraint (migrations.test_operations.OperationTests)\", \"Tests the RemoveField operation.\", \"test_remove_field_m2m (migrations.test_operations.OperationTests)\", \"test_remove_field_m2m_with_through (migrations.test_operations.OperationTests)\", \"Tests the RemoveField operation on a foreign key.\", \"test_remove_func_index (migrations.test_operations.OperationTests)\", \"test_remove_func_unique_constraint (migrations.test_operations.OperationTests)\", \"Test the RemoveIndex operation.\", \"test_remove_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_remove_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"Tests the RenameField operation.\", \"test_rename_field_case (migrations.test_operations.OperationTests)\", \"If RenameField doesn't reload state appropriately, the AlterField\", \"test_rename_field_with_db_column (migrations.test_operations.OperationTests)\", \"RenameModel renames a many-to-many column after a RenameField.\", \"test_rename_m2m_target_model (migrations.test_operations.OperationTests)\", \"test_rename_m2m_through_model (migrations.test_operations.OperationTests)\", \"test_rename_missing_field (migrations.test_operations.OperationTests)\", \"Tests the RenameModel operation.\", \"RenameModel operations shouldn't trigger the caching of rendered apps\", \"test_rename_model_with_m2m (migrations.test_operations.OperationTests)\", \"Tests the RenameModel operation on model with self referential FK.\", \"test_rename_model_with_self_referential_m2m (migrations.test_operations.OperationTests)\", \"Tests the RenameModel operation on a model which has a superclass that\", \"test_rename_referenced_field_state_forward (migrations.test_operations.OperationTests)\", \"test_repoint_field_m2m (migrations.test_operations.OperationTests)\", \"Tests the RunPython operation\", \"Tests the RunPython operation correctly handles the \\\"atomic\\\" keyword\", \"#24098 - Tests no-op RunPython operations.\", \"#24282 - Model changes to a FK reverse side update the model\", \"Tests the RunSQL operation.\", \"test_run_sql_add_missing_semicolon_on_collect_sql (migrations.test_operations.OperationTests)\", \"#24098 - Tests no-op RunSQL operations.\", \"#23426 - RunSQL should accept parameters.\", \"#23426 - RunSQL should fail when a list of statements with an incorrect\", \"Tests the SeparateDatabaseAndState operation.\", \"A complex SeparateDatabaseAndState operation: Multiple operations both\", \"A field may be migrated from SmallAutoField to AutoField.\", \"A field may be migrated from SmallAutoField to BigAutoField.\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.692708",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}