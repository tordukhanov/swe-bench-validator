{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25565",
  "base_commit": "7ab47b41b6046c9b237fe96a4c6cfd454e2380c7",
  "patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -1063,7 +1063,7 @@ def get_facecolor(self):\n         if not hasattr(self, '_facecolors2d'):\n             self.axes.M = self.axes.get_proj()\n             self.do_3d_projection()\n-        return self._facecolors2d\n+        return np.asarray(self._facecolors2d)\n \n     def get_edgecolor(self):\n         # docstring inherited\n@@ -1071,7 +1071,7 @@ def get_edgecolor(self):\n         if not hasattr(self, '_edgecolors2d'):\n             self.axes.M = self.axes.get_proj()\n             self.do_3d_projection()\n-        return self._edgecolors2d\n+        return np.asarray(self._edgecolors2d)\n \n \n def poly_collection_2d_to_3d(col, zs=0, zdir='z'):\n",
  "test_patch": "diff --git a/lib/mpl_toolkits/mplot3d/tests/test_legend3d.py b/lib/mpl_toolkits/mplot3d/tests/test_legend3d.py\n--- a/lib/mpl_toolkits/mplot3d/tests/test_legend3d.py\n+++ b/lib/mpl_toolkits/mplot3d/tests/test_legend3d.py\n@@ -106,3 +106,16 @@ def test_contourf_legend_elements():\n     assert all(isinstance(a, Rectangle) for a in artists)\n     assert all(same_color(a.get_facecolor(), c)\n                for a, c in zip(artists, expected_colors))\n+\n+\n+def test_legend_Poly3dCollection():\n+\n+    verts = np.asarray([[0, 0, 0], [0, 1, 1], [1, 0, 1]])\n+    mesh = art3d.Poly3DCollection([verts], label=\"surface\")\n+\n+    fig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n+    mesh.set_edgecolor('k')\n+    handle = ax.add_collection3d(mesh)\n+    leg = ax.legend()\n+    assert (leg.legend_handles[0].get_facecolor()\n+            == handle.get_facecolor()).all()\n",
  "problem_statement": "[Bug]: legend for Poly3dCollection fails\n### Bug summary\r\n\r\nWhen plotting an iso surface using Poly3dCollection, \r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\r\n\r\nfrom skimage import measure\r\nfrom skimage.draw import ellipsoid\r\n\r\n\r\n# Generate a level set about zero of two identical ellipsoids in 3D\r\nellip_base = ellipsoid(6, 10, 16, levelset=True)\r\nellip_double = np.concatenate((ellip_base[:-1, ...],\r\n                               ellip_base[2:, ...]), axis=0)\r\n\r\n# Use marching cubes to obtain the surface mesh of these ellipsoids\r\nverts, faces, normals, values = measure.marching_cubes(ellip_double, 0)\r\n\r\n# Display resulting triangular mesh using Matplotlib. This can also be done\r\n# with mayavi (see skimage.measure.marching_cubes docstring).\r\nplt.close(1)\r\nfig = plt.figure(num=1, figsize=(10, 10))\r\nax = fig.add_subplot(111, projection='3d')\r\n\r\n# Fancy indexing: `verts[faces]` to generate a collection of triangles\r\nmesh = Poly3DCollection(verts[faces], label='Suraface')\r\nmesh.set_edgecolor('k')\r\nax.add_collection3d(mesh)\r\n\r\nax.set_xlim(0, 24)  # a = 6 (times two for 2nd ellipsoid)\r\nax.set_ylim(0, 20)  # b = 10\r\nax.set_zlim(0, 32)  # c = 16\r\n\r\nax.legend()\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```---------------------------------------------------------------------------                                                             \r\nAttributeError                            Traceback (most recent call last)                                                                                                                                                                                                      \r\nFile ~/Data/2023_Aus22DeLaat/vtu_file/minimal.py:32                                                                                     \r\n     29 ax.set_ylim(0, 20)  # b = 10                                                                                                    \r\n     30 ax.set_zlim(0, 32)  # c = 16                                \r\n---> 32 ax.legend()                                                                                                                                                                                                                                                              \r\n     33 plt.show()                                                  \r\n                                                                                                                                        \r\nFile /opt/homebrew/lib/python3.11/site-packages/matplotlib/axes/_axes.py:307, in Axes.legend(self, *args, **kwargs)                     \r\n    305 if len(extra_args):                                         \r\n    306     raise TypeError('legend only accepts two non-keyword arguments')                                                                                                                                                                  \r\n--> 307 self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)                                                                                                                                                                        \r\n    308 self.legend_._remove_method = self._remove_legend                                                              \r\n    309 return self.legend_                                                                                            \r\n                                                           \r\nFile /opt/homebrew/lib/python3.11/site-packages/matplotlib/_api/deprecation.py:454, in make_keyword_only.<locals>.wrapper(*args, **kwargs)\r\n    448 if len(args) > name_idx:                                                                                       \r\n    449     warn_deprecated(                               \r\n    450         since, message=\"Passing the %(name)s %(obj_type)s \"                                                    \r\n    451         \"positionally is deprecated since Matplotlib %(since)s; the \"                                                                                                                                                                 \r\n    452         \"parameter will become keyword-only %(removal)s.\",                                                     \r\n    453         name=name, obj_type=f\"parameter of {func.__name__}()\")                                                                                                                                                                        \r\n--> 454 return func(*args, **kwargs)                                                                                   \r\n                                                                                                                                                                                                                                              \r\nFile /opt/homebrew/lib/python3.11/site-packages/matplotlib/legend.py:517, in Legend.__init__(self, parent, handles, labels, loc, numpoints, markerscale, markerfirst, scatterpoints, scatteryoffsets, prop, fontsize, labelcolor, borderpad, labelspacing, handlelength, handleheight, handletextpad, borderaxespad, columnspacing, ncols, mode, fancybox, shadow, title, title_fontsize, framealpha, edgecolor, facecolor, bbox_to_anchor, bbox_transform, frameon, handler_map, title_fontp\r\nroperties, alignment, ncol)                                                                                            \r\n    514 self._alignment = alignment                                                                                    \r\n    516 # init with null renderer                                                                                      \r\n--> 517 self._init_legend_box(handles, labels, markerfirst)                                                                                                                                                                                   \r\n    519 tmp = self._loc_used_default                                                                                   \r\n    520 self._set_loc(loc)                                                                                                                                                                                                                    \r\n                                                           \r\nFile /opt/homebrew/lib/python3.11/site-packages/matplotlib/legend.py:782, in Legend._init_legend_box(self, handles, labels, markerfirst)                                                                                                      \r\n    779         text_list.append(textbox._text)                                                                        \r\n    780         # Create the artist for the legend which represents the                                                                                                                                                                       \r\n    781         # original artist/handle.                                                                              \r\n--> 782         handle_list.append(handler.legend_artist(self, orig_handle,                                                                                                                                                                   \r\n    783                                                  fontsize, handlebox))                                                                                                                                                                \r\n    784         handles_and_labels.append((handlebox, textbox))                                                        \r\n    786 columnbox = []                                                                                                 \r\n\r\nFile /opt/homebrew/lib/python3.11/site-packages/matplotlib/legend_handler.py:119, in HandlerBase.legend_artist(self, legend, orig_handle, fontsize, handlebox)\r\n     95 \"\"\"                                                                                                            \r\n     96 Return the artist that this HandlerBase generates for the given                                                                                                                                                                       \r\n     97 original artist/handle.                                                                                        \r\n   (...)                                                                                                               \r\n    112                                                                                                                \r\n    113 \"\"\"                                                                                                            \r\n    114 xdescent, ydescent, width, height = self.adjust_drawing_area(                                                                                                                                                                         \r\n    115          legend, orig_handle,                                                                                  \r\n    116          handlebox.xdescent, handlebox.ydescent,                                                               \r\n    117          handlebox.width, handlebox.height,                                                                    \r\n    118          fontsize)                                                                                             \r\n--> 119 artists = self.create_artists(legend, orig_handle,                                                             \r\n    120                               xdescent, ydescent, width, height,                                                                                                                                                                      \r\n    121                               fontsize, handlebox.get_transform())                                                                                                                                                                    \r\n    123 if isinstance(artists, _Line2DHandleList):                                                                     \r\n    124     artists = [artists[0]]                                                                                     \r\n\r\nFile /opt/homebrew/lib/python3.11/site-packages/matplotlib/legend_handler.py:808, in HandlerPolyCollection.create_artists(self, legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)\r\n    804 def create_artists(self, legend, orig_handle,                                                                  \r\n    805                    xdescent, ydescent, width, height, fontsize, trans):                                                                                                                                                               \r\n    806     p = Rectangle(xy=(-xdescent, -ydescent),                                                                   \r\n    807                   width=width, height=height)                                                                  \r\n--> 808     self.update_prop(p, orig_handle, legend)                                                                   \r\n    809     p.set_transform(trans)                                                                                     \r\n    810     return [p]                                                                                                 \r\n\r\nFile /opt/homebrew/lib/python3.11/site-packages/matplotlib/legend_handler.py:78, in HandlerBase.update_prop(self, legend_handle, orig_handle, legend)\r\n     76 def update_prop(self, legend_handle, orig_handle, legend):                                                     \r\n---> 78     self._update_prop(legend_handle, orig_handle)                                                              \r\n     80     legend._set_artist_props(legend_handle)                                                                    \r\n     81     legend_handle.set_clip_box(None)                                                                           \r\n\r\nFile /opt/homebrew/lib/python3.11/site-packages/matplotlib/legend_handler.py:789, in HandlerPolyCollection._update_prop(self, legend_handle, orig_handle)\r\n    785         return None                                                                                            \r\n    787 # orig_handle is a PolyCollection and legend_handle is a Patch.                                                                                                                                                                       \r\n    788 # Directly set Patch color attributes (must be RGBA tuples).                                                                                                                                                                          \r\n--> 789 legend_handle._facecolor = first_color(orig_handle.get_facecolor())                                                                                                                                                                   \r\n    790 legend_handle._edgecolor = first_color(orig_handle.get_edgecolor())                                                                                                                                                                   \r\n    791 legend_handle._original_facecolor = orig_handle._original_facecolor                                                                                                                                                                   \r\n\r\nFile /opt/homebrew/lib/python3.11/site-packages/matplotlib/legend_handler.py:777, in HandlerPolyCollection._update_prop.<locals>.first_color(colors)\r\n    774 def first_color(colors):                                                                                       \r\n--> 775     if colors.size == 0:                                                                                       \r\n    776         return (0, 0, 0, 0)                                                                                    \r\n    779     return tuple(colors[0])                                                                                    \r\n\r\nAttributeError: 'tuple' object has no attribute 'size' \r\n```                                                          \r\n\r\n\r\n### Expected outcome\r\n\r\nSupposed to insert a legend. \r\n![Screenshot 2023-03-27 at 11 44 03 am](https://user-images.githubusercontent.com/6863057/227815841-ac34b14e-2301-4257-9944-67129037cc78.png)\r\n\r\n\r\n### Additional information\r\n\r\n`def first_color` on https://github.com/matplotlib/matplotlib/blob/676773859604eddb3bf7ac782a6af0cf978162b6/lib/matplotlib/legend_handler.py#L779  assumes `colors` is a `numpy.ndarray`, having the attribute `size`. Consequently, a tuple will be generated if the `colors`'s size is not zero. In this case with `Poly3dCollection`, `colors` is already a `tuple` and checking for `.size` will result in an error. \r\n\r\nA quick fix would be to have `np.array(colors)` to make sure that colors has `.size`.\r\n\r\n\r\n\r\n### Operating system\r\n\r\nMacOS\r\n\r\n### Matplotlib Version\r\n\r\n3.6.2\r\n\r\n### Matplotlib Backend\r\n\r\nMacOSX\r\n\r\n### Python version\r\n\r\n3.11.2\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n",
  "hints_text": "This is a confirmed bug on the main. I tried a smaller example to reproduce the same\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\r\n\r\nrng = np.random.default_rng(0)\r\nverts = rng.random(size=(10, 3))\r\nmesh = Poly3DCollection([verts], label=\"surface\")\r\n\r\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\r\nmesh.set_edgecolor('k')\r\nax.add_collection3d(mesh)\r\nax.legend()\r\nplt.show()\r\n```\n@sghelichkhani would you want to raise a PR for the issue? Your solution seems to be working for me!",
  "created_at": "2023-03-28T04:16:07Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/mpl_toolkits/mplot3d/tests/test_legend3d.py::test_legend_Poly3dCollection\"]",
  "PASS_TO_PASS": "[\"lib/mpl_toolkits/mplot3d/tests/test_legend3d.py::test_legend_plot[png]\", \"lib/mpl_toolkits/mplot3d/tests/test_legend3d.py::test_legend_bar[png]\", \"lib/mpl_toolkits/mplot3d/tests/test_legend3d.py::test_fancy[png]\", \"lib/mpl_toolkits/mplot3d/tests/test_legend3d.py::test_linecollection_scaled_dashes\", \"lib/mpl_toolkits/mplot3d/tests/test_legend3d.py::test_handlerline3d\", \"lib/mpl_toolkits/mplot3d/tests/test_legend3d.py::test_contour_legend_elements\", \"lib/mpl_toolkits/mplot3d/tests/test_legend3d.py::test_contourf_legend_elements\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.822799",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}