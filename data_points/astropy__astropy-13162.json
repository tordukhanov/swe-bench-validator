{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-13162",
  "base_commit": "78c4ac119a182eee14cb3761e0dc9ea0e59b291f",
  "patch": "diff --git a/astropy/coordinates/angle_formats.py b/astropy/coordinates/angle_formats.py\n--- a/astropy/coordinates/angle_formats.py\n+++ b/astropy/coordinates/angle_formats.py\n@@ -27,6 +27,7 @@\n                      IllegalMinuteWarning, IllegalMinuteError,\n                      IllegalSecondWarning, IllegalSecondError)\n from astropy.utils import format_exception, parsing\n+from astropy.utils.decorators import deprecated\n from astropy import units as u\n \n \n@@ -409,11 +410,14 @@ def degrees_to_dms(d):\n     return np.floor(sign * d), sign * np.floor(m), sign * s\n \n \n+@deprecated(\"dms_to_degrees (or creating an Angle with a tuple) has ambiguous \"\n+            \"behavior when the degree value is 0\",\n+            alternative=\"another way of creating angles instead (e.g. a less \"\n+                         \"ambiguous string like '-0d1m2.3s'\")\n def dms_to_degrees(d, m, s=None):\n     \"\"\"\n     Convert degrees, arcminute, arcsecond to a float degrees value.\n     \"\"\"\n-\n     _check_minute_range(m)\n     _check_second_range(s)\n \n@@ -436,6 +440,10 @@ def dms_to_degrees(d, m, s=None):\n     return sign * (d + m / 60. + s / 3600.)\n \n \n+@deprecated(\"hms_to_hours (or creating an Angle with a tuple) has ambiguous \"\n+            \"behavior when the hour value is 0\",\n+            alternative=\"another way of creating angles instead (e.g. a less \"\n+                         \"ambiguous string like '-0h1m2.3s'\")\n def hms_to_hours(h, m, s=None):\n     \"\"\"\n     Convert hour, minute, second to a float hour value.\ndiff --git a/astropy/coordinates/angles.py b/astropy/coordinates/angles.py\n--- a/astropy/coordinates/angles.py\n+++ b/astropy/coordinates/angles.py\n@@ -69,10 +69,6 @@ class Angle(u.SpecificTypeQuantity):\n       <Angle 1.04166667 hourangle>\n       >>> Angle('-1:2.5', unit=u.deg)\n       <Angle -1.04166667 deg>\n-      >>> Angle((10, 11, 12), unit='hourangle')  # (h, m, s)\n-      <Angle 10.18666667 hourangle>\n-      >>> Angle((-1, 2, 3), unit=u.deg)  # (d, m, s)\n-      <Angle -1.03416667 deg>\n       >>> Angle(10.2345 * u.deg)\n       <Angle 10.2345 deg>\n       >>> Angle(Angle(10.2345 * u.deg))\n@@ -124,7 +120,15 @@ def __new__(cls, angle, unit=None, dtype=None, copy=True, **kwargs):\n                     angle_unit = unit\n \n                 if isinstance(angle, tuple):\n-                    angle = cls._tuple_to_float(angle, angle_unit)\n+                    if angle_unit == u.hourangle:\n+                        form._check_hour_range(angle[0])\n+                    form._check_minute_range(angle[1])\n+                    a = np.abs(angle[0]) + angle[1] / 60.\n+                    if len(angle) == 3:\n+                        form._check_second_range(angle[2])\n+                        a += angle[2] / 3600.\n+\n+                    angle = np.copysign(a, angle[0])\n \n                 if angle_unit is not unit:\n                     # Possible conversion to `unit` will be done below.\n",
  "test_patch": "diff --git a/astropy/coordinates/tests/test_angles.py b/astropy/coordinates/tests/test_angles.py\n--- a/astropy/coordinates/tests/test_angles.py\n+++ b/astropy/coordinates/tests/test_angles.py\n@@ -36,19 +36,18 @@ def test_create_angles():\n     a4 = Angle(\"54.12412 deg\")\n     a5 = Angle(\"54.12412 degrees\")\n     a6 = Angle(\"54.12412°\")  # because we like Unicode\n-    a7 = Angle((54, 7, 26.832), unit=u.degree)\n     a8 = Angle(\"54°07'26.832\\\"\")\n-    # (deg,min,sec) *tuples* are acceptable, but lists/arrays are *not*\n-    # because of the need to eventually support arrays of coordinates\n     a9 = Angle([54, 7, 26.832], unit=u.degree)\n     assert_allclose(a9.value, [54, 7, 26.832])\n     assert a9.unit is u.degree\n \n     a10 = Angle(3.60827466667, unit=u.hour)\n     a11 = Angle(\"3:36:29.7888000120\", unit=u.hour)\n-    a12 = Angle((3, 36, 29.7888000120), unit=u.hour)  # *must* be a tuple\n-    # Regression test for #5001\n-    a13 = Angle((3, 36, 29.7888000120), unit='hour')\n+    with pytest.warns(AstropyDeprecationWarning, match='hms_to_hour'):\n+        a12 = Angle((3, 36, 29.7888000120), unit=u.hour)  # *must* be a tuple\n+    with pytest.warns(AstropyDeprecationWarning, match='hms_to_hour'):\n+        # Regression test for #5001\n+        a13 = Angle((3, 36, 29.7888000120), unit='hour')\n \n     Angle(0.944644098745, unit=u.radian)\n \n@@ -82,13 +81,12 @@ def test_create_angles():\n     a24 = Angle(\"+ 3h\", unit=u.hour)\n \n     # ensure the above angles that should match do\n-    assert a1 == a2 == a3 == a4 == a5 == a6 == a7 == a8 == a18 == a19 == a20\n+    assert a1 == a2 == a3 == a4 == a5 == a6 == a8 == a18 == a19 == a20\n     assert_allclose(a1.radian, a2.radian)\n     assert_allclose(a2.degree, a3.degree)\n     assert_allclose(a3.radian, a4.radian)\n     assert_allclose(a4.radian, a5.radian)\n     assert_allclose(a5.radian, a6.radian)\n-    assert_allclose(a6.radian, a7.radian)\n \n     assert_allclose(a10.degree, a11.degree)\n     assert a11 == a12 == a13 == a14\n@@ -432,16 +430,14 @@ def test_radec():\n     ra = Longitude(\"12h43m23s\")\n     assert_allclose(ra.hour, 12.7230555556)\n \n-    ra = Longitude((56, 14, 52.52), unit=u.degree)      # can accept tuples\n     # TODO: again, fix based on >24 behavior\n     # ra = Longitude((56,14,52.52))\n     with pytest.raises(u.UnitsError):\n         ra = Longitude((56, 14, 52.52))\n     with pytest.raises(u.UnitsError):\n         ra = Longitude((12, 14, 52))  # ambiguous w/o units\n-    ra = Longitude((12, 14, 52), unit=u.hour)\n-\n-    ra = Longitude([56, 64, 52.2], unit=u.degree)  # ...but not arrays (yet)\n+    with pytest.warns(AstropyDeprecationWarning, match='hms_to_hours'):\n+        ra = Longitude((12, 14, 52), unit=u.hour)\n \n     # Units can be specified\n     ra = Longitude(\"4:08:15.162342\", unit=u.hour)\n@@ -901,12 +897,12 @@ def test_empty_sep():\n \n def test_create_tuple():\n     \"\"\"\n-    Tests creation of an angle with a (d,m,s) or (h,m,s) tuple\n-    \"\"\"\n-    a1 = Angle((1, 30, 0), unit=u.degree)\n-    assert a1.value == 1.5\n+    Tests creation of an angle with an (h,m,s) tuple\n \n-    a1 = Angle((1, 30, 0), unit=u.hourangle)\n+    (d, m, s) tuples are not tested because of sign ambiguity issues (#13162)\n+    \"\"\"\n+    with pytest.warns(AstropyDeprecationWarning, match='hms_to_hours'):\n+        a1 = Angle((1, 30, 0), unit=u.hourangle)\n     assert a1.value == 1.5\n \n \ndiff --git a/astropy/coordinates/tests/test_arrays.py b/astropy/coordinates/tests/test_arrays.py\n--- a/astropy/coordinates/tests/test_arrays.py\n+++ b/astropy/coordinates/tests/test_arrays.py\n@@ -10,6 +10,7 @@\n from astropy.time import Time\n from astropy.tests.helper import assert_quantity_allclose as assert_allclose\n from astropy.utils.compat import NUMPY_LT_1_19\n+from astropy.utils.exceptions import AstropyDeprecationWarning\n \n from astropy.coordinates import (Angle, ICRS, FK4, FK5, Galactic, SkyCoord,\n                                  CartesianRepresentation)\n@@ -71,14 +72,6 @@ def test_dms():\n     npt.assert_almost_equal(m, [0, 30, -30])\n     npt.assert_almost_equal(s, [0, 0, -0])\n \n-    dms = a1.dms\n-    degrees = dms_to_degrees(*dms)\n-    npt.assert_almost_equal(a1.degree, degrees)\n-\n-    a2 = Angle(dms, unit=u.degree)\n-\n-    npt.assert_almost_equal(a2.radian, a1.radian)\n-\n \n def test_hms():\n     a1 = Angle([0, 11.5, -11.5], unit=u.hour)\n@@ -88,10 +81,11 @@ def test_hms():\n     npt.assert_almost_equal(s, [0, 0, -0])\n \n     hms = a1.hms\n-    hours = hms_to_hours(*hms)\n+    hours = hms[0] + hms[1] / 60. + hms[2] / 3600.\n     npt.assert_almost_equal(a1.hour, hours)\n \n-    a2 = Angle(hms, unit=u.hour)\n+    with pytest.warns(AstropyDeprecationWarning, match='hms_to_hours'):\n+        a2 = Angle(hms, unit=u.hour)\n \n     npt.assert_almost_equal(a2.radian, a1.radian)\n \n",
  "problem_statement": "Angle bug for (d, m, s) tuple input (deprecate dms_to_degrees)\n`Angle` does not handle the sign correctly for a `(d, m, s)` tuple input if `d=0`:\r\n\r\n```python\r\n>>> from astropy.coordinates import Angle\r\n>>> ang = Angle((-0, -42, -17), unit='deg')\r\n>>> print(ang)\r\n0d42m17s\r\n>>> print(ang.dms)\r\ndms_tuple(d=0.0, m=42.0, s=16.999999999999886)\r\n>>> print(ang.signed_dms)\r\nsigned_dms_tuple(sign=1.0, d=0.0, m=42.0, s=16.999999999999886)\r\n```\r\n\r\n<!-- Provide a general description of the bug. -->\r\n\r\n### Expected behavior\r\n\r\n```python\r\n>>> ang = Angle((-0, -42, -17), unit='deg')\r\n>>> print(ang)\r\n-0d42m17s\r\n>>> print(ang.dms)\r\ndms_tuple(d=-0.0, m=-42.0, s=-16.999999999999886)\r\n>>> print(ang.signed_dms)\r\nsigned_dms_tuple(sign=-1.0, d=0.0, m=42.0, s=16.999999999999886)\r\n```\r\n\nfix for the issue #12239 (Angle bug for (d, m, s) tuple input (deprecate dms_to_degrees))\nfix for the issue #12239 \r\n\r\nTwo solutions are proposed.\r\ncode for solution 1 is presented in this pull request.\n",
  "hints_text": "Hi @larrybradley  and others,\r\nI am recently working on this issue.\r\nIn the process..\r\nI cannot find the definition of namedtuple()\r\nI don't know yet whether it is a class or function.\r\nPlease help me here.\nI came to know that the namedtuple is from python collections module.\r\n\n",
  "created_at": "2022-04-22T18:22:32Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"astropy/coordinates/tests/test_angles.py::test_create_angles\", \"astropy/coordinates/tests/test_angles.py::test_radec\", \"astropy/coordinates/tests/test_angles.py::test_create_tuple\", \"astropy/coordinates/tests/test_arrays.py::test_hms\"]",
  "PASS_TO_PASS": "[\"astropy/coordinates/tests/test_angles.py::test_angle_from_view\", \"astropy/coordinates/tests/test_angles.py::test_angle_ops\", \"astropy/coordinates/tests/test_angles.py::test_angle_methods\", \"astropy/coordinates/tests/test_angles.py::test_angle_convert\", \"astropy/coordinates/tests/test_angles.py::test_angle_formatting\", \"astropy/coordinates/tests/test_angles.py::test_to_string_vector\", \"astropy/coordinates/tests/test_angles.py::test_angle_format_roundtripping\", \"astropy/coordinates/tests/test_angles.py::test_negative_zero_dms\", \"astropy/coordinates/tests/test_angles.py::test_negative_zero_dm\", \"astropy/coordinates/tests/test_angles.py::test_negative_zero_hms\", \"astropy/coordinates/tests/test_angles.py::test_negative_zero_hm\", \"astropy/coordinates/tests/test_angles.py::test_negative_sixty_hm\", \"astropy/coordinates/tests/test_angles.py::test_plus_sixty_hm\", \"astropy/coordinates/tests/test_angles.py::test_negative_fifty_nine_sixty_dms\", \"astropy/coordinates/tests/test_angles.py::test_plus_fifty_nine_sixty_dms\", \"astropy/coordinates/tests/test_angles.py::test_negative_sixty_dms\", \"astropy/coordinates/tests/test_angles.py::test_plus_sixty_dms\", \"astropy/coordinates/tests/test_angles.py::test_angle_to_is_angle\", \"astropy/coordinates/tests/test_angles.py::test_angle_to_quantity\", \"astropy/coordinates/tests/test_angles.py::test_quantity_to_angle\", \"astropy/coordinates/tests/test_angles.py::test_angle_string\", \"astropy/coordinates/tests/test_angles.py::test_angle_repr\", \"astropy/coordinates/tests/test_angles.py::test_large_angle_representation\", \"astropy/coordinates/tests/test_angles.py::test_wrap_at_inplace\", \"astropy/coordinates/tests/test_angles.py::test_latitude\", \"astropy/coordinates/tests/test_angles.py::test_longitude\", \"astropy/coordinates/tests/test_angles.py::test_wrap_at\", \"astropy/coordinates/tests/test_angles.py::test_is_within_bounds\", \"astropy/coordinates/tests/test_angles.py::test_angle_mismatched_unit\", \"astropy/coordinates/tests/test_angles.py::test_regression_formatting_negative\", \"astropy/coordinates/tests/test_angles.py::test_regression_formatting_default_precision\", \"astropy/coordinates/tests/test_angles.py::test_empty_sep\", \"astropy/coordinates/tests/test_angles.py::test_list_of_quantities\", \"astropy/coordinates/tests/test_angles.py::test_multiply_divide\", \"astropy/coordinates/tests/test_angles.py::test_mixed_string_and_quantity\", \"astropy/coordinates/tests/test_angles.py::test_array_angle_tostring\", \"astropy/coordinates/tests/test_angles.py::test_wrap_at_without_new\", \"astropy/coordinates/tests/test_angles.py::test__str__\", \"astropy/coordinates/tests/test_angles.py::test_repr_latex\", \"astropy/coordinates/tests/test_angles.py::test_angle_with_cds_units_enabled\", \"astropy/coordinates/tests/test_angles.py::test_longitude_nan\", \"astropy/coordinates/tests/test_angles.py::test_latitude_nan\", \"astropy/coordinates/tests/test_angles.py::test_angle_wrap_at_nan\", \"astropy/coordinates/tests/test_angles.py::test_angle_multithreading\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input0-nan-nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input1-[nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input2-[6d00m00s\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input3-[nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input4-nan-nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input5-[nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input6-[6h00m00s\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input7-[nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input8-nan-nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input9-[nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input10-[1.5rad\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input11-[nan\", \"astropy/coordinates/tests/test_arrays.py::test_dms\", \"astropy/coordinates/tests/test_arrays.py::test_array_coordinates_creation\", \"astropy/coordinates/tests/test_arrays.py::test_array_coordinates_distances\", \"astropy/coordinates/tests/test_arrays.py::test_array_precession\", \"astropy/coordinates/tests/test_arrays.py::test_array_indexing\", \"astropy/coordinates/tests/test_arrays.py::test_array_len\", \"astropy/coordinates/tests/test_arrays.py::test_array_eq\"]",
  "environment_setup_commit": "cdf311e0714e611d48b0a31eb1f0e2cbffab7f23",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.526858",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}