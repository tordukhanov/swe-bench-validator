{
  "repo": "django/django",
  "instance_id": "django__django-13606",
  "base_commit": "556fa4bbba5ba86bc1646a86fb11ab55405d4aa4",
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1083,19 +1083,18 @@ class Subquery(Expression):\n     contains_aggregate = False\n \n     def __init__(self, queryset, output_field=None, **extra):\n-        self.query = queryset.query\n+        # Allow the usage of both QuerySet and sql.Query objects.\n+        self.query = getattr(queryset, 'query', queryset)\n         self.extra = extra\n-        # Prevent the QuerySet from being evaluated.\n-        self.queryset = queryset._chain(_result_cache=[], prefetch_done=True)\n         super().__init__(output_field)\n \n     def __getstate__(self):\n         state = super().__getstate__()\n         args, kwargs = state['_constructor_args']\n         if args:\n-            args = (self.queryset, *args[1:])\n+            args = (self.query, *args[1:])\n         else:\n-            kwargs['queryset'] = self.queryset\n+            kwargs['queryset'] = self.query\n         state['_constructor_args'] = args, kwargs\n         return state\n \ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -12,6 +12,7 @@\n from django.utils.datastructures import OrderedSet\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.functional import cached_property\n+from django.utils.hashable import make_hashable\n \n \n class Lookup:\n@@ -143,6 +144,18 @@ def contains_over_clause(self):\n     def is_summary(self):\n         return self.lhs.is_summary or getattr(self.rhs, 'is_summary', False)\n \n+    @property\n+    def identity(self):\n+        return self.__class__, self.lhs, self.rhs\n+\n+    def __eq__(self, other):\n+        if not isinstance(other, Lookup):\n+            return NotImplemented\n+        return self.identity == other.identity\n+\n+    def __hash__(self):\n+        return hash(make_hashable(self.identity))\n+\n \n class Transform(RegisterLookupMixin, Func):\n     \"\"\"\ndiff --git a/django/db/models/sql/datastructures.py b/django/db/models/sql/datastructures.py\n--- a/django/db/models/sql/datastructures.py\n+++ b/django/db/models/sql/datastructures.py\n@@ -114,17 +114,28 @@ def relabeled_clone(self, change_map):\n             self.join_field, self.nullable, filtered_relation=filtered_relation,\n         )\n \n-    def equals(self, other, with_filtered_relation):\n+    @property\n+    def identity(self):\n         return (\n-            isinstance(other, self.__class__) and\n-            self.table_name == other.table_name and\n-            self.parent_alias == other.parent_alias and\n-            self.join_field == other.join_field and\n-            (not with_filtered_relation or self.filtered_relation == other.filtered_relation)\n+            self.__class__,\n+            self.table_name,\n+            self.parent_alias,\n+            self.join_field,\n+            self.filtered_relation,\n         )\n \n     def __eq__(self, other):\n-        return self.equals(other, with_filtered_relation=True)\n+        if not isinstance(other, Join):\n+            return NotImplemented\n+        return self.identity == other.identity\n+\n+    def __hash__(self):\n+        return hash(self.identity)\n+\n+    def equals(self, other, with_filtered_relation):\n+        if with_filtered_relation:\n+            return self == other\n+        return self.identity[:-1] == other.identity[:-1]\n \n     def demote(self):\n         new = self.relabeled_clone({})\n@@ -160,9 +171,17 @@ def as_sql(self, compiler, connection):\n     def relabeled_clone(self, change_map):\n         return self.__class__(self.table_name, change_map.get(self.table_alias, self.table_alias))\n \n+    @property\n+    def identity(self):\n+        return self.__class__, self.table_name, self.table_alias\n+\n+    def __eq__(self, other):\n+        if not isinstance(other, BaseTable):\n+            return NotImplemented\n+        return self.identity == other.identity\n+\n+    def __hash__(self):\n+        return hash(self.identity)\n+\n     def equals(self, other, with_filtered_relation):\n-        return (\n-            isinstance(self, other.__class__) and\n-            self.table_name == other.table_name and\n-            self.table_alias == other.table_alias\n-        )\n+        return self.identity == other.identity\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -23,7 +23,9 @@\n from django.db import DEFAULT_DB_ALIAS, NotSupportedError, connections\n from django.db.models.aggregates import Count\n from django.db.models.constants import LOOKUP_SEP\n-from django.db.models.expressions import BaseExpression, Col, F, OuterRef, Ref\n+from django.db.models.expressions import (\n+    BaseExpression, Col, Exists, F, OuterRef, Ref, ResolvedOuterRef,\n+)\n from django.db.models.fields import Field\n from django.db.models.fields.related_lookups import MultiColSource\n from django.db.models.lookups import Lookup\n@@ -39,6 +41,7 @@\n )\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.functional import cached_property\n+from django.utils.hashable import make_hashable\n from django.utils.tree import Node\n \n __all__ = ['Query', 'RawQuery']\n@@ -246,6 +249,14 @@ def base_table(self):\n         for alias in self.alias_map:\n             return alias\n \n+    @property\n+    def identity(self):\n+        identity = (\n+            (arg, make_hashable(value))\n+            for arg, value in self.__dict__.items()\n+        )\n+        return (self.__class__, *identity)\n+\n     def __str__(self):\n         \"\"\"\n         Return the query as a string of SQL with the parameter values\n@@ -1756,12 +1767,12 @@ def split_exclude(self, filter_expr, can_reuse, names_with_path):\n         filters in the original query.\n \n         We will turn this into equivalent of:\n-            WHERE NOT (pk IN (SELECT parent_id FROM thetable\n-                              WHERE name = 'foo' AND parent_id IS NOT NULL))\n-\n-        It might be worth it to consider using WHERE NOT EXISTS as that has\n-        saner null handling, and is easier for the backend's optimizer to\n-        handle.\n+            WHERE NOT EXISTS(\n+                SELECT 1\n+                FROM child\n+                WHERE name = 'foo' AND child.parent_id = parent.id\n+                LIMIT 1\n+            )\n         \"\"\"\n         filter_lhs, filter_rhs = filter_expr\n         if isinstance(filter_rhs, OuterRef):\n@@ -1777,17 +1788,9 @@ def split_exclude(self, filter_expr, can_reuse, names_with_path):\n         # the subquery.\n         trimmed_prefix, contains_louter = query.trim_start(names_with_path)\n \n-        # Add extra check to make sure the selected field will not be null\n-        # since we are adding an IN <subquery> clause. This prevents the\n-        # database from tripping over IN (...,NULL,...) selects and returning\n-        # nothing\n         col = query.select[0]\n         select_field = col.target\n         alias = col.alias\n-        if self.is_nullable(select_field):\n-            lookup_class = select_field.get_lookup('isnull')\n-            lookup = lookup_class(select_field.get_col(alias), False)\n-            query.where.add(lookup, AND)\n         if alias in can_reuse:\n             pk = select_field.model._meta.pk\n             # Need to add a restriction so that outer query's filters are in effect for\n@@ -1801,9 +1804,11 @@ def split_exclude(self, filter_expr, can_reuse, names_with_path):\n             query.where.add(lookup, AND)\n             query.external_aliases[alias] = True\n \n-        condition, needed_inner = self.build_filter(\n-            ('%s__in' % trimmed_prefix, query),\n-            current_negated=True, branch_negated=True, can_reuse=can_reuse)\n+        lookup_class = select_field.get_lookup('exact')\n+        lookup = lookup_class(col, ResolvedOuterRef(trimmed_prefix))\n+        query.where.add(lookup, AND)\n+        condition, needed_inner = self.build_filter(Exists(query))\n+\n         if contains_louter:\n             or_null_condition, _ = self.build_filter(\n                 ('%s__isnull' % trimmed_prefix, True),\n",
  "test_patch": "diff --git a/tests/lookup/test_lookups.py b/tests/lookup/test_lookups.py\n--- a/tests/lookup/test_lookups.py\n+++ b/tests/lookup/test_lookups.py\n@@ -1,10 +1,34 @@\n from datetime import datetime\n+from unittest import mock\n \n from django.db.models import DateTimeField, Value\n-from django.db.models.lookups import YearLookup\n+from django.db.models.lookups import Lookup, YearLookup\n from django.test import SimpleTestCase\n \n \n+class CustomLookup(Lookup):\n+    pass\n+\n+\n+class LookupTests(SimpleTestCase):\n+    def test_equality(self):\n+        lookup = Lookup(Value(1), Value(2))\n+        self.assertEqual(lookup, lookup)\n+        self.assertEqual(lookup, Lookup(lookup.lhs, lookup.rhs))\n+        self.assertEqual(lookup, mock.ANY)\n+        self.assertNotEqual(lookup, Lookup(lookup.lhs, Value(3)))\n+        self.assertNotEqual(lookup, Lookup(Value(3), lookup.rhs))\n+        self.assertNotEqual(lookup, CustomLookup(lookup.lhs, lookup.rhs))\n+\n+    def test_hash(self):\n+        lookup = Lookup(Value(1), Value(2))\n+        self.assertEqual(hash(lookup), hash(lookup))\n+        self.assertEqual(hash(lookup), hash(Lookup(lookup.lhs, lookup.rhs)))\n+        self.assertNotEqual(hash(lookup), hash(Lookup(lookup.lhs, Value(3))))\n+        self.assertNotEqual(hash(lookup), hash(Lookup(Value(3), lookup.rhs)))\n+        self.assertNotEqual(hash(lookup), hash(CustomLookup(lookup.lhs, lookup.rhs)))\n+\n+\n class YearLookupTests(SimpleTestCase):\n     def test_get_bound_params(self):\n         look_up = YearLookup(\ndiff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -150,3 +150,31 @@ def test_filter_non_conditional(self):\n         msg = 'Cannot filter against a non-conditional expression.'\n         with self.assertRaisesMessage(TypeError, msg):\n             query.build_where(Func(output_field=CharField()))\n+\n+    def test_equality(self):\n+        self.assertNotEqual(\n+            Author.objects.all().query,\n+            Author.objects.filter(item__name='foo').query,\n+        )\n+        self.assertEqual(\n+            Author.objects.filter(item__name='foo').query,\n+            Author.objects.filter(item__name='foo').query,\n+        )\n+        self.assertEqual(\n+            Author.objects.filter(item__name='foo').query,\n+            Author.objects.filter(Q(item__name='foo')).query,\n+        )\n+\n+    def test_hash(self):\n+        self.assertNotEqual(\n+            hash(Author.objects.all().query),\n+            hash(Author.objects.filter(item__name='foo').query)\n+        )\n+        self.assertEqual(\n+            hash(Author.objects.filter(item__name='foo').query),\n+            hash(Author.objects.filter(item__name='foo').query),\n+        )\n+        self.assertEqual(\n+            hash(Author.objects.filter(item__name='foo').query),\n+            hash(Author.objects.filter(Q(item__name='foo')).query),\n+        )\ndiff --git a/tests/queries/tests.py b/tests/queries/tests.py\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2807,11 +2807,11 @@ def setUpTestData(cls):\n         f1 = Food.objects.create(name='apples')\n         Food.objects.create(name='oranges')\n         Eaten.objects.create(food=f1, meal='dinner')\n-        j1 = Job.objects.create(name='Manager')\n+        cls.j1 = Job.objects.create(name='Manager')\n         cls.r1 = Responsibility.objects.create(description='Playing golf')\n         j2 = Job.objects.create(name='Programmer')\n         r2 = Responsibility.objects.create(description='Programming')\n-        JobResponsibilities.objects.create(job=j1, responsibility=cls.r1)\n+        JobResponsibilities.objects.create(job=cls.j1, responsibility=cls.r1)\n         JobResponsibilities.objects.create(job=j2, responsibility=r2)\n \n     def test_to_field(self):\n@@ -2884,6 +2884,14 @@ def test_exclude_nullable_fields(self):\n             [number],\n         )\n \n+    def test_exclude_multivalued_exists(self):\n+        with CaptureQueriesContext(connection) as captured_queries:\n+            self.assertSequenceEqual(\n+                Job.objects.exclude(responsibilities__description='Programming'),\n+                [self.j1],\n+            )\n+        self.assertIn('exists', captured_queries[0]['sql'].lower())\n+\n \n class ExcludeTest17600(TestCase):\n     \"\"\"\n",
  "problem_statement": "Use EXISTS to exclude multi-valued relationships\nDescription\n\t\nThe current logic that is invoked when excluding a multi-valued relationship (sql.Query.split_exclude) pushes down the filtering criteria in a parent.id NOT IN (SELECT child.parent_id ...) subquery.\n​These kind of operations can be really hard for some query planners to optimize and also tricky to get right due to how the IN operator treats NULL values ​which is something we've known for a while.\nThe NOT EXISTS function should be used instead of NOT IN.\n",
  "hints_text": "",
  "created_at": "2020-10-25T20:25:00Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_equality (lookup.test_lookups.LookupTests)\", \"test_hash (lookup.test_lookups.LookupTests)\", \"test_equality (queries.test_query.TestQuery)\", \"test_hash (queries.test_query.TestQuery)\", \"test_exclude_multivalued_exists (queries.tests.ExcludeTests)\"]",
  "PASS_TO_PASS": "[\"test_ticket22023 (queries.tests.Queries3Tests)\", \"test_ticket7107 (queries.tests.Queries3Tests)\", \"test_ticket8683 (queries.tests.Queries3Tests)\", \"test_ticket_24278 (queries.tests.TestTicket24279)\", \"test_in_list_limit (queries.tests.ConditionalTests)\", \"test_infinite_loop (queries.tests.ConditionalTests)\", \"test_tickets_3045_3288 (queries.tests.SelectRelatedTests)\", \"test_join_already_in_query (queries.tests.NullableRelOrderingTests)\", \"test_ticket10028 (queries.tests.NullableRelOrderingTests)\", \"test_no_extra_params (queries.tests.DefaultValuesInsertTest)\", \"test_evaluated_proxy_count (queries.tests.ProxyQueryCleanupTest)\", \"test_21001 (queries.tests.EmptyStringsAsNullTest)\", \"test_direct_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_joined_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_ticket14729 (queries.tests.RawQueriesTests)\", \"test_ticket7371 (queries.tests.CustomPkTests)\", \"test_reverse_trimming (queries.tests.ReverseJoinTrimmingTest)\", \"test_double_subquery_in (queries.tests.DoubleInSubqueryTests)\", \"test_ticket_21787 (queries.tests.ForeignKeyToBaseExcludeTests)\", \"test_ticket_14056 (queries.tests.Ticket14056Tests)\", \"test_get_bound_params (lookup.test_lookups.YearLookupTests)\", \"test_ticket15786 (queries.tests.Exclude15786)\", \"test_ticket7778 (queries.tests.SubclassFKTests)\", \"test_ticket8597 (queries.tests.ComparisonTests)\", \"test_ticket_21203 (queries.tests.Ticket21203Tests)\", \"test_ticket_18785 (queries.tests.Ticket18785Tests)\", \"test_ticket_21879 (queries.tests.ReverseM2MCustomPkTests)\", \"test_primary_key (queries.tests.IsNullTests)\", \"test_to_field (queries.tests.IsNullTests)\", \"test_ticket_22429 (queries.tests.Ticket22429Tests)\", \"test_invalid_values (queries.tests.TestInvalidValuesRelation)\", \"test_ticket_24605 (queries.tests.TestTicket24605)\", \"test_ticket_12807 (queries.tests.Ticket12807Tests)\", \"test_values_in_subquery (queries.tests.ValuesSubqueryTests)\", \"test_invalid_order_by (queries.tests.QuerySetExceptionTests)\", \"test_invalid_queryset_model (queries.tests.QuerySetExceptionTests)\", \"test_iter_exceptions (queries.tests.QuerySetExceptionTests)\", \"test_or_with_both_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_both_slice_and_ordering (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_lhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_rhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_ticket_7302 (queries.tests.EscapingTests)\", \"test_ticket_19964 (queries.tests.RelabelCloneTest)\", \"test_empty_full_handling_conjunction (queries.tests.WhereNodeTest)\", \"test_empty_full_handling_disjunction (queries.tests.WhereNodeTest)\", \"test_empty_nodes (queries.tests.WhereNodeTest)\", \"test_ticket_20101 (queries.tests.Ticket20101Tests)\", \"test_annotated_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_annotated_ordering (queries.tests.QuerysetOrderedTests)\", \"test_annotated_values_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_cleared_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_empty_queryset (queries.tests.QuerysetOrderedTests)\", \"test_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_no_default_or_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_order_by_extra (queries.tests.QuerysetOrderedTests)\", \"test_exists (queries.tests.ExistsSql)\", \"test_ticket_18414 (queries.tests.ExistsSql)\", \"#13227 -- If a queryset is already evaluated, it can still be used as a query arg\", \"test_no_fields_cloning (queries.tests.CloneTests)\", \"test_ticket10432 (queries.tests.GeneratorExpressionTests)\", \"test_empty_string_promotion (queries.tests.EmptyStringPromotionTests)\", \"test_emptyqueryset_values (queries.tests.EmptyQuerySetTests)\", \"test_ticket_19151 (queries.tests.EmptyQuerySetTests)\", \"test_values_subquery (queries.tests.EmptyQuerySetTests)\", \"test_ticket7872 (queries.tests.DisjunctiveFilterTests)\", \"test_ticket8283 (queries.tests.DisjunctiveFilterTests)\", \"test_ticket_20788 (queries.tests.Ticket20788Tests)\", \"test_double_exclude (queries.tests.NullInExcludeTest)\", \"test_null_in_exclude_qs (queries.tests.NullInExcludeTest)\", \"test_fk_reuse (queries.tests.JoinReuseTest)\", \"test_fk_reuse_annotation (queries.tests.JoinReuseTest)\", \"test_fk_reuse_disjunction (queries.tests.JoinReuseTest)\", \"test_fk_reuse_order_by (queries.tests.JoinReuseTest)\", \"test_fk_reuse_select_related (queries.tests.JoinReuseTest)\", \"test_inverted_q_across_relations (queries.tests.JoinReuseTest)\", \"test_revfk_noreuse (queries.tests.JoinReuseTest)\", \"test_revo2o_reuse (queries.tests.JoinReuseTest)\", \"test_ticket_20955 (queries.tests.Ticket20955Tests)\", \"test_non_nullable_fk_not_promoted (queries.tests.ValuesJoinPromotionTests)\", \"test_ticket_21376 (queries.tests.ValuesJoinPromotionTests)\", \"test_values_no_promotion_for_existing (queries.tests.ValuesJoinPromotionTests)\", \"test_clone_select_related (queries.test_query.TestQuery)\", \"test_complex_query (queries.test_query.TestQuery)\", \"test_filter_conditional (queries.test_query.TestQuery)\", \"test_filter_conditional_join (queries.test_query.TestQuery)\", \"test_filter_non_conditional (queries.test_query.TestQuery)\", \"test_foreign_key (queries.test_query.TestQuery)\", \"test_foreign_key_exclusive (queries.test_query.TestQuery)\", \"test_foreign_key_f (queries.test_query.TestQuery)\", \"test_iterable_lookup_value (queries.test_query.TestQuery)\", \"test_multiple_fields (queries.test_query.TestQuery)\", \"test_negated_nullable (queries.test_query.TestQuery)\", \"test_non_alias_cols_query (queries.test_query.TestQuery)\", \"test_simple_query (queries.test_query.TestQuery)\", \"test_transform (queries.test_query.TestQuery)\", \"test_exclude_many_to_many (queries.tests.ManyToManyExcludeTest)\", \"test_ticket_12823 (queries.tests.ManyToManyExcludeTest)\", \"test_ticket_23605 (queries.tests.Ticket23605Tests)\", \"test_can_combine_queries_using_and_and_or_operators (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_items_using_index_and_slice_notation (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_number_of_items_in_queryset_using_standard_len (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_invalid_index (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_can_slice_again_after_slicing (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_combine_queries_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_filter_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_reorder_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"hint: inverting your ordering might do what you need\", \"test_slicing_with_steps_can_be_used (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_with_tests_is_not_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_without_step_is_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_ticket12239 (queries.tests.Queries2Tests)\", \"test_ticket4289 (queries.tests.Queries2Tests)\", \"test_ticket7759 (queries.tests.Queries2Tests)\", \"test_exclude_plain (queries.tests.ExcludeTest17600)\", \"test_exclude_plain_distinct (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_is_equal_to_plain_exclude (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_is_equal_to_plain_exclude_variation (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_object_distinct (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_object_no_distinct (queries.tests.ExcludeTest17600)\", \"test_empty_resultset_sql (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery_exclude (queries.tests.WeirdQuerysetSlicingTests)\", \"test_tickets_7698_10202 (queries.tests.WeirdQuerysetSlicingTests)\", \"test_zero_length_values_slicing (queries.tests.WeirdQuerysetSlicingTests)\", \"test_correct_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_values_queryset_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_wrong_backward_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_wrong_type_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_disjunction_promotion1 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion2 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion5_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion6 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion7 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_fexpression (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_select_related (queries.tests.DisjunctionPromotionTests)\", \"test_AB_ACB (queries.tests.UnionTests)\", \"test_A_AB (queries.tests.UnionTests)\", \"test_A_AB2 (queries.tests.UnionTests)\", \"test_BAB_BAC (queries.tests.UnionTests)\", \"test_BAB_BACB (queries.tests.UnionTests)\", \"test_BA_BCA__BAB_BAC_BCA (queries.tests.UnionTests)\", \"test_extra_multiple_select_params_values_order_by (queries.tests.ValuesQuerysetTests)\", \"test_extra_select_params_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_multiple (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_twice (queries.tests.ValuesQuerysetTests)\", \"test_field_error_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_values_list (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_bad_field_name (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression_with_default_alias (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_flat (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_with_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_without_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_pickle (queries.tests.ValuesQuerysetTests)\", \"test_distinct_ordered_sliced_subquery_aggregation (queries.tests.Queries6Tests)\", \"test_multiple_columns_with_the_same_name_slice (queries.tests.Queries6Tests)\", \"test_nested_queries_sql (queries.tests.Queries6Tests)\", \"test_parallel_iterators (queries.tests.Queries6Tests)\", \"test_ticket3739 (queries.tests.Queries6Tests)\", \"test_ticket_11320 (queries.tests.Queries6Tests)\", \"test_tickets_8921_9188 (queries.tests.Queries6Tests)\", \"test_in_query (queries.tests.ToFieldTests)\", \"test_in_subquery (queries.tests.ToFieldTests)\", \"test_nested_in_subquery (queries.tests.ToFieldTests)\", \"test_recursive_fk (queries.tests.ToFieldTests)\", \"test_recursive_fk_reverse (queries.tests.ToFieldTests)\", \"test_reverse_in (queries.tests.ToFieldTests)\", \"test_single_object (queries.tests.ToFieldTests)\", \"test_single_object_reverse (queries.tests.ToFieldTests)\", \"test_extra_select_literal_percent_s (queries.tests.Queries5Tests)\", \"test_ordering (queries.tests.Queries5Tests)\", \"test_ticket5261 (queries.tests.Queries5Tests)\", \"test_ticket7045 (queries.tests.Queries5Tests)\", \"test_ticket7256 (queries.tests.Queries5Tests)\", \"test_ticket9848 (queries.tests.Queries5Tests)\", \"test_isnull_filter_promotion (queries.tests.NullJoinPromotionOrTest)\", \"test_null_join_demotion (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_17886 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21366 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_complex_filter (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_and (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_or (queries.tests.NullJoinPromotionOrTest)\", \"test_distinct_ordered_sliced_subquery (queries.tests.SubqueryTests)\", \"Subselects honor any manual ordering\", \"test_related_sliced_subquery (queries.tests.SubqueryTests)\", \"test_slice_subquery_and_query (queries.tests.SubqueryTests)\", \"Delete queries can safely contain sliced subqueries\", \"test_exclude_nullable_fields (queries.tests.ExcludeTests)\", \"test_exclude_reverse_fk_field_ref (queries.tests.ExcludeTests)\", \"test_exclude_with_circular_fk_relation (queries.tests.ExcludeTests)\", \"test_subquery_exclude_outerref (queries.tests.ExcludeTests)\", \"test_ticket14511 (queries.tests.ExcludeTests)\", \"test_to_field (queries.tests.ExcludeTests)\", \"test_combine_join_reuse (queries.tests.Queries4Tests)\", \"test_filter_reverse_non_integer_pk (queries.tests.Queries4Tests)\", \"test_join_reuse_order (queries.tests.Queries4Tests)\", \"test_order_by_resetting (queries.tests.Queries4Tests)\", \"test_order_by_reverse_fk (queries.tests.Queries4Tests)\", \"test_ticket10181 (queries.tests.Queries4Tests)\", \"test_ticket11811 (queries.tests.Queries4Tests)\", \"test_ticket14876 (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_true (queries.tests.Queries4Tests)\", \"test_ticket24525 (queries.tests.Queries4Tests)\", \"test_ticket7095 (queries.tests.Queries4Tests)\", \"test_avoid_infinite_loop_on_too_many_subqueries (queries.tests.Queries1Tests)\", \"test_common_mixed_case_foreign_keys (queries.tests.Queries1Tests)\", \"test_deferred_load_qs_pickling (queries.tests.Queries1Tests)\", \"test_double_exclude (queries.tests.Queries1Tests)\", \"test_error_raised_on_filter_with_dictionary (queries.tests.Queries1Tests)\", \"test_exclude (queries.tests.Queries1Tests)\", \"test_exclude_in (queries.tests.Queries1Tests)\", \"test_excluded_intermediary_m2m_table_joined (queries.tests.Queries1Tests)\", \"test_field_with_filterable (queries.tests.Queries1Tests)\", \"test_get_clears_ordering (queries.tests.Queries1Tests)\", \"test_heterogeneous_qs_combination (queries.tests.Queries1Tests)\", \"test_lookup_constraint_fielderror (queries.tests.Queries1Tests)\", \"test_negate_field (queries.tests.Queries1Tests)\", \"test_nested_exclude (queries.tests.Queries1Tests)\", \"test_order_by_join_unref (queries.tests.Queries1Tests)\", \"test_order_by_raw_column_alias_warning (queries.tests.Queries1Tests)\", \"test_order_by_rawsql (queries.tests.Queries1Tests)\", \"test_order_by_tables (queries.tests.Queries1Tests)\", \"test_reasonable_number_of_subq_aliases (queries.tests.Queries1Tests)\", \"test_subquery_condition (queries.tests.Queries1Tests)\", \"test_ticket10205 (queries.tests.Queries1Tests)\", \"test_ticket10432 (queries.tests.Queries1Tests)\", \"test_ticket1050 (queries.tests.Queries1Tests)\", \"test_ticket10742 (queries.tests.Queries1Tests)\", \"test_ticket17429 (queries.tests.Queries1Tests)\", \"test_ticket1801 (queries.tests.Queries1Tests)\", \"test_ticket19672 (queries.tests.Queries1Tests)\", \"test_ticket2091 (queries.tests.Queries1Tests)\", \"test_ticket2253 (queries.tests.Queries1Tests)\", \"test_ticket2306 (queries.tests.Queries1Tests)\", \"test_ticket2400 (queries.tests.Queries1Tests)\", \"test_ticket2496 (queries.tests.Queries1Tests)\", \"test_ticket3037 (queries.tests.Queries1Tests)\", \"test_ticket3141 (queries.tests.Queries1Tests)\", \"test_ticket4358 (queries.tests.Queries1Tests)\", \"test_ticket4464 (queries.tests.Queries1Tests)\", \"test_ticket4510 (queries.tests.Queries1Tests)\", \"test_ticket6074 (queries.tests.Queries1Tests)\", \"test_ticket6154 (queries.tests.Queries1Tests)\", \"test_ticket6981 (queries.tests.Queries1Tests)\", \"test_ticket7076 (queries.tests.Queries1Tests)\", \"test_ticket7096 (queries.tests.Queries1Tests)\", \"test_ticket7098 (queries.tests.Queries1Tests)\", \"test_ticket7155 (queries.tests.Queries1Tests)\", \"test_ticket7181 (queries.tests.Queries1Tests)\", \"test_ticket7235 (queries.tests.Queries1Tests)\", \"test_ticket7277 (queries.tests.Queries1Tests)\", \"test_ticket7323 (queries.tests.Queries1Tests)\", \"test_ticket7378 (queries.tests.Queries1Tests)\", \"test_ticket7791 (queries.tests.Queries1Tests)\", \"test_ticket7813 (queries.tests.Queries1Tests)\", \"test_ticket8439 (queries.tests.Queries1Tests)\", \"test_ticket9926 (queries.tests.Queries1Tests)\", \"test_ticket9985 (queries.tests.Queries1Tests)\", \"test_ticket9997 (queries.tests.Queries1Tests)\", \"test_ticket_10790_1 (queries.tests.Queries1Tests)\", \"test_ticket_10790_2 (queries.tests.Queries1Tests)\", \"test_ticket_10790_3 (queries.tests.Queries1Tests)\", \"test_ticket_10790_4 (queries.tests.Queries1Tests)\", \"test_ticket_10790_5 (queries.tests.Queries1Tests)\", \"test_ticket_10790_6 (queries.tests.Queries1Tests)\", \"test_ticket_10790_7 (queries.tests.Queries1Tests)\", \"test_ticket_10790_8 (queries.tests.Queries1Tests)\", \"test_ticket_10790_combine (queries.tests.Queries1Tests)\", \"test_ticket_20250 (queries.tests.Queries1Tests)\", \"test_tickets_1878_2939 (queries.tests.Queries1Tests)\", \"test_tickets_2076_7256 (queries.tests.Queries1Tests)\", \"test_tickets_2080_3592 (queries.tests.Queries1Tests)\", \"test_tickets_2874_3002 (queries.tests.Queries1Tests)\", \"test_tickets_4088_4306 (queries.tests.Queries1Tests)\", \"test_tickets_5321_7070 (queries.tests.Queries1Tests)\", \"test_tickets_5324_6704 (queries.tests.Queries1Tests)\", \"test_tickets_6180_6203 (queries.tests.Queries1Tests)\", \"test_tickets_7087_12242 (queries.tests.Queries1Tests)\", \"test_tickets_7204_7506 (queries.tests.Queries1Tests)\", \"test_tickets_7448_7707 (queries.tests.Queries1Tests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.663628",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}