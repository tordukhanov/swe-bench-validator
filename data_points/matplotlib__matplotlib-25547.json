{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25547",
  "base_commit": "e8101f17d8a7d2d7eccff7452162c02a27980800",
  "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2208,19 +2208,11 @@ def _convert_dx(dx, x0, xconv, convert):\n                 x0 = cbook._safe_first_finite(x0)\n             except (TypeError, IndexError, KeyError):\n                 pass\n-            except StopIteration:\n-                # this means we found no finite element, fall back to first\n-                # element unconditionally\n-                x0 = cbook.safe_first_element(x0)\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n             except (TypeError, IndexError, KeyError):\n                 x = xconv\n-            except StopIteration:\n-                # this means we found no finite element, fall back to first\n-                # element unconditionally\n-                x = cbook.safe_first_element(xconv)\n \n             delist = False\n             if not np.iterable(dx):\ndiff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py\n--- a/lib/matplotlib/cbook.py\n+++ b/lib/matplotlib/cbook.py\n@@ -1619,13 +1619,13 @@ def safe_first_element(obj):\n \n def _safe_first_finite(obj, *, skip_nonfinite=True):\n     \"\"\"\n-    Return the first non-None (and optionally finite) element in *obj*.\n+    Return the first finite element in *obj* if one is available and skip_nonfinite is\n+    True. Otherwise return the first element.\n \n     This is a method for internal use.\n \n-    This is a type-independent way of obtaining the first non-None element,\n-    supporting both index access and the iterator protocol.\n-    The first non-None element will be obtained when skip_none is True.\n+    This is a type-independent way of obtaining the first finite element, supporting\n+    both index access and the iterator protocol.\n     \"\"\"\n     def safe_isfinite(val):\n         if val is None:\n@@ -1657,7 +1657,7 @@ def safe_isfinite(val):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+        return next((val for val in obj if safe_isfinite(val)), safe_first_element(obj))\n \n \n def sanitize_sequence(data):\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_cbook.py b/lib/matplotlib/tests/test_cbook.py\n--- a/lib/matplotlib/tests/test_cbook.py\n+++ b/lib/matplotlib/tests/test_cbook.py\n@@ -608,6 +608,18 @@ def test_flatiter():\n     assert 1 == next(it)\n \n \n+def test__safe_first_finite_all_nan():\n+    arr = np.full(2, np.nan)\n+    ret = cbook._safe_first_finite(arr)\n+    assert np.isnan(ret)\n+\n+\n+def test__safe_first_finite_all_inf():\n+    arr = np.full(2, np.inf)\n+    ret = cbook._safe_first_finite(arr)\n+    assert np.isinf(ret)\n+\n+\n def test_reshape2d():\n \n     class Dummy:\n",
  "problem_statement": "UserWarning thrown when all values are \"bad\", but not when only some are\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nIf all values passed as colors are \"bad\" (`np.nan`), a warning is thrown from numpy about converting masked values to null. If some of the values are \"bad\", this does not happen.\r\n\r\n**Code for reproduction**\r\n\r\n```python\r\nimport numpy as np, matplotlib.pyplot as plt\r\n```\r\n\r\nThis does not warn:\r\n\r\n```python\r\nc = np.full(10, np.nan)\r\nc[0] = 1.\r\nplt.scatter(np.ones(10), np.ones(10), c=c)\r\nplt.show()\r\n```\r\n\r\nThis does:\r\n\r\n```python\r\nplt.scatter(np.ones(10), np.ones(10), c=np.full(10, np.nan))\r\nplt.show()\r\n```\r\n\r\n```pytb\r\n<__array_function__ internals>:5: UserWarning: Warning: converting a masked element to nan.\r\n/usr/local/lib/python3.8/site-packages/numpy/core/_asarray.py:85: UserWarning: Warning: converting a masked element to nan.\r\n  return array(a, dtype, copy=False, order=order)\r\n```\r\n\r\nThis is difficult to hide since since the warning is not thrown when the figure is being constructed, but when it is shown. Here's a full traceback to show this:\r\n\r\n<details>\r\n<summary> Full traceback </summary>\r\n\r\n```pytb\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/pyplot.py\", line 337, in show\r\n    return _backend_mod.show(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/backend_bases.py\", line 3544, in show\r\n    cls.mainloop()\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/backends/backend_macosx.py\", line 171, in mainloop\r\n    _macosx.show()\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/backends/backend_macosx.py\", line 61, in _draw\r\n    self.figure.draw(renderer)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/artist.py\", line 41, in draw_wrapper\r\n    return draw(artist, renderer, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/figure.py\", line 1863, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/artist.py\", line 41, in draw_wrapper\r\n    return draw(artist, renderer, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/cbook/deprecation.py\", line 411, in wrapper\r\n    return func(*inner_args, **inner_kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/axes/_base.py\", line 2748, in draw\r\n    mimage._draw_list_compositing_images(renderer, self, artists)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/artist.py\", line 41, in draw_wrapper\r\n    return draw(artist, renderer, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/collections.py\", line 931, in draw\r\n    Collection.draw(self, renderer)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/artist.py\", line 41, in draw_wrapper\r\n    return draw(artist, renderer, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/collections.py\", line 346, in draw\r\n    self.update_scalarmappable()\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/collections.py\", line 855, in update_scalarmappable\r\n    self._facecolors = self.to_rgba(self._A, self._alpha)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/cm.py\", line 332, in to_rgba\r\n    x = self.norm(x)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/colors.py\", line 1048, in __call__\r\n    (vmin,), _ = self.process_value(self.vmin)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/colors.py\", line 1012, in process_value\r\n    dtype = np.min_scalar_type(value)\r\n  File \"<__array_function__ internals>\", line 5, in min_scalar_type\r\n  File \"/usr/local/lib/python3.8/site-packages/numpy/ma/core.py\", line 4331, in __float__\r\n    warnings.warn(\"Warning: converting a masked element to nan.\", stacklevel=2)\r\n  File \"/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/lib/python3.8/warnings.py\", line 109, in _showwarnmsg\r\n    sw(msg.message, msg.category, msg.filename, msg.lineno,\r\n  File \"<stdin>\", line 3, in warn_with_traceback\r\n<__array_function__ internals>:5: UserWarning: Warning: converting a masked element to nan.\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/pyplot.py\", line 337, in show\r\n    return _backend_mod.show(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/backend_bases.py\", line 3544, in show\r\n    cls.mainloop()\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/backends/backend_macosx.py\", line 171, in mainloop\r\n    _macosx.show()\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/backends/backend_macosx.py\", line 61, in _draw\r\n    self.figure.draw(renderer)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/artist.py\", line 41, in draw_wrapper\r\n    return draw(artist, renderer, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/figure.py\", line 1863, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/artist.py\", line 41, in draw_wrapper\r\n    return draw(artist, renderer, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/cbook/deprecation.py\", line 411, in wrapper\r\n    return func(*inner_args, **inner_kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/axes/_base.py\", line 2748, in draw\r\n    mimage._draw_list_compositing_images(renderer, self, artists)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/artist.py\", line 41, in draw_wrapper\r\n    return draw(artist, renderer, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/collections.py\", line 931, in draw\r\n    Collection.draw(self, renderer)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/artist.py\", line 41, in draw_wrapper\r\n    return draw(artist, renderer, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/collections.py\", line 346, in draw\r\n    self.update_scalarmappable()\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/collections.py\", line 855, in update_scalarmappable\r\n    self._facecolors = self.to_rgba(self._A, self._alpha)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/cm.py\", line 332, in to_rgba\r\n    x = self.norm(x)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/colors.py\", line 1048, in __call__\r\n    (vmin,), _ = self.process_value(self.vmin)\r\n  File \"/usr/local/lib/python3.8/site-packages/matplotlib/colors.py\", line 1019, in process_value\r\n    data = np.asarray(value)\r\n  File \"/usr/local/lib/python3.8/site-packages/numpy/core/_asarray.py\", line 85, in asarray\r\n    return array(a, dtype, copy=False, order=order)\r\n  File \"/usr/local/lib/python3.8/site-packages/numpy/ma/core.py\", line 4331, in __float__\r\n    warnings.warn(\"Warning: converting a masked element to nan.\", stacklevel=2)\r\n  File \"/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/lib/python3.8/warnings.py\", line 109, in _showwarnmsg\r\n    sw(msg.message, msg.category, msg.filename, msg.lineno,\r\n  File \"<stdin>\", line 3, in warn_with_traceback\r\n/usr/local/lib/python3.8/site-packages/numpy/core/_asarray.py:85: UserWarning: Warning: converting a masked element to nan.\r\n  return array(a, dtype, copy=False, order=order)\r\n```\r\n\r\n</details>\r\n\r\n**Expected outcome**\r\n\r\nI wouldn't expect the second to warn if the first doesn't.\r\n\r\n**Matplotlib version**\r\n<!--Please specify your platform and versions of the relevant libraries you are using:-->\r\n  * Operating system: macOS\r\n  * Matplotlib version: 3.3.1\r\n  * Matplotlib backend (`print(matplotlib.get_backend())`): MacOSX and module://ipykernel.pylab.backend_inline\r\n  * Python version: 3.8.5\r\n  * Jupyter version (if applicable): Replicates in python repl, but also was happening in ipython and jupyter lab\r\n  * Other libraries: \r\n\r\nInstalled with pip\n[Bug]: ax.errorbar raises for all-nan data on matplotlib 3.6.2\n### Bug summary\r\n\r\nThe function `ax.errorbar` raises a `StopIteration` error when `yerr` contains only `NaN` values.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nfig, ax = plt.subplots(1, 1)\r\nax.errorbar([0], [0], [np.nan])\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```shell\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"~/.local/share/virtualenvs/pipeline/lib/python3.9/site-packages/matplotlib/__init__.py\", line 1423, in inner\r\n    return func(ax, *map(sanitize_sequence, args), **kwargs)\r\n  File \"~.local/share/virtualenvs/pipeline/lib/python3.9/site-packages/matplotlib/axes/_axes.py\", line 3488, in errorbar\r\n    yerr = _upcast_err(yerr)\r\n  File \"~/.local/share/virtualenvs/pipeline/lib/python3.9/site-packages/matplotlib/axes/_axes.py\", line 3470, in _upcast_err\r\n    isinstance(cbook._safe_first_finite(err), np.ndarray)\r\n  File \"~/.local/share/virtualenvs/pipeline/lib/python3.9/site-packages/matplotlib/cbook/__init__.py\", line 1749, in _safe_first_finite\r\n    return next(val for val in obj if safe_isfinite(val))\r\nStopIteration\r\n```\r\n\r\n### Expected outcome\r\n\r\nNo crash, similar to the case where only some values are NaN.\r\n\r\n### Additional information\r\n\r\nThis happens because  `_upcast_err` unconditionally looks for a first finite element in `xerr` and `yerr`.\r\n\r\n### Operating system\r\n\r\nDebian\r\n\r\n### Matplotlib Version\r\n\r\n3.6.2\r\n\r\n### Matplotlib Backend\r\n\r\nTkAgg\r\n\r\n### Python version\r\n\r\n3.9.2\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n",
  "hints_text": "The warning comes from NumPy, so not sure there is much Matplotlib can do? I'll close this, but feel free to reopen if you have another opinion (and sorry for letting this go unnoticed for so long).\n@oscargus, could matplotlib just catch the warning at plot time?\r\n\r\nI figure if the behavior is intentional from matplotlib, it would be nice if it didn't warn.\nAhh, I should have checked what happens in latest Matplotlib. Now it actually breaks:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nStopIteration                             Traceback (most recent call last)\r\n<ipython-input-2-18fe43def80a> in <cell line: 1>()\r\n----> 1 plt.scatter(np.ones(10), np.ones(10), c=np.full(10, np.nan))\r\n\r\n~\\matplotlib\\lib\\matplotlib\\pyplot.py in scatter(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, data, **kwargs)\r\n   2820         vmin=None, vmax=None, alpha=None, linewidths=None, *,\r\n   2821         edgecolors=None, plotnonfinite=False, data=None, **kwargs):\r\n-> 2822     __ret = gca().scatter(\r\n   2823         x, y, s=s, c=c, marker=marker, cmap=cmap, norm=norm,\r\n   2824         vmin=vmin, vmax=vmax, alpha=alpha, linewidths=linewidths,\r\n\r\n~\\matplotlib\\lib\\matplotlib\\__init__.py in inner(ax, data, *args, **kwargs)\r\n   1446     def inner(ax, *args, data=None, **kwargs):\r\n   1447         if data is None:\r\n-> 1448             return func(ax, *map(sanitize_sequence, args), **kwargs)\r\n   1449\r\n   1450         bound = new_sig.bind(ax, *args, **kwargs)\r\n\r\n~\\matplotlib\\lib\\matplotlib\\axes\\_axes.py in scatter(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, **kwargs)\r\n   4590             orig_edgecolor = kwargs.get('edgecolor', None)\r\n   4591         c, colors, edgecolors = \\\r\n-> 4592             self._parse_scatter_color_args(\r\n   4593                 c, edgecolors, kwargs, x.size,\r\n   4594                 get_next_color_func=self._get_patches_for_fill.get_next_color)\r\n\r\n~\\matplotlib\\lib\\matplotlib\\axes\\_axes.py in _parse_scatter_color_args(c, edgecolors, kwargs, xsize, get_next_color_func)\r\n   4388             isinstance(c, str)\r\n   4389             or (np.iterable(c) and len(c) > 0\r\n-> 4390                 and isinstance(cbook._safe_first_finite(c), str)))\r\n   4391\r\n   4392         def invalid_shape_exception(csize, xsize):\r\n\r\n~\\matplotlib\\lib\\matplotlib\\cbook\\__init__.py in _safe_first_finite(obj, skip_nonfinite)\r\n   1713                            \"support generators as input\")\r\n   1714     else:\r\n-> 1715         return next(val for val in obj if safe_isfinite(val))\r\n   1716\r\n   1717\r\n\r\nStopIteration:\r\n```\r\n\r\nPinging @tacaswell who seems to have worked on `_safe_first_finite` most recently (although not sure when the issue arise).\r\n\r\nRegarding if it is intentional or not can be discussed. We don't raise the warning and if we catch it, it may lead to confusion. At least in the general case.\r\n\nPossible duplicate of #18294.",
  "created_at": "2023-03-25T15:54:49Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_cbook.py::test__safe_first_finite_all_nan\", \"lib/matplotlib/tests/test_cbook.py::test__safe_first_finite_all_inf\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_cbook.py::Test_delete_masked_points::test_bad_first_arg\", \"lib/matplotlib/tests/test_cbook.py::Test_delete_masked_points::test_string_seq\", \"lib/matplotlib/tests/test_cbook.py::Test_delete_masked_points::test_datetime\", \"lib/matplotlib/tests/test_cbook.py::Test_delete_masked_points::test_rgba\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_form_main_list\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_form_each_dict\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_form_dict_keys\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_results_baseline\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_results_bootstrapped\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_results_whiskers_float\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_results_whiskers_range\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_results_whiskers_percentiles\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_results_withlabels\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_label_error\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_bad_dims\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_boxplot_stats_autorange_false\", \"lib/matplotlib/tests/test_cbook.py::Test_callback_registry::test_callback_complete[True]\", \"lib/matplotlib/tests/test_cbook.py::Test_callback_registry::test_callback_complete[False]\", \"lib/matplotlib/tests/test_cbook.py::Test_callback_registry::test_callback_disconnect[True]\", \"lib/matplotlib/tests/test_cbook.py::Test_callback_registry::test_callback_disconnect[False]\", \"lib/matplotlib/tests/test_cbook.py::Test_callback_registry::test_callback_wrong_disconnect[True]\", \"lib/matplotlib/tests/test_cbook.py::Test_callback_registry::test_callback_wrong_disconnect[False]\", \"lib/matplotlib/tests/test_cbook.py::Test_callback_registry::test_registration_on_non_empty_registry[True]\", \"lib/matplotlib/tests/test_cbook.py::Test_callback_registry::test_registration_on_non_empty_registry[False]\", \"lib/matplotlib/tests/test_cbook.py::Test_callback_registry::test_pickling\", \"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_default_exception_handler\", \"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_custom_exception_handler[cb0-RuntimeError]\", \"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_custom_exception_handler[cb1-TestException]\", \"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_custom_exception_handler[cb2-ValueError]\", \"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_signals\", \"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_blocking\", \"lib/matplotlib/tests/test_cbook.py::test_strip_comment[a\", \"lib/matplotlib/tests/test_cbook.py::test_strip_comment[#\", \"lib/matplotlib/tests/test_cbook.py::test_strip_comment_invalid\", \"lib/matplotlib/tests/test_cbook.py::test_sanitize_sequence\", \"lib/matplotlib/tests/test_cbook.py::test_normalize_kwargs_fail[inp0-kwargs_to_norm0]\", \"lib/matplotlib/tests/test_cbook.py::test_normalize_kwargs_fail[inp1-kwargs_to_norm1]\", \"lib/matplotlib/tests/test_cbook.py::test_normalize_kwargs_pass[None-expected0-kwargs_to_norm0]\", \"lib/matplotlib/tests/test_cbook.py::test_normalize_kwargs_pass[inp1-expected1-kwargs_to_norm1]\", \"lib/matplotlib/tests/test_cbook.py::test_normalize_kwargs_pass[inp2-expected2-kwargs_to_norm2]\", \"lib/matplotlib/tests/test_cbook.py::test_warn_external_frame_embedded_python\", \"lib/matplotlib/tests/test_cbook.py::test_to_prestep\", \"lib/matplotlib/tests/test_cbook.py::test_to_prestep_empty\", \"lib/matplotlib/tests/test_cbook.py::test_to_poststep\", \"lib/matplotlib/tests/test_cbook.py::test_to_poststep_empty\", \"lib/matplotlib/tests/test_cbook.py::test_to_midstep\", \"lib/matplotlib/tests/test_cbook.py::test_to_midstep_empty\", \"lib/matplotlib/tests/test_cbook.py::test_step_fails[args0]\", \"lib/matplotlib/tests/test_cbook.py::test_step_fails[args1]\", \"lib/matplotlib/tests/test_cbook.py::test_step_fails[args2]\", \"lib/matplotlib/tests/test_cbook.py::test_grouper\", \"lib/matplotlib/tests/test_cbook.py::test_grouper_private\", \"lib/matplotlib/tests/test_cbook.py::test_flatiter\", \"lib/matplotlib/tests/test_cbook.py::test_reshape2d\", \"lib/matplotlib/tests/test_cbook.py::test_reshape2d_pandas\", \"lib/matplotlib/tests/test_cbook.py::test_index_of_pandas\", \"lib/matplotlib/tests/test_cbook.py::test_contiguous_regions\", \"lib/matplotlib/tests/test_cbook.py::test_safe_first_element_pandas_series\", \"lib/matplotlib/tests/test_cbook.py::test_warn_external\", \"lib/matplotlib/tests/test_cbook.py::test_array_patch_perimeters\", \"lib/matplotlib/tests/test_cbook.py::test_setattr_cm\", \"lib/matplotlib/tests/test_cbook.py::test_format_approx\", \"lib/matplotlib/tests/test_cbook.py::test_safe_first_element_with_none\", \"lib/matplotlib/tests/test_cbook.py::test_auto_format_str[%.2f\", \"lib/matplotlib/tests/test_cbook.py::test_auto_format_str[{:.2f}\", \"lib/matplotlib/tests/test_cbook.py::test_auto_format_str[{}\", \"lib/matplotlib/tests/test_cbook.py::test_auto_format_str[const-0.2-const]\", \"lib/matplotlib/tests/test_cbook.py::test_auto_format_str[%d\", \"lib/matplotlib/tests/test_cbook.py::test_auto_format_str[{{{:,.0f}}}-200000.0-{200,000}]\", \"lib/matplotlib/tests/test_cbook.py::test_auto_format_str[{:.2%}-0.6666666666666666-66.67%]\", \"lib/matplotlib/tests/test_cbook.py::test_auto_format_str[$%g-2.54-$2.54]\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.822454",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}