{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-17809",
  "base_commit": "21183076095704d7844a832d2e7f387555934f0c",
  "patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -8,6 +8,11 @@\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.functions.elementary.integers import floor\n \n+from sympy import pi, Eq\n+from sympy.logic import Or, And\n+from sympy.core.logic import fuzzy_or, fuzzy_and, fuzzy_bool\n+\n+\n \n def _rewrite_hyperbolics_as_exp(expr):\n     expr = sympify(expr)\n@@ -273,6 +278,53 @@ class cosh(HyperbolicFunction):\n     sinh, tanh, acosh\n     \"\"\"\n \n+    def _eval_is_positive(self):\n+        arg = self.args[0]\n+\n+        if arg.is_real:\n+            return True\n+\n+        re, im = arg.as_real_imag()\n+        im_mod = im % (2*pi)\n+\n+        if im_mod == 0:\n+            return True\n+\n+        if re == 0:\n+            if im_mod < pi/2 or im_mod > 3*pi/2:\n+                return True\n+            elif im_mod >= pi/2 or im_mod <= 3*pi/2:\n+                return False\n+\n+        return fuzzy_or([fuzzy_and([fuzzy_bool(Eq(re, 0)),\n+                         fuzzy_or([fuzzy_bool(im_mod < pi/2),\n+                                   fuzzy_bool(im_mod > 3*pi/2)])]),\n+                         fuzzy_bool(Eq(im_mod, 0))])\n+\n+\n+    def _eval_is_nonnegative(self):\n+        arg = self.args[0]\n+\n+        if arg.is_real:\n+            return True\n+\n+        re, im = arg.as_real_imag()\n+        im_mod = im % (2*pi)\n+\n+        if im_mod == 0:\n+            return True\n+\n+        if re == 0:\n+            if im_mod <= pi/2 or im_mod >= 3*pi/2:\n+                return True\n+            elif im_mod > pi/2 or im_mod < 3*pi/2:\n+                return False\n+\n+        return fuzzy_or([fuzzy_and([fuzzy_bool(Eq(re, 0)),\n+                         fuzzy_or([fuzzy_bool(im_mod <= pi/2), fuzzy_bool(im_mod >= 3*pi/2)])]),\n+                         fuzzy_bool(Eq(im_mod, 0))])\n+\n+\n     def fdiff(self, argindex=1):\n         if argindex == 1:\n             return sinh(self.args[0])\n@@ -420,10 +472,6 @@ def _eval_is_real(self):\n         re, im = arg.as_real_imag()\n         return (im%pi).is_zero\n \n-    def _eval_is_positive(self):\n-        if self.args[0].is_extended_real:\n-            return True\n-\n     def _eval_is_finite(self):\n         arg = self.args[0]\n         return arg.is_finite\n",
  "test_patch": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -1097,6 +1097,29 @@ def test_cosh_expansion():\n     assert cosh(3*x).expand(trig=True).expand() == \\\n         3*sinh(x)**2*cosh(x) + cosh(x)**3\n \n+def test_cosh_positive():\n+    # See issue 11721\n+    # cosh(x) is positive for real values of x\n+    x = symbols('x')\n+    k = symbols('k', real=True)\n+    n = symbols('n', integer=True)\n+\n+    assert cosh(k).is_positive is True\n+    assert cosh(k + 2*n*pi*I).is_positive is True\n+    assert cosh(I*pi/4).is_positive is True\n+    assert cosh(3*I*pi/4).is_positive is False\n+\n+def test_cosh_nonnegative():\n+    x = symbols('x')\n+    k = symbols('k', real=True)\n+    n = symbols('n', integer=True)\n+\n+    assert cosh(k).is_nonnegative is True\n+    assert cosh(k + 2*n*pi*I).is_nonnegative is True\n+    assert cosh(I*pi/4).is_nonnegative is True\n+    assert cosh(3*I*pi/4).is_nonnegative is False\n+    assert cosh(S.Zero).is_nonnegative is True\n+\n def test_real_assumptions():\n     z = Symbol('z', real=False)\n     assert sinh(z).is_real is None\n",
  "problem_statement": "Modified is_positive for cosh function\nFixes #11721.\r\n\r\n`cosh(x).is_positive` returns `True` if x is real.\r\nAlso modified the `Abs` function to return the function itself or its negative if the function is positive or negative.\r\n\r\nExample:\r\n```\r\nIn [1]: r=symbols('r',real=True)\r\n\r\nIn [2]: abs(cosh(x))\r\nOut[2]: │cosh(x)│\r\n\r\nIn [3]: abs(cosh(r))\r\nOut[3]: cosh(r)\r\n\r\nIn [4]: abs(cosh(r)) == cosh(r)\r\nOut[4]: True\r\n\r\nIn [5]: abs(cosh(x)) == cosh(x)\r\nOut[5]: False\r\n\r\nIn [6]: cosh(r).is_positive\r\nOut[6]: True\r\n\r\nIn [7]: cosh(x).is_positive\r\n\r\nIn [8]:      \r\n```\nabs(cosh(x)) should simplify to cosh(x) for real x\nSympy 1.0 only simplifies in a limited set of cases:\n\n``` py\n>>> x = sympy.var('x', real=True)\n>>> abs(sympy.cosh(x)).simplify()\nAbs(cosh(x)) # bad\n>>> (sympy.cosh(x) - abs(sympy.cosh(x))).simplify()\n0 # good\n>>> (sympy.cosh(x) + abs(sympy.cosh(x))).simplify()\ncosh(x) + Abs(cosh(x)) # bad\n```\n\n",
  "hints_text": "\nI think to make it work in general `cosh(x).is_positive` should be True. It's strange that simplify works. It must be attempting some rewrites that cause it to reduce (like `rewrite(exp)`). \n",
  "created_at": "2019-10-27T18:14:04Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_cosh_positive\", \"test_cosh_nonnegative\"]",
  "PASS_TO_PASS": "[\"test_sinh\", \"test_sinh_series\", \"test_sinh_fdiff\", \"test_cosh\", \"test_cosh_series\", \"test_cosh_fdiff\", \"test_tanh\", \"test_tanh_series\", \"test_tanh_fdiff\", \"test_coth\", \"test_coth_series\", \"test_coth_fdiff\", \"test_csch\", \"test_csch_series\", \"test_csch_fdiff\", \"test_sech\", \"test_sech_series\", \"test_sech_fdiff\", \"test_asinh\", \"test_asinh_rewrite\", \"test_asinh_series\", \"test_asinh_fdiff\", \"test_acosh\", \"test_acosh_rewrite\", \"test_acosh_series\", \"test_acosh_fdiff\", \"test_asech\", \"test_asech_series\", \"test_asech_rewrite\", \"test_asech_fdiff\", \"test_acsch\", \"test_acsch_infinities\", \"test_acsch_rewrite\", \"test_acsch_fdiff\", \"test_atanh\", \"test_atanh_rewrite\", \"test_atanh_series\", \"test_atanh_fdiff\", \"test_acoth\", \"test_acoth_rewrite\", \"test_acoth_series\", \"test_acoth_fdiff\", \"test_inverses\", \"test_leading_term\", \"test_complex\", \"test_complex_2899\", \"test_simplifications\", \"test_issue_4136\", \"test_sinh_rewrite\", \"test_cosh_rewrite\", \"test_tanh_rewrite\", \"test_coth_rewrite\", \"test_csch_rewrite\", \"test_sech_rewrite\", \"test_derivs\", \"test_sinh_expansion\", \"test_cosh_expansion\", \"test_real_assumptions\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.118162",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}