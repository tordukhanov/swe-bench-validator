{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-21542",
  "base_commit": "f0632c0fc7339f68e992ed63ae4cfac76cd41aad",
  "patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -352,6 +352,8 @@ class Colorbar:\n     ticks : `~matplotlib.ticker.Locator` or array-like of float\n \n     format : str or `~matplotlib.ticker.Formatter`\n+        If string, it supports '%' operator and `str.format` formats:\n+        e.g. ``\"%4.2e\"`` or ``\"{x:.2e}\"``.\n \n     drawedges : bool\n \n@@ -487,7 +489,12 @@ def __init__(self, ax, mappable=None, *, cmap=None,\n             self.locator = ticks    # Handle default in _ticker()\n \n         if isinstance(format, str):\n-            self.formatter = ticker.FormatStrFormatter(format)\n+            # Check format between FormatStrFormatter and StrMethodFormatter\n+            try:\n+                self.formatter = ticker.FormatStrFormatter(format)\n+                _ = self.formatter(0)\n+            except TypeError:\n+                self.formatter = ticker.StrMethodFormatter(format)\n         else:\n             self.formatter = format  # Assume it is a Formatter or None\n         self.draw_all()\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -543,14 +543,15 @@ def test_colorbar_renorm():\n     assert np.isclose(cbar.vmax, z.max() * 1000)\n \n \n-def test_colorbar_format():\n+@pytest.mark.parametrize('fmt', ['%4.2e', '{x:.2e}'])\n+def test_colorbar_format(fmt):\n     # make sure that format is passed properly\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n \n     fig, ax = plt.subplots()\n     im = ax.imshow(z)\n-    cbar = fig.colorbar(im, format='%4.2e')\n+    cbar = fig.colorbar(im, format=fmt)\n     fig.canvas.draw()\n     assert cbar.ax.yaxis.get_ticklabels()[4].get_text() == '8.00e+04'\n \n",
  "problem_statement": "[ENH]: use new style format strings for colorbar ticks\n### Problem\n\nAt the moment, the default format strings in colorbar are old style ones, as in their init there is:\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/67e18148d87db04d2c8d4293ff12c56fbbb7fde8/lib/matplotlib/colorbar.py#L489-L492\r\n\r\nwhich is a different convention from the one of a normal axis, which was introduced in #16715. \n\n### Proposed solution\n\nAs in `update_ticks` we pass the colorbar's formatter to the long axis,\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/67e18148d87db04d2c8d4293ff12c56fbbb7fde8/lib/matplotlib/colorbar.py#L801\r\n\r\nthe `if` statement above may be removed to keep the default logic only in `Axis`. Right now one can pass a callable directly (although that's not documented), and the default behaviour from #16715 is triggered. However, I guess making this change for format strings would imply a deprecation cycle, as it breaks current behaviour. Another option would be to check in `Axis._set_formatter`  for what kind of string format we've been passed (unsure how, although there must be way).\n\n### Additional context and prior art\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2021-11-04T22:23:30Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_colorbar.py::test_colorbar_format[{x:.2e}]\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_shape[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_length[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_positioning[png-True]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_positioning[png-False]\", \"lib/matplotlib/tests/test_colorbar.py::test_gridspec_make_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_scatter[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure[no\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure[with\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure_cl\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbarbase\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_closed_patch[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_minorticks_on_off\", \"lib/matplotlib/tests/test_colorbar.py::test_cbar_minorticks_for_rc_xyminortickvisible\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_autoticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_autotickslog\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_get_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[both]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[min]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[max]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_powernorm_extension\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_axes_kw\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_log_minortick_labels\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_renorm\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_format[%4.2e]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_scale_reset\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_get_ticks_2\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_inverted_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_mappable_no_alpha\", \"lib/matplotlib/tests/test_colorbar.py::test_mappable_2d_alpha\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_label\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim0]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim1]\", \"lib/matplotlib/tests/test_colorbar.py::test_anchored_cbar_position_using_specgrid\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_change_lim_scale[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_axes_handles_same_functions[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_inset_colorbar_layout\", \"lib/matplotlib/tests/test_colorbar.py::test_twoslope_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_cb_whose_mappable_has_no_figure[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_aspects\", \"lib/matplotlib/tests/test_colorbar.py::test_proportional_colorbars[png]\"]",
  "environment_setup_commit": "f93c0a3dcb82feed0262d758626c90d4002685f3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.793365",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}