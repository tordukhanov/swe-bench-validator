{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12758",
  "base_commit": "3a884c5ee507f735e2df384727340c72c5219a8e",
  "patch": "diff --git a/sklearn/metrics/classification.py b/sklearn/metrics/classification.py\n--- a/sklearn/metrics/classification.py\n+++ b/sklearn/metrics/classification.py\n@@ -1645,12 +1645,14 @@ def classification_report(y_true, y_pred, labels=None, target_names=None,\n               ...\n             }\n \n-        The reported averages include micro average (averaging the\n-        total true positives, false negatives and false positives), macro\n-        average (averaging the unweighted mean per label), weighted average\n-        (averaging the support-weighted mean per label) and sample average\n-        (only for multilabel classification). See also\n-        :func:`precision_recall_fscore_support` for more details on averages.\n+        The reported averages include macro average (averaging the unweighted\n+        mean per label), weighted average (averaging the support-weighted mean\n+        per label), sample average (only for multilabel classification) and\n+        micro average (averaging the total true positives, false negatives and\n+        false positives) it is only shown for multi-label or multi-class\n+        with a subset of classes because it is accuracy otherwise.\n+        See also:func:`precision_recall_fscore_support` for more details\n+        on averages.\n \n         Note that in binary classification, recall of the positive class\n         is also known as \"sensitivity\"; recall of the negative class is\n@@ -1674,10 +1676,23 @@ class 0       0.50      1.00      0.67         1\n          class 1       0.00      0.00      0.00         1\n          class 2       1.00      0.67      0.80         3\n     <BLANKLINE>\n-       micro avg       0.60      0.60      0.60         5\n+        accuracy                           0.60         5\n        macro avg       0.50      0.56      0.49         5\n     weighted avg       0.70      0.60      0.61         5\n     <BLANKLINE>\n+    >>> y_pred = [1, 1, 0]\n+    >>> y_true = [1, 1, 1]\n+    >>> print(classification_report(y_true, y_pred, labels=[1, 2, 3]))\n+                  precision    recall  f1-score   support\n+    <BLANKLINE>\n+               1       1.00      0.67      0.80         3\n+               2       0.00      0.00      0.00         0\n+               3       0.00      0.00      0.00         0\n+    <BLANKLINE>\n+       micro avg       1.00      0.67      0.80         3\n+       macro avg       0.33      0.22      0.27         3\n+    weighted avg       1.00      0.67      0.80         3\n+    <BLANKLINE>\n     \"\"\"\n \n     y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n@@ -1689,6 +1704,11 @@ class 2       1.00      0.67      0.80         3\n     else:\n         labels = np.asarray(labels)\n \n+    # labelled micro average\n+    micro_is_accuracy = ((y_type == 'multiclass' or y_type == 'binary') and\n+                         (not labels_given or\n+                          (set(labels) == set(unique_labels(y_true, y_pred)))))\n+\n     if target_names is not None and len(labels) != len(target_names):\n         if labels_given:\n             warnings.warn(\n@@ -1736,7 +1756,11 @@ class 2       1.00      0.67      0.80         3\n \n     # compute all applicable averages\n     for average in average_options:\n-        line_heading = average + ' avg'\n+        if average.startswith('micro') and micro_is_accuracy:\n+            line_heading = 'accuracy'\n+        else:\n+            line_heading = average + ' avg'\n+\n         # compute averages with specified averaging method\n         avg_p, avg_r, avg_f1, _ = precision_recall_fscore_support(\n             y_true, y_pred, labels=labels,\n@@ -1747,10 +1771,20 @@ class 2       1.00      0.67      0.80         3\n             report_dict[line_heading] = dict(\n                 zip(headers, [i.item() for i in avg]))\n         else:\n-            report += row_fmt.format(line_heading, *avg,\n-                                     width=width, digits=digits)\n+            if line_heading == 'accuracy':\n+                row_fmt_accuracy = u'{:>{width}s} ' + \\\n+                        u' {:>9.{digits}}' * 2 + u' {:>9.{digits}f}' + \\\n+                        u' {:>9}\\n'\n+                report += row_fmt_accuracy.format(line_heading, '', '',\n+                                                  *avg[2:], width=width,\n+                                                  digits=digits)\n+            else:\n+                report += row_fmt.format(line_heading, *avg,\n+                                         width=width, digits=digits)\n \n     if output_dict:\n+        if 'accuracy' in report_dict.keys():\n+            report_dict['accuracy'] = report_dict['accuracy']['precision']\n         return report_dict\n     else:\n         return report\n",
  "test_patch": "diff --git a/sklearn/metrics/tests/test_classification.py b/sklearn/metrics/tests/test_classification.py\n--- a/sklearn/metrics/tests/test_classification.py\n+++ b/sklearn/metrics/tests/test_classification.py\n@@ -127,10 +127,7 @@ def test_classification_report_dictionary_output():\n                                      'precision': 0.5260083136726211,\n                                      'recall': 0.596146953405018,\n                                      'support': 75},\n-                       'micro avg': {'f1-score': 0.5333333333333333,\n-                                     'precision': 0.5333333333333333,\n-                                     'recall': 0.5333333333333333,\n-                                     'support': 75},\n+                       'accuracy': 0.5333333333333333,\n                        'weighted avg': {'f1-score': 0.47310435663627154,\n                                         'precision': 0.5137535108414785,\n                                         'recall': 0.5333333333333333,\n@@ -143,10 +140,14 @@ def test_classification_report_dictionary_output():\n     # assert the 2 dicts are equal.\n     assert(report.keys() == expected_report.keys())\n     for key in expected_report:\n-        assert report[key].keys() == expected_report[key].keys()\n-        for metric in expected_report[key]:\n-            assert_almost_equal(expected_report[key][metric],\n-                                report[key][metric])\n+        if key == 'accuracy':\n+            assert isinstance(report[key], float)\n+            assert report[key] == expected_report[key]\n+        else:\n+            assert report[key].keys() == expected_report[key].keys()\n+            for metric in expected_report[key]:\n+                assert_almost_equal(expected_report[key][metric],\n+                                    report[key][metric])\n \n     assert type(expected_report['setosa']['precision']) == float\n     assert type(expected_report['macro avg']['precision']) == float\n@@ -885,7 +886,7 @@ def test_classification_report_multiclass():\n   versicolor       0.33      0.10      0.15        31\n    virginica       0.42      0.90      0.57        20\n \n-   micro avg       0.53      0.53      0.53        75\n+    accuracy                           0.53        75\n    macro avg       0.53      0.60      0.51        75\n weighted avg       0.51      0.53      0.47        75\n \"\"\"\n@@ -905,7 +906,7 @@ def test_classification_report_multiclass_balanced():\n            1       0.33      0.33      0.33         3\n            2       0.33      0.33      0.33         3\n \n-   micro avg       0.33      0.33      0.33         9\n+    accuracy                           0.33         9\n    macro avg       0.33      0.33      0.33         9\n weighted avg       0.33      0.33      0.33         9\n \"\"\"\n@@ -925,7 +926,7 @@ def test_classification_report_multiclass_with_label_detection():\n            1       0.33      0.10      0.15        31\n            2       0.42      0.90      0.57        20\n \n-   micro avg       0.53      0.53      0.53        75\n+    accuracy                           0.53        75\n    macro avg       0.53      0.60      0.51        75\n weighted avg       0.51      0.53      0.47        75\n \"\"\"\n@@ -946,7 +947,7 @@ def test_classification_report_multiclass_with_digits():\n   versicolor    0.33333   0.09677   0.15000        31\n    virginica    0.41860   0.90000   0.57143        20\n \n-   micro avg    0.53333   0.53333   0.53333        75\n+    accuracy                        0.53333        75\n    macro avg    0.52601   0.59615   0.50998        75\n weighted avg    0.51375   0.53333   0.47310        75\n \"\"\"\n@@ -969,7 +970,7 @@ def test_classification_report_multiclass_with_string_label():\n        green       0.33      0.10      0.15        31\n          red       0.42      0.90      0.57        20\n \n-   micro avg       0.53      0.53      0.53        75\n+    accuracy                           0.53        75\n    macro avg       0.53      0.60      0.51        75\n weighted avg       0.51      0.53      0.47        75\n \"\"\"\n@@ -983,7 +984,7 @@ def test_classification_report_multiclass_with_string_label():\n            b       0.33      0.10      0.15        31\n            c       0.42      0.90      0.57        20\n \n-   micro avg       0.53      0.53      0.53        75\n+    accuracy                           0.53        75\n    macro avg       0.53      0.60      0.51        75\n weighted avg       0.51      0.53      0.47        75\n \"\"\"\n@@ -1006,7 +1007,7 @@ def test_classification_report_multiclass_with_unicode_label():\n       green\\xa2       0.33      0.10      0.15        31\n         red\\xa2       0.42      0.90      0.57        20\n \n-   micro avg       0.53      0.53      0.53        75\n+    accuracy                           0.53        75\n    macro avg       0.53      0.60      0.51        75\n weighted avg       0.51      0.53      0.47        75\n \"\"\"\n@@ -1028,7 +1029,7 @@ def test_classification_report_multiclass_with_long_string_label():\n greengreengreengreengreen       0.33      0.10      0.15        31\n                       red       0.42      0.90      0.57        20\n \n-                micro avg       0.53      0.53      0.53        75\n+                 accuracy                           0.53        75\n                 macro avg       0.53      0.60      0.51        75\n              weighted avg       0.51      0.53      0.47        75\n \"\"\"\n",
  "problem_statement": "Showing micro-average in classification report is confusing\nThis is a follow up on #11679.\r\nI don't think it makes sense to include the micro-average for multi-class classification. The three columns will always show the same value, all of which being the same as accuracy. I find that confusing. If you want to show this (I don't see why you'd want to show the same number three times), I would at least make it clear in the report that it's accuracy.\nIncrementalPCA fails if data size % batch size < n_components\n#### Description\r\n\r\n`IncrementalPCA` throws`n_components=%r must be less or equal to the batch number of samples %d`\r\n\r\nThe error occurs because the last batch generated by `utils.gen_batch` may be smaller than `batch_size`.\r\n\r\n#### Steps/Code to Reproduce\r\n\r\n```python\r\nfrom sklearn.datasets import load_iris\r\nfrom sklearn.decomposition import PCA, IncrementalPCA\r\n   \r\niris = load_iris()\r\nX = iris.data[:101]\r\nipca = IncrementalPCA(n_components=2, batch_size=10)\r\nX_ipca = ipca.fit_transform(X)\r\n```\r\n\r\nI reduced the iris data to 101 instances, so the last batch has only a single data instance, which is less than the number of components.\r\n\r\nAs far as I see, none of the current unit tests run into this. (`test_incremental_pca_batch_signs` could, if the code that raises the exception would compare `self.n_components_` with `n_samples` - which it should, but doesn't).\r\n\r\nSkipping the last batch if it is to small, that is, changing\r\n\r\n```\r\n        for batch in gen_batches(n_samples, self.batch_size_):\r\n                self.partial_fit(X[batch], check_input=False)\r\n```\r\n\r\nto\r\n\r\n```\r\n        for batch in gen_batches(n_samples, self.batch_size_):\r\n            if self.n_components is None \\\r\n                    or X[batch].shape[0] >= self.n_components:\r\n                self.partial_fit(X[batch], check_input=False)\r\n```\r\n\r\nfixes the problem. @kastnerkyle, please confirm that this solution seems OK before I go preparing the PR and tests.\r\n\r\n#### Expected Results\r\n\r\nNo error is thrown.\r\n\r\n#### Actual Results\r\n\r\n`ValueError: n_components=2 must be less or equal to the batch number of samples 1.`\r\n\r\n#### Versions\r\n\r\n```\r\nDarwin-18.0.0-x86_64-i386-64bit\r\nPython 3.6.2 |Continuum Analytics, Inc.| (default, Jul 20 2017, 13:14:59)\r\n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)]\r\nNumPy 1.15.2\r\nSciPy 1.1.0\r\nScikit-Learn 0.20.0\r\n```\n",
  "hints_text": "Not sure if we want to do this for 0.20.1 as a bugfix?\nIf the target is multiclass and labels is None or includes all present\nlabels, I agree it would be less confusing if micro is hidden or is\nlabelled \"accuracy\". I don't mind making this a fix for 0.20.x, but it's\nnot worth blocking on.\n\nHi, \r\nIs this issue being worked on? I'm a beginner and I'd like to contribute (if needed) - kindly let me know if anything's up. Thanks!\n@anjalibhavan sure go for it!\nHi, are there any news on this issue? Has a Pull Request been made? I would like to contribute too!\nYes there is a pr in #12353\nLooks like this was introduced in #9303 so @wallygauze should probably take a look too.\r\nI haven't checked in-depth how incremental pca does partial fits, but does it really need `n_components` to be <= to the `batch_size` (`n_samples` in partial_fit) - especially does it need this to hold for _every_ batch? Or should the actual requirement be in `fit` that `n_components <= n_samples` (all of them, not a single batch) and possibly also `n_components <= batch_size` (so that at least one batch is big enough)?\r\n\r\nIn any case, I don't think dropping the last batch if it is too small is a good solution - it might be an important part of the data.\nLooked like a bug and a regression to me\nanyone looking into this for 0.20.1?\nI don't know of anyone working on it, but I would consider it a blocker for\n0.20.1 as it's an important regression that should not be hard to fix\n\nHi, if this issue is still open for a fix, will try to look at this issue and produce a PR. 👍 ",
  "created_at": "2018-12-12T01:30:18Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/metrics/tests/test_classification.py::test_classification_report_dictionary_output\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_balanced\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_label_detection\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_digits\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_string_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_unicode_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_long_string_label\"]",
  "PASS_TO_PASS": "[\"sklearn/metrics/tests/test_classification.py::test_multilabel_accuracy_score_subset_accuracy\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_binary_single_class\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_extra_labels\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_ignored_labels\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_score_non_binary_class\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_duplicate_values\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_tied_values\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_fscore_support_errors\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_unused_pos_label\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_binary\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_binary\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_multilabel\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_errors\", \"sklearn/metrics/tests/test_classification.py::test_cohen_kappa\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_nan\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_numpy_corrcoef\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_jurman\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[100]\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[10000]\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[1000000]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[samples]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[micro]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[macro]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[weighted]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[None]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary_averaged\", \"sklearn/metrics/tests/test_classification.py::test_zero_precision_recall\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_multiclass_subset_labels\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_dtype\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_labels_target_names_unequal_length\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_no_labels_target_names_unequal_length\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_classification_report\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_zero_one_loss_subset\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_hamming_loss\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_jaccard_similarity_score\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_2\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[macro-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[micro-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[weighted-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[samples-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_average_none\", \"sklearn/metrics/tests/test_classification.py::test_prf_warnings\", \"sklearn/metrics/tests/test_classification.py::test_recall_warnings\", \"sklearn/metrics/tests/test_classification.py::test_precision_warnings\", \"sklearn/metrics/tests/test_classification.py::test_fscore_warnings\", \"sklearn/metrics/tests/test_classification.py::test_prf_average_binary_data_non_binary\", \"sklearn/metrics/tests/test_classification.py::test__check_targets\", \"sklearn/metrics/tests/test_classification.py::test__check_targets_multiclass_with_both_y_true_and_y_pred_binary\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_binary\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_missing_labels_with_labels_none\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_with_missing_labels\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_invariance_lists\", \"sklearn/metrics/tests/test_classification.py::test_log_loss\", \"sklearn/metrics/tests/test_classification.py::test_log_loss_pandas_input\", \"sklearn/metrics/tests/test_classification.py::test_brier_score_loss\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score_unseen\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true0-y_pred0]\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true1-y_pred1]\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true2-y_pred2]\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.967398",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}