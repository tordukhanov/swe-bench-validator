{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-5231",
  "base_commit": "76a7553066130a7dbf4d10922b2530161b2ec5b0",
  "patch": "diff --git a/pylint/extensions/_check_docs_utils.py b/pylint/extensions/_check_docs_utils.py\n--- a/pylint/extensions/_check_docs_utils.py\n+++ b/pylint/extensions/_check_docs_utils.py\n@@ -23,7 +23,7 @@\n \"\"\"Utility methods for docstring checking.\"\"\"\n \n import re\n-from typing import List\n+from typing import List, Set, Tuple\n \n import astroid\n from astroid import nodes\n@@ -731,9 +731,8 @@ class NumpyDocstring(GoogleDocstring):\n \n     re_param_line = re.compile(\n         fr\"\"\"\n-        \\s*  (\\*{{0,2}}\\w+)                                                 # identifier with potential asterisks\n-        \\s*  :\n-        \\s*  (?:({GoogleDocstring.re_multiple_type})(?:,\\s+optional)?)?     # optional type declaration\n+        \\s*  (\\*{{0,2}}\\w+)(\\s?(:|\\n))                                      # identifier with potential asterisks\n+        \\s*  (?:({GoogleDocstring.re_multiple_type})(?:,\\s+optional)?\\n)?   # optional type declaration\n         \\s* (.*)                                                            # optional description\n     \"\"\",\n         re.X | re.S,\n@@ -772,6 +771,38 @@ class NumpyDocstring(GoogleDocstring):\n \n     supports_yields = True\n \n+    def match_param_docs(self) -> Tuple[Set[str], Set[str]]:\n+        \"\"\"Matches parameter documentation section to parameter documentation rules\"\"\"\n+        params_with_doc = set()\n+        params_with_type = set()\n+\n+        entries = self._parse_section(self.re_param_section)\n+        print(entries)\n+        entries.extend(self._parse_section(self.re_keyword_param_section))\n+        for entry in entries:\n+            match = self.re_param_line.match(entry)\n+            if not match:\n+                continue\n+\n+            # check if parameter has description only\n+            re_only_desc = re.match(r\"\\s*  (\\*{0,2}\\w+)\\s*:?\\n\", entry)\n+            if re_only_desc:\n+                param_name = match.group(1)\n+                param_desc = match.group(2)\n+                param_type = None\n+            else:\n+                param_name = match.group(1)\n+                param_type = match.group(3)\n+                param_desc = match.group(4)\n+\n+            if param_type:\n+                params_with_type.add(param_name)\n+\n+            if param_desc:\n+                params_with_doc.add(param_name)\n+\n+        return params_with_doc, params_with_type\n+\n     @staticmethod\n     def min_section_indent(section_match):\n         return len(section_match.group(1))\n",
  "test_patch": "diff --git a/tests/extensions/test_check_docs.py b/tests/extensions/test_check_docs.py\n--- a/tests/extensions/test_check_docs.py\n+++ b/tests/extensions/test_check_docs.py\n@@ -1338,13 +1338,17 @@ def my_func(named_arg, **kwargs):\n     def test_finds_args_without_type_numpy(self) -> None:\n         node = astroid.extract_node(\n             '''\n-        def my_func(named_arg, *args):\n+        def my_func(named_arg, typed_arg: bool, untyped_arg, *args):\n             \"\"\"The docstring\n \n             Args\n             ----\n             named_arg : object\n                 Returned\n+            typed_arg\n+                Other argument without numpy type annotation\n+            untyped_arg\n+                Other argument without any type annotation\n             *args :\n                 Optional Arguments\n \n@@ -1357,7 +1361,9 @@ def my_func(named_arg, *args):\n                 return named_arg\n         '''\n         )\n-        with self.assertNoMessages():\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"missing-type-doc\", node=node, args=(\"untyped_arg\",))\n+        ):\n             self.checker.visit_functiondef(node)\n \n     def test_finds_args_with_xref_type_google(self) -> None:\n",
  "problem_statement": "False positive missing-param-doc on numpy style when ` : <type>` omitted\n### Bug description\n\n```python\n\"\"\"A module.\"\"\"\r\n\r\n\r\n# https://numpydoc.readthedocs.io/en/latest/format.html#parameters\r\n# The numpy style guide describes that parameters can be defined without\r\n# being followed with a semi-colon and the type, i.e. arg2 below should\r\n# not fail either of the raised checks.\r\n\r\ndef func(arg1: bool, arg2: bool):\r\n    \"\"\"Return args.\r\n\r\n    Parameters\r\n    ----------\r\n    arg1 : bool\r\n        arg1\r\n\r\n    arg2\r\n        arg2\r\n    \"\"\"\r\n    return arg1, arg2\n```\n\n\n### Configuration\n\n```ini\n[MASTER]\r\nload-plugins=pylint.extensions.docparams\r\n\r\n[PARAMETER_DOCUMENTATION]\r\ndefault-docstring-type=numpy\n```\n\n\n### Command used\n\n```shell\npylint pylint_bug.py\n```\n\n\n### Pylint output\n\n```shell\n************* Module pylint_bug\r\npylint_bug.py:9:0: W9015: \"arg2\" missing in parameter documentation (missing-param-doc)\r\npylint_bug.py:9:0: W9012: Missing return type documentation (missing-return-type-doc)\n```\n\n\n### Expected behavior\n\nWould not have expected either `missing-param-doc` or `missing-return-type-doc` checks to have failed.\n\n### Pylint version\n\n```shell\npylint 2.11.1\r\nastroid 2.8.4\r\nPython 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]\n```\n\n\n### OS / Environment\n\nVS Code 1.61.2\r\nWindows 10 Pro 21H1\n\n### Additional dependencies\n\n_No response_\nFalse positive missing-param-doc on numpy style when ` : <type>` omitted\n### Bug description\n\n```python\n\"\"\"A module.\"\"\"\r\n\r\n\r\n# https://numpydoc.readthedocs.io/en/latest/format.html#parameters\r\n# The numpy style guide describes that parameters can be defined without\r\n# being followed with a semi-colon and the type, i.e. arg2 below should\r\n# not fail either of the raised checks.\r\n\r\ndef func(arg1: bool, arg2: bool):\r\n    \"\"\"Return args.\r\n\r\n    Parameters\r\n    ----------\r\n    arg1 : bool\r\n        arg1\r\n\r\n    arg2\r\n        arg2\r\n    \"\"\"\r\n    return arg1, arg2\n```\n\n\n### Configuration\n\n```ini\n[MASTER]\r\nload-plugins=pylint.extensions.docparams\r\n\r\n[PARAMETER_DOCUMENTATION]\r\ndefault-docstring-type=numpy\n```\n\n\n### Command used\n\n```shell\npylint pylint_bug.py\n```\n\n\n### Pylint output\n\n```shell\n************* Module pylint_bug\r\npylint_bug.py:9:0: W9015: \"arg2\" missing in parameter documentation (missing-param-doc)\r\npylint_bug.py:9:0: W9012: Missing return type documentation (missing-return-type-doc)\n```\n\n\n### Expected behavior\n\nWould not have expected either `missing-param-doc` or `missing-return-type-doc` checks to have failed.\n\n### Pylint version\n\n```shell\npylint 2.11.1\r\nastroid 2.8.4\r\nPython 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]\n```\n\n\n### OS / Environment\n\nVS Code 1.61.2\r\nWindows 10 Pro 21H1\n\n### Additional dependencies\n\n_No response_\n",
  "hints_text": "With respect to `missing-return-type-doc`:\r\nI think this is due to the fact that the section `Returns` is missing.\r\nPerhaps this is allowed in `numpy` documentation and we should update this, but if you look at the docs you linked there is actually a section on return type annotation.\r\nhttps://numpydoc.readthedocs.io/en/latest/format.html#returns\r\n\r\nSo this should work:\r\n```python\r\ndef func(arg1: bool, arg2: bool):\r\n    \"\"\"Return args.\r\n\r\n    Parameters\r\n    ----------\r\n    arg1 : bool\r\n        arg1\r\n\r\n    arg2\r\n        arg2\r\n     \r\n    Returns\r\n    ----------\r\n    bool\r\n    bool (?, the type is required for return type documentation)\r\n    \"\"\"\r\n    return arg1, arg2\r\n```\r\n\r\n`missing-param-doc` seems to be a false positive indeed.\n@DanielNoord, absolutely, apologises for confusing the issue. Do you want me to close and raise a new tidier version?\r\n\r\nand thank you for the immediate response!\nNo worries. It is already really helpful to have some code that should reproduce the issue. No need to open a new one.\r\n\r\nIt is strange as I feel I have visited this part of the code recently and fixed something similar, but I can't find that PR. I will assign myself and investigate in the coming days!\nTremendous, thanks!\r\n\r\nMight you have been looking at this [issue](https://github.com/PyCQA/pylint/issues/4035)? It was the only one I could find along simlar lines.\nNo, but I might as well look at that one at the same time ðŸ˜„ \n> No, but I might as well look at that one at the same time ðŸ˜„\r\n\r\n:smile: wow, two for the price of one! Thanks again!\nWith respect to `missing-return-type-doc`:\r\nI think this is due to the fact that the section `Returns` is missing.\r\nPerhaps this is allowed in `numpy` documentation and we should update this, but if you look at the docs you linked there is actually a section on return type annotation.\r\nhttps://numpydoc.readthedocs.io/en/latest/format.html#returns\r\n\r\nSo this should work:\r\n```python\r\ndef func(arg1: bool, arg2: bool):\r\n    \"\"\"Return args.\r\n\r\n    Parameters\r\n    ----------\r\n    arg1 : bool\r\n        arg1\r\n\r\n    arg2\r\n        arg2\r\n     \r\n    Returns\r\n    ----------\r\n    bool\r\n    bool (?, the type is required for return type documentation)\r\n    \"\"\"\r\n    return arg1, arg2\r\n```\r\n\r\n`missing-param-doc` seems to be a false positive indeed.\n@DanielNoord, absolutely, apologises for confusing the issue. Do you want me to close and raise a new tidier version?\r\n\r\nand thank you for the immediate response!\nNo worries. It is already really helpful to have some code that should reproduce the issue. No need to open a new one.\r\n\r\nIt is strange as I feel I have visited this part of the code recently and fixed something similar, but I can't find that PR. I will assign myself and investigate in the coming days!\nTremendous, thanks!\r\n\r\nMight you have been looking at this [issue](https://github.com/PyCQA/pylint/issues/4035)? It was the only one I could find along simlar lines.\nNo, but I might as well look at that one at the same time ðŸ˜„ \n> No, but I might as well look at that one at the same time ðŸ˜„\r\n\r\n:smile: wow, two for the price of one! Thanks again!",
  "created_at": "2021-10-30T14:37:50Z",
  "version": "2.11",
  "FAIL_TO_PASS": "[\"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_without_type_numpy\"]",
  "PASS_TO_PASS": "[\"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_in_sphinx_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_type_doc_google_docstring_exempt_kwonly_args\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_with_annotations_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_default_arg_with_annotations_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_with_partial_annotations_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_non_builtin_annotations_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_non_builtin_annotations_for_returntype_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_func_params_and_keyword_params_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_func_params_and_wrong_keyword_params_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_in_numpy_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_tolerate_no_param_documentation_at_all\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_don_t_tolerate_no_param_documentation_at_all\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_tolerate_no_param_documentation_at_all\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_method_params_in_sphinx_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_method_params_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_method_params_in_numpy_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_existing_func_params_in_sphinx_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_existing_func_params_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_existing_func_params_in_numpy_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_wrong_name_of_func_params_in_sphinx_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_wrong_name_of_func_params_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_wrong_name_of_func_params_in_numpy_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_func_params_in_sphinx_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_func_params_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_func_params_in_numpy_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_and_attributes_in_class_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_init_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_init_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_init_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_constr_params_in_class\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_constr_params_in_init\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_and_init_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_and_init_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_and_init_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_kwonlyargs_are_taken_in_account\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_args_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_kwargs_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_args_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_kwargs_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_args_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_kwargs_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_without_type_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_kwargs_without_type_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_without_type_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_kwargs_without_type_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_with_xref_type_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_with_xref_type_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_kwargs_without_type_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict(str,str)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict[str,str]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[list[tokenize.TokenInfo]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict(str,\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict[str,\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[int\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int)\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict(str,str)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict[str,str]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[list[tokenize.TokenInfo]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict(str,\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict[str,\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[int\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int)\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict(str,str)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict[str,str]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[list[tokenize.TokenInfo]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict(str,\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict[str,\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[int\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int)\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[dict(str,str)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[dict[str,str]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[tuple(int)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[list[tokenize.TokenInfo]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_optional_specifier_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_optional_specifier_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_short_name_exception\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_in_setter_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_google_2\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_numpy_2\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_property_return_type_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_property_return_type_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_property_return_type_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_annotation_property_return_type_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_property_return_type_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_annotation_property_return_type_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_property_return_type_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_property_return_type_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_non_property_return_type_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_non_property_return_type_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_non_property_return_type_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_non_property_annotation_return_type_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_raise_notimplementederror_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_google_2\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_numpy_2\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_ignored_argument_names_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_ignored_argument_names_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_ignored_argument_names_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_useless_docs_ignored_argument_names_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_useless_docs_ignored_argument_names_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_useless_docs_ignored_argument_names_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_skip_no_docstring_rgx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_all_docstring_rgx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_fail_empty_docstring_rgx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_fail_docparams_check_init\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_no_docstring_rgx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_skip_docstring_min_length\"]",
  "environment_setup_commit": "2c687133e4fcdd73ae3afa2e79be2160b150bb82",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.910108",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}