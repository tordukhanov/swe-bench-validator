{
  "repo": "django/django",
  "instance_id": "django__django-12568",
  "base_commit": "3857a08bdb05e30f90f56a7dd0d505ad19f4c403",
  "patch": "diff --git a/django/contrib/humanize/templatetags/humanize.py b/django/contrib/humanize/templatetags/humanize.py\n--- a/django/contrib/humanize/templatetags/humanize.py\n+++ b/django/contrib/humanize/templatetags/humanize.py\n@@ -140,7 +140,8 @@ def intword(value):\n     except (TypeError, ValueError):\n         return value\n \n-    if value < 1000000:\n+    abs_value = abs(value)\n+    if abs_value < 1000000:\n         return value\n \n     def _check_for_i18n(value, float_formatted, string_formatted):\n@@ -156,10 +157,10 @@ def _check_for_i18n(value, float_formatted, string_formatted):\n \n     for exponent, converters in intword_converters:\n         large_number = 10 ** exponent\n-        if value < large_number * 1000:\n+        if abs_value < large_number * 1000:\n             new_value = value / large_number\n             rounded_value = round_away_from_one(new_value)\n-            return _check_for_i18n(new_value, *converters(rounded_value))\n+            return _check_for_i18n(new_value, *converters(abs(rounded_value)))\n     return value\n \n \n",
  "test_patch": "diff --git a/tests/humanize_tests/tests.py b/tests/humanize_tests/tests.py\n--- a/tests/humanize_tests/tests.py\n+++ b/tests/humanize_tests/tests.py\n@@ -99,19 +99,27 @@ def test_intcomma_without_number_grouping(self):\n             self.humanize_tester([100], ['100'], 'intcomma')\n \n     def test_intword(self):\n-        test_list = (\n+        # Positive integers.\n+        test_list_positive = (\n             '100', '1000000', '1200000', '1290000', '1000000000', '2000000000',\n             '6000000000000', '1300000000000000', '3500000000000000000000',\n-            '8100000000000000000000000000000000', None, ('1' + '0' * 100),\n+            '8100000000000000000000000000000000', ('1' + '0' * 100),\n             ('1' + '0' * 104),\n         )\n-        result_list = (\n+        result_list_positive = (\n             '100', '1.0 million', '1.2 million', '1.3 million', '1.0 billion',\n             '2.0 billion', '6.0 trillion', '1.3 quadrillion', '3.5 sextillion',\n-            '8.1 decillion', None, '1.0 googol', ('1' + '0' * 104),\n+            '8.1 decillion', '1.0 googol', ('1' + '0' * 104),\n         )\n+        # Negative integers.\n+        test_list_negative = ('-' + test for test in test_list_positive)\n+        result_list_negative = ('-' + result for result in result_list_positive)\n         with translation.override('en'):\n-            self.humanize_tester(test_list, result_list, 'intword')\n+            self.humanize_tester(\n+                (*test_list_positive, *test_list_negative, None),\n+                (*result_list_positive, *result_list_negative, None),\n+                'intword',\n+            )\n \n     def test_i18n_intcomma(self):\n         test_list = (100, 1000, 10123, 10311, 1000000, 1234567.25,\n@@ -123,17 +131,25 @@ def test_i18n_intcomma(self):\n                 self.humanize_tester(test_list, result_list, 'intcomma')\n \n     def test_i18n_intword(self):\n-        test_list = (\n+        # Positive integers.\n+        test_list_positive = (\n             '100', '1000000', '1200000', '1290000', '1000000000', '2000000000',\n             '6000000000000',\n         )\n-        result_list = (\n+        result_list_positive = (\n             '100', '1,0 Million', '1,2 Millionen', '1,3 Millionen',\n             '1,0 Milliarde', '2,0 Milliarden', '6,0 Billionen',\n         )\n+        # Negative integers.\n+        test_list_negative = ('-' + test for test in test_list_positive)\n+        result_list_negative = ('-' + result for result in result_list_positive)\n         with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True):\n             with translation.override('de'):\n-                self.humanize_tester(test_list, result_list, 'intword')\n+                self.humanize_tester(\n+                    (*test_list_positive, *test_list_negative),\n+                    (*result_list_positive, *result_list_negative),\n+                    'intword',\n+                )\n \n     def test_apnumber(self):\n         test_list = [str(x) for x in range(1, 11)]\n",
  "problem_statement": "Django humanize's intword filter does not accept negative numbers.\nDescription\n\t\nDjango's humanize intword filter does not work with negative numbers. I have created a solution using absolute value. \nHere is my pull request: â€‹https://github.com/django/django/pull/12568\n",
  "hints_text": "",
  "created_at": "2020-03-14T16:35:50Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_i18n_intword (humanize_tests.tests.HumanizeTests)\", \"test_inflection_for_timedelta (humanize_tests.tests.HumanizeTests)\", \"test_intword (humanize_tests.tests.HumanizeTests)\", \"test_l10n_intcomma (humanize_tests.tests.HumanizeTests)\"]",
  "PASS_TO_PASS": "[\"test_apnumber (humanize_tests.tests.HumanizeTests)\", \"Allow html in output on i18n strings\", \"test_i18n_intcomma (humanize_tests.tests.HumanizeTests)\", \"test_intcomma (humanize_tests.tests.HumanizeTests)\", \"test_intcomma_without_number_grouping (humanize_tests.tests.HumanizeTests)\", \"test_naturalday (humanize_tests.tests.HumanizeTests)\", \"test_naturalday_tz (humanize_tests.tests.HumanizeTests)\", \"test_naturalday_uses_localtime (humanize_tests.tests.HumanizeTests)\", \"test_naturaltime (humanize_tests.tests.HumanizeTests)\", \"test_naturaltime_as_documented (humanize_tests.tests.HumanizeTests)\", \"test_ordinal (humanize_tests.tests.HumanizeTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.630746",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}