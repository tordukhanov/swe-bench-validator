{
  "repo": "django/django",
  "instance_id": "django__django-12754",
  "base_commit": "18759b2209ff556aed7f20d83cbf23e3d234e41c",
  "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -563,6 +563,16 @@ def generate_created_models(self):\n                 if isinstance(base, str) and \".\" in base:\n                     base_app_label, base_name = base.split(\".\", 1)\n                     dependencies.append((base_app_label, base_name, None, True))\n+                    # Depend on the removal of base fields if the new model has\n+                    # a field with the same name.\n+                    old_base_model_state = self.from_state.models.get((base_app_label, base_name))\n+                    new_base_model_state = self.to_state.models.get((base_app_label, base_name))\n+                    if old_base_model_state and new_base_model_state:\n+                        removed_base_fields = set(old_base_model_state.fields).difference(\n+                            new_base_model_state.fields,\n+                        ).intersection(model_state.fields)\n+                        for removed_base_field in removed_base_fields:\n+                            dependencies.append((base_app_label, base_name, removed_base_field, False))\n             # Depend on the other end of the primary key if it's a relation\n             if primary_key_rel:\n                 dependencies.append((\n",
  "test_patch": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2454,3 +2454,28 @@ def test_mti_inheritance_model_removal(self):\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n         self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n",
  "problem_statement": "FieldError when migrating field to new model subclass.\nDescription\n\t\nAnalogous to #21890. If creating a model subclass and moving a field onto it in the same step, makemigrations works but migrate dies with django.core.exceptions.FieldError: Local field 'title' in class 'Book' clashes with field of the same name from base class 'Readable'.\nFor example, take this model:\nfrom django.db import models\nclass Readable(models.Model):\n\ttitle = models.CharField(max_length=200)\nAnd change to this:\nfrom django.db import models\nclass Readable(models.Model):\n\tpass\nclass Book(Readable):\n\ttitle = models.CharField(max_length=200)\nThe migration generates with CreateModel for Book, then RemoveField for Readable.title. But running it produces the error.\nReversing the order of the migration operations makes it pass. The auto-detector should be able to use this order.\n",
  "hints_text": "Tentatively accepted for a future investigation. I'm not sure if this is feasible because detecting changes related with models' bases are tricky. Moreover you will lose data with such change, so IMO it's preferable to handle this manually.\nMaybe the makemigrations could present some kind of info about the data being lost and let the user decide if the migrations be applied or not?\nMaybe the makemigrations could present some kind of info about the data being lost and let the user decide if the migrations be applied or not? Yes, or it could at least detect that the migration it generates can't be applied without manual editing to control the data loss, and it could show a warning/message about this.\nwould this be something doable for a new beginner like me? much appreciated! should I just display some message or warning like \"the migration can't be applied unless some manual editing takes place\" whenever this happens? or do I give the user some sort of yes-no option so that they can choose to makemigration or not? or it is appropriate to allow auto-detector to use the reversed order when encountering such a situation? or I think this may be more appropriate: we may need to allow auto-detector to use the reversed or correct order (that doesn't throw an error) when encountering such a situation as well as display some sort of message or warning along the way since the message may educate people who want to take action like this.\nI think it should be doable to teach the auto-detector about generating these operations in the right order. I think the best approach would be to adjust check_dependency to account for this case. What's happening now is that created models detection runs before removed models one so while both operations depend on Readable model. It's possible that generate_created_models might need to be adjusted to add a dependency on field removal of all of its base to make sure the order is swapped. I think the correct dependency representation is (base_app_label, base_model_name, field_name, False) for all fields in all bases in ​https://github.com/django/django/blob/6fbce45b0376f0ec8f3bf244f4f1f8d62c201f58/django/db/migrations/autodetector.py#L561-L565. Something the solution has to consider is when a field is removed from a base while two subclasses are added in the same run with this field (e.g. an extra class Magazine(Readable): title = models.CharField(max_length=200) would be added to the reporter's example). In this case a single RemoveField must be generated and not multiple ones.\nReplying to Simon Charette: I think it should be doable to teach the auto-detector about generating these operations in the right order. I think the best approach would be to adjust check_dependency to account for this case. I am not able to figure out how adjusting check_dependency, could help solve this issue. Assuming that I loop through all fields present in the base model, check if they're present in the inherited model, and if there are any such fields present, append base_app_label, base_name, field_name, False to dependencies, how would adjusting check_dependency able to reorder the migrations? Thanks Sanskar\nReplying to Sanskar Jaiswal: Replying to Simon Charette: I think it should be doable to teach the auto-detector about generating these operations in the right order. I think the best approach would be to adjust check_dependency to account for this case. I am not able to figure out how adjusting check_dependency, could help solve this issue. Assuming that I loop through all fields present in the base model, check if they're present in the inherited model, and if there are any such fields present, append base_app_label, base_name, field_name, False to dependencies, how would adjusting check_dependency able to reorder the migrations? Thanks Sanskar hi Sanskar, I am still working on this issue. Sorry about not posting my progress here! it may take a longer time for me to fix it since I am a newbie, so i gotta read the code. since this is for my school assignment, may you work on other issues or if it would be much better if we can solve it together so that we both get credits for it? This is really important for me, since the school assignment requires me to do some actual contribution to the project, and I have spent a fair amount of time reading the code and testing it. I really appreciate that! And I think the operations for you weren't swapped maybe because you didn't add a dependency of the removed field for all its bases? And also adjusting check_dependency seems unnecessary since it already handles everything well from my testing. I was able to swap the operations when I appended a manual dependency on field removal of all of its bases in generate_created_models. If you don't mind me asking, how am I able to know that is the field we are tryna remove? I am reading the code currently, but I will still leave this \"dumb\" question here just in case I don't find it by the time. In addition, in terms of possible duplicate Remove_fields, I wasn't able to generate multiple same Remove_fields for title, so I guess this is already handled somewhere in the code?\nHey Nan, Happy that you figured out the solution. By all means, continue working on this, hope you get a good grade on your assignment. IMO, we could check that this is the field we are trying to remove from the base class by looping through all the fields and checking if that field is also present in a sub class. Since that’s not allowed, you know that this is the field you wanna remove Cheers Sanskar\nReplying to Sanskar Jaiswal: Hey Nan, Happy that you figured out the solution. By all means, continue working on this, hope you get a good grade on your assignment. IMO, we could check that this is the field we are trying to remove from the base class by looping through all the fields and checking if that field is also present in a sub class. Since that’s not allowed, you know that this is the field you wanna remove Cheers Sanskar Thank you so much for your advice! I still can't figure out how to find title field in the base class readable. I was able to find title field from a sub class Book using model_state.fields. And I tried model_state = self.to_state.models[base_app_label, base_model_name] to find readable's fields, but there is only one field left which is the self-generated id field. Not sure why the field title is gone. I am pretty sure I am doing it wrong. But I am just wondering if there are other ways to retrieve all fields from the base class, which is readable in this case. much appreciated! Cheers, Nan\nAnd I tried model_state = self.to_state.models[base_app_label, base_model_name] to find readable's fields, but there is only one field left which is the self-generated id field. Not sure why the field title is gone. I am pretty sure I am doing it wrong. But I am just wondering if there are other ways to retrieve all fields from the base class, which is readable in this case. much appreciated! Since we remove title from Readable, it doesn't show up in self.to_state.models[base_app_label, base_model_name]. Doing this gives you, the fields of our latest intended model, in which Readable is just an empty model with one AutoField as the \"self generated id.\" To get the intended fields of Readable, you need to use self.from_state.models[base_app_label, base_model_name] since from_state refers to the previous state, i.e. in this case, just one Readable model with a CharField named title (and the id of course).\nReplying to Sanskar Jaiswal: And I tried model_state = self.to_state.models[base_app_label, base_model_name] to find readable's fields, but there is only one field left which is the self-generated id field. Not sure why the field title is gone. I am pretty sure I am doing it wrong. But I am just wondering if there are other ways to retrieve all fields from the base class, which is readable in this case. much appreciated! Since we remove title from Readable, it doesn't show up in self.to_state.models[base_app_label, base_model_name]. Doing this gives you, the fields of our latest intended model, in which Readable is just an empty model with one AutoField as the \"self generated id.\" To get the intended fields of Readable, you need to use self.from_state.models[base_app_label, base_model_name] since from_state refers to the previous state, i.e. in this case, just one Readable model with a CharField named title (and the id of course). Hi Sanskar, Thanks! I guess I should've done a better job at code reading :). I will try it out today since I have an internship interview coming up in a few hours! Much appreciated! I will keep u posted!\nHi Y'all, I was looking into this test case ​https://github.com/django/django/blob/6fbce45b0376f0ec8f3bf244f4f1f8d62c201f58/tests/model_inheritance/test_abstract_inheritance.py#L160-L173. This case seems to cover the case for this problem, but the issue is python manage.py migrate throws an error that we want to handle. Or there is no need to write a test case for that since we just want to change the behavior? if we do need test cases, How should I go about writing the unit test? Much appreciated! And I am still trying to adjust the dependencies...\nNan Liu, this test doesn't cover the issue, because it's not related with migrations. We have here inline models so migrations are not involved, it doesn't fail. New tests should be added to tests/migrations, you can find there similar tests.\nReplying to felixxm: Nan Liu, this test doesn't cover the issue, because it's not related with migrations. We have here inline models so migrations are not involved, it doesn't fail. New tests should be added to tests/migrations, you can find there similar tests. I'm not sure whether I should put tests in test_autoencoder or test_operations since the issue is related to adjusting autoencoder as well as operations swapping. My intuition tells me that I should add some tests in test_autoencoder.py. When I do local testings, two separate migrations(one is to create Readable with fields title and name, second one is to remove fields from Readable and add these two fields into inheriting models like Book, Magazine), will solve the issue. But if i do self.get_change([Readable], [Readable_with_no_fields, Book, Magazine]), the test case tells me that models are created before base fields are removed, which is different from what I have on local testings according to the console message. Migrations for 'test': test/migrations/0002_auto_20200418_1007.py - Remove field name from readable - Remove field title from readable - Create model Book - Create model Magazine In this case, it should've been [\"RemoveField\", \"RemoveField\", \"CreateModel\", \"CreateModel\"], but currently it is [\"CreateModel\", \"CreateModel\", \"RemoveField\", \"RemoveField\"]. How can I create one migration for Readable first and then create the second one for the updated models? Since the problem is that we need the first migration to be associated with the second one.\nHi @nanliu I believe the test for this should be in test_autodetector.py. The tests there don't create whole migrations. They make assertions on the output operations. Check out the test I wrote for a similar ticket in ​https://github.com/django/django/pull/12313/files#diff-c11e6432df7086eda3dfb9ab8e5b2839 , and those around that. They set up the before and after model states, ask the autodetector to find the operations through get_changes(), then make assertions on the operations. The \"before\" model states describe the state of the models before the change, which would be pulled from the migration history - in this case where just Readable exists. The \"after\" states describe the state the current model state, which would be pulled from the apps' model definitios - in this case, Readable with no fields and Book with the title field. When writing a test, please try use the predefined model states to reduce memory usage. Hope that helps you write a test. Once there's a failing test it should be easier to try find the fix.\nReplying to Adam (Chainz) Johnson: Hi @nanliu I believe the test for this should be in test_autodetector.py. The tests there don't create whole migrations. They make assertions on the output operations. Check out the test I wrote for a similar ticket in ​https://github.com/django/django/pull/12313/files#diff-c11e6432df7086eda3dfb9ab8e5b2839 , and those around that. They set up the before and after model states, ask the autodetector to find the operations through get_changes(), then make assertions on the operations. The \"before\" model states describe the state of the models before the change, which would be pulled from the migration history - in this case where just Readable exists. The \"after\" states describe the state the current model state, which would be pulled from the apps' model definitios - in this case, Readable with no fields and Book with the title field. When writing a test, please try use the predefined model states to reduce memory usage. Hope that helps you write a test. Once there's a failing test it should be easier to try find the fix. Hi Adam, After I spent hours and hours on this, I found out keyword tuples (app_label_name, name) are supposed to be lower case when we access it using self.from_state.models and self.from_state.models...\nI am wondering when people are gonna look at the pull request? since if it is accepted, then I would possibly gain some extra credits for my class! much appreciated!!\nNan Liu, please don't close tickets that are not fixed. We first need to have, review and merge patch.\nReplying to felixxm: Nan Liu, please don't close tickets that are not fixed. We first need to have, review and merge patch. felixxm, my bad. sorry about that\n​PR",
  "created_at": "2020-04-19T10:59:30Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_add_model_with_field_removed_from_base_model (migrations.test_autodetector.AutodetectorTests)\"]",
  "PASS_TO_PASS": "[\"test_add_alter_order_with_respect_to (migrations.test_autodetector.AutodetectorTests)\", \"test_add_blank_textfield_and_charfield (migrations.test_autodetector.AutodetectorTests)\", \"Test change detection of new constraints.\", \"test_add_date_fields_with_auto_now_add_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_add_not_asking_for_null_addition (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_not_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of new fields.\", \"test_add_field_and_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"#22030 - Adding a field with a default should work.\", \"Tests index/unique_together detection.\", \"Test change detection of new indexes.\", \"#22435 - Adding a ManyToManyField should not prompt for a default.\", \"test_add_model_order_with_respect_to (migrations.test_autodetector.AutodetectorTests)\", \"test_add_non_blank_textfield_and_charfield (migrations.test_autodetector.AutodetectorTests)\", \"Tests detection for adding db_table in model's options.\", \"Tests detection for changing db_table in model's options'.\", \"test_alter_db_table_no_changes (migrations.test_autodetector.AutodetectorTests)\", \"Tests detection for removing db_table in model's options.\", \"test_alter_db_table_with_model_change (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_to_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_to_not_null_oneoff_default (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_to_not_null_with_default (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_to_not_null_without_default (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_fk_before_model_deletion (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_many_to_many (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_model_managers (migrations.test_autodetector.AutodetectorTests)\", \"Changing a model's options should make a change.\", \"Changing a proxy model's options should also make a change.\", \"Tests auto-naming of migrations for graph matching.\", \"Bases of other models come first.\", \"test_circular_dependency_mixed_addcreate (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_dependency_swappable (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_dependency_swappable2 (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_dependency_swappable_self (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_fk_dependency (migrations.test_autodetector.AutodetectorTests)\", \"test_concrete_field_changed_to_many_to_many (migrations.test_autodetector.AutodetectorTests)\", \"test_create_model_and_unique_together (migrations.test_autodetector.AutodetectorTests)\", \"Test creation of new model with constraints already defined.\", \"Test creation of new model with indexes already defined.\", \"test_create_with_through_model (migrations.test_autodetector.AutodetectorTests)\", \"test_custom_deconstructible (migrations.test_autodetector.AutodetectorTests)\", \"Tests custom naming of migrations for graph matching.\", \"Field instances are handled correctly by nested deconstruction.\", \"test_deconstruct_type (migrations.test_autodetector.AutodetectorTests)\", \"Nested deconstruction descends into dict values.\", \"Nested deconstruction descends into lists.\", \"Nested deconstruction descends into tuples.\", \"test_default_related_name_option (migrations.test_autodetector.AutodetectorTests)\", \"test_different_regex_does_alter (migrations.test_autodetector.AutodetectorTests)\", \"test_empty_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"test_first_dependency (migrations.test_autodetector.AutodetectorTests)\", \"Having a ForeignKey automatically adds a dependency.\", \"test_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests)\", \"test_foo_together_no_changes (migrations.test_autodetector.AutodetectorTests)\", \"test_foo_together_ordering (migrations.test_autodetector.AutodetectorTests)\", \"Tests unique_together and field removal detection & ordering\", \"test_foreign_key_removed_before_target_model (migrations.test_autodetector.AutodetectorTests)\", \"test_identical_regex_doesnt_alter (migrations.test_autodetector.AutodetectorTests)\", \"test_keep_db_table_with_model_change (migrations.test_autodetector.AutodetectorTests)\", \"test_last_dependency (migrations.test_autodetector.AutodetectorTests)\", \"test_m2m_w_through_multistep_remove (migrations.test_autodetector.AutodetectorTests)\", \"test_managed_to_unmanaged (migrations.test_autodetector.AutodetectorTests)\", \"test_many_to_many_changed_to_concrete_field (migrations.test_autodetector.AutodetectorTests)\", \"test_many_to_many_removed_before_through_model (migrations.test_autodetector.AutodetectorTests)\", \"test_many_to_many_removed_before_through_model_2 (migrations.test_autodetector.AutodetectorTests)\", \"test_mti_inheritance_model_removal (migrations.test_autodetector.AutodetectorTests)\", \"#23956 - Inheriting models doesn't move *_ptr fields into AddField operations.\", \"test_nested_deconstructible_objects (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of new models.\", \"test_non_circular_foreignkey_dependency_removal (migrations.test_autodetector.AutodetectorTests)\", \"Tests deletion of old models.\", \"Test change detection of reordering of fields in indexes.\", \"test_pk_fk_included (migrations.test_autodetector.AutodetectorTests)\", \"The autodetector correctly deals with proxy models.\", \"Bases of proxies come first.\", \"test_proxy_custom_pk (migrations.test_autodetector.AutodetectorTests)\", \"FK dependencies still work on proxy models.\", \"test_proxy_to_mti_with_fk_to_proxy (migrations.test_autodetector.AutodetectorTests)\", \"test_proxy_to_mti_with_fk_to_proxy_proxy (migrations.test_autodetector.AutodetectorTests)\", \"test_remove_alter_order_with_respect_to (migrations.test_autodetector.AutodetectorTests)\", \"Test change detection of removed constraints.\", \"Tests autodetection of removed fields.\", \"test_remove_field_and_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"Test change detection of removed indexes.\", \"Tests autodetection of renamed fields.\", \"test_rename_field_and_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_field_foreign_key_to_field (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_foreign_object_fields (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_m2m_through_model (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of renamed models.\", \"test_rename_model_case (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_model_reverse_relation_dependencies (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_model_with_fks_in_different_position (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_model_with_renamed_rel_field (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_referenced_primary_key (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_related_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests)\", \"test_replace_string_with_foreignkey (migrations.test_autodetector.AutodetectorTests)\", \"test_same_app_circular_fk_dependency (migrations.test_autodetector.AutodetectorTests)\", \"test_same_app_circular_fk_dependency_with_unique_together_and_indexes (migrations.test_autodetector.AutodetectorTests)\", \"test_same_app_no_fk_dependency (migrations.test_autodetector.AutodetectorTests)\", \"Setting order_with_respect_to adds a field.\", \"test_supports_functools_partial (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_changed (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_circular_multi_mti (migrations.test_autodetector.AutodetectorTests)\", \"Swappable models get their CreateModel first.\", \"test_trim_apps (migrations.test_autodetector.AutodetectorTests)\", \"The autodetector correctly deals with managed models.\", \"test_unmanaged_custom_pk (migrations.test_autodetector.AutodetectorTests)\", \"test_unmanaged_delete (migrations.test_autodetector.AutodetectorTests)\", \"test_unmanaged_to_managed (migrations.test_autodetector.AutodetectorTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.634531",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}