{
  "repo": "django/django",
  "instance_id": "django__django-13207",
  "base_commit": "ba6b32e5efc4c813ba4432777b3b1743d4205d14",
  "patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -247,6 +247,9 @@ def get_field_type(self, connection, table_name, row):\n         if field_type == 'CharField' and row.internal_size:\n             field_params['max_length'] = int(row.internal_size)\n \n+        if field_type in {'CharField', 'TextField'} and row.collation:\n+            field_params['db_collation'] = row.collation\n+\n         if field_type == 'DecimalField':\n             if row.precision is None or row.scale is None:\n                 field_notes.append(\ndiff --git a/django/db/backends/base/features.py b/django/db/backends/base/features.py\n--- a/django/db/backends/base/features.py\n+++ b/django/db/backends/base/features.py\n@@ -302,10 +302,17 @@ class BaseDatabaseFeatures:\n     # {'d': [{'f': 'g'}]}?\n     json_key_contains_list_matching_requires_list = False\n \n+    # Does the backend support column collations?\n+    supports_collation_on_charfield = True\n+    supports_collation_on_textfield = True\n+    # Does the backend support non-deterministic collations?\n+    supports_non_deterministic_collations = True\n+\n     # Collation names for use by the Django test suite.\n     test_collations = {\n         'ci': None,  # Case-insensitive.\n         'cs': None,  # Case-sensitive.\n+        'non_default': None,  # Non-default.\n         'swedish_ci': None  # Swedish case-insensitive.\n     }\n \ndiff --git a/django/db/backends/base/introspection.py b/django/db/backends/base/introspection.py\n--- a/django/db/backends/base/introspection.py\n+++ b/django/db/backends/base/introspection.py\n@@ -4,7 +4,11 @@\n TableInfo = namedtuple('TableInfo', ['name', 'type'])\n \n # Structure returned by the DB-API cursor.description interface (PEP 249)\n-FieldInfo = namedtuple('FieldInfo', 'name type_code display_size internal_size precision scale null_ok default')\n+FieldInfo = namedtuple(\n+    'FieldInfo',\n+    'name type_code display_size internal_size precision scale null_ok '\n+    'default collation'\n+)\n \n \n class BaseDatabaseIntrospection:\ndiff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -61,6 +61,7 @@ class BaseDatabaseSchemaEditor:\n     sql_alter_column_not_null = \"ALTER COLUMN %(column)s SET NOT NULL\"\n     sql_alter_column_default = \"ALTER COLUMN %(column)s SET DEFAULT %(default)s\"\n     sql_alter_column_no_default = \"ALTER COLUMN %(column)s DROP DEFAULT\"\n+    sql_alter_column_collate = \"ALTER COLUMN %(column)s TYPE %(type)s%(collation)s\"\n     sql_delete_column = \"ALTER TABLE %(table)s DROP COLUMN %(column)s CASCADE\"\n     sql_rename_column = \"ALTER TABLE %(table)s RENAME COLUMN %(old_column)s TO %(new_column)s\"\n     sql_update_with_default = \"UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL\"\n@@ -215,6 +216,10 @@ def column_sql(self, model, field, include_default=False):\n         # Check for fields that aren't actually columns (e.g. M2M)\n         if sql is None:\n             return None, None\n+        # Collation.\n+        collation = getattr(field, 'db_collation', None)\n+        if collation:\n+            sql += self._collate_sql(collation)\n         # Work out nullability\n         null = field.null\n         # If we were told to include a default value, do so\n@@ -676,8 +681,15 @@ def _alter_field(self, model, old_field, new_field, old_type, new_type,\n         actions = []\n         null_actions = []\n         post_actions = []\n+        # Collation change?\n+        old_collation = getattr(old_field, 'db_collation', None)\n+        new_collation = getattr(new_field, 'db_collation', None)\n+        if old_collation != new_collation:\n+            # Collation change handles also a type change.\n+            fragment = self._alter_column_collation_sql(model, new_field, new_type, new_collation)\n+            actions.append(fragment)\n         # Type change?\n-        if old_type != new_type:\n+        elif old_type != new_type:\n             fragment, other_actions = self._alter_column_type_sql(model, old_field, new_field, new_type)\n             actions.append(fragment)\n             post_actions.extend(other_actions)\n@@ -895,6 +907,16 @@ def _alter_column_type_sql(self, model, old_field, new_field, new_type):\n             [],\n         )\n \n+    def _alter_column_collation_sql(self, model, new_field, new_type, new_collation):\n+        return (\n+            self.sql_alter_column_collate % {\n+                'column': self.quote_name(new_field.column),\n+                'type': new_type,\n+                'collation': self._collate_sql(new_collation) if new_collation else '',\n+            },\n+            [],\n+        )\n+\n     def _alter_many_to_many(self, model, old_field, new_field, strict):\n         \"\"\"Alter M2Ms to repoint their to= endpoints.\"\"\"\n         # Rename the through table\n@@ -1274,6 +1296,9 @@ def _create_primary_key_sql(self, model, field):\n     def _delete_primary_key_sql(self, model, name):\n         return self._delete_constraint_sql(self.sql_delete_pk, model, name)\n \n+    def _collate_sql(self, collation):\n+        return ' COLLATE ' + self.quote_name(collation)\n+\n     def remove_procedure(self, procedure_name, param_types=()):\n         sql = self.sql_delete_procedure % {\n             'procedure': self.quote_name(procedure_name),\ndiff --git a/django/db/backends/mysql/features.py b/django/db/backends/mysql/features.py\n--- a/django/db/backends/mysql/features.py\n+++ b/django/db/backends/mysql/features.py\n@@ -46,6 +46,7 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     order_by_nulls_first = True\n     test_collations = {\n         'ci': 'utf8_general_ci',\n+        'non_default': 'utf8_esperanto_ci',\n         'swedish_ci': 'utf8_swedish_ci',\n     }\n \ndiff --git a/django/db/backends/mysql/introspection.py b/django/db/backends/mysql/introspection.py\n--- a/django/db/backends/mysql/introspection.py\n+++ b/django/db/backends/mysql/introspection.py\n@@ -10,7 +10,11 @@\n from django.utils.datastructures import OrderedSet\n \n FieldInfo = namedtuple('FieldInfo', BaseFieldInfo._fields + ('extra', 'is_unsigned', 'has_json_constraint'))\n-InfoLine = namedtuple('InfoLine', 'col_name data_type max_len num_prec num_scale extra column_default is_unsigned')\n+InfoLine = namedtuple(\n+    'InfoLine',\n+    'col_name data_type max_len num_prec num_scale extra column_default '\n+    'collation is_unsigned'\n+)\n \n \n class DatabaseIntrospection(BaseDatabaseIntrospection):\n@@ -84,6 +88,15 @@ def get_table_description(self, cursor, table_name):\n                     c.constraint_schema = DATABASE()\n             \"\"\", [table_name])\n             json_constraints = {row[0] for row in cursor.fetchall()}\n+        # A default collation for the given table.\n+        cursor.execute(\"\"\"\n+            SELECT  table_collation\n+            FROM    information_schema.tables\n+            WHERE   table_schema = DATABASE()\n+            AND     table_name = %s\n+        \"\"\", [table_name])\n+        row = cursor.fetchone()\n+        default_column_collation = row[0] if row else ''\n         # information_schema database gives more accurate results for some figures:\n         # - varchar length returned by cursor.description is an internal length,\n         #   not visible length (#5725)\n@@ -93,12 +106,17 @@ def get_table_description(self, cursor, table_name):\n             SELECT\n                 column_name, data_type, character_maximum_length,\n                 numeric_precision, numeric_scale, extra, column_default,\n+                CASE\n+                    WHEN collation_name = %s THEN NULL\n+                    ELSE collation_name\n+                END AS collation_name,\n                 CASE\n                     WHEN column_type LIKE '%% unsigned' THEN 1\n                     ELSE 0\n                 END AS is_unsigned\n             FROM information_schema.columns\n-            WHERE table_name = %s AND table_schema = DATABASE()\"\"\", [table_name])\n+            WHERE table_name = %s AND table_schema = DATABASE()\n+        \"\"\", [default_column_collation, table_name])\n         field_info = {line[0]: InfoLine(*line) for line in cursor.fetchall()}\n \n         cursor.execute(\"SELECT * FROM %s LIMIT 1\" % self.connection.ops.quote_name(table_name))\n@@ -116,6 +134,7 @@ def to_int(i):\n                 to_int(info.num_scale) or line[5],\n                 line[6],\n                 info.column_default,\n+                info.collation,\n                 info.extra,\n                 info.is_unsigned,\n                 line[0] in json_constraints,\ndiff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py\n--- a/django/db/backends/mysql/schema.py\n+++ b/django/db/backends/mysql/schema.py\n@@ -9,6 +9,7 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n     sql_alter_column_null = \"MODIFY %(column)s %(type)s NULL\"\n     sql_alter_column_not_null = \"MODIFY %(column)s %(type)s NOT NULL\"\n     sql_alter_column_type = \"MODIFY %(column)s %(type)s\"\n+    sql_alter_column_collate = \"MODIFY %(column)s %(type)s%(collation)s\"\n \n     # No 'CASCADE' which works as a no-op in MySQL but is undocumented\n     sql_delete_column = \"ALTER TABLE %(table)s DROP COLUMN %(column)s\"\ndiff --git a/django/db/backends/oracle/features.py b/django/db/backends/oracle/features.py\n--- a/django/db/backends/oracle/features.py\n+++ b/django/db/backends/oracle/features.py\n@@ -1,4 +1,4 @@\n-from django.db import InterfaceError\n+from django.db import DatabaseError, InterfaceError\n from django.db.backends.base.features import BaseDatabaseFeatures\n from django.utils.functional import cached_property\n \n@@ -61,9 +61,11 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     supports_boolean_expr_in_select_clause = False\n     supports_primitives_in_json_field = False\n     supports_json_field_contains = False\n+    supports_collation_on_textfield = False\n     test_collations = {\n         'ci': 'BINARY_CI',\n         'cs': 'BINARY',\n+        'non_default': 'SWEDISH_CI',\n         'swedish_ci': 'SWEDISH_CI',\n     }\n \n@@ -78,3 +80,14 @@ def introspected_field_types(self):\n             'SmallIntegerField': 'IntegerField',\n             'TimeField': 'DateTimeField',\n         }\n+\n+    @cached_property\n+    def supports_collation_on_charfield(self):\n+        with self.connection.cursor() as cursor:\n+            try:\n+                cursor.execute(\"SELECT CAST('a' AS VARCHAR2(4001)) FROM dual\")\n+            except DatabaseError as e:\n+                if e.args[0].code == 910:\n+                    return False\n+                raise\n+            return True\ndiff --git a/django/db/backends/oracle/introspection.py b/django/db/backends/oracle/introspection.py\n--- a/django/db/backends/oracle/introspection.py\n+++ b/django/db/backends/oracle/introspection.py\n@@ -95,14 +95,20 @@ def get_table_description(self, cursor, table_name):\n         # user_tab_columns gives data default for columns\n         cursor.execute(\"\"\"\n             SELECT\n-                column_name,\n-                data_default,\n+                user_tab_cols.column_name,\n+                user_tab_cols.data_default,\n                 CASE\n-                    WHEN char_used IS NULL THEN data_length\n-                    ELSE char_length\n+                    WHEN user_tab_cols.collation = user_tables.default_collation\n+                    THEN NULL\n+                    ELSE user_tab_cols.collation\n+                END collation,\n+                CASE\n+                    WHEN user_tab_cols.char_used IS NULL\n+                    THEN user_tab_cols.data_length\n+                    ELSE user_tab_cols.char_length\n                 END as internal_size,\n                 CASE\n-                    WHEN identity_column = 'YES' THEN 1\n+                    WHEN user_tab_cols.identity_column = 'YES' THEN 1\n                     ELSE 0\n                 END as is_autofield,\n                 CASE\n@@ -117,10 +123,13 @@ def get_table_description(self, cursor, table_name):\n                     ELSE 0\n                 END as is_json\n             FROM user_tab_cols\n-            WHERE table_name = UPPER(%s)\"\"\", [table_name])\n+            LEFT OUTER JOIN\n+                user_tables ON user_tables.table_name = user_tab_cols.table_name\n+            WHERE user_tab_cols.table_name = UPPER(%s)\n+        \"\"\", [table_name])\n         field_map = {\n-            column: (internal_size, default if default != 'NULL' else None, is_autofield, is_json)\n-            for column, default, internal_size, is_autofield, is_json in cursor.fetchall()\n+            column: (internal_size, default if default != 'NULL' else None, collation, is_autofield, is_json)\n+            for column, default, collation, internal_size, is_autofield, is_json in cursor.fetchall()\n         }\n         self.cache_bust_counter += 1\n         cursor.execute(\"SELECT * FROM {} WHERE ROWNUM < 2 AND {} > 0\".format(\n@@ -129,11 +138,11 @@ def get_table_description(self, cursor, table_name):\n         description = []\n         for desc in cursor.description:\n             name = desc[0]\n-            internal_size, default, is_autofield, is_json = field_map[name]\n+            internal_size, default, collation, is_autofield, is_json = field_map[name]\n             name = name % {}  # cx_Oracle, for some reason, doubles percent signs.\n             description.append(FieldInfo(\n                 self.identifier_converter(name), *desc[1:3], internal_size, desc[4] or 0,\n-                desc[5] or 0, *desc[6:], default, is_autofield, is_json,\n+                desc[5] or 0, *desc[6:], default, collation, is_autofield, is_json,\n             ))\n         return description\n \ndiff --git a/django/db/backends/oracle/schema.py b/django/db/backends/oracle/schema.py\n--- a/django/db/backends/oracle/schema.py\n+++ b/django/db/backends/oracle/schema.py\n@@ -14,6 +14,8 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n     sql_alter_column_not_null = \"MODIFY %(column)s NOT NULL\"\n     sql_alter_column_default = \"MODIFY %(column)s DEFAULT %(default)s\"\n     sql_alter_column_no_default = \"MODIFY %(column)s DEFAULT NULL\"\n+    sql_alter_column_collate = \"MODIFY %(column)s %(type)s%(collation)s\"\n+\n     sql_delete_column = \"ALTER TABLE %(table)s DROP COLUMN %(column)s\"\n     sql_create_column_inline_fk = 'CONSTRAINT %(name)s REFERENCES %(to_table)s(%(to_column)s)%(deferrable)s'\n     sql_delete_table = \"DROP TABLE %(table)s CASCADE CONSTRAINTS\"\n@@ -181,3 +183,15 @@ def _drop_identity(self, table_name, column_name):\n             'table': self.quote_name(table_name),\n             'column': self.quote_name(column_name),\n         })\n+\n+    def _get_default_collation(self, table_name):\n+        with self.connection.cursor() as cursor:\n+            cursor.execute(\"\"\"\n+                SELECT default_collation FROM user_tables WHERE table_name = %s\n+            \"\"\", [self.normalize_name(table_name)])\n+            return cursor.fetchone()[0]\n+\n+    def _alter_column_collation_sql(self, model, new_field, new_type, new_collation):\n+        if new_collation is None:\n+            new_collation = self._get_default_collation(model._meta.db_table)\n+        return super()._alter_column_collation_sql(model, new_field, new_type, new_collation)\ndiff --git a/django/db/backends/postgresql/features.py b/django/db/backends/postgresql/features.py\n--- a/django/db/backends/postgresql/features.py\n+++ b/django/db/backends/postgresql/features.py\n@@ -59,6 +59,7 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     has_json_operators = True\n     json_key_contains_list_matching_requires_list = True\n     test_collations = {\n+        'non_default': 'sv-x-icu',\n         'swedish_ci': 'sv-x-icu',\n     }\n \n@@ -92,3 +93,4 @@ def is_postgresql_13(self):\n     supports_table_partitions = property(operator.attrgetter('is_postgresql_10'))\n     supports_covering_indexes = property(operator.attrgetter('is_postgresql_11'))\n     supports_covering_gist_indexes = property(operator.attrgetter('is_postgresql_12'))\n+    supports_non_deterministic_collations = property(operator.attrgetter('is_postgresql_12'))\ndiff --git a/django/db/backends/postgresql/introspection.py b/django/db/backends/postgresql/introspection.py\n--- a/django/db/backends/postgresql/introspection.py\n+++ b/django/db/backends/postgresql/introspection.py\n@@ -69,9 +69,11 @@ def get_table_description(self, cursor, table_name):\n             SELECT\n                 a.attname AS column_name,\n                 NOT (a.attnotnull OR (t.typtype = 'd' AND t.typnotnull)) AS is_nullable,\n-                pg_get_expr(ad.adbin, ad.adrelid) AS column_default\n+                pg_get_expr(ad.adbin, ad.adrelid) AS column_default,\n+                CASE WHEN collname = 'default' THEN NULL ELSE collname END AS collation\n             FROM pg_attribute a\n             LEFT JOIN pg_attrdef ad ON a.attrelid = ad.adrelid AND a.attnum = ad.adnum\n+            LEFT JOIN pg_collation co ON a.attcollation = co.oid\n             JOIN pg_type t ON a.atttypid = t.oid\n             JOIN pg_class c ON a.attrelid = c.oid\n             JOIN pg_namespace n ON c.relnamespace = n.oid\ndiff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py\n--- a/django/db/backends/sqlite3/features.py\n+++ b/django/db/backends/sqlite3/features.py\n@@ -47,6 +47,7 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     test_collations = {\n         'ci': 'nocase',\n         'cs': 'binary',\n+        'non_default': 'nocase',\n     }\n \n     @cached_property\ndiff --git a/django/db/backends/sqlite3/introspection.py b/django/db/backends/sqlite3/introspection.py\n--- a/django/db/backends/sqlite3/introspection.py\n+++ b/django/db/backends/sqlite3/introspection.py\n@@ -84,6 +84,7 @@ def get_table_description(self, cursor, table_name):\n         \"\"\"\n         cursor.execute('PRAGMA table_info(%s)' % self.connection.ops.quote_name(table_name))\n         table_info = cursor.fetchall()\n+        collations = self._get_column_collations(cursor, table_name)\n         json_columns = set()\n         if self.connection.features.can_introspect_json_field:\n             for line in table_info:\n@@ -102,7 +103,7 @@ def get_table_description(self, cursor, table_name):\n         return [\n             FieldInfo(\n                 name, data_type, None, get_field_size(data_type), None, None,\n-                not notnull, default, pk == 1, name in json_columns\n+                not notnull, default, collations.get(name), pk == 1, name in json_columns\n             )\n             for cid, name, data_type, notnull, default, pk in table_info\n         ]\n@@ -435,3 +436,27 @@ def get_constraints(self, cursor, table_name):\n             }\n         constraints.update(self._get_foreign_key_constraints(cursor, table_name))\n         return constraints\n+\n+    def _get_column_collations(self, cursor, table_name):\n+        row = cursor.execute(\"\"\"\n+            SELECT sql\n+            FROM sqlite_master\n+            WHERE type = 'table' AND name = %s\n+        \"\"\", [table_name]).fetchone()\n+        if not row:\n+            return {}\n+\n+        sql = row[0]\n+        columns = str(sqlparse.parse(sql)[0][-1]).strip('()').split(', ')\n+        collations = {}\n+        for column in columns:\n+            tokens = column[1:].split()\n+            column_name = tokens[0].strip('\"')\n+            for index, token in enumerate(tokens):\n+                if token == 'COLLATE':\n+                    collation = tokens[index + 1]\n+                    break\n+            else:\n+                collation = None\n+            collations[column_name] = collation\n+        return collations\ndiff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -429,3 +429,6 @@ def remove_constraint(self, model, constraint):\n             super().remove_constraint(model, constraint)\n         else:\n             self._remake_table(model)\n+\n+    def _collate_sql(self, collation):\n+        return ' COLLATE ' + collation\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1002,13 +1002,16 @@ def formfield(self, **kwargs):\n class CharField(Field):\n     description = _(\"String (up to %(max_length)s)\")\n \n-    def __init__(self, *args, **kwargs):\n+    def __init__(self, *args, db_collation=None, **kwargs):\n         super().__init__(*args, **kwargs)\n+        self.db_collation = db_collation\n         self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n     def check(self, **kwargs):\n+        databases = kwargs.get('databases') or []\n         return [\n             *super().check(**kwargs),\n+            *self._check_db_collation(databases),\n             *self._check_max_length_attribute(**kwargs),\n         ]\n \n@@ -1033,6 +1036,27 @@ def _check_max_length_attribute(self, **kwargs):\n         else:\n             return []\n \n+    def _check_db_collation(self, databases):\n+        errors = []\n+        for db in databases:\n+            if not router.allow_migrate_model(db, self.model):\n+                continue\n+            connection = connections[db]\n+            if not (\n+                self.db_collation is None or\n+                'supports_collation_on_charfield' in self.model._meta.required_db_features or\n+                connection.features.supports_collation_on_charfield\n+            ):\n+                errors.append(\n+                    checks.Error(\n+                        '%s does not support a database collation on '\n+                        'CharFields.' % connection.display_name,\n+                        obj=self,\n+                        id='fields.E190',\n+                    ),\n+                )\n+        return errors\n+\n     def cast_db_type(self, connection):\n         if self.max_length is None:\n             return connection.ops.cast_char_field_without_max_length\n@@ -1061,6 +1085,12 @@ def formfield(self, **kwargs):\n         defaults.update(kwargs)\n         return super().formfield(**defaults)\n \n+    def deconstruct(self):\n+        name, path, args, kwargs = super().deconstruct()\n+        if self.db_collation:\n+            kwargs['db_collation'] = self.db_collation\n+        return name, path, args, kwargs\n+\n \n class CommaSeparatedIntegerField(CharField):\n     default_validators = [validators.validate_comma_separated_integer_list]\n@@ -2074,6 +2104,38 @@ def get_internal_type(self):\n class TextField(Field):\n     description = _(\"Text\")\n \n+    def __init__(self, *args, db_collation=None, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.db_collation = db_collation\n+\n+    def check(self, **kwargs):\n+        databases = kwargs.get('databases') or []\n+        return [\n+            *super().check(**kwargs),\n+            *self._check_db_collation(databases),\n+        ]\n+\n+    def _check_db_collation(self, databases):\n+        errors = []\n+        for db in databases:\n+            if not router.allow_migrate_model(db, self.model):\n+                continue\n+            connection = connections[db]\n+            if not (\n+                self.db_collation is None or\n+                'supports_collation_on_textfield' in self.model._meta.required_db_features or\n+                connection.features.supports_collation_on_textfield\n+            ):\n+                errors.append(\n+                    checks.Error(\n+                        '%s does not support a database collation on '\n+                        'TextFields.' % connection.display_name,\n+                        obj=self,\n+                        id='fields.E190',\n+                    ),\n+                )\n+        return errors\n+\n     def get_internal_type(self):\n         return \"TextField\"\n \n@@ -2096,6 +2158,12 @@ def formfield(self, **kwargs):\n             **kwargs,\n         })\n \n+    def deconstruct(self):\n+        name, path, args, kwargs = super().deconstruct()\n+        if self.db_collation:\n+            kwargs['db_collation'] = self.db_collation\n+        return name, path, args, kwargs\n+\n \n class TimeField(DateTimeCheckMixin, Field):\n     empty_strings_allowed = False\n",
  "test_patch": "diff --git a/tests/inspectdb/models.py b/tests/inspectdb/models.py\n--- a/tests/inspectdb/models.py\n+++ b/tests/inspectdb/models.py\n@@ -1,4 +1,4 @@\n-from django.db import models\n+from django.db import connection, models\n \n \n class People(models.Model):\n@@ -79,6 +79,23 @@ class Meta:\n         }\n \n \n+test_collation = connection.features.test_collations.get('non_default')\n+\n+\n+class CharFieldDbCollation(models.Model):\n+    char_field = models.CharField(max_length=10, db_collation=test_collation)\n+\n+    class Meta:\n+        required_db_features = {'supports_collation_on_charfield'}\n+\n+\n+class TextFieldDbCollation(models.Model):\n+    text_field = models.TextField(db_collation=test_collation)\n+\n+    class Meta:\n+        required_db_features = {'supports_collation_on_textfield'}\n+\n+\n class UniqueTogether(models.Model):\n     field1 = models.IntegerField()\n     field2 = models.CharField(max_length=10)\ndiff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -8,7 +8,7 @@\n from django.db.backends.base.introspection import TableInfo\n from django.test import TestCase, TransactionTestCase, skipUnlessDBFeature\n \n-from .models import PeopleMoreData\n+from .models import PeopleMoreData, test_collation\n \n \n def inspectdb_tables_only(table_name):\n@@ -104,6 +104,41 @@ def test_json_field(self):\n             self.assertIn('json_field = models.JSONField()', output)\n         self.assertIn('null_json_field = models.JSONField(blank=True, null=True)', output)\n \n+    @skipUnlessDBFeature('supports_collation_on_charfield')\n+    def test_char_field_db_collation(self):\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_charfielddbcollation', stdout=out)\n+        output = out.getvalue()\n+        if not connection.features.interprets_empty_strings_as_nulls:\n+            self.assertIn(\n+                \"char_field = models.CharField(max_length=10, \"\n+                \"db_collation='%s')\" % test_collation,\n+                output,\n+            )\n+        else:\n+            self.assertIn(\n+                \"char_field = models.CharField(max_length=10, \"\n+                \"db_collation='%s', blank=True, null=True)\" % test_collation,\n+                output,\n+            )\n+\n+    @skipUnlessDBFeature('supports_collation_on_textfield')\n+    def test_text_field_db_collation(self):\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_textfielddbcollation', stdout=out)\n+        output = out.getvalue()\n+        if not connection.features.interprets_empty_strings_as_nulls:\n+            self.assertIn(\n+                \"text_field = models.TextField(db_collation='%s')\" % test_collation,\n+                output,\n+            )\n+        else:\n+            self.assertIn(\n+                \"text_field = models.TextField(db_collation='%s, blank=True, \"\n+                \"null=True)\" % test_collation,\n+                output,\n+            )\n+\n     def test_number_field_types(self):\n         \"\"\"Test introspection of various Django field types\"\"\"\n         assertFieldType = self.make_field_type_asserter()\ndiff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -86,7 +86,7 @@ class Model(models.Model):\n \n \n @isolate_apps('invalid_models_tests')\n-class CharFieldTests(SimpleTestCase):\n+class CharFieldTests(TestCase):\n \n     def test_valid_field(self):\n         class Model(models.Model):\n@@ -387,6 +387,30 @@ class Model(models.Model):\n             )\n         ])\n \n+    def test_db_collation(self):\n+        class Model(models.Model):\n+            field = models.CharField(max_length=100, db_collation='anything')\n+\n+        field = Model._meta.get_field('field')\n+        error = Error(\n+            '%s does not support a database collation on CharFields.'\n+            % connection.display_name,\n+            id='fields.E190',\n+            obj=field,\n+        )\n+        expected = [] if connection.features.supports_collation_on_charfield else [error]\n+        self.assertEqual(field.check(databases=self.databases), expected)\n+\n+    def test_db_collation_required_db_features(self):\n+        class Model(models.Model):\n+            field = models.CharField(max_length=100, db_collation='anything')\n+\n+            class Meta:\n+                required_db_features = {'supports_collation_on_charfield'}\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(databases=self.databases), [])\n+\n \n @isolate_apps('invalid_models_tests')\n class DateFieldTests(SimpleTestCase):\n@@ -779,6 +803,30 @@ class Model(models.Model):\n             )\n         ])\n \n+    def test_db_collation(self):\n+        class Model(models.Model):\n+            field = models.TextField(db_collation='anything')\n+\n+        field = Model._meta.get_field('field')\n+        error = Error(\n+            '%s does not support a database collation on TextFields.'\n+            % connection.display_name,\n+            id='fields.E190',\n+            obj=field,\n+        )\n+        expected = [] if connection.features.supports_collation_on_textfield else [error]\n+        self.assertEqual(field.check(databases=self.databases), expected)\n+\n+    def test_db_collation_required_db_features(self):\n+        class Model(models.Model):\n+            field = models.TextField(db_collation='anything')\n+\n+            class Meta:\n+                required_db_features = {'supports_collation_on_textfield'}\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(databases=self.databases), [])\n+\n \n @isolate_apps('invalid_models_tests')\n class UUIDFieldTests(TestCase):\ndiff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -44,6 +44,16 @@ class Event(models.TextChoices):\n         self.assertEqual(p2.title, Event.C)\n \n \n+class TestMethods(SimpleTestCase):\n+    def test_deconstruct(self):\n+        field = models.CharField()\n+        *_, kwargs = field.deconstruct()\n+        self.assertEqual(kwargs, {})\n+        field = models.CharField(db_collation='utf8_esperanto_ci')\n+        *_, kwargs = field.deconstruct()\n+        self.assertEqual(kwargs, {'db_collation': 'utf8_esperanto_ci'})\n+\n+\n class ValidationTests(SimpleTestCase):\n \n     class Choices(models.TextChoices):\ndiff --git a/tests/model_fields/test_textfield.py b/tests/model_fields/test_textfield.py\n--- a/tests/model_fields/test_textfield.py\n+++ b/tests/model_fields/test_textfield.py\n@@ -2,7 +2,7 @@\n \n from django import forms\n from django.db import connection, models\n-from django.test import TestCase\n+from django.test import SimpleTestCase, TestCase\n \n from .models import Post\n \n@@ -37,3 +37,13 @@ def test_emoji(self):\n         p = Post.objects.create(title='Whatever', body='Smile 😀.')\n         p.refresh_from_db()\n         self.assertEqual(p.body, 'Smile 😀.')\n+\n+\n+class TestMethods(SimpleTestCase):\n+    def test_deconstruct(self):\n+        field = models.TextField()\n+        *_, kwargs = field.deconstruct()\n+        self.assertEqual(kwargs, {})\n+        field = models.TextField(db_collation='utf8_esperanto_ci')\n+        *_, kwargs = field.deconstruct()\n+        self.assertEqual(kwargs, {'db_collation': 'utf8_esperanto_ci'})\ndiff --git a/tests/schema/tests.py b/tests/schema/tests.py\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -185,6 +185,14 @@ def get_constraints_count(self, table, column, fk_to):\n                     counts['indexes'] += 1\n         return counts\n \n+    def get_column_collation(self, table, column):\n+        with connection.cursor() as cursor:\n+            return next(\n+                f.collation\n+                for f in connection.introspection.get_table_description(cursor, table)\n+                if f.name == column\n+            )\n+\n     def assertIndexOrder(self, table, index, order):\n         constraints = self.get_constraints(table)\n         self.assertIn(index, constraints)\n@@ -3224,3 +3232,147 @@ class Meta:\n         with connection.schema_editor(atomic=True) as editor:\n             editor.alter_db_table(Foo, Foo._meta.db_table, 'renamed_table')\n         Foo._meta.db_table = 'renamed_table'\n+\n+    @isolate_apps('schema')\n+    @skipUnlessDBFeature('supports_collation_on_charfield')\n+    def test_db_collation_charfield(self):\n+        collation = connection.features.test_collations['non_default']\n+\n+        class Foo(Model):\n+            field = CharField(max_length=255, db_collation=collation)\n+\n+            class Meta:\n+                app_label = 'schema'\n+\n+        self.isolated_local_models = [Foo]\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Foo)\n+\n+        self.assertEqual(\n+            self.get_column_collation(Foo._meta.db_table, 'field'),\n+            collation,\n+        )\n+\n+    @isolate_apps('schema')\n+    @skipUnlessDBFeature('supports_collation_on_textfield')\n+    def test_db_collation_textfield(self):\n+        collation = connection.features.test_collations['non_default']\n+\n+        class Foo(Model):\n+            field = TextField(db_collation=collation)\n+\n+            class Meta:\n+                app_label = 'schema'\n+\n+        self.isolated_local_models = [Foo]\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Foo)\n+\n+        self.assertEqual(\n+            self.get_column_collation(Foo._meta.db_table, 'field'),\n+            collation,\n+        )\n+\n+    @skipUnlessDBFeature('supports_collation_on_charfield')\n+    def test_add_field_db_collation(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+\n+        collation = connection.features.test_collations['non_default']\n+        new_field = CharField(max_length=255, db_collation=collation)\n+        new_field.set_attributes_from_name('alias')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertEqual(\n+            columns['alias'][0],\n+            connection.features.introspected_field_types['CharField'],\n+        )\n+        self.assertEqual(columns['alias'][1][8], collation)\n+\n+    @skipUnlessDBFeature('supports_collation_on_charfield')\n+    def test_alter_field_db_collation(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+\n+        collation = connection.features.test_collations['non_default']\n+        old_field = Author._meta.get_field('name')\n+        new_field = CharField(max_length=255, db_collation=collation)\n+        new_field.set_attributes_from_name('name')\n+        new_field.model = Author\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        self.assertEqual(\n+            self.get_column_collation(Author._meta.db_table, 'name'),\n+            collation,\n+        )\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+        self.assertIsNone(self.get_column_collation(Author._meta.db_table, 'name'))\n+\n+    @skipUnlessDBFeature('supports_collation_on_charfield')\n+    def test_alter_field_type_and_db_collation(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Note)\n+\n+        collation = connection.features.test_collations['non_default']\n+        old_field = Note._meta.get_field('info')\n+        new_field = CharField(max_length=255, db_collation=collation)\n+        new_field.set_attributes_from_name('info')\n+        new_field.model = Note\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(Note, old_field, new_field, strict=True)\n+        columns = self.column_classes(Note)\n+        self.assertEqual(\n+            columns['info'][0],\n+            connection.features.introspected_field_types['CharField'],\n+        )\n+        self.assertEqual(columns['info'][1][8], collation)\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(Note, new_field, old_field, strict=True)\n+        columns = self.column_classes(Note)\n+        self.assertEqual(columns['info'][0], 'TextField')\n+        self.assertIsNone(columns['info'][1][8])\n+\n+    @skipUnlessDBFeature(\n+        'supports_collation_on_charfield',\n+        'supports_non_deterministic_collations',\n+    )\n+    def test_ci_cs_db_collation(self):\n+        cs_collation = connection.features.test_collations.get('cs')\n+        ci_collation = connection.features.test_collations.get('ci')\n+        try:\n+            if connection.vendor == 'mysql':\n+                cs_collation = 'latin1_general_cs'\n+            elif connection.vendor == 'postgresql':\n+                cs_collation = 'en-x-icu'\n+                with connection.cursor() as cursor:\n+                    cursor.execute(\n+                        \"CREATE COLLATION IF NOT EXISTS case_insensitive \"\n+                        \"(provider = icu, locale = 'und-u-ks-level2', \"\n+                        \"deterministic = false)\"\n+                    )\n+                    ci_collation = 'case_insensitive'\n+            # Create the table.\n+            with connection.schema_editor() as editor:\n+                editor.create_model(Author)\n+            # Case-insensitive collation.\n+            old_field = Author._meta.get_field('name')\n+            new_field_ci = CharField(max_length=255, db_collation=ci_collation)\n+            new_field_ci.set_attributes_from_name('name')\n+            new_field_ci.model = Author\n+            with connection.schema_editor() as editor:\n+                editor.alter_field(Author, old_field, new_field_ci, strict=True)\n+            Author.objects.create(name='ANDREW')\n+            self.assertIs(Author.objects.filter(name='Andrew').exists(), True)\n+            # Case-sensitive collation.\n+            new_field_cs = CharField(max_length=255, db_collation=cs_collation)\n+            new_field_cs.set_attributes_from_name('name')\n+            new_field_cs.model = Author\n+            with connection.schema_editor() as editor:\n+                editor.alter_field(Author, new_field_ci, new_field_cs, strict=True)\n+            self.assertIs(Author.objects.filter(name='Andrew').exists(), False)\n+        finally:\n+            if connection.vendor == 'postgresql':\n+                with connection.cursor() as cursor:\n+                    cursor.execute('DROP COLLATION IF EXISTS case_insensitive')\n",
  "problem_statement": "Custom collations\nDescription\n\t \n\t\t(last modified by Tom Carrick)\n\t \nMailing list, but it didn't get any responses: ​https://groups.google.com/u/2/g/django-developers/c/djMQwwxtCVY\nWe have the various CI fields on postgres, but these are ​discouraged since pg12 in favour of ​nondeterministic collations. I think it'd be useful to have a way to do this in Django, though I'm not sure what the API would look like. My initial thought, knowing very little about the ORM, is a Collation class that can be passed into a model field, but I'm not sure.\n​PR\n",
  "hints_text": "Related to #21181, #9682, and #5745.\nMailing list, but it didn't get any responses... Hi Tom. I feel bad saying you need to go back to the mailing list, but without SOME proposal this isn't really actionable as it stands. You've got Simon's attention now, so there's hope there... 🙂 Short of that, I'd suggest sketching up some ideas and following up your initial post. (Having just looked at it, it's a bit \"Argh! no idea\", at first glance.) I'm going to close as needs info for now. Really happy to re-open either we have some suggestions for the API, or (less good) we're happy to leave it open even undefined, but then I'd probably want to mark it Someday/Maybe. I hope that makes sense.",
  "created_at": "2020-07-18T11:20:04Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_deconstruct (model_fields.test_textfield.TestMethods)\", \"test_deconstruct (model_fields.test_charfield.TestMethods)\", \"test_max_length_warning (invalid_models_tests.test_ordinary_fields.AutoFieldTests)\", \"test_primary_key (invalid_models_tests.test_ordinary_fields.AutoFieldTests)\", \"test_valid_case (invalid_models_tests.test_ordinary_fields.AutoFieldTests)\", \"test_charfield_cleans_empty_string_when_blank_true (model_fields.test_charfield.ValidationTests)\", \"test_charfield_raises_error_on_empty_input (model_fields.test_charfield.ValidationTests)\", \"test_charfield_raises_error_on_empty_string (model_fields.test_charfield.ValidationTests)\", \"test_charfield_with_choices_cleans_valid_choice (model_fields.test_charfield.ValidationTests)\", \"test_charfield_with_choices_raises_error_on_invalid_choice (model_fields.test_charfield.ValidationTests)\", \"test_enum_choices_cleans_valid_string (model_fields.test_charfield.ValidationTests)\", \"test_enum_choices_invalid_input (model_fields.test_charfield.ValidationTests)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.DateTimeFieldTests)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.DateTimeFieldTests)\", \"test_non_nullable_blank (invalid_models_tests.test_ordinary_fields.GenericIPAddressFieldTests)\", \"test_pillow_installed (invalid_models_tests.test_ordinary_fields.ImageFieldTests)\", \"test_choices_named_group (invalid_models_tests.test_ordinary_fields.UUIDFieldTests)\", \"test_db_collation (invalid_models_tests.test_ordinary_fields.TextFieldTests)\", \"test_db_collation_required_db_features (invalid_models_tests.test_ordinary_fields.TextFieldTests)\", \"test_str_default_value (invalid_models_tests.test_ordinary_fields.BinaryFieldTests)\", \"test_valid_default_value (invalid_models_tests.test_ordinary_fields.BinaryFieldTests)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.TimeFieldTests)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.TimeFieldTests)\", \"test_auto_now_and_auto_now_add_raise_error (invalid_models_tests.test_ordinary_fields.DateFieldTests)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.DateFieldTests)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.DateFieldTests)\", \"test_forbidden_files_and_folders (invalid_models_tests.test_ordinary_fields.FilePathFieldTests)\", \"test_assignment_from_choice_enum (model_fields.test_charfield.TestCharField)\", \"test_emoji (model_fields.test_charfield.TestCharField)\", \"test_lookup_integer_in_charfield (model_fields.test_charfield.TestCharField)\", \"test_max_length_passed_to_formfield (model_fields.test_charfield.TestCharField)\", \"test_bad_values_of_max_digits_and_decimal_places (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_decimal_places_greater_than_max_digits (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_negative_max_digits_and_decimal_places (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_required_attributes (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_valid_field (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_primary_key (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_upload_to_callable_not_checked (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_upload_to_starts_with_slash (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_valid_case (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_valid_default_case (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_max_length_warning (invalid_models_tests.test_ordinary_fields.IntegerFieldTests)\", \"A TextField with choices uses a Select widget.\", \"test_emoji (model_fields.test_textfield.TextFieldTests)\", \"test_lookup_integer_in_textfield (model_fields.test_textfield.TextFieldTests)\", \"test_max_length_passed_to_formfield (model_fields.test_textfield.TextFieldTests)\", \"TextField.to_python() should return a string.\", \"test_invalid_default (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_valid_callable_default (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_valid_default (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_valid_default_none (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_bad_db_index_value (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_bad_max_length_value (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_bad_validators (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_containing_lazy (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_containing_non_pairs (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_in_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group_bad_structure (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group_lazy (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group_non_pairs (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_db_collation (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_db_collation_required_db_features (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_iterable_of_iterable_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_lazy_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_missing_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_negative_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_non_iterable_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"Two letters isn't a valid choice pair.\", \"test_str_max_length_type (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_str_max_length_value (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_valid_field (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"inspectdb --include-views creates models for database views.\", \"test_attribute_name_not_python_keyword (inspectdb.tests.InspectDBTestCase)\", \"test_char_field_db_collation (inspectdb.tests.InspectDBTestCase)\", \"Introspection of column names consist/start with digits (#16536/#17676)\", \"Test introspection of various Django field types\", \"test_introspection_errors (inspectdb.tests.InspectDBTestCase)\", \"test_json_field (inspectdb.tests.InspectDBTestCase)\", \"By default the command generates models with `Meta.managed = False` (#14305)\", \"test_special_column_name_introspection (inspectdb.tests.InspectDBTestCase)\", \"test_stealth_table_name_filter_option (inspectdb.tests.InspectDBTestCase)\", \"test_table_name_introspection (inspectdb.tests.InspectDBTestCase)\", \"test_table_option (inspectdb.tests.InspectDBTestCase)\", \"test_text_field_db_collation (inspectdb.tests.InspectDBTestCase)\", \"test_unique_together_meta (inspectdb.tests.InspectDBTestCase)\", \"test_add_datefield_and_datetimefield_use_effective_default (schema.tests.SchemaTests)\", \"test_add_field (schema.tests.SchemaTests)\", \"test_add_field_binary (schema.tests.SchemaTests)\", \"test_add_field_db_collation (schema.tests.SchemaTests)\", \"test_add_field_default_dropped (schema.tests.SchemaTests)\", \"test_add_field_default_transform (schema.tests.SchemaTests)\", \"test_add_field_remove_field (schema.tests.SchemaTests)\", \"test_add_field_temp_default (schema.tests.SchemaTests)\", \"test_add_field_temp_default_boolean (schema.tests.SchemaTests)\", \"test_add_field_use_effective_default (schema.tests.SchemaTests)\", \"test_add_foreign_key_long_names (schema.tests.SchemaTests)\", \"test_add_foreign_key_quoted_db_table (schema.tests.SchemaTests)\", \"test_add_foreign_object (schema.tests.SchemaTests)\", \"test_add_remove_index (schema.tests.SchemaTests)\", \"test_add_textfield_unhashable_default (schema.tests.SchemaTests)\", \"test_alter (schema.tests.SchemaTests)\", \"test_alter_auto_field_quoted_db_column (schema.tests.SchemaTests)\", \"test_alter_auto_field_to_char_field (schema.tests.SchemaTests)\", \"test_alter_auto_field_to_integer_field (schema.tests.SchemaTests)\", \"test_alter_autofield_pk_to_bigautofield_pk_sequence_owner (schema.tests.SchemaTests)\", \"test_alter_autofield_pk_to_smallautofield_pk_sequence_owner (schema.tests.SchemaTests)\", \"test_alter_charfield_to_null (schema.tests.SchemaTests)\", \"test_alter_db_table_case (schema.tests.SchemaTests)\", \"test_alter_field_add_index_to_integerfield (schema.tests.SchemaTests)\", \"test_alter_field_db_collation (schema.tests.SchemaTests)\", \"test_alter_field_default_dropped (schema.tests.SchemaTests)\", \"test_alter_field_fk_keeps_index (schema.tests.SchemaTests)\", \"test_alter_field_fk_to_o2o (schema.tests.SchemaTests)\", \"test_alter_field_o2o_keeps_unique (schema.tests.SchemaTests)\", \"test_alter_field_o2o_to_fk (schema.tests.SchemaTests)\", \"test_alter_field_type_and_db_collation (schema.tests.SchemaTests)\", \"test_alter_fk (schema.tests.SchemaTests)\", \"test_alter_fk_checks_deferred_constraints (schema.tests.SchemaTests)\", \"test_alter_fk_to_o2o (schema.tests.SchemaTests)\", \"test_alter_implicit_id_to_explicit (schema.tests.SchemaTests)\", \"test_alter_int_pk_to_autofield_pk (schema.tests.SchemaTests)\", \"test_alter_int_pk_to_bigautofield_pk (schema.tests.SchemaTests)\", \"test_alter_int_pk_to_int_unique (schema.tests.SchemaTests)\", \"test_alter_not_unique_field_to_primary_key (schema.tests.SchemaTests)\", \"test_alter_null_to_not_null (schema.tests.SchemaTests)\", \"test_alter_numeric_field_keep_null_status (schema.tests.SchemaTests)\", \"test_alter_o2o_to_fk (schema.tests.SchemaTests)\", \"test_alter_pk_with_self_referential_field (schema.tests.SchemaTests)\", \"test_alter_primary_key_quoted_db_table (schema.tests.SchemaTests)\", \"test_alter_smallint_pk_to_smallautofield_pk (schema.tests.SchemaTests)\", \"test_alter_text_field (schema.tests.SchemaTests)\", \"test_alter_text_field_to_date_field (schema.tests.SchemaTests)\", \"test_alter_text_field_to_datetime_field (schema.tests.SchemaTests)\", \"test_alter_text_field_to_time_field (schema.tests.SchemaTests)\", \"test_alter_textfield_to_null (schema.tests.SchemaTests)\", \"test_alter_textual_field_keep_null_status (schema.tests.SchemaTests)\", \"test_alter_to_fk (schema.tests.SchemaTests)\", \"test_char_field_pk_to_auto_field (schema.tests.SchemaTests)\", \"test_char_field_with_db_index_to_fk (schema.tests.SchemaTests)\", \"test_check_constraints (schema.tests.SchemaTests)\", \"test_ci_cs_db_collation (schema.tests.SchemaTests)\", \"test_context_manager_exit (schema.tests.SchemaTests)\", \"test_create_index_together (schema.tests.SchemaTests)\", \"test_creation_deletion (schema.tests.SchemaTests)\", \"test_creation_deletion_reserved_names (schema.tests.SchemaTests)\", \"test_db_collation_charfield (schema.tests.SchemaTests)\", \"test_db_collation_textfield (schema.tests.SchemaTests)\", \"test_db_table (schema.tests.SchemaTests)\", \"Creating tables out of FK order, then repointing, works\", \"The db_constraint parameter is respected\", \"Creating a FK to a proxy model creates database constraints.\", \"test_foreign_key_index_long_names_regression (schema.tests.SchemaTests)\", \"test_index_together (schema.tests.SchemaTests)\", \"test_index_together_with_fk (schema.tests.SchemaTests)\", \"test_indexes (schema.tests.SchemaTests)\", \"test_m2m (schema.tests.SchemaTests)\", \"test_m2m_create (schema.tests.SchemaTests)\", \"test_m2m_create_custom (schema.tests.SchemaTests)\", \"test_m2m_create_inherited (schema.tests.SchemaTests)\", \"test_m2m_create_through (schema.tests.SchemaTests)\", \"test_m2m_create_through_custom (schema.tests.SchemaTests)\", \"test_m2m_create_through_inherited (schema.tests.SchemaTests)\", \"test_m2m_custom (schema.tests.SchemaTests)\", \"test_m2m_db_constraint (schema.tests.SchemaTests)\", \"test_m2m_db_constraint_custom (schema.tests.SchemaTests)\", \"test_m2m_db_constraint_inherited (schema.tests.SchemaTests)\", \"test_m2m_inherited (schema.tests.SchemaTests)\", \"test_m2m_rename_field_in_target_model (schema.tests.SchemaTests)\", \"test_m2m_repoint (schema.tests.SchemaTests)\", \"test_m2m_repoint_custom (schema.tests.SchemaTests)\", \"test_m2m_repoint_inherited (schema.tests.SchemaTests)\", \"test_m2m_through_alter (schema.tests.SchemaTests)\", \"test_m2m_through_alter_custom (schema.tests.SchemaTests)\", \"test_m2m_through_alter_inherited (schema.tests.SchemaTests)\", \"test_namespaced_db_table_create_index_name (schema.tests.SchemaTests)\", \"test_no_db_constraint_added_during_primary_key_change (schema.tests.SchemaTests)\", \"test_order_index (schema.tests.SchemaTests)\", \"test_primary_key (schema.tests.SchemaTests)\", \"test_referenced_field_without_constraint_rename_inside_atomic_block (schema.tests.SchemaTests)\", \"test_referenced_table_without_constraint_rename_inside_atomic_block (schema.tests.SchemaTests)\", \"test_remove_constraints_capital_letters (schema.tests.SchemaTests)\", \"test_remove_db_index_doesnt_remove_custom_indexes (schema.tests.SchemaTests)\", \"test_remove_field_check_does_not_remove_meta_constraints (schema.tests.SchemaTests)\", \"test_remove_field_unique_does_not_remove_meta_constraints (schema.tests.SchemaTests)\", \"test_remove_index_together_does_not_remove_meta_indexes (schema.tests.SchemaTests)\", \"test_remove_unique_together_does_not_remove_meta_constraints (schema.tests.SchemaTests)\", \"test_rename (schema.tests.SchemaTests)\", \"test_rename_keep_null_status (schema.tests.SchemaTests)\", \"test_rename_referenced_field (schema.tests.SchemaTests)\", \"test_rename_table_renames_deferred_sql_references (schema.tests.SchemaTests)\", \"test_text_field_with_db_index (schema.tests.SchemaTests)\", \"test_text_field_with_db_index_to_fk (schema.tests.SchemaTests)\", \"test_unique (schema.tests.SchemaTests)\", \"test_unique_name_quoting (schema.tests.SchemaTests)\", \"test_unique_together (schema.tests.SchemaTests)\", \"test_unique_together_with_fk (schema.tests.SchemaTests)\", \"test_unique_together_with_fk_with_existing_index (schema.tests.SchemaTests)\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.646953",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}