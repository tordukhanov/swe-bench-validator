{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-10481",
  "base_commit": "004012b6df0fcec67312373f8d89327f5b09a7e6",
  "patch": "diff --git a/sphinx/config.py b/sphinx/config.py\n--- a/sphinx/config.py\n+++ b/sphinx/config.py\n@@ -163,6 +163,17 @@ def read(cls, confdir: str, overrides: Dict = None, tags: Tags = None) -> \"Confi\n             raise ConfigError(__(\"config directory doesn't contain a conf.py file (%s)\") %\n                               confdir)\n         namespace = eval_config_file(filename, tags)\n+\n+        # Note: Old sphinx projects have been configured as \"langugae = None\" because\n+        #       sphinx-quickstart previously generated this by default.\n+        #       To keep compatibility, they should be fallback to 'en' for a while\n+        #       (This conversion should not be removed before 2025-01-01).\n+        if namespace.get(\"language\", ...) is None:\n+            logger.warning(__(\"Invalid configuration value found: 'language = None'. \"\n+                              \"Update your configuration to a valid langauge code. \"\n+                              \"Falling back to 'en' (English).\"))\n+            namespace[\"language\"] = \"en\"\n+\n         return cls(namespace, overrides or {})\n \n     def convert_overrides(self, name: str, value: Any) -> Any:\n",
  "test_patch": "diff --git a/tests/test_config.py b/tests/test_config.py\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -381,3 +381,49 @@ def test_nitpick_ignore_regex_fullmatch(app, status, warning):\n     assert len(warning) == len(nitpick_warnings)\n     for actual, expected in zip(warning, nitpick_warnings):\n         assert expected in actual\n+\n+\n+def test_conf_py_language_none(tempdir):\n+    \"\"\"Regression test for #10474.\"\"\"\n+\n+    # Given a conf.py file with language = None\n+    (tempdir / 'conf.py').write_text(\"language = None\", encoding='utf-8')\n+\n+    # When we load conf.py into a Config object\n+    cfg = Config.read(tempdir, {}, None)\n+    cfg.init_values()\n+\n+    # Then the language is coerced to English\n+    assert cfg.language == \"en\"\n+\n+\n+@mock.patch(\"sphinx.config.logger\")\n+def test_conf_py_language_none_warning(logger, tempdir):\n+    \"\"\"Regression test for #10474.\"\"\"\n+\n+    # Given a conf.py file with language = None\n+    (tempdir / 'conf.py').write_text(\"language = None\", encoding='utf-8')\n+\n+    # When we load conf.py into a Config object\n+    Config.read(tempdir, {}, None)\n+\n+    # Then a warning is raised\n+    assert logger.warning.called\n+    assert logger.warning.call_args[0][0] == (\n+        \"Invalid configuration value found: 'language = None'. \"\n+        \"Update your configuration to a valid langauge code. \"\n+        \"Falling back to 'en' (English).\")\n+\n+\n+def test_conf_py_no_language(tempdir):\n+    \"\"\"Regression test for #10474.\"\"\"\n+\n+    # Given a conf.py file with no language attribute\n+    (tempdir / 'conf.py').write_text(\"\", encoding='utf-8')\n+\n+    # When we load conf.py into a Config object\n+    cfg = Config.read(tempdir, {}, None)\n+    cfg.init_values()\n+\n+    # Then the language is coerced to English\n+    assert cfg.language == \"en\"\n",
  "problem_statement": "If a project defines \"language = None\" in conf.py, treat it like \"en\"\nHello, I started working on integrating Sphinx 5 to Fedora to ensure distribution packages work smoothly when the final is out.\r\nI ran across is a side effect of the change inspired by #10062. \r\nIf a project has already \"language = None\" defined in their conf.py (which, it seems, used to be an issue before [this](https://github.com/sphinx-doc/sphinx/commit/77b1d713a8d7b21ed6ad0f0a3d9f13a391b0a605) commit), the new behavior will cause the documentation build to error out. The projects created after the mentioned commit seem not to be affected.\r\nIn a sample of ~40 packages, 2 have run across this issue. \r\nA naive check using [grep.app](https://grep.app/search?current=3&q=language%20%3D%20None&filter[lang][0]=Python&filter[path.pattern][0]=/conf.py) shows that for a half a million indexed GitHub projects there is around 6k which have the string in their conf.py (I removed the commented strings from the equation).\r\nFor older projects using Sphinx, this change will be disruptive and will require the same commit in the same place for each and every one of them.\r\n\r\nThe exact error:\r\n```\r\n+ python3 setup.py build_sphinx\r\nrunning build_sphinx\r\nRunning Sphinx v5.0.0b1\r\nloading translations [None]... not available for built-in messages\r\nmaking output directory... done\r\nWARNING: The config value `language' has type `NoneType'; expected `str'.\r\n\r\nExtension error (sphinx.config):\r\nHandler <function check_confval_types at 0x7fd1e67a6c00> for event 'config-inited' threw an exception (exception: 'NoneType' object has no attribute 'startswith')\r\n```\r\n\r\n**Describe the solution you'd like**\r\nWhen Sphinx encounters NoneType for language, it could set the language to English and log the fact for the user (possibly asking them to make adjustments to conf.py) instead of erroring.\r\nIt's not that different than the current behavior in 5.0.0b1. When if I run `sphinx-quickstart` and set no language, the variable is not present at all in conf.py, although in the background my project is processed as English. \r\n\r\n**Describe alternatives you've considered**\r\nAforementioned manual change for each affected project, which I'm afraid of.\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2022-05-27T22:54:01Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"tests/test_config.py::test_conf_py_language_none\", \"tests/test_config.py::test_conf_py_language_none_warning\"]",
  "PASS_TO_PASS": "[\"tests/test_config.py::test_core_config\", \"tests/test_config.py::test_config_not_found\", \"tests/test_config.py::test_extension_values\", \"tests/test_config.py::test_overrides\", \"tests/test_config.py::test_overrides_boolean\", \"tests/test_config.py::test_errors_warnings\", \"tests/test_config.py::test_errors_if_setup_is_not_callable\", \"tests/test_config.py::test_config_eol\", \"tests/test_config.py::test_builtin_conf\", \"tests/test_config.py::test_check_types[value1-string-None-123-True]\", \"tests/test_config.py::test_check_types[value2-<lambda>-None-123-True]\", \"tests/test_config.py::test_check_types[value3-<lambda>-None-actual2-False]\", \"tests/test_config.py::test_check_types[value4-100-None-True-True]\", \"tests/test_config.py::test_check_types[value5-False-None-True-False]\", \"tests/test_config.py::test_check_types[value6-default5-None-actual5-True]\", \"tests/test_config.py::test_check_types[value7-string-annotation6-actual6-False]\", \"tests/test_config.py::test_check_types[value8-default7-None-actual7-False]\", \"tests/test_config.py::test_check_types[value9-None-None-foo-False]\", \"tests/test_config.py::test_check_types[value10-None-None-123-False]\", \"tests/test_config.py::test_check_types[value11-None-annotation10-bar-False]\", \"tests/test_config.py::test_check_types[value12-string-None-bar-False]\", \"tests/test_config.py::test_conf_warning_message[value1-string-annotation0-actual0-The\", \"tests/test_config.py::test_conf_warning_message[value1-string-annotation1-actual1-The\", \"tests/test_config.py::test_conf_warning_message[value1-string-annotation2-actual2-The\", \"tests/test_config.py::test_check_enum\", \"tests/test_config.py::test_check_enum_failed\", \"tests/test_config.py::test_check_enum_for_list\", \"tests/test_config.py::test_check_enum_for_list_failed\", \"tests/test_config.py::test_nitpick_base\", \"tests/test_config.py::test_nitpick_ignore\", \"tests/test_config.py::test_nitpick_ignore_regex1\", \"tests/test_config.py::test_nitpick_ignore_regex2\", \"tests/test_config.py::test_nitpick_ignore_regex_fullmatch\", \"tests/test_config.py::test_conf_py_no_language\"]",
  "environment_setup_commit": "60775ec4c4ea08509eee4b564cbf90f316021aff",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.033988",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}