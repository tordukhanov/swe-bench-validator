{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-16527",
  "base_commit": "d474418cf4475139d66da7d474012f366d74b628",
  "patch": "diff --git a/sympy/core/exprtools.py b/sympy/core/exprtools.py\n--- a/sympy/core/exprtools.py\n+++ b/sympy/core/exprtools.py\n@@ -322,7 +322,6 @@ def __init__(self, factors=None):  # Factors\n         \"\"\"\n         if isinstance(factors, (SYMPY_INTS, float)):\n             factors = S(factors)\n-\n         if isinstance(factors, Factors):\n             factors = factors.factors.copy()\n         elif factors is None or factors is S.One:\n@@ -355,6 +354,13 @@ def __init__(self, factors=None):  # Factors\n             for _ in range(i):\n                 c.remove(I)\n             factors = dict(Mul._from_args(c).as_powers_dict())\n+            # Handle all rational Coefficients\n+            for f in list(factors.keys()):\n+                if isinstance(f, Rational) and not isinstance(f, Integer):\n+                    p, q = Integer(f.p), Integer(f.q)\n+                    factors[p] = (factors[p] if p in factors else 0) + factors[f]\n+                    factors[q] = (factors[q] if q in factors else 0) - factors[f]\n+                    factors.pop(f)\n             if i:\n                 factors[I] = S.One*i\n             if nc:\n",
  "test_patch": "diff --git a/sympy/core/tests/test_exprtools.py b/sympy/core/tests/test_exprtools.py\n--- a/sympy/core/tests/test_exprtools.py\n+++ b/sympy/core/tests/test_exprtools.py\n@@ -127,6 +127,10 @@ def test_Factors():\n     assert Factors(n).div(x**(y + 4)) == \\\n         (Factors({x: x}), Factors({x: y + 1}))\n \n+    assert Factors(3 * x / 2) == Factors({3: 1, 2: -1, x: 1})\n+    assert Factors(x * x / y) == Factors({x: 2, y: -1})\n+    assert Factors(27 * x / y**9) == Factors({27: 1, x: 1, y: -9})\n+\n \n def test_Term():\n     a = Term(4*x*y**2/z/t**3)\ndiff --git a/sympy/simplify/tests/test_radsimp.py b/sympy/simplify/tests/test_radsimp.py\n--- a/sympy/simplify/tests/test_radsimp.py\n+++ b/sympy/simplify/tests/test_radsimp.py\n@@ -342,6 +342,9 @@ def test_collect_const():\n     assert collect_sqrt(eq + 2) == \\\n         2*sqrt(sqrt(2) + 3)*(sqrt(5)*x + y) + 2\n \n+    # issue 16296\n+    assert collect_const(a + b + x/2 + y/2) == a + b + Mul(S.Half, x + y, evaluate=False)\n+\n \n def test_issue_13143():\n     f = Function('f')\n",
  "problem_statement": "collect_const() does cannot collect rationals\n`collect_const()` does not seem to support the collecting of numeric rationals in SymPy 1.3. This is probably a duplicate of [13107](https://github.com/sympy/sympy/issues/13107), but I've provided a description below.\r\n\r\n    In [41]: var('a:d')\r\n    In [42]: f = a + b + c / 2 + d / 2\r\n    In [43]: print(collect_const(f, Rational(1, 2), Numbers=True))\r\n    a + b + (c/2 + d/2)\r\n\r\nI'm expecting `a + b + 1 / 2 * (c + d)`\n",
  "hints_text": "I would like to work on fixing this issue.\n> \r\n> \r\n> I would like to work on fixing this issue.\r\n\r\nAre you still working on this issue?\r\n\nI am sorry, did not manage to work on this yet, trying to resume.\r\nI believe that the issue is being cause by `Factors.div`, where the behvaior for `a*2` and `a/2` changes:\r\nhttps://github.com/sympy/sympy/blob/aefdd023dc4f73c441953ed51f5f05a076f0862f/sympy/simplify/radsimp.py#L618-L621\r\n```python\r\n>>> Factors(a/2)\r\nFactors({1/2: 1, a: 1})\r\n>>> Factors(2*a)\r\nFactors({2: 1, a: 1})\r\n>>> Factors(1/2)\r\nFactors({0.500000000000000: 1})\r\n>>> Factors(2)\r\nFactors({2: 1})\r\n>>> Factors(1/2*a).div(Factors(1/2))\r\n(Factors({a: 1}), Factors({}))\r\n>>> Factors(2*a).div(Factors(1/2))\r\n(Factors({2: 1, a: 1}), Factors({0.500000000000000: 1}))\r\n>>> Factors(a/2).div(Factors(1/2))\r\n(Factors({1/2: 1, a: 1}), Factors({0.500000000000000: 1}))\r\n```\r\nI don't know if this will take changes to the `Factors` class or the `collect_const()` function.\r\nPlease do tell me what the expected behavior for both these functions should be, and if everything here looks OK.\n> Factors({1/2: 1, a: 1})\r\n\r\nI think that this is expected to be `Factors({2: -1, a: 1})`, in the same way as `Factors(S(1)/2)` becomes `Factors({2: -1})`.\nThis is what I wanna do to fix the issue, the problem is that the Number Half is not a rational, any way around this issue?\r\n```python\r\nfactors = dict(Mul._from_args(c).as_powers_dict())\r\n# Handle all rational Coefficients\r\nfor f in factors.keys():\r\n    if type(f) is Rational:\r\n        factors[f.p] = (factors[f.p] if f.p in factors else 0) + factors[f]\r\n        factors[f.q] = (factors[f.q] if f.q in factors else 0) - factors[f]\r\n        factors.pop(f)\r\n```\r\nAfter this, I think that the original issue would be solved, as when I make this change, `1/3` gets collected as a constant outside the brackets, as desired. I have just put in a special case for `1/2 (S.Half)`, currently solving the issue.\r\n```python\r\n>>> var('a:d')\r\n(a, b, c, d)\r\n>>> f = a + b + c / 3 + d / 3\r\n>>> print(collect_const(f, Rational(1, 3), Numbers=True))\r\na + b + (c + d)/3\r\n```",
  "created_at": "2019-04-01T11:08:50Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_Factors\", \"test_collect_const\"]",
  "PASS_TO_PASS": "[\"test_decompose_power\", \"test_Term\", \"test_gcd_terms\", \"test_factor_terms\", \"test_xreplace\", \"test_factor_nc\", \"test_issue_6360\", \"test_issue_7903\", \"test_issue_8263\", \"test_radsimp\", \"test_radsimp_issue_3214\", \"test_collect_1\", \"test_collect_2\", \"test_collect_3\", \"test_collect_4\", \"test_collect_5\", \"test_collect_D\", \"test_collect_func\", \"test_collect_order\", \"test_rcollect\", \"test_collect_D_0\", \"test_collect_Wild\", \"test_issue_13143\", \"test_issue_6097\", \"test_fraction_expand\", \"test_fraction\", \"test_issue_5615\", \"test_issue_5933\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.108555",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}