{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-17313",
  "base_commit": "a4297a11fd8f3e8af17efda85e3047e32e470a70",
  "patch": "diff --git a/sympy/functions/elementary/integers.py b/sympy/functions/elementary/integers.py\n--- a/sympy/functions/elementary/integers.py\n+++ b/sympy/functions/elementary/integers.py\n@@ -142,6 +142,12 @@ def _eval_nseries(self, x, n, logx):\n         else:\n             return r\n \n+    def _eval_is_negative(self):\n+        return self.args[0].is_negative\n+\n+    def _eval_is_nonnegative(self):\n+        return self.args[0].is_nonnegative\n+\n     def _eval_rewrite_as_ceiling(self, arg, **kwargs):\n         return -ceiling(-arg)\n \n@@ -155,17 +161,60 @@ def _eval_Eq(self, other):\n                 return S.true\n \n     def __le__(self, other):\n+        other = S(other)\n+        if self.args[0].is_real:\n+            if other.is_integer:\n+                return self.args[0] < other + 1\n+            if other.is_number and other.is_real:\n+                return self.args[0] < ceiling(other)\n         if self.args[0] == other and other.is_real:\n             return S.true\n         if other is S.Infinity and self.is_finite:\n             return S.true\n+\n         return Le(self, other, evaluate=False)\n \n+    def __ge__(self, other):\n+        other = S(other)\n+        if self.args[0].is_real:\n+            if other.is_integer:\n+                return self.args[0] >= other\n+            if other.is_number and other.is_real:\n+                return self.args[0] >= ceiling(other)\n+        if self.args[0] == other and other.is_real:\n+            return S.false\n+        if other is S.NegativeInfinity and self.is_finite:\n+            return S.true\n+\n+        return Ge(self, other, evaluate=False)\n+\n     def __gt__(self, other):\n+        other = S(other)\n+        if self.args[0].is_real:\n+            if other.is_integer:\n+                return self.args[0] >= other + 1\n+            if other.is_number and other.is_real:\n+                return self.args[0] >= ceiling(other)\n         if self.args[0] == other and other.is_real:\n             return S.false\n+        if other is S.NegativeInfinity and self.is_finite:\n+            return S.true\n+\n         return Gt(self, other, evaluate=False)\n \n+    def __lt__(self, other):\n+        other = S(other)\n+        if self.args[0].is_real:\n+            if other.is_integer:\n+                return self.args[0] < other\n+            if other.is_number and other.is_real:\n+                return self.args[0] < ceiling(other)\n+        if self.args[0] == other and other.is_real:\n+            return S.false\n+        if other is S.Infinity and self.is_finite:\n+            return S.true\n+\n+        return Lt(self, other, evaluate=False)\n \n class ceiling(RoundFunction):\n     \"\"\"\n@@ -234,6 +283,12 @@ def _eval_rewrite_as_floor(self, arg, **kwargs):\n     def _eval_rewrite_as_frac(self, arg, **kwargs):\n         return arg + frac(-arg)\n \n+    def _eval_is_positive(self):\n+        return self.args[0].is_positive\n+\n+    def _eval_is_nonpositive(self):\n+        return self.args[0].is_nonpositive\n+\n     def _eval_Eq(self, other):\n         if isinstance(self, ceiling):\n             if (self.rewrite(floor) == other) or \\\n@@ -241,17 +296,60 @@ def _eval_Eq(self, other):\n                 return S.true\n \n     def __lt__(self, other):\n+        other = S(other)\n+        if self.args[0].is_real:\n+            if other.is_integer:\n+                return self.args[0] <= other - 1\n+            if other.is_number and other.is_real:\n+                return self.args[0] <= floor(other)\n         if self.args[0] == other and other.is_real:\n             return S.false\n+        if other is S.Infinity and self.is_finite:\n+            return S.true\n+\n         return Lt(self, other, evaluate=False)\n \n+    def __gt__(self, other):\n+        other = S(other)\n+        if self.args[0].is_real:\n+            if other.is_integer:\n+                return self.args[0] > other\n+            if other.is_number and other.is_real:\n+                return self.args[0] > floor(other)\n+        if self.args[0] == other and other.is_real:\n+            return S.false\n+        if other is S.NegativeInfinity and self.is_finite:\n+            return S.true\n+\n+        return Gt(self, other, evaluate=False)\n+\n     def __ge__(self, other):\n+        other = S(other)\n+        if self.args[0].is_real:\n+            if other.is_integer:\n+                return self.args[0] > other - 1\n+            if other.is_number and other.is_real:\n+                return self.args[0] > floor(other)\n         if self.args[0] == other and other.is_real:\n             return S.true\n-        if other is S.NegativeInfinity and self.is_real:\n+        if other is S.NegativeInfinity and self.is_finite:\n             return S.true\n+\n         return Ge(self, other, evaluate=False)\n \n+    def __le__(self, other):\n+        other = S(other)\n+        if self.args[0].is_real:\n+            if other.is_integer:\n+                return self.args[0] <= other\n+            if other.is_number and other.is_real:\n+                return self.args[0] <= floor(other)\n+        if self.args[0] == other and other.is_real:\n+            return S.false\n+        if other is S.Infinity and self.is_finite:\n+            return S.true\n+\n+        return Le(self, other, evaluate=False)\n \n class frac(Function):\n     r\"\"\"Represents the fractional part of x\n",
  "test_patch": "diff --git a/sympy/functions/elementary/tests/test_integers.py b/sympy/functions/elementary/tests/test_integers.py\n--- a/sympy/functions/elementary/tests/test_integers.py\n+++ b/sympy/functions/elementary/tests/test_integers.py\n@@ -108,13 +108,18 @@ def test_floor():\n     assert floor(factorial(50)/exp(1)) == \\\n         11188719610782480504630258070757734324011354208865721592720336800\n \n+    assert (floor(y) < y) == False\n     assert (floor(y) <= y) == True\n     assert (floor(y) > y) == False\n+    assert (floor(y) >= y) == False\n     assert (floor(x) <= x).is_Relational  # x could be non-real\n     assert (floor(x) > x).is_Relational\n     assert (floor(x) <= y).is_Relational  # arg is not same as rhs\n     assert (floor(x) > y).is_Relational\n     assert (floor(y) <= oo) == True\n+    assert (floor(y) < oo) == True\n+    assert (floor(y) >= -oo) == True\n+    assert (floor(y) > -oo) == True\n \n     assert floor(y).rewrite(frac) == y - frac(y)\n     assert floor(y).rewrite(ceiling) == -ceiling(-y)\n@@ -126,6 +131,70 @@ def test_floor():\n     assert Eq(floor(y), y - frac(y))\n     assert Eq(floor(y), -ceiling(-y))\n \n+    neg = Symbol('neg', negative=True)\n+    nn = Symbol('nn', nonnegative=True)\n+    pos = Symbol('pos', positive=True)\n+    np = Symbol('np', nonpositive=True)\n+\n+    assert (floor(neg) < 0) == True\n+    assert (floor(neg) <= 0) == True\n+    assert (floor(neg) > 0) == False\n+    assert (floor(neg) >= 0) == False\n+    assert (floor(neg) <= -1) == True\n+    assert (floor(neg) >= -3) == (neg >= -3)\n+    assert (floor(neg) < 5) == (neg < 5)\n+\n+    assert (floor(nn) < 0) == False\n+    assert (floor(nn) >= 0) == True\n+\n+    assert (floor(pos) < 0) == False\n+    assert (floor(pos) <= 0) == (pos < 1)\n+    assert (floor(pos) > 0) == (pos >= 1)\n+    assert (floor(pos) >= 0) == True\n+    assert (floor(pos) >= 3) == (pos >= 3)\n+\n+    assert (floor(np) <= 0) == True\n+    assert (floor(np) > 0) == False\n+\n+    assert floor(neg).is_negative == True\n+    assert floor(neg).is_nonnegative == False\n+    assert floor(nn).is_negative == False\n+    assert floor(nn).is_nonnegative == True\n+    assert floor(pos).is_negative == False\n+    assert floor(pos).is_nonnegative == True\n+    assert floor(np).is_negative is None\n+    assert floor(np).is_nonnegative is None\n+\n+    assert (floor(7, evaluate=False) >= 7) == True\n+    assert (floor(7, evaluate=False) > 7) == False\n+    assert (floor(7, evaluate=False) <= 7) == True\n+    assert (floor(7, evaluate=False) < 7) == False\n+\n+    assert (floor(7, evaluate=False) >= 6) == True\n+    assert (floor(7, evaluate=False) > 6) == True\n+    assert (floor(7, evaluate=False) <= 6) == False\n+    assert (floor(7, evaluate=False) < 6) == False\n+\n+    assert (floor(7, evaluate=False) >= 8) == False\n+    assert (floor(7, evaluate=False) > 8) == False\n+    assert (floor(7, evaluate=False) <= 8) == True\n+    assert (floor(7, evaluate=False) < 8) == True\n+\n+    assert (floor(x) <= 5.5) == Le(floor(x), 5.5, evaluate=False)\n+    assert (floor(x) >= -3.2) == Ge(floor(x), -3.2, evaluate=False)\n+    assert (floor(x) < 2.9) == Lt(floor(x), 2.9, evaluate=False)\n+    assert (floor(x) > -1.7) == Gt(floor(x), -1.7, evaluate=False)\n+\n+    assert (floor(y) <= 5.5) == (y < 6)\n+    assert (floor(y) >= -3.2) == (y >= -3)\n+    assert (floor(y) < 2.9) == (y < 3)\n+    assert (floor(y) > -1.7) == (y >= -1)\n+\n+    assert (floor(y) <= n) == (y < n + 1)\n+    assert (floor(y) >= n) == (y >= n)\n+    assert (floor(y) < n) == (y < n)\n+    assert (floor(y) > n) == (y >= n + 1)\n+\n \n def test_ceiling():\n \n@@ -225,12 +294,17 @@ def test_ceiling():\n         11188719610782480504630258070757734324011354208865721592720336801\n \n     assert (ceiling(y) >= y) == True\n+    assert (ceiling(y) > y) == False\n     assert (ceiling(y) < y) == False\n+    assert (ceiling(y) <= y) == False\n     assert (ceiling(x) >= x).is_Relational  # x could be non-real\n     assert (ceiling(x) < x).is_Relational\n     assert (ceiling(x) >= y).is_Relational  # arg is not same as rhs\n     assert (ceiling(x) < y).is_Relational\n     assert (ceiling(y) >= -oo) == True\n+    assert (ceiling(y) > -oo) == True\n+    assert (ceiling(y) <= oo) == True\n+    assert (ceiling(y) < oo) == True\n \n     assert ceiling(y).rewrite(floor) == -floor(-y)\n     assert ceiling(y).rewrite(frac) == y + frac(-y)\n@@ -242,6 +316,70 @@ def test_ceiling():\n     assert Eq(ceiling(y), y + frac(-y))\n     assert Eq(ceiling(y), -floor(-y))\n \n+    neg = Symbol('neg', negative=True)\n+    nn = Symbol('nn', nonnegative=True)\n+    pos = Symbol('pos', positive=True)\n+    np = Symbol('np', nonpositive=True)\n+\n+    assert (ceiling(neg) <= 0) == True\n+    assert (ceiling(neg) < 0) == (neg <= -1)\n+    assert (ceiling(neg) > 0) == False\n+    assert (ceiling(neg) >= 0) == (neg > -1)\n+    assert (ceiling(neg) > -3) == (neg > -3)\n+    assert (ceiling(neg) <= 10) == (neg <= 10)\n+\n+    assert (ceiling(nn) < 0) == False\n+    assert (ceiling(nn) >= 0) == True\n+\n+    assert (ceiling(pos) < 0) == False\n+    assert (ceiling(pos) <= 0) == False\n+    assert (ceiling(pos) > 0) == True\n+    assert (ceiling(pos) >= 0) == True\n+    assert (ceiling(pos) >= 1) == True\n+    assert (ceiling(pos) > 5) == (pos > 5)\n+\n+    assert (ceiling(np) <= 0) == True\n+    assert (ceiling(np) > 0) == False\n+\n+    assert ceiling(neg).is_positive == False\n+    assert ceiling(neg).is_nonpositive == True\n+    assert ceiling(nn).is_positive is None\n+    assert ceiling(nn).is_nonpositive is None\n+    assert ceiling(pos).is_positive == True\n+    assert ceiling(pos).is_nonpositive == False\n+    assert ceiling(np).is_positive == False\n+    assert ceiling(np).is_nonpositive == True\n+\n+    assert (ceiling(7, evaluate=False) >= 7) == True\n+    assert (ceiling(7, evaluate=False) > 7) == False\n+    assert (ceiling(7, evaluate=False) <= 7) == True\n+    assert (ceiling(7, evaluate=False) < 7) == False\n+\n+    assert (ceiling(7, evaluate=False) >= 6) == True\n+    assert (ceiling(7, evaluate=False) > 6) == True\n+    assert (ceiling(7, evaluate=False) <= 6) == False\n+    assert (ceiling(7, evaluate=False) < 6) == False\n+\n+    assert (ceiling(7, evaluate=False) >= 8) == False\n+    assert (ceiling(7, evaluate=False) > 8) == False\n+    assert (ceiling(7, evaluate=False) <= 8) == True\n+    assert (ceiling(7, evaluate=False) < 8) == True\n+\n+    assert (ceiling(x) <= 5.5) == Le(ceiling(x), 5.5, evaluate=False)\n+    assert (ceiling(x) >= -3.2) == Ge(ceiling(x), -3.2, evaluate=False)\n+    assert (ceiling(x) < 2.9) == Lt(ceiling(x), 2.9, evaluate=False)\n+    assert (ceiling(x) > -1.7) == Gt(ceiling(x), -1.7, evaluate=False)\n+\n+    assert (ceiling(y) <= 5.5) == (y <= 5)\n+    assert (ceiling(y) >= -3.2) == (y > -4)\n+    assert (ceiling(y) < 2.9) == (y <= 2)\n+    assert (ceiling(y) > -1.7) == (y > -2)\n+\n+    assert (ceiling(y) <= n) == (y <= n)\n+    assert (ceiling(y) >= n) == (y > n - 1)\n+    assert (ceiling(y) < n) == (y <= n - 1)\n+    assert (ceiling(y) > n) == (y > n)\n+\n \n def test_frac():\n     assert isinstance(frac(x), frac)\n",
  "problem_statement": "ceiling(pos) > 0 should be true\nAlso, shouldn't `floor(neg) < 0`, `floor(pos) >= 0` and `ceiling(neg) <=0` evaluate to True, too?\n",
  "hints_text": "",
  "created_at": "2019-07-31T23:51:00Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_floor\", \"test_ceiling\"]",
  "PASS_TO_PASS": "[\"test_frac\", \"test_series\", \"test_issue_11207\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.115781",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}