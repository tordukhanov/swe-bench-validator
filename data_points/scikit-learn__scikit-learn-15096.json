{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-15096",
  "base_commit": "e424ab17bb73472a829faca3dfdc599a9d6df56b",
  "patch": "diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py\n--- a/sklearn/model_selection/_search.py\n+++ b/sklearn/model_selection/_search.py\n@@ -730,8 +730,10 @@ def evaluate_candidates(candidate_params):\n             self.best_params_ = results[\"params\"][self.best_index_]\n \n         if self.refit:\n-            self.best_estimator_ = clone(base_estimator).set_params(\n-                **self.best_params_)\n+            # we clone again after setting params in case some\n+            # of the params are estimators as well.\n+            self.best_estimator_ = clone(clone(base_estimator).set_params(\n+                **self.best_params_))\n             refit_start_time = time.time()\n             if y is not None:\n                 self.best_estimator_.fit(X, y, **fit_params)\ndiff --git a/sklearn/model_selection/_validation.py b/sklearn/model_selection/_validation.py\n--- a/sklearn/model_selection/_validation.py\n+++ b/sklearn/model_selection/_validation.py\n@@ -488,7 +488,14 @@ def _fit_and_score(estimator, X, y, scorer, train, test, verbose,\n \n     train_scores = {}\n     if parameters is not None:\n-        estimator.set_params(**parameters)\n+        # clone after setting parameters in case any parameters\n+        # are estimators (like pipeline steps)\n+        # because pipeline doesn't clone steps in fit\n+        cloned_parameters = {}\n+        for k, v in parameters.items():\n+            cloned_parameters[k] = clone(v, safe=False)\n+\n+        estimator = estimator.set_params(**cloned_parameters)\n \n     start_time = time.time()\n \n",
  "test_patch": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -63,7 +63,7 @@\n from sklearn.metrics import roc_auc_score\n from sklearn.impute import SimpleImputer\n from sklearn.pipeline import Pipeline\n-from sklearn.linear_model import Ridge, SGDClassifier\n+from sklearn.linear_model import Ridge, SGDClassifier, LinearRegression\n \n from sklearn.model_selection.tests.common import OneTimeSplitter\n \n@@ -198,6 +198,24 @@ def test_grid_search():\n     assert_raises(ValueError, grid_search.fit, X, y)\n \n \n+def test_grid_search_pipeline_steps():\n+    # check that parameters that are estimators are cloned before fitting\n+    pipe = Pipeline([('regressor', LinearRegression())])\n+    param_grid = {'regressor': [LinearRegression(), Ridge()]}\n+    grid_search = GridSearchCV(pipe, param_grid, cv=2)\n+    grid_search.fit(X, y)\n+    regressor_results = grid_search.cv_results_['param_regressor']\n+    assert isinstance(regressor_results[0], LinearRegression)\n+    assert isinstance(regressor_results[1], Ridge)\n+    assert not hasattr(regressor_results[0], 'coef_')\n+    assert not hasattr(regressor_results[1], 'coef_')\n+    assert regressor_results[0] is not grid_search.best_estimator_\n+    assert regressor_results[1] is not grid_search.best_estimator_\n+    # check that we didn't modify the parameter grid that was passed\n+    assert not hasattr(param_grid['regressor'][0], 'coef_')\n+    assert not hasattr(param_grid['regressor'][1], 'coef_')\n+\n+\n def check_hyperparameter_searcher_with_fit_params(klass, **klass_kwargs):\n     X = np.arange(100).reshape(10, 10)\n     y = np.array([0] * 5 + [1] * 5)\n",
  "problem_statement": "GridSearchCV saves all fitted estimator in cv_results['params'] when params are estimators\n#### Description\r\nI use GridSearchCV to optimize the hyperparameters of a pipeline. I set the param grid by inputing transformers or estimators at different steps of the pipeline, following the Pipeline documentation:\r\n\r\n> A stepâ€™s estimator may be replaced entirely by setting the parameter with its name to another estimator, or a transformer removed by setting to None.\r\n\r\nI couldn't figure why dumping cv_results_ would take so much memory on disk. It happens that cv_results_['params'] and all cv_results_['param_*'] objects contains fitted estimators, as much as there are points on my grid.\r\n\r\nThis bug should happen only when n_jobs = 1 (which is my usecase).\r\n\r\nI don't think this is intended (else the arguments and attributes _refit_ and _best_\\__estimator_ wouldn't be used).\r\n\r\nMy guess is that during the grid search, those estimator's aren't cloned before use (which could be a problem if using the same grid search several times, because estimators passed in the next grid would be fitted...).\r\n\r\n#### Version: 0.19.0\r\n\r\n\n",
  "hints_text": "A solution could be to clone the estimator after set_param call in _fit_and_score, and return the new cloned estimator. However it would break any function that use _fit_and_score and expect to keep using the same estimator instance than passed in _fit_and_score..\nHmm... I agree this is a bit of an issue. But I think it is reflecting a\ndesign issue with the estimator you are setting parameters of: it should\nprobably be cloning its parameters before fitting them if they did not\nalready come in fitted. Yes, our Pipeline and FeatureUnion are guilty of\nthis and it's a bit of a problem. We've been trying to work out how to\nchange it and not break too much code.\n\nI'll have to think about what risks we'd take by cloning when setting\nparameters. It's an interesting proposal. Certainly, users could have taken\nadvantage of this fact to allow estimators to accept pre-fitted models. And\nit's long-standing behaviour, so I wouldn't want to break it without\nwarning...\n\nI just spent hours trying to get to the bottom of some strange behavior and errors related to grabbing pipelines from cv_results_ and just realized this is likely the issue, when params are estimator objects they are all fitted and it causes weird errors when you try to reuse the pipeline.  In my case the first error was with StandardScaler() and getting the ValueError cannot broadcast... shape... yada.\r\n\r\nI can give you a major use case for getting pipelines from cv_results_, I am using the nice GridSearchCV functionality to not only optimize estimator hyperparameters but also compare and optimize different pipeline step combos (thanks @jnothman for helping me with questions on implementing that a while back).  After it runs I interrogate cv_results_ to determine the best scores of each pipeline type combo and was grabbing those pipelines from cv_results_['params'] to run them each on held out test data to also get test scores.  When calling decision_function() or predict_proba() I was getting errors I didn't understand until now.\r\n\r\nEither way it's not a work stoppage issue for me, I can simply use the original non-fitted estimator combos I passed in the param_grid to GridSearchCV in the first place.  Thanks though @fcharras making me realize what was wrong!\r\n\n@hermidalc can you please open an issue with a reproducible example?\nStudent just came to me with this behavior being very confused. It looks like the estimators that are stored don't correspond to the same split, which is weird.\r\n\r\nI'll have a minimum example soon.\r\n\r\nI think cloning here would be the right thing to do, and I would call it a bug fix.\r\nThe only way a user could have used it here is using a meta-estimator with a prefit estimator, right?\r\nI guess this would be a hacky work-around for being able to cross-validate something with a prefit estimator, but I feel like this is not a route we should encourage.\r\n\r\nMaybe we can discuss this at the sprint?\nThough on the other hand, this is part of the freezing discussion. If we can freeze, we can clone in the pipeline and then all is good...\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\nfrom sklearn.linear_model import LinearRegression, Ridge\r\nfrom sklearn.compose import make_column_transformer\r\nfrom sklearn.preprocessing import OneHotEncoder \r\nfrom sklearn.impute import SimpleImputer\r\nfrom sklearn.model_selection import train_test_split, GridSearchCV\r\nfrom sklearn.pipeline import Pipeline\r\n\r\nhousing = pd.read_excel(\"http://www.amstat.org/publications/jse/v19n3/decock/AmesHousing.xls\", nrows=500)\r\n\r\ny = housing['SalePrice']\r\nX = housing.drop(columns=['SalePrice', 'Order', 'PID'])\r\n\r\ncategorical = X.dtypes == object\r\nX.loc[:, categorical] = X.loc[:, categorical].fillna(\"NaN\")\r\n\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\r\n\r\ntransform = make_column_transformer(\r\n    (SimpleImputer(strategy=\"median\"), ~categorical),\r\n    (OneHotEncoder(handle_unknown=\"ignore\"), categorical)\r\n)\r\n\r\npipe = Pipeline([\r\n    ('transformer', transform),\r\n    ('regressor', LinearRegression())\r\n])\r\nparam_grid = {'regressor': [LinearRegression(), Ridge()]}\r\n\r\ngrid = GridSearchCV(pipe, param_grid, cv=10)\r\ngrid.fit(X_train, y_train)\r\n\r\nprint(\"Number of Linear Regression Weights: {}\" \\\r\n      .format(len(grid.cv_results_['param_regressor'][0].coef_)))\r\n\r\nprint(\"Number of Ridge Regression Weights: {}\" \\\r\n      .format(len(grid.cv_results_['param_regressor'][1].coef_)))\r\n```\r\n> 258\r\n> 260\r\n\r\nI have no idea what's going on here, looks like the Imputer drops different numbers of columns or the OneHotEncoder sees different categories. But that shouldn't really happen, right? Also, this is deterministic.\nWhy shouldn't OneHotEncoder see different categories?\n\n@jnothman because the order of CV folds is deterministic and the categories don't depend on whether ridge or lr is used, right?\nNot sure if this helps, but I've been dealing with what seems to be the same, and have isolated the problem to the `clone` method, used [here](https://github.com/scikit-learn/scikit-learn/blob/7813f7efb/sklearn/model_selection/_validation.py#L779) inside of `cross_val_predict` and [here](https://github.com/scikit-learn/scikit-learn/blob/7813f7efb/sklearn/model_selection/_validation.py#L227) inside of cross_validate.\r\n\r\n```\r\nfrom sklearn.base import is_classifier, clone\r\npipe2 = clone(pipe)\r\nfirst = pipe.fit_transform(train[features], train[target]).shape\r\nsecond = pipe2.fit_transform(train[features], train[target]).shape\r\nprint(first)\r\n>>> (16000, 245)\r\nprint(second)\r\n>>> (16000, 13)\r\n```\r\n\r\nIf this is relevant I can attempt to do an end-to-end example. \nI'm not sure it's relevant to the current issue, but you could certainly\nopen a new issue with a complete, reproducible example.\n\nYou are right, I tried it on the AmesHousing example and did not reproduce. Will open a separate one.  \n@PedroGFonseca could you ever reproduce?\nAh, I understand now: the one that is selected will be refit, so ``grid.cv_results_['param_regressor'][0]`` is the one fitted on the last fold in cross-validation, while ``grid.cv_results_['param_regressor'][1]`` is actually ``grid.best_estimator_``.\r\n\r\nThere should definitely be some cloning here somewhere (cc @thomasjpfan lol)",
  "created_at": "2019-09-26T17:13:08Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/model_selection/tests/test_search.py::test_grid_search_pipeline_steps\"]",
  "PASS_TO_PASS": "[\"sklearn/model_selection/tests/test_search.py::test_validate_parameter_input[0-TypeError-Parameter\", \"sklearn/model_selection/tests/test_search.py::test_validate_parameter_input[input1-TypeError-Parameter\", \"sklearn/model_selection/tests/test_search.py::test_validate_parameter_input[input2-TypeError-Parameter.*\", \"sklearn/model_selection/tests/test_search.py::test_parameter_grid\", \"sklearn/model_selection/tests/test_search.py::test_grid_search\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_with_fit_params\", \"sklearn/model_selection/tests/test_search.py::test_random_search_with_fit_params\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_no_score\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_score_method\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_groups\", \"sklearn/model_selection/tests/test_search.py::test_classes__property\", \"sklearn/model_selection/tests/test_search.py::test_trivial_cv_results_attr\", \"sklearn/model_selection/tests/test_search.py::test_no_refit\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_error\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_one_grid_point\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_when_param_grid_includes_range\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_bad_param_grid\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_sparse\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_sparse_scoring\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_precomputed_kernel\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_precomputed_kernel_error_nonsquare\", \"sklearn/model_selection/tests/test_search.py::test_refit\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_invalid_type\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_out_bound[RandomizedSearchCV--1]\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_out_bound[RandomizedSearchCV-2]\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_out_bound[GridSearchCV--1]\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_out_bound[GridSearchCV-2]\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_multi_metric\", \"sklearn/model_selection/tests/test_search.py::test_gridsearch_nd\", \"sklearn/model_selection/tests/test_search.py::test_X_as_list\", \"sklearn/model_selection/tests/test_search.py::test_y_as_list\", \"sklearn/model_selection/tests/test_search.py::test_pandas_input\", \"sklearn/model_selection/tests/test_search.py::test_unsupervised_grid_search\", \"sklearn/model_selection/tests/test_search.py::test_gridsearch_no_predict\", \"sklearn/model_selection/tests/test_search.py::test_param_sampler\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_cv_results\", \"sklearn/model_selection/tests/test_search.py::test_random_search_cv_results\", \"sklearn/model_selection/tests/test_search.py::test_search_default_iid[GridSearchCV-specialized_params0]\", \"sklearn/model_selection/tests/test_search.py::test_search_default_iid[RandomizedSearchCV-specialized_params1]\", \"sklearn/model_selection/tests/test_search.py::test_search_iid_param\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_cv_results_multimetric\", \"sklearn/model_selection/tests/test_search.py::test_random_search_cv_results_multimetric\", \"sklearn/model_selection/tests/test_search.py::test_search_cv_results_rank_tie_breaking\", \"sklearn/model_selection/tests/test_search.py::test_search_cv_results_none_param\", \"sklearn/model_selection/tests/test_search.py::test_search_cv_timing\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_correct_score_results\", \"sklearn/model_selection/tests/test_search.py::test_fit_grid_point\", \"sklearn/model_selection/tests/test_search.py::test_pickle\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_with_multioutput_data\", \"sklearn/model_selection/tests/test_search.py::test_predict_proba_disabled\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_allows_nans\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_failing_classifier\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_failing_classifier_raise\", \"sklearn/model_selection/tests/test_search.py::test_parameters_sampler_replacement\", \"sklearn/model_selection/tests/test_search.py::test_stochastic_gradient_loss_param\", \"sklearn/model_selection/tests/test_search.py::test_search_train_scores_set_to_false\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_cv_splits_consistency\", \"sklearn/model_selection/tests/test_search.py::test_transform_inverse_transform_round_trip\", \"sklearn/model_selection/tests/test_search.py::test_custom_run_search\", \"sklearn/model_selection/tests/test_search.py::test__custom_fit_no_run_search\", \"sklearn/model_selection/tests/test_search.py::test_deprecated_grid_search_iid[False]\", \"sklearn/model_selection/tests/test_search.py::test_deprecated_grid_search_iid[True]\", \"sklearn/model_selection/tests/test_search.py::test_empty_cv_iterator_error\", \"sklearn/model_selection/tests/test_search.py::test_random_search_bad_cv\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.011209",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}