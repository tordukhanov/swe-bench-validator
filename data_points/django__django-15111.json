{
  "repo": "django/django",
  "instance_id": "django__django-15111",
  "base_commit": "e361621dbc77b5d926ec4deff5e7c792a61db71e",
  "patch": "diff --git a/django/core/management/templates.py b/django/core/management/templates.py\n--- a/django/core/management/templates.py\n+++ b/django/core/management/templates.py\n@@ -7,7 +7,7 @@\n import stat\n import tempfile\n from importlib import import_module\n-from urllib.request import urlretrieve\n+from urllib.request import build_opener\n \n import django\n from django.conf import settings\n@@ -277,8 +277,14 @@ def cleanup_url(url):\n \n         if self.verbosity >= 2:\n             self.stdout.write('Downloading %s' % display_url)\n+\n+        the_path = os.path.join(tempdir, filename)\n+        opener = build_opener()\n+        opener.addheaders = [('User-Agent', f'Django/{django.__version__}')]\n         try:\n-            the_path, info = urlretrieve(url, os.path.join(tempdir, filename))\n+            with opener.open(url) as source, open(the_path, 'wb') as target:\n+                headers = source.info()\n+                target.write(source.read())\n         except OSError as e:\n             raise CommandError(\"couldn't download URL %s to %s: %s\" %\n                                (url, filename, e))\n@@ -286,7 +292,7 @@ def cleanup_url(url):\n         used_name = the_path.split('/')[-1]\n \n         # Trying to get better name from response headers\n-        content_disposition = info.get('content-disposition')\n+        content_disposition = headers['content-disposition']\n         if content_disposition:\n             _, params = cgi.parse_header(content_disposition)\n             guessed_filename = params.get('filename') or used_name\n@@ -295,7 +301,7 @@ def cleanup_url(url):\n \n         # Falling back to content type guessing\n         ext = self.splitext(guessed_filename)[1]\n-        content_type = info.get('content-type')\n+        content_type = headers['content-type']\n         if not ext and content_type:\n             ext = mimetypes.guess_extension(content_type)\n             if ext:\n",
  "test_patch": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -33,7 +33,11 @@\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n from django.test.utils import captured_stderr, captured_stdout\n+from django.urls import path\n from django.utils.version import PY39\n+from django.views.static import serve\n+\n+from . import urls\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n@@ -2127,6 +2131,33 @@ def test_custom_project_template_from_tarball_by_url(self):\n         self.assertTrue(os.path.isdir(testproject_dir))\n         self.assertTrue(os.path.exists(os.path.join(testproject_dir, 'run.py')))\n \n+    def test_custom_project_template_from_tarball_by_url_django_user_agent(self):\n+        user_agent = None\n+\n+        def serve_template(request, *args, **kwargs):\n+            nonlocal user_agent\n+            user_agent = request.headers['User-Agent']\n+            return serve(request, *args, **kwargs)\n+\n+        old_urlpatterns = urls.urlpatterns[:]\n+        try:\n+            urls.urlpatterns += [\n+                path(\n+                    'user_agent_check/<path:path>',\n+                    serve_template,\n+                    {'document_root': os.path.join(urls.here, 'custom_templates')},\n+                ),\n+            ]\n+\n+            template_url = f'{self.live_server_url}/user_agent_check/project_template.tgz'\n+            args = ['startproject', '--template', template_url, 'urltestproject']\n+            _, err = self.run_django_admin(args)\n+\n+            self.assertNoOutput(err)\n+            self.assertIn('Django/%s' % get_version(), user_agent)\n+        finally:\n+            urls.urlpatterns = old_urlpatterns\n+\n     def test_project_template_tarball_url(self):\n         \"Startproject management command handles project template tar/zip balls from non-canonical urls\"\n         template_url = '%s/custom_templates/project_template.tgz/' % self.live_server_url\n",
  "problem_statement": "django-admin start[project|app] doesn't send proper user agent header when HTTP(S) url is sent.\nDescription\n\t \n\t\t(last modified by rsp2k)\n\t \nBy default, when fetching a remote template, django-admin start[app|project] uses the default urllib User Agent which causes some sites to block requests (namely gitlab, since they use cloudflare See ​https://gitlab.com/gitlab-org/gitlab/-/issues/219669).\nThis patch sets the 'User Agent' header to Django/DJANGO_VERSION.\n",
  "hints_text": "Hi rsp2k. I'm inclined to accept this — no problem setting the User-Agent. Initially though I'm going to close as needsinfo — that info being, are you up for finishing this? I see you removed your assignment, but the patch needs tests. Specifically they could go in django/tests/admin_scripts/tests.py in the StartProject and StartApp classes. If so can you add the tests, ​open a PR on GitHub, re-open the ticket, and assign yourself again? Thanks.\nThank you for your reply. I am working on the tests now and will follow the steps you outlined. I took myself off the ticket because I thought it might not get routed properly, my mistake. I'm reassigning it now.\nSuper, thanks for the follow-up! Let's accept for review. Welcome aboard!",
  "created_at": "2021-11-22T13:09:39Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_custom_project_template_from_tarball_by_url_django_user_agent (admin_scripts.tests.StartProject)\"]",
  "PASS_TO_PASS": "[\"Program name is computed from the execute_from_command_line()'s argv\", \"test_params_to_runserver (admin_scripts.tests.ManageTestserver)\", \"test_testserver_handle_params (admin_scripts.tests.ManageTestserver)\", \"test_migration_warning_multiple_apps (admin_scripts.tests.ManageRunserverMigrationWarning)\", \"test_migration_warning_one_app (admin_scripts.tests.ManageRunserverMigrationWarning)\", \"Ensure runserver.check_migrations doesn't choke on empty DATABASES.\", \"runserver.check_migrations() doesn't choke when a database is read-only.\", \"test_runner_addrport_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runner_ambiguous (admin_scripts.tests.ManageRunserver)\", \"test_runner_custom_defaults (admin_scripts.tests.ManageRunserver)\", \"test_runner_custom_defaults_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runner_hostname (admin_scripts.tests.ManageRunserver)\", \"test_runner_hostname_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runserver_addrport (admin_scripts.tests.ManageRunserver)\", \"test_skip_checks (admin_scripts.tests.ManageRunserver)\", \"Apps listed first in INSTALLED_APPS have precedence.\", \"test_program_name_in_help (admin_scripts.tests.MainModule)\", \"runserver doesn't support --verbosity and --trackback options.\", \"test_non_existent_command_output (admin_scripts.tests.ManageManuallyConfiguredSettings)\", \"test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts)\", \"Regression for #20509\", \"no settings: manage.py builtin commands fail with an error when no settings provided\", \"no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"test_no_suggestions (admin_scripts.tests.DjangoAdminSuggestions)\", \"test_suggestions (admin_scripts.tests.DjangoAdminSuggestions)\", \"manage.py builtin commands does not swallow attribute error due to bad\", \"Test listing available commands output note when only core commands are\", \"import error: manage.py builtin commands shows useful diagnostic info\", \"test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"no settings: django-admin builtin commands fail with an error when no settings provided\", \"no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"Commands that don't require settings succeed if the settings file\", \"Options passed before settings are correctly handled.\", \"Options are correctly handled when they are passed before and after\", \"Options passed after settings are correctly handled.\", \"Short options passed after settings are correctly handled.\", \"Short options passed before settings are correctly handled.\", \"fulldefault: django-admin builtin commands fail with an error when no settings provided\", \"fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"fulldefault: django-admin builtin commands succeed if the environment contains settings\", \"fulldefault: django-admin builtin commands succeed if a settings file is provided\", \"fulldefault: django-admin can't execute user commands unless settings are provided\", \"fulldefault: django-admin can execute user commands if settings are provided in environment\", \"fulldefault: django-admin can execute user commands if settings are provided as argument\", \"alternate: django-admin builtin commands fail with an error when no settings provided\", \"alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"alternate: django-admin builtin commands succeed if settings are provided in the environment\", \"alternate: django-admin builtin commands succeed if settings are provided as argument\", \"alternate: django-admin can't execute user commands unless settings are provided\", \"alternate: django-admin can execute user commands if settings are provided in environment\", \"alternate: django-admin can execute user commands if settings are provided as argument\", \"default: django-admin builtin commands fail with an error when no settings provided\", \"default: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"default: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"default: django-admin builtin commands succeed if settings are provided in the environment\", \"default: django-admin builtin commands succeed if settings are provided as argument\", \"default: django-admin can't execute user commands if it isn't provided settings\", \"default: django-admin can execute user commands if settings are provided in environment\", \"default: django-admin can execute user commands if settings are provided as argument\", \"minimal: django-admin builtin commands fail with an error when no settings provided\", \"minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"minimal: django-admin builtin commands fail if settings are provided in the environment\", \"minimal: django-admin builtin commands fail if settings are provided as argument\", \"minimal: django-admin can't execute user commands unless settings are provided\", \"minimal: django-admin can't execute user commands, even if settings are provided in environment\", \"minimal: django-admin can't execute user commands, even if settings are provided as argument\", \"manage.py check does not raise errors when an app imports a base\", \"manage.py check reports an ImportError if an app's models.py\", \"manage.py check does not raise an ImportError validating a\", \"check reports an error on a nonexistent app in INSTALLED_APPS.\", \"All errors/warnings should be sorted by level and by message.\", \"When there are only warnings or less serious messages, then Django\", \"The all option also shows settings with the default value.\", \"Runs without error and emits settings diff.\", \"The --default option specifies an alternate settings module for\", \"test_dynamic_settings_configured (admin_scripts.tests.DiffSettings)\", \"test_settings_configured (admin_scripts.tests.DiffSettings)\", \"--output=unified emits settings diff in unified mode.\", \"--output=unified --all emits settings diff in unified mode and includes\", \"fulldefault: manage.py builtin commands succeed when default settings are appropriate\", \"fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist\", \"fulldefault: manage.py builtin commands succeed if settings are provided in the environment\", \"fulldefault: manage.py builtin commands succeed if settings are provided as argument\", \"fulldefault: manage.py can execute user commands when default settings are appropriate\", \"fulldefault: manage.py can execute user commands when settings are provided in environment\", \"fulldefault: manage.py can execute user commands when settings are provided as argument\", \"multiple: manage.py builtin commands fail with an error when no settings provided\", \"multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"multiple: manage.py can execute builtin commands if settings are provided in the environment\", \"multiple: manage.py builtin commands succeed if settings are provided as argument\", \"multiple: manage.py can't execute user commands using default settings\", \"multiple: manage.py can execute user commands if settings are provided in environment\", \"multiple: manage.py can execute user commands if settings are provided as argument\", \"alternate: manage.py builtin commands fail with an error when no default settings provided\", \"alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"alternate: manage.py builtin commands work if settings are provided in the environment\", \"alternate: manage.py builtin commands work with settings provided as argument\", \"alternate: manage.py can't execute user commands without settings\", \"alternate: manage.py output syntax color can be deactivated with the `--no-color` option\", \"alternate: manage.py can execute user commands if settings are provided in environment\", \"alternate: manage.py can execute user commands if settings are provided as argument\", \"directory: django-admin builtin commands fail with an error when no settings provided\", \"directory: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"directory: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"directory: django-admin builtin commands succeed if settings are provided in the environment\", \"directory: django-admin builtin commands succeed if settings are provided as argument\", \"directory: django-admin can't execute user commands unless settings are provided\", \"directory: startapp creates the correct directory\", \"directory: startapp creates the correct directory with a custom template\", \"startapp creates the correct directory with Unicode characters.\", \"default: manage.py builtin commands succeed when default settings are appropriate\", \"default: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"default: manage.py builtin commands succeed if settings file (from argument) doesn't exist\", \"default: manage.py builtin commands succeed if settings are provided in the environment\", \"default: manage.py builtin commands succeed if settings are provided as argument\", \"default: manage.py can execute user commands when default settings are appropriate\", \"default: manage.py can execute user commands when settings are provided in environment\", \"default: manage.py can execute user commands when settings are provided as argument\", \"minimal: manage.py builtin commands fail with an error when no settings provided\", \"minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"minimal: manage.py builtin commands fail if settings are provided in the environment\", \"minimal: manage.py builtin commands fail if settings are provided as argument\", \"minimal: manage.py can't execute user commands without appropriate settings\", \"minimal: manage.py can't execute user commands, even if settings are provided in environment\", \"minimal: manage.py can't execute user commands, even if settings are provided as argument\", \"startapp validates that app name doesn't clash with existing Python\", \"test_importable_target_name (admin_scripts.tests.StartApp)\", \"startapp validates that app name is a valid Python identifier.\", \"test_invalid_target_name (admin_scripts.tests.StartApp)\", \"test_overlaying_app (admin_scripts.tests.StartApp)\", \"test_template (admin_scripts.tests.StartApp)\", \"test_trailing_slash_in_target_app_directory_name (admin_scripts.tests.StartApp)\", \"Make sure an exception is raised when the provided\", \"Make sure the startproject management command is able to use a different project template\", \"Make sure template context variables are rendered with proper values\", \"Excluded directories (in addition to .git and __pycache__) are not\", \"Make sure the startproject management command is able to use a different project template from a tarball\", \"The startproject management command is able to use a different project\", \"Startproject can use a project template from a tarball and create it in a specified location\", \"Hidden directories are excluded by default.\", \"Template context variables in hidden directories are rendered, if not\", \"The startproject management command is able to render templates with\", \"Make sure the startproject management command is able to render custom files\", \"test_honor_umask (admin_scripts.tests.StartProject)\", \"startproject validates that project name doesn't clash with existing\", \"Make sure the startproject management command validates a project name\", \"Make sure template context variables are not html escaped\", \"Startproject management command handles project template tar/zip balls from non-canonical urls\", \"Make sure the startproject management command creates a project\", \"Make sure the startproject management command creates a project in a specific directory\", \"Ticket 17475: Template dir passed has a trailing path separator\", \"Make sure passing the wrong kinds of arguments outputs an error and prints usage\", \"User AppCommands can execute when a single app name is provided\", \"User AppCommands raise an error when multiple app names are provided\", \"User AppCommands raise an error when no app name is provided\", \"User AppCommands can execute when some of the provided app names are invalid\", \"User BaseCommands can execute when a label is provided\", \"User BaseCommands can execute when no labels are provided\", \"User BaseCommands can execute with options when a label is provided\", \"User BaseCommands can execute with multiple options when a label is provided\", \"User BaseCommands outputs command usage when wrong option is specified\", \"Test run_from_argv properly terminates even with custom execute() (#19665)\", \"test_color_style (admin_scripts.tests.CommandTypes)\", \"test_command_color (admin_scripts.tests.CommandTypes)\", \"--no-color prevent colorization of the output\", \"test_custom_stderr (admin_scripts.tests.CommandTypes)\", \"test_custom_stdout (admin_scripts.tests.CommandTypes)\", \"test_force_color_command_init (admin_scripts.tests.CommandTypes)\", \"test_force_color_execute (admin_scripts.tests.CommandTypes)\", \"help is handled as a special case\", \"--help is equivalent to help\", \"help --commands shows the list of all available commands\", \"test_help_default_options_with_custom_arguments (admin_scripts.tests.CommandTypes)\", \"-h is handled as a short form of --help\", \"User LabelCommands can execute when a label is provided\", \"User LabelCommands are executed multiple times if multiple labels are provided\", \"User LabelCommands raise an error if no label is provided\", \"test_no_color_force_color_mutually_exclusive_command_init (admin_scripts.tests.CommandTypes)\", \"test_no_color_force_color_mutually_exclusive_execute (admin_scripts.tests.CommandTypes)\", \"NoArg Commands can be executed\", \"NoArg Commands raise an error if an argument is provided\", \"A command called from the command line should close connections after\", \"Non-ASCII message of CommandError does not raise any\", \"--help can be used on a specific command\", \"test_suppress_base_options_command_defaults (admin_scripts.tests.CommandTypes)\", \"test_suppress_base_options_command_help (admin_scripts.tests.CommandTypes)\", \"version is handled as a special case\", \"--version is equivalent to version\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.718528",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}