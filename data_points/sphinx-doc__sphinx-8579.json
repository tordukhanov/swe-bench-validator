{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8579",
  "base_commit": "955d6558ec155dffaef999d890c2cdb224cbfbb9",
  "patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -22,7 +22,7 @@\n from urllib.parse import unquote, urlparse\n \n from docutils import nodes\n-from docutils.nodes import Node\n+from docutils.nodes import Element, Node\n from requests import Response\n from requests.exceptions import HTTPError, TooManyRedirects\n \n@@ -47,6 +47,14 @@\n DEFAULT_DELAY = 60.0\n \n \n+def node_line_or_0(node: Element) -> int:\n+    \"\"\"\n+    PriorityQueue items must be comparable. The line number is part of the\n+    tuple used by the PriorityQueue, keep an homogeneous type for comparison.\n+    \"\"\"\n+    return get_node_line(node) or 0\n+\n+\n class AnchorCheckParser(HTMLParser):\n     \"\"\"Specialized HTML parser that looks for a specific anchor.\"\"\"\n \n@@ -406,7 +414,7 @@ def write_doc(self, docname: str, doctree: Node) -> None:\n             if 'refuri' not in refnode:\n                 continue\n             uri = refnode['refuri']\n-            lineno = get_node_line(refnode)\n+            lineno = node_line_or_0(refnode)\n             uri_info = (CHECK_IMMEDIATELY, uri, docname, lineno)\n             self.wqueue.put(uri_info, False)\n             n += 1\n@@ -415,7 +423,7 @@ def write_doc(self, docname: str, doctree: Node) -> None:\n         for imgnode in doctree.traverse(nodes.image):\n             uri = imgnode['candidates'].get('?')\n             if uri and '://' in uri:\n-                lineno = get_node_line(imgnode)\n+                lineno = node_line_or_0(imgnode)\n                 uri_info = (CHECK_IMMEDIATELY, uri, docname, lineno)\n                 self.wqueue.put(uri_info, False)\n                 n += 1\n",
  "test_patch": "diff --git a/tests/roots/test-linkcheck-localserver-two-links/conf.py b/tests/roots/test-linkcheck-localserver-two-links/conf.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-linkcheck-localserver-two-links/conf.py\n@@ -0,0 +1 @@\n+exclude_patterns = ['_build']\ndiff --git a/tests/roots/test-linkcheck-localserver-two-links/index.rst b/tests/roots/test-linkcheck-localserver-two-links/index.rst\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-linkcheck-localserver-two-links/index.rst\n@@ -0,0 +1,6 @@\n+.. image:: http://localhost:7777/\n+   :target: http://localhost:7777/\n+\n+`weblate.org`_\n+\n+.. _weblate.org: http://localhost:7777/\ndiff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -573,3 +573,40 @@ def test_limit_rate_bails_out_after_waiting_max_time(app):\n     checker.rate_limits = {\"localhost\": RateLimit(90.0, 0.0)}\n     next_check = checker.limit_rate(FakeResponse())\n     assert next_check is None\n+\n+\n+@pytest.mark.sphinx(\n+    'linkcheck', testroot='linkcheck-localserver-two-links', freshenv=True,\n+)\n+def test_priorityqueue_items_are_comparable(app):\n+    with http_server(OKHandler):\n+        app.builder.build_all()\n+    content = (app.outdir / 'output.json').read_text()\n+    rows = [json.loads(x) for x in sorted(content.splitlines())]\n+    assert rows == [\n+        {\n+            'filename': 'index.rst',\n+            # Should not be None.\n+            'lineno': 0,\n+            'status': 'working',\n+            'code': 0,\n+            'uri': 'http://localhost:7777/',\n+            'info': '',\n+        },\n+        {\n+            'filename': 'index.rst',\n+            'lineno': 0,\n+            'status': 'working',\n+            'code': 0,\n+            'uri': 'http://localhost:7777/',\n+            'info': '',\n+        },\n+        {\n+            'filename': 'index.rst',\n+            'lineno': 4,\n+            'status': 'working',\n+            'code': 0,\n+            'uri': 'http://localhost:7777/',\n+            'info': '',\n+        }\n+    ]\n",
  "problem_statement": "Linkcheck crashes in 3.4.0\n**Describe the bug**\r\n\r\nWhen running linkcheck in Weblate docs, it crashes with:\r\n\r\n```\r\n Exception in thread Thread-2:\r\nTraceback (most recent call last):\r\n  File \"/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\r\n\r\nException occurred:\r\n    self.run()\r\n  File \"/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/threading.py\", line 870, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/site-packages/sphinx/builders/linkcheck.py\", line 298, in check_thread\r\n    self.wqueue.task_done()\r\n  File \"/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/queue.py\", line 74, in task_done\r\nError:     raise ValueError('task_done() called too many times')\r\nValueError: task_done() called too many times\r\n  File \"/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/queue.py\", line 233, in _put\r\n    heappush(self.queue, item)\r\nTypeError: '<' not supported between instances of 'int' and 'NoneType'\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\n<Paste your command-line here which cause the problem>\r\n\r\n$ git clone https://github.com/WeblateOrg/weblate.git\r\n$ cd weblate\r\n$ pip install -r docs/requirements.txt\r\n$ cd docs\r\n$ make linkcheck\r\n```\r\n\r\n**Expected behavior**\r\nNo crash :-)\r\n\r\n**Your project**\r\nhttps://github.com/WeblateOrg/weblate/tree/master/docs\r\n\r\n**Screenshots**\r\nCI failure: https://github.com/WeblateOrg/weblate/runs/1585580811?check_suite_focus=true\r\n\r\n**Environment info**\r\n- OS: Linux\r\n- Python version: 3.8.6\r\n- Sphinx version: 3.4.0\r\n- Sphinx extensions:  several, but should not be relevant here\r\n- Extra tools: none involved\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\n- [e.g. URL or Ticket]\r\n\r\n\n",
  "hints_text": "Hi,\r\nThanks for the report! I can reproduce the issue.\r\nI’ll be looking into fixing it later today.\nI understand what is wrong:\r\n\r\nLinkcheck organizes the urls to checks in a `PriorityQueue`. The items are tuples `(priority, url, docname, lineno)`. For some links, the `get_node_line()` returns `None`, I’m guessing the line information is not available on that node.\r\nA tuple where the `lineno` is `None` is not comparable with `tuples` that have an integer `lineno` (`None` and `int` aren’t comparable), and `PriorityQueue` items must be comparable (see https://bugs.python.org/issue31145).\r\n\r\nThat issue only manifests when a link has no `lineno` and a document contains two links to the same URL. In [Weblate README.rst](https://raw.githubusercontent.com/WeblateOrg/weblate/master/README.rst):\r\n\r\n```sphinx\r\n.. image:: https://s.weblate.org/cdn/Logo-Darktext-borders.png\r\n   :alt: Weblate\r\n   :target: https://weblate.org/\r\n```\r\nAnd:\r\n```sphinx\r\nInstall it, or use the Hosted Weblate service at `weblate.org`_.\r\n\r\n.. _weblate.org: https://weblate.org/\r\n```\r\n\r\nI have a minimal regression test and will investigate how the line number is acquired tomorrow. If that’s reasonable, I think it would be more helpful to have the original line number where the URL appeared. If it is too big of a change for a fix release, I’ll probably end-up wrapping the data in a class that handles the comparison between no line number information and a line number information (and its variants).",
  "created_at": "2020-12-22T20:03:13Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"tests/test_build_linkcheck.py::test_priorityqueue_items_are_comparable\"]",
  "PASS_TO_PASS": "[\"tests/test_build_linkcheck.py::test_defaults\", \"tests/test_build_linkcheck.py::test_defaults_json\", \"tests/test_build_linkcheck.py::test_anchors_ignored\", \"tests/test_build_linkcheck.py::test_raises_for_invalid_status\", \"tests/test_build_linkcheck.py::test_auth_header_uses_first_match\", \"tests/test_build_linkcheck.py::test_auth_header_no_match\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers_no_slash\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers_default\", \"tests/test_build_linkcheck.py::test_follows_redirects_on_HEAD\", \"tests/test_build_linkcheck.py::test_follows_redirects_on_GET\", \"tests/test_build_linkcheck.py::test_invalid_ssl\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_fails\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_verify_false\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_cacerts\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_requests_env_var\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_nonexistent_cert_file\", \"tests/test_build_linkcheck.py::test_TooManyRedirects_on_HEAD\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_without_header\", \"tests/test_build_linkcheck.py::test_too_many_requests_user_timeout\", \"tests/test_build_linkcheck.py::test_limit_rate_default_sleep\", \"tests/test_build_linkcheck.py::test_limit_rate_user_max_delay\", \"tests/test_build_linkcheck.py::test_limit_rate_doubles_previous_wait_time\", \"tests/test_build_linkcheck.py::test_limit_rate_clips_wait_time_to_max_time\", \"tests/test_build_linkcheck.py::test_limit_rate_bails_out_after_waiting_max_time\"]",
  "environment_setup_commit": "3f560cd67239f75840cc7a439ab54d8509c855f6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.056660",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}