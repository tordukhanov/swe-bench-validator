{
  "repo": "psf/requests",
  "instance_id": "psf__requests-1776",
  "base_commit": "4bceb312f1b99d36a25f2985b5606e98b6f0d8cd",
  "patch": "diff --git a/requests/auth.py b/requests/auth.py\n--- a/requests/auth.py\n+++ b/requests/auth.py\n@@ -16,6 +16,7 @@\n from base64 import b64encode\n \n from .compat import urlparse, str\n+from .cookies import extract_cookies_to_jar\n from .utils import parse_dict_header\n \n log = logging.getLogger(__name__)\n@@ -169,7 +170,8 @@ def handle_401(self, r, **kwargs):\n             r.content\n             r.raw.release_conn()\n             prep = r.request.copy()\n-            prep.prepare_cookies(r.cookies)\n+            extract_cookies_to_jar(prep._cookies, r.request, r.raw)\n+            prep.prepare_cookies(prep._cookies)\n \n             prep.headers['Authorization'] = self.build_digest_header(\n                 prep.method, prep.url)\ndiff --git a/requests/models.py b/requests/models.py\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -270,6 +270,9 @@ def __init__(self):\n         self.url = None\n         #: dictionary of HTTP headers.\n         self.headers = None\n+        # The `CookieJar` used to create the Cookie header will be stored here\n+        # after prepare_cookies is called\n+        self._cookies = None\n         #: request body to send to the server.\n         self.body = None\n         #: dictionary of callback hooks, for internal usage.\n@@ -299,6 +302,7 @@ def copy(self):\n         p.method = self.method\n         p.url = self.url\n         p.headers = self.headers.copy()\n+        p._cookies = self._cookies.copy()\n         p.body = self.body\n         p.hooks = self.hooks\n         return p\n@@ -474,14 +478,13 @@ def prepare_cookies(self, cookies):\n         \"\"\"Prepares the given HTTP cookie data.\"\"\"\n \n         if isinstance(cookies, cookielib.CookieJar):\n-            cookies = cookies\n+            self._cookies = cookies\n         else:\n-            cookies = cookiejar_from_dict(cookies)\n+            self._cookies = cookiejar_from_dict(cookies)\n \n-        if 'cookie' not in self.headers:\n-            cookie_header = get_cookie_header(cookies, self)\n-            if cookie_header is not None:\n-                self.headers['Cookie'] = cookie_header\n+        cookie_header = get_cookie_header(self._cookies, self)\n+        if cookie_header is not None:\n+            self.headers['Cookie'] = cookie_header\n \n     def prepare_hooks(self, hooks):\n         \"\"\"Prepares the given hooks.\"\"\"\ndiff --git a/requests/sessions.py b/requests/sessions.py\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -153,7 +153,9 @@ def resolve_redirects(self, resp, req, stream=False, timeout=None,\n             except KeyError:\n                 pass\n \n-            prepared_request.prepare_cookies(self.cookies)\n+            extract_cookies_to_jar(prepared_request._cookies,\n+                                   prepared_request, resp.raw)\n+            prepared_request.prepare_cookies(prepared_request._cookies)\n \n             resp = self.send(\n                 prepared_request,\n@@ -345,9 +347,6 @@ def request(self, method, url,\n         )\n         prep = self.prepare_request(req)\n \n-        # Add param cookies to session cookies\n-        self.cookies = merge_cookies(self.cookies, cookies)\n-\n         proxies = proxies or {}\n \n         # Gather clues from the surrounding environment.\n",
  "test_patch": "diff --git a/test_requests.py b/test_requests.py\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -165,7 +165,7 @@ def test_cookie_quote_wrapped(self):\n \n     def test_cookie_persists_via_api(self):\n         s = requests.session()\n-        r = s.get(httpbin('redirect/1'), cookies={'foo':'bar'})\n+        r = s.get(httpbin('redirect/1'), cookies={'foo': 'bar'})\n         assert 'foo' in r.request.headers['Cookie']\n         assert 'foo' in r.history[0].request.headers['Cookie']\n \n@@ -177,6 +177,12 @@ def test_request_cookie_overrides_session_cookie(self):\n         # Session cookie should not be modified\n         assert s.cookies['foo'] == 'bar'\n \n+    def test_request_cookies_not_persisted(self):\n+        s = requests.session()\n+        s.get(httpbin('cookies'), cookies={'foo': 'baz'})\n+        # Sending a request with cookies should not add cookies to the session\n+        assert not s.cookies\n+\n     def test_generic_cookiejar_works(self):\n         cj = cookielib.CookieJar()\n         cookiejar_from_dict({'foo': 'bar'}, cj)\n",
  "problem_statement": "Request cookies should not be persisted to session\nAfter the fix for #1630, cookies sent with a request are now incorrectly persisted to the session.\n\nSpecifically, problem lies here: https://github.com/kennethreitz/requests/blob/1511dfa637643bae5b6111a20ecb80ec9ae26032/requests/sessions.py#L330\n\nRemoving that breaks the test case for #1630 though, still investigating a solution.\n\n",
  "hints_text": "",
  "created_at": "2013-12-04T12:46:50Z",
  "version": "2.0",
  "FAIL_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES\", \"test_requests.py::RequestsTestCase::test_request_cookies_not_persisted\", \"test_requests.py::RequestsTestCase::test_set_cookie_on_301\"]",
  "PASS_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET\", \"test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE\", \"test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET\", \"test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE\", \"test_requests.py::RequestsTestCase::test_DIGEST_HTTP_200_OK_GET\", \"test_requests.py::RequestsTestCase::test_DIGEST_STREAM\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT\", \"test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET\", \"test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES\", \"test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA\", \"test_requests.py::RequestsTestCase::test_autoset_header_values_are_native\", \"test_requests.py::RequestsTestCase::test_basic_building\", \"test_requests.py::RequestsTestCase::test_basicauth_with_netrc\", \"test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files\", \"test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests\", \"test_requests.py::RequestsTestCase::test_cookie_parameters\", \"test_requests.py::RequestsTestCase::test_cookie_persists_via_api\", \"test_requests.py::RequestsTestCase::test_cookie_quote_wrapped\", \"test_requests.py::RequestsTestCase::test_cookie_removed_on_expire\", \"test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect\", \"test_requests.py::RequestsTestCase::test_custom_content_type\", \"test_requests.py::RequestsTestCase::test_decompress_gzip\", \"test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post\", \"test_requests.py::RequestsTestCase::test_entry_points\", \"test_requests.py::RequestsTestCase::test_fixes_1329\", \"test_requests.py::RequestsTestCase::test_generic_cookiejar_works\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars\", \"test_requests.py::RequestsTestCase::test_header_keys_are_native\", \"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\", \"test_requests.py::RequestsTestCase::test_hook_receives_request_arguments\", \"test_requests.py::RequestsTestCase::test_http_error\", \"test_requests.py::RequestsTestCase::test_invalid_url\", \"test_requests.py::RequestsTestCase::test_links\", \"test_requests.py::RequestsTestCase::test_long_authinfo_in_url\", \"test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable\", \"test_requests.py::RequestsTestCase::test_no_content_length\", \"test_requests.py::RequestsTestCase::test_oddball_schemes_dont_check_URLs\", \"test_requests.py::RequestsTestCase::test_param_cookiejar_works\", \"test_requests.py::RequestsTestCase::test_params_are_added_before_fragment\", \"test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive\", \"test_requests.py::RequestsTestCase::test_path_is_not_double_encoded\", \"test_requests.py::RequestsTestCase::test_prepared_from_session\", \"test_requests.py::RequestsTestCase::test_prepared_request_hook\", \"test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable\", \"test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie\", \"test_requests.py::RequestsTestCase::test_request_ok_set\", \"test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden\", \"test_requests.py::RequestsTestCase::test_response_is_iterable\", \"test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks\", \"test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks\", \"test_requests.py::RequestsTestCase::test_session_pickling\", \"test_requests.py::RequestsTestCase::test_status_raising\", \"test_requests.py::RequestsTestCase::test_time_elapsed_blank\", \"test_requests.py::RequestsTestCase::test_transport_adapter_ordering\", \"test_requests.py::RequestsTestCase::test_unicode_get\", \"test_requests.py::RequestsTestCase::test_unicode_header_name\", \"test_requests.py::RequestsTestCase::test_unicode_method_name\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames\", \"test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param\", \"test_requests.py::TestContentEncodingDetection::test_html4_pragma\", \"test_requests.py::TestContentEncodingDetection::test_html_charset\", \"test_requests.py::TestContentEncodingDetection::test_none\", \"test_requests.py::TestContentEncodingDetection::test_precedence\", \"test_requests.py::TestContentEncodingDetection::test_xhtml_pragma\", \"test_requests.py::TestContentEncodingDetection::test_xml\", \"test_requests.py::TestCaseInsensitiveDict::test_contains\", \"test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"test_requests.py::TestCaseInsensitiveDict::test_equality\", \"test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"test_requests.py::TestCaseInsensitiveDict::test_get\", \"test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"test_requests.py::TestCaseInsensitiveDict::test_iter\", \"test_requests.py::TestCaseInsensitiveDict::test_iterable_init\", \"test_requests.py::TestCaseInsensitiveDict::test_kwargs_init\", \"test_requests.py::TestCaseInsensitiveDict::test_len\", \"test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"test_requests.py::TestCaseInsensitiveDict::test_mapping_init\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"test_requests.py::TestCaseInsensitiveDict::test_update\", \"test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\", \"test_requests.py::UtilsTestCase::test_super_len_io_streams\"]",
  "environment_setup_commit": "4bceb312f1b99d36a25f2985b5606e98b6f0d8cd",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.850562",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}