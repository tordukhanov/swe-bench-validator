{
  "repo": "django/django",
  "instance_id": "django__django-16749",
  "base_commit": "c3d7a71f836f7cfe8fa90dd9ae95b37b660d5aae",
  "patch": "diff --git a/django/core/handlers/asgi.py b/django/core/handlers/asgi.py\n--- a/django/core/handlers/asgi.py\n+++ b/django/core/handlers/asgi.py\n@@ -26,6 +26,15 @@\n logger = logging.getLogger(\"django.request\")\n \n \n+def get_script_prefix(scope):\n+    \"\"\"\n+    Return the script prefix to use from either the scope or a setting.\n+    \"\"\"\n+    if settings.FORCE_SCRIPT_NAME:\n+        return settings.FORCE_SCRIPT_NAME\n+    return scope.get(\"root_path\", \"\") or \"\"\n+\n+\n class ASGIRequest(HttpRequest):\n     \"\"\"\n     Custom request subclass that decodes from an ASGI-standard request dict\n@@ -41,7 +50,7 @@ def __init__(self, scope, body_file):\n         self._post_parse_error = False\n         self._read_started = False\n         self.resolver_match = None\n-        self.script_name = self.scope.get(\"root_path\", \"\")\n+        self.script_name = get_script_prefix(scope)\n         if self.script_name:\n             # TODO: Better is-prefix checking, slash handling?\n             self.path_info = scope[\"path\"].removeprefix(self.script_name)\n@@ -170,7 +179,7 @@ async def handle(self, scope, receive, send):\n         except RequestAborted:\n             return\n         # Request is complete and can be served.\n-        set_script_prefix(self.get_script_prefix(scope))\n+        set_script_prefix(get_script_prefix(scope))\n         await signals.request_started.asend(sender=self.__class__, scope=scope)\n         # Get the request and check for basic issues.\n         request, error_response = self.create_request(scope, body_file)\n@@ -344,11 +353,3 @@ def chunk_bytes(cls, data):\n                 (position + cls.chunk_size) >= len(data),\n             )\n             position += cls.chunk_size\n-\n-    def get_script_prefix(self, scope):\n-        \"\"\"\n-        Return the script prefix to use from either the scope or a setting.\n-        \"\"\"\n-        if settings.FORCE_SCRIPT_NAME:\n-            return settings.FORCE_SCRIPT_NAME\n-        return scope.get(\"root_path\", \"\") or \"\"\n",
  "test_patch": "diff --git a/tests/handlers/tests.py b/tests/handlers/tests.py\n--- a/tests/handlers/tests.py\n+++ b/tests/handlers/tests.py\n@@ -3,6 +3,7 @@\n from django.core.signals import request_finished, request_started\n from django.db import close_old_connections, connection\n from django.test import (\n+    AsyncRequestFactory,\n     RequestFactory,\n     SimpleTestCase,\n     TransactionTestCase,\n@@ -328,6 +329,12 @@ async def test_unawaited_response(self):\n         with self.assertRaisesMessage(ValueError, msg):\n             await self.async_client.get(\"/unawaited/\")\n \n+    @override_settings(FORCE_SCRIPT_NAME=\"/FORCED_PREFIX/\")\n+    def test_force_script_name(self):\n+        async_request_factory = AsyncRequestFactory()\n+        request = async_request_factory.request(**{\"path\": \"/somepath/\"})\n+        self.assertEqual(request.path, \"/FORCED_PREFIX/somepath/\")\n+\n     async def test_sync_streaming(self):\n         response = await self.async_client.get(\"/streaming/\")\n         self.assertEqual(response.status_code, 200)\n",
  "problem_statement": "ASGIRequest doesn't respect settings.FORCE_SCRIPT_NAME.\nDescription\n\t\nFor example, I have settings.FORCE_SCRIPT_NAME = '/some-prefix'\nI start a django server with command: daphne django_project.asgi:application\nAnd I navigate to the ​http://localhost:8000/admin/login, and see the login form action url is \"/admin/login\" which is wrong, which should be \"/some-prefix/admin/login\"\n",
  "hints_text": "Thanks for the report. It seems that ASGIRequest should take FORCE_SCRIPT_NAME into account (as WSGIRequest), e.g. django/core/handlers/asgi.py diff --git a/django/core/handlers/asgi.py b/django/core/handlers/asgi.py index 569157b277..c5eb87c712 100644 a b class ASGIRequest(HttpRequest): 4040 self._post_parse_error = False 4141 self._read_started = False 4242 self.resolver_match = None 43 self.script_name = self.scope.get(\"root_path\", \"\") 43 self.script_name = get_script_prefix(scope) 4444 if self.script_name: 4545 # TODO: Better is-prefix checking, slash handling? 4646 self.path_info = scope[\"path\"].removeprefix(self.script_name) … … class ASGIHandler(base.BaseHandler): 169169 except RequestAborted: 170170 return 171171 # Request is complete and can be served. 172 set_script_prefix(self.get_script_prefix(scope)) 172 set_script_prefix(get_script_prefix(scope)) 173173 await signals.request_started.asend(sender=self.__class__, scope=scope) 174174 # Get the request and check for basic issues. 175175 request, error_response = self.create_request(scope, body_file) … … class ASGIHandler(base.BaseHandler): 310310 ) 311311 position += cls.chunk_size 312312 313 def get_script_prefix(self, scope): 314 \"\"\" 315 Return the script prefix to use from either the scope or a setting. 316 \"\"\" 317 if settings.FORCE_SCRIPT_NAME: 318 return settings.FORCE_SCRIPT_NAME 319 return scope.get(\"root_path\", \"\") or \"\" 313 314def get_script_prefix(scope): 315 \"\"\" 316 Return the script prefix to use from either the scope or a setting. 317 \"\"\" 318 if settings.FORCE_SCRIPT_NAME: 319 return settings.FORCE_SCRIPT_NAME 320 return scope.get(\"root_path\", \"\") or \"\" Would you like to prepare a patch via GitHub PR? (a regression test is required.)\nFORCE_SCRIPT_NAME doesn't working as expected for both ASGI and WSGI application.\nHere, in the above attachment, I've created a simple Django app and set this FORCE_SCRIPT_NAME to /ayush. On running with both WSGI and ASGI applications, it shows the above-mentioned error. Also, the queried URL is different as compared to what Django is looking for. There is the repetition of FORCE_SCRIPT_NAME\nSeems like, FORCE_SCRIPT_NAME is also causing some issues with the WSGI application too, after someone's logout the session. @Mariusz Felisiak, your solution for ASGI is working for me. Please correct me, If I'm wrong...\nReplying to Ayush Bisht: Please correct me, If I'm wrong... FORCE_SCRIPT_NAME is not intended to work with dev server, see #7930. It works fine when you try with e.g. daphne.",
  "created_at": "2023-04-10T15:14:46Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_force_script_name (handlers.tests.AsyncHandlerRequestTests.test_force_script_name)\"]",
  "PASS_TO_PASS": "[\"test_get_script_name (handlers.tests.ScriptNameTests.test_get_script_name)\", \"WSGI squashes multiple successive slashes in PATH_INFO, get_script_name\", \"test_request_signals (handlers.tests.SignalsTests.test_request_signals)\", \"test_request_signals_streaming_response (handlers.tests.SignalsTests.test_request_signals_streaming_response)\", \"A non-UTF-8 path populates PATH_INFO with an URL-encoded path and\", \"Invalid boundary string should produce a \\\"Bad Request\\\" response, not a\", \"Invalid cookie content should result in an absent cookie, but not in a\", \"test_middleware_initialized (handlers.tests.HandlerTests.test_middleware_initialized)\", \"Non-ASCII cookies set in JavaScript are properly decoded (#20557).\", \"Non-ASCII query strings are properly decoded (#20530, #22996).\", \"test_auto_transaction (handlers.tests.TransactionsPerRequestTests.test_auto_transaction)\", \"test_auto_transaction_async_view (handlers.tests.TransactionsPerRequestTests.test_auto_transaction_async_view)\", \"test_no_auto_transaction (handlers.tests.TransactionsPerRequestTests.test_no_auto_transaction)\", \"test_no_transaction (handlers.tests.TransactionsPerRequestTests.test_no_transaction)\", \"test_async_streaming (handlers.tests.HandlerRequestTests.test_async_streaming)\", \"Calling an async view down the normal synchronous path.\", \"test_bad_request_in_view_returns_400 (handlers.tests.HandlerRequestTests.test_bad_request_in_view_returns_400)\", \"test_environ_path_info_type (handlers.tests.HandlerRequestTests.test_environ_path_info_type)\", \"test_handle_accepts_httpstatus_enum_value (handlers.tests.HandlerRequestTests.test_handle_accepts_httpstatus_enum_value)\", \"test_invalid_urls (handlers.tests.HandlerRequestTests.test_invalid_urls)\", \"test_middleware_returns_none (handlers.tests.HandlerRequestTests.test_middleware_returns_none)\", \"test_no_response (handlers.tests.HandlerRequestTests.test_no_response)\", \"test_streaming (handlers.tests.HandlerRequestTests.test_streaming)\", \"test_suspiciousop_in_view_returns_400 (handlers.tests.HandlerRequestTests.test_suspiciousop_in_view_returns_400)\", \"test_async_streaming (handlers.tests.AsyncHandlerRequestTests.test_async_streaming)\", \"Calling an async view down the asynchronous path.\", \"test_bad_request_in_view_returns_400 (handlers.tests.AsyncHandlerRequestTests.test_bad_request_in_view_returns_400)\", \"test_no_response (handlers.tests.AsyncHandlerRequestTests.test_no_response)\", \"test_suspiciousop_in_view_returns_400 (handlers.tests.AsyncHandlerRequestTests.test_suspiciousop_in_view_returns_400)\", \"test_sync_streaming (handlers.tests.AsyncHandlerRequestTests.test_sync_streaming)\", \"Calling a sync view down the asynchronous path.\", \"test_unawaited_response (handlers.tests.AsyncHandlerRequestTests.test_unawaited_response)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.770203",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}