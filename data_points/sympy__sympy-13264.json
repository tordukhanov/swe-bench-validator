{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-13264",
  "base_commit": "ae3d62ab736d0f5cad3fdcf9b482365d4de4c147",
  "patch": "diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -9,7 +9,7 @@\n from sympy.core.compatibility import (iterable,\n     ordered, range, as_int)\n from sympy.core.numbers import Float, I, pi, Rational, Integer\n-from sympy.core.function import expand_log, count_ops, _mexpand, _coeff_isneg\n+from sympy.core.function import expand_log, count_ops, _mexpand, _coeff_isneg, nfloat\n from sympy.core.rules import Transform\n from sympy.core.evaluate import global_evaluate\n from sympy.functions import (\n@@ -382,7 +382,7 @@ def signsimp(expr, evaluate=None):\n     return e\n \n \n-def simplify(expr, ratio=1.7, measure=count_ops, fu=False):\n+def simplify(expr, ratio=1.7, measure=count_ops, rational=False):\n     \"\"\"\n     Simplifies the given expression.\n \n@@ -504,6 +504,11 @@ def simplify(expr, ratio=1.7, measure=count_ops, fu=False):\n     simplification strategies and then compares them using the measure\n     function, we get a completely different result that is still different\n     from the input expression by doing this.\n+\n+    If rational=True, Floats will be recast as Rationals before simplification.\n+    If rational=None, Floats will be recast as Rationals but the result will\n+    be recast as Floats. If rational=False(default) then nothing will be done\n+    to the Floats.\n     \"\"\"\n     expr = sympify(expr)\n \n@@ -526,8 +531,8 @@ def simplify(expr, ratio=1.7, measure=count_ops, fu=False):\n             if len(expr.args) == 1 and len(expr.args[0].args) == 1 and \\\n                isinstance(expr.args[0], expr.inverse(argindex=1)):\n                 return simplify(expr.args[0].args[0], ratio=ratio,\n-                                measure=measure, fu=fu)\n-        return expr.func(*[simplify(x, ratio=ratio, measure=measure, fu=fu)\n+                                measure=measure, rational=rational)\n+        return expr.func(*[simplify(x, ratio=ratio, measure=measure, rational=rational)\n                          for x in expr.args])\n \n     # TODO: Apply different strategies, considering expression pattern:\n@@ -541,6 +546,12 @@ def shorter(*choices):\n             return choices[0]\n         return min(choices, key=measure)\n \n+    # rationalize Floats\n+    floats = False\n+    if rational is not False and expr.has(Float):\n+        floats = True\n+        expr = nsimplify(expr, rational=True)\n+\n     expr = bottom_up(expr, lambda w: w.normal())\n     expr = Mul(*powsimp(expr).as_content_primitive())\n     _e = cancel(expr)\n@@ -564,8 +575,7 @@ def shorter(*choices):\n     if expr.has(BesselBase):\n         expr = besselsimp(expr)\n \n-    if expr.has(TrigonometricFunction) and not fu or expr.has(\n-            HyperbolicFunction):\n+    if expr.has(TrigonometricFunction, HyperbolicFunction):\n         expr = trigsimp(expr, deep=True)\n \n     if expr.has(log):\n@@ -581,6 +591,7 @@ def shorter(*choices):\n         expr = product_simplify(expr)\n \n     short = shorter(powsimp(expr, combine='exp', deep=True), powsimp(expr), expr)\n+    short = shorter(short, cancel(short))\n     short = shorter(short, factor_terms(short), expand_power_exp(expand_mul(short)))\n     if short.has(TrigonometricFunction, HyperbolicFunction, ExpBase):\n         short = exptrigsimp(short, simplify=False)\n@@ -610,6 +621,10 @@ def shorter(*choices):\n     if measure(expr) > ratio*measure(original_expr):\n         expr = original_expr\n \n+    # restore floats\n+    if floats and rational is None:\n+        expr = nfloat(expr, exponent=False)\n+\n     return expr\n \n \n",
  "test_patch": "diff --git a/sympy/integrals/tests/test_transforms.py b/sympy/integrals/tests/test_transforms.py\n--- a/sympy/integrals/tests/test_transforms.py\n+++ b/sympy/integrals/tests/test_transforms.py\n@@ -507,8 +507,8 @@ def test_laplace_transform():\n         ((-sin(s**2/(2*pi))*fresnels(s/pi) + sin(s**2/(2*pi))/2 -\n             cos(s**2/(2*pi))*fresnelc(s/pi) + cos(s**2/(2*pi))/2)/s, 0, True)\n     assert laplace_transform(fresnelc(t), t, s) == (\n-        (sin(s**2/(2*pi))*fresnelc(s/pi)/s - cos(s**2/(2*pi))*fresnels(s/pi)/s\n-        + sqrt(2)*cos(s**2/(2*pi) + pi/4)/(2*s), 0, True))\n+        ((2*sin(s**2/(2*pi))*fresnelc(s/pi) - 2*cos(s**2/(2*pi))*fresnels(s/pi)\n+        + sqrt(2)*cos(s**2/(2*pi) + pi/4))/(2*s), 0, True))\n \n     assert LT(Matrix([[exp(t), t*exp(-t)], [t*exp(-t), exp(t)]]), t, s) ==\\\n         Matrix([\n@@ -779,10 +779,12 @@ def test_issue_8514():\n     a, b, c, = symbols('a b c', positive=True)\n     t = symbols('t', positive=True)\n     ft = simplify(inverse_laplace_transform(1/(a*s**2+b*s+c),s, t))\n-    assert ft == ((exp(t*(exp(I*atan2(0, -4*a*c + b**2)/2) -\n-                  exp(-I*atan2(0, -4*a*c + b**2)/2))*\n-                  sqrt(Abs(4*a*c - b**2))/(4*a))*exp(t*cos(atan2(0, -4*a*c + b**2)/2)\n-                  *sqrt(Abs(4*a*c - b**2))/a) + I*sin(t*sin(atan2(0, -4*a*c + b**2)/2)\n-                  *sqrt(Abs(4*a*c - b**2))/(2*a)) - cos(t*sin(atan2(0, -4*a*c + b**2)/2)\n-                  *sqrt(Abs(4*a*c - b**2))/(2*a)))*exp(-t*(b + cos(atan2(0, -4*a*c + b**2)/2)\n-                  *sqrt(Abs(4*a*c - b**2)))/(2*a))/sqrt(-4*a*c + b**2))\n+    assert ft == (I*exp(t*cos(atan2(0, -4*a*c + b**2)/2)*sqrt(Abs(4*a*c -\n+                  b**2))/a)*sin(t*sin(atan2(0, -4*a*c + b**2)/2)*sqrt(Abs(\n+                  4*a*c - b**2))/(2*a)) + exp(t*cos(atan2(0, -4*a*c + b**2)\n+                  /2)*sqrt(Abs(4*a*c - b**2))/a)*cos(t*sin(atan2(0, -4*a*c\n+                  + b**2)/2)*sqrt(Abs(4*a*c - b**2))/(2*a)) + I*sin(t*sin(\n+                  atan2(0, -4*a*c + b**2)/2)*sqrt(Abs(4*a*c - b**2))/(2*a))\n+                  - cos(t*sin(atan2(0, -4*a*c + b**2)/2)*sqrt(Abs(4*a*c -\n+                  b**2))/(2*a)))*exp(-t*(b + cos(atan2(0, -4*a*c + b**2)/2)\n+                  *sqrt(Abs(4*a*c - b**2)))/(2*a))/sqrt(-4*a*c + b**2)\ndiff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -73,6 +73,42 @@ def test_simplify_expr():\n     f = -x + y/(z + t) + z*x/(z + t) + z*a/(z + t) + t*x/(z + t)\n     assert simplify(f) == (y + a*z)/(z + t)\n \n+    # issue 10347\n+    expr = -x*(y**2 - 1)*(2*y**2*(x**2 - 1)/(a*(x**2 - y**2)**2) + (x**2 - 1)\n+        /(a*(x**2 - y**2)))/(a*(x**2 - y**2)) + x*(-2*x**2*sqrt(-x**2*y**2 + x**2\n+        + y**2 - 1)*sin(z)/(a*(x**2 - y**2)**2) - x**2*sqrt(-x**2*y**2 + x**2 +\n+        y**2 - 1)*sin(z)/(a*(x**2 - 1)*(x**2 - y**2)) + (x**2*sqrt((-x**2 + 1)*\n+        (y**2 - 1))*sqrt(-x**2*y**2 + x**2 + y**2 - 1)*sin(z)/(x**2 - 1) + sqrt(\n+        (-x**2 + 1)*(y**2 - 1))*(x*(-x*y**2 + x)/sqrt(-x**2*y**2 + x**2 + y**2 -\n+        1) + sqrt(-x**2*y**2 + x**2 + y**2 - 1))*sin(z))/(a*sqrt((-x**2 + 1)*(\n+        y**2 - 1))*(x**2 - y**2)))*sqrt(-x**2*y**2 + x**2 + y**2 - 1)*sin(z)/(a*\n+        (x**2 - y**2)) + x*(-2*x**2*sqrt(-x**2*y**2 + x**2 + y**2 - 1)*cos(z)/(a*\n+        (x**2 - y**2)**2) - x**2*sqrt(-x**2*y**2 + x**2 + y**2 - 1)*cos(z)/(a*\n+        (x**2 - 1)*(x**2 - y**2)) + (x**2*sqrt((-x**2 + 1)*(y**2 - 1))*sqrt(-x**2\n+        *y**2 + x**2 + y**2 - 1)*cos(z)/(x**2 - 1) + x*sqrt((-x**2 + 1)*(y**2 -\n+        1))*(-x*y**2 + x)*cos(z)/sqrt(-x**2*y**2 + x**2 + y**2 - 1) + sqrt((-x**2\n+        + 1)*(y**2 - 1))*sqrt(-x**2*y**2 + x**2 + y**2 - 1)*cos(z))/(a*sqrt((-x**2\n+        + 1)*(y**2 - 1))*(x**2 - y**2)))*sqrt(-x**2*y**2 + x**2 + y**2 - 1)*cos(\n+        z)/(a*(x**2 - y**2)) - y*sqrt((-x**2 + 1)*(y**2 - 1))*(-x*y*sqrt(-x**2*\n+        y**2 + x**2 + y**2 - 1)*sin(z)/(a*(x**2 - y**2)*(y**2 - 1)) + 2*x*y*sqrt(\n+        -x**2*y**2 + x**2 + y**2 - 1)*sin(z)/(a*(x**2 - y**2)**2) + (x*y*sqrt((\n+        -x**2 + 1)*(y**2 - 1))*sqrt(-x**2*y**2 + x**2 + y**2 - 1)*sin(z)/(y**2 -\n+        1) + x*sqrt((-x**2 + 1)*(y**2 - 1))*(-x**2*y + y)*sin(z)/sqrt(-x**2*y**2\n+        + x**2 + y**2 - 1))/(a*sqrt((-x**2 + 1)*(y**2 - 1))*(x**2 - y**2)))*sin(\n+        z)/(a*(x**2 - y**2)) + y*(x**2 - 1)*(-2*x*y*(x**2 - 1)/(a*(x**2 - y**2)\n+        **2) + 2*x*y/(a*(x**2 - y**2)))/(a*(x**2 - y**2)) + y*(x**2 - 1)*(y**2 -\n+        1)*(-x*y*sqrt(-x**2*y**2 + x**2 + y**2 - 1)*cos(z)/(a*(x**2 - y**2)*(y**2\n+        - 1)) + 2*x*y*sqrt(-x**2*y**2 + x**2 + y**2 - 1)*cos(z)/(a*(x**2 - y**2)\n+        **2) + (x*y*sqrt((-x**2 + 1)*(y**2 - 1))*sqrt(-x**2*y**2 + x**2 + y**2 -\n+        1)*cos(z)/(y**2 - 1) + x*sqrt((-x**2 + 1)*(y**2 - 1))*(-x**2*y + y)*cos(\n+        z)/sqrt(-x**2*y**2 + x**2 + y**2 - 1))/(a*sqrt((-x**2 + 1)*(y**2 - 1)\n+        )*(x**2 - y**2)))*cos(z)/(a*sqrt((-x**2 + 1)*(y**2 - 1))*(x**2 - y**2)\n+        ) - x*sqrt((-x**2 + 1)*(y**2 - 1))*sqrt(-x**2*y**2 + x**2 + y**2 - 1)*sin(\n+        z)**2/(a**2*(x**2 - 1)*(x**2 - y**2)*(y**2 - 1)) - x*sqrt((-x**2 + 1)*(\n+        y**2 - 1))*sqrt(-x**2*y**2 + x**2 + y**2 - 1)*cos(z)**2/(a**2*(x**2 - 1)*(\n+        x**2 - y**2)*(y**2 - 1))\n+    assert simplify(expr) == 2*x/(a**2*(x**2 - y**2))\n+\n     A, B = symbols('A,B', commutative=False)\n \n     assert simplify(A*B - B*A) == A*B - B*A\n@@ -152,6 +188,13 @@ def test_simplify_measure():\n     assert measure2(simplify(expr2, measure=measure2)) <= measure2(expr2)\n \n \n+def test_simplify_rational():\n+    expr = 2**x*2.**y\n+    assert simplify(expr, rational = True) == 2**(x+y)\n+    assert simplify(expr, rational = None) == 2.0**(x+y)\n+    assert simplify(expr, rational = False) == expr\n+\n+\n def test_simplify_issue_1308():\n     assert simplify(exp(-Rational(1, 2)) + exp(-Rational(3, 2))) == \\\n         (1 + E)*exp(-Rational(3, 2))\n",
  "problem_statement": "simplify doesn't do the last simplification step\nNote: I'm using Python 3.5.1 and sympy 0.7.6.1. Full script is attached in the .zip file: \n[simplify_last_step.zip](https://github.com/sympy/sympy/files/76131/simplify_last_step.zip)\n\n---\n\nI've been using Sympy to compute Laplacian in different geometrical coordinates system. This usually creates extremelly long expressions and simplify usually does a great job. However, I've come against one particular case where simplify does most of the job but doesn't perform the ultimate simplification step. \n\nI've reduced the problem set getting rid of all of the Derivative terms. The initial \n\nexpression is still huge (675 ops!):\n\n![initial_expression](https://cloud.githubusercontent.com/assets/16088743/12072960/a0c94034-b0b6-11e5-8626-90608bf70b84.png)\n\nA first call to `simplify` sucessfully reduces it to : \n\n![simplify](https://cloud.githubusercontent.com/assets/16088743/12072961/b681be7e-b0b6-11e5-9ddd-e5d077329773.png)\n\nWhich is great (23 ops), but somehow frustrating as we can factorize it a little more. If I apply `simplify` again, then I get the expression I wanted (7 ops):\n\n![simplify_bis](https://cloud.githubusercontent.com/assets/16088743/12072964/d2760f7c-b0b6-11e5-9562-37d4d32c9b88.png)\n\n---\n\nIf simplify worked perfectly, `simplify(simplify(expr))` shouldn't yield a different result from `simplify(expr)`  \n\nFrom my understanding of how simplify works, it successively tries different simplification strategies  and compares them. In that case, the order of the different strategies matters. In my particular case, the strategy than eventually did the final factorisation step may have been called to early. \n\nI fixed that calling simplify again. We could fix it applying an optional recursive mode at the end of the simplify function:\n\n``` python\ndef simplify(expr, ratio=1.7, measure=count_ops, fu=False, max_rec_steps=0):\n    \"\"\"\n    Simplifies the given expression.\n\n    Input\n    ========\n    max_rec_steps: int\n        if >0, simplified is applied recursively with a maximum of 'max_rec_steps'\n        times.\n\n    (...)\n\n    \"\"\"\n\n    (...)\n\n    if measure(expr) > ratio*measure(original_expr):\n        expr = original_expr\n\n    if max_rec_steps>0 and measure(expr)<measure(original_expr):\n        sexpr = simplify(expr, ratio, measure, fu, max_rec_steps=max_rec_steps-1)\n        expr = shorter(expr,sexpr)        \n\n    return expr\n\n```\n\nI can make the pull request if that helps. \n\n",
  "hints_text": "",
  "created_at": "2017-09-06T15:57:13Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_simplify_rational\"]",
  "PASS_TO_PASS": "[\"test_undefined_function\", \"test_free_symbols\", \"test_as_integral\", \"test_issue_8882\", \"test_issue_3557\", \"test_simplify_complex\", \"test_simplify_ratio\", \"test_simplify_measure\", \"test_simplify_issue_1308\", \"test_issue_5652\", \"test_simplify_fail1\", \"test_nthroot\", \"test_separatevars\", \"test_separatevars_advanced_factor\", \"test_hypersimp\", \"test_nsimplify\", \"test_issue_9448\", \"test_extract_minus_sign\", \"test_diff\", \"test_logcombine_1\", \"test_logcombine_complex_coeff\", \"test_posify\", \"test_issue_4194\", \"test_as_content_primitive\", \"test_signsimp\", \"test_Piecewise\", \"test_polymorphism\", \"test_issue_from_PR1599\", \"test_issue_6811\", \"test_issue_6920\", \"test_issue_7001\", \"test_inequality_no_auto_simplify\", \"test_issue_9398\", \"test_issue_9324_simplify\", \"test_simplify_function_inverse\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.081839",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}