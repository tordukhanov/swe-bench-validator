{
  "repo": "django/django",
  "instance_id": "django__django-14480",
  "base_commit": "795da6306a048b18c0158496b0d49e8e4f197a32",
  "patch": "diff --git a/django/db/backends/base/features.py b/django/db/backends/base/features.py\n--- a/django/db/backends/base/features.py\n+++ b/django/db/backends/base/features.py\n@@ -325,6 +325,9 @@ class BaseDatabaseFeatures:\n     # Does the backend support non-deterministic collations?\n     supports_non_deterministic_collations = True\n \n+    # Does the backend support the logical XOR operator?\n+    supports_logical_xor = False\n+\n     # Collation names for use by the Django test suite.\n     test_collations = {\n         \"ci\": None,  # Case-insensitive.\ndiff --git a/django/db/backends/mysql/features.py b/django/db/backends/mysql/features.py\n--- a/django/db/backends/mysql/features.py\n+++ b/django/db/backends/mysql/features.py\n@@ -47,6 +47,7 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n \n     supports_order_by_nulls_modifier = False\n     order_by_nulls_first = True\n+    supports_logical_xor = True\n \n     @cached_property\n     def minimum_database_version(self):\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -94,7 +94,7 @@ def __and__(self, other):\n         if getattr(self, \"conditional\", False) and getattr(other, \"conditional\", False):\n             return Q(self) & Q(other)\n         raise NotImplementedError(\n-            \"Use .bitand() and .bitor() for bitwise logical operations.\"\n+            \"Use .bitand(), .bitor(), and .bitxor() for bitwise logical operations.\"\n         )\n \n     def bitand(self, other):\n@@ -106,6 +106,13 @@ def bitleftshift(self, other):\n     def bitrightshift(self, other):\n         return self._combine(other, self.BITRIGHTSHIFT, False)\n \n+    def __xor__(self, other):\n+        if getattr(self, \"conditional\", False) and getattr(other, \"conditional\", False):\n+            return Q(self) ^ Q(other)\n+        raise NotImplementedError(\n+            \"Use .bitand(), .bitor(), and .bitxor() for bitwise logical operations.\"\n+        )\n+\n     def bitxor(self, other):\n         return self._combine(other, self.BITXOR, False)\n \n@@ -113,7 +120,7 @@ def __or__(self, other):\n         if getattr(self, \"conditional\", False) and getattr(other, \"conditional\", False):\n             return Q(self) | Q(other)\n         raise NotImplementedError(\n-            \"Use .bitand() and .bitor() for bitwise logical operations.\"\n+            \"Use .bitand(), .bitor(), and .bitxor() for bitwise logical operations.\"\n         )\n \n     def bitor(self, other):\n@@ -139,12 +146,17 @@ def __rpow__(self, other):\n \n     def __rand__(self, other):\n         raise NotImplementedError(\n-            \"Use .bitand() and .bitor() for bitwise logical operations.\"\n+            \"Use .bitand(), .bitor(), and .bitxor() for bitwise logical operations.\"\n         )\n \n     def __ror__(self, other):\n         raise NotImplementedError(\n-            \"Use .bitand() and .bitor() for bitwise logical operations.\"\n+            \"Use .bitand(), .bitor(), and .bitxor() for bitwise logical operations.\"\n+        )\n+\n+    def __rxor__(self, other):\n+        raise NotImplementedError(\n+            \"Use .bitand(), .bitor(), and .bitxor() for bitwise logical operations.\"\n         )\n \n \ndiff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -396,6 +396,25 @@ def __or__(self, other):\n         combined.query.combine(other.query, sql.OR)\n         return combined\n \n+    def __xor__(self, other):\n+        self._check_operator_queryset(other, \"^\")\n+        self._merge_sanity_check(other)\n+        if isinstance(self, EmptyQuerySet):\n+            return other\n+        if isinstance(other, EmptyQuerySet):\n+            return self\n+        query = (\n+            self\n+            if self.query.can_filter()\n+            else self.model._base_manager.filter(pk__in=self.values(\"pk\"))\n+        )\n+        combined = query._chain()\n+        combined._merge_known_related_objects(other)\n+        if not other.query.can_filter():\n+            other = other.model._base_manager.filter(pk__in=other.values(\"pk\"))\n+        combined.query.combine(other.query, sql.XOR)\n+        return combined\n+\n     ####################################\n     # METHODS THAT DO DATABASE QUERIES #\n     ####################################\ndiff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -38,6 +38,7 @@ class Q(tree.Node):\n     # Connection types\n     AND = \"AND\"\n     OR = \"OR\"\n+    XOR = \"XOR\"\n     default = AND\n     conditional = True\n \n@@ -70,6 +71,9 @@ def __or__(self, other):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n \n+    def __xor__(self, other):\n+        return self._combine(other, self.XOR)\n+\n     def __invert__(self):\n         obj = type(self)()\n         obj.add(self, self.AND)\ndiff --git a/django/db/models/sql/__init__.py b/django/db/models/sql/__init__.py\n--- a/django/db/models/sql/__init__.py\n+++ b/django/db/models/sql/__init__.py\n@@ -1,6 +1,6 @@\n from django.db.models.sql.query import *  # NOQA\n from django.db.models.sql.query import Query\n from django.db.models.sql.subqueries import *  # NOQA\n-from django.db.models.sql.where import AND, OR\n+from django.db.models.sql.where import AND, OR, XOR\n \n-__all__ = [\"Query\", \"AND\", \"OR\"]\n+__all__ = [\"Query\", \"AND\", \"OR\", \"XOR\"]\ndiff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -1,14 +1,19 @@\n \"\"\"\n Code to manage the creation and SQL rendering of 'where' constraints.\n \"\"\"\n+import operator\n+from functools import reduce\n \n from django.core.exceptions import EmptyResultSet\n+from django.db.models.expressions import Case, When\n+from django.db.models.lookups import Exact\n from django.utils import tree\n from django.utils.functional import cached_property\n \n # Connection types\n AND = \"AND\"\n OR = \"OR\"\n+XOR = \"XOR\"\n \n \n class WhereNode(tree.Node):\n@@ -39,10 +44,12 @@ def split_having(self, negated=False):\n         if not self.contains_aggregate:\n             return self, None\n         in_negated = negated ^ self.negated\n-        # If the effective connector is OR and this node contains an aggregate,\n-        # then we need to push the whole branch to HAVING clause.\n-        may_need_split = (in_negated and self.connector == AND) or (\n-            not in_negated and self.connector == OR\n+        # If the effective connector is OR or XOR and this node contains an\n+        # aggregate, then we need to push the whole branch to HAVING clause.\n+        may_need_split = (\n+            (in_negated and self.connector == AND)\n+            or (not in_negated and self.connector == OR)\n+            or self.connector == XOR\n         )\n         if may_need_split and self.contains_aggregate:\n             return None, self\n@@ -85,6 +92,21 @@ def as_sql(self, compiler, connection):\n         else:\n             full_needed, empty_needed = 1, len(self.children)\n \n+        if self.connector == XOR and not connection.features.supports_logical_xor:\n+            # Convert if the database doesn't support XOR:\n+            #   a XOR b XOR c XOR ...\n+            # to:\n+            #   (a OR b OR c OR ...) AND (a + b + c + ...) == 1\n+            lhs = self.__class__(self.children, OR)\n+            rhs_sum = reduce(\n+                operator.add,\n+                (Case(When(c, then=1), default=0) for c in self.children),\n+            )\n+            rhs = Exact(1, rhs_sum)\n+            return self.__class__([lhs, rhs], AND, self.negated).as_sql(\n+                compiler, connection\n+            )\n+\n         for child in self.children:\n             try:\n                 sql, params = compiler.compile(child)\n",
  "test_patch": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1704,6 +1704,28 @@ def test_filter_aggregates_negated_and_connector(self):\n             attrgetter(\"pk\"),\n         )\n \n+    def test_filter_aggregates_xor_connector(self):\n+        q1 = Q(price__gt=50)\n+        q2 = Q(authors__count__gt=1)\n+        query = Book.objects.annotate(Count(\"authors\")).filter(q1 ^ q2).order_by(\"pk\")\n+        self.assertQuerysetEqual(\n+            query,\n+            [self.b1.pk, self.b4.pk, self.b6.pk],\n+            attrgetter(\"pk\"),\n+        )\n+\n+    def test_filter_aggregates_negated_xor_connector(self):\n+        q1 = Q(price__gt=50)\n+        q2 = Q(authors__count__gt=1)\n+        query = (\n+            Book.objects.annotate(Count(\"authors\")).filter(~(q1 ^ q2)).order_by(\"pk\")\n+        )\n+        self.assertQuerysetEqual(\n+            query,\n+            [self.b2.pk, self.b3.pk, self.b5.pk],\n+            attrgetter(\"pk\"),\n+        )\n+\n     def test_ticket_11293_q_immutable(self):\n         \"\"\"\n         Splitting a q object to parts for where/having doesn't alter\ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2339,7 +2339,9 @@ def test_filtered_aggregates(self):\n \n \n class CombinableTests(SimpleTestCase):\n-    bitwise_msg = \"Use .bitand() and .bitor() for bitwise logical operations.\"\n+    bitwise_msg = (\n+        \"Use .bitand(), .bitor(), and .bitxor() for bitwise logical operations.\"\n+    )\n \n     def test_negation(self):\n         c = Combinable()\n@@ -2353,6 +2355,10 @@ def test_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n+    def test_xor(self):\n+        with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n+            Combinable() ^ Combinable()\n+\n     def test_reversed_and(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n@@ -2361,6 +2367,10 @@ def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() | Combinable()\n \n+    def test_reversed_xor(self):\n+        with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n+            object() ^ Combinable()\n+\n \n class CombinedExpressionTests(SimpleTestCase):\n     def test_resolve_output_field(self):\ndiff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -27,6 +27,15 @@ def test_combine_or_empty(self):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n+    def test_combine_xor_empty(self):\n+        q = Q(x=1)\n+        self.assertEqual(q ^ Q(), q)\n+        self.assertEqual(Q() ^ q, q)\n+\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q ^ Q(), q)\n+        self.assertEqual(Q() ^ q, q)\n+\n     def test_combine_empty_copy(self):\n         base_q = Q(x=1)\n         tests = [\n@@ -34,6 +43,8 @@ def test_combine_empty_copy(self):\n             Q() | base_q,\n             base_q & Q(),\n             Q() & base_q,\n+            base_q ^ Q(),\n+            Q() ^ base_q,\n         ]\n         for i, q in enumerate(tests):\n             with self.subTest(i=i):\n@@ -43,6 +54,9 @@ def test_combine_empty_copy(self):\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n+    def test_combine_xor_both_empty(self):\n+        self.assertEqual(Q() ^ Q(), Q())\n+\n     def test_combine_not_q_object(self):\n         obj = object()\n         q = Q(x=1)\n@@ -50,12 +64,15 @@ def test_combine_not_q_object(self):\n             q | obj\n         with self.assertRaisesMessage(TypeError, str(obj)):\n             q & obj\n+        with self.assertRaisesMessage(TypeError, str(obj)):\n+            q ^ obj\n \n     def test_combine_negated_boolean_expression(self):\n         tagged = Tag.objects.filter(category=OuterRef(\"pk\"))\n         tests = [\n             Q() & ~Exists(tagged),\n             Q() | ~Exists(tagged),\n+            Q() ^ ~Exists(tagged),\n         ]\n         for q in tests:\n             with self.subTest(q=q):\n@@ -88,6 +105,20 @@ def test_deconstruct_or(self):\n         )\n         self.assertEqual(kwargs, {\"_connector\": \"OR\"})\n \n+    def test_deconstruct_xor(self):\n+        q1 = Q(price__gt=F(\"discounted_price\"))\n+        q2 = Q(price=F(\"discounted_price\"))\n+        q = q1 ^ q2\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(\n+            args,\n+            (\n+                (\"price__gt\", F(\"discounted_price\")),\n+                (\"price\", F(\"discounted_price\")),\n+            ),\n+        )\n+        self.assertEqual(kwargs, {\"_connector\": \"XOR\"})\n+\n     def test_deconstruct_and(self):\n         q1 = Q(price__gt=F(\"discounted_price\"))\n         q2 = Q(price=F(\"discounted_price\"))\n@@ -144,6 +175,13 @@ def test_reconstruct_or(self):\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(Q(*args, **kwargs), q)\n \n+    def test_reconstruct_xor(self):\n+        q1 = Q(price__gt=F(\"discounted_price\"))\n+        q2 = Q(price=F(\"discounted_price\"))\n+        q = q1 ^ q2\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(Q(*args, **kwargs), q)\n+\n     def test_reconstruct_and(self):\n         q1 = Q(price__gt=F(\"discounted_price\"))\n         q2 = Q(price=F(\"discounted_price\"))\ndiff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -526,6 +526,7 @@ def test_operator_on_combined_qs_error(self):\n         operators = [\n             (\"|\", operator.or_),\n             (\"&\", operator.and_),\n+            (\"^\", operator.xor),\n         ]\n         for combinator in combinators:\n             combined_qs = getattr(qs, combinator)(qs)\ndiff --git a/tests/queries/tests.py b/tests/queries/tests.py\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1883,6 +1883,10 @@ def test_ticket5261(self):\n             Note.objects.exclude(~Q() & ~Q()),\n             [self.n1, self.n2],\n         )\n+        self.assertSequenceEqual(\n+            Note.objects.exclude(~Q() ^ ~Q()),\n+            [self.n1, self.n2],\n+        )\n \n     def test_extra_select_literal_percent_s(self):\n         # Allow %%s to escape select clauses\n@@ -2129,6 +2133,15 @@ def test_col_alias_quoted(self):\n         sql = captured_queries[0][\"sql\"]\n         self.assertIn(\"AS %s\" % connection.ops.quote_name(\"col1\"), sql)\n \n+    def test_xor_subquery(self):\n+        self.assertSequenceEqual(\n+            Tag.objects.filter(\n+                Exists(Tag.objects.filter(id=OuterRef(\"id\"), name=\"t3\"))\n+                ^ Exists(Tag.objects.filter(id=OuterRef(\"id\"), parent=self.t1))\n+            ),\n+            [self.t2],\n+        )\n+\n \n class RawQueriesTests(TestCase):\n     @classmethod\n@@ -2432,6 +2445,30 @@ def test_or_with_both_slice_and_ordering(self):\n         qs2 = Classroom.objects.filter(has_blackboard=True).order_by(\"-name\")[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_3, self.room_4])\n \n+    @skipUnlessDBFeature(\"allow_sliced_subqueries_with_in\")\n+    def test_xor_with_rhs_slice(self):\n+        qs1 = Classroom.objects.filter(has_blackboard=True)\n+        qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n+        self.assertCountEqual(qs1 ^ qs2, [self.room_1, self.room_2, self.room_3])\n+\n+    @skipUnlessDBFeature(\"allow_sliced_subqueries_with_in\")\n+    def test_xor_with_lhs_slice(self):\n+        qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n+        qs2 = Classroom.objects.filter(has_blackboard=False)\n+        self.assertCountEqual(qs1 ^ qs2, [self.room_1, self.room_2, self.room_4])\n+\n+    @skipUnlessDBFeature(\"allow_sliced_subqueries_with_in\")\n+    def test_xor_with_both_slice(self):\n+        qs1 = Classroom.objects.filter(has_blackboard=False)[:1]\n+        qs2 = Classroom.objects.filter(has_blackboard=True)[:1]\n+        self.assertCountEqual(qs1 ^ qs2, [self.room_1, self.room_2])\n+\n+    @skipUnlessDBFeature(\"allow_sliced_subqueries_with_in\")\n+    def test_xor_with_both_slice_and_ordering(self):\n+        qs1 = Classroom.objects.filter(has_blackboard=False).order_by(\"-pk\")[:1]\n+        qs2 = Classroom.objects.filter(has_blackboard=True).order_by(\"-name\")[:1]\n+        self.assertCountEqual(qs1 ^ qs2, [self.room_3, self.room_4])\n+\n     def test_subquery_aliases(self):\n         combined = School.objects.filter(pk__isnull=False) & School.objects.filter(\n             Exists(\ndiff --git a/tests/xor_lookups/__init__.py b/tests/xor_lookups/__init__.py\nnew file mode 100644\ndiff --git a/tests/xor_lookups/models.py b/tests/xor_lookups/models.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/xor_lookups/models.py\n@@ -0,0 +1,8 @@\n+from django.db import models\n+\n+\n+class Number(models.Model):\n+    num = models.IntegerField()\n+\n+    def __str__(self):\n+        return str(self.num)\ndiff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/xor_lookups/tests.py\n@@ -0,0 +1,67 @@\n+from django.db.models import Q\n+from django.test import TestCase\n+\n+from .models import Number\n+\n+\n+class XorLookupsTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.numbers = [Number.objects.create(num=i) for i in range(10)]\n+\n+    def test_filter(self):\n+        self.assertCountEqual(\n+            Number.objects.filter(num__lte=7) ^ Number.objects.filter(num__gte=3),\n+            self.numbers[:3] + self.numbers[8:],\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__lte=7) ^ Q(num__gte=3)),\n+            self.numbers[:3] + self.numbers[8:],\n+        )\n+\n+    def test_filter_negated(self):\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__lte=7) ^ ~Q(num__lt=3)),\n+            self.numbers[:3] + self.numbers[8:],\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(~Q(num__gt=7) ^ ~Q(num__lt=3)),\n+            self.numbers[:3] + self.numbers[8:],\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__lte=7) ^ ~Q(num__lt=3) ^ Q(num__lte=1)),\n+            [self.numbers[2]] + self.numbers[8:],\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(~(Q(num__lte=7) ^ ~Q(num__lt=3) ^ Q(num__lte=1))),\n+            self.numbers[:2] + self.numbers[3:8],\n+        )\n+\n+    def test_exclude(self):\n+        self.assertCountEqual(\n+            Number.objects.exclude(Q(num__lte=7) ^ Q(num__gte=3)),\n+            self.numbers[3:8],\n+        )\n+\n+    def test_stages(self):\n+        numbers = Number.objects.all()\n+        self.assertSequenceEqual(\n+            numbers.filter(num__gte=0) ^ numbers.filter(num__lte=11),\n+            [],\n+        )\n+        self.assertSequenceEqual(\n+            numbers.filter(num__gt=0) ^ numbers.filter(num__lt=11),\n+            [self.numbers[0]],\n+        )\n+\n+    def test_pk_q(self):\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(pk=self.numbers[0].pk) ^ Q(pk=self.numbers[1].pk)),\n+            self.numbers[:2],\n+        )\n+\n+    def test_empty_in(self):\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n+            self.numbers[5:],\n+        )\n",
  "problem_statement": "Add logical XOR support to Q() and QuerySet().\nDescription\n\t\nXOR seems to be available in ​Postgresql, ​MySQL, ​SequelServer and ​Oracle but NOT ​sqlite. Two stackoverflow questions cover this sort of thing: ​https://stackoverflow.com/questions/50408142/django-models-xor-at-the-model-level and ​https://stackoverflow.com/questions/14711203/perform-a-logical-exclusive-or-on-a-django-q-object.\nI propose adding XOR to work with Q queries like the ​answer to the second question above. This will be my first time making a major contribution so we'll see how this goes (apologies in advance if this is annoying!).\n",
  "hints_text": "It's probably best to write to the DevelopersMailingList to see if there's consensus about this (although having a working patch may help evaluate the idea). I wonder if it's possible to emulate XOR on SQLite similar to what we do for some other database functions.\nXOR is not officially supported on Oracle (see ​doc) you pointed to the old MySQL documentation.\nTo be clear, you're talking about logical XOR, and not bitwise XOR? You linked to PostgreSQL's bitwise XOR operator, #. At the moment it does not have a logical XOR operator. The only ​logical operators it supports are AND, OR and NOT.\nReplying to Marten Kenbeek: To be clear, you're talking about logical XOR, and not bitwise XOR? As you've highlighted, this should be for logical XOR and not bitwise XOR. So this is only supported for MariaDB and MySQL which have XOR. This could be implemented by defining Q.XOR and Q.__xor__() and then propagating that around the place. It could be possible to support this for other backends by specifying connection.features.supports_logical_xor = False and then writing out the query differently. For Q(a=1) ^ Q(b=2), the supporting backends would output (a = 1 XOR a = 2), while the others could output ((a = 1 OR b = 2) AND NOT (a = 1 AND b = 2)).\nXOR can be implemented by def __xor__(self,other): return self.__or__(other).__and__(self.__invert__().__or__(other.__invert__())) it works for sqlite (possibly for others) wouldn't it solves the problem\nReplying to Griffith Rees: XOR seems to be available in ​Postgresql, ​MySQL, ​SequelServer and ​Oracle but NOT ​sqlite. Two stackoverflow questions cover this sort of thing: ​https://stackoverflow.com/questions/50408142/django-models-xor-at-the-model-level and ​https://stackoverflow.com/questions/14711203/perform-a-logical-exclusive-or-on-a-django-q-object. I propose adding XOR to work with Q queries like the ​answer to the second question above. This will be my first time making a major contribution so we'll see how this goes (apologies in advance if this is annoying!). I started on this hoping to use it on my own postgres site, only to realize that postgres does not support logical XOR. Too bad, as it would help with not executing large subqueries multiple times. Never-the-less I have created a PR with the proposed changes for this ​here, which probably needs some TLC from a more advanced contributor. This code should add support for XOR across the codebase, to both Q objects and QuerySets, and ensure it gets down the SQL fed to the database. Note that a TypeError is raised if XOR is attempted on an unsupported backend. This seemed safer than converting on the fly to (A AND ~B) OR (~A AND B), since doing that could lead to some unintended results when the user is expecting XOR to be used. If it is decided that a conversion would be more desirable, then the code can be changed.\nAfter careful consideration I have decided not to raise a TypeError on unsupported backends, and instead convert on the fly from A XOR B to (A OR B) AND NOT (A AND B). MySQL will still take advantage of logical XOR.",
  "created_at": "2021-06-02T19:49:22Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_and (expressions.tests.CombinableTests)\", \"test_or (expressions.tests.CombinableTests)\", \"test_reversed_and (expressions.tests.CombinableTests)\", \"test_reversed_or (expressions.tests.CombinableTests)\", \"test_reversed_xor (expressions.tests.CombinableTests)\", \"test_xor (expressions.tests.CombinableTests)\", \"test_combine_empty_copy (queries.test_q.QTests)\", \"test_combine_negated_boolean_expression (queries.test_q.QTests)\", \"test_combine_not_q_object (queries.test_q.QTests)\", \"test_combine_xor_both_empty (queries.test_q.QTests)\", \"test_combine_xor_empty (queries.test_q.QTests)\", \"test_deconstruct_xor (queries.test_q.QTests)\", \"test_reconstruct_xor (queries.test_q.QTests)\", \"test_empty_in (xor_lookups.tests.XorLookupsTests)\", \"test_exclude (xor_lookups.tests.XorLookupsTests)\", \"test_filter (xor_lookups.tests.XorLookupsTests)\", \"test_filter_negated (xor_lookups.tests.XorLookupsTests)\", \"test_pk_q (xor_lookups.tests.XorLookupsTests)\", \"test_stages (xor_lookups.tests.XorLookupsTests)\", \"test_xor_subquery (queries.tests.Queries6Tests)\", \"test_ticket5261 (queries.tests.Queries5Tests)\", \"test_xor_with_both_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_xor_with_both_slice_and_ordering (queries.tests.QuerySetBitwiseOperationTests)\", \"test_xor_with_lhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_xor_with_rhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_operator_on_combined_qs_error (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_by_same_type (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_filter_aggregates_negated_xor_connector (aggregation_regress.tests.AggregationTests)\", \"test_filter_aggregates_xor_connector (aggregation_regress.tests.AggregationTests)\"]",
  "PASS_TO_PASS": "[\"Can create an instance of a model with only the PK field (#17056).\\\"\", \"test_exists (queries.tests.ExistsSql)\", \"test_ticket_18414 (queries.tests.ExistsSql)\", \"test_ticket14729 (queries.tests.RawQueriesTests)\", \"If a queryset is already evaluated, it can still be used as a query arg.\", \"Cloning a queryset does not get out of hand. While complete\", \"test_reverse_trimming (queries.tests.ReverseJoinTrimmingTest)\", \"test_ticket_24278 (queries.tests.TestTicket24279)\", \"test_ticket_24748 (aggregation_regress.tests.SelfReferentialFKTests)\", \"test_ticket7371 (queries.tests.CustomPkTests)\", \"test_primary_key (queries.tests.IsNullTests)\", \"test_to_field (queries.tests.IsNullTests)\", \"Tests QuerySet ORed combining in exclude subquery case.\", \"Subquery table names should be quoted.\", \"test_month_aggregation (expressions.tests.FieldTransformTests)\", \"test_multiple_transforms_in_values (expressions.tests.FieldTransformTests)\", \"test_transform_in_values (expressions.tests.FieldTransformTests)\", \"test_ticket15786 (queries.tests.Exclude15786)\", \"test_ticket_7302 (queries.tests.EscapingTests)\", \"Generating the query string doesn't alter the query's state\", \"test_in_list_limit (queries.tests.ConditionalTests)\", \"test_infinite_loop (queries.tests.ConditionalTests)\", \"test_datetimes_invalid_field (queries.tests.Queries3Tests)\", \"test_ticket22023 (queries.tests.Queries3Tests)\", \"test_ticket7107 (queries.tests.Queries3Tests)\", \"test_ticket_21203 (queries.tests.Ticket21203Tests)\", \"test_empty_full_handling_conjunction (queries.tests.WhereNodeTest)\", \"test_empty_full_handling_disjunction (queries.tests.WhereNodeTest)\", \"test_empty_nodes (queries.tests.WhereNodeTest)\", \"test_non_nullable_fk_not_promoted (queries.tests.ValuesJoinPromotionTests)\", \"test_ticket_21376 (queries.tests.ValuesJoinPromotionTests)\", \"test_values_no_promotion_for_existing (queries.tests.ValuesJoinPromotionTests)\", \"test_double_subquery_in (queries.tests.DoubleInSubqueryTests)\", \"test_ticket8597 (queries.tests.ComparisonTests)\", \"test_ticket_19964 (queries.tests.RelabelCloneTest)\", \"test_negated_empty_exists (expressions.tests.ExistsTests)\", \"test_optimizations (expressions.tests.ExistsTests)\", \"test_select_negated_empty_exists (expressions.tests.ExistsTests)\", \"test_ticket_21879 (queries.tests.ReverseM2MCustomPkTests)\", \"test_values_in_subquery (queries.tests.ValuesSubqueryTests)\", \"test_invalid_values (queries.tests.TestInvalidValuesRelation)\", \"test_21001 (queries.tests.EmptyStringsAsNullTest)\", \"test_direct_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_joined_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_join_already_in_query (queries.tests.NullableRelOrderingTests)\", \"test_ticket10028 (queries.tests.NullableRelOrderingTests)\", \"test_ticket_18785 (queries.tests.Ticket18785Tests)\", \"test_ticket_14056 (queries.tests.Ticket14056Tests)\", \"test_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_non_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_annotated_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_annotated_ordering (queries.tests.QuerysetOrderedTests)\", \"test_annotated_values_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_cleared_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_empty_queryset (queries.tests.QuerysetOrderedTests)\", \"test_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_no_default_or_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_order_by_extra (queries.tests.QuerysetOrderedTests)\", \"test_existing_join_not_promoted (aggregation_regress.tests.JoinPromotionTests)\", \"test_non_nullable_fk_not_promoted (aggregation_regress.tests.JoinPromotionTests)\", \"test_ticket_21150 (aggregation_regress.tests.JoinPromotionTests)\", \"test_negation (expressions.tests.CombinableTests)\", \"test_ticket_12807 (queries.tests.Ticket12807Tests)\", \"test_ticket7872 (queries.tests.DisjunctiveFilterTests)\", \"test_ticket8283 (queries.tests.DisjunctiveFilterTests)\", \"test_deconstruct (expressions.tests.FTests)\", \"test_deepcopy (expressions.tests.FTests)\", \"test_equal (expressions.tests.FTests)\", \"test_hash (expressions.tests.FTests)\", \"test_not_equal_Value (expressions.tests.FTests)\", \"test_F_reuse (expressions.tests.ExpressionsTests)\", \"Special characters (e.g. %, _ and \\\\) stored in database are\", \"test_ticket_21787 (queries.tests.ForeignKeyToBaseExcludeTests)\", \"test_equal (expressions.tests.OrderByTests)\", \"test_hash (expressions.tests.OrderByTests)\", \"test_resolve_output_field (expressions.tests.CombinedExpressionTests)\", \"test_tickets_3045_3288 (queries.tests.SelectRelatedTests)\", \"test_ticket_23605 (queries.tests.Ticket23605Tests)\", \"test_empty_string_promotion (queries.tests.EmptyStringPromotionTests)\", \"Complex expressions of different connection types are possible.\", \"test_decimal_expression (expressions.tests.ExpressionsNumericTests)\", \"We can fill a value in all objects with an other value of the\", \"test_filter_decimal_expression (expressions.tests.ExpressionsNumericTests)\", \"We can filter for objects, where a value is not equals the value\", \"We can increment a value of all objects in a query set.\", \"test_aggregates (expressions.tests.ReprTests)\", \"test_distinct_aggregates (expressions.tests.ReprTests)\", \"test_expressions (expressions.tests.ReprTests)\", \"test_filtered_aggregates (expressions.tests.ReprTests)\", \"test_functions (expressions.tests.ReprTests)\", \"test_ticket10432 (queries.tests.GeneratorExpressionTests)\", \"test_ticket_20788 (queries.tests.Ticket20788Tests)\", \"test_double_exclude (queries.tests.NullInExcludeTest)\", \"test_null_in_exclude_qs (queries.tests.NullInExcludeTest)\", \"test_compile_unresolved (expressions.tests.ValueTests)\", \"test_deconstruct (expressions.tests.ValueTests)\", \"test_deconstruct_output_field (expressions.tests.ValueTests)\", \"test_equal (expressions.tests.ValueTests)\", \"test_equal_output_field (expressions.tests.ValueTests)\", \"test_hash (expressions.tests.ValueTests)\", \"test_output_field_decimalfield (expressions.tests.ValueTests)\", \"The output field for a given Value doesn't get cleaned & validated,\", \"test_raise_empty_expressionlist (expressions.tests.ValueTests)\", \"test_repr (expressions.tests.ValueTests)\", \"test_resolve_output_field (expressions.tests.ValueTests)\", \"test_resolve_output_field_failure (expressions.tests.ValueTests)\", \"test_update_TimeField_using_Value (expressions.tests.ValueTests)\", \"test_update_UUIDField_using_Value (expressions.tests.ValueTests)\", \"test_ticket7778 (queries.tests.SubclassFKTests)\", \"test_ticket_22429 (queries.tests.Ticket22429Tests)\", \"test_combine_and_both_empty (queries.test_q.QTests)\", \"test_combine_and_empty (queries.test_q.QTests)\", \"test_combine_or_both_empty (queries.test_q.QTests)\", \"test_combine_or_empty (queries.test_q.QTests)\", \"test_deconstruct (queries.test_q.QTests)\", \"test_deconstruct_and (queries.test_q.QTests)\", \"test_deconstruct_boolean_expression (queries.test_q.QTests)\", \"test_deconstruct_multiple_kwargs (queries.test_q.QTests)\", \"test_deconstruct_negated (queries.test_q.QTests)\", \"test_deconstruct_nested (queries.test_q.QTests)\", \"test_deconstruct_or (queries.test_q.QTests)\", \"test_reconstruct (queries.test_q.QTests)\", \"test_reconstruct_and (queries.test_q.QTests)\", \"test_reconstruct_negated (queries.test_q.QTests)\", \"test_reconstruct_or (queries.test_q.QTests)\", \"test_fk_reuse (queries.tests.JoinReuseTest)\", \"test_fk_reuse_annotation (queries.tests.JoinReuseTest)\", \"test_fk_reuse_disjunction (queries.tests.JoinReuseTest)\", \"test_fk_reuse_order_by (queries.tests.JoinReuseTest)\", \"test_fk_reuse_select_related (queries.tests.JoinReuseTest)\", \"When a trimmable join is specified in the query (here school__), the\", \"test_revfk_noreuse (queries.tests.JoinReuseTest)\", \"test_revo2o_reuse (queries.tests.JoinReuseTest)\", \"test_can_combine_queries_using_and_and_or_operators (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_items_using_index_and_slice_notation (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_number_of_items_in_queryset_using_standard_len (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_invalid_index (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_can_slice_again_after_slicing (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_combine_queries_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_filter_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_reorder_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"hint: inverting your ordering might do what you need\", \"test_slicing_with_steps_can_be_used (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_with_tests_is_not_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_without_step_is_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_ticket_20955 (queries.tests.Ticket20955Tests)\", \"test_invalid_order_by (queries.tests.QuerySetExceptionTests)\", \"test_invalid_order_by_raw_column_alias (queries.tests.QuerySetExceptionTests)\", \"test_invalid_queryset_model (queries.tests.QuerySetExceptionTests)\", \"test_iter_exceptions (queries.tests.QuerySetExceptionTests)\", \"test_emptyqueryset_values (queries.tests.EmptyQuerySetTests)\", \"test_ticket_19151 (queries.tests.EmptyQuerySetTests)\", \"test_values_subquery (queries.tests.EmptyQuerySetTests)\", \"test_empty_resultset_sql (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery_exclude (queries.tests.WeirdQuerysetSlicingTests)\", \"test_tickets_7698_10202 (queries.tests.WeirdQuerysetSlicingTests)\", \"test_zero_length_values_slicing (queries.tests.WeirdQuerysetSlicingTests)\", \"test_equal (expressions.tests.SimpleExpressionTests)\", \"test_hash (expressions.tests.SimpleExpressionTests)\", \"test_exclude_many_to_many (queries.tests.ManyToManyExcludeTest)\", \"test_ticket_12823 (queries.tests.ManyToManyExcludeTest)\", \"test_ticket12239 (queries.tests.Queries2Tests)\", \"test_ticket4289 (queries.tests.Queries2Tests)\", \"test_ticket7759 (queries.tests.Queries2Tests)\", \"When passing proxy model objects, child objects, or parent objects,\", \"ValueQuerySets are not checked for compatibility with the lookup field.\", \"A ValueError is raised when the incorrect object type is passed to a\", \"This should exclude Orders which have some items with status 1\", \"Using exclude(condition) and exclude(Q(condition)) should\", \"test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests)\", \"This tests that SQL injection isn't possible using compilation of\", \"test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_namedtuple (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_query (queries.tests.ToFieldTests)\", \"test_in_subquery (queries.tests.ToFieldTests)\", \"test_nested_in_subquery (queries.tests.ToFieldTests)\", \"test_recursive_fk (queries.tests.ToFieldTests)\", \"test_recursive_fk_reverse (queries.tests.ToFieldTests)\", \"test_reverse_in (queries.tests.ToFieldTests)\", \"test_single_object (queries.tests.ToFieldTests)\", \"test_single_object_reverse (queries.tests.ToFieldTests)\", \"test_AB_ACB (queries.tests.UnionTests)\", \"test_A_AB (queries.tests.UnionTests)\", \"test_A_AB2 (queries.tests.UnionTests)\", \"test_BAB_BAC (queries.tests.UnionTests)\", \"test_BAB_BACB (queries.tests.UnionTests)\", \"test_BA_BCA__BAB_BAC_BCA (queries.tests.UnionTests)\", \"test_extra_multiple_select_params_values_order_by (queries.tests.ValuesQuerysetTests)\", \"test_extra_select_params_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_multiple (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_twice (queries.tests.ValuesQuerysetTests)\", \"test_field_error_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_values_list (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_bad_field_name (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression_with_default_alias (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_flat (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_with_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_without_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_pickle (queries.tests.ValuesQuerysetTests)\", \"test_disjunction_promotion1 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion2 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion5_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion6 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion7 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_fexpression (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_select_related (queries.tests.DisjunctionPromotionTests)\", \"test_distinct_ordered_sliced_subquery (queries.tests.SubqueryTests)\", \"Subselects honor any manual ordering\", \"Related objects constraints can safely contain sliced subqueries.\", \"Slice a query that has a sliced subquery\", \"Delete queries can safely contain sliced subqueries\", \"test_col_alias_quoted (queries.tests.Queries6Tests)\", \"test_distinct_ordered_sliced_subquery_aggregation (queries.tests.Queries6Tests)\", \"test_multiple_columns_with_the_same_name_slice (queries.tests.Queries6Tests)\", \"test_nested_queries_sql (queries.tests.Queries6Tests)\", \"test_parallel_iterators (queries.tests.Queries6Tests)\", \"test_ticket3739 (queries.tests.Queries6Tests)\", \"test_ticket_11320 (queries.tests.Queries6Tests)\", \"test_tickets_8921_9188 (queries.tests.Queries6Tests)\", \"test_extra_select_literal_percent_s (queries.tests.Queries5Tests)\", \"test_filter_unsaved_object (queries.tests.Queries5Tests)\", \"test_ordering (queries.tests.Queries5Tests)\", \"test_queryset_reuse (queries.tests.Queries5Tests)\", \"test_ticket7045 (queries.tests.Queries5Tests)\", \"test_ticket7256 (queries.tests.Queries5Tests)\", \"test_ticket9848 (queries.tests.Queries5Tests)\", \"test_isnull_filter_promotion (queries.tests.NullJoinPromotionOrTest)\", \"test_null_join_demotion (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_17886 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21366 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_complex_filter (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_and (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_or (queries.tests.NullJoinPromotionOrTest)\", \"test_lefthand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor_null (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor_right_null (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_division (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_modulo_null (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_transformed_field_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_division (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_righthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_conflicting_aliases_during_combine (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_both_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_both_slice_and_ordering (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_lhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_rhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_subquery_aliases (queries.tests.QuerySetBitwiseOperationTests)\", \"test_exclude_multivalued_exists (queries.tests.ExcludeTests)\", \"test_exclude_nullable_fields (queries.tests.ExcludeTests)\", \"test_exclude_reverse_fk_field_ref (queries.tests.ExcludeTests)\", \"test_exclude_subquery (queries.tests.ExcludeTests)\", \"test_exclude_unsaved_o2o_object (queries.tests.ExcludeTests)\", \"test_exclude_unsaved_object (queries.tests.ExcludeTests)\", \"test_exclude_with_circular_fk_relation (queries.tests.ExcludeTests)\", \"test_subquery_exclude_outerref (queries.tests.ExcludeTests)\", \"test_ticket14511 (queries.tests.ExcludeTests)\", \"test_to_field (queries.tests.ExcludeTests)\", \"test_combine_join_reuse (queries.tests.Queries4Tests)\", \"test_combine_or_filter_reuse (queries.tests.Queries4Tests)\", \"test_filter_reverse_non_integer_pk (queries.tests.Queries4Tests)\", \"test_join_reuse_order (queries.tests.Queries4Tests)\", \"test_order_by_resetting (queries.tests.Queries4Tests)\", \"test_order_by_reverse_fk (queries.tests.Queries4Tests)\", \"test_ticket10181 (queries.tests.Queries4Tests)\", \"test_ticket11811 (queries.tests.Queries4Tests)\", \"test_ticket14876 (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_true (queries.tests.Queries4Tests)\", \"test_ticket24525 (queries.tests.Queries4Tests)\", \"test_ticket7095 (queries.tests.Queries4Tests)\", \"test_combining_multiple_models (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_empty_qs_union_with_ordered_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_with_filters_unsupported_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_limits (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_raises_on_non_selected_column (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_alias (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression_and_alias (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_qs_with_subcompound_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_distinct (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_in_subquery (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_in_subquery_related_outerref (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_multiple_models_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_multiple_models_with_values_list_and_order_by_extra_select (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_none (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_extra_and_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_two_annotated_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_and_order_on_annotation (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_on_annotated_and_unannotated (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_operations_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_ordering_slicing_raises_db_error (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_date_case_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_comparison (expressions.tests.FTimeDeltaTests)\", \"test_date_minus_duration (expressions.tests.FTimeDeltaTests)\", \"test_date_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_delta_add (expressions.tests.FTimeDeltaTests)\", \"test_delta_subtract (expressions.tests.FTimeDeltaTests)\", \"test_delta_update (expressions.tests.FTimeDeltaTests)\", \"test_duration_expressions (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_durationfield_add (expressions.tests.FTimeDeltaTests)\", \"test_durationfield_multiply_divide (expressions.tests.FTimeDeltaTests)\", \"test_exclude (expressions.tests.FTimeDeltaTests)\", \"test_invalid_operator (expressions.tests.FTimeDeltaTests)\", \"test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests)\", \"test_multiple_query_compilation (expressions.tests.FTimeDeltaTests)\", \"test_negative_timedelta_update (expressions.tests.FTimeDeltaTests)\", \"test_query_clone (expressions.tests.FTimeDeltaTests)\", \"test_time_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_time_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_aggregate_rawsql_annotation (expressions.tests.BasicExpressionsTests)\", \"test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_count (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_filter (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_nested_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)\", \"test_arithmetic (expressions.tests.BasicExpressionsTests)\", \"test_boolean_expression_combined (expressions.tests.BasicExpressionsTests)\", \"test_boolean_expression_combined_with_empty_Q (expressions.tests.BasicExpressionsTests)\", \"test_boolean_expression_in_Q (expressions.tests.BasicExpressionsTests)\", \"test_case_in_filter_if_boolean_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exists_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_explicit_output_field (expressions.tests.BasicExpressionsTests)\", \"test_filter_inter_attribute (expressions.tests.BasicExpressionsTests)\", \"test_filter_with_join (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_q_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_rawsql_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_in_subquery (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_nested_outerref_with_function (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_join_outer_ref (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests)\", \"test_new_object_create (expressions.tests.BasicExpressionsTests)\", \"test_new_object_save (expressions.tests.BasicExpressionsTests)\", \"test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_object_update (expressions.tests.BasicExpressionsTests)\", \"test_object_update_fk (expressions.tests.BasicExpressionsTests)\", \"test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests)\", \"test_order_by_exists (expressions.tests.BasicExpressionsTests)\", \"test_order_by_multiline_sql (expressions.tests.BasicExpressionsTests)\", \"test_order_of_operations (expressions.tests.BasicExpressionsTests)\", \"test_outerref (expressions.tests.BasicExpressionsTests)\", \"test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests)\", \"test_outerref_with_operator (expressions.tests.BasicExpressionsTests)\", \"test_parenthesis_priority (expressions.tests.BasicExpressionsTests)\", \"test_pickle_expression (expressions.tests.BasicExpressionsTests)\", \"test_subquery (expressions.tests.BasicExpressionsTests)\", \"test_subquery_eq (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_lazy (expressions.tests.BasicExpressionsTests)\", \"test_subquery_group_by_outerref_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests)\", \"test_subquery_sql (expressions.tests.BasicExpressionsTests)\", \"test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests)\", \"test_update (expressions.tests.BasicExpressionsTests)\", \"test_update_inherited_field_value (expressions.tests.BasicExpressionsTests)\", \"test_update_with_fk (expressions.tests.BasicExpressionsTests)\", \"test_update_with_none (expressions.tests.BasicExpressionsTests)\", \"test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests)\", \"test_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_aggregate_annotation (aggregation_regress.tests.AggregationTests)\", \"test_aggregate_fexpr (aggregation_regress.tests.AggregationTests)\", \"test_aggregate_on_relation (aggregation_regress.tests.AggregationTests)\", \"Regression test for #12822: DatabaseError: aggregates not allowed in\", \"Regression test for #10870:  Aggregates with joins ignore extra\", \"test_allow_distinct (aggregation_regress.tests.AggregationTests)\", \"test_annotate_and_join (aggregation_regress.tests.AggregationTests)\", \"test_annotate_distinct_aggregate (aggregation_regress.tests.AggregationTests)\", \"The base table's join isn't promoted to LOUTER. This could\", \"test_annotate_on_relation (aggregation_regress.tests.AggregationTests)\", \"Regression #18333 - Ensure annotated column name is properly quoted.\", \"Find ages that are shared by at least two authors.\", \"Regression test for #11916: Extra params + aggregation creates\", \"test_annotated_conditional_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_annotation (aggregation_regress.tests.AggregationTests)\", \"test_annotation_disjunction (aggregation_regress.tests.AggregationTests)\", \"test_annotation_with_value (aggregation_regress.tests.AggregationTests)\", \"test_boolean_conversion (aggregation_regress.tests.AggregationTests)\", \"test_conditional_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_conditional_aggregate_on_complex_condition (aggregation_regress.tests.AggregationTests)\", \"test_db_col_table (aggregation_regress.tests.AggregationTests)\", \"Filtering on an aggregate annotation with Decimal values should work.\", \"test_distinct_conditional_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_duplicate_alias (aggregation_regress.tests.AggregationTests)\", \"test_empty (aggregation_regress.tests.AggregationTests)\", \"test_empty_filter_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_empty_filter_count (aggregation_regress.tests.AggregationTests)\", \"test_f_expression_annotation (aggregation_regress.tests.AggregationTests)\", \"test_field_error (aggregation_regress.tests.AggregationTests)\", \"test_field_name_conflict (aggregation_regress.tests.AggregationTests)\", \"test_filter_aggregates_negated_and_connector (aggregation_regress.tests.AggregationTests)\", \"test_filter_aggregates_or_connector (aggregation_regress.tests.AggregationTests)\", \"test_filtering_by_annotation_name (aggregation_regress.tests.AggregationTests)\", \"test_fk_attname_conflict (aggregation_regress.tests.AggregationTests)\", \"An F() object referring to related column works correctly in group by.\", \"test_having_group_by (aggregation_regress.tests.AggregationTests)\", \"test_having_subquery_select (aggregation_regress.tests.AggregationTests)\", \"test_m2m_name_conflict (aggregation_regress.tests.AggregationTests)\", \"test_more (aggregation_regress.tests.AggregationTests)\", \"test_more_more (aggregation_regress.tests.AggregationTests)\", \"test_more_more_more (aggregation_regress.tests.AggregationTests)\", \"test_name_expressions (aggregation_regress.tests.AggregationTests)\", \"test_name_filters (aggregation_regress.tests.AggregationTests)\", \"test_negated_aggregation (aggregation_regress.tests.AggregationTests)\", \"test_none_call_before_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_pickle (aggregation_regress.tests.AggregationTests)\", \"test_quoting_aggregate_order_by (aggregation_regress.tests.AggregationTests)\", \"test_reverse_join_trimming (aggregation_regress.tests.AggregationTests)\", \"test_reverse_relation_name_conflict (aggregation_regress.tests.AggregationTests)\", \"test_sliced_conditional_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_stddev (aggregation_regress.tests.AggregationTests)\", \"Splitting a q object to parts for where/having doesn't alter\", \"test_values_annotate_values (aggregation_regress.tests.AggregationTests)\", \"Annotate *args ordering should be preserved in values_list results.\", \"test_values_queryset_non_conflict (aggregation_regress.tests.AggregationTests)\", \"test_avoid_infinite_loop_on_too_many_subqueries (queries.tests.Queries1Tests)\", \"Valid query should be generated when fields fetched from joined tables\", \"test_deferred_load_qs_pickling (queries.tests.Queries1Tests)\", \"test_double_exclude (queries.tests.Queries1Tests)\", \"test_error_raised_on_filter_with_dictionary (queries.tests.Queries1Tests)\", \"test_exclude (queries.tests.Queries1Tests)\", \"test_exclude_in (queries.tests.Queries1Tests)\", \"test_excluded_intermediary_m2m_table_joined (queries.tests.Queries1Tests)\", \"test_field_with_filterable (queries.tests.Queries1Tests)\", \"get() should clear ordering for optimization purposes.\", \"test_heterogeneous_qs_combination (queries.tests.Queries1Tests)\", \"test_lookup_constraint_fielderror (queries.tests.Queries1Tests)\", \"test_negate_field (queries.tests.Queries1Tests)\", \"test_nested_exclude (queries.tests.Queries1Tests)\", \"This test is related to the above one, testing that there aren't\", \"test_order_by_rawsql (queries.tests.Queries1Tests)\", \"test_order_by_tables (queries.tests.Queries1Tests)\", \"test_reasonable_number_of_subq_aliases (queries.tests.Queries1Tests)\", \"test_subquery_condition (queries.tests.Queries1Tests)\", \"test_ticket10205 (queries.tests.Queries1Tests)\", \"test_ticket10432 (queries.tests.Queries1Tests)\", \"test_ticket1050 (queries.tests.Queries1Tests)\", \"test_ticket10742 (queries.tests.Queries1Tests)\", \"Meta.ordering=None works the same as Meta.ordering=[]\", \"test_ticket1801 (queries.tests.Queries1Tests)\", \"test_ticket19672 (queries.tests.Queries1Tests)\", \"test_ticket2091 (queries.tests.Queries1Tests)\", \"test_ticket2253 (queries.tests.Queries1Tests)\", \"test_ticket2306 (queries.tests.Queries1Tests)\", \"test_ticket2400 (queries.tests.Queries1Tests)\", \"test_ticket2496 (queries.tests.Queries1Tests)\", \"test_ticket3037 (queries.tests.Queries1Tests)\", \"test_ticket3141 (queries.tests.Queries1Tests)\", \"test_ticket4358 (queries.tests.Queries1Tests)\", \"test_ticket4464 (queries.tests.Queries1Tests)\", \"test_ticket4510 (queries.tests.Queries1Tests)\", \"test_ticket6074 (queries.tests.Queries1Tests)\", \"test_ticket6154 (queries.tests.Queries1Tests)\", \"test_ticket6981 (queries.tests.Queries1Tests)\", \"test_ticket7076 (queries.tests.Queries1Tests)\", \"test_ticket7096 (queries.tests.Queries1Tests)\", \"test_ticket7155 (queries.tests.Queries1Tests)\", \"test_ticket7181 (queries.tests.Queries1Tests)\", \"test_ticket7235 (queries.tests.Queries1Tests)\", \"test_ticket7277 (queries.tests.Queries1Tests)\", \"test_ticket7323 (queries.tests.Queries1Tests)\", \"test_ticket7378 (queries.tests.Queries1Tests)\", \"test_ticket7791 (queries.tests.Queries1Tests)\", \"test_ticket7813 (queries.tests.Queries1Tests)\", \"test_ticket8439 (queries.tests.Queries1Tests)\", \"test_ticket9926 (queries.tests.Queries1Tests)\", \"test_ticket9985 (queries.tests.Queries1Tests)\", \"test_ticket9997 (queries.tests.Queries1Tests)\", \"test_ticket_10790_1 (queries.tests.Queries1Tests)\", \"test_ticket_10790_2 (queries.tests.Queries1Tests)\", \"test_ticket_10790_3 (queries.tests.Queries1Tests)\", \"test_ticket_10790_4 (queries.tests.Queries1Tests)\", \"test_ticket_10790_5 (queries.tests.Queries1Tests)\", \"test_ticket_10790_6 (queries.tests.Queries1Tests)\", \"test_ticket_10790_7 (queries.tests.Queries1Tests)\", \"test_ticket_10790_8 (queries.tests.Queries1Tests)\", \"test_ticket_10790_combine (queries.tests.Queries1Tests)\", \"test_ticket_20250 (queries.tests.Queries1Tests)\", \"test_tickets_1878_2939 (queries.tests.Queries1Tests)\", \"test_tickets_2076_7256 (queries.tests.Queries1Tests)\", \"test_tickets_2080_3592 (queries.tests.Queries1Tests)\", \"test_tickets_2874_3002 (queries.tests.Queries1Tests)\", \"test_tickets_4088_4306 (queries.tests.Queries1Tests)\", \"test_tickets_5321_7070 (queries.tests.Queries1Tests)\", \"test_tickets_5324_6704 (queries.tests.Queries1Tests)\", \"test_tickets_6180_6203 (queries.tests.Queries1Tests)\", \"test_tickets_7087_12242 (queries.tests.Queries1Tests)\", \"test_tickets_7204_7506 (queries.tests.Queries1Tests)\", \"test_tickets_7448_7707 (queries.tests.Queries1Tests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.694599",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}