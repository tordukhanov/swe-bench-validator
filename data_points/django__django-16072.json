{
  "repo": "django/django",
  "instance_id": "django__django-16072",
  "base_commit": "9b0c9821ed4dd9920cc7c5e7b657720d91a89bdc",
  "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -799,15 +799,7 @@ def save(\n                 return\n \n             update_fields = frozenset(update_fields)\n-            field_names = set()\n-\n-            for field in self._meta.concrete_fields:\n-                if not field.primary_key:\n-                    field_names.add(field.name)\n-\n-                    if field.name != field.attname:\n-                        field_names.add(field.attname)\n-\n+            field_names = self._meta._non_pk_concrete_field_names\n             non_model_fields = update_fields.difference(field_names)\n \n             if non_model_fields:\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -89,6 +89,7 @@ class Options:\n         \"many_to_many\",\n         \"concrete_fields\",\n         \"local_concrete_fields\",\n+        \"_non_pk_concrete_field_names\",\n         \"_forward_fields_map\",\n         \"managers\",\n         \"managers_map\",\n@@ -982,6 +983,19 @@ def _property_names(self):\n                 names.append(name)\n         return frozenset(names)\n \n+    @cached_property\n+    def _non_pk_concrete_field_names(self):\n+        \"\"\"\n+        Return a set of the non-pk concrete field names defined on the model.\n+        \"\"\"\n+        names = []\n+        for field in self.concrete_fields:\n+            if not field.primary_key:\n+                names.append(field.name)\n+                if field.name != field.attname:\n+                    names.append(field.attname)\n+        return frozenset(names)\n+\n     @cached_property\n     def db_returning_fields(self):\n         \"\"\"\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -20,7 +20,7 @@\n     router,\n     transaction,\n )\n-from django.db.models import AutoField, DateField, DateTimeField, sql\n+from django.db.models import AutoField, DateField, DateTimeField, Field, sql\n from django.db.models.constants import LOOKUP_SEP, OnConflict\n from django.db.models.deletion import Collector\n from django.db.models.expressions import Case, F, Ref, Value, When\n@@ -963,7 +963,25 @@ def update_or_create(self, defaults=None, **kwargs):\n                 return obj, created\n             for k, v in resolve_callables(defaults):\n                 setattr(obj, k, v)\n-            obj.save(using=self.db)\n+\n+            update_fields = set(defaults)\n+            concrete_field_names = self.model._meta._non_pk_concrete_field_names\n+            # update_fields does not support non-concrete fields.\n+            if concrete_field_names.issuperset(update_fields):\n+                # Add fields which are set on pre_save(), e.g. auto_now fields.\n+                # This is to maintain backward compatibility as these fields\n+                # are not updated unless explicitly specified in the\n+                # update_fields list.\n+                for field in self.model._meta.local_concrete_fields:\n+                    if not (\n+                        field.primary_key or field.__class__.pre_save is Field.pre_save\n+                    ):\n+                        update_fields.add(field.name)\n+                        if field.name != field.attname:\n+                            update_fields.add(field.attname)\n+                obj.save(using=self.db, update_fields=update_fields)\n+            else:\n+                obj.save(using=self.db)\n         return obj, False\n \n     async def aupdate_or_create(self, defaults=None, **kwargs):\n",
  "test_patch": "diff --git a/tests/get_or_create/models.py b/tests/get_or_create/models.py\n--- a/tests/get_or_create/models.py\n+++ b/tests/get_or_create/models.py\n@@ -63,3 +63,4 @@ class Book(models.Model):\n         related_name=\"books\",\n         db_column=\"publisher_id_column\",\n     )\n+    updated = models.DateTimeField(auto_now=True)\ndiff --git a/tests/get_or_create/tests.py b/tests/get_or_create/tests.py\n--- a/tests/get_or_create/tests.py\n+++ b/tests/get_or_create/tests.py\n@@ -6,6 +6,7 @@\n from django.core.exceptions import FieldError\n from django.db import DatabaseError, IntegrityError, connection\n from django.test import TestCase, TransactionTestCase, skipUnlessDBFeature\n+from django.test.utils import CaptureQueriesContext\n from django.utils.functional import lazy\n \n from .models import (\n@@ -513,6 +514,31 @@ def test_mti_update_non_local_concrete_fields(self):\n         self.assertIs(created, False)\n         self.assertEqual(journalist.name, \"John\")\n \n+    def test_update_only_defaults_and_pre_save_fields_when_local_fields(self):\n+        publisher = Publisher.objects.create(name=\"Acme Publishing\")\n+        book = Book.objects.create(publisher=publisher, name=\"The Book of Ed & Fred\")\n+\n+        for defaults in [{\"publisher\": publisher}, {\"publisher_id\": publisher}]:\n+            with self.subTest(defaults=defaults):\n+                with CaptureQueriesContext(connection) as captured_queries:\n+                    book, created = Book.objects.update_or_create(\n+                        pk=book.pk,\n+                        defaults=defaults,\n+                    )\n+                self.assertIs(created, False)\n+                update_sqls = [\n+                    q[\"sql\"] for q in captured_queries if q[\"sql\"].startswith(\"UPDATE\")\n+                ]\n+                self.assertEqual(len(update_sqls), 1)\n+                update_sql = update_sqls[0]\n+                self.assertIsNotNone(update_sql)\n+                self.assertIn(\n+                    connection.ops.quote_name(\"publisher_id_column\"), update_sql\n+                )\n+                self.assertIn(connection.ops.quote_name(\"updated\"), update_sql)\n+                # Name should not be updated.\n+                self.assertNotIn(connection.ops.quote_name(\"name\"), update_sql)\n+\n \n class UpdateOrCreateTestsWithManualPKs(TestCase):\n     def test_create_with_duplicate_primary_key(self):\n",
  "problem_statement": "update_or_create should utilize update_fields on update\nDescription\n\t\nupdate_or_create should update only the fields in default on update, not all fields. While it is concurrency-safe to update the whole model since update_or_create fetches the object via select_for_update it is still unnecessary to re transmit all fields back to the database (probably results in more wal/binary logs written etc etc…).\nIn the end update_or_create (and most likely get_or_create) might be written in more efficient ways depending on the database backend -- but update_fields seems to be a rather low-hanging fruit.\n",
  "hints_text": "It could have a noticeable impact on PostgreSQL to not update these columns in some scenario as are they are likely to be indexed if matched against (Write Amplification problem)\n​PR\n​New PR\nTentatively removing the patch_needs_improvement flag, there is a comment about clarifying existing documentation but not sure if that needs to be included in this PR :)",
  "created_at": "2022-09-18T19:26:52Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_update_only_defaults_and_pre_save_fields_when_local_fields (get_or_create.tests.UpdateOrCreateTests)\"]",
  "PASS_TO_PASS": "[\"If an existing primary key is specified with different values for other\", \"If you specify an existing primary key, but different other fields,\", \"If all the attributes on a model have defaults, get_or_create() doesn't\", \"get_or_create should raise IntegrityErrors with the full traceback.\", \"The database connection is still usable after a DatabaseError in\", \"test_create_get_or_create (get_or_create.tests.GetOrCreateThroughManyToMany)\", \"test_get_get_or_create (get_or_create.tests.GetOrCreateThroughManyToMany)\", \"test_something (get_or_create.tests.GetOrCreateThroughManyToMany)\", \"Regression test for #15117. Requires a TransactionTestCase on\", \"Callables in `defaults` are evaluated if the instance is created.\", \"test_callable_defaults_not_called (get_or_create.tests.GetOrCreateTests)\", \"If you have a field named defaults and want to use it as an exact\", \"`defaults` aren't evaluated if the instance isn't created.\", \"If you don't specify a value or default value for all required\", \"test_get_or_create_method_with_create (get_or_create.tests.GetOrCreateTests)\", \"test_get_or_create_method_with_get (get_or_create.tests.GetOrCreateTests)\", \"test_get_or_create_on_related_manager (get_or_create.tests.GetOrCreateTests)\", \"If we execute the exact same statement twice, the second time,\", \"Using a property with a setter implemented is allowed.\", \"Using the pk property of a model is allowed.\", \"test_get_or_create_with_invalid_defaults (get_or_create.tests.InvalidCreateArgumentsTests)\", \"test_get_or_create_with_invalid_kwargs (get_or_create.tests.InvalidCreateArgumentsTests)\", \"test_multiple_invalid_fields (get_or_create.tests.InvalidCreateArgumentsTests)\", \"test_property_attribute_without_setter_defaults (get_or_create.tests.InvalidCreateArgumentsTests)\", \"test_property_attribute_without_setter_kwargs (get_or_create.tests.InvalidCreateArgumentsTests)\", \"test_update_or_create_with_invalid_defaults (get_or_create.tests.InvalidCreateArgumentsTests)\", \"test_update_or_create_with_invalid_kwargs (get_or_create.tests.InvalidCreateArgumentsTests)\", \"test_create (get_or_create.tests.UpdateOrCreateTests)\", \"test_create_callable_default (get_or_create.tests.UpdateOrCreateTests)\", \"test_create_twice (get_or_create.tests.UpdateOrCreateTests)\", \"Should be able to use update_or_create from the m2m related manager to\", \"Should be able to use update_or_create from the related manager to\", \"update_or_create should raise IntegrityErrors with the full traceback.\", \"test_mti_update_non_local_concrete_fields (get_or_create.tests.UpdateOrCreateTests)\", \"test_update (get_or_create.tests.UpdateOrCreateTests)\", \"test_update_callable_default (get_or_create.tests.UpdateOrCreateTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.746981",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}