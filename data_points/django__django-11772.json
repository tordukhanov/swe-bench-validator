{
  "repo": "django/django",
  "instance_id": "django__django-11772",
  "base_commit": "6c9778a58e4f680db180d4cc9dc5639d2ec1b40c",
  "patch": "diff --git a/django/core/cache/utils.py b/django/core/cache/utils.py\n--- a/django/core/cache/utils.py\n+++ b/django/core/cache/utils.py\n@@ -1,12 +1,12 @@\n import hashlib\n-from urllib.parse import quote\n \n TEMPLATE_FRAGMENT_KEY_TEMPLATE = 'template.cache.%s.%s'\n \n \n def make_template_fragment_key(fragment_name, vary_on=None):\n-    if vary_on is None:\n-        vary_on = ()\n-    key = ':'.join(quote(str(var)) for var in vary_on)\n-    args = hashlib.md5(key.encode())\n-    return TEMPLATE_FRAGMENT_KEY_TEMPLATE % (fragment_name, args.hexdigest())\n+    hasher = hashlib.md5()\n+    if vary_on is not None:\n+        for arg in vary_on:\n+            hasher.update(str(arg).encode())\n+            hasher.update(b':')\n+    return TEMPLATE_FRAGMENT_KEY_TEMPLATE % (fragment_name, hasher.hexdigest())\n",
  "test_patch": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -2306,15 +2306,27 @@ def test_without_vary_on(self):\n \n     def test_with_one_vary_on(self):\n         key = make_template_fragment_key('foo', ['abc'])\n-        self.assertEqual(key, 'template.cache.foo.900150983cd24fb0d6963f7d28e17f72')\n+        self.assertEqual(key, 'template.cache.foo.493e283d571a73056196f1a68efd0f66')\n \n     def test_with_many_vary_on(self):\n         key = make_template_fragment_key('bar', ['abc', 'def'])\n-        self.assertEqual(key, 'template.cache.bar.4b35f12ab03cec09beec4c21b2d2fa88')\n+        self.assertEqual(key, 'template.cache.bar.17c1a507a0cb58384f4c639067a93520')\n \n     def test_proper_escaping(self):\n         key = make_template_fragment_key('spam', ['abc:def%'])\n-        self.assertEqual(key, 'template.cache.spam.f27688177baec990cdf3fbd9d9c3f469')\n+        self.assertEqual(key, 'template.cache.spam.06c8ae8e8c430b69fb0a6443504153dc')\n+\n+    def test_with_ints_vary_on(self):\n+        key = make_template_fragment_key('foo', [1, 2, 3, 4, 5])\n+        self.assertEqual(key, 'template.cache.foo.7ae8fd2e0d25d651c683bdeebdb29461')\n+\n+    def test_with_unicode_vary_on(self):\n+        key = make_template_fragment_key('foo', ['42Âº', 'ðŸ˜€'])\n+        self.assertEqual(key, 'template.cache.foo.7ced1c94e543668590ba39b3c08b0237')\n+\n+    def test_long_vary_on(self):\n+        key = make_template_fragment_key('foo', ['x' * 10000])\n+        self.assertEqual(key, 'template.cache.foo.3670b349b5124aa56bdb50678b02b23a')\n \n \n class CacheHandlerTest(SimpleTestCase):\n",
  "problem_statement": "Template Cache \"make_template_fragment_key\" function speed up + simplify (also discussing switch to alternate hashes)\nDescription\n\t \n\t\t(last modified by Daniel)\n\t \nThe make_template_fragment_key function in django.core.cache.utils has the following (minor) issues:\nUsing urllib.quote for vary_on args, is not needed any more - it was originally added to make the unhashed strings safe to send to memcached and similar restricted systems. But since the value is hashed, this is now adding nothing. (See â€‹https://github.com/django/django/commit/ebc1325721e43808cef4334edaffc23a43f86614#diff-702b69be0100a594fd6fea1e4ab2feb1).\nUse of the MD5 hashing function is disallowed on certain (odd) systems, not being FIPS compliant. See (â€‹https://github.com/django/django/pull/10605).\nCreates a string of all joined vary_on args to send to the hashing function, rather than using the hashlib .update() method.\nHere is a version solving these, switching to SHA256, and speeding up the function quite a bit:\nâ€‹https://github.com/danthedeckie/django/tree/simplified_make_template_fragment_key\nAnd PR: â€‹https://github.com/django/django/pull/11772\nAnd here's the repo showing performance improvement:\nâ€‹https://github.com/danthedeckie/make_template_fragment_key_test\nWhich seems to be faster in every case.\nThe downside of this is that the cache key is now different from before. The tests have been updated to the new values.\nThere are other cache key generating functions used in other places which use MD5 still - if switching to SHA256 it would make sense to me to change those at the same time, meaning only one time invalidating keys on upgrade.\nThoughts?\n",
  "hints_text": "",
  "created_at": "2019-09-11T21:55:19Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_long_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_proper_escaping (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_ints_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_many_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_one_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_unicode_vary_on (cache.tests.TestMakeTemplateFragmentKey)\"]",
  "PASS_TO_PASS": "[\"Nonexistent cache keys return as None/default.\", \"set_many() returns an empty list when all keys are inserted.\", \"If None is cached, get() returns it instead of the default.\", \"test_without_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_per_thread (cache.tests.CacheHandlerTest)\", \"test_same_instance (cache.tests.CacheHandlerTest)\", \"test_head_caches_correctly (cache.tests.CacheHEADTest)\", \"test_head_with_cached_get (cache.tests.CacheHEADTest)\", \"Memory caches that have the TIMEOUT parameter set to `None` in the\", \"Memory caches that have the TIMEOUT parameter set to `None` will set\", \"Caches that have the TIMEOUT parameter undefined in the default\", \"Memory caches that have the TIMEOUT parameter unset will set cache\", \"The default expiration time of a cache key is 5 minutes.\", \"test_cache_key_varies_by_url (cache.tests.PrefixedCacheUtils)\", \"test_get_cache_key (cache.tests.PrefixedCacheUtils)\", \"test_get_cache_key_with_query (cache.tests.PrefixedCacheUtils)\", \"test_learn_cache_key (cache.tests.PrefixedCacheUtils)\", \"test_patch_cache_control (cache.tests.PrefixedCacheUtils)\", \"test_patch_vary_headers (cache.tests.PrefixedCacheUtils)\", \"test_cache_key_varies_by_url (cache.tests.CacheUtils)\", \"test_get_cache_key (cache.tests.CacheUtils)\", \"test_get_cache_key_with_query (cache.tests.CacheUtils)\", \"test_learn_cache_key (cache.tests.CacheUtils)\", \"test_patch_cache_control (cache.tests.CacheUtils)\", \"test_patch_vary_headers (cache.tests.CacheUtils)\", \"test_createcachetable_observes_database_router (cache.tests.CreateCacheTableForDBCacheTests)\", \"test_close (cache.tests.CacheClosingTests)\", \"test_custom_key_validation (cache.tests.CustomCacheKeyValidationTests)\", \"test_get_cache_key (cache.tests.TestWithTemplateResponse)\", \"test_get_cache_key_with_query (cache.tests.TestWithTemplateResponse)\", \"test_patch_vary_headers (cache.tests.TestWithTemplateResponse)\", \"test_cache_key_i18n_formatting (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_timezone (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_translation (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_translation_accept_language (cache.tests.CacheI18nTest)\", \"test_cache_key_no_i18n (cache.tests.CacheI18nTest)\", \"test_middleware (cache.tests.CacheI18nTest)\", \"test_middleware_doesnt_cache_streaming_response (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_formatting (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_timezone (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_translation (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_translation_accept_language (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_no_i18n (cache.tests.PrefixedCacheI18nTest)\", \"test_middleware (cache.tests.PrefixedCacheI18nTest)\", \"test_middleware_doesnt_cache_streaming_response (cache.tests.PrefixedCacheI18nTest)\", \"test_304_response_has_http_caching_headers_but_not_cached (cache.tests.CacheMiddlewareTest)\", \"Responses with 'Cache-Control: private' are not cached.\", \"test_constructor (cache.tests.CacheMiddlewareTest)\", \"test_middleware (cache.tests.CacheMiddlewareTest)\", \"test_sensitive_cookie_not_cached (cache.tests.CacheMiddlewareTest)\", \"test_view_decorator (cache.tests.CacheMiddlewareTest)\", \"Add doesn't do anything in dummy cache backend\", \"clear does nothing for the dummy cache backend\", \"All data types are ignored equally by the dummy cache\", \"Dummy cache values can't be decremented\", \"Dummy cache versions can't be decremented\", \"Cache deletion is transparently ignored on the dummy cache backend\", \"delete_many does nothing for the dummy cache backend\", \"test_delete_many_invalid_key (cache.tests.DummyCacheTests)\", \"Expiration has no effect on the dummy cache\", \"get_many returns nothing for the dummy cache backend\", \"test_get_many_invalid_key (cache.tests.DummyCacheTests)\", \"test_get_or_set (cache.tests.DummyCacheTests)\", \"test_get_or_set_callable (cache.tests.DummyCacheTests)\", \"The has_key method doesn't ever return True for the dummy cache backend\", \"The in operator doesn't ever return True for the dummy cache backend\", \"Dummy cache values can't be incremented\", \"Dummy cache versions can't be incremented\", \"Nonexistent keys aren't found in the dummy cache backend\", \"set_many does nothing for the dummy cache backend\", \"test_set_many_invalid_key (cache.tests.DummyCacheTests)\", \"Dummy cache backend ignores cache set calls\", \"Dummy cache can't do touch().\", \"Unicode values are ignored by the dummy cache\", \"test_add (cache.tests.LocMemCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.LocMemCacheTests)\", \"test_binary_string (cache.tests.LocMemCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.LocMemCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_add (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_delete (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_get_set (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_has_key (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.LocMemCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.LocMemCacheTests)\", \"test_clear (cache.tests.LocMemCacheTests)\", \"test_close (cache.tests.LocMemCacheTests)\", \"test_cull (cache.tests.LocMemCacheTests)\", \"test_custom_key_func (cache.tests.LocMemCacheTests)\", \"test_data_types (cache.tests.LocMemCacheTests)\", \"test_decr (cache.tests.LocMemCacheTests)\", \"test_decr_version (cache.tests.LocMemCacheTests)\", \"test_delete (cache.tests.LocMemCacheTests)\", \"test_delete_many (cache.tests.LocMemCacheTests)\", \"test_expiration (cache.tests.LocMemCacheTests)\", \"test_float_timeout (cache.tests.LocMemCacheTests)\", \"test_forever_timeout (cache.tests.LocMemCacheTests)\", \"test_get_many (cache.tests.LocMemCacheTests)\", \"test_get_or_set (cache.tests.LocMemCacheTests)\", \"test_get_or_set_callable (cache.tests.LocMemCacheTests)\", \"test_get_or_set_callable_returning_none (cache.tests.LocMemCacheTests)\", \"test_get_or_set_racing (cache.tests.LocMemCacheTests)\", \"test_get_or_set_version (cache.tests.LocMemCacheTests)\", \"test_has_key (cache.tests.LocMemCacheTests)\", \"test_in (cache.tests.LocMemCacheTests)\", \"test_incr (cache.tests.LocMemCacheTests)\", \"incr/decr does not modify expiry time (matches memcached behavior)\", \"test_incr_version (cache.tests.LocMemCacheTests)\", \"test_invalid_key_characters (cache.tests.LocMemCacheTests)\", \"test_invalid_key_length (cache.tests.LocMemCacheTests)\", \"#20613/#18541 -- Ensures pickling is done outside of the lock.\", \"test_long_timeout (cache.tests.LocMemCacheTests)\", \"get() moves cache keys.\", \"incr() moves cache keys.\", \"set() moves cache keys.\", \"Multiple locmem caches are isolated\", \"test_prefix (cache.tests.LocMemCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.LocMemCacheTests)\", \"test_set_many (cache.tests.LocMemCacheTests)\", \"test_set_many_expiration (cache.tests.LocMemCacheTests)\", \"test_simple (cache.tests.LocMemCacheTests)\", \"test_touch (cache.tests.LocMemCacheTests)\", \"test_unicode (cache.tests.LocMemCacheTests)\", \"test_zero_cull (cache.tests.LocMemCacheTests)\", \"test_zero_timeout (cache.tests.LocMemCacheTests)\", \"test_add (cache.tests.FileBasedCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.FileBasedCacheTests)\", \"test_binary_string (cache.tests.FileBasedCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.FileBasedCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_add (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_delete (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_get_set (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_has_key (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.FileBasedCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.FileBasedCacheTests)\", \"test_clear (cache.tests.FileBasedCacheTests)\", \"test_clear_does_not_remove_cache_dir (cache.tests.FileBasedCacheTests)\", \"test_close (cache.tests.FileBasedCacheTests)\", \"test_creates_cache_dir_if_nonexistent (cache.tests.FileBasedCacheTests)\", \"test_cull (cache.tests.FileBasedCacheTests)\", \"test_custom_key_func (cache.tests.FileBasedCacheTests)\", \"test_data_types (cache.tests.FileBasedCacheTests)\", \"test_decr (cache.tests.FileBasedCacheTests)\", \"test_decr_version (cache.tests.FileBasedCacheTests)\", \"test_delete (cache.tests.FileBasedCacheTests)\", \"test_delete_many (cache.tests.FileBasedCacheTests)\", \"test_empty_cache_file_considered_expired (cache.tests.FileBasedCacheTests)\", \"test_expiration (cache.tests.FileBasedCacheTests)\", \"test_float_timeout (cache.tests.FileBasedCacheTests)\", \"test_forever_timeout (cache.tests.FileBasedCacheTests)\", \"test_get_does_not_ignore_non_filenotfound_exceptions (cache.tests.FileBasedCacheTests)\", \"test_get_ignores_enoent (cache.tests.FileBasedCacheTests)\", \"test_get_many (cache.tests.FileBasedCacheTests)\", \"test_get_or_set (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_callable (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_callable_returning_none (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_racing (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_version (cache.tests.FileBasedCacheTests)\", \"test_has_key (cache.tests.FileBasedCacheTests)\", \"test_ignores_non_cache_files (cache.tests.FileBasedCacheTests)\", \"test_in (cache.tests.FileBasedCacheTests)\", \"test_incr (cache.tests.FileBasedCacheTests)\", \"test_incr_version (cache.tests.FileBasedCacheTests)\", \"test_invalid_key_characters (cache.tests.FileBasedCacheTests)\", \"test_invalid_key_length (cache.tests.FileBasedCacheTests)\", \"test_long_timeout (cache.tests.FileBasedCacheTests)\", \"test_prefix (cache.tests.FileBasedCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.FileBasedCacheTests)\", \"test_set_many (cache.tests.FileBasedCacheTests)\", \"test_set_many_expiration (cache.tests.FileBasedCacheTests)\", \"test_simple (cache.tests.FileBasedCacheTests)\", \"test_touch (cache.tests.FileBasedCacheTests)\", \"test_unicode (cache.tests.FileBasedCacheTests)\", \"test_zero_cull (cache.tests.FileBasedCacheTests)\", \"test_zero_timeout (cache.tests.FileBasedCacheTests)\", \"test_add (cache.tests.DBCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.DBCacheTests)\", \"test_binary_string (cache.tests.DBCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.DBCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheTests)\", \"test_cache_versioning_add (cache.tests.DBCacheTests)\", \"test_cache_versioning_delete (cache.tests.DBCacheTests)\", \"test_cache_versioning_get_set (cache.tests.DBCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.DBCacheTests)\", \"test_cache_versioning_has_key (cache.tests.DBCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.DBCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.DBCacheTests)\", \"test_clear (cache.tests.DBCacheTests)\", \"test_close (cache.tests.DBCacheTests)\", \"test_createcachetable_dry_run_mode (cache.tests.DBCacheTests)\", \"test_createcachetable_with_table_argument (cache.tests.DBCacheTests)\", \"test_cull (cache.tests.DBCacheTests)\", \"test_custom_key_func (cache.tests.DBCacheTests)\", \"test_data_types (cache.tests.DBCacheTests)\", \"test_decr (cache.tests.DBCacheTests)\", \"test_decr_version (cache.tests.DBCacheTests)\", \"test_delete (cache.tests.DBCacheTests)\", \"test_delete_many (cache.tests.DBCacheTests)\", \"test_delete_many_num_queries (cache.tests.DBCacheTests)\", \"test_expiration (cache.tests.DBCacheTests)\", \"test_float_timeout (cache.tests.DBCacheTests)\", \"test_forever_timeout (cache.tests.DBCacheTests)\", \"test_get_many (cache.tests.DBCacheTests)\", \"test_get_many_num_queries (cache.tests.DBCacheTests)\", \"test_get_or_set (cache.tests.DBCacheTests)\", \"test_get_or_set_callable (cache.tests.DBCacheTests)\", \"test_get_or_set_callable_returning_none (cache.tests.DBCacheTests)\", \"test_get_or_set_racing (cache.tests.DBCacheTests)\", \"test_get_or_set_version (cache.tests.DBCacheTests)\", \"test_has_key (cache.tests.DBCacheTests)\", \"test_in (cache.tests.DBCacheTests)\", \"test_incr (cache.tests.DBCacheTests)\", \"test_incr_version (cache.tests.DBCacheTests)\", \"test_invalid_key_characters (cache.tests.DBCacheTests)\", \"test_invalid_key_length (cache.tests.DBCacheTests)\", \"test_long_timeout (cache.tests.DBCacheTests)\", \"test_prefix (cache.tests.DBCacheTests)\", \"test_second_call_doesnt_crash (cache.tests.DBCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.DBCacheTests)\", \"test_set_many (cache.tests.DBCacheTests)\", \"test_set_many_expiration (cache.tests.DBCacheTests)\", \"test_simple (cache.tests.DBCacheTests)\", \"test_touch (cache.tests.DBCacheTests)\", \"test_unicode (cache.tests.DBCacheTests)\", \"test_zero_cull (cache.tests.DBCacheTests)\", \"test_zero_timeout (cache.tests.DBCacheTests)\", \"test_add (cache.tests.DBCacheWithTimeZoneTests)\", \"test_add_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)\", \"test_binary_string (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_read_for_model_instance (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_add (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_delete (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_get_set (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_get_set_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_has_key (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_incr_decr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_write_unpicklable_object (cache.tests.DBCacheWithTimeZoneTests)\", \"test_clear (cache.tests.DBCacheWithTimeZoneTests)\", \"test_close (cache.tests.DBCacheWithTimeZoneTests)\", \"test_createcachetable_dry_run_mode (cache.tests.DBCacheWithTimeZoneTests)\", \"test_createcachetable_with_table_argument (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cull (cache.tests.DBCacheWithTimeZoneTests)\", \"test_custom_key_func (cache.tests.DBCacheWithTimeZoneTests)\", \"test_data_types (cache.tests.DBCacheWithTimeZoneTests)\", \"test_decr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_decr_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)\", \"test_expiration (cache.tests.DBCacheWithTimeZoneTests)\", \"test_float_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_forever_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_callable (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_callable_returning_none (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_racing (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_has_key (cache.tests.DBCacheWithTimeZoneTests)\", \"test_in (cache.tests.DBCacheWithTimeZoneTests)\", \"test_incr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_incr_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_invalid_key_characters (cache.tests.DBCacheWithTimeZoneTests)\", \"test_invalid_key_length (cache.tests.DBCacheWithTimeZoneTests)\", \"test_long_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_prefix (cache.tests.DBCacheWithTimeZoneTests)\", \"test_second_call_doesnt_crash (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_many_expiration (cache.tests.DBCacheWithTimeZoneTests)\", \"test_simple (cache.tests.DBCacheWithTimeZoneTests)\", \"test_touch (cache.tests.DBCacheWithTimeZoneTests)\", \"test_unicode (cache.tests.DBCacheWithTimeZoneTests)\", \"test_zero_cull (cache.tests.DBCacheWithTimeZoneTests)\", \"test_zero_timeout (cache.tests.DBCacheWithTimeZoneTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.583987",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}