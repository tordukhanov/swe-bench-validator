{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-6517",
  "base_commit": "58c4f370c7395d9d4e202ba83623768abcc3ac24",
  "patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -44,6 +44,8 @@\n \n def _confidence_transformer(value: str) -> Sequence[str]:\n     \"\"\"Transforms a comma separated string of confidence values.\"\"\"\n+    if not value:\n+        return interfaces.CONFIDENCE_LEVEL_NAMES\n     values = pylint_utils._check_csv(value)\n     for confidence in values:\n         if confidence not in interfaces.CONFIDENCE_LEVEL_NAMES:\n",
  "test_patch": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -10,6 +10,7 @@\n import pytest\n from pytest import CaptureFixture\n \n+from pylint.interfaces import CONFIDENCE_LEVEL_NAMES\n from pylint.lint import Run as LintRun\n from pylint.testutils._run import _Run as Run\n from pylint.testutils.configuration_test import run_using_a_configuration_file\n@@ -88,6 +89,12 @@ def test_unknown_confidence(capsys: CaptureFixture) -> None:\n     assert \"argument --confidence: UNKNOWN_CONFIG should be in\" in output.err\n \n \n+def test_empty_confidence() -> None:\n+    \"\"\"An empty confidence value indicates all errors should be emitted.\"\"\"\n+    r = Run([str(EMPTY_MODULE), \"--confidence=\"], exit=False)\n+    assert r.linter.config.confidence == CONFIDENCE_LEVEL_NAMES\n+\n+\n def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown yes/no value.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "problem_statement": "Pylint runs unexpectedly pass if `confidence=` in pylintrc\n### Bug description\r\n\r\nRuns unexpectedly pass in 2.14 if a pylintrc file has `confidence=`.\r\n\r\n(Default pylintrc files have `confidence=`. `pylint`'s own config was fixed in #6140 to comment it out, but this might bite existing projects.)\r\n\r\n```python\r\nimport time\r\n```\r\n\r\n### Configuration\r\n\r\n```ini\r\n[MESSAGES CONTROL]\r\nconfidence=\r\n```\r\n\r\n\r\n### Command used\r\n\r\n```shell\r\npython3 -m pylint a.py --enable=all\r\n```\r\n\r\n\r\n### Pylint output\r\n\r\n```shell\r\n--------------------------------------------------------------------\r\nYour code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\r\n```\r\n\r\n\r\n### Expected behavior\r\n```\r\n************* Module a\r\n\r\na.py:2:0: C0305: Trailing newlines (trailing-newlines)\r\na.py:1:0: C0114: Missing module docstring (missing-module-docstring)\r\na.py:1:0: W0611: Unused import time (unused-import)\r\n\r\n--------------------------------------------------------------------\r\nYour code has been rated at 0.00/10 (previous run: 10.00/10, -10.00)\r\n```\r\n### Pylint version\r\n\r\n```shell\r\npylint 2.14.0-dev0\r\nastroid 2.12.0-dev0\r\nPython 3.10.2 (v3.10.2:a58ebcc701, Jan 13 2022, 14:50:16) [Clang 13.0.0 (clang-1300.0.29.30)]\r\n```\r\n\r\n\r\n### OS / Environment\r\n\r\n_No response_\r\n\r\n### Additional dependencies\r\n\r\n_No response_\n",
  "hints_text": "The documentation of the option says \"Leave empty to show all.\"\n```diff\r\ndiff --git a/pylint/config/argument.py b/pylint/config/argument.py\r\nindex 8eb6417dc..bbaa7d0d8 100644\r\n--- a/pylint/config/argument.py\r\n+++ b/pylint/config/argument.py\r\n@@ -44,6 +44,8 @@ _ArgumentTypes = Union[\r\n \r\n def _confidence_transformer(value: str) -> Sequence[str]:\r\n     \"\"\"Transforms a comma separated string of confidence values.\"\"\"\r\n+    if not value:\r\n+        return interfaces.CONFIDENCE_LEVEL_NAMES\r\n     values = pylint_utils._check_csv(value)\r\n     for confidence in values:\r\n         if confidence not in interfaces.CONFIDENCE_LEVEL_NAMES:\r\n```\r\n\r\nThis will fix it.\r\n\r\nI do wonder though: is this worth breaking? Probably not, but it is counter-intuitive and against all other config options behaviour to let an empty option mean something different. `confidence` should contain all confidence levels you want to show, so if it is empty you want none. Seems like a bad design choice when we added this, perhaps we can still fix it?...\nThanks for the speedy reply! I don't think we should bother to change how the option works. It's clearly documented, so that's something!\nHm okay. Would you be willing to prepare a PR with the patch? I had intended not to spend too much time on `pylint` this evening ðŸ˜„ ",
  "created_at": "2022-05-05T22:04:31Z",
  "version": "2.14",
  "FAIL_TO_PASS": "[\"tests/config/test_config.py::test_empty_confidence\"]",
  "PASS_TO_PASS": "[\"tests/config/test_config.py::test_can_read_toml_env_variable\", \"tests/config/test_config.py::test_unknown_message_id\", \"tests/config/test_config.py::test_unknown_option_name\", \"tests/config/test_config.py::test_unknown_short_option_name\", \"tests/config/test_config.py::test_unknown_confidence\", \"tests/config/test_config.py::test_unknown_yes_no\", \"tests/config/test_config.py::test_unknown_py_version\", \"tests/config/test_config.py::test_short_verbose\"]",
  "environment_setup_commit": "680edebc686cad664bbed934a490aeafa775f163",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.913518",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}