{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9234",
  "base_commit": "f0fef96906d80d89e290a780767a92ba85977733",
  "patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -272,8 +272,12 @@ def process_result(self, result: CheckResult) -> None:\n             except KeyError:\n                 text, color = ('with unknown code', purple)\n             linkstat['text'] = text\n-            logger.info(color('redirect  ') + result.uri +\n-                        color(' - ' + text + ' to ' + result.message))\n+            if self.config.linkcheck_allowed_redirects:\n+                logger.warning('redirect  ' + result.uri + ' - ' + text + ' to ' +\n+                               result.message, location=(filename, result.lineno))\n+            else:\n+                logger.info(color('redirect  ') + result.uri +\n+                            color(' - ' + text + ' to ' + result.message))\n             self.write_entry('redirected ' + text, result.docname, filename,\n                              result.lineno, result.uri + ' to ' + result.message)\n         else:\n@@ -496,13 +500,23 @@ def check_uri() -> Tuple[str, str, int]:\n                 new_url = response.url\n                 if anchor:\n                     new_url += '#' + anchor\n-                # history contains any redirects, get last\n-                if response.history:\n+\n+                if allowed_redirect(req_url, new_url):\n+                    return 'working', '', 0\n+                elif response.history:\n+                    # history contains any redirects, get last\n                     code = response.history[-1].status_code\n                     return 'redirected', new_url, code\n                 else:\n                     return 'redirected', new_url, 0\n \n+        def allowed_redirect(url: str, new_url: str) -> bool:\n+            for from_url, to_url in self.config.linkcheck_allowed_redirects.items():\n+                if from_url.match(url) and to_url.match(new_url):\n+                    return True\n+\n+            return False\n+\n         def check(docname: str) -> Tuple[str, str, int]:\n             # check for various conditions without bothering the network\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'tel:')):\n@@ -667,11 +681,25 @@ def rewrite_github_anchor(app: Sphinx, uri: str) -> Optional[str]:\n     return None\n \n \n+def compile_linkcheck_allowed_redirects(app: Sphinx, config: Config) -> None:\n+    \"\"\"Compile patterns in linkcheck_allowed_redirects to the regexp objects.\"\"\"\n+    for url, pattern in list(app.config.linkcheck_allowed_redirects.items()):\n+        try:\n+            app.config.linkcheck_allowed_redirects[re.compile(url)] = re.compile(pattern)\n+        except re.error as exc:\n+            logger.warning(__('Failed to compile regex in linkcheck_allowed_redirects: %r %s'),\n+                           exc.pattern, exc.msg)\n+        finally:\n+            # Remove the original regexp-string\n+            app.config.linkcheck_allowed_redirects.pop(url)\n+\n+\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.add_builder(CheckExternalLinksBuilder)\n     app.add_post_transform(HyperlinkCollector)\n \n     app.add_config_value('linkcheck_ignore', [], None)\n+    app.add_config_value('linkcheck_allowed_redirects', {}, None)\n     app.add_config_value('linkcheck_auth', [], None)\n     app.add_config_value('linkcheck_request_headers', {}, None)\n     app.add_config_value('linkcheck_retries', 1, None)\n@@ -684,6 +712,8 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n     app.add_config_value('linkcheck_rate_limit_timeout', 300.0, None)\n \n     app.add_event('linkcheck-process-uri')\n+\n+    app.connect('config-inited', compile_linkcheck_allowed_redirects, priority=800)\n     app.connect('linkcheck-process-uri', rewrite_github_anchor)\n \n     return {\n",
  "test_patch": "diff --git a/tests/roots/test-linkcheck-localserver-warn-redirects/conf.py b/tests/roots/test-linkcheck-localserver-warn-redirects/conf.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-linkcheck-localserver-warn-redirects/conf.py\n@@ -0,0 +1 @@\n+exclude_patterns = ['_build']\ndiff --git a/tests/roots/test-linkcheck-localserver-warn-redirects/index.rst b/tests/roots/test-linkcheck-localserver-warn-redirects/index.rst\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-linkcheck-localserver-warn-redirects/index.rst\n@@ -0,0 +1,2 @@\n+`local server1 <http://localhost:7777/path1>`_\n+`local server2 <http://localhost:7777/path2>`_\ndiff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -23,6 +23,7 @@\n import requests\n \n from sphinx.builders.linkcheck import HyperlinkAvailabilityCheckWorker, RateLimit\n+from sphinx.testing.util import strip_escseq\n from sphinx.util.console import strip_colors\n \n from .utils import CERT_FILE, http_server, https_server\n@@ -254,7 +255,7 @@ def log_date_time_string(self):\n \n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n-def test_follows_redirects_on_HEAD(app, capsys):\n+def test_follows_redirects_on_HEAD(app, capsys, warning):\n     with http_server(make_redirect_handler(support_head=True)):\n         app.build()\n     stdout, stderr = capsys.readouterr()\n@@ -269,10 +270,11 @@ def test_follows_redirects_on_HEAD(app, capsys):\n         127.0.0.1 - - [] \"HEAD /?redirected=1 HTTP/1.1\" 204 -\n         \"\"\"\n     )\n+    assert warning.getvalue() == ''\n \n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n-def test_follows_redirects_on_GET(app, capsys):\n+def test_follows_redirects_on_GET(app, capsys, warning):\n     with http_server(make_redirect_handler(support_head=False)):\n         app.build()\n     stdout, stderr = capsys.readouterr()\n@@ -288,6 +290,28 @@ def test_follows_redirects_on_GET(app, capsys):\n         127.0.0.1 - - [] \"GET /?redirected=1 HTTP/1.1\" 204 -\n         \"\"\"\n     )\n+    assert warning.getvalue() == ''\n+\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver-warn-redirects',\n+                    freshenv=True, confoverrides={\n+                        'linkcheck_allowed_redirects': {'http://localhost:7777/.*1': '.*'}\n+                    })\n+def test_linkcheck_allowed_redirects(app, warning):\n+    with http_server(make_redirect_handler(support_head=False)):\n+        app.build()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        records = [json.loads(l) for l in fp.readlines()]\n+\n+    assert len(records) == 2\n+    result = {r[\"uri\"]: r[\"status\"] for r in records}\n+    assert result[\"http://localhost:7777/path1\"] == \"working\"\n+    assert result[\"http://localhost:7777/path2\"] == \"redirected\"\n+\n+    assert (\"index.rst.rst:1: WARNING: redirect  http://localhost:7777/path2 - with Found to \"\n+            \"http://localhost:7777/?redirected=1\\n\" in strip_escseq(warning.getvalue()))\n+    assert len(warning.getvalue().splitlines()) == 1\n \n \n class OKHandler(http.server.BaseHTTPRequestHandler):\n",
  "problem_statement": "Link checker should be able to prohibit unknown redirects\n**Is your feature request related to a problem? Please describe.**\r\nA lot of links become stale or move. Good websites will provide redirects to the correct new location or return an HTTP error code. Bad websites will redirect to an unrelated page or the root of the website.\r\n\r\nPreventing all redirects does not allow links to URLs like https://www.sphinx-doc.org/ which redirects to https://www.sphinx-doc.org/en/master/. It needs to be possible to allow these redirects but disallow others.\r\n\r\n**Describe the solution you'd like**\r\nIt should be possible to prohibit unknown redirects by listing all of the allowed redirects as pairs of URLs.\r\n\r\n**Describe alternatives you've considered**\r\nPost-process `linkcheck/output.txt` by removing filenames and line numbers then sorting it and comparing it with known good output.\r\n\r\n**Additional context**\r\nA link to https://blogs.windows.com/buildingapps/2016/12/02/symlinks-windows-10/ (which used to work) now redirects to https://blogs.windows.com/windowsdeveloper/. Linkcheck allows this but the original link is not valid and needs to be updated to the article's new URL of https://blogs.windows.com/windowsdeveloper/2016/12/02/symlinks-windows-10/.\r\n\r\nLinkcheck should be able to report an error for this redirect.\r\n\n",
  "hints_text": "If one can tell in advance where they are redirected, might as well use the direct link in the docs and skip the redirect.\r\nPerhaps a step forward would be a new setting to treat redirects as errors?\nI provided a reason why I want to be able to link to a redirect, unless you think the base URL of sphinx itself should not be linkable?\nI misread the issue originally, I was hoping all redirects could be replaced by the final version of the URL, but thatâ€™s not true.\r\nIn the provided example, sphinx-doc.org could redirect to a different language based on your language preferences. Replacing the link with the final version would force users to visit the English version of the page.\r\n\r\nWhat do you think of a mapping in the config: `{\"original_URL\": final_url}`, perhaps named `linkcheck_validate_redirects`?\r\nThe behavior upon redirect would be:\r\n- original URL present in the mapping, verify the final URL matches the value from `linkcheck_validate_redirects`,\r\n- original URL not present, mark link as broken.\nFor the sphinx-doc.org case I would not expect to specify the exact final URL because I don't care where it redirects to when I link to `/`. (It may decide that CI in another country should get a different language by default.)\r\n\r\nIf `final_url` could be `None` to allow any final URL, that would appear to work but I'd really want it to redirect within the same domain. If https://www.sphinx-doc.org/ redirects to https://this-domain-is-for-sale.example.com/sphinx-doc.org then the link is broken.\r\n\r\nSo `final_url` could be `None`, a string or a regex.\r\n\r\n```\r\n{\"https://www.sphinx-doc.org/\": None}\r\n```\r\n\r\n```\r\n{\"https://www.sphinx-doc.org/\": \"https://www\\.sphinx-doc\\.org/en/master/\"}\r\n```\r\n\r\n```\r\nimport re\r\n{\"https://www.sphinx-doc.org/\": re.compile(r\"^https://www\\.sphinx-doc\\.org/.*$\")}\r\n```\r\n\r\nOf course, when you start allowing regex in the `final_url`you might want to allow regex in the `original_url` and group references:\r\n\r\n```\r\nimport re\r\n{re.compile(\"^https://sphinx-doc.org/(.*)$\"): re.compile(r\"^https://(www\\.)?sphinx-doc\\.org/\\1$\")}\r\n```\r\n\r\nThere may be multiple conflicting mappings, if any one of them matches then the link is ok.\nThis is something I have just come across myself, and such a setting would be helpful to ignore the fact that a redirect happened - in other words, set the state as \"working\" instead of \"redirected\" as long as the target page is available.\r\n\r\nAnother example of a case where this would be helpful is wanting to ignore redirects in the case of documentation versions, e.g. `.../en/stable/` â†’ `.../en/3.2/`. In this case it is preferable to always link to the latest/stable version via a URL rewrite.\r\n\r\nI could see a configuration along the following lines (very much what @nomis has specified above):\r\n\r\n```python\r\n# Check that the link is \"working\" but don't flag as \"redirected\" unless the target doesn't match.\r\nlinkcheck_redirects_ignore = {\r\n    r'^https://([^/?#]+)/$': r'^https://\\1/(?:home|index)\\.html?$',\r\n    r'^https://(nodejs\\.org)/$', r'^https://\\1/[-a-z]+/$',\r\n    r'^https://(pip\\.pypa\\.io)/$', r'^https://\\1/[-a-z]+/stable/$',\r\n    r'^https://(www\\.sphinx-doc\\.org)/$', r'^https://\\1/[-a-z]+/master/$',\r\n    r'^https://(pytest\\.org)/$', r'^https://docs\\.\\1/[-a-z]+/\\d+\\.\\d+\\.x/$',\r\n    r'^https://github.com/([^/?#]+)/([^/?#])+/blob/(.*)$': r'https://github.com/\\1/\\2/tree/\\3$',\r\n    r'^https://([^/?#\\.]+)\\.readthedocs\\.io/$': r'^https://\\1\\.readthedocs\\.io/[-a-z]+/(?:master|latest|stable)/$',\r\n    r'^https://dev\\.mysql\\.com/doc/refman/': r'^https://dev\\.mysql\\.com/doc/refman/\\d+\\.\\d+/',\r\n    r'^https://docs\\.djangoproject\\.com/': r'^https://docs\\.djangoproject\\.com/[-a-z]+/\\d+\\.\\d+/',\r\n    r'^https://docs\\.djangoproject\\.com/([-a-z]+)/stable/': r'^https://docs\\.djangoproject\\.com/\\1/\\d+\\.\\d+/',\r\n}\r\n```",
  "created_at": "2021-05-15T17:28:42Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"tests/test_build_linkcheck.py::test_linkcheck_allowed_redirects\"]",
  "PASS_TO_PASS": "[\"tests/test_build_linkcheck.py::test_defaults_json\", \"tests/test_build_linkcheck.py::test_raises_for_invalid_status\", \"tests/test_build_linkcheck.py::test_auth_header_uses_first_match\", \"tests/test_build_linkcheck.py::test_auth_header_no_match\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers_no_slash\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers_default\", \"tests/test_build_linkcheck.py::test_follows_redirects_on_HEAD\", \"tests/test_build_linkcheck.py::test_follows_redirects_on_GET\", \"tests/test_build_linkcheck.py::test_invalid_ssl\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_fails\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_verify_false\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_cacerts\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_requests_env_var\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_nonexistent_cert_file\", \"tests/test_build_linkcheck.py::test_TooManyRedirects_on_HEAD\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_without_header\", \"tests/test_build_linkcheck.py::test_too_many_requests_user_timeout\", \"tests/test_build_linkcheck.py::test_limit_rate_default_sleep\", \"tests/test_build_linkcheck.py::test_limit_rate_user_max_delay\", \"tests/test_build_linkcheck.py::test_limit_rate_doubles_previous_wait_time\", \"tests/test_build_linkcheck.py::test_limit_rate_clips_wait_time_to_max_time\", \"tests/test_build_linkcheck.py::test_limit_rate_bails_out_after_waiting_max_time\", \"tests/test_build_linkcheck.py::test_get_after_head_raises_connection_error\"]",
  "environment_setup_commit": "9a2c3c4a1559e37e95fdee88c128bb116642c897",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.064481",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}