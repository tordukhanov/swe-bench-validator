{
  "repo": "django/django",
  "instance_id": "django__django-14140",
  "base_commit": "45814af6197cfd8f4dc72ee43b90ecde305a1d5a",
  "patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -84,14 +84,10 @@ def deconstruct(self):\n         path = '%s.%s' % (self.__class__.__module__, self.__class__.__name__)\n         if path.startswith('django.db.models.query_utils'):\n             path = path.replace('django.db.models.query_utils', 'django.db.models')\n-        args, kwargs = (), {}\n-        if len(self.children) == 1 and not isinstance(self.children[0], Q):\n-            child = self.children[0]\n-            kwargs = {child[0]: child[1]}\n-        else:\n-            args = tuple(self.children)\n-            if self.connector != self.default:\n-                kwargs = {'_connector': self.connector}\n+        args = tuple(self.children)\n+        kwargs = {}\n+        if self.connector != self.default:\n+            kwargs['_connector'] = self.connector\n         if self.negated:\n             kwargs['_negated'] = True\n         return path, args, kwargs\n",
  "test_patch": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -833,11 +833,21 @@ def test_boolean_expression_combined_with_empty_Q(self):\n             Q() & Exists(is_poc),\n             Exists(is_poc) | Q(),\n             Q() | Exists(is_poc),\n+            Q(Exists(is_poc)) & Q(),\n+            Q() & Q(Exists(is_poc)),\n+            Q(Exists(is_poc)) | Q(),\n+            Q() | Q(Exists(is_poc)),\n         ]\n         for conditions in tests:\n             with self.subTest(conditions):\n                 self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n \n+    def test_boolean_expression_in_Q(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        self.assertCountEqual(Employee.objects.filter(Q(Exists(is_poc))), [self.max])\n+\n \n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\ndiff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,6 +1,8 @@\n-from django.db.models import F, Q\n+from django.db.models import Exists, F, OuterRef, Q\n from django.test import SimpleTestCase\n \n+from .models import Tag\n+\n \n class QTests(SimpleTestCase):\n     def test_combine_and_empty(self):\n@@ -39,17 +41,14 @@ def test_deconstruct(self):\n         q = Q(price__gt=F('discounted_price'))\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(path, 'django.db.models.Q')\n-        self.assertEqual(args, ())\n-        self.assertEqual(kwargs, {'price__gt': F('discounted_price')})\n+        self.assertEqual(args, (('price__gt', F('discounted_price')),))\n+        self.assertEqual(kwargs, {})\n \n     def test_deconstruct_negated(self):\n         q = ~Q(price__gt=F('discounted_price'))\n         path, args, kwargs = q.deconstruct()\n-        self.assertEqual(args, ())\n-        self.assertEqual(kwargs, {\n-            'price__gt': F('discounted_price'),\n-            '_negated': True,\n-        })\n+        self.assertEqual(args, (('price__gt', F('discounted_price')),))\n+        self.assertEqual(kwargs, {'_negated': True})\n \n     def test_deconstruct_or(self):\n         q1 = Q(price__gt=F('discounted_price'))\n@@ -88,6 +87,13 @@ def test_deconstruct_nested(self):\n         self.assertEqual(args, (Q(price__gt=F('discounted_price')),))\n         self.assertEqual(kwargs, {})\n \n+    def test_deconstruct_boolean_expression(self):\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q = Q(Exists(tagged))\n+        _, args, kwargs = q.deconstruct()\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n+\n     def test_reconstruct(self):\n         q = Q(price__gt=F('discounted_price'))\n         path, args, kwargs = q.deconstruct()\ndiff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -172,6 +172,17 @@ def test_pickle_prefetch_related_with_m2m_and_objects_deletion(self):\n         m2ms = pickle.loads(pickle.dumps(m2ms))\n         self.assertSequenceEqual(m2ms, [m2m])\n \n+    def test_pickle_boolean_expression_in_Q__queryset(self):\n+        group = Group.objects.create(name='group')\n+        Event.objects.create(title='event', group=group)\n+        groups = Group.objects.filter(\n+            models.Q(models.Exists(\n+                Event.objects.filter(group_id=models.OuterRef('id')),\n+            )),\n+        )\n+        groups2 = pickle.loads(pickle.dumps(groups))\n+        self.assertSequenceEqual(groups2, [group])\n+\n     def test_pickle_exists_queryset_still_usable(self):\n         group = Group.objects.create(name='group')\n         Event.objects.create(title='event', group=group)\n",
  "problem_statement": "Combining Q() objects with boolean expressions crashes.\nDescription\n\t \n\t\t(last modified by jonathan-golorry)\n\t \nCurrently Q objects with 1 child are treated differently during deconstruct.\n>>> from django.db.models import Q\n>>> Q(x=1).deconstruct()\n('django.db.models.Q', (), {'x': 1})\n>>> Q(x=1, y=2).deconstruct()\n('django.db.models.Q', (('x', 1), ('y', 2)), {})\nThis causes issues when deconstructing Q objects with a non-subscriptable child.\n>>> from django.contrib.auth import get_user_model\n>>> from django.db.models import Exists\n>>> Q(Exists(get_user_model().objects.filter(username='jim'))).deconstruct()\nTraceback (most recent call last):\n File \"<console>\", line 1, in <module>\n File \"...\", line 90, in deconstruct\n\tkwargs = {child[0]: child[1]}\nTypeError: 'Exists' object is not subscriptable\nPatch â€‹https://github.com/django/django/pull/14126 removes the special case, meaning single-child Q objects deconstruct into args instead of kwargs. A more backward-compatible approach would be to keep the special case and explicitly check that the child is a length-2 tuple, but it's unlikely that anyone is relying on this undocumented behavior.\n",
  "hints_text": "Conditional expressions can be combined together, so it's not necessary to encapsulate Exists() with Q(). Moreover it's an undocumented and untested to pass conditional expressions to Q(). Nevertheless I think it makes sense to support this. There is no need to change the current format of deconstruct(), it should be enough to handle conditional expressions, e.g. diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py index ae0f886107..5dc71ad619 100644 --- a/django/db/models/query_utils.py +++ b/django/db/models/query_utils.py @@ -85,7 +85,7 @@ class Q(tree.Node): if path.startswith('django.db.models.query_utils'): path = path.replace('django.db.models.query_utils', 'django.db.models') args, kwargs = (), {} - if len(self.children) == 1 and not isinstance(self.children[0], Q): + if len(self.children) == 1 and not isinstance(self.children[0], Q) and getattr(self.children[0], 'conditional', False) is False: child = self.children[0] kwargs = {child[0]: child[1]} else:\nAs Q() has .conditional set to True, we can amend Mariusz' example above to the following: django/db/models/query_utils.py diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py index ae0f886107..5dc71ad619 100644 a b class Q(tree.Node): 8585 if path.startswith('django.db.models.query_utils'): 8686 path = path.replace('django.db.models.query_utils', 'django.db.models') 8787 args, kwargs = (), {} 88 if len(self.children) == 1 and not isinstance(self.children[0], Q): 88 if len(self.children) == 1 and getattr(self.children[0], 'conditional', False) is False: 8989 child = self.children[0] 9090 kwargs = {child[0]: child[1]} 9191 else:\nDjango already passes conditional expressions to Q objects internally. â€‹https://github.com/django/django/blob/main/django/db/models/expressions.py#L113 Tested here â€‹https://github.com/django/django/blob/main/tests/expressions/tests.py#L827 That test is only succeeding because Q(...) | Q(Q()) is treated differently from Q(...) | Q(). As for the form of .deconstruct(), is there any reason for keeping the special case? It's: Inconsistent: Q(x=1).deconstruct() vs Q(x=1, y=2).deconstruct() Fragile: Unsupported inputs like Q(False) sometimes (but not always!) lead to \"not subscriptable\" errors. Incorrect: Q((\"x\", 1)).deconstruct() incorrectly puts the condition in kwargs instead of args.\nDjango already passes conditional expressions to Q objects internally. â€‹https://github.com/django/django/blob/main/django/db/models/expressions.py#L113 Tested here â€‹https://github.com/django/django/blob/main/tests/expressions/tests.py#L827 These are example of combining conditional expressions. Again, initializing Q objects with conditional expressions is undocumented and untested. That test is only succeeding because Q(...) | Q(Q()) is treated differently from Q(...) | Q(). I'm not sure how it's related with the ticket ðŸ¤” As for the form of .deconstruct(), is there any reason for keeping the special case? It's: Inconsistent: Q(x=1).deconstruct() vs Q(x=1, y=2).deconstruct() First is a single condition without a connector. Fragile: Unsupported inputs like Q(False) sometimes (but not always!) lead to \"not subscriptable\" errors. Incorrect: Q((\"x\", 1)).deconstruct() incorrectly puts the condition in kwargs instead of args. I wouldn't say that is incorrect Q(('x', 1)) is equivalent to the Q(x=1) so I don't see anything wrong with this behavior.\nI suppose it's a semantics argument whether Q(Exists...) is untested if there's a test that runs that exact expression, but isn't solely checking that functionality. My point is that Q((\"x\", 1)) and Q(x=1) are equivalent, so it's impossible for the deconstruct to correctly recreate the original args and kwargs in all cases. Therefore, unless there's an argument for keeping the special case, it's better to consistently use args for both Q(x=1).deconstruct() and Q(x=1, y=2).deconstruct(). I point out Q(Exists...) | Q(Q()) to show that the fragility of the special case is problematic and hard to catch. An internal optimization for nested empty Q objects can cause conditional expression combination to fail. That's why I'd like this patch to be focused on removing the special case and making Q objects more robust for all inputs, rather than only adding support for expressions. Both would make my future work on Q objects possible, but the current patch would put django in a better position for future development. Edit: To clarify on my future work, I intend to add .empty() to detect nested empty Q objects -- such as Q(Q()) -- and remove them from logical operations. This would currently cause a regression in test_boolean_expression_combined_with_empty_Q. Ultimately the goal is to add robust implementations of Q.any() and Q.all() that can't return empty Q objects that accidentally leak the entire table â€‹https://forum.djangoproject.com/t/improving-q-objects-with-true-false-and-none/851/9 Edit 2: Patches are up. https://code.djangoproject.com/ticket/32549 and https://code.djangoproject.com/ticket/32554\nIan, can I ask for your opinion? We need another pair of eyes, I really don't see why the current format of deconstruct() is problematic ðŸ¤·.\nI like the consistency and simplicity of the reworked deconstruct method. I think removing weird edge-cases in Q is a good thing. I think I would personally prefer a deconstruct api that always uses kwargs where possible, rather than args: ('django.db.models.Q', (), {'x': 1, 'y': 2}) looks nicer than ('django.db.models.Q', (('x', 1), ('y', 2)), {}) to me. I don't know how much harder this would be to implement though, and it's a machine facing interface, so human readability isn't the highest priority.\nUnfortunately we can't use kwargs for Q objects with multiple children. (Q(x=1) & Q(x=2)).deconstruct() would lose an argument.\nReplying to jonathan-golorry: Unfortunately we can't use kwargs for Q objects with multiple children. (Q(x=1) & Q(x=2)).deconstruct() would lose an argument. Excellent point!",
  "created_at": "2021-03-17T11:37:55Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_deconstruct (queries.test_q.QTests)\", \"test_deconstruct_boolean_expression (queries.test_q.QTests)\", \"test_deconstruct_negated (queries.test_q.QTests)\", \"test_boolean_expression_combined_with_empty_Q (expressions.tests.BasicExpressionsTests)\"]",
  "PASS_TO_PASS": "[\"test_aggregates (expressions.tests.ReprTests)\", \"test_distinct_aggregates (expressions.tests.ReprTests)\", \"test_expressions (expressions.tests.ReprTests)\", \"test_filtered_aggregates (expressions.tests.ReprTests)\", \"test_functions (expressions.tests.ReprTests)\", \"test_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_non_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_and (expressions.tests.CombinableTests)\", \"test_negation (expressions.tests.CombinableTests)\", \"test_or (expressions.tests.CombinableTests)\", \"test_reversed_and (expressions.tests.CombinableTests)\", \"test_reversed_or (expressions.tests.CombinableTests)\", \"test_deconstruct (expressions.tests.FTests)\", \"test_deepcopy (expressions.tests.FTests)\", \"test_equal (expressions.tests.FTests)\", \"test_hash (expressions.tests.FTests)\", \"test_not_equal_Value (expressions.tests.FTests)\", \"test_combine_and_both_empty (queries.test_q.QTests)\", \"test_combine_and_empty (queries.test_q.QTests)\", \"test_combine_not_q_object (queries.test_q.QTests)\", \"test_combine_or_both_empty (queries.test_q.QTests)\", \"test_combine_or_empty (queries.test_q.QTests)\", \"test_deconstruct_and (queries.test_q.QTests)\", \"test_deconstruct_multiple_kwargs (queries.test_q.QTests)\", \"test_deconstruct_nested (queries.test_q.QTests)\", \"test_deconstruct_or (queries.test_q.QTests)\", \"test_reconstruct (queries.test_q.QTests)\", \"test_reconstruct_and (queries.test_q.QTests)\", \"test_reconstruct_negated (queries.test_q.QTests)\", \"test_reconstruct_or (queries.test_q.QTests)\", \"test_resolve_output_field (expressions.tests.CombinedExpressionTests)\", \"test_optimizations (expressions.tests.ExistsTests)\", \"test_equal (expressions.tests.SimpleExpressionTests)\", \"test_hash (expressions.tests.SimpleExpressionTests)\", \"test_in_lookup_query_evaluation (queryset_pickle.tests.InLookupTests)\", \"Neither pickling nor unpickling a QuerySet.query with an __in=inner_qs\", \"test_month_aggregation (expressions.tests.FieldTransformTests)\", \"test_multiple_transforms_in_values (expressions.tests.FieldTransformTests)\", \"test_transform_in_values (expressions.tests.FieldTransformTests)\", \"This tests that SQL injection isn't possible using compilation of\", \"test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_namedtuple (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_F_reuse (expressions.tests.ExpressionsTests)\", \"Special characters (e.g. %, _ and \\\\) stored in database are\", \"Complex expressions of different connection types are possible.\", \"We can fill a value in all objects with an other value of the\", \"We can filter for objects, where a value is not equals the value\", \"We can increment a value of all objects in a query set.\", \"test_compile_unresolved (expressions.tests.ValueTests)\", \"test_deconstruct (expressions.tests.ValueTests)\", \"test_deconstruct_output_field (expressions.tests.ValueTests)\", \"test_equal (expressions.tests.ValueTests)\", \"test_equal_output_field (expressions.tests.ValueTests)\", \"test_hash (expressions.tests.ValueTests)\", \"test_raise_empty_expressionlist (expressions.tests.ValueTests)\", \"test_resolve_output_field (expressions.tests.ValueTests)\", \"test_resolve_output_field_failure (expressions.tests.ValueTests)\", \"test_update_TimeField_using_Value (expressions.tests.ValueTests)\", \"test_update_UUIDField_using_Value (expressions.tests.ValueTests)\", \"test_lefthand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor_null (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_division (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_transformed_field_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_division (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_righthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_annotation_values (queryset_pickle.tests.PickleabilityTestCase)\", \"test_annotation_values_list (queryset_pickle.tests.PickleabilityTestCase)\", \"test_annotation_with_callable_default (queryset_pickle.tests.PickleabilityTestCase)\", \"test_datetime_callable_default_all (queryset_pickle.tests.PickleabilityTestCase)\", \"test_datetime_callable_default_filter (queryset_pickle.tests.PickleabilityTestCase)\", \"test_doesnotexist_class (queryset_pickle.tests.PickleabilityTestCase)\", \"test_doesnotexist_exception (queryset_pickle.tests.PickleabilityTestCase)\", \"test_filter_deferred (queryset_pickle.tests.PickleabilityTestCase)\", \"test_filter_reverse_fk (queryset_pickle.tests.PickleabilityTestCase)\", \"test_forward_relatedobjectdoesnotexist_class (queryset_pickle.tests.PickleabilityTestCase)\", \"test_manager_pickle (queryset_pickle.tests.PickleabilityTestCase)\", \"#21430 -- Verifies a warning is raised for querysets that are\", \"A model not defined on module level is picklable.\", \"test_model_pickle_dynamic (queryset_pickle.tests.PickleabilityTestCase)\", \"Test intentionally the automatically created through model.\", \"test_multipleobjectsreturned_class (queryset_pickle.tests.PickleabilityTestCase)\", \"test_order_by_model_with_abstract_inheritance_and_meta_ordering (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_boolean_expression_in_Q__queryset (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_exists_kwargs_queryset_not_evaluated (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_exists_queryset_not_evaluated (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_exists_queryset_still_usable (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_filteredrelation (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_filteredrelation_m2m (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_prefetch_queryset_not_evaluated (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_prefetch_queryset_still_usable (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_prefetch_queryset_usable_outside_of_prefetch (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_prefetch_related_idempotence (queryset_pickle.tests.PickleabilityTestCase)\", \"#24831 -- Cached properties on ManyToOneRel created in QuerySet.delete()\", \"test_pickle_subquery_queryset_not_evaluated (queryset_pickle.tests.PickleabilityTestCase)\", \"test_related_field (queryset_pickle.tests.PickleabilityTestCase)\", \"test_reverse_one_to_one_relatedobjectdoesnotexist_class (queryset_pickle.tests.PickleabilityTestCase)\", \"test_specialized_queryset (queryset_pickle.tests.PickleabilityTestCase)\", \"test_standalone_method_as_default (queryset_pickle.tests.PickleabilityTestCase)\", \"test_staticmethod_as_default (queryset_pickle.tests.PickleabilityTestCase)\", \"test_string_as_default (queryset_pickle.tests.PickleabilityTestCase)\", \"test_date_case_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_comparison (expressions.tests.FTimeDeltaTests)\", \"test_date_minus_duration (expressions.tests.FTimeDeltaTests)\", \"test_date_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_delta_add (expressions.tests.FTimeDeltaTests)\", \"test_delta_subtract (expressions.tests.FTimeDeltaTests)\", \"test_delta_update (expressions.tests.FTimeDeltaTests)\", \"test_duration_expressions (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_durationfield_add (expressions.tests.FTimeDeltaTests)\", \"test_exclude (expressions.tests.FTimeDeltaTests)\", \"test_invalid_operator (expressions.tests.FTimeDeltaTests)\", \"test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests)\", \"test_multiple_query_compilation (expressions.tests.FTimeDeltaTests)\", \"test_negative_timedelta_update (expressions.tests.FTimeDeltaTests)\", \"test_query_clone (expressions.tests.FTimeDeltaTests)\", \"test_time_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_time_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_aggregate_rawsql_annotation (expressions.tests.BasicExpressionsTests)\", \"test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_count (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_filter (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_nested_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)\", \"test_arithmetic (expressions.tests.BasicExpressionsTests)\", \"test_boolean_expression_combined (expressions.tests.BasicExpressionsTests)\", \"test_boolean_expression_in_Q (expressions.tests.BasicExpressionsTests)\", \"test_case_in_filter_if_boolean_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exists_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_explicit_output_field (expressions.tests.BasicExpressionsTests)\", \"test_filter_inter_attribute (expressions.tests.BasicExpressionsTests)\", \"test_filter_with_join (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_q_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_rawsql_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_in_subquery (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_nested_outerref_with_function (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_join_outer_ref (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests)\", \"test_new_object_create (expressions.tests.BasicExpressionsTests)\", \"test_new_object_save (expressions.tests.BasicExpressionsTests)\", \"test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_object_update (expressions.tests.BasicExpressionsTests)\", \"test_object_update_fk (expressions.tests.BasicExpressionsTests)\", \"test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests)\", \"test_order_by_exists (expressions.tests.BasicExpressionsTests)\", \"test_order_by_multiline_sql (expressions.tests.BasicExpressionsTests)\", \"test_order_of_operations (expressions.tests.BasicExpressionsTests)\", \"test_outerref (expressions.tests.BasicExpressionsTests)\", \"test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests)\", \"test_outerref_with_operator (expressions.tests.BasicExpressionsTests)\", \"test_parenthesis_priority (expressions.tests.BasicExpressionsTests)\", \"test_pickle_expression (expressions.tests.BasicExpressionsTests)\", \"test_subquery (expressions.tests.BasicExpressionsTests)\", \"test_subquery_eq (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_lazy (expressions.tests.BasicExpressionsTests)\", \"test_subquery_group_by_outerref_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests)\", \"test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests)\", \"test_update (expressions.tests.BasicExpressionsTests)\", \"test_update_inherited_field_value (expressions.tests.BasicExpressionsTests)\", \"test_update_with_fk (expressions.tests.BasicExpressionsTests)\", \"test_update_with_none (expressions.tests.BasicExpressionsTests)\", \"test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.682293",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}