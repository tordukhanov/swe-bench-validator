{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-7147",
  "base_commit": "9f390f50718ee94237084cbc1badb66f9a8083d6",
  "patch": "diff --git a/xarray/conventions.py b/xarray/conventions.py\n--- a/xarray/conventions.py\n+++ b/xarray/conventions.py\n@@ -519,16 +519,19 @@ def stackable(dim):\n             and v.ndim > 0\n             and stackable(v.dims[-1])\n         )\n-        new_vars[k] = decode_cf_variable(\n-            k,\n-            v,\n-            concat_characters=concat_characters,\n-            mask_and_scale=mask_and_scale,\n-            decode_times=decode_times,\n-            stack_char_dim=stack_char_dim,\n-            use_cftime=use_cftime,\n-            decode_timedelta=decode_timedelta,\n-        )\n+        try:\n+            new_vars[k] = decode_cf_variable(\n+                k,\n+                v,\n+                concat_characters=concat_characters,\n+                mask_and_scale=mask_and_scale,\n+                decode_times=decode_times,\n+                stack_char_dim=stack_char_dim,\n+                use_cftime=use_cftime,\n+                decode_timedelta=decode_timedelta,\n+            )\n+        except Exception as e:\n+            raise type(e)(f\"Failed to decode variable {k!r}: {e}\")\n         if decode_coords in [True, \"coordinates\", \"all\"]:\n             var_attrs = new_vars[k].attrs\n             if \"coordinates\" in var_attrs:\n",
  "test_patch": "diff --git a/xarray/tests/test_conventions.py b/xarray/tests/test_conventions.py\n--- a/xarray/tests/test_conventions.py\n+++ b/xarray/tests/test_conventions.py\n@@ -475,3 +475,9 @@ def test_scalar_units() -> None:\n \n     actual = conventions.decode_cf_variable(\"t\", var)\n     assert_identical(actual, var)\n+\n+\n+def test_decode_cf_error_includes_variable_name():\n+    ds = Dataset({\"invalid\": ([], 1e36, {\"units\": \"days since 2000-01-01\"})})\n+    with pytest.raises(ValueError, match=\"Failed to decode variable 'invalid'\"):\n+        decode_cf(ds)\n",
  "problem_statement": "Time decoding error message does not include the problematic variable's name\n### What is your issue?\n\nIf any variable in a Dataset has times that cannot be represented as `cftime.datetime` objects, an error message will be raised.  However, this error message will not indicate the problematic variable's name.  It would be nice if it did, because it would make it easier for users to determine the source of the error.\r\n\r\ncc: @durack1\r\nxref: Unidata/cftime#295\r\n\r\n### Example\r\n\r\nThis is a minimal example of the issue.  The error message gives no indication that `\"invalid_times\"` is the problem:\r\n\r\n```\r\n>>> import xarray as xr\r\n>>> TIME_ATTRS = {\"units\": \"days since 0001-01-01\", \"calendar\": \"noleap\"}\r\n>>> valid_times = xr.DataArray([0, 1], dims=[\"time\"], attrs=TIME_ATTRS, name=\"valid_times\")\r\n>>> invalid_times = xr.DataArray([1e36, 2e36], dims=[\"time\"], attrs=TIME_ATTRS, name=\"invalid_times\")\r\n>>> ds = xr.merge([valid_times, invalid_times])\r\n>>> xr.decode_cf(ds)\r\nTraceback (most recent call last):\r\n  File \"/Users/spencer/software/xarray/xarray/coding/times.py\", line 275, in decode_cf_datetime\r\n    dates = _decode_datetime_with_pandas(flat_num_dates, units, calendar)\r\n  File \"/Users/spencer/software/xarray/xarray/coding/times.py\", line 210, in _decode_datetime_with_pandas\r\n    raise OutOfBoundsDatetime(\r\npandas._libs.tslibs.np_datetime.OutOfBoundsDatetime: Cannot decode times from a non-standard calendar, 'noleap', using pandas.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/spencer/software/xarray/xarray/coding/times.py\", line 180, in _decode_cf_datetime_dtype\r\n    result = decode_cf_datetime(example_value, units, calendar, use_cftime)\r\n  File \"/Users/spencer/software/xarray/xarray/coding/times.py\", line 277, in decode_cf_datetime\r\n    dates = _decode_datetime_with_cftime(\r\n  File \"/Users/spencer/software/xarray/xarray/coding/times.py\", line 202, in _decode_datetime_with_cftime\r\n    cftime.num2date(num_dates, units, calendar, only_use_cftime_datetimes=True)\r\n  File \"src/cftime/_cftime.pyx\", line 605, in cftime._cftime.num2date\r\n  File \"src/cftime/_cftime.pyx\", line 404, in cftime._cftime.cast_to_int\r\nOverflowError: time values outside range of 64 bit signed integers\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/spencer/software/xarray/xarray/conventions.py\", line 655, in decode_cf\r\n    vars, attrs, coord_names = decode_cf_variables(\r\n  File \"/Users/spencer/software/xarray/xarray/conventions.py\", line 521, in decode_cf_variables\r\n    new_vars[k] = decode_cf_variable(\r\n  File \"/Users/spencer/software/xarray/xarray/conventions.py\", line 369, in decode_cf_variable\r\n    var = times.CFDatetimeCoder(use_cftime=use_cftime).decode(var, name=name)\r\n  File \"/Users/spencer/software/xarray/xarray/coding/times.py\", line 687, in decode\r\n    dtype = _decode_cf_datetime_dtype(data, units, calendar, self.use_cftime)\r\n  File \"/Users/spencer/software/xarray/xarray/coding/times.py\", line 190, in _decode_cf_datetime_dtype\r\n    raise ValueError(msg)\r\nValueError: unable to decode time units 'days since 0001-01-01' with \"calendar 'noleap'\". Try opening your dataset with decode_times=False or installing cftime if it is not installed.\r\n```\n",
  "hints_text": "",
  "created_at": "2022-10-08T17:53:23Z",
  "version": "2022.09",
  "FAIL_TO_PASS": "[\"xarray/tests/test_conventions.py::test_decode_cf_error_includes_variable_name\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_conventions.py::TestBoolTypeArray::test_booltype_array\", \"xarray/tests/test_conventions.py::TestNativeEndiannessArray::test\", \"xarray/tests/test_conventions.py::test_decode_cf_with_conflicting_fill_missing_value\", \"xarray/tests/test_conventions.py::TestEncodeCFVariable::test_incompatible_attributes\", \"xarray/tests/test_conventions.py::TestEncodeCFVariable::test_missing_fillvalue\", \"xarray/tests/test_conventions.py::TestEncodeCFVariable::test_multidimensional_coordinates\", \"xarray/tests/test_conventions.py::TestEncodeCFVariable::test_var_with_coord_attr\", \"xarray/tests/test_conventions.py::TestEncodeCFVariable::test_do_not_overwrite_user_coordinates\", \"xarray/tests/test_conventions.py::TestEncodeCFVariable::test_emit_coordinates_attribute_in_attrs\", \"xarray/tests/test_conventions.py::TestEncodeCFVariable::test_emit_coordinates_attribute_in_encoding\", \"xarray/tests/test_conventions.py::TestEncodeCFVariable::test_string_object_warning\", \"xarray/tests/test_conventions.py::TestDecodeCF::test_dataset\", \"xarray/tests/test_conventions.py::TestDecodeCF::test_invalid_coordinates\", \"xarray/tests/test_conventions.py::TestDecodeCF::test_decode_coordinates\", \"xarray/tests/test_conventions.py::TestDecodeCF::test_0d_int32_encoding\", \"xarray/tests/test_conventions.py::TestDecodeCF::test_decode_cf_with_multiple_missing_values\", \"xarray/tests/test_conventions.py::TestDecodeCF::test_decode_cf_with_drop_variables\", \"xarray/tests/test_conventions.py::TestDecodeCF::test_invalid_time_units_raises_eagerly\", \"xarray/tests/test_conventions.py::TestDecodeCF::test_dataset_repr_with_netcdf4_datetimes\", \"xarray/tests/test_conventions.py::TestDecodeCF::test_decode_cf_datetime_transition_to_invalid\", \"xarray/tests/test_conventions.py::TestDecodeCF::test_decode_cf_with_dask\", \"xarray/tests/test_conventions.py::TestDecodeCF::test_decode_dask_times\", \"xarray/tests/test_conventions.py::TestDecodeCF::test_decode_cf_time_kwargs\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_zero_dimensional_variable\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_write_store\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_test_data\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_load\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_dataset_compute\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_pickle\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_pickle_dataarray\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_dataset_caching\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_None_variable\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_object_dtype\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_string_data\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_string_encoded_characters\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_numpy_datetime_data\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_cftime_datetime_data\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_timedelta_data\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_float64_data\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_example_1_netcdf\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_global_coordinates\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_coordinates_with_space\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_boolean_dtype\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_orthogonal_indexing\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_vectorized_indexing\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_isel_dataarray\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_array_type_after_indexing\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_dropna\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_ondisk_after_print\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_bytes_with_fill_value\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_string_with_fill_value_nchar\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_mask_and_scale[create_unsigned_masked_scaled_data-create_encoded_unsigned_masked_scaled_data]\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_mask_and_scale[create_signed_masked_scaled_data-create_encoded_signed_masked_scaled_data]\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_mask_and_scale[create_masked_and_scaled_data-create_encoded_masked_and_scaled_data]\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_grid_mapping_and_bounds_are_not_coordinates_in_file\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_coordinate_variables_after_dataset_roundtrip\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_grid_mapping_and_bounds_are_coordinates_after_dataarray_roundtrip\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_coordinate_variables_after_iris_roundtrip\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_coordinates_encoding\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_roundtrip_endian\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_encoding_kwarg_dates\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_default_fill_value\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_explicitly_omit_fill_value\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_explicitly_omit_fill_value_via_encoding_kwarg\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_explicitly_omit_fill_value_in_coord\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_encoding_same_dtype\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_append_write\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_append_overwrite_values\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_append_with_invalid_dim_raises\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_multiindex_not_implemented\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_invalid_dataarray_names_raise\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_encoding_kwarg\", \"xarray/tests/test_conventions.py::TestCFEncodedDataStore::test_encoding_kwarg_fixed_width_string\", \"xarray/tests/test_conventions.py::TestDecodeCFVariableWithArrayUnits::test_decode_cf_variable_with_array_units\", \"xarray/tests/test_conventions.py::test_decode_cf_variable_timedelta64\", \"xarray/tests/test_conventions.py::test_decode_cf_variable_datetime64\", \"xarray/tests/test_conventions.py::test_decode_cf_variable_cftime\", \"xarray/tests/test_conventions.py::test_scalar_units\"]",
  "environment_setup_commit": "087ebbb78668bdf5d2d41c3b2553e3f29ce75be1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.903354",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}