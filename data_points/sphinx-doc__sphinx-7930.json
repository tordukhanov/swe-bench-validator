{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7930",
  "base_commit": "2feb0b43b64012ac982a9d07af85002b43b59226",
  "patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -77,18 +77,24 @@\n                                          ('deprecated', bool)])\n \n \n-def type_to_xref(text: str) -> addnodes.pending_xref:\n+def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xref:\n     \"\"\"Convert a type string to a cross reference node.\"\"\"\n     if text == 'None':\n         reftype = 'obj'\n     else:\n         reftype = 'class'\n \n+    if env:\n+        kwargs = {'py:module': env.ref_context.get('py:module'),\n+                  'py:class': env.ref_context.get('py:class')}\n+    else:\n+        kwargs = {}\n+\n     return pending_xref('', nodes.Text(text),\n-                        refdomain='py', reftype=reftype, reftarget=text)\n+                        refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n \n \n-def _parse_annotation(annotation: str) -> List[Node]:\n+def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n     \"\"\"Parse type annotation.\"\"\"\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n@@ -130,18 +136,22 @@ def unparse(node: ast.AST) -> List[Node]:\n         else:\n             raise SyntaxError  # unsupported syntax\n \n+    if env is None:\n+        warnings.warn(\"The env parameter for _parse_annotation becomes required now.\",\n+                      RemovedInSphinx50Warning, stacklevel=2)\n+\n     try:\n         tree = ast_parse(annotation)\n         result = unparse(tree)\n         for i, node in enumerate(result):\n             if isinstance(node, nodes.Text):\n-                result[i] = type_to_xref(str(node))\n+                result[i] = type_to_xref(str(node), env)\n         return result\n     except SyntaxError:\n-        return [type_to_xref(annotation)]\n+        return [type_to_xref(annotation, env)]\n \n \n-def _parse_arglist(arglist: str) -> addnodes.desc_parameterlist:\n+def _parse_arglist(arglist: str, env: BuildEnvironment = None) -> addnodes.desc_parameterlist:\n     \"\"\"Parse a list of arguments using AST parser\"\"\"\n     params = addnodes.desc_parameterlist(arglist)\n     sig = signature_from_str('(%s)' % arglist)\n@@ -167,7 +177,7 @@ def _parse_arglist(arglist: str) -> addnodes.desc_parameterlist:\n             node += addnodes.desc_sig_name('', param.name)\n \n         if param.annotation is not param.empty:\n-            children = _parse_annotation(param.annotation)\n+            children = _parse_annotation(param.annotation, env)\n             node += addnodes.desc_sig_punctuation('', ':')\n             node += nodes.Text(' ')\n             node += addnodes.desc_sig_name('', '', *children)  # type: ignore\n@@ -415,7 +425,7 @@ def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]\n         signode += addnodes.desc_name(name, name)\n         if arglist:\n             try:\n-                signode += _parse_arglist(arglist)\n+                signode += _parse_arglist(arglist, self.env)\n             except SyntaxError:\n                 # fallback to parse arglist original parser.\n                 # it supports to represent optional arguments (ex. \"func(foo [, bar])\")\n@@ -430,7 +440,7 @@ def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]\n                 signode += addnodes.desc_parameterlist()\n \n         if retann:\n-            children = _parse_annotation(retann)\n+            children = _parse_annotation(retann, self.env)\n             signode += addnodes.desc_returns(retann, '', *children)\n \n         anno = self.options.get('annotation')\n@@ -626,7 +636,7 @@ def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]\n \n         typ = self.options.get('type')\n         if typ:\n-            annotations = _parse_annotation(typ)\n+            annotations = _parse_annotation(typ, self.env)\n             signode += addnodes.desc_annotation(typ, '', nodes.Text(': '), *annotations)\n \n         value = self.options.get('value')\n@@ -872,7 +882,7 @@ def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]\n \n         typ = self.options.get('type')\n         if typ:\n-            annotations = _parse_annotation(typ)\n+            annotations = _parse_annotation(typ, self.env)\n             signode += addnodes.desc_annotation(typ, '', nodes.Text(': '), *annotations)\n \n         value = self.options.get('value')\n",
  "test_patch": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -236,18 +236,18 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'module1.Class.func'\n \n \n-def test_parse_annotation():\n-    doctree = _parse_annotation(\"int\")\n+def test_parse_annotation(app):\n+    doctree = _parse_annotation(\"int\", app.env)\n     assert_node(doctree, ([pending_xref, \"int\"],))\n     assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"int\")\n \n-    doctree = _parse_annotation(\"List[int]\")\n+    doctree = _parse_annotation(\"List[int]\", app.env)\n     assert_node(doctree, ([pending_xref, \"List\"],\n                           [desc_sig_punctuation, \"[\"],\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n-    doctree = _parse_annotation(\"Tuple[int, int]\")\n+    doctree = _parse_annotation(\"Tuple[int, int]\", app.env)\n     assert_node(doctree, ([pending_xref, \"Tuple\"],\n                           [desc_sig_punctuation, \"[\"],\n                           [pending_xref, \"int\"],\n@@ -255,14 +255,14 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n-    doctree = _parse_annotation(\"Tuple[()]\")\n+    doctree = _parse_annotation(\"Tuple[()]\", app.env)\n     assert_node(doctree, ([pending_xref, \"Tuple\"],\n                           [desc_sig_punctuation, \"[\"],\n                           [desc_sig_punctuation, \"(\"],\n                           [desc_sig_punctuation, \")\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n-    doctree = _parse_annotation(\"Callable[[int, int], int]\")\n+    doctree = _parse_annotation(\"Callable[[int, int], int]\", app.env)\n     assert_node(doctree, ([pending_xref, \"Callable\"],\n                           [desc_sig_punctuation, \"[\"],\n                           [desc_sig_punctuation, \"[\"],\n@@ -275,12 +275,11 @@ def test_parse_annotation():\n                           [desc_sig_punctuation, \"]\"]))\n \n     # None type makes an object-reference (not a class reference)\n-    doctree = _parse_annotation(\"None\")\n+    doctree = _parse_annotation(\"None\", app.env)\n     assert_node(doctree, ([pending_xref, \"None\"],))\n     assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n \n \n-\n def test_pyfunction_signature(app):\n     text = \".. py:function:: hello(name: str) -> str\"\n     doctree = restructuredtext.parse(app, text)\n@@ -458,14 +457,22 @@ def test_pyobject_prefix(app):\n \n \n def test_pydata(app):\n-    text = \".. py:data:: var\\n\"\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:data:: var\\n\"\n+            \"   :type: int\\n\")\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n-    assert_node(doctree, (addnodes.index,\n-                          [desc, ([desc_signature, desc_name, \"var\"],\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_addname, \"example.\"],\n+                                                    [desc_name, \"var\"],\n+                                                    [desc_annotation, (\": \",\n+                                                                       [pending_xref, \"int\"])])],\n                                   [desc_content, ()])]))\n-    assert 'var' in domain.objects\n-    assert domain.objects['var'] == ('index', 'var', 'data')\n+    assert_node(doctree[3][0][2][1], pending_xref, **{\"py:module\": \"example\"})\n+    assert 'example.var' in domain.objects\n+    assert domain.objects['example.var'] == ('index', 'example.var', 'data')\n \n \n def test_pyfunction(app):\n@@ -698,6 +705,8 @@ def test_pyattribute(app):\n                                                                         [desc_sig_punctuation, \"]\"])],\n                                                      [desc_annotation, \" = ''\"])],\n                                    [desc_content, ()]))\n+    assert_node(doctree[1][1][1][0][1][1], pending_xref, **{\"py:class\": \"Class\"})\n+    assert_node(doctree[1][1][1][0][1][3], pending_xref, **{\"py:class\": \"Class\"})\n     assert 'Class.attr' in domain.objects\n     assert domain.objects['Class.attr'] == ('index', 'Class.attr', 'attribute')\n \n",
  "problem_statement": "Regression: autodoc Dataclass variables reference target not found\n**Describe the bug**\r\n\r\nWhen I use `sphinx.ext.autodoc` and `nitpicky = True` with my code which includes a dataclass with a variable of a custom type, I get a warning.\r\n\r\n**To Reproduce**\r\n\r\nOpen the attached project [sphinx-example.zip](https://github.com/sphinx-doc/sphinx/files/4890646/sphinx-example.zip).\r\nInstall Sphinx.\r\nRun `sphinx-build -M html source/ build/`.\r\n\r\n**Expected behavior**\r\n\r\nI expect there to be no warning, or a clear message saying how I can avoid this warning.\r\n\r\n**Your project**\r\n\r\n[sphinx-example.zip](https://github.com/sphinx-doc/sphinx/files/4890646/sphinx-example.zip)\r\n\r\n**Environment info**\r\n\r\nmacOS latest\r\nPython 3.7.7\r\nSphinx 3.1.2 (reproducible also with 3.1.0 but not 3.0.4)\n",
  "hints_text": "Thank you for reporting.\r\n\r\nNote: Internally, the autodoc generates the following code:\r\n\r\n```\r\n.. py:module:: example\r\n\r\n\r\n.. py:class:: Report(status: example.Statuses)\r\n   :module: example\r\n\r\n\r\n   .. py:attribute:: Report.status\r\n      :module: example\r\n      :type: Statuses\r\n\r\n\r\n.. py:class:: Statuses()\r\n   :module: example\r\n```\r\n\r\nIt seems the intermediate code is good. But `py:attribute` class does not process `:type: Statuses` option well.\nA Dockerfile to reproduce the error:\r\n```\r\nFROM python:3.7-slim\r\n\r\nRUN apt update; apt install -y build-essential curl git make unzip vim\r\nRUN curl -LO https://github.com/sphinx-doc/sphinx/files/4890646/sphinx-example.zip\r\nRUN unzip sphinx-example.zip\r\nWORKDIR /sphinx-example\r\nRUN pip install -U sphinx\r\nRUN sphinx-build -NTvv source/ build/html/\r\n```\n@tk0miya - It is great to see such open and quick progress. Thank you for your hard work on this.",
  "created_at": "2020-07-08T16:50:21Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"tests/test_domain_py.py::test_parse_annotation\", \"tests/test_domain_py.py::test_pydata\", \"tests/test_domain_py.py::test_pyattribute\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_py.py::test_function_signatures\", \"tests/test_domain_py.py::test_domain_py_xrefs\", \"tests/test_domain_py.py::test_domain_py_objects\", \"tests/test_domain_py.py::test_resolve_xref_for_properties\", \"tests/test_domain_py.py::test_domain_py_find_obj\", \"tests/test_domain_py.py::test_get_full_qualified_name\", \"tests/test_domain_py.py::test_pyfunction_signature\", \"tests/test_domain_py.py::test_pyfunction_signature_full\", \"tests/test_domain_py.py::test_pyfunction_signature_full_py38\", \"tests/test_domain_py.py::test_optional_pyfunction_signature\", \"tests/test_domain_py.py::test_pyexception_signature\", \"tests/test_domain_py.py::test_exceptions_module_is_ignored\", \"tests/test_domain_py.py::test_pydata_signature\", \"tests/test_domain_py.py::test_pydata_signature_old\", \"tests/test_domain_py.py::test_pyobject_prefix\", \"tests/test_domain_py.py::test_pyfunction\", \"tests/test_domain_py.py::test_pyclass_options\", \"tests/test_domain_py.py::test_pymethod_options\", \"tests/test_domain_py.py::test_pyclassmethod\", \"tests/test_domain_py.py::test_pystaticmethod\", \"tests/test_domain_py.py::test_pydecorator_signature\", \"tests/test_domain_py.py::test_pydecoratormethod_signature\", \"tests/test_domain_py.py::test_module_index\", \"tests/test_domain_py.py::test_module_index_submodule\", \"tests/test_domain_py.py::test_module_index_not_collapsed\", \"tests/test_domain_py.py::test_modindex_common_prefix\", \"tests/test_domain_py.py::test_noindexentry\"]",
  "environment_setup_commit": "f92fa6443fe6f457ab0c26d41eb229e825fda5e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.048597",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}