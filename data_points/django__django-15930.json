{
  "repo": "django/django",
  "instance_id": "django__django-15930",
  "base_commit": "63884829acd207404f2a5c3cc1d6b4cd0a822b70",
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1299,6 +1299,11 @@ def as_sql(self, compiler, connection, template=None, **extra_context):\n         template_params = extra_context\n         sql_params = []\n         condition_sql, condition_params = compiler.compile(self.condition)\n+        # Filters that match everything are handled as empty strings in the\n+        # WHERE clause, but in a CASE WHEN expression they must use a predicate\n+        # that's always True.\n+        if condition_sql == \"\":\n+            condition_sql, condition_params = compiler.compile(Value(True))\n         template_params[\"condition\"] = condition_sql\n         sql_params.extend(condition_params)\n         result_sql, result_params = compiler.compile(self.result)\n",
  "test_patch": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -415,6 +415,16 @@ def test_annotate_with_empty_when(self):\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n+    def test_annotate_with_full_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_combined_expression(self):\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(\n",
  "problem_statement": "Case() crashes with ~Q(pk__in=[]).\nDescription\n\t\nThe following code generates a syntax error. \nUser.objects.annotate(\n\t_a=Case(\n\t\tWhen(~Q(pk__in=[]), then=Value(True)),\n\t\tdefault=Value(False),\n\t\toutput_field=BooleanField(),\n\t)\n).order_by(\"-a\").values(\"pk\")\nThe error is: \nProgrammingError: syntax error at or near \"THEN\"\nLINE 1: ..._user\".\"id\" FROM \"users_user\" ORDER BY CASE WHEN THEN true ...\nThe generated SQL is: \nSELECT \"users_user\".\"id\" FROM \"users_user\" ORDER BY CASE WHEN THEN True ELSE False END ASC\nI expected behavior to annotate all rows with the value True since they all match.\nRelevant because ~Q(pkin=[]) is a sentinel value that is sometimes returned by application code.\n",
  "hints_text": "Thanks for the report (similar to the #33374 and #26517).",
  "created_at": "2022-08-07T15:26:41Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_annotate_with_full_when (expressions_case.tests.CaseExpressionTests)\"]",
  "PASS_TO_PASS": "[\"test_empty_q_object (expressions_case.tests.CaseWhenTests)\", \"test_invalid_when_constructor_args (expressions_case.tests.CaseWhenTests)\", \"test_only_when_arguments (expressions_case.tests.CaseWhenTests)\", \"test_conditional_aggregation_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_conditional_update_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_filter_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_hash (expressions_case.tests.CaseDocumentationExamples)\", \"test_lookup_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_simple_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_aggregate (expressions_case.tests.CaseExpressionTests)\", \"test_aggregate_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_aggregate_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_aggregation_empty_cases (expressions_case.tests.CaseExpressionTests)\", \"test_annotate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_exclude (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_filter_decimal (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_values_not_in_order_by (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_aggregation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_aggregation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_aggregation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_annotation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_annotation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_annotation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_empty_when (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_in_clause (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_join_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_join_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_join_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_without_default (expressions_case.tests.CaseExpressionTests)\", \"test_case_reuse (expressions_case.tests.CaseExpressionTests)\", \"test_combined_expression (expressions_case.tests.CaseExpressionTests)\", \"test_combined_q_object (expressions_case.tests.CaseExpressionTests)\", \"test_condition_with_lookups (expressions_case.tests.CaseExpressionTests)\", \"test_filter (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_aggregation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_aggregation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_aggregation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_annotation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_annotation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_annotation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_join_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_join_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_join_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_without_default (expressions_case.tests.CaseExpressionTests)\", \"test_in_subquery (expressions_case.tests.CaseExpressionTests)\", \"test_join_promotion (expressions_case.tests.CaseExpressionTests)\", \"test_join_promotion_multiple_annotations (expressions_case.tests.CaseExpressionTests)\", \"test_lookup_different_fields (expressions_case.tests.CaseExpressionTests)\", \"test_lookup_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_m2m_exclude (expressions_case.tests.CaseExpressionTests)\", \"test_m2m_reuse (expressions_case.tests.CaseExpressionTests)\", \"test_order_by_conditional_explicit (expressions_case.tests.CaseExpressionTests)\", \"test_order_by_conditional_implicit (expressions_case.tests.CaseExpressionTests)\", \"test_update (expressions_case.tests.CaseExpressionTests)\", \"test_update_big_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_binary (expressions_case.tests.CaseExpressionTests)\", \"test_update_boolean (expressions_case.tests.CaseExpressionTests)\", \"test_update_date (expressions_case.tests.CaseExpressionTests)\", \"test_update_date_time (expressions_case.tests.CaseExpressionTests)\", \"test_update_decimal (expressions_case.tests.CaseExpressionTests)\", \"test_update_duration (expressions_case.tests.CaseExpressionTests)\", \"test_update_email (expressions_case.tests.CaseExpressionTests)\", \"test_update_file (expressions_case.tests.CaseExpressionTests)\", \"test_update_file_path (expressions_case.tests.CaseExpressionTests)\", \"test_update_fk (expressions_case.tests.CaseExpressionTests)\", \"test_update_float (expressions_case.tests.CaseExpressionTests)\", \"test_update_generic_ip_address (expressions_case.tests.CaseExpressionTests)\", \"test_update_image (expressions_case.tests.CaseExpressionTests)\", \"test_update_null_boolean (expressions_case.tests.CaseExpressionTests)\", \"test_update_positive_big_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_positive_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_positive_small_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_slug (expressions_case.tests.CaseExpressionTests)\", \"test_update_small_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_string (expressions_case.tests.CaseExpressionTests)\", \"test_update_text (expressions_case.tests.CaseExpressionTests)\", \"test_update_time (expressions_case.tests.CaseExpressionTests)\", \"test_update_url (expressions_case.tests.CaseExpressionTests)\", \"test_update_uuid (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_join_in_condition_raise_field_error (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_join_in_predicate_raise_field_error (expressions_case.tests.CaseExpressionTests)\", \"test_update_without_default (expressions_case.tests.CaseExpressionTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.743191",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}