{
  "repo": "django/django",
  "instance_id": "django__django-16735",
  "base_commit": "2eb1f37260f0e0b71ef3a77eb5522d2bb68d6489",
  "patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -23,7 +23,7 @@\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n-from django.utils.translation import get_language\n+from django.utils.translation import get_language, get_supported_language_variant\n \n from .converters import get_converter\n from .exceptions import NoReverseMatch, Resolver404\n@@ -351,7 +351,8 @@ def regex(self):\n     @property\n     def language_prefix(self):\n         language_code = get_language() or settings.LANGUAGE_CODE\n-        if language_code == settings.LANGUAGE_CODE and not self.prefix_default_language:\n+        default_language = get_supported_language_variant(settings.LANGUAGE_CODE)\n+        if language_code == default_language and not self.prefix_default_language:\n             return \"\"\n         else:\n             return \"%s/\" % language_code\ndiff --git a/django/utils/translation/__init__.py b/django/utils/translation/__init__.py\n--- a/django/utils/translation/__init__.py\n+++ b/django/utils/translation/__init__.py\n@@ -17,6 +17,7 @@\n     \"get_language_from_request\",\n     \"get_language_info\",\n     \"get_language_bidi\",\n+    \"get_supported_language_variant\",\n     \"check_for_language\",\n     \"to_language\",\n     \"to_locale\",\n",
  "test_patch": "diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1916,6 +1916,12 @@ def test_default_lang_without_prefix(self):\n         response = self.client.get(\"/simple/\")\n         self.assertEqual(response.content, b\"Yes\")\n \n+    @override_settings(LANGUAGE_CODE=\"en-us\")\n+    def test_default_lang_fallback_without_prefix(self):\n+        response = self.client.get(\"/simple/\")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b\"Yes\")\n+\n     def test_other_lang_with_prefix(self):\n         response = self.client.get(\"/fr/simple/\")\n         self.assertEqual(response.content, b\"Oui\")\n",
  "problem_statement": "i18n_patterns() not respecting prefix_default_language=False\nDescription\n\t \n\t\t(last modified by Oussama Jarrousse)\n\t \nIn my django project urls.py file I have the following setup:\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.contrib import admin\nfrom django.urls import include\nfrom django.urls import path\nurlpatterns = []\n# as an example... include the admin.site.urls \nurlpatterns += i18n_patterns(\n\tpath(\"admin/\", admin.site.urls), prefix_default_language=False\n)\nIn versions Django==4.1.7 (or prior), I was able to navigating to /admin/ without having to add the language prefix.\nDjango==4.2.0, navigating to /admin/ will cause a HTTP 302 and only /en/admin/ works... although prefix_default_language=False is explicitly defined.\nThis change broke my API upon backend packages upgrade from 4.1.7 to 4.2.0\n",
  "hints_text": "Thanks for the ticket, however I'm not able to reproduce this issue. Can you provide a small sample project that reproduces this? (it seems to be related with 94e7f471c4edef845a4fe5e3160132997b4cca81.)\nI will provide the project shortly on github... In the meanwhile, I assume you were not able to reproduce the issue because you did not include: django.middleware.locale.LocaleMiddleware here is MIDDLEWARE list in settings.py MIDDLEWARE = [ \"django.middleware.security.SecurityMiddleware\", \"django.contrib.sessions.middleware.SessionMiddleware\", \"django.middleware.locale.LocaleMiddleware\", # This line is important \"django.middleware.common.CommonMiddleware\", \"django.middleware.csrf.CsrfViewMiddleware\", \"django.contrib.auth.middleware.AuthenticationMiddleware\", \"django.contrib.messages.middleware.MessageMiddleware\", \"django.middleware.clickjacking.XFrameOptionsMiddleware\", ]\nI prepared a simple (pytest) test that navigates to a path that should return HTTP status_code == 200. I prepare a tox.ini file that runs pytest in two different Django environments once with Django==4.1.7 and another with Django==4.2.0 Tox will run the test twice consecutively. The first will pass. the second will fail. ​https://github.com/oussjarrousse/djangoproject-ticket-34455\nOussama, thanks! Regression in 94e7f471c4edef845a4fe5e3160132997b4cca81. Reproduced at 0e1aae7a5f51408b73c5a29e18bd1803dd030930.\nI want to work on this bug, I think the real problem is in getting the language from request. Sending the pull request.\nI have created a pull request. Can you please review it? ​https://github.com/django/django/pull/16727 Replying to Mariusz Felisiak: Oussama, thanks! Regression in 94e7f471c4edef845a4fe5e3160132997b4cca81. Reproduced at 0e1aae7a5f51408b73c5a29e18bd1803dd030930.\nI want to work on this bug, I think the real problem is in getting the language from request. Sending the pull request. I don't think think there is an issue. I'd rather suspect ​this line.\nUnable to replicate the bug. For me, it works for both version 4.2 and 4.1.7. I used LocaleMiddleware\nReplying to Mohit Singh Sinsniwal: Unable to replicate the bug. For me, it works for both version 4.2 and 4.1.7. I used LocaleMiddleware Please don't close already accepted tickets. I'm still able to reproduce the issue.\nReplying to Mohit Singh Sinsniwal: Unable to replicate the bug. For me, it works for both version 4.2 and 4.1.7. I used LocaleMiddleware here is a project to replicate the issue... it uses tox to setup two different environments and run a simple test in each environment. ​​https://github.com/oussjarrousse/djangoproject-ticket-34455\nOussama, thanks, would you like to prepare a patch?\nReplying to Mariusz Felisiak: Oussama, thanks, would you like to prepare a patch? In theory, I would love to. However, I am not familiar enough with the core source code.\nReplying to Mariusz Felisiak: Replying to Mohit Singh Sinsniwal: Unable to replicate the bug. For me, it works for both version 4.2 and 4.1.7. I used LocaleMiddleware Please don't close already accepted tickets. I'm still able to reproduce the issue. Mariusz, sorry for closing it, I went on a different track while solving the issue, and now I can replicate. I need your help in understanding the middleware. Locale class, what should be done with /admin/login/?next=/admin ? When /admin/login/?next=/admin is requested, it calls get_fallback_lanuage and redirects afterward to /en/admin/login/?next=/en/admin/ get_faalback_language is taking the prefixed language. If we dont want that, then we can update the process_request function: OLD: def process_request(self, request): urlconf = getattr(request, \"urlconf\", settings.ROOT_URLCONF) i18n_patterns_used, _ = is_language_prefix_patterns_used(urlconf) language = translation.get_language_from_request( request, check_path=i18n_patterns_used ) if not language: language = self.get_fallback_language(request) translation.activate(language) request.LANGUAGE_CODE = translation.get_language() New: def process_request(self, request): urlconf = getattr(request, \"urlconf\", settings.ROOT_URLCONF) ( i18n_patterns_used, prefixed_default_language, ) = is_language_prefix_patterns_used(urlconf) language = translation.get_language_from_request( request, check_path=i18n_patterns_used ) language_from_path = translation.get_language_from_path(request.path_info) if ( not language_from_path and i18n_patterns_used and prefixed_default_language ): language = settings.LANGUAGE_CODE translation.activate(language) request.LANGUAGE_CODE = translation.get_language() I want to work on this issue and need your suggestion if I am on right track.",
  "created_at": "2023-04-06T17:43:04Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_default_lang_fallback_without_prefix (i18n.tests.UnprefixedDefaultLanguageTests.test_default_lang_fallback_without_prefix)\"]",
  "PASS_TO_PASS": "[\"test_ignores_non_mo_files (i18n.tests.TranslationFileChangedTests.test_ignores_non_mo_files)\", \"test_resets_cache_with_mo_files (i18n.tests.TranslationFileChangedTests.test_resets_cache_with_mo_files)\", \"OSError is raised if the default language is unparseable.\", \"test_round_away_from_one (i18n.tests.UtilsTests.test_round_away_from_one)\", \"get_language_info return the first fallback language info if the lang_info\", \"test_localized_language_info (i18n.tests.TestLanguageInfo.test_localized_language_info)\", \"test_unknown_language_code (i18n.tests.TestLanguageInfo.test_unknown_language_code)\", \"test_unknown_language_code_and_country_code (i18n.tests.TestLanguageInfo.test_unknown_language_code_and_country_code)\", \"test_unknown_only_country_code (i18n.tests.TestLanguageInfo.test_unknown_only_country_code)\", \"test_lazy (i18n.tests.TestModels.test_lazy)\", \"test_safestr (i18n.tests.TestModels.test_safestr)\", \"test_django_fallback (i18n.tests.DjangoFallbackResolutionOrderI18NTests.test_django_fallback)\", \"test_bug14894_translation_activate_thread_safety (i18n.tests.TranslationThreadSafetyTests.test_bug14894_translation_activate_thread_safety)\", \"test_check_for_language (i18n.tests.CountrySpecificLanguageTests.test_check_for_language)\", \"test_check_for_language_null (i18n.tests.CountrySpecificLanguageTests.test_check_for_language_null)\", \"test_get_language_from_request (i18n.tests.CountrySpecificLanguageTests.test_get_language_from_request)\", \"test_get_language_from_request_null (i18n.tests.CountrySpecificLanguageTests.test_get_language_from_request_null)\", \"test_specific_language_codes (i18n.tests.CountrySpecificLanguageTests.test_specific_language_codes)\", \"test_check_for_language (i18n.tests.NonDjangoLanguageTests.test_check_for_language)\", \"test_non_django_language (i18n.tests.NonDjangoLanguageTests.test_non_django_language)\", \"test_plural_non_django_language (i18n.tests.NonDjangoLanguageTests.test_plural_non_django_language)\", \"test_i18n_app_dirs (i18n.tests.WatchForTranslationChangesTests.test_i18n_app_dirs)\", \"test_i18n_app_dirs_ignore_django_apps (i18n.tests.WatchForTranslationChangesTests.test_i18n_app_dirs_ignore_django_apps)\", \"test_i18n_disabled (i18n.tests.WatchForTranslationChangesTests.test_i18n_disabled)\", \"test_i18n_enabled (i18n.tests.WatchForTranslationChangesTests.test_i18n_enabled)\", \"test_i18n_local_locale (i18n.tests.WatchForTranslationChangesTests.test_i18n_local_locale)\", \"test_i18n_locale_paths (i18n.tests.WatchForTranslationChangesTests.test_i18n_locale_paths)\", \"Untranslated strings for territorial language variants use the\", \"\\\"loading_app\\\" does not have translations for all languages provided by\", \"After setting LANGUAGE, the cache should be cleared and languages\", \"With a non-English LANGUAGE_CODE and if the active language is English\", \"test_get_language_from_path_null (i18n.tests.MiscTests.test_get_language_from_path_null)\", \"test_get_language_from_path_real (i18n.tests.MiscTests.test_get_language_from_path_real)\", \"test_get_supported_language_variant_null (i18n.tests.MiscTests.test_get_supported_language_variant_null)\", \"test_get_supported_language_variant_real (i18n.tests.MiscTests.test_get_supported_language_variant_real)\", \"test_i18n_patterns_returns_list (i18n.tests.MiscTests.test_i18n_patterns_returns_list)\", \"test_parse_language_cookie (i18n.tests.MiscTests.test_parse_language_cookie)\", \"test_parse_literal_http_header (i18n.tests.MiscTests.test_parse_literal_http_header)\", \"Testing HTTP header parsing. First, we test that we can parse the\", \"Some languages may have special fallbacks that don't follow the simple\", \"Subsequent language codes should be used when the language code is not\", \"Some browsers (Firefox, IE, etc.) use deprecated language codes. As these\", \"test_locale_paths_override_app_translation (i18n.tests.LocalePathsResolutionOrderI18NTests.test_locale_paths_override_app_translation)\", \"test_locale_paths_translation (i18n.tests.LocalePathsResolutionOrderI18NTests.test_locale_paths_translation)\", \"test_app_translation (i18n.tests.AppResolutionOrderI18NTests.test_app_translation)\", \"test_streaming_response (i18n.tests.LocaleMiddlewareTests.test_streaming_response)\", \"Empty value must stay empty after being translated (#23196).\", \"test_language_bidi (i18n.tests.TranslationTests.test_language_bidi)\", \"test_language_bidi_null (i18n.tests.TranslationTests.test_language_bidi_null)\", \"Format string interpolation should work with *_lazy objects.\", \"test_lazy_pickle (i18n.tests.TranslationTests.test_lazy_pickle)\", \"Translations on files with Mac or DOS end of lines will be converted\", \"Normally, French has 2 plurals. As other/locale/fr/LC_MESSAGES/django.po\", \"test_ngettext_lazy (i18n.tests.TranslationTests.test_ngettext_lazy)\", \"test_ngettext_lazy_bool (i18n.tests.TranslationTests.test_ngettext_lazy_bool)\", \"test_ngettext_lazy_format_style (i18n.tests.TranslationTests.test_ngettext_lazy_format_style)\", \"test_ngettext_lazy_pickle (i18n.tests.TranslationTests.test_ngettext_lazy_pickle)\", \"test_override (i18n.tests.TranslationTests.test_override)\", \"test_override_decorator (i18n.tests.TranslationTests.test_override_decorator)\", \"The language restored is the one used when the function was\", \"test_pgettext (i18n.tests.TranslationTests.test_pgettext)\", \"Test plurals with ngettext. French differs from English in that 0 is singular.\", \"test_plural_null (i18n.tests.TranslationTests.test_plural_null)\", \"Translating a string requiring no auto-escaping with gettext or pgettext\", \"test_to_language (i18n.tests.TranslationTests.test_to_language)\", \"test_to_locale (i18n.tests.TranslationTests.test_to_locale)\", \"With i18n_patterns(..., prefix_default_language=False), the default\", \"A request for a nonexistent URL shouldn't cause a redirect to\", \"test_other_lang_with_prefix (i18n.tests.UnprefixedDefaultLanguageTests.test_other_lang_with_prefix)\", \"test_page_with_dash (i18n.tests.UnprefixedDefaultLanguageTests.test_page_with_dash)\", \"'Accept-Language' is respected.\", \"A language set in the cookies is respected.\", \"test_unprefixed_language_with_non_valid_language (i18n.tests.UnprefixedDefaultLanguageTests.test_unprefixed_language_with_non_valid_language)\", \"The first input format for DATE_INPUT_FORMATS, TIME_INPUT_FORMATS, and\", \"test_all_format_strings (i18n.tests.FormattingTests.test_all_format_strings)\", \"The active locale's formats take precedence over the default settings\", \"test_format_arbitrary_settings (i18n.tests.FormattingTests.test_format_arbitrary_settings)\", \"test_get_custom_format (i18n.tests.FormattingTests.test_get_custom_format)\", \"test_get_format_lazy_format (i18n.tests.FormattingTests.test_get_format_lazy_format)\", \"test_get_format_modules_lang (i18n.tests.FormattingTests.test_get_format_modules_lang)\", \"Tests the iter_format_modules function.\", \"Tests the iter_format_modules function always yields format modules in\", \"test_l10n_enabled (i18n.tests.FormattingTests.test_l10n_enabled)\", \"Localization of numbers\", \"Test the {% localize %} templatetag and the localize/unlocalize filters.\", \"Form input with 'as_hidden' or 'as_text' is correctly localized.\", \"Tests if form input is correctly localized\", \"test_localized_input_func (i18n.tests.FormattingTests.test_localized_input_func)\", \"A string representation is returned for unlocalized numbers.\", \"Tests django.utils.formats.sanitize_separators.\", \"test_sanitize_strftime_format (i18n.tests.FormattingTests.test_sanitize_strftime_format)\", \"test_sanitize_strftime_format_with_escaped_percent (i18n.tests.FormattingTests.test_sanitize_strftime_format_with_escaped_percent)\", \"Check if sublocales fall back to the main locale\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.769382",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}