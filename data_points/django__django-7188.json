{
  "repo": "django/django",
  "instance_id": "django__django-7188",
  "base_commit": "0368d63a78b07e794138a65216b91eadbb47fc2f",
  "patch": "diff --git a/django/contrib/auth/apps.py b/django/contrib/auth/apps.py\n--- a/django/contrib/auth/apps.py\n+++ b/django/contrib/auth/apps.py\n@@ -7,14 +7,26 @@\n from .management import create_permissions\n \n \n-class AuthConfig(AppConfig):\n+class BaseAuthConfig(AppConfig):\n+    \"\"\"\n+    AppConfig which assumes that the auth models don't exist.\n+    \"\"\"\n     name = 'django.contrib.auth'\n     verbose_name = _(\"Authentication and Authorization\")\n \n     def ready(self):\n+        checks.register(check_user_model, checks.Tags.models)\n+\n+\n+class AuthConfig(BaseAuthConfig):\n+    \"\"\"\n+    The default AppConfig for auth.\n+    \"\"\"\n+\n+    def ready(self):\n+        super(AuthConfig, self).ready()\n         post_migrate.connect(\n             create_permissions,\n             dispatch_uid=\"django.contrib.auth.management.create_permissions\"\n         )\n-        checks.register(check_user_model, checks.Tags.models)\n         checks.register(check_models_permissions, checks.Tags.models)\n",
  "test_patch": "diff --git a/tests/auth_tests/test_apps.py b/tests/auth_tests/test_apps.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/auth_tests/test_apps.py\n@@ -0,0 +1,61 @@\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import tempfile\n+import unittest\n+\n+from django.db import ConnectionHandler\n+\n+SETTINGS = \"\"\"\n+SECRET_KEY = 'django_auth_tests_secret_key'\n+\n+INSTALLED_APPS = [\n+    'django.contrib.auth.apps.BaseAuthConfig',\n+    'django.contrib.contenttypes',\n+]\n+\n+MIGRATION_MODULES = {'auth': None}\n+\n+DATABASES = %(databases)r\n+\"\"\"\n+\n+\n+class AppConfigTests(unittest.TestCase):\n+    def test_no_migrations(self):\n+        project_path = tempfile.mkdtemp()\n+        try:\n+            databases = {\n+                'default': {\n+                    'ENGINE': 'django.db.backends.sqlite3',\n+                    'NAME': os.path.join(project_path, 'db.sqlite3'),\n+                }\n+            }\n+\n+            with open(os.path.join(project_path, 'no_migrations.py'), 'w') as fp:\n+                fp.write(SETTINGS % {'databases': databases})\n+\n+            with open(os.devnull, 'wb') as devnull:\n+                cmd = [\n+                    sys.executable,\n+                    '-m', 'django',\n+                    'migrate',\n+                    '--settings', 'no_migrations',\n+                    '--pythonpath', project_path,\n+                ]\n+                returncode = subprocess.call(cmd, stdout=devnull, stderr=devnull)\n+\n+            # Migrate command ran without errors.\n+            self.assertEqual(returncode, 0)\n+\n+            # Auth tables weren't created.\n+            conns = ConnectionHandler(databases)\n+            try:\n+                self.assertEqual(\n+                    set(conns['default'].introspection.table_names()),\n+                    {'django_content_type', 'django_migrations'},\n+                )\n+            finally:\n+                conns.close_all()\n+        finally:\n+            shutil.rmtree(project_path)\n",
  "problem_statement": "Allow auth machinery to be used without installing auth app\nDescription\n\t\nDjango projects should be able to use the auth machinery (like django.contrib.auth.middleware.AuthenticationMiddleware and django.contrib.auth.context_processors.auth) without having django.contrib.auth in INSTALLED_APPS\nSee \n​https://groups.google.com/forum/#!topic/django-developers/2DzLBbk8w-w\nThis ticket is for resolving the current issue in 1.9. I also want to write a test or two to prevent this issue from happening in the future.\n",
  "hints_text": "​https://github.com/django/django/pull/6420\nDe-assigning so it's clear this is available for a PyCon sprinter to finish up with tests.\nAnother patch attempt: ​https://github.com/django/django/pull/6779\nFWIW I don't see a lot of value in adding this constraint. Implementing it requires a fragile and untestable combination of inner imports to avoid touching the models module. If the only problem is to avoid creating tables in the database, add a MIGRATION_MODULES entry for the auth app that points to an empty package. I never tried it but I think it should work. If this workaround is confirmed to work, I propose to close this ticket as wontfix.\nInteresting idea. It works: MIGRATION_MODULES = { 'auth': None } My complaint was driven by the unnecessary clutter in my database when using a custom user model. So now that there is a reasonable solution, I'm fine with closing this.\nGreat! Thanks for reporting back.\nI found the above to be insufficient. Adding MIGRATION_MODULES as the only change to avoid the auth tables fails during migrations with the following trace: Traceback (most recent call last): File \".../manage.py\", line 9, in <module> execute_from_command_line(sys.argv) File \".../venv/lib64/python3.5/site-packages/django/core/management/__init__.py\", line 367, in execute_from_command_line utility.execute() File \".../venv/lib64/python3.5/site-packages/django/core/management/__init__.py\", line 359, in execute self.fetch_command(subcommand).run_from_argv(self.argv) File \".../venv/lib64/python3.5/site-packages/django/core/management/base.py\", line 305, in run_from_argv self.execute(*args, **cmd_options) File \".../venv/lib64/python3.5/site-packages/django/core/management/base.py\", line 356, in execute output = self.handle(*args, **options) File \".../venv/lib64/python3.5/site-packages/django/core/management/commands/migrate.py\", line 222, in handle self.verbosity, self.interactive, connection.alias, apps=post_migrate_apps, plan=plan, File \".../venv/lib64/python3.5/site-packages/django/core/management/sql.py\", line 53, in emit_post_migrate_signal **kwargs File \".../venv/lib64/python3.5/site-packages/django/dispatch/dispatcher.py\", line 191, in send response = receiver(signal=self, sender=sender, **named) File \".../venv/lib64/python3.5/site-packages/django/contrib/auth/management/__init__.py\", line 75, in create_permissions \"content_type\", \"codename\" File \".../venv/lib64/python3.5/site-packages/django/db/models/query.py\", line 256, in __iter__ self._fetch_all() File \".../venv/lib64/python3.5/site-packages/django/db/models/query.py\", line 1085, in _fetch_all self._result_cache = list(self.iterator()) File \".../venv/lib64/python3.5/site-packages/django/db/models/query.py\", line 125, in __iter__ for row in compiler.results_iter(): File \".../venv/lib64/python3.5/site-packages/django/db/models/sql/compiler.py\", line 789, in results_iter results = self.execute_sql(MULTI) File \".../venv/lib64/python3.5/site-packages/django/db/models/sql/compiler.py\", line 835, in execute_sql cursor.execute(sql, params) File \".../venv/lib64/python3.5/site-packages/django/db/backends/utils.py\", line 79, in execute return super(CursorDebugWrapper, self).execute(sql, params) File \".../venv/lib64/python3.5/site-packages/django/db/backends/utils.py\", line 64, in execute return self.cursor.execute(sql, params) File \".../venv/lib64/python3.5/site-packages/django/db/utils.py\", line 94, in __exit__ six.reraise(dj_exc_type, dj_exc_value, traceback) File \".../venv/lib64/python3.5/site-packages/django/utils/six.py\", line 685, in reraise raise value.with_traceback(tb) File \".../venv/lib64/python3.5/site-packages/django/db/backends/utils.py\", line 64, in execute return self.cursor.execute(sql, params) django.db.utils.ProgrammingError: relation \"auth_permission\" does not exist LINE 1: ...ntent_type_id\", \"auth_permission\".\"codename\" FROM \"auth_perm... This fails becuase the auth's AppConfig ​adds a post_migrate callback that requires the auth_permission table to exist. A project could avoid this by overriding the auth's AppConfig. I think this could be easier for projects if the auth's AppConfig was split into two classes, one base version that can be used without the auth tables and one that matches the current implementation. This would be a backwards compatible change that would allow the MIGRATION_MODULES change noted above. For example: class BaseAuthConfig(AppConfig): name = 'django.contrib.auth' verbose_name = _(\"Authentication and Authorization\") def ready(self): checks.register(check_user_model, checks.Tags.models) class AuthConfig(BaseAuthConfig): def ready(self): post_migrate.connect( create_permissions, dispatch_uid=\"django.contrib.auth.management.create_permissions\" ) checks.register(check_models_permissions, checks.Tags.models)\n​PR implementing the AppConfigs described above. Not sure how to best add a test for this though. Looking for advice. Details in the PR.",
  "created_at": "2016-08-31T04:07:17Z",
  "version": "1.11",
  "FAIL_TO_PASS": "[\"test_no_migrations (auth_tests.test_apps.AppConfigTests)\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "3545e844885608932a692d952c12cd863e2320b5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.781389",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}