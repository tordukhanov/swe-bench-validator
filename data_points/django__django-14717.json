{
  "repo": "django/django",
  "instance_id": "django__django-14717",
  "base_commit": "40d3cec22dff8d242384fab02e446932c92ae220",
  "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1103,6 +1103,16 @@ class CommaSeparatedIntegerField(CharField):\n     }\n \n \n+def _to_naive(value):\n+    if timezone.is_aware(value):\n+        value = timezone.make_naive(value, timezone.utc)\n+    return value\n+\n+\n+def _get_naive_now():\n+    return _to_naive(timezone.now())\n+\n+\n class DateTimeCheckMixin:\n \n     def check(self, **kwargs):\n@@ -1134,6 +1144,42 @@ def _check_mutually_exclusive_options(self):\n     def _check_fix_default_value(self):\n         return []\n \n+    # Concrete subclasses use this in their implementations of\n+    # _check_fix_default_value().\n+    def _check_if_value_fixed(self, value, now=None):\n+        \"\"\"\n+        Check if the given value appears to have been provided as a \"fixed\"\n+        time value, and include a warning in the returned list if it does. The\n+        value argument must be a date object or aware/naive datetime object. If\n+        now is provided, it must be a naive datetime object.\n+        \"\"\"\n+        if now is None:\n+            now = _get_naive_now()\n+        offset = datetime.timedelta(seconds=10)\n+        lower = now - offset\n+        upper = now + offset\n+        if isinstance(value, datetime.datetime):\n+            value = _to_naive(value)\n+        else:\n+            assert isinstance(value, datetime.date)\n+            lower = lower.date()\n+            upper = upper.date()\n+        if lower <= value <= upper:\n+            return [\n+                checks.Warning(\n+                    'Fixed default value provided.',\n+                    hint=(\n+                        'It seems you set a fixed date / time / datetime '\n+                        'value as default for this field. This may not be '\n+                        'what you want. If you want to have the current date '\n+                        'as default, use `django.utils.timezone.now`'\n+                    ),\n+                    obj=self,\n+                    id='fields.W161',\n+                )\n+            ]\n+        return []\n+\n \n class DateField(DateTimeCheckMixin, Field):\n     empty_strings_allowed = False\n@@ -1161,37 +1207,16 @@ def _check_fix_default_value(self):\n         if not self.has_default():\n             return []\n \n-        now = timezone.now()\n-        if not timezone.is_naive(now):\n-            now = timezone.make_naive(now, timezone.utc)\n         value = self.default\n         if isinstance(value, datetime.datetime):\n-            if not timezone.is_naive(value):\n-                value = timezone.make_naive(value, timezone.utc)\n-            value = value.date()\n+            value = _to_naive(value).date()\n         elif isinstance(value, datetime.date):\n-            # Nothing to do, as dates don't have tz information\n             pass\n         else:\n             # No explicit date / datetime value -- no checks necessary\n             return []\n-        offset = datetime.timedelta(days=1)\n-        lower = (now - offset).date()\n-        upper = (now + offset).date()\n-        if lower <= value <= upper:\n-            return [\n-                checks.Warning(\n-                    'Fixed default value provided.',\n-                    hint='It seems you set a fixed date / time / datetime '\n-                         'value as default for this field. This may not be '\n-                         'what you want. If you want to have the current date '\n-                         'as default, use `django.utils.timezone.now`',\n-                    obj=self,\n-                    id='fields.W161',\n-                )\n-            ]\n-\n-        return []\n+        # At this point, value is a date object.\n+        return self._check_if_value_fixed(value)\n \n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n@@ -1301,39 +1326,10 @@ def _check_fix_default_value(self):\n         if not self.has_default():\n             return []\n \n-        now = timezone.now()\n-        if not timezone.is_naive(now):\n-            now = timezone.make_naive(now, timezone.utc)\n         value = self.default\n-        if isinstance(value, datetime.datetime):\n-            second_offset = datetime.timedelta(seconds=10)\n-            lower = now - second_offset\n-            upper = now + second_offset\n-            if timezone.is_aware(value):\n-                value = timezone.make_naive(value, timezone.utc)\n-        elif isinstance(value, datetime.date):\n-            second_offset = datetime.timedelta(seconds=10)\n-            lower = now - second_offset\n-            lower = datetime.datetime(lower.year, lower.month, lower.day)\n-            upper = now + second_offset\n-            upper = datetime.datetime(upper.year, upper.month, upper.day)\n-            value = datetime.datetime(value.year, value.month, value.day)\n-        else:\n-            # No explicit date / datetime value -- no checks necessary\n-            return []\n-        if lower <= value <= upper:\n-            return [\n-                checks.Warning(\n-                    'Fixed default value provided.',\n-                    hint='It seems you set a fixed date / time / datetime '\n-                         'value as default for this field. This may not be '\n-                         'what you want. If you want to have the current date '\n-                         'as default, use `django.utils.timezone.now`',\n-                    obj=self,\n-                    id='fields.W161',\n-                )\n-            ]\n-\n+        if isinstance(value, (datetime.datetime, datetime.date)):\n+            return self._check_if_value_fixed(value)\n+        # No explicit date / datetime value -- no checks necessary.\n         return []\n \n     def get_internal_type(self):\n@@ -2197,40 +2193,19 @@ def _check_fix_default_value(self):\n         if not self.has_default():\n             return []\n \n-        now = timezone.now()\n-        if not timezone.is_naive(now):\n-            now = timezone.make_naive(now, timezone.utc)\n         value = self.default\n         if isinstance(value, datetime.datetime):\n-            second_offset = datetime.timedelta(seconds=10)\n-            lower = now - second_offset\n-            upper = now + second_offset\n-            if timezone.is_aware(value):\n-                value = timezone.make_naive(value, timezone.utc)\n+            now = None\n         elif isinstance(value, datetime.time):\n-            second_offset = datetime.timedelta(seconds=10)\n-            lower = now - second_offset\n-            upper = now + second_offset\n+            now = _get_naive_now()\n+            # This will not use the right date in the race condition where now\n+            # is just before the date change and value is just past 0:00.\n             value = datetime.datetime.combine(now.date(), value)\n-            if timezone.is_aware(value):\n-                value = timezone.make_naive(value, timezone.utc).time()\n         else:\n             # No explicit time / datetime value -- no checks necessary\n             return []\n-        if lower <= value <= upper:\n-            return [\n-                checks.Warning(\n-                    'Fixed default value provided.',\n-                    hint='It seems you set a fixed date / time / datetime '\n-                         'value as default for this field. This may not be '\n-                         'what you want. If you want to have the current date '\n-                         'as default, use `django.utils.timezone.now`',\n-                    obj=self,\n-                    id='fields.W161',\n-                )\n-            ]\n-\n-        return []\n+        # At this point, value is a datetime object.\n+        return self._check_if_value_fixed(value, now=now)\n \n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -747,14 +747,16 @@ def test_fix_default_value(self):\n         class Model(models.Model):\n             field_dt = models.TimeField(default=now())\n             field_t = models.TimeField(default=now().time())\n+            # Timezone-aware time object (when USE_TZ=True).\n+            field_tz = models.TimeField(default=now().timetz())\n             field_now = models.DateField(default=now)\n \n-        field_dt = Model._meta.get_field('field_dt')\n-        field_t = Model._meta.get_field('field_t')\n-        field_now = Model._meta.get_field('field_now')\n-        errors = field_dt.check()\n-        errors.extend(field_t.check())\n-        errors.extend(field_now.check())  # doesn't raise a warning\n+        names = ['field_dt', 'field_t', 'field_tz', 'field_now']\n+        fields = [Model._meta.get_field(name) for name in names]\n+        errors = []\n+        for field in fields:\n+            errors.extend(field.check())\n+\n         self.assertEqual(errors, [\n             DjangoWarning(\n                 'Fixed default value provided.',\n@@ -762,7 +764,7 @@ class Model(models.Model):\n                      'value as default for this field. This may not be '\n                      'what you want. If you want to have the current date '\n                      'as default, use `django.utils.timezone.now`',\n-                obj=field_dt,\n+                obj=fields[0],\n                 id='fields.W161',\n             ),\n             DjangoWarning(\n@@ -771,9 +773,21 @@ class Model(models.Model):\n                      'value as default for this field. This may not be '\n                      'what you want. If you want to have the current date '\n                      'as default, use `django.utils.timezone.now`',\n-                obj=field_t,\n+                obj=fields[1],\n                 id='fields.W161',\n-            )\n+            ),\n+            DjangoWarning(\n+                'Fixed default value provided.',\n+                hint=(\n+                    'It seems you set a fixed date / time / datetime value as '\n+                    'default for this field. This may not be what you want. '\n+                    'If you want to have the current date as default, use '\n+                    '`django.utils.timezone.now`'\n+                ),\n+                obj=fields[2],\n+                id='fields.W161',\n+            ),\n+            # field_now doesn't raise a warning.\n         ])\n \n     @override_settings(USE_TZ=True)\n",
  "problem_statement": "Time-related _check_fix_default_value() methods can be optimized / simplified and have a bug\nDescription\n\t\nI noticed that three of the _check_fix_default_value() method definitions in django/db/models/fields/__init__.py can be simplified. Here is one of them: ​https://github.com/django/django/blob/fe074c96a343530beea50fbdd0803d3e7b739e8e/django/db/models/fields/__init__.py#L1156-L1167\nFor example, in each of them, timezone.now() is called even when the return value isn't needed / won't be used.\n",
  "hints_text": "When I started looking at this, I noticed there is a bug on this line: ​https://github.com/django/django/blob/fe074c96a343530beea50fbdd0803d3e7b739e8e/django/db/models/fields/__init__.py#L2216 It can be triggered by the following when USE_TZ = True: from django.db import models from django.utils.timezone import now class MyModel(models.Model): tz = models.TimeField(default=now().timetz()) class Meta: app_label = 'test' field = MyModel._meta.get_field('tz') field.check() It results in: Traceback (most recent call last): File \"<console>\", line 1, in <module> File \"/.../django/db/models/fields/__init__.py\", line 1112, in check *self._check_fix_default_value(), File \"/.../django/db/models/fields/__init__.py\", line 2220, in _check_fix_default_value if lower <= value <= upper: TypeError: '<=' not supported between instances of 'datetime.datetime' and 'datetime.time' This case is not covered in the tests here: ​https://github.com/django/django/blob/fe074c96a343530beea50fbdd0803d3e7b739e8e/tests/invalid_models_tests/test_ordinary_fields.py#L743-L750",
  "created_at": "2021-07-29T18:53:00Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.TimeFieldTests)\"]",
  "PASS_TO_PASS": "[\"test_auto_now_and_auto_now_add_raise_error (invalid_models_tests.test_ordinary_fields.DateFieldTests)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.DateFieldTests)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.DateFieldTests)\", \"test_non_nullable_blank (invalid_models_tests.test_ordinary_fields.GenericIPAddressFieldTests)\", \"test_forbidden_files_and_folders (invalid_models_tests.test_ordinary_fields.FilePathFieldTests)\", \"test_str_default_value (invalid_models_tests.test_ordinary_fields.BinaryFieldTests)\", \"test_valid_default_value (invalid_models_tests.test_ordinary_fields.BinaryFieldTests)\", \"test_choices_named_group (invalid_models_tests.test_ordinary_fields.UUIDFieldTests)\", \"test_max_length_warning (invalid_models_tests.test_ordinary_fields.IntegerFieldTests)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.DateTimeFieldTests)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.DateTimeFieldTests)\", \"test_max_length_warning (invalid_models_tests.test_ordinary_fields.AutoFieldTests)\", \"test_primary_key (invalid_models_tests.test_ordinary_fields.AutoFieldTests)\", \"test_valid_case (invalid_models_tests.test_ordinary_fields.AutoFieldTests)\", \"test_bad_values_of_max_digits_and_decimal_places (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_decimal_places_greater_than_max_digits (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_negative_max_digits_and_decimal_places (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_required_attributes (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_valid_field (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_db_collation (invalid_models_tests.test_ordinary_fields.TextFieldTests)\", \"test_db_collation_required_db_features (invalid_models_tests.test_ordinary_fields.TextFieldTests)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.TimeFieldTests)\", \"test_primary_key (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_upload_to_callable_not_checked (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_upload_to_starts_with_slash (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_valid_case (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_valid_default_case (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_invalid_default (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_valid_callable_default (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_valid_default (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_valid_default_none (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_bad_db_index_value (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_bad_max_length_value (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_bad_validators (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_containing_lazy (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_containing_non_pairs (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_in_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group_bad_structure (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group_lazy (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group_non_pairs (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_db_collation (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_db_collation_required_db_features (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_iterable_of_iterable_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_lazy_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_missing_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_negative_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_non_iterable_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"Two letters isn't a valid choice pair.\", \"test_str_max_length_type (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_str_max_length_value (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_valid_field (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_pillow_installed (invalid_models_tests.test_ordinary_fields.ImageFieldTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.700349",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}