{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-5205",
  "base_commit": "3a4a815c41badd1a6bac958aa18ddeb0c16cd202",
  "patch": "diff --git a/src/_pytest/junitxml.py b/src/_pytest/junitxml.py\n--- a/src/_pytest/junitxml.py\n+++ b/src/_pytest/junitxml.py\n@@ -345,6 +345,45 @@ def add_attr_noop(name, value):\n     return attr_func\n \n \n+def _check_record_param_type(param, v):\n+    \"\"\"Used by record_testsuite_property to check that the given parameter name is of the proper\n+    type\"\"\"\n+    __tracebackhide__ = True\n+    if not isinstance(v, six.string_types):\n+        msg = \"{param} parameter needs to be a string, but {g} given\"\n+        raise TypeError(msg.format(param=param, g=type(v).__name__))\n+\n+\n+@pytest.fixture(scope=\"session\")\n+def record_testsuite_property(request):\n+    \"\"\"\n+    Records a new ``<property>`` tag as child of the root ``<testsuite>``. This is suitable to\n+    writing global information regarding the entire test suite, and is compatible with ``xunit2`` JUnit family.\n+\n+    This is a ``session``-scoped fixture which is called with ``(name, value)``. Example:\n+\n+    .. code-block:: python\n+\n+        def test_foo(record_testsuite_property):\n+            record_testsuite_property(\"ARCH\", \"PPC\")\n+            record_testsuite_property(\"STORAGE_TYPE\", \"CEPH\")\n+\n+    ``name`` must be a string, ``value`` will be converted to a string and properly xml-escaped.\n+    \"\"\"\n+\n+    __tracebackhide__ = True\n+\n+    def record_func(name, value):\n+        \"\"\"noop function in case --junitxml was not passed in the command-line\"\"\"\n+        __tracebackhide__ = True\n+        _check_record_param_type(\"name\", name)\n+\n+    xml = getattr(request.config, \"_xml\", None)\n+    if xml is not None:\n+        record_func = xml.add_global_property  # noqa\n+    return record_func\n+\n+\n def pytest_addoption(parser):\n     group = parser.getgroup(\"terminal reporting\")\n     group.addoption(\n@@ -444,6 +483,7 @@ def __init__(\n         self.node_reporters = {}  # nodeid -> _NodeReporter\n         self.node_reporters_ordered = []\n         self.global_properties = []\n+\n         # List of reports that failed on call but teardown is pending.\n         self.open_reports = []\n         self.cnt_double_fail_tests = 0\n@@ -632,7 +672,9 @@ def pytest_terminal_summary(self, terminalreporter):\n         terminalreporter.write_sep(\"-\", \"generated xml file: %s\" % (self.logfile))\n \n     def add_global_property(self, name, value):\n-        self.global_properties.append((str(name), bin_xml_escape(value)))\n+        __tracebackhide__ = True\n+        _check_record_param_type(\"name\", name)\n+        self.global_properties.append((name, bin_xml_escape(value)))\n \n     def _get_global_properties_node(self):\n         \"\"\"Return a Junit node containing custom properties, if any.\n",
  "test_patch": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1243,6 +1243,53 @@ class Report(BaseReport):\n     ), \"The URL did not get written to the xml\"\n \n \n+def test_record_testsuite_property(testdir):\n+    testdir.makepyfile(\n+        \"\"\"\n+        def test_func1(record_testsuite_property):\n+            record_testsuite_property(\"stats\", \"all good\")\n+\n+        def test_func2(record_testsuite_property):\n+            record_testsuite_property(\"stats\", 10)\n+    \"\"\"\n+    )\n+    result, dom = runandparse(testdir)\n+    assert result.ret == 0\n+    node = dom.find_first_by_tag(\"testsuite\")\n+    properties_node = node.find_first_by_tag(\"properties\")\n+    p1_node = properties_node.find_nth_by_tag(\"property\", 0)\n+    p2_node = properties_node.find_nth_by_tag(\"property\", 1)\n+    p1_node.assert_attr(name=\"stats\", value=\"all good\")\n+    p2_node.assert_attr(name=\"stats\", value=\"10\")\n+\n+\n+def test_record_testsuite_property_junit_disabled(testdir):\n+    testdir.makepyfile(\n+        \"\"\"\n+        def test_func1(record_testsuite_property):\n+            record_testsuite_property(\"stats\", \"all good\")\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    assert result.ret == 0\n+\n+\n+@pytest.mark.parametrize(\"junit\", [True, False])\n+def test_record_testsuite_property_type_checking(testdir, junit):\n+    testdir.makepyfile(\n+        \"\"\"\n+        def test_func1(record_testsuite_property):\n+            record_testsuite_property(1, 2)\n+    \"\"\"\n+    )\n+    args = (\"--junitxml=tests.xml\",) if junit else ()\n+    result = testdir.runpytest(*args)\n+    assert result.ret == 1\n+    result.stdout.fnmatch_lines(\n+        [\"*TypeError: name parameter needs to be a string, but int given\"]\n+    )\n+\n+\n @pytest.mark.parametrize(\"suite_name\", [\"my_suite\", \"\"])\n def test_set_suite_name(testdir, suite_name):\n     if suite_name:\n",
  "problem_statement": "Invalid XML schema for <properties> tags in JUnit reports \nThe problem:\r\n\r\nJUnit breaks when it reads an XML generated by pytest if plugins make use of  `record-property`. This behavior happens with newer versions of  hypothesis (https://github.com/HypothesisWorks/hypothesis/issues/1935).\r\n\r\n```\r\n[xUnit] [ERROR] - The result file '/somewhere/tests/pytests.xml' for the metric 'JUnit' is not valid. The result file has been skipped.\r\n```\r\n\r\nIn fact, as already mentioned in https://github.com/pytest-dev/pytest/issues/1126#issuecomment-484581283,  `record-property` is adding `<properties>` inside `<testcase>` which seems to be wrong (it should be inside `<testsuite>`). See: https://github.com/windyroad/JUnit-Schema/blob/master/JUnit.xsd .\r\n\r\nIt happens with all junit families.\r\n\r\nReproducing:\r\n\r\n```\r\n$ pip list\r\nPackage        Version \r\n-------------- --------\r\napipkg         1.5     \r\natomicwrites   1.3.0   \r\nattrs          19.1.0  \r\ncertifi        2019.3.9\r\nexecnet        1.6.0   \r\nhypothesis     4.18.3  \r\nmore-itertools 4.3.0   \r\npip            19.1    \r\npluggy         0.9.0   \r\npy             1.8.0   \r\npytest         4.4.1   \r\npytest-forked  1.0.2   \r\npytest-xdist   1.28.0  \r\nsetuptools     41.0.1  \r\nsix            1.12.0  \r\nwheel          0.33.1 \r\n```\r\n\r\n`test_xml_generation.py`\r\n```\r\nfrom hypothesis import given, strategies\r\n\r\n\r\n@given(x=strategies.integers(1, 10,))\r\ndef test_xml_generation(x):\r\n    assert 1 <= x <= 10\r\n```\r\n\r\n```\r\n$ pytest --junitxml=report.xml\r\n```\r\n\r\n`report.xml`\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<testsuite errors=\"0\" failures=\"0\" name=\"pytest\" skipped=\"0\" tests=\"1\" time=\"0.211\">\r\n    <testcase classname=\"test_xml_generation\" file=\"test_xml_generation.py\" line=\"3\" name=\"test_xml_generation\"\r\n              time=\"0.074\">\r\n        <properties>\r\n            <property name=\"hypothesis-stats\"\r\n                      value=\"[&apos;test_xml_generation.py::test_xml_generation:&apos;, &apos;&apos;, &apos;  - 100 passing examples, 0 failing examples, 0 invalid examples&apos;, &apos;  - Typical runtimes: &lt; 1ms&apos;, &apos;  - Fraction of time spent in data generation: ~ 49%&apos;, &apos;  - Stopped because settings.max_examples=100&apos;, &apos;&apos;]\"/>\r\n        </properties>\r\n    </testcase>\r\n</testsuite>\r\n```\r\n\r\nI was trying to create a PR to fix this, but when I saw https://github.com/pytest-dev/pytest/blob/7dcd9bf5add337686ec6f2ee81b24e8424319dba/src/_pytest/junitxml.py code I realized that what is needed to do could have more implications that I though. I think that nobody uses this feature with JUnit (as it breaks) and removing that is something to think about.\r\n\r\n\n",
  "hints_text": "cc @nicoddemus \nThanks @danilomendesdias! ",
  "created_at": "2019-05-03T19:34:15Z",
  "version": "4.4",
  "FAIL_TO_PASS": "[\"testing/test_junitxml.py::test_record_testsuite_property\", \"testing/test_junitxml.py::test_record_testsuite_property_junit_disabled\", \"testing/test_junitxml.py::test_record_testsuite_property_type_checking[True]\", \"testing/test_junitxml.py::test_record_testsuite_property_type_checking[False]\"]",
  "PASS_TO_PASS": "[\"testing/test_junitxml.py::test_mangle_test_address\", \"testing/test_junitxml.py::test_dont_configure_on_slaves\", \"testing/test_junitxml.py::test_invalid_xml_escape\", \"testing/test_junitxml.py::test_logxml_path_expansion\", \"testing/test_junitxml.py::TestPython::test_summing_simple\", \"testing/test_junitxml.py::TestPython::test_summing_simple_with_errors\", \"testing/test_junitxml.py::TestPython::test_timing_function\", \"testing/test_junitxml.py::TestPython::test_junit_duration_report[call]\", \"testing/test_junitxml.py::TestPython::test_junit_duration_report[total]\", \"testing/test_junitxml.py::TestPython::test_setup_error\", \"testing/test_junitxml.py::TestPython::test_teardown_error\", \"testing/test_junitxml.py::TestPython::test_call_failure_teardown_error\", \"testing/test_junitxml.py::TestPython::test_skip_contains_name_reason\", \"testing/test_junitxml.py::TestPython::test_mark_skip_contains_name_reason\", \"testing/test_junitxml.py::TestPython::test_mark_skipif_contains_name_reason\", \"testing/test_junitxml.py::TestPython::test_mark_skip_doesnt_capture_output\", \"testing/test_junitxml.py::TestPython::test_classname_instance\", \"testing/test_junitxml.py::TestPython::test_classname_nested_dir\", \"testing/test_junitxml.py::TestPython::test_internal_error\", \"testing/test_junitxml.py::TestPython::test_failure_function[no]\", \"testing/test_junitxml.py::TestPython::test_failure_function[system-out]\", \"testing/test_junitxml.py::TestPython::test_failure_function[system-err]\", \"testing/test_junitxml.py::TestPython::test_failure_verbose_message\", \"testing/test_junitxml.py::TestPython::test_failure_escape\", \"testing/test_junitxml.py::TestPython::test_junit_prefixing\", \"testing/test_junitxml.py::TestPython::test_xfailure_function\", \"testing/test_junitxml.py::TestPython::test_xfailure_marker\", \"testing/test_junitxml.py::TestPython::test_xfail_captures_output_once\", \"testing/test_junitxml.py::TestPython::test_xfailure_xpass\", \"testing/test_junitxml.py::TestPython::test_xfailure_xpass_strict\", \"testing/test_junitxml.py::TestPython::test_collect_error\", \"testing/test_junitxml.py::TestPython::test_unicode\", \"testing/test_junitxml.py::TestPython::test_assertion_binchars\", \"testing/test_junitxml.py::TestPython::test_pass_captures_stdout\", \"testing/test_junitxml.py::TestPython::test_pass_captures_stderr\", \"testing/test_junitxml.py::TestPython::test_setup_error_captures_stdout\", \"testing/test_junitxml.py::TestPython::test_setup_error_captures_stderr\", \"testing/test_junitxml.py::TestPython::test_avoid_double_stdout\", \"testing/test_junitxml.py::TestNonPython::test_summing_simple\", \"testing/test_junitxml.py::test_nullbyte\", \"testing/test_junitxml.py::test_nullbyte_replace\", \"testing/test_junitxml.py::test_logxml_changingdir\", \"testing/test_junitxml.py::test_logxml_makedir\", \"testing/test_junitxml.py::test_logxml_check_isdir\", \"testing/test_junitxml.py::test_escaped_parametrized_names_xml\", \"testing/test_junitxml.py::test_double_colon_split_function_issue469\", \"testing/test_junitxml.py::test_double_colon_split_method_issue469\", \"testing/test_junitxml.py::test_unicode_issue368\", \"testing/test_junitxml.py::test_record_property\", \"testing/test_junitxml.py::test_record_property_same_name\", \"testing/test_junitxml.py::test_record_fixtures_without_junitxml[record_property]\", \"testing/test_junitxml.py::test_record_fixtures_without_junitxml[record_xml_attribute]\", \"testing/test_junitxml.py::test_record_attribute\", \"testing/test_junitxml.py::test_record_fixtures_xunit2[record_xml_attribute]\", \"testing/test_junitxml.py::test_record_fixtures_xunit2[record_property]\", \"testing/test_junitxml.py::test_runs_twice\", \"testing/test_junitxml.py::test_fancy_items_regression\", \"testing/test_junitxml.py::test_global_properties\", \"testing/test_junitxml.py::test_url_property\", \"testing/test_junitxml.py::test_set_suite_name[my_suite]\", \"testing/test_junitxml.py::test_set_suite_name[]\", \"testing/test_junitxml.py::test_escaped_skipreason_issue3533\"]",
  "environment_setup_commit": "4ccaa987d47566e3907f2f74167c4ab7997f622f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.926196",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}