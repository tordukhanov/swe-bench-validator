{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-7973",
  "base_commit": "4fc9f31af6c5659c3a59b66a387894c12203c946",
  "patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -72,6 +72,10 @@\n \n __doctest_skip__ = ['WCS.all_world2pix']\n \n+NAXIS_DEPRECATE_MESSAGE = \"\"\"\n+Private attributes \"_naxis1\" and \"naxis2\" have been deprecated since v3.1.\n+Instead use the \"pixel_shape\" property which returns a list of NAXISj keyword values.\n+\"\"\"\n \n if _wcs is not None:\n     _parsed_version = _wcs.__version__.split('.')\n@@ -698,9 +702,8 @@ def calc_footprint(self, header=None, undistort=True, axes=None, center=True):\n                 try:\n                     # classes that inherit from WCS and define naxis1/2\n                     # do not require a header parameter\n-                    naxis1 = self._naxis1\n-                    naxis2 = self._naxis2\n-                except AttributeError:\n+                    naxis1, naxis2 = self.pixel_shape\n+                except (AttributeError, TypeError):\n                     warnings.warn(\"Need a valid header in order to calculate footprint\\n\", AstropyUserWarning)\n                     return None\n             else:\n@@ -2669,23 +2672,29 @@ def footprint_to_file(self, filename='footprint.reg', color='green',\n             f.write(comments)\n             f.write('{}\\n'.format(coordsys))\n             f.write('polygon(')\n-            self.calc_footprint().tofile(f, sep=',')\n-            f.write(') # color={0}, width={1:d} \\n'.format(color, width))\n+            ftpr = self.calc_footprint()\n+            if ftpr is not None:\n+                ftpr.tofile(f, sep=',')\n+                f.write(') # color={0}, width={1:d} \\n'.format(color, width))\n \n     @property\n     def _naxis1(self):\n+        warnings.warn(NAXIS_DEPRECATE_MESSAGE, AstropyDeprecationWarning)\n         return self._naxis[0]\n \n     @_naxis1.setter\n     def _naxis1(self, value):\n+        warnings.warn(NAXIS_DEPRECATE_MESSAGE, AstropyDeprecationWarning)\n         self._naxis[0] = value\n \n     @property\n     def _naxis2(self):\n+        warnings.warn(NAXIS_DEPRECATE_MESSAGE, AstropyDeprecationWarning)\n         return self._naxis[1]\n \n     @_naxis2.setter\n     def _naxis2(self, value):\n+        warnings.warn(NAXIS_DEPRECATE_MESSAGE, AstropyDeprecationWarning)\n         self._naxis[1] = value\n \n     def _get_naxis(self, header=None):\n",
  "test_patch": "diff --git a/astropy/wcs/tests/test_wcs.py b/astropy/wcs/tests/test_wcs.py\n--- a/astropy/wcs/tests/test_wcs.py\n+++ b/astropy/wcs/tests/test_wcs.py\n@@ -17,6 +17,7 @@\n from ...utils.data import (\n     get_pkg_data_filenames, get_pkg_data_contents, get_pkg_data_filename)\n from ...utils.misc import NumpyRNGContext\n+from ...utils.exceptions import AstropyUserWarning\n from ...io import fits\n \n \n@@ -593,11 +594,12 @@ def test_footprint_to_file(tmpdir):\n     From github issue #1912\n     \"\"\"\n     # Arbitrary keywords from real data\n-    w = wcs.WCS({'CTYPE1': 'RA---ZPN', 'CRUNIT1': 'deg',\n-                 'CRPIX1': -3.3495999e+02, 'CRVAL1': 3.185790700000e+02,\n-                 'CTYPE2': 'DEC--ZPN', 'CRUNIT2': 'deg',\n-                 'CRPIX2': 3.0453999e+03, 'CRVAL2': 4.388538000000e+01,\n-                 'PV2_1': 1., 'PV2_3': 220.})\n+    hdr = {'CTYPE1': 'RA---ZPN', 'CRUNIT1': 'deg',\n+           'CRPIX1': -3.3495999e+02, 'CRVAL1': 3.185790700000e+02,\n+           'CTYPE2': 'DEC--ZPN', 'CRUNIT2': 'deg',\n+           'CRPIX2': 3.0453999e+03, 'CRVAL2': 4.388538000000e+01,\n+           'PV2_1': 1., 'PV2_3': 220., 'NAXIS1': 2048, 'NAXIS2': 1024}\n+    w = wcs.WCS(hdr)\n \n     testfile = str(tmpdir.join('test.txt'))\n     w.footprint_to_file(testfile)\n@@ -621,6 +623,12 @@ def test_footprint_to_file(tmpdir):\n     with pytest.raises(ValueError):\n         w.footprint_to_file(testfile, coordsys='FOO')\n \n+    del hdr['NAXIS1']\n+    del hdr['NAXIS2']\n+    w = wcs.WCS(hdr)\n+    with pytest.warns(AstropyUserWarning):\n+        w.footprint_to_file(testfile)\n+\n \n def test_validate_faulty_wcs():\n     \"\"\"\n",
  "problem_statement": "Record data size in the WCS object\nIt is clear that there are practical reasons to have a record of the original data size in the WCS object. This in the past has been recorded in public attributes `naxis1` and `naxis2` and subsequently in the private `_naxis1` and `_naxis2`.  There's  along thread on why this should  or should not be done in #4662.\r\nMore recently #5411 expanded this attribute to more than 2 axes. It also broke the ability to set the private attributes which was subsequently fixed in #5454 as a stop gap measure.\r\n\r\nWe need to fix this permanently starting with v 1.3. There are two proposed ways to do it.\r\n\r\n1. Add public `naxisj` attributes, populated by the FITS header `NAXISj` keywords.\r\n2. Introduce a subclass of `WCS` which adds those and leave the original WCS to represent strictly the FITS WCS standard and nothing more.\r\n\r\nEither way a deprecation process will accompany the change.\r\n\r\nThe purpose of this issue is to collect votes. I don't want to start a new long discussion. Keep in mind that #4662 is available for reference and only share new arguments.\r\n\r\nSince 1.3 is approaching we need to make a fast decision. So please share your preference here and volunteer for the work if possible.\n",
  "hints_text": "I support #1 of the two choices for reasons I mentioned in #5454.\n\nIn addition I want to mention that we already deviated from the FITS standard by adding the `d2im` distortion.\n\n:+1: for solution 1, for the reasons explained by @nden in https://github.com/astropy/astropy/pull/5411#issuecomment-258138938\n\nhm, I'm sure that #4662 does not contain the extended discussion.\n\n@MSeifert04 I think the \"long discussion\" was in https://github.com/astropy/astropy/issues/4669\nüëç for solution 1\nAlso üëç for solution 1. Looking forward to having those keywords update when I slice...\nWith apologies to @nden (who asked to not start a discussion), I want to make a case for **option 2** (following discussion on e.g. https://github.com/astropy/astropy/pull/5455). But I'll keep it short.\r\n\r\nWCS objects allow slicing, including by floating-point values. For instance, I can do:\r\n\r\n```python\r\nIn [5]: wcs[::0.2333,::0.2333]\r\nOut[5]: \r\nWCS Keywords\r\n\r\nNumber of WCS axes: 2\r\nCTYPE : 'GLON-CAR'  'GLAT-CAR'  \r\nCRVAL : 0.0  0.0  \r\nCRPIX : 1282.6603086155164  1281.6573081868839  \r\nNAXIS    : 599 599\r\n\r\nIn [6]: wcs[::0.2333,::0.2333].wcs.cdelt\r\nOut[6]: array([-0.00038883,  0.00038883])\r\n\r\nIn [7]: wcs.wcs.cdelt\r\nOut[7]: array([-0.00166667,  0.00166667])\r\n```\r\n\r\nI can see the motivation for this and it looks like people are relying on this. However, this causes issues when the image size is present in the WCS because it's no longer possible to necessarily scale the image size to an integer size. So the presence or not of image dimensions changes how slicing works.\r\n\r\nFurthermore, another example where the presence/absence of image shape matters is negative indices. If I do ``wcs[::-1,::-1]``, this can only work if I have an image size.\r\n\r\nBecause the slicing behaves so differently between the two cases, I'm üëç on **option 2** because it will allow the behavior to be more predictable and separates the two different use cases.\r\n\r\n**Note:** I didn't say that ``WCS`` has to be the 'pure' class though. ``WCS`` could be the class with image shape if there is a superclass that does not (we'd just need to find a good name). So just to be clear, there's a difference between separating the classes versus which one should be the 'default'.\n@astrofrog My main concern is giving an option to users to choose between two classes when they want to implement a WCS pipeline for an instrument. How would I choose which one to subclass?\n@nden - I see your point. It seems I'm in the minority anyway, so I'd say just go with the majority opinion rather than try and get everyone to agree :)\nIt'd be good to coordinate the interface for this with the interface used in GWCS.",
  "created_at": "2018-10-25T22:33:11Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"astropy/wcs/tests/test_wcs.py::test_footprint_to_file\"]",
  "PASS_TO_PASS": "[\"astropy/wcs/tests/test_wcs.py::TestMaps::test_consistency\", \"astropy/wcs/tests/test_wcs.py::TestMaps::test_maps\", \"astropy/wcs/tests/test_wcs.py::TestSpectra::test_consistency\", \"astropy/wcs/tests/test_wcs.py::TestSpectra::test_spectra\", \"astropy/wcs/tests/test_wcs.py::test_fixes\", \"astropy/wcs/tests/test_wcs.py::test_outside_sky\", \"astropy/wcs/tests/test_wcs.py::test_pix2world\", \"astropy/wcs/tests/test_wcs.py::test_load_fits_path\", \"astropy/wcs/tests/test_wcs.py::test_dict_init\", \"astropy/wcs/tests/test_wcs.py::test_extra_kwarg\", \"astropy/wcs/tests/test_wcs.py::test_3d_shapes\", \"astropy/wcs/tests/test_wcs.py::test_preserve_shape\", \"astropy/wcs/tests/test_wcs.py::test_broadcasting\", \"astropy/wcs/tests/test_wcs.py::test_shape_mismatch\", \"astropy/wcs/tests/test_wcs.py::test_invalid_shape\", \"astropy/wcs/tests/test_wcs.py::test_warning_about_defunct_keywords\", \"astropy/wcs/tests/test_wcs.py::test_warning_about_defunct_keywords_exception\", \"astropy/wcs/tests/test_wcs.py::test_to_header_string\", \"astropy/wcs/tests/test_wcs.py::test_to_fits\", \"astropy/wcs/tests/test_wcs.py::test_to_header_warning\", \"astropy/wcs/tests/test_wcs.py::test_no_comments_in_header\", \"astropy/wcs/tests/test_wcs.py::test_find_all_wcs_crash\", \"astropy/wcs/tests/test_wcs.py::test_validate\", \"astropy/wcs/tests/test_wcs.py::test_validate_with_2_wcses\", \"astropy/wcs/tests/test_wcs.py::test_crpix_maps_to_crval\", \"astropy/wcs/tests/test_wcs.py::test_all_world2pix\", \"astropy/wcs/tests/test_wcs.py::test_scamp_sip_distortion_parameters\", \"astropy/wcs/tests/test_wcs.py::test_fixes2\", \"astropy/wcs/tests/test_wcs.py::test_unit_normalization\", \"astropy/wcs/tests/test_wcs.py::test_validate_faulty_wcs\", \"astropy/wcs/tests/test_wcs.py::test_error_message\", \"astropy/wcs/tests/test_wcs.py::test_out_of_bounds\", \"astropy/wcs/tests/test_wcs.py::test_calc_footprint_1\", \"astropy/wcs/tests/test_wcs.py::test_calc_footprint_2\", \"astropy/wcs/tests/test_wcs.py::test_calc_footprint_3\", \"astropy/wcs/tests/test_wcs.py::test_sip\", \"astropy/wcs/tests/test_wcs.py::test_printwcs\", \"astropy/wcs/tests/test_wcs.py::test_invalid_spherical\", \"astropy/wcs/tests/test_wcs.py::test_no_iteration\", \"astropy/wcs/tests/test_wcs.py::test_sip_tpv_agreement\", \"astropy/wcs/tests/test_wcs.py::test_tpv_copy\", \"astropy/wcs/tests/test_wcs.py::test_hst_wcs\", \"astropy/wcs/tests/test_wcs.py::test_list_naxis\", \"astropy/wcs/tests/test_wcs.py::test_sip_broken\", \"astropy/wcs/tests/test_wcs.py::test_no_truncate_crval\", \"astropy/wcs/tests/test_wcs.py::test_no_truncate_crval_try2\", \"astropy/wcs/tests/test_wcs.py::test_no_truncate_crval_p17\", \"astropy/wcs/tests/test_wcs.py::test_no_truncate_using_compare\", \"astropy/wcs/tests/test_wcs.py::test_passing_ImageHDU\", \"astropy/wcs/tests/test_wcs.py::test_inconsistent_sip\", \"astropy/wcs/tests/test_wcs.py::test_bounds_check\", \"astropy/wcs/tests/test_wcs.py::test_naxis\", \"astropy/wcs/tests/test_wcs.py::test_sip_with_altkey\", \"astropy/wcs/tests/test_wcs.py::test_to_fits_1\", \"astropy/wcs/tests/test_wcs.py::test_keyedsip\", \"astropy/wcs/tests/test_wcs.py::test_zero_size_input\", \"astropy/wcs/tests/test_wcs.py::test_scalar_inputs\"]",
  "environment_setup_commit": "de88208326dc4cd68be1c3030f4f6d2eddf04520",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.546927",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}