{
  "repo": "django/django",
  "instance_id": "django__django-10643",
  "base_commit": "28e769dfe6a65bf604f5adc6a650ab47ba6b3bef",
  "patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -5,7 +5,7 @@\n from django.core.exceptions import EmptyResultSet\n from django.db.models.expressions import Case, Exists, Func, Value, When\n from django.db.models.fields import (\n-    BooleanField, DateTimeField, Field, IntegerField,\n+    BooleanField, CharField, DateTimeField, Field, IntegerField, UUIDField,\n )\n from django.db.models.query_utils import RegisterLookupMixin\n from django.utils.datastructures import OrderedSet\n@@ -548,3 +548,53 @@ def get_bound_params(self, start, finish):\n class YearLte(YearLookup, LessThanOrEqual):\n     def get_bound_params(self, start, finish):\n         return (finish,)\n+\n+\n+class UUIDTextMixin:\n+    \"\"\"\n+    Strip hyphens from a value when filtering a UUIDField on backends without\n+    a native datatype for UUID.\n+    \"\"\"\n+    def process_rhs(self, qn, connection):\n+        if not connection.features.has_native_uuid_field:\n+            from django.db.models.functions import Replace\n+            if self.rhs_is_direct_value():\n+                self.rhs = Value(self.rhs)\n+            self.rhs = Replace(self.rhs, Value('-'), Value(''), output_field=CharField())\n+        rhs, params = super().process_rhs(qn, connection)\n+        return rhs, params\n+\n+\n+@UUIDField.register_lookup\n+class UUIDIExact(UUIDTextMixin, IExact):\n+    pass\n+\n+\n+@UUIDField.register_lookup\n+class UUIDContains(UUIDTextMixin, Contains):\n+    pass\n+\n+\n+@UUIDField.register_lookup\n+class UUIDIContains(UUIDTextMixin, IContains):\n+    pass\n+\n+\n+@UUIDField.register_lookup\n+class UUIDStartsWith(UUIDTextMixin, StartsWith):\n+    pass\n+\n+\n+@UUIDField.register_lookup\n+class UUIDIStartsWith(UUIDTextMixin, IStartsWith):\n+    pass\n+\n+\n+@UUIDField.register_lookup\n+class UUIDEndsWith(UUIDTextMixin, EndsWith):\n+    pass\n+\n+\n+@UUIDField.register_lookup\n+class UUIDIEndsWith(UUIDTextMixin, IEndsWith):\n+    pass\n",
  "test_patch": "diff --git a/tests/model_fields/test_uuid.py b/tests/model_fields/test_uuid.py\n--- a/tests/model_fields/test_uuid.py\n+++ b/tests/model_fields/test_uuid.py\n@@ -2,7 +2,9 @@\n import uuid\n \n from django.core import exceptions, serializers\n-from django.db import IntegrityError, models\n+from django.db import IntegrityError, connection, models\n+from django.db.models import CharField, F, Value\n+from django.db.models.functions import Concat, Repeat\n from django.test import (\n     SimpleTestCase, TestCase, TransactionTestCase, skipUnlessDBFeature,\n )\n@@ -90,11 +92,41 @@ def setUpTestData(cls):\n             NullableUUIDModel.objects.create(field=None),\n         ]\n \n+    def assertSequenceEqualWithoutHyphens(self, qs, result):\n+        \"\"\"\n+        Backends with a native datatype for UUID don't support fragment lookups\n+        without hyphens because they store values with them.\n+        \"\"\"\n+        self.assertSequenceEqual(\n+            qs,\n+            [] if connection.features.has_native_uuid_field else result,\n+        )\n+\n     def test_exact(self):\n         self.assertSequenceEqual(\n             NullableUUIDModel.objects.filter(field__exact='550e8400e29b41d4a716446655440000'),\n             [self.objs[1]]\n         )\n+        self.assertSequenceEqual(\n+            NullableUUIDModel.objects.filter(\n+                field__exact='550e8400-e29b-41d4-a716-446655440000'\n+            ),\n+            [self.objs[1]],\n+        )\n+\n+    def test_iexact(self):\n+        self.assertSequenceEqualWithoutHyphens(\n+            NullableUUIDModel.objects.filter(\n+                field__iexact='550E8400E29B41D4A716446655440000'\n+            ),\n+            [self.objs[1]],\n+        )\n+        self.assertSequenceEqual(\n+            NullableUUIDModel.objects.filter(\n+                field__iexact='550E8400-E29B-41D4-A716-446655440000'\n+            ),\n+            [self.objs[1]],\n+        )\n \n     def test_isnull(self):\n         self.assertSequenceEqual(\n@@ -102,6 +134,86 @@ def test_isnull(self):\n             [self.objs[2]]\n         )\n \n+    def test_contains(self):\n+        self.assertSequenceEqualWithoutHyphens(\n+            NullableUUIDModel.objects.filter(field__contains='8400e29b'),\n+            [self.objs[1]],\n+        )\n+        self.assertSequenceEqual(\n+            NullableUUIDModel.objects.filter(field__contains='8400-e29b'),\n+            [self.objs[1]],\n+        )\n+\n+    def test_icontains(self):\n+        self.assertSequenceEqualWithoutHyphens(\n+            NullableUUIDModel.objects.filter(field__icontains='8400E29B'),\n+            [self.objs[1]],\n+        )\n+        self.assertSequenceEqual(\n+            NullableUUIDModel.objects.filter(field__icontains='8400-E29B'),\n+            [self.objs[1]],\n+        )\n+\n+    def test_startswith(self):\n+        self.assertSequenceEqualWithoutHyphens(\n+            NullableUUIDModel.objects.filter(field__startswith='550e8400e29b4'),\n+            [self.objs[1]],\n+        )\n+        self.assertSequenceEqual(\n+            NullableUUIDModel.objects.filter(field__startswith='550e8400-e29b-4'),\n+            [self.objs[1]],\n+        )\n+\n+    def test_istartswith(self):\n+        self.assertSequenceEqualWithoutHyphens(\n+            NullableUUIDModel.objects.filter(field__istartswith='550E8400E29B4'),\n+            [self.objs[1]],\n+        )\n+        self.assertSequenceEqual(\n+            NullableUUIDModel.objects.filter(field__istartswith='550E8400-E29B-4'),\n+            [self.objs[1]],\n+        )\n+\n+    def test_endswith(self):\n+        self.assertSequenceEqualWithoutHyphens(\n+            NullableUUIDModel.objects.filter(field__endswith='a716446655440000'),\n+            [self.objs[1]],\n+        )\n+        self.assertSequenceEqual(\n+            NullableUUIDModel.objects.filter(field__endswith='a716-446655440000'),\n+            [self.objs[1]],\n+        )\n+\n+    def test_iendswith(self):\n+        self.assertSequenceEqualWithoutHyphens(\n+            NullableUUIDModel.objects.filter(field__iendswith='A716446655440000'),\n+            [self.objs[1]],\n+        )\n+        self.assertSequenceEqual(\n+            NullableUUIDModel.objects.filter(field__iendswith='A716-446655440000'),\n+            [self.objs[1]],\n+        )\n+\n+    def test_filter_with_expr(self):\n+        self.assertSequenceEqualWithoutHyphens(\n+            NullableUUIDModel.objects.annotate(\n+                value=Concat(Value('8400'), Value('e29b'), output_field=CharField()),\n+            ).filter(field__contains=F('value')),\n+            [self.objs[1]],\n+        )\n+        self.assertSequenceEqual(\n+            NullableUUIDModel.objects.annotate(\n+                value=Concat(Value('8400'), Value('-'), Value('e29b'), output_field=CharField()),\n+            ).filter(field__contains=F('value')),\n+            [self.objs[1]],\n+        )\n+        self.assertSequenceEqual(\n+            NullableUUIDModel.objects.annotate(\n+                value=Repeat(Value('0'), 4, output_field=CharField()),\n+            ).filter(field__contains=F('value')),\n+            [self.objs[1]],\n+        )\n+\n \n class TestSerialization(SimpleTestCase):\n     test_data = (\n",
  "problem_statement": "Allow icontains lookup to accept uuids with or without dashes\nDescription\n\t\nWe have Django 2.1 project with model admin which includes an UUIDField in list_display and search_fields. The UUID is displayed with dashes on changelist (e.g. \"245ba2eb-6852-47be-82be-7dc07327cf9e\") and if the user cut'n'paste it to the search field, I would expect admin to find it.\nThis works however only on Postgres but fails on Oracle. I can understand why this happens (Oracle backend stores uuid as string) and I believe I can workaround it by customizing get_search_results but I think should be internal thing that Django handles gracefully - search should be possible by the value as displayed in admin.\n",
  "hints_text": "This isn't really an admin issue but rather it's due to the fact that the default admin lookup uses __icontains. You could fix the issue by using search_fields = ['uuidfield__exact'] (adding __exact) although that doesn't allow searching for part of the UUID value. I'll tentatively accept the ticket to allow QuerySet.objects.filter(uuidfield__icontains='...') to work with values with or without dashes\nThank you for the quick answer. However, the proposed solution does not work as changing the uuid lookup to exact causes an error when searching for any string other than valid uuid value. I get ValidationError raised from UUIDField.to_python() File \"/home/vaclav/.local/share/virtualenvs/aaa-yRfablWV/lib/python3.7/site-packages/django/db/models/fields/__init__.py\" in to_python 2325. return uuid.UUID(value) File \"/usr/lib/python3.7/uuid.py\" in __init__ 160. raise ValueError('badly formed hexadecimal UUID string')\nâ€‹PR",
  "created_at": "2018-11-12T19:24:06Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_contains (model_fields.test_uuid.TestQuerying)\", \"test_endswith (model_fields.test_uuid.TestQuerying)\", \"test_filter_with_expr (model_fields.test_uuid.TestQuerying)\", \"test_icontains (model_fields.test_uuid.TestQuerying)\", \"test_iendswith (model_fields.test_uuid.TestQuerying)\", \"test_iexact (model_fields.test_uuid.TestQuerying)\", \"test_istartswith (model_fields.test_uuid.TestQuerying)\", \"test_startswith (model_fields.test_uuid.TestQuerying)\"]",
  "PASS_TO_PASS": "[\"test_invalid_uuid (model_fields.test_uuid.TestValidation)\", \"test_uuid_instance_ok (model_fields.test_uuid.TestValidation)\", \"test_dumping (model_fields.test_uuid.TestSerialization)\", \"test_loading (model_fields.test_uuid.TestSerialization)\", \"test_nullable_loading (model_fields.test_uuid.TestSerialization)\", \"test_deconstruct (model_fields.test_uuid.TestMethods)\", \"test_to_python (model_fields.test_uuid.TestMethods)\", \"test_to_python_int_too_large (model_fields.test_uuid.TestMethods)\", \"test_to_python_int_values (model_fields.test_uuid.TestMethods)\", \"test_null_handling (model_fields.test_uuid.TestSaveLoad)\", \"test_pk_validated (model_fields.test_uuid.TestSaveLoad)\", \"test_str_instance_bad_hyphens (model_fields.test_uuid.TestSaveLoad)\", \"test_str_instance_hyphens (model_fields.test_uuid.TestSaveLoad)\", \"test_str_instance_no_hyphens (model_fields.test_uuid.TestSaveLoad)\", \"test_uuid_instance (model_fields.test_uuid.TestSaveLoad)\", \"test_wrong_value (model_fields.test_uuid.TestSaveLoad)\", \"test_creation (model_fields.test_uuid.TestAsPrimaryKey)\", \"test_two_level_foreign_keys (model_fields.test_uuid.TestAsPrimaryKey)\", \"test_underlying_field (model_fields.test_uuid.TestAsPrimaryKey)\", \"test_update_with_related_model_id (model_fields.test_uuid.TestAsPrimaryKey)\", \"test_update_with_related_model_instance (model_fields.test_uuid.TestAsPrimaryKey)\", \"test_uuid_pk_on_bulk_create (model_fields.test_uuid.TestAsPrimaryKey)\", \"test_uuid_pk_on_save (model_fields.test_uuid.TestAsPrimaryKey)\", \"test_exact (model_fields.test_uuid.TestQuerying)\", \"test_isnull (model_fields.test_uuid.TestQuerying)\", \"test_unsaved_fk (model_fields.test_uuid.TestAsPrimaryKeyTransactionTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.551887",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}