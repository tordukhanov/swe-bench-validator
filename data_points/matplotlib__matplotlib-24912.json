{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-24912",
  "base_commit": "7bc69f27db70f87b59b0452216d7ae2b5babb329",
  "patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1137,18 +1137,8 @@ def _process_contour_level_args(self, args, z_dtype):\n             self.levels = self._autolev(levels_arg)\n         else:\n             self.levels = np.asarray(levels_arg, np.float64)\n-\n-        if not self.filled:\n-            inside = (self.levels > self.zmin) & (self.levels < self.zmax)\n-            levels_in = self.levels[inside]\n-            if len(levels_in) == 0:\n-                self.levels = [self.zmin]\n-                _api.warn_external(\n-                    \"No contour levels were found within the data range.\")\n-\n         if self.filled and len(self.levels) < 2:\n             raise ValueError(\"Filled contours require at least 2 levels.\")\n-\n         if len(self.levels) > 1 and np.min(np.diff(self.levels)) <= 0.0:\n             raise ValueError(\"Contour levels must be increasing\")\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -62,15 +62,16 @@ def test_contour_shape_error(args, message):\n         ax.contour(*args)\n \n \n-def test_contour_empty_levels():\n-\n-    x = np.arange(9)\n-    z = np.random.random((9, 9))\n-\n+def test_contour_no_valid_levels():\n     fig, ax = plt.subplots()\n-    with pytest.warns(UserWarning) as record:\n-        ax.contour(x, x, z, levels=[])\n-    assert len(record) == 1\n+    # no warning for empty levels.\n+    ax.contour(np.random.rand(9, 9), levels=[])\n+    # no warning if levels is given and is not within the range of z.\n+    cs = ax.contour(np.arange(81).reshape((9, 9)), levels=[100])\n+    # ... and if fmt is given.\n+    ax.clabel(cs, fmt={100: '%1.2f'})\n+    # no warning if z is uniform.\n+    ax.contour(np.ones((9, 9)))\n \n \n def test_contour_Nlevels():\n@@ -84,33 +85,6 @@ def test_contour_Nlevels():\n     assert (cs1.levels == cs2.levels).all()\n \n \n-def test_contour_badlevel_fmt():\n-    # Test edge case from https://github.com/matplotlib/matplotlib/issues/9742\n-    # User supplied fmt for each level as a dictionary, but Matplotlib changed\n-    # the level to the minimum data value because no contours possible.\n-    # This was fixed in https://github.com/matplotlib/matplotlib/pull/9743\n-    x = np.arange(9)\n-    z = np.zeros((9, 9))\n-\n-    fig, ax = plt.subplots()\n-    fmt = {1.: '%1.2f'}\n-    with pytest.warns(UserWarning) as record:\n-        cs = ax.contour(x, x, z, levels=[1.])\n-        ax.clabel(cs, fmt=fmt)\n-    assert len(record) == 1\n-\n-\n-def test_contour_uniform_z():\n-\n-    x = np.arange(9)\n-    z = np.ones((9, 9))\n-\n-    fig, ax = plt.subplots()\n-    with pytest.warns(UserWarning) as record:\n-        ax.contour(x, x, z)\n-    assert len(record) == 1\n-\n-\n @image_comparison(['contour_manual_labels'], remove_text=True, style='mpl20')\n def test_contour_manual_labels():\n     x, y = np.meshgrid(np.arange(0, 10), np.arange(0, 10))\n",
  "problem_statement": "[ENH]: Allow override of contour level autoscaling\n### Problem\n\nIn Matplotlib 3, when using a list of values for the `levels` argument in `contour()`, the list of values is overridden in the case that all requested levels fall outside the data range. While this may be desirable for casually browsing data when the user is unfamiliar with the data range, it causes serious problems for batch applications where the user legitimately intends to use their list of levels but does not know whether every input array will produce contours.\r\n\r\nExample:\r\n```\r\nmyplot = plt.contour( x , y , data , levels = [100] )\r\nprint( myplot.levels )\r\n```\r\n\r\nThe above prints `[0.0]` when `data` is an array of values ranging from 0 to 50 (i.e., the requested contour level of 100 is outside the data range). As a result, the plot contains erroneous contours around near-zero values, presumably due to floating point precision.\r\n\r\nThis is a consequence of the change described here (https://matplotlib.org/stable/api/prev_api_changes/api_changes_3.0.0.html?highlight=contour%20levels):\r\n\r\n> Selection of contour levels is now the same for contour and contourf; previously, for contour, levels outside the data range were deleted. **(Exception: if no contour levels are found within the data range, the levels attribute is replaced with a list holding only the minimum of the data range.)**\n\n### Proposed solution\n\nAdd a kwarg to `contour()` that overrides the autoscaling behavior. When the kwarg is set, it would trigger a flag in `_process_contour_level_args()` (https://github.com/matplotlib/matplotlib/blob/main/lib/matplotlib/contour.py):\r\n\r\n```\r\nif not self.filled:\r\n            inside = (self.levels > self.zmin) & (self.levels < self.zmax)\r\n            levels_in = self.levels[inside]\r\n            if len(levels_in) == 0 and not(OVERRIDE_AUTOSCALE_FLAG):\r\n                self.levels = [self.zmin]\r\n                _api.warn_external(\r\n                    \"No contour levels were found within the data range.\")\r\n```\n",
  "hints_text": "I agree that at the very least this should be an option.  I think the original 3.0 \"feature\" to provide a contour that wasn't asked for is of pretty dubious value   \nWhat ever we do to `contour` we need to do the same thing for `contourf`.\r\n\r\nLooking at the code around https://github.com/matplotlib/matplotlib/blob/7c6a74c47accdfb8d66e526cbd0b63c29ffede12/lib/matplotlib/contour.py#L1161-L1167 my suspicion is that we did not add this feature for 3.0, but preserved the behavior from previous versions. \r\n\r\nLooking at the blame, this originally came in via https://github.com/matplotlib/matplotlib/pull/8719 (mpl2.1) to fix https://github.com/matplotlib/matplotlib/issues/7486 which crashed rather than continuing on if there was no data in the levels.\r\n\r\nIt is probably worth revisiting given subsequent work on the Python side management around contouring and pulling contourpy out.\r\n\r\nI'm nominally in favor of changing this warning to say \"and we will plot to contours in the future\" and changing the default behavior, but we can not trade the current behavior for bringing back a crash ;)\r\n\r\nThe user-side work around is to in your batch processing check the limits and do not call contour if nothing is in range.\r\n\r\nattn @ianthomas23 \n> \r\n\r\nI can confirm that the \"unwanted\" contours were not present in 2.X (2.0.2, at least). My code has been running on python 2.7 (matplotlib 2.0.2) for years without any unwanted contours, but they appeared today when testing my code with python 3.10 (matplotlib 3.5.3).\r\n\r\nAfter struggling a bit, my attempted workaround was something close to what you said:\r\n\r\n```\r\nDO_CONTOURS = False\r\ndata_min = np.nanmin(data)\r\ndata_max = np.nanmax(data)\r\n\r\nfor level in levels:\r\n    if level > data_min and level < data_max:\r\n        DO_CONTOURS = True\r\n        break\r\n\r\nif DO_CONTOURS:\r\n    plt.contour(...)\r\n```\r\n\r\nHowever, this workaround fails when the axes are only displaying a subset of the full array. For example, my `levels` may fall within the range of `data`, but I may be plotting a region where no contour will be needed. In that case, matplotlib once again overrides `levels` and I end up with a mess of unwanted contours.\nThat does track as we added it is 2.1.\r\n\r\nI do not think we are doing any clipping in x/y internally and are always considering the full data passed in so I assume you are doing the sub-selection?  I would do something like\r\n\r\n```python\r\ndef contour_safe(data, levels):\r\n    return np.any(data.max() > levels) & np.any(data.min() < levels)\r\n\r\nif contour_safe(trimmed_data, levels):\r\n    ax.contour(..., trimmed_data, levels, ...)\r\n```\r\n\r\nrather than trying to cache it.\r\n\r\nIf you have this through out your code base, it might be worth writing a helper like\r\n\r\n```python\r\ndef fixed_contour(...):\r\n    if contour_safe(...):\r\n        return plt.contour(...)\r\n```\r\n(but that does require absorbing the type instability).  Hopefully you can find-and-replace to victory of plt.contour -> fixed_contour.  This approach should also be back and forward compatible.\r\n\r\n------\r\n\r\nDid you have any other big surprises jumping from 2.0 -> 3.5 (effectively 6 feature releases!)?\r\n\r\n\r\n-----\r\n\r\nhttps://www.youtube.com/watch?v=LTMguK-XJEo might be of interest as well....\r\n\nI'll take a look. I can't offhand think of any reason why the contouring itself needs it to be this way, and I have a vague recollection that it is the interaction with the colorbar which makes it more complicated. But that is a recollection from `n` years ago where `n > 4`!\nLooking into this, I think we are absolutely fine to remove the overriding of `self.levels = [self.zmin]`. `contour` handles this without any problem. It seems that both `matplotlib` and `contourpy` are more robust to strange inputs than they used to be.\r\n\r\nWe should probably add a check for no levels specified by the user for a `contour` call, as already happens for `contourf`.\r\n\r\nThere are problems with the use of `colorbar` with this fix, but the error is `IndexError: index 0 is out of bounds for axis 0 with size 0` which is exactly the same as in issue #23817 and occurs regardless of overriding `self.levels`. I conclude that we need to make `colorbar` more robust to corner cases.",
  "created_at": "2023-01-09T11:48:29Z",
  "version": "3.6",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_contour.py::test_contour_no_valid_levels\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_contour.py::test_contour_shape_1d_valid\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_2d_valid\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args0-Length\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args1-Length\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args2-Number\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args3-Number\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args4-Shapes\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args5-Shapes\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args6-Inputs\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args7-Input\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args8-Input\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args9-Input\", \"lib/matplotlib/tests/test_contour.py::test_contour_Nlevels\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[png]\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[pdf]\", \"lib/matplotlib/tests/test_contour.py::test_given_colors_levels_and_extends[png]\", \"lib/matplotlib/tests/test_contour.py::test_contour_datetime_axis[png]\", \"lib/matplotlib/tests/test_contour.py::test_labels[png]\", \"lib/matplotlib/tests/test_contour.py::test_corner_mask[png]\", \"lib/matplotlib/tests/test_contour.py::test_contourf_decreasing_levels\", \"lib/matplotlib/tests/test_contour.py::test_contourf_symmetric_locator\", \"lib/matplotlib/tests/test_contour.py::test_circular_contour_warning\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-1234]\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-1234]\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-None]\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-None]\", \"lib/matplotlib/tests/test_contour.py::test_contourf_log_extension[png]\", \"lib/matplotlib/tests/test_contour.py::test_contour_addlines[png]\", \"lib/matplotlib/tests/test_contour.py::test_contour_uneven[png]\", \"lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-None-None-1.23]\", \"lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-None-4.24]\", \"lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-5.02-5.02]\", \"lib/matplotlib/tests/test_contour.py::test_label_nonagg\", \"lib/matplotlib/tests/test_contour.py::test_contour_closed_line_loop[png]\", \"lib/matplotlib/tests/test_contour.py::test_quadcontourset_reuse\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual[png]\", \"lib/matplotlib/tests/test_contour.py::test_contour_line_start_on_corner_edge[png]\", \"lib/matplotlib/tests/test_contour.py::test_find_nearest_contour\", \"lib/matplotlib/tests/test_contour.py::test_find_nearest_contour_no_filled\", \"lib/matplotlib/tests/test_contour.py::test_contour_autolabel_beyond_powerlimits\", \"lib/matplotlib/tests/test_contour.py::test_contourf_legend_elements\", \"lib/matplotlib/tests/test_contour.py::test_contour_legend_elements\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2005-Mpl2005ContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2014-Mpl2014ContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[serial-SerialContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[threaded-ThreadedContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[invalid-None]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2005]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2014]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[serial]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[threaded]\", \"lib/matplotlib/tests/test_contour.py::test_all_algorithms[png]\", \"lib/matplotlib/tests/test_contour.py::test_subfigure_clabel\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[solid]\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[dashed]\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[dashdot]\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[dotted]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[solid]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashed]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashdot]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dotted]\", \"lib/matplotlib/tests/test_contour.py::test_contour_remove\", \"lib/matplotlib/tests/test_contour.py::test_bool_autolevel\"]",
  "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.815306",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}