{
  "repo": "mwaskom/seaborn",
  "instance_id": "mwaskom__seaborn-2813",
  "base_commit": "60e58eb07e4448694ca25e887684d39d5138babd",
  "patch": "diff --git a/seaborn/_statistics.py b/seaborn/_statistics.py\n--- a/seaborn/_statistics.py\n+++ b/seaborn/_statistics.py\n@@ -261,6 +261,9 @@ def _define_bin_edges(self, x, weights, bins, binwidth, binrange, discrete):\n         elif binwidth is not None:\n             step = binwidth\n             bin_edges = np.arange(start, stop + step, step)\n+            # Handle roundoff error (maybe there is a less clumsy way?)\n+            if bin_edges.max() < stop or len(bin_edges) < 2:\n+                bin_edges = np.append(bin_edges, bin_edges.max() + step)\n         else:\n             bin_edges = np.histogram_bin_edges(\n                 x, bins, binrange, weights,\ndiff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -2098,7 +2098,7 @@ def pairplot(\n                 markers = [markers] * n_markers\n             if len(markers) != n_markers:\n                 raise ValueError(\"markers must be a singleton or a list of \"\n-                                  \"markers for each level of the hue variable\")\n+                                 \"markers for each level of the hue variable\")\n             grid.hue_kws = {\"marker\": markers}\n         elif kind == \"scatter\":\n             if isinstance(markers, str):\ndiff --git a/seaborn/regression.py b/seaborn/regression.py\n--- a/seaborn/regression.py\n+++ b/seaborn/regression.py\n@@ -618,7 +618,7 @@ def facet_kw_deprecation(key, val):\n         markers = [markers] * n_markers\n     if len(markers) != n_markers:\n         raise ValueError(\"markers must be a singleton or a list of markers \"\n-                          \"for each level of the hue variable\")\n+                         \"for each level of the hue variable\")\n     facets.hue_kws = {\"marker\": markers}\n \n     def update_datalim(data, x, y, ax, **kws):\n",
  "test_patch": "diff --git a/seaborn/tests/test_statistics.py b/seaborn/tests/test_statistics.py\n--- a/seaborn/tests/test_statistics.py\n+++ b/seaborn/tests/test_statistics.py\n@@ -282,6 +282,19 @@ def test_discrete_bins(self, rng):\n         assert bin_kws[\"range\"] == (x.min() - .5, x.max() + .5)\n         assert bin_kws[\"bins\"] == (x.max() - x.min() + 1)\n \n+    def test_odd_single_observation(self):\n+        # GH2721\n+        x = np.array([0.49928])\n+        h, e = Histogram(binwidth=0.03)(x)\n+        assert len(h) == 1\n+        assert (e[1] - e[0]) == pytest.approx(.03)\n+\n+    def test_binwidth_roundoff(self):\n+        # GH2785\n+        x = np.array([2.4, 2.5, 2.6])\n+        h, e = Histogram(binwidth=0.01)(x)\n+        assert h.sum() == 3\n+\n     def test_histogram(self, x):\n \n         h = Histogram()\n",
  "problem_statement": "histplot stat=count does not count all data points\n`import matplotlib.pyplot as plt\r\nimport seaborn as sns\r\nimport numpy as np\r\n\r\nsns.set(style=\"whitegrid\")\r\n\r\ndata_a = [1, 2, 3]\r\ndata_b = [2.4, 2.5, 2.6]\r\n\r\nsns.histplot(np.array(data_a),    color=\"red\", binwidth=0.01, stat=\"count\")\r\nsns.histplot(np.array(data_b),    color=\"blue\", binwidth=0.01, stat=\"count\")\r\n\r\n`plt.savefig(\"output.png\")``\r\n\r\nThis produces  [https://i.stack.imgur.com/TM6al.png](url)\r\n\r\nThe data point 2.6 is omitted in the output produced by histplot.\r\n\r\nThe problem also exists, if the first sns.histplot command is removed.\r\nInterestingly, it has been pointed out to me that the following command works:\r\n\r\n`sns.histplot([data_a, data_b], palette=['red', 'blue'], binwidth=0.01, stat=\"count\")`\r\n\r\nbut as I said, the single command \r\n\r\n`sns.histplot(np.array(data_b),    color=\"blue\", binwidth=0.01, stat=\"count\")`\r\n\r\nalso does not work.\r\n\n",
  "hints_text": "Thanks for reporting; I think this is the same underlying issue as #2721 (that is just a noisier manifestation of it).",
  "created_at": "2022-05-18T00:32:38Z",
  "version": "0.12",
  "FAIL_TO_PASS": "[\"seaborn/tests/test_statistics.py::TestHistogram::test_odd_single_observation\", \"seaborn/tests/test_statistics.py::TestHistogram::test_binwidth_roundoff\"]",
  "PASS_TO_PASS": "[\"seaborn/tests/test_statistics.py::TestKDE::test_gridsize\", \"seaborn/tests/test_statistics.py::TestKDE::test_cut\", \"seaborn/tests/test_statistics.py::TestKDE::test_clip\", \"seaborn/tests/test_statistics.py::TestKDE::test_density_normalization\", \"seaborn/tests/test_statistics.py::TestKDE::test_cumulative\", \"seaborn/tests/test_statistics.py::TestKDE::test_cached_support\", \"seaborn/tests/test_statistics.py::TestKDE::test_bw_method\", \"seaborn/tests/test_statistics.py::TestKDE::test_bw_adjust\", \"seaborn/tests/test_statistics.py::TestKDE::test_bivariate_grid\", \"seaborn/tests/test_statistics.py::TestKDE::test_bivariate_normalization\", \"seaborn/tests/test_statistics.py::TestKDE::test_bivariate_cumulative\", \"seaborn/tests/test_statistics.py::TestHistogram::test_string_bins\", \"seaborn/tests/test_statistics.py::TestHistogram::test_int_bins\", \"seaborn/tests/test_statistics.py::TestHistogram::test_array_bins\", \"seaborn/tests/test_statistics.py::TestHistogram::test_bivariate_string_bins\", \"seaborn/tests/test_statistics.py::TestHistogram::test_bivariate_int_bins\", \"seaborn/tests/test_statistics.py::TestHistogram::test_bivariate_array_bins\", \"seaborn/tests/test_statistics.py::TestHistogram::test_binwidth\", \"seaborn/tests/test_statistics.py::TestHistogram::test_bivariate_binwidth\", \"seaborn/tests/test_statistics.py::TestHistogram::test_binrange\", \"seaborn/tests/test_statistics.py::TestHistogram::test_bivariate_binrange\", \"seaborn/tests/test_statistics.py::TestHistogram::test_discrete_bins\", \"seaborn/tests/test_statistics.py::TestHistogram::test_histogram\", \"seaborn/tests/test_statistics.py::TestHistogram::test_count_stat\", \"seaborn/tests/test_statistics.py::TestHistogram::test_density_stat\", \"seaborn/tests/test_statistics.py::TestHistogram::test_probability_stat\", \"seaborn/tests/test_statistics.py::TestHistogram::test_frequency_stat\", \"seaborn/tests/test_statistics.py::TestHistogram::test_cumulative_count\", \"seaborn/tests/test_statistics.py::TestHistogram::test_cumulative_density\", \"seaborn/tests/test_statistics.py::TestHistogram::test_cumulative_probability\", \"seaborn/tests/test_statistics.py::TestHistogram::test_cumulative_frequency\", \"seaborn/tests/test_statistics.py::TestHistogram::test_bivariate_histogram\", \"seaborn/tests/test_statistics.py::TestHistogram::test_bivariate_count_stat\", \"seaborn/tests/test_statistics.py::TestHistogram::test_bivariate_density_stat\", \"seaborn/tests/test_statistics.py::TestHistogram::test_bivariate_probability_stat\", \"seaborn/tests/test_statistics.py::TestHistogram::test_bivariate_frequency_stat\", \"seaborn/tests/test_statistics.py::TestHistogram::test_bivariate_cumulative_count\", \"seaborn/tests/test_statistics.py::TestHistogram::test_bivariate_cumulative_density\", \"seaborn/tests/test_statistics.py::TestHistogram::test_bivariate_cumulative_frequency\", \"seaborn/tests/test_statistics.py::TestHistogram::test_bivariate_cumulative_probability\", \"seaborn/tests/test_statistics.py::TestHistogram::test_bad_stat\", \"seaborn/tests/test_statistics.py::TestECDF::test_univariate_proportion\", \"seaborn/tests/test_statistics.py::TestECDF::test_univariate_count\", \"seaborn/tests/test_statistics.py::TestECDF::test_univariate_proportion_weights\", \"seaborn/tests/test_statistics.py::TestECDF::test_univariate_count_weights\", \"seaborn/tests/test_statistics.py::TestECDF::test_invalid_stat\", \"seaborn/tests/test_statistics.py::TestECDF::test_bivariate_error\", \"seaborn/tests/test_statistics.py::TestEstimateAggregator::test_func_estimator\", \"seaborn/tests/test_statistics.py::TestEstimateAggregator::test_name_estimator\", \"seaborn/tests/test_statistics.py::TestEstimateAggregator::test_se_errorbars\", \"seaborn/tests/test_statistics.py::TestEstimateAggregator::test_sd_errorbars\", \"seaborn/tests/test_statistics.py::TestEstimateAggregator::test_pi_errorbars\", \"seaborn/tests/test_statistics.py::TestEstimateAggregator::test_ci_errorbars\", \"seaborn/tests/test_statistics.py::TestEstimateAggregator::test_custom_errorbars\", \"seaborn/tests/test_statistics.py::TestEstimateAggregator::test_singleton_errorbars\", \"seaborn/tests/test_statistics.py::TestEstimateAggregator::test_errorbar_validation\"]",
  "environment_setup_commit": "d25872b0fc99dbf7e666a91f59bd4ed125186aa1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.835499",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}