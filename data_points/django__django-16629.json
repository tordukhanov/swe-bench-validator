{
  "repo": "django/django",
  "instance_id": "django__django-16629",
  "base_commit": "051d5944f86400b9b3476db60bc73de7e9964810",
  "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -14,6 +14,7 @@\n from django.core import checks, exceptions, validators\n from django.db import connection, connections, router\n from django.db.models.constants import LOOKUP_SEP\n+from django.db.models.enums import ChoicesMeta\n from django.db.models.query_utils import DeferredAttribute, RegisterLookupMixin\n from django.utils import timezone\n from django.utils.datastructures import DictWrapper\n@@ -216,6 +217,8 @@ def __init__(\n         self.unique_for_date = unique_for_date\n         self.unique_for_month = unique_for_month\n         self.unique_for_year = unique_for_year\n+        if isinstance(choices, ChoicesMeta):\n+            choices = choices.choices\n         if isinstance(choices, collections.abc.Iterator):\n             choices = list(choices)\n         self.choices = choices\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -16,6 +16,7 @@\n \n from django.core import validators\n from django.core.exceptions import ValidationError\n+from django.db.models.enums import ChoicesMeta\n from django.forms.boundfield import BoundField\n from django.forms.utils import from_current_timezone, to_current_timezone\n from django.forms.widgets import (\n@@ -857,6 +858,8 @@ class ChoiceField(Field):\n \n     def __init__(self, *, choices=(), **kwargs):\n         super().__init__(**kwargs)\n+        if isinstance(choices, ChoicesMeta):\n+            choices = choices.choices\n         self.choices = choices\n \n     def __deepcopy__(self, memo):\n",
  "test_patch": "diff --git a/tests/forms_tests/field_tests/test_choicefield.py b/tests/forms_tests/field_tests/test_choicefield.py\n--- a/tests/forms_tests/field_tests/test_choicefield.py\n+++ b/tests/forms_tests/field_tests/test_choicefield.py\n@@ -95,7 +95,8 @@ class FirstNames(models.TextChoices):\n             JOHN = \"J\", \"John\"\n             PAUL = \"P\", \"Paul\"\n \n-        f = ChoiceField(choices=FirstNames.choices)\n+        f = ChoiceField(choices=FirstNames)\n+        self.assertEqual(f.choices, FirstNames.choices)\n         self.assertEqual(f.clean(\"J\"), \"J\")\n         msg = \"'Select a valid choice. 3 is not one of the available choices.'\"\n         with self.assertRaisesMessage(ValidationError, msg):\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -433,24 +433,20 @@ class DateChoices(datetime.date, models.Choices):\n             DateChoices.DATE_1,\n             (\"datetime.date(1969, 7, 20)\", {\"import datetime\"}),\n         )\n-        field = models.CharField(default=TextChoices.B, choices=TextChoices.choices)\n+        field = models.CharField(default=TextChoices.B, choices=TextChoices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n             \"models.CharField(choices=[('A', 'A value'), ('B', 'B value')], \"\n             \"default='B')\",\n         )\n-        field = models.IntegerField(\n-            default=IntegerChoices.B, choices=IntegerChoices.choices\n-        )\n+        field = models.IntegerField(default=IntegerChoices.B, choices=IntegerChoices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n             \"models.IntegerField(choices=[(1, 'One'), (2, 'Two')], default=2)\",\n         )\n-        field = models.DateField(\n-            default=DateChoices.DATE_2, choices=DateChoices.choices\n-        )\n+        field = models.DateField(default=DateChoices.DATE_2, choices=DateChoices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\ndiff --git a/tests/model_fields/models.py b/tests/model_fields/models.py\n--- a/tests/model_fields/models.py\n+++ b/tests/model_fields/models.py\n@@ -69,11 +69,18 @@ class WhizIterEmpty(models.Model):\n \n \n class Choiceful(models.Model):\n+    class Suit(models.IntegerChoices):\n+        DIAMOND = 1, \"Diamond\"\n+        SPADE = 2, \"Spade\"\n+        HEART = 3, \"Heart\"\n+        CLUB = 4, \"Club\"\n+\n     no_choices = models.IntegerField(null=True)\n     empty_choices = models.IntegerField(choices=(), null=True)\n     with_choices = models.IntegerField(choices=[(1, \"A\")], null=True)\n     empty_choices_bool = models.BooleanField(choices=())\n     empty_choices_text = models.TextField(choices=())\n+    choices_from_enum = models.IntegerField(choices=Suit)\n \n \n class BigD(models.Model):\ndiff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -75,11 +75,11 @@ def test_charfield_with_choices_raises_error_on_invalid_choice(self):\n             f.clean(\"not a\", None)\n \n     def test_enum_choices_cleans_valid_string(self):\n-        f = models.CharField(choices=self.Choices.choices, max_length=1)\n+        f = models.CharField(choices=self.Choices, max_length=1)\n         self.assertEqual(f.clean(\"c\", None), \"c\")\n \n     def test_enum_choices_invalid_input(self):\n-        f = models.CharField(choices=self.Choices.choices, max_length=1)\n+        f = models.CharField(choices=self.Choices, max_length=1)\n         msg = \"Value 'a' is not a valid choice.\"\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.clean(\"a\", None)\ndiff --git a/tests/model_fields/test_integerfield.py b/tests/model_fields/test_integerfield.py\n--- a/tests/model_fields/test_integerfield.py\n+++ b/tests/model_fields/test_integerfield.py\n@@ -301,11 +301,11 @@ def test_integerfield_validates_zero_against_choices(self):\n             f.clean(\"0\", None)\n \n     def test_enum_choices_cleans_valid_string(self):\n-        f = models.IntegerField(choices=self.Choices.choices)\n+        f = models.IntegerField(choices=self.Choices)\n         self.assertEqual(f.clean(\"1\", None), 1)\n \n     def test_enum_choices_invalid_input(self):\n-        f = models.IntegerField(choices=self.Choices.choices)\n+        f = models.IntegerField(choices=self.Choices)\n         with self.assertRaises(ValidationError):\n             f.clean(\"A\", None)\n         with self.assertRaises(ValidationError):\ndiff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -156,6 +156,7 @@ def setUpClass(cls):\n         cls.empty_choices_bool = Choiceful._meta.get_field(\"empty_choices_bool\")\n         cls.empty_choices_text = Choiceful._meta.get_field(\"empty_choices_text\")\n         cls.with_choices = Choiceful._meta.get_field(\"with_choices\")\n+        cls.choices_from_enum = Choiceful._meta.get_field(\"choices_from_enum\")\n \n     def test_choices(self):\n         self.assertIsNone(self.no_choices.choices)\n@@ -192,6 +193,10 @@ def test_formfield(self):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+    def test_choices_from_enum(self):\n+        # Choices class was transparently resolved when given as argument.\n+        self.assertEqual(self.choices_from_enum.choices, Choiceful.Suit.choices)\n+\n \n class GetFieldDisplayTests(SimpleTestCase):\n     def test_choices_and_field_display(self):\n",
  "problem_statement": "Added support for direct usage of Choices classes on model fields\nDescription\n\t \n\t\t(last modified by T. Franzel)\n\t \nHi,\nI would like to propose a feature addition on how Choices are handled when used on model fields. Currently, Field.choices only accepts iterables. This has 2 shortcommings imho:\n- Rejecting a Choices class as argument to Field(choices=...) seems counter-intuitive. Providing the class directly currently results in a fields.E005 error. \nTo make this more pythonic, the field should also accept the Choice class directly and deal with the variation internally. \nI really can't come up with a scenario where a user would want a different behavior or rather that a user would be surprised by the implicit resolution.\n2. By forcing the user to expand the Choices class manually, essentially all meta information is lost. Downstream packages may benefit from this lost information.\nSpecifically, as maintainer of ​drf-spectcular (OpenAPI generator for DRF), I am interested in the name of the choice set (e.g. Suit, Vehicle, Gender) and potentially also the docstring. This would greatly improve OpenAPI generation of choice sets and take out the unnecessary guesswork to find a proper name. (And if anyone wonders, the model field name is not a good candidate for a choice set name.)\nThis PR allows to use Choices classes directly as argument, while being transparent. No behavioral changes otherwise.\nI marked this as dev, but it would be awesome if it could still slip into 4.2. Not sure if the feature window is still open, but this is more or less a trivial and backwards-compatible change with little risk. PR is still missing some docs, which I will write if this is considered. \nclass Suit(models.IntegerChoices):\n\t\"\"\" All possible card categories in a deck \"\"\"\n\tDIAMOND = 1, _(\"Diamond\")\n\tSPADE = 2, _(\"Spade\")\n\tHEART = 3, _(\"Heart\")\n\tCLUB = 4, _(\"Club\")\n\t\nclass Choiceful(models.Model):\n\t# CURRENTLY:\n\tfrom_enum_old = models.IntegerField(choices=Suit.choices)\n\t\n\t# NEW: raised an fields.E005 prior to proposed PR. Now, retains reference \n\t# to class and transparently resolves via implicit `.choices` call\n\tfrom_new = models.IntegerField(choices=Suit)\n",
  "hints_text": "Hi, Thanks for submitting this ticket. I like it from an API perspective, as it adds a tiny bit of convenience, and I don't think the maintenance burden is very high. I left a few comments on the PR, but someone else will be needed to approve this feature :) if it could still slip into 4.2 According to ​https://docs.djangoproject.com/en/4.1/internals/release-process/#phase-three-bugfixes, since the beta for 4.2 is out, I think we are already in the bug fixing phase :/\n…someone else will be needed to approve this feature :) That's not true David. You're more than welcome to accept tickets. (The requirement being, ​do you feel qualified? — I'm sure you are :) From the PR: The argument now supports both explicit and implicit usage. I have two small worries: Explicit is better than implicit. ... There should be one-- and preferably only one --obvious way to do it. Seems like we're violating both of those. 🤔 Maybe it's worth it but — and I realise I'm always saying this to you Tim 😬 — the reference to the Choices class is unused in Django, and I worry about adding API for external packages, when it would be much better (for all involved) for them to keep control of it themselves. Essentially you want the field to maintain a reference to the Choices class, so you can inspect it later, but in this case I'd think a decorator in drf-spectacular adding the necessary annotation would be much more coherent, than having Django maintain the (from it's POV) otherwise idle reference. Also from the PR: Is it the \"so far away\" 5.0 then? Yes. So the other point about keeping your API in your package is that you're not tied to Django's (super long) release cycle.\nReplying to Carlton Gibson: …someone else will be needed to approve this feature :) That's not true David. You're more than welcome to accept tickets. (The requirement being, ​do you feel qualified? — I'm sure you are :) Hihi, thank you 🤗 From the PR: The argument now supports both explicit and implicit usage. I have two small worries: Explicit is better than implicit. ... There should be one-- and preferably only one --obvious way to do it. Seems like we're violating both of those. 🤔 Passing a Choices class makes sense, instead of doing the strange choices=MyChoices.choices manipulation. As it feels more like the expected way of using this parameter. However, I strongly agree that it would be preferred to have only one way of doing things. If we were to engage in a transition to deprecate passing an iterable of two items, and solely accept Choices classes, that would be n annoying breaking change for many projects, with no good reason/added value 😕 From this point of view, I'm rather in favor of considering this as Won't-Do.\nPassing a Choices class makes sense, instead of doing the strange choices=MyChoices.choices manipulation I think that's right — it would feel nice. But we're not going to remove the support for lists of pairs... (If we loosen here then typing for choices goes from list of pairs to list of pair OR Choices subclass, which I can imagine folk complaining about.) Then there's the separate point about storing a reference that we're not going to use. Let's close then. Thanks.\nI agree with having a single usage-pattern API, but is this really a fair argument here, since this is not upheld on various occasions (for good reason)? Here are a couple of examples: FileField(upload_to='uploads/%Y/%m/%d/') FileField(upload_to=lambda x,y: 'uploads/%Y/%m/%d/') CharField(default='foo') CharField(default=lambda: 'foo') models.CharField(choices=[('cd', 'CD')]) models.CharField(choices=[('Audio', ('cd', 'CD')]) models.CharField(choices=FooChoices.choices) models.CharField(choices=FooChoices) # too confusing? Saying the lists need to go away for us to have choices=FooChoices is imho a silly argument. Why not force every usage of default to be a lambda for consistency’s sake? Same line of thought. The API provides access at different abstraction levels for good reason. The \"new way\" should be the preferred way, while allowing more fine grained control, if the user so desires. (If we loosen here then typing for choices goes from list of pairs to list of pair OR Choices subclass, which I can imagine folk complaining about.) I don't see how this statement can be accurate given that it is already more than list[tuples]. Due to category mode, it can also be list[tuple[tuple]]. I don't see how Union[..., ChoicesMeta] adds any more complexity or even uncertainty. Explicit is better than implicit. ... There should be one-- and preferably only one --obvious way to do it. Sorry, poor choice of words from me. The users intent is very explicit: \"Here is a class of Choices, use it on this field.\" There is no implicit magic going on from a users perspective. Occam's Razor applies too, because the shorter version is just as meaningful, thus the rest is just an unexpected typing chore. And let's not pretend that appending .choices is more obvious. I have seen numerous people who stumble repeatedly over this in practice. Everyone who used Choices classes before has seen a fields.E005 error at least once. If we were to engage in a transition to deprecate passing an iterable of two items, and solely accept Choices classes, that would be n annoying breaking change for many projects, with no good reason/added value 😕 As for the reasons. List were there first. Then categories. Then Choices were introduced. This is not even about adding a feature. This is merely about connecting the existing facilities with 4 lines of low-impact code. If that line of reasoning would be applied consistently, Django would never get another new feature or improvement. Who would break a decade old working feature, that can easily work alongside a more elegant version, on purpose without a technical reason? And then reject the minor non-breaking improvement based on the strange premise that there can only be one way? ? I'm at a loss for words on that. Let me make one more point. What was the point of the Choices class that was introduced into Django? It was added a few versions back, but it was not integrated at all. Why go through the trouble at all? Currently, it adds very little utility over the Enum class itself. Why build a 100 feet bridge and right before \"marriage\" stop construction and decide this is \"complete enough\". Pedestrians will have to jump the 3 feet gap, otherwise people on bicycles will use it too. Yes, it looks that ridiculous to me. Please correct me if I'm wrong, but this class was meant to be used on ModelFields/Forms. Please explain to me why we introduce a single-purpose class and then actively prevent people from using it, as is, for its designated purpose? Disregard the rest if above text did not move you at all. No point in reading further. Regarding retaining the reference and your GH comment: Is this ever read? 🤔 On the ticket you say you what to access it in 3rd-Party packages, so should it not be a public documented attribute in that case? No it is not read, but since Django is a framework meant to be extensible, there is an argument to be made for things that are not directly used by Django, but might be of utility downstream. private/public is a rather academic discussion here. We need to use so many Django/DRF private internals that this straw would certainly not break the camels back. Essentially you want the field to maintain a reference to the Choices class, so you can inspect it later, but in this case I'd think a decorator in drf-spectacular adding the necessary annotation would be much more coherent, than having Django maintain the (from it's POV) otherwise idle reference. We already do maintain a setting ENUM_NAME_OVERRIDES with an extra list of choice sets to fix this issue. My point is, the user already has a perfectly good model. Because you deem that this information irrelevant to Django, the user has to replicate another list of (name,choices). This is error-prone and violates single source of truth for no good reason. Since we do have a fix, this is not a hill I want to die on. Just a wasted opportunity I will point users to when asked again about this. However, I would kindly ask you to reconsider point 1. Happy to amend the PR and throw out point 2, if that is more acceptable.\nThanks for the reply. Good hustle. I’m quite sympathetic to accepting a Choices class directly here. Expressive APIs for the win. There is though a constant stream of complaints that run from “Django’s loose APIs mean it can’t be typed” to (even) “Django is holding back typing in Python” because of this. Generally adding a Union to a type isn’t going to please folks concerned about this. However maybe that’s Python typing’s problem and not ours 🤔 I’ll cc Adam and let him decide. I’m really doubtful about storing references for 3rd party packages. (That way lies madness…) Even if we were to add that, the crystal ball 🔮 says that the day would arrive when even you’d wish you were in control of it. But I’ll see If others have views…\nI implemented much of the Choices stuff on the back of an initial version by Shai. I'm quite sympathetic to allowing this change as it would be cleaner. The main reason we didn't was to not increase the scope of acceptable types - notably we didn't want to allow arbitrary enums - Choices handles a bunch of things around display values and provides some convenience properties. Using .choices was a way of sticking with the existing list of 2-tuples. We also didn't need to make sure that something didn't break elsewhere, but adding .choices is crufty in a way. If we do this, we should only allow Choices subclasses, not generic enums. I don't think it'd add to much complexity to typing stuff, caveat the issues around supporting multiple versions in one set of stubs. Also, given it wouldn't be used internally, we'd need to comment in the code carefully to prevent regression and it'd be semi-public API, but undocumented. I'm not sure we should have this be something that is trumpeted about though - do we want this to be widely used? There is precedent for those sort of thing in private API to not break things - ConnectionHandler.databases IIRC - but does this justify adding something new? 🤔\nThere is though a constant stream of complaints that run from “Django’s loose APIs mean it can’t be typed” to (even) “Django is holding back typing in Python” because of this. Generally adding a Union to a type isn’t going to please folks concerned about this. However maybe that’s Python typing’s problem and not ours 🤔 I’ll cc Adam and let him decide. I think django-stubs would be fine adding Choices to the union. If we do this, we should only allow Choices subclasses, not generic enums. +1 Also, given it wouldn't be used internally, we'd need to comment in the code carefully to prevent regression and it'd be semi-public API, but undocumented. Why would this be an undocumented API?\nOK, so... if we're happy with loosening the signature, then I count +4 (not including Tim opening it) for this change in Field.__init__: if isinstance(choices, ChoicesMeta): self.choices = choices.choices I'll reopen and accept on that basis. There's a separate question about storing the reference to the Choices class... — and whether that would be public or not... (Given that's not used by Django, I'd lean to a decorator approach in the library using it, as I indicated, but …)\nThere is though a constant stream of complaints that run from “Django’s loose APIs mean it can’t be typed” to (even) “Django is holding back typing in Python” because of this. Excuse my ignorance, but I don't really understand. In general I can see what people mean by that, but it is really a valid point in this context? @carlton can you point to a discussion on this topic? I would like to read up on this before stating nonsense. If we do this, we should only allow Choices subclasses, not generic enums. +2 . That is of course the logical ....\"choice\" 😅. Enums is actually missing the functionality and would indeed be watering down the interface, for which the initial critique would be appropriate. But that wasn't even the proposal. isinstance(choices, ChoicesMeta) should have that covered, right? There's a separate question about storing the reference to the Choices class... — and whether that would be public or not... (Given that's not used by Django, I'd lean to a decorator approach in the library using it, as I indicated, but …) Let's just throw out the \"retaining the reference\" part. Absolutely fine by me. Apart from that I would update the PR (code and doc) to align it with the new scope of the ticket if that is alright.",
  "created_at": "2023-03-05T19:05:40Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_args_kwargs_signature (migrations.test_writer.OperationWriterTests.test_args_kwargs_signature)\", \"test_args_signature (migrations.test_writer.OperationWriterTests.test_args_signature)\", \"test_empty_signature (migrations.test_writer.OperationWriterTests.test_empty_signature)\", \"test_expand_args_signature (migrations.test_writer.OperationWriterTests.test_expand_args_signature)\", \"test_kwargs_signature (migrations.test_writer.OperationWriterTests.test_kwargs_signature)\", \"test_multiline_args_signature (migrations.test_writer.OperationWriterTests.test_multiline_args_signature)\", \"test_nested_args_signature (migrations.test_writer.OperationWriterTests.test_nested_args_signature)\", \"test_nested_operation_expand_args_signature (migrations.test_writer.OperationWriterTests.test_nested_operation_expand_args_signature)\", \"test_check (model_fields.tests.ChoicesTests.test_check)\", \"test_choices (model_fields.tests.ChoicesTests.test_choices)\", \"test_choices_from_enum (model_fields.tests.ChoicesTests.test_choices_from_enum)\", \"test_flatchoices (model_fields.tests.ChoicesTests.test_flatchoices)\", \"test_formfield (model_fields.tests.ChoicesTests.test_formfield)\", \"test_invalid_choice (model_fields.tests.ChoicesTests.test_invalid_choice)\", \"test_deconstruct (model_fields.test_charfield.TestMethods.test_deconstruct)\", \"test_choices_validation_supports_named_groups (model_fields.test_integerfield.ValidationTests.test_choices_validation_supports_named_groups)\", \"test_enum_choices_cleans_valid_string (model_fields.test_integerfield.ValidationTests.test_enum_choices_cleans_valid_string)\", \"test_enum_choices_invalid_input (model_fields.test_integerfield.ValidationTests.test_enum_choices_invalid_input)\", \"test_integerfield_cleans_valid_string (model_fields.test_integerfield.ValidationTests.test_integerfield_cleans_valid_string)\", \"test_integerfield_raises_error_on_empty_input (model_fields.test_integerfield.ValidationTests.test_integerfield_raises_error_on_empty_input)\", \"test_integerfield_raises_error_on_invalid_intput (model_fields.test_integerfield.ValidationTests.test_integerfield_raises_error_on_invalid_intput)\", \"test_integerfield_validates_zero_against_choices (model_fields.test_integerfield.ValidationTests.test_integerfield_validates_zero_against_choices)\", \"test_nullable_integerfield_cleans_none_on_null_and_blank_true (model_fields.test_integerfield.ValidationTests.test_nullable_integerfield_cleans_none_on_null_and_blank_true)\", \"test_nullable_integerfield_raises_error_with_blank_false (model_fields.test_integerfield.ValidationTests.test_nullable_integerfield_raises_error_with_blank_false)\", \"Field instances from abstract models are not equal.\", \"Can supply a custom choices form class to Field.formfield()\", \"deconstruct() uses __qualname__ for nested class support.\", \"Field instances can be pickled.\", \"A defined field name (name=\\\"fieldname\\\") is used instead of the model\", \"Fields are ordered based on their creation.\", \"__repr__() of a field displays its name.\", \"__repr__() uses __qualname__ for nested class support.\", \"test_field_str (model_fields.tests.BasicFieldTests.test_field_str)\", \"test_field_verbose_name (model_fields.tests.BasicFieldTests.test_field_verbose_name)\", \"Field.formfield() sets disabled for fields with choices.\", \"test_hash_immutability (model_fields.tests.BasicFieldTests.test_hash_immutability)\", \"Fields with choices respect show_hidden_initial as a kwarg to\", \"test_blank_in_choices (model_fields.tests.GetChoicesTests.test_blank_in_choices)\", \"test_blank_in_grouped_choices (model_fields.tests.GetChoicesTests.test_blank_in_grouped_choices)\", \"test_empty_choices (model_fields.tests.GetChoicesTests.test_empty_choices)\", \"test_lazy_strings_not_evaluated (model_fields.tests.GetChoicesTests.test_lazy_strings_not_evaluated)\", \"test_charfield_cleans_empty_string_when_blank_true (model_fields.test_charfield.ValidationTests.test_charfield_cleans_empty_string_when_blank_true)\", \"test_charfield_raises_error_on_empty_input (model_fields.test_charfield.ValidationTests.test_charfield_raises_error_on_empty_input)\", \"test_charfield_raises_error_on_empty_string (model_fields.test_charfield.ValidationTests.test_charfield_raises_error_on_empty_string)\", \"test_charfield_with_choices_cleans_valid_choice (model_fields.test_charfield.ValidationTests.test_charfield_with_choices_cleans_valid_choice)\", \"test_charfield_with_choices_raises_error_on_invalid_choice (model_fields.test_charfield.ValidationTests.test_charfield_with_choices_raises_error_on_invalid_choice)\", \"test_enum_choices_cleans_valid_string (model_fields.test_charfield.ValidationTests.test_enum_choices_cleans_valid_string)\", \"test_enum_choices_invalid_input (model_fields.test_charfield.ValidationTests.test_enum_choices_invalid_input)\", \"get_choices() interacts with get_FIELD_display() to return the expected\", \"get_choices() works with empty iterators.\", \"A translated display value is coerced to str.\", \"get_choices() works with Iterators.\", \"test_overriding_FIELD_display (model_fields.tests.GetFieldDisplayTests.test_overriding_FIELD_display)\", \"test_overriding_inherited_FIELD_display (model_fields.tests.GetFieldDisplayTests.test_overriding_inherited_FIELD_display)\", \"test_assignment_from_choice_enum (model_fields.test_charfield.TestCharField.test_assignment_from_choice_enum)\", \"test_emoji (model_fields.test_charfield.TestCharField.test_emoji)\", \"test_lookup_integer_in_charfield (model_fields.test_charfield.TestCharField.test_lookup_integer_in_charfield)\", \"CharField passes its max_length attribute to form fields created using\", \"test_get_choices (model_fields.tests.GetChoicesLimitChoicesToTests.test_get_choices)\", \"test_get_choices_reverse_related_field (model_fields.tests.GetChoicesLimitChoicesToTests.test_get_choices_reverse_related_field)\", \"test_get_choices (model_fields.tests.GetChoicesOrderingTests.test_get_choices)\", \"test_get_choices_default_ordering (model_fields.tests.GetChoicesOrderingTests.test_get_choices_default_ordering)\", \"test_get_choices_reverse_related_field (model_fields.tests.GetChoicesOrderingTests.test_get_choices_reverse_related_field)\", \"test_get_choices_reverse_related_field_default_ordering (model_fields.tests.GetChoicesOrderingTests.test_get_choices_reverse_related_field_default_ordering)\", \"test_backend_range_max_value_lookups (model_fields.test_integerfield.PositiveIntegerFieldTests.test_backend_range_max_value_lookups)\", \"test_backend_range_min_value_lookups (model_fields.test_integerfield.PositiveIntegerFieldTests.test_backend_range_min_value_lookups)\", \"Backend specific ranges can be saved without corruption.\", \"Backend specific ranges are enforced at the model validation level\", \"test_coercing (model_fields.test_integerfield.PositiveIntegerFieldTests.test_coercing)\", \"Values within the documented safe range pass validation, and can be\", \"test_invalid_value (model_fields.test_integerfield.PositiveIntegerFieldTests.test_invalid_value)\", \"test_negative_values (model_fields.test_integerfield.PositiveIntegerFieldTests.test_negative_values)\", \"If there are stricter validators than the ones from the database\", \"test_rel_db_type (model_fields.test_integerfield.PositiveIntegerFieldTests.test_rel_db_type)\", \"test_types (model_fields.test_integerfield.PositiveIntegerFieldTests.test_types)\", \"test_backend_range_max_value_lookups (model_fields.test_integerfield.BigIntegerFieldTests.test_backend_range_max_value_lookups)\", \"test_backend_range_min_value_lookups (model_fields.test_integerfield.BigIntegerFieldTests.test_backend_range_min_value_lookups)\", \"test_coercing (model_fields.test_integerfield.BigIntegerFieldTests.test_coercing)\", \"test_invalid_value (model_fields.test_integerfield.BigIntegerFieldTests.test_invalid_value)\", \"test_rel_db_type (model_fields.test_integerfield.BigIntegerFieldTests.test_rel_db_type)\", \"test_types (model_fields.test_integerfield.BigIntegerFieldTests.test_types)\", \"test_backend_range_max_value_lookups (model_fields.test_integerfield.SmallIntegerFieldTests.test_backend_range_max_value_lookups)\", \"test_backend_range_min_value_lookups (model_fields.test_integerfield.SmallIntegerFieldTests.test_backend_range_min_value_lookups)\", \"test_coercing (model_fields.test_integerfield.SmallIntegerFieldTests.test_coercing)\", \"test_invalid_value (model_fields.test_integerfield.SmallIntegerFieldTests.test_invalid_value)\", \"test_rel_db_type (model_fields.test_integerfield.SmallIntegerFieldTests.test_rel_db_type)\", \"test_types (model_fields.test_integerfield.SmallIntegerFieldTests.test_types)\", \"test_backend_range_max_value_lookups (model_fields.test_integerfield.PositiveSmallIntegerFieldTests.test_backend_range_max_value_lookups)\", \"test_backend_range_min_value_lookups (model_fields.test_integerfield.PositiveSmallIntegerFieldTests.test_backend_range_min_value_lookups)\", \"test_coercing (model_fields.test_integerfield.PositiveSmallIntegerFieldTests.test_coercing)\", \"test_invalid_value (model_fields.test_integerfield.PositiveSmallIntegerFieldTests.test_invalid_value)\", \"test_rel_db_type (model_fields.test_integerfield.PositiveSmallIntegerFieldTests.test_rel_db_type)\", \"test_types (model_fields.test_integerfield.PositiveSmallIntegerFieldTests.test_types)\", \"test_backend_range_max_value_lookups (model_fields.test_integerfield.PositiveBigIntegerFieldTests.test_backend_range_max_value_lookups)\", \"test_backend_range_min_value_lookups (model_fields.test_integerfield.PositiveBigIntegerFieldTests.test_backend_range_min_value_lookups)\", \"test_coercing (model_fields.test_integerfield.PositiveBigIntegerFieldTests.test_coercing)\", \"test_invalid_value (model_fields.test_integerfield.PositiveBigIntegerFieldTests.test_invalid_value)\", \"test_rel_db_type (model_fields.test_integerfield.PositiveBigIntegerFieldTests.test_rel_db_type)\", \"test_types (model_fields.test_integerfield.PositiveBigIntegerFieldTests.test_types)\", \"test_backend_range_max_value_lookups (model_fields.test_integerfield.IntegerFieldTests.test_backend_range_max_value_lookups)\", \"test_backend_range_min_value_lookups (model_fields.test_integerfield.IntegerFieldTests.test_backend_range_min_value_lookups)\", \"test_coercing (model_fields.test_integerfield.IntegerFieldTests.test_coercing)\", \"test_invalid_value (model_fields.test_integerfield.IntegerFieldTests.test_invalid_value)\", \"test_rel_db_type (model_fields.test_integerfield.IntegerFieldTests.test_rel_db_type)\", \"test_types (model_fields.test_integerfield.IntegerFieldTests.test_types)\", \"test_choicefield_1 (forms_tests.field_tests.test_choicefield.ChoiceFieldTest.test_choicefield_1)\", \"test_choicefield_2 (forms_tests.field_tests.test_choicefield.ChoiceFieldTest.test_choicefield_2)\", \"test_choicefield_3 (forms_tests.field_tests.test_choicefield.ChoiceFieldTest.test_choicefield_3)\", \"test_choicefield_4 (forms_tests.field_tests.test_choicefield.ChoiceFieldTest.test_choicefield_4)\", \"test_choicefield_callable (forms_tests.field_tests.test_choicefield.ChoiceFieldTest.test_choicefield_callable)\", \"test_choicefield_callable_may_evaluate_to_different_values (forms_tests.field_tests.test_choicefield.ChoiceFieldTest.test_choicefield_callable_may_evaluate_to_different_values)\", \"test_choicefield_choices_default (forms_tests.field_tests.test_choicefield.ChoiceFieldTest.test_choicefield_choices_default)\", \"test_choicefield_disabled (forms_tests.field_tests.test_choicefield.ChoiceFieldTest.test_choicefield_disabled)\", \"test_choicefield_enumeration (forms_tests.field_tests.test_choicefield.ChoiceFieldTest.test_choicefield_enumeration)\", \"test_custom_operation (migrations.test_writer.WriterTests.test_custom_operation)\", \"test_deconstruct_class_arguments (migrations.test_writer.WriterTests.test_deconstruct_class_arguments)\", \"Test comments at top of file.\", \"test_migration_path (migrations.test_writer.WriterTests.test_migration_path)\", \"django.db.models shouldn't be imported if unused.\", \"test_register_non_serializer (migrations.test_writer.WriterTests.test_register_non_serializer)\", \"test_register_serializer (migrations.test_writer.WriterTests.test_register_serializer)\", \"test_serialize_builtin_types (migrations.test_writer.WriterTests.test_serialize_builtin_types)\", \"test_serialize_builtins (migrations.test_writer.WriterTests.test_serialize_builtins)\", \"test_serialize_choices (migrations.test_writer.WriterTests.test_serialize_choices)\", \"Ticket #22943: Test serialization of class-based validators, including\", \"test_serialize_collections (migrations.test_writer.WriterTests.test_serialize_collections)\", \"Make sure compiled regex can be serialized.\", \"test_serialize_complex_func_index (migrations.test_writer.WriterTests.test_serialize_complex_func_index)\", \"test_serialize_constants (migrations.test_writer.WriterTests.test_serialize_constants)\", \"test_serialize_datetime (migrations.test_writer.WriterTests.test_serialize_datetime)\", \"Ticket #22679: makemigrations generates invalid code for (an empty\", \"test_serialize_enum_flags (migrations.test_writer.WriterTests.test_serialize_enum_flags)\", \"test_serialize_enums (migrations.test_writer.WriterTests.test_serialize_enums)\", \"test_serialize_fields (migrations.test_writer.WriterTests.test_serialize_fields)\", \"test_serialize_frozensets (migrations.test_writer.WriterTests.test_serialize_frozensets)\", \"test_serialize_functions (migrations.test_writer.WriterTests.test_serialize_functions)\", \"test_serialize_functools_partial (migrations.test_writer.WriterTests.test_serialize_functools_partial)\", \"test_serialize_functools_partialmethod (migrations.test_writer.WriterTests.test_serialize_functools_partialmethod)\", \"test_serialize_iterators (migrations.test_writer.WriterTests.test_serialize_iterators)\", \"test_serialize_lazy_objects (migrations.test_writer.WriterTests.test_serialize_lazy_objects)\", \"A reference in a local scope can't be serialized.\", \"test_serialize_managers (migrations.test_writer.WriterTests.test_serialize_managers)\", \"test_serialize_multiline_strings (migrations.test_writer.WriterTests.test_serialize_multiline_strings)\", \"test_serialize_nested_class (migrations.test_writer.WriterTests.test_serialize_nested_class)\", \"test_serialize_numbers (migrations.test_writer.WriterTests.test_serialize_numbers)\", \"test_serialize_path_like (migrations.test_writer.WriterTests.test_serialize_path_like)\", \"test_serialize_pathlib (migrations.test_writer.WriterTests.test_serialize_pathlib)\", \"test_serialize_range (migrations.test_writer.WriterTests.test_serialize_range)\", \"test_serialize_set (migrations.test_writer.WriterTests.test_serialize_set)\", \"test_serialize_settings (migrations.test_writer.WriterTests.test_serialize_settings)\", \"test_serialize_strings (migrations.test_writer.WriterTests.test_serialize_strings)\", \"test_serialize_timedelta (migrations.test_writer.WriterTests.test_serialize_timedelta)\", \"test_serialize_type_model (migrations.test_writer.WriterTests.test_serialize_type_model)\", \"test_serialize_type_none (migrations.test_writer.WriterTests.test_serialize_type_none)\", \"An unbound method used within a class body can be serialized.\", \"test_serialize_uuid (migrations.test_writer.WriterTests.test_serialize_uuid)\", \"Tests serializing a simple migration.\", \"#24155 - Tests ordering of imports.\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.765312",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}