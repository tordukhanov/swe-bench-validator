{
  "repo": "django/django",
  "instance_id": "django__django-16649",
  "base_commit": "39d1e45227e060746ed461fddde80fa2b6cf0dcd",
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1087,7 +1087,12 @@ def add_annotation(self, annotation, alias, select=True):\n         if select:\n             self.append_annotation_mask([alias])\n         else:\n-            self.set_annotation_mask(set(self.annotation_select).difference({alias}))\n+            annotation_mask = (\n+                value\n+                for value in dict.fromkeys(self.annotation_select)\n+                if value != alias\n+            )\n+            self.set_annotation_mask(annotation_mask)\n         self.annotations[alias] = annotation\n \n     def resolve_expression(self, query, *args, **kwargs):\n@@ -2341,12 +2346,12 @@ def set_annotation_mask(self, names):\n         if names is None:\n             self.annotation_select_mask = None\n         else:\n-            self.annotation_select_mask = set(names)\n+            self.annotation_select_mask = list(dict.fromkeys(names))\n         self._annotation_select_cache = None\n \n     def append_annotation_mask(self, names):\n         if self.annotation_select_mask is not None:\n-            self.set_annotation_mask(self.annotation_select_mask.union(names))\n+            self.set_annotation_mask((*self.annotation_select_mask, *names))\n \n     def set_extra_mask(self, names):\n         \"\"\"\n@@ -2423,9 +2428,9 @@ def annotation_select(self):\n             return {}\n         elif self.annotation_select_mask is not None:\n             self._annotation_select_cache = {\n-                k: v\n-                for k, v in self.annotations.items()\n-                if k in self.annotation_select_mask\n+                k: self.annotations[k]\n+                for k in self.annotation_select_mask\n+                if k in self.annotations\n             }\n             return self._annotation_select_cache\n         else:\n",
  "test_patch": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -466,8 +466,8 @@ def test_group_by_order_by_select_index(self):\n                 ],\n             )\n         sql = ctx[0][\"sql\"]\n-        self.assertIn(\"GROUP BY 1\", sql)\n-        self.assertIn(\"ORDER BY 1\", sql)\n+        self.assertIn(\"GROUP BY 2\", sql)\n+        self.assertIn(\"ORDER BY 2\", sql)\n \n     def test_index(self):\n         self.assertSequenceEqual(\ndiff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -246,7 +246,7 @@ def test_union_with_two_annotated_values_list(self):\n             )\n             .values_list(\"num\", \"count\")\n         )\n-        self.assertCountEqual(qs1.union(qs2), [(1, 0), (2, 1)])\n+        self.assertCountEqual(qs1.union(qs2), [(1, 0), (1, 2)])\n \n     def test_union_with_extra_and_values_list(self):\n         qs1 = (\n@@ -368,6 +368,20 @@ def test_union_multiple_models_with_values_list_and_order_by_extra_select(self):\n             [reserved_name.pk],\n         )\n \n+    def test_union_multiple_models_with_values_list_and_annotations(self):\n+        ReservedName.objects.create(name=\"rn1\", order=10)\n+        Celebrity.objects.create(name=\"c1\")\n+        qs1 = ReservedName.objects.annotate(row_type=Value(\"rn\")).values_list(\n+            \"name\", \"order\", \"row_type\"\n+        )\n+        qs2 = Celebrity.objects.annotate(\n+            row_type=Value(\"cb\"), order=Value(-10)\n+        ).values_list(\"name\", \"order\", \"row_type\")\n+        self.assertSequenceEqual(\n+            qs1.union(qs2).order_by(\"order\"),\n+            [(\"c1\", -10, \"cb\"), (\"rn1\", 10, \"rn\")],\n+        )\n+\n     def test_union_in_subquery(self):\n         ReservedName.objects.bulk_create(\n             [\n",
  "problem_statement": "Querysets: annotate() columns are forced into a certain position which may disrupt union()\nDescription\n\t\n(Reporting possible issue found by a user on #django)\nUsing values() to force selection of certain columns in a certain order proved useful unioning querysets with union() for the aforementioned user. The positioning of columns added with annotate() is not controllable with values() and has the potential to disrupt union() unless this fact is known and the ordering done in a certain way to accommodate it.\nI'm reporting this mainly for posterity but also as a highlight that perhaps this should be mentioned in the documentation. I'm sure there are reasons why the annotations are appended to the select but if someone feels that this is changeable then it would be a bonus outcome.\n",
  "hints_text": "(The ticket component should change to \"Documentation\" if there aren't any code changes to make here. I'm not sure.)\nProbably duplicate of #28900.\nI've stumbled upon a case in production where this limitation prevents me for making a useful query. I've been able to create a test to reproduce this problem. It works with sqlite but fails with postgres. Add this test to tests/queries/test_qs_combinators.py: from django.db.models import F, IntegerField, TextField, Value def test_union_with_two_annotated_values_on_different_models(self): qs1 = Number.objects.annotate( text_annotation=Value('Foo', TextField()) ).values('text_annotation', 'num') qs2 = ReservedName.objects.annotate( int_annotation=Value(1, IntegerField()), ).values('name', 'int_annotation') self.assertEqual(qs1.union(qs2).count(), 10) In current master (78f8b80f9b215e50618375adce4c97795dabbb84), running ./runtests.py --parallel=1 --settings=tests.test_postgres queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_two_annotated_values_on_different_models fails: Testing against Django installed in 'django/django' Creating test database for alias 'default'... Creating test database for alias 'other'... System check identified no issues (1 silenced). E ====================================================================== ERROR: test_union_with_two_annotated_values_on_different_models (queries.test_qs_combinators.QuerySetSetOperationTests) ---------------------------------------------------------------------- Traceback (most recent call last): File \"django/django/db/backends/utils.py\", line 85, in _execute return self.cursor.execute(sql, params) psycopg2.ProgrammingError: UNION types integer and character varying cannot be matched LINE 1: ..._annotation\" FROM \"queries_number\") UNION (SELECT \"queries_r... ^ The above exception was the direct cause of the following exception: Traceback (most recent call last): File \"django/tests/queries/test_qs_combinators.py\", line 140, in test_union_with_two_annotated_values_on_different_models self.assertEqual(qs1.union(qs2).count(), 10) File \"django/django/db/models/query.py\", line 382, in count return self.query.get_count(using=self.db) File \"django/django/db/models/sql/query.py\", line 494, in get_count number = obj.get_aggregation(using, ['__count'])['__count'] File \"django/django/db/models/sql/query.py\", line 479, in get_aggregation result = compiler.execute_sql(SINGLE) File \"django/django/db/models/sql/compiler.py\", line 1054, in execute_sql cursor.execute(sql, params) File \"django/django/db/backends/utils.py\", line 68, in execute return self._execute_with_wrappers(sql, params, many=False, executor=self._execute) File \"django/django/db/backends/utils.py\", line 77, in _execute_with_wrappers return executor(sql, params, many, context) File \"django/django/db/backends/utils.py\", line 85, in _execute return self.cursor.execute(sql, params) File \"django/django/db/utils.py\", line 89, in __exit__ raise dj_exc_value.with_traceback(traceback) from exc_value File \"django/django/db/backends/utils.py\", line 85, in _execute return self.cursor.execute(sql, params) django.db.utils.ProgrammingError: UNION types integer and character varying cannot be matched LINE 1: ..._annotation\" FROM \"queries_number\") UNION (SELECT \"queries_r... ^ ---------------------------------------------------------------------- Ran 1 test in 0.007s FAILED (errors=1) Destroying test database for alias 'default'... Destroying test database for alias 'other'... My tests/test_postgres.py is: DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': 'django-test', 'HOST': '127.0.0.1', }, 'other': { 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': 'django-test-other', } } SECRET_KEY = \"django_tests_secret_key\" # Use a fast hasher to speed up tests. PASSWORD_HASHERS = [ 'django.contrib.auth.hashers.MD5PasswordHasher', ]\nThere's a ticket with a test case in #30211. That ticket was reported as a bug, and I think this ticket should be a bug too, so I'm changing the classification for now (apologies if that's inappropriate). I think it's a bug because the documentation in my reading implies that as long as the columns match, union will work. So it really comes as a bit of a surprise that Django overrides the order in values_list(). In my particular case, I'm using union() to combine two different tables that I need to get out in sorted order, and I was trying to use annotate() + values_list() to add a NULL filler to one table as it lacks a column from the other. Also, I suppose the ORM could possibly also be a bit more efficient if it could return values_list() tuples directly from the select instead of having to rearrange them?\nActually there could be a different problem as well. We were lucky in that the ORM generated SQL where the data types of the columns do not match. But what happens when the data types of the columns match? I'm afraid you would get a query that doesn't throw an exception but is in fact subtly broken, especially if the values of the different columns happen to be similar, in which case it might take a long time for app developers to realize that the query is broken.\nI just hit this as well. The solution (workaround) seems to be using F() and Value() freely and consistently for all querysets even if it doesn't look necessary on the surface. See ​https://github.com/matthiask/feincms3-forms/commit/c112a7d613e991780f383393fd05f1c84c81a279 (It's a bit surprising that values_list doesn't produce a SQL query with the exact same ordering of values, but after thinking about it some more I'm not sure if that's really a bug or just a sharp edge of the current implementation.)\nI submitted a failing unit test for this issue which demonstrates the problem: ​https://github.com/django/django/pull/16577 This seems hard to fix. I don't expect to do any work on this in the next few months since I have found a workaround for my use case. Hopefully the test is useful to someone.",
  "created_at": "2023-03-13T14:06:31Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_union_multiple_models_with_values_list_and_annotations (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_multiple_models_with_values_list_and_annotations)\", \"test_union_with_two_annotated_values_list (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_two_annotated_values_list)\"]",
  "PASS_TO_PASS": "[\"test_combining_multiple_models (queries.test_qs_combinators.QuerySetSetOperationTests.test_combining_multiple_models)\", \"test_count_difference (queries.test_qs_combinators.QuerySetSetOperationTests.test_count_difference)\", \"test_count_intersection (queries.test_qs_combinators.QuerySetSetOperationTests.test_count_intersection)\", \"test_count_union (queries.test_qs_combinators.QuerySetSetOperationTests.test_count_union)\", \"test_count_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests.test_count_union_empty_result)\", \"test_count_union_with_select_related (queries.test_qs_combinators.QuerySetSetOperationTests.test_count_union_with_select_related)\", \"test_difference_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests.test_difference_with_empty_qs)\", \"test_difference_with_values (queries.test_qs_combinators.QuerySetSetOperationTests.test_difference_with_values)\", \"test_empty_qs_union_with_ordered_qs (queries.test_qs_combinators.QuerySetSetOperationTests.test_empty_qs_union_with_ordered_qs)\", \"test_exists_difference (queries.test_qs_combinators.QuerySetSetOperationTests.test_exists_difference)\", \"test_exists_intersection (queries.test_qs_combinators.QuerySetSetOperationTests.test_exists_intersection)\", \"test_exists_union (queries.test_qs_combinators.QuerySetSetOperationTests.test_exists_union)\", \"test_exists_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests.test_exists_union_empty_result)\", \"test_get_difference (queries.test_qs_combinators.QuerySetSetOperationTests.test_get_difference)\", \"test_get_intersection (queries.test_qs_combinators.QuerySetSetOperationTests.test_get_intersection)\", \"test_get_union (queries.test_qs_combinators.QuerySetSetOperationTests.test_get_union)\", \"test_get_with_filters_unsupported_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests.test_get_with_filters_unsupported_on_combined_qs)\", \"test_intersection_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests.test_intersection_with_empty_qs)\", \"test_intersection_with_values (queries.test_qs_combinators.QuerySetSetOperationTests.test_intersection_with_values)\", \"test_limits (queries.test_qs_combinators.QuerySetSetOperationTests.test_limits)\", \"test_operator_on_combined_qs_error (queries.test_qs_combinators.QuerySetSetOperationTests.test_operator_on_combined_qs_error)\", \"test_order_by_same_type (queries.test_qs_combinators.QuerySetSetOperationTests.test_order_by_same_type)\", \"test_order_raises_on_non_selected_column (queries.test_qs_combinators.QuerySetSetOperationTests.test_order_raises_on_non_selected_column)\", \"test_ordering (queries.test_qs_combinators.QuerySetSetOperationTests.test_ordering)\", \"test_ordering_by_alias (queries.test_qs_combinators.QuerySetSetOperationTests.test_ordering_by_alias)\", \"test_ordering_by_f_expression (queries.test_qs_combinators.QuerySetSetOperationTests.test_ordering_by_f_expression)\", \"test_ordering_by_f_expression_and_alias (queries.test_qs_combinators.QuerySetSetOperationTests.test_ordering_by_f_expression_and_alias)\", \"test_qs_with_subcompound_qs (queries.test_qs_combinators.QuerySetSetOperationTests.test_qs_with_subcompound_qs)\", \"test_simple_difference (queries.test_qs_combinators.QuerySetSetOperationTests.test_simple_difference)\", \"test_simple_intersection (queries.test_qs_combinators.QuerySetSetOperationTests.test_simple_intersection)\", \"test_simple_union (queries.test_qs_combinators.QuerySetSetOperationTests.test_simple_union)\", \"test_union_distinct (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_distinct)\", \"test_union_empty_filter_slice (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_empty_filter_slice)\", \"test_union_in_subquery (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_in_subquery)\", \"test_union_in_subquery_related_outerref (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_in_subquery_related_outerref)\", \"test_union_multiple_models_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_multiple_models_with_values_list_and_order)\", \"test_union_multiple_models_with_values_list_and_order_by_extra_select (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_multiple_models_with_values_list_and_order_by_extra_select)\", \"test_union_nested (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_nested)\", \"test_union_none (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_none)\", \"test_union_none_slice (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_none_slice)\", \"test_union_order_with_null_first_last (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_order_with_null_first_last)\", \"test_union_slice_index (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_slice_index)\", \"test_union_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_empty_qs)\", \"test_union_with_extra_and_values_list (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_extra_and_values_list)\", \"test_union_with_first (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_first)\", \"test_union_with_select_related_and_order (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_select_related_and_order)\", \"test_union_with_values (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_values)\", \"test_union_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_values_list_and_order)\", \"test_union_with_values_list_and_order_on_annotation (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_values_list_and_order_on_annotation)\", \"test_union_with_values_list_on_annotated_and_unannotated (queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_values_list_on_annotated_and_unannotated)\", \"test_unsupported_operations_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests.test_unsupported_operations_on_combined_qs)\", \"test_unsupported_ordering_slicing_raises_db_error (queries.test_qs_combinators.QuerySetSetOperationTests.test_unsupported_ordering_slicing_raises_db_error)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.766383",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}