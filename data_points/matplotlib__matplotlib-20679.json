{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-20679",
  "base_commit": "27ab013fe72967e9a9e1f7566a0aa6910aed4c9c",
  "patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -1807,6 +1807,9 @@ def __init__(self, ax, onselect, useblit=False, button=None,\n         else:\n             self.validButtons = button\n \n+        # Set to True when a selection is completed, otherwise is False\n+        self._selection_completed = False\n+\n         # will save the data (position at mouseclick)\n         self._eventpress = None\n         # will save the data (pos. at mouserelease)\n@@ -2017,12 +2020,17 @@ class SpanSelector(_SelectorWidget):\n     In order to turn off the SpanSelector, set ``span_selector.active`` to\n     False.  To turn it back on, set it to True.\n \n+    Press and release events triggered at the same coordinates outside the\n+    selection will clear the selector, except when\n+    ``ignore_event_outside=True``.\n+\n     Parameters\n     ----------\n     ax : `matplotlib.axes.Axes`\n \n     onselect : callable\n-        A callback function to be called when the selection is completed.\n+        A callback function that is called after a release event and the\n+        selection is created, changed or removed.\n         It must have the signature::\n \n             def on_select(min: float, max: float) -> Any\n@@ -2031,8 +2039,8 @@ def on_select(min: float, max: float) -> Any\n         The direction along which to draw the span selector.\n \n     minspan : float, default: 0\n-        If selection is less than or equal to *minspan*, do not call\n-        *onselect*.\n+        If selection is less than or equal to *minspan*, the selection is\n+        removed (when already existing) or cancelled.\n \n     useblit : bool, default: False\n         If True, use the backend-dependent blitting features for faster\n@@ -2071,6 +2079,10 @@ def on_select(min: float, max: float) -> Any\n         If `True`, the widget can be moved by clicking anywhere within\n         its bounds.\n \n+    ignore_event_outside : bool, default: False\n+        If `True`, the event triggered outside the span selector will be\n+        ignored.\n+\n     Examples\n     --------\n     >>> import matplotlib.pyplot as plt\n@@ -2091,7 +2103,7 @@ def on_select(min: float, max: float) -> Any\n     def __init__(self, ax, onselect, direction, minspan=0, useblit=False,\n                  props=None, onmove_callback=None, interactive=False,\n                  button=None, handle_props=None, grab_range=10,\n-                 drag_from_anywhere=False):\n+                 drag_from_anywhere=False, ignore_event_outside=False):\n \n         super().__init__(ax, onselect, useblit=useblit, button=button)\n \n@@ -2117,6 +2129,7 @@ def __init__(self, ax, onselect, direction, minspan=0, useblit=False,\n         self.grab_range = grab_range\n         self._interactive = interactive\n         self.drag_from_anywhere = drag_from_anywhere\n+        self.ignore_event_outside = ignore_event_outside\n \n         # Reset canvas so that `new_axes` connects events.\n         self.canvas = None\n@@ -2163,6 +2176,9 @@ def new_axes(self, ax):\n             self.canvas = ax.figure.canvas\n             self.connect_default_events()\n \n+        # Reset\n+        self._selection_completed = False\n+\n         if self.direction == 'horizontal':\n             trans = ax.get_xaxis_transform()\n             w, h = 0, 1\n@@ -2227,7 +2243,7 @@ def _press(self, event):\n         self._pressv = v\n         self._prev = self._get_data(event)\n \n-        if self._active_handle is None:\n+        if self._active_handle is None and not self.ignore_event_outside:\n             # when the press event outside the span, we initially set the\n             # visibility to False and extents to (v, v)\n             # update will be called when setting the extents\n@@ -2267,22 +2283,32 @@ def direction(self, direction):\n     def _release(self, event):\n         \"\"\"Button release event handler.\"\"\"\n         self._set_cursor(False)\n+        # self._pressv is deprecated but we still need to maintain it\n+        self._pressv = None\n+\n         if not self._interactive:\n             self._rect.set_visible(False)\n \n+        if (self._active_handle is None and self._selection_completed and\n+                self.ignore_event_outside):\n+            return\n+\n         vmin, vmax = self.extents\n         span = vmax - vmin\n+\n         if span <= self.minspan:\n+            # Remove span and set self._selection_completed = False\n             self.set_visible(False)\n-            self.update()\n-            return\n+            if self._selection_completed:\n+                # Call onselect, only when the span is already existing\n+                self.onselect(vmin, vmax)\n+            self._selection_completed = False\n+        else:\n+            self.onselect(vmin, vmax)\n+            self._selection_completed = True\n \n-        self.onselect(vmin, vmax)\n         self.update()\n \n-        # self._pressv is deprecated but we still need to maintain it\n-        self._pressv = None\n-\n         self._active_handle = None\n \n         return False\n@@ -2330,6 +2356,10 @@ def _onmove(self, event):\n                 vmax = v\n         # new shape\n         else:\n+            # Don't create a new span if there is already one when\n+            # ignore_event_outside=True\n+            if self.ignore_event_outside and self._selection_completed:\n+                return\n             vmin, vmax = vpress, v\n             if vmin > vmax:\n                 vmin, vmax = vmax, vmin\n@@ -2576,7 +2606,8 @@ def closest(self, x, y):\n         The parent axes for the widget.\n \n     onselect : function\n-        A callback function that is called after a selection is completed.\n+        A callback function that is called after a release event and the\n+        selection is created, changed or removed.\n         It must have the signature::\n \n             def onselect(eclick: MouseEvent, erelease: MouseEvent)\n@@ -2585,10 +2616,12 @@ def onselect(eclick: MouseEvent, erelease: MouseEvent)\n         `.MouseEvent`\\s that start and complete the selection.\n \n     minspanx : float, default: 0\n-        Selections with an x-span less than *minspanx* are ignored.\n+        Selections with an x-span less than or equal to *minspanx* are removed\n+        (when already existing) or cancelled.\n \n     minspany : float, default: 0\n-        Selections with a y-span less than *minspany* are ignored.\n+        Selections with an y-span less than or equal to *minspanx* are removed\n+        (when already existing) or cancelled.\n \n     useblit : bool, default: False\n         Whether to use blitting for faster drawing (if supported by the\n@@ -2635,9 +2668,14 @@ def onselect(eclick: MouseEvent, erelease: MouseEvent)\n \n         \"square\" and \"center\" can be combined.\n \n-    drag_from_anywhere : bool, optional\n+    drag_from_anywhere : bool, default: False\n         If `True`, the widget can be moved by clicking anywhere within\n         its bounds.\n+\n+    ignore_event_outside : bool, default: False\n+        If `True`, the event triggered outside the span selector will be\n+        ignored.\n+\n     \"\"\"\n \n \n@@ -2649,6 +2687,10 @@ class RectangleSelector(_SelectorWidget):\n \n     For the cursor to remain responsive you must keep a reference to it.\n \n+    Press and release events triggered at the same coordinates outside the\n+    selection will clear the selector, except when\n+    ``ignore_event_outside=True``.\n+\n     %s\n \n     Examples\n@@ -2680,7 +2722,7 @@ def __init__(self, ax, onselect, drawtype='box',\n                  lineprops=None, props=None, spancoords='data',\n                  button=None, grab_range=10, handle_props=None,\n                  interactive=False, state_modifier_keys=None,\n-                 drag_from_anywhere=False):\n+                 drag_from_anywhere=False, ignore_event_outside=False):\n         super().__init__(ax, onselect, useblit=useblit, button=button,\n                          state_modifier_keys=state_modifier_keys)\n \n@@ -2688,6 +2730,7 @@ def __init__(self, ax, onselect, drawtype='box',\n         self.visible = True\n         self._interactive = interactive\n         self.drag_from_anywhere = drag_from_anywhere\n+        self.ignore_event_outside = ignore_event_outside\n \n         if drawtype == 'none':  # draw a line but make it invisible\n             _api.warn_deprecated(\n@@ -2788,7 +2831,7 @@ def _press(self, event):\n             # Clear previous rectangle before drawing new rectangle.\n             self.update()\n \n-        if self._active_handle is None:\n+        if self._active_handle is None and not self.ignore_event_outside:\n             x = event.xdata\n             y = event.ydata\n             self.visible = False\n@@ -2804,6 +2847,10 @@ def _release(self, event):\n         if not self._interactive:\n             self._to_draw.set_visible(False)\n \n+        if (self._active_handle is None and self._selection_completed and\n+                self.ignore_event_outside):\n+            return\n+\n         # update the eventpress and eventrelease with the resulting extents\n         x0, x1, y0, y1 = self.extents\n         self._eventpress.xdata = x0\n@@ -2828,16 +2875,18 @@ def _release(self, event):\n                                spancoords=self.spancoords)\n         # check if drawn distance (if it exists) is not too small in\n         # either x or y-direction\n-        if (self._drawtype != 'none'\n-                and (self.minspanx is not None and spanx < self.minspanx\n-                     or self.minspany is not None and spany < self.minspany)):\n+        minspanxy = (spanx <= self.minspanx or spany <= self.minspany)\n+        if (self._drawtype != 'none' and minspanxy):\n             for artist in self.artists:\n                 artist.set_visible(False)\n-            self.update()\n-            return\n+            if self._selection_completed:\n+                # Call onselect, only when the selection is already existing\n+                self.onselect(self._eventpress, self._eventrelease)\n+            self._selection_completed = False\n+        else:\n+            self.onselect(self._eventpress, self._eventrelease)\n+            self._selection_completed = True\n \n-        # call desired function\n-        self.onselect(self._eventpress, self._eventrelease)\n         self.update()\n         self._active_handle = None\n \n@@ -2867,6 +2916,10 @@ def _onmove(self, event):\n \n         # new shape\n         else:\n+            # Don't create a new rectangle if there is already one when\n+            # ignore_event_outside=True\n+            if self.ignore_event_outside and self._selection_completed:\n+                return\n             center = [self._eventpress.xdata, self._eventpress.ydata]\n             center_pix = [self._eventpress.x, self._eventpress.y]\n             dx = (event.xdata - center[0]) / 2.\n@@ -3048,6 +3101,10 @@ class EllipseSelector(RectangleSelector):\n \n     For the cursor to remain responsive you must keep a reference to it.\n \n+    Press and release events triggered at the same coordinates outside the\n+    selection will clear the selector, except when\n+    ``ignore_event_outside=True``.\n+\n     %s\n \n     Examples\n@@ -3275,7 +3332,6 @@ def __init__(self, ax, onselect, useblit=False,\n                          state_modifier_keys=state_modifier_keys)\n \n         self._xs, self._ys = [0], [0]\n-        self._polygon_completed = False\n \n         if props is None:\n             props = dict(color='k', linestyle='-', linewidth=2, alpha=0.5)\n@@ -3309,7 +3365,7 @@ def _nverts(self):\n     def _remove_vertex(self, i):\n         \"\"\"Remove vertex with index i.\"\"\"\n         if (self._nverts > 2 and\n-                self._polygon_completed and\n+                self._selection_completed and\n                 i in (0, self._nverts - 1)):\n             # If selecting the first or final vertex, remove both first and\n             # last vertex as they are the same for a closed polygon\n@@ -3327,12 +3383,12 @@ def _remove_vertex(self, i):\n         if self._nverts <= 2:\n             # If only one point left, return to incomplete state to let user\n             # start drawing again\n-            self._polygon_completed = False\n+            self._selection_completed = False\n \n     def _press(self, event):\n         \"\"\"Button press event handler.\"\"\"\n         # Check for selection of a tool handle.\n-        if ((self._polygon_completed or 'move_vertex' in self._state)\n+        if ((self._selection_completed or 'move_vertex' in self._state)\n                 and len(self._xs) > 0):\n             h_idx, h_dist = self._polygon_handles.closest(event.x, event.y)\n             if h_dist < self.grab_range:\n@@ -3354,16 +3410,16 @@ def _release(self, event):\n         elif (len(self._xs) > 3\n               and self._xs[-1] == self._xs[0]\n               and self._ys[-1] == self._ys[0]):\n-            self._polygon_completed = True\n+            self._selection_completed = True\n \n         # Place new vertex.\n-        elif (not self._polygon_completed\n+        elif (not self._selection_completed\n               and 'move_all' not in self._state\n               and 'move_vertex' not in self._state):\n             self._xs.insert(-1, event.xdata)\n             self._ys.insert(-1, event.ydata)\n \n-        if self._polygon_completed:\n+        if self._selection_completed:\n             self.onselect(self.verts)\n \n     def onmove(self, event):\n@@ -3386,7 +3442,7 @@ def _onmove(self, event):\n             self._xs[idx], self._ys[idx] = event.xdata, event.ydata\n             # Also update the end of the polygon line if the first vertex is\n             # the active handle and the polygon is completed.\n-            if idx == 0 and self._polygon_completed:\n+            if idx == 0 and self._selection_completed:\n                 self._xs[-1], self._ys[-1] = event.xdata, event.ydata\n \n         # Move all vertices.\n@@ -3398,7 +3454,7 @@ def _onmove(self, event):\n                 self._ys[k] = self._ys_at_press[k] + dy\n \n         # Do nothing if completed or waiting for a move.\n-        elif (self._polygon_completed\n+        elif (self._selection_completed\n               or 'move_vertex' in self._state or 'move_all' in self._state):\n             return\n \n@@ -3420,7 +3476,7 @@ def _on_key_press(self, event):\n         \"\"\"Key press event handler.\"\"\"\n         # Remove the pending vertex if entering the 'move_vertex' or\n         # 'move_all' mode\n-        if (not self._polygon_completed\n+        if (not self._selection_completed\n                 and ('move_vertex' in self._state or\n                      'move_all' in self._state)):\n             self._xs, self._ys = self._xs[:-1], self._ys[:-1]\n@@ -3430,7 +3486,7 @@ def _on_key_release(self, event):\n         \"\"\"Key release event handler.\"\"\"\n         # Add back the pending vertex if leaving the 'move_vertex' or\n         # 'move_all' mode (by checking the released key)\n-        if (not self._polygon_completed\n+        if (not self._selection_completed\n                 and\n                 (event.key == self.state_modifier_keys.get('move_vertex')\n                  or event.key == self.state_modifier_keys.get('move_all'))):\n@@ -3441,7 +3497,7 @@ def _on_key_release(self, event):\n         elif event.key == self.state_modifier_keys.get('clear'):\n             event = self._clean_event(event)\n             self._xs, self._ys = [event.xdata], [event.ydata]\n-            self._polygon_completed = False\n+            self._selection_completed = False\n             self.set_visible(True)\n \n     def _draw_polygon(self):\n@@ -3450,7 +3506,7 @@ def _draw_polygon(self):\n         # Only show one tool handle at the start and end vertex of the polygon\n         # if the polygon is completed or the user is locked on to the start\n         # vertex.\n-        if (self._polygon_completed\n+        if (self._selection_completed\n                 or (len(self._xs) > 3\n                     and self._xs[-1] == self._xs[0]\n                     and self._ys[-1] == self._ys[0])):\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -190,6 +190,63 @@ def onselect(epress, erelease):\n         tool._corner_handles.artist.get_markeredgecolor(), 'b')\n \n \n+@pytest.mark.parametrize('interactive', [True, False])\n+def test_rectangle_selector_onselect(interactive):\n+    # check when press and release events take place at the same position\n+    ax = get_ax()\n+\n+    def onselect(vmin, vmax):\n+        ax._got_onselect = True\n+\n+    tool = widgets.RectangleSelector(ax, onselect, interactive=interactive)\n+    do_event(tool, 'press', xdata=100, ydata=110, button=1)\n+    # move outside of axis\n+    do_event(tool, 'onmove', xdata=150, ydata=120, button=1)\n+    do_event(tool, 'release', xdata=150, ydata=120, button=1)\n+\n+    assert tool.ax._got_onselect\n+    assert tool.extents == (100.0, 150.0, 110.0, 120.0)\n+\n+    # Reset tool.ax._got_onselect\n+    tool.ax._got_onselect = False\n+\n+    do_event(tool, 'press', xdata=10, ydata=100, button=1)\n+    do_event(tool, 'release', xdata=10, ydata=100, button=1)\n+\n+    assert tool.ax._got_onselect\n+\n+\n+@pytest.mark.parametrize('ignore_event_outside', [True, False])\n+def test_rectangle_selector_ignore_outside(ignore_event_outside):\n+    ax = get_ax()\n+    def onselect(vmin, vmax):\n+        ax._got_onselect = True\n+\n+    tool = widgets.RectangleSelector(ax, onselect,\n+                                     ignore_event_outside=ignore_event_outside)\n+    do_event(tool, 'press', xdata=100, ydata=110, button=1)\n+    do_event(tool, 'onmove', xdata=150, ydata=120, button=1)\n+    do_event(tool, 'release', xdata=150, ydata=120, button=1)\n+\n+    assert tool.ax._got_onselect\n+    assert tool.extents == (100.0, 150.0, 110.0, 120.0)\n+\n+    # Reset\n+    ax._got_onselect = False\n+    # Trigger event outside of span\n+    do_event(tool, 'press', xdata=150, ydata=150, button=1)\n+    do_event(tool, 'onmove', xdata=160, ydata=160, button=1)\n+    do_event(tool, 'release', xdata=160, ydata=160, button=1)\n+    if ignore_event_outside:\n+        # event have been ignored and span haven't changed.\n+        assert not ax._got_onselect\n+        assert tool.extents == (100.0, 150.0, 110.0, 120.0)\n+    else:\n+        # A new shape is created\n+        assert ax._got_onselect\n+        assert tool.extents == (150.0, 160.0, 150.0, 160.0)\n+\n+\n def check_span(*args, **kwargs):\n     ax = get_ax()\n \n@@ -222,13 +279,79 @@ def test_span_selector():\n     check_span('horizontal', minspan=10, useblit=True)\n     check_span('vertical', onmove_callback=True, button=1)\n     check_span('horizontal', props=dict(fill=True))\n+    check_span('horizontal', interactive=True)\n+\n+\n+@pytest.mark.parametrize('interactive', [True, False])\n+def test_span_selector_onselect(interactive):\n+    # check when press and release events take place at the same position\n+    ax = get_ax()\n+\n+    def onselect(vmin, vmax):\n+        ax._got_onselect = True\n+\n+    tool = widgets.SpanSelector(ax, onselect, 'horizontal',\n+                                interactive=interactive)\n+    do_event(tool, 'press', xdata=100, ydata=100, button=1)\n+    # move outside of axis\n+    do_event(tool, 'onmove', xdata=150, ydata=100, button=1)\n+    do_event(tool, 'release', xdata=150, ydata=100, button=1)\n+\n+    assert tool.ax._got_onselect\n+    assert tool.extents == (100, 150)\n+\n+    # Reset tool.ax._got_onselect\n+    tool.ax._got_onselect = False\n+\n+    do_event(tool, 'press', xdata=10, ydata=100, button=1)\n+    do_event(tool, 'release', xdata=10, ydata=100, button=1)\n+\n+    assert tool.ax._got_onselect\n+\n+\n+@pytest.mark.parametrize('ignore_event_outside', [True, False])\n+def test_span_selector_ignore_outside(ignore_event_outside):\n+    ax = get_ax()\n+    def onselect(vmin, vmax):\n+        ax._got_onselect = True\n+\n+    def onmove(vmin, vmax):\n+        ax._got_on_move = True\n+\n+    tool = widgets.SpanSelector(ax, onselect, 'horizontal',\n+                                onmove_callback=onmove,\n+                                ignore_event_outside=ignore_event_outside)\n+    do_event(tool, 'press', xdata=100, ydata=100, button=1)\n+    do_event(tool, 'onmove', xdata=125, ydata=125, button=1)\n+    do_event(tool, 'release', xdata=125, ydata=125, button=1)\n+    assert ax._got_onselect\n+    assert ax._got_on_move\n+    assert tool.extents == (100, 125)\n+\n+    # Reset\n+    ax._got_onselect = False\n+    ax._got_on_move = False\n+    # Trigger event outside of span\n+    do_event(tool, 'press', xdata=150, ydata=150, button=1)\n+    do_event(tool, 'onmove', xdata=160, ydata=160, button=1)\n+    do_event(tool, 'release', xdata=160, ydata=160, button=1)\n+    if ignore_event_outside:\n+        # event have been ignored and span haven't changed.\n+        assert not ax._got_onselect\n+        assert not ax._got_on_move\n+        assert tool.extents == (100, 125)\n+    else:\n+        # A new shape is created\n+        assert ax._got_onselect\n+        assert ax._got_on_move\n+        assert tool.extents == (150, 160)\n \n \n @pytest.mark.parametrize('drag_from_anywhere', [True, False])\n def test_span_selector_drag(drag_from_anywhere):\n     ax = get_ax()\n \n-    def onselect(epress, erelease):\n+    def onselect(*args):\n         pass\n \n     # Create span\n@@ -263,7 +386,7 @@ def onselect(epress, erelease):\n def test_span_selector_direction():\n     ax = get_ax()\n \n-    def onselect(epress, erelease):\n+    def onselect(*args):\n         pass\n \n     tool = widgets.SpanSelector(ax, onselect, 'horizontal', interactive=True)\n@@ -702,7 +825,7 @@ def test_MultiCursor(horizOn, vertOn):\n def test_rect_visibility(fig_test, fig_ref):\n     # Check that requesting an invisible selector makes it invisible\n     ax_test = fig_test.subplots()\n-    ax_ref = fig_ref.subplots()\n+    _ = fig_ref.subplots()\n \n     def onselect(verts):\n         pass\n",
  "problem_statement": "Interactive SpanSelector no longer notifies when the selector is removed by an \"empty\" click\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nPreviously, when a `span_stays` SpanSelector was interactively removed by clicking and immediately releasing the button, the `onselect` callback would be fired (with `vmin = vmax = <the clicked position>`).  This is no longer the case with the new SpanSelector implementation (now with `interactive=True` instead of `span_stays`).  The old behavior should be kept as it is easy to filter out `vmin == vmax` events if so desired, but one cannot retrieve such events if they are never fired.\r\n\r\n**Code for reproduction**\r\n\r\n<!--A minimum code snippet required to reproduce the bug.\r\nPlease make sure to minimize the number of dependencies required, and provide\r\nany necessary plotted data.\r\nAvoid using threads, as Matplotlib is (explicitly) not thread-safe.-->\r\n\r\n```python\r\nfrom matplotlib import pyplot as plt\r\nfrom matplotlib.widgets import SpanSelector\r\n\r\nfig, ax = plt.subplots()\r\nax.plot([10, 20], [10, 20])\r\nss = SpanSelector(ax, print, \"horizontal\", span_stays=True)  # or interactive=True\r\nplt.show()\r\n```\r\nClick and drag to select a span, then click and release immediately to remove the span.\r\n\r\n**Actual outcome**\r\n\r\nOnly the click-drag is reported.\r\n\r\n**Expected outcome**\r\n\r\nThe click-release is also reported.\r\n\r\nattn @ericpre\r\n\r\n**Matplotlib version**\r\n<!--Please specify your platform and versions of the relevant libraries you are using:-->\r\n  * Operating system: linux\r\n  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): master (3.5.0.dev1362+g57489bf19b)\r\n  * Matplotlib backend (`print(matplotlib.get_backend())`): qt5agg\r\n  * Python version: 39\r\n  * Jupyter version (if applicable): no\r\n  * Other libraries: \r\n\r\n<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->\r\n<!--If you installed from conda, please specify which channel you used if not the default-->\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2021-07-19T13:55:49Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[False]\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[True-new_center0]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[False-new_center1]\", \"lib/matplotlib/tests/test_widgets.py::test_ellipse\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_handles\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_direction\", \"lib/matplotlib/tests/test_widgets.py::test_tool_line_handle\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_lasso_selector\", \"lib/matplotlib/tests/test_widgets.py::test_CheckButtons\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox\", \"lib/matplotlib/tests/test_widgets.py::test_check_radio_buttons_image[png]\", \"lib/matplotlib/tests/test_widgets.py::test_check_bunch_of_radio_buttons[png]\", \"lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax_invalid\", \"lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax\", \"lib/matplotlib/tests/test_widgets.py::test_slider_valmin_valmax\", \"lib/matplotlib/tests/test_widgets.py::test_slider_valstep_snapping\", \"lib/matplotlib/tests/test_widgets.py::test_slider_horizontal_vertical\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-True]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-False]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-True]\", \"lib/matplotlib/tests/test_widgets.py::test_rect_visibility[png]\", \"lib/matplotlib/tests/test_widgets.py::test_rect_visibility[pdf]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[1]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[2]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[3]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw\"]",
  "environment_setup_commit": "f93c0a3dcb82feed0262d758626c90d4002685f3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.790238",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}