{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-18256",
  "base_commit": "8501526ca26a80ac1b7866a4c1678fcf0045e971",
  "patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -145,6 +145,7 @@ class LatexPrinter(Printer):\n         \"gothic_re_im\": False,\n         \"decimal_separator\": \"period\",\n         \"perm_cyclic\": True,\n+        \"parenthesize_super\": True,\n         \"min\": None,\n         \"max\": None,\n     }  # type: Dict[str, Any]\n@@ -214,8 +215,10 @@ def parenthesize(self, item, level, strict=False):\n \n     def parenthesize_super(self, s):\n         \"\"\" Parenthesize s if there is a superscript in s\"\"\"\n-        if \"^\" in s:\n+        if \"^\" in s and self._settings['parenthesize_super']:\n             return r\"\\left({}\\right)\".format(s)\n+        elif \"^\" in s and not self._settings['parenthesize_super']:\n+            return self.embed_super(s)\n         return s\n \n     def embed_super(self, s):\n@@ -598,7 +601,7 @@ def _print_Pow(self, expr):\n             p, q = expr.exp.p, expr.exp.q\n             # issue #12886: add parentheses for superscripts raised to powers\n             if '^' in base and expr.base.is_Symbol:\n-                base = r\"\\left(%s\\right)\" % base\n+                base = self.parenthesize_super(base)\n             if expr.base.is_Function:\n                 return self._print(expr.base, exp=\"%s/%s\" % (p, q))\n             return r\"%s^{%s/%s}\" % (base, p, q)\n@@ -622,7 +625,7 @@ def _helper_print_standard_power(self, expr, template):\n         # to powers\n         base = self.parenthesize(expr.base, PRECEDENCE['Pow'])\n         if '^' in base and expr.base.is_Symbol:\n-            base = r\"\\left(%s\\right)\" % base\n+            base = self.parenthesize_super(base)\n         elif (isinstance(expr.base, Derivative)\n             and base.startswith(r'\\left(')\n             and re.match(r'\\\\left\\(\\\\d?d?dot', base)\n@@ -862,7 +865,9 @@ def _print_Function(self, expr, exp=None):\n                 else:\n                     name = r\"\\operatorname{%s}^{-1}\" % func\n             elif exp is not None:\n-                name = r'%s^{%s}' % (self._hprint_Function(func), exp)\n+                func_tex = self._hprint_Function(func)\n+                func_tex = self.parenthesize_super(func_tex)\n+                name = r'%s^{%s}' % (func_tex, exp)\n             else:\n                 name = self._hprint_Function(func)\n \n@@ -2562,7 +2567,7 @@ def latex(expr, full_prec=False, min=None, max=None, fold_frac_powers=False,\n           mat_delim=\"[\", mat_str=None, mode=\"plain\", mul_symbol=None,\n           order=None, symbol_names=None, root_notation=True,\n           mat_symbol_style=\"plain\", imaginary_unit=\"i\", gothic_re_im=False,\n-          decimal_separator=\"period\", perm_cyclic=True):\n+          decimal_separator=\"period\", perm_cyclic=True, parenthesize_super=True):\n     r\"\"\"Convert the given expression to LaTeX string representation.\n \n     Parameters\n@@ -2636,6 +2641,9 @@ def latex(expr, full_prec=False, min=None, max=None, fold_frac_powers=False,\n         when ``comma`` is specified. Lists, sets, and tuple are printed with semicolon\n         separating the elements when ``comma`` is chosen. For example, [1; 2; 3] when\n         ``comma`` is chosen and [1,2,3] for when ``period`` is chosen.\n+    parenthesize_super : boolean, optional\n+        If set to ``False``, superscripted expressions will not be parenthesized when\n+        powered. Default is ``True``, which parenthesizes the expression when powered.\n     min: Integer or None, optional\n         Sets the lower bound for the exponent to print floating point numbers in\n         fixed-point format.\n@@ -2773,6 +2781,7 @@ def latex(expr, full_prec=False, min=None, max=None, fold_frac_powers=False,\n         'gothic_re_im': gothic_re_im,\n         'decimal_separator': decimal_separator,\n         'perm_cyclic' : perm_cyclic,\n+        'parenthesize_super' : parenthesize_super,\n         'min': min,\n         'max': max,\n     }\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -103,6 +103,13 @@ def test_latex_basic():\n     assert latex((2*sqrt(2)*x)/3, long_frac_ratio=2) == \\\n         r\"\\frac{2 x}{3} \\sqrt{2}\"\n \n+    x_star = Symbol('x^*')\n+    f = Function('f')\n+    assert latex(x_star**2) == r\"\\left(x^{*}\\right)^{2}\"\n+    assert latex(x_star**2, parenthesize_super=False) == r\"{x^{*}}^{2}\"\n+    assert latex(Derivative(f(x_star), x_star,2)) == r\"\\frac{d^{2}}{d \\left(x^{*}\\right)^{2}} f{\\left(x^{*} \\right)}\"\n+    assert latex(Derivative(f(x_star), x_star,2), parenthesize_super=False) == r\"\\frac{d^{2}}{d {x^{*}}^{2}} f{\\left(x^{*} \\right)}\"\n+\n     assert latex(2*Integral(x, x)/3) == r\"\\frac{2 \\int x\\, dx}{3}\"\n     assert latex(2*Integral(x, x)/3, fold_short_frac=True) == \\\n         r\"\\left(2 \\int x\\, dx\\right) / 3\"\n",
  "problem_statement": "Un-parenthesize superscripted symbol\nLet's think of these superscripted symbols, x^{i}, x^{\\*}\r\n\r\n<img src=\"https://latex.codecogs.com/gif.latex?x^{i},&space;x^{*}\" title=\"x^{i}, x^{*}\" />\r\n\r\nCurrently, SymPy parenthesizes these symbols when they are taken to power:\r\n\\left(x^{i}\\right)^{2}, \\left(x^{*}\\right)^{2}\r\n\r\n<img src=\"https://latex.codecogs.com/gif.latex?\\left(x^{i}\\right)^{2},&space;\\left(x^{*}\\right)^{2}\" title=\"\\left(x^{i}\\right)^{2}, \\left(x^{*}\\right)^{2}\" />\r\n\r\nHowever, LaTeX has its own way to represent these symbols without parentheses by nesting them:\r\n {x^{i}}^{2}, {x^{\\*}}^{2}\r\n\r\n<img src=\"https://latex.codecogs.com/gif.latex?{x^{i}}^{2},&space;{x^{*}}^{2}\" title=\"{x^{i}}^{2}, {x^{*}}^{2}\" />\r\n\r\nThese are distinguised from 'powered superscription's, which are:\r\n x^{i^{2}},  x^{\\*^{2}}\r\n\r\n<img src=\"https://latex.codecogs.com/gif.latex?x^{i^{2}},&space;x^{*^{2}}\" title=\"x^{i^{2}}, x^{*^{2}}\" />\r\n\r\nThen, shouldn't it be better to print them without parentheses? As far as I know, that is the conventional way to print power of superscripted symbols.\r\n\r\nIn [this link](https://en.wikipedia.org/wiki/Non-dimensionalization_and_scaling_of_the_Navier–Stokes_equations#Non-dimensionalized_Navier%E2%80%93Stokes_equation), you can see that nabla sign is superscripted then powered without any parenthesis:\r\n{\\nabla^{\\*}}^{2}\r\n\r\n<img src=\"https://latex.codecogs.com/gif.latex?{\\nabla^{*}}^{2}\" title=\"{\\nabla^{*}}^{2}\" />\n",
  "hints_text": "I'm having trouble understanding your proposal. Are you proposing to print two completely non-equivalent expressions, `(x**i)**2` and `x**(i**2)`, in an (almost) **indistinguishable** way?\r\n\r\n`(x**i)**2 == x**(2*i) != x**(i**2)` \nI'm not sure about this. Seeing both right next to each other, I can see the difference between ![](https://camo.githubusercontent.com/6df60f56328b4dfb10b5355c5fa06fe66392aa2e/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f7b785e7b697d7d5e7b327d2c2673706163653b7b785e7b2a7d7d5e7b327d) and ![](https://camo.githubusercontent.com/37fcd12e384e2694f1e838cf42f7edee0bd8ad41/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f785e7b695e7b327d7d2c2673706163653b785e7b2a5e7b327d7d), but if I just saw the former by itself I would probably assume it was the latter. It's also general mathematical convention that unparenthesized power towers associate from the right. The nabla-star squared example is a bit unambiguous because nabla star-squared wouldn't make any sense. \r\n\r\nIt looks like in the pretty and str printers, both ways parenthesize. The pretty printer can't make symbols smaller, so it often has to use more parentheses than the LaTeX printer. Although IMO the `x**y**z` one probably doesn't need parentheses\r\n\r\n```py\r\n>>> pprint((x**y)**z)                                                                                                         \r\n    z\r\n⎛ y⎞ \r\n⎝x ⎠ \r\n>>> pprint(x**(y**z))                                                                                                         \r\n ⎛ z⎞\r\n ⎝y ⎠\r\nx    \r\n>>> (x**y)**z                                                                                                                 \r\n(x**y)**z\r\n>>> x**y**z                                                                                                                   \r\nx**(y**z)\r\n```\n@gschintgen \r\n\r\n`(x**i)**2` is `Pow(Pow(Symbol('x'), i), 2)`. What I am saying about is `Pow(Symbol('x^i'), 2)`.\n@asmeurer \r\n\r\nI understand that these two are confusing.  \r\nStill, there are some cases where superscripted symbols without parentheses are preferred.\r\n\r\nIn the field of engineering, non-dimensionalizing the parameters such as length, time, or temperature is important. Usually, these non-dimensional parameters are denoted as superscripted symbols.  \r\n\r\nIn this case, parenthesizing all these x^\\*, y^\\*, z^\\*, t^\\*, T^\\*, (and many more) quickly makes the formula monsterous. This gets even worse when asymptotic expansion is introduced.\r\n\r\nThen, how about adding an option to LatexPrinter, which allows the user to toggle this behavior? By default, superscripted symbols will be parenthesized.\n> @gschintgen\r\n> \r\n> `(x**i)**2` is `Pow(Pow(Symbol('x'), i), 2)`. What I am saying about is `Pow(Symbol('x^i'), 2)`.\r\n\r\nThanks for clarifying.\r\n```\r\nIn [28]: Pow(Symbol('x^i'), 2)\r\nOut[28]:                                                                                                                 \r\n  2\r\nxⁱ\r\n\r\nIn [29]: latex(_)\r\nOut[29]: '\\\\left(x^{i}\\\\right)^{2}'\r\n```\r\nWhile `isympy`'s Unicode pretty printer doesn't typeset parentheses (just as you want), the LaTeX printer does. Is that it?\r\n\n@gschintgen \r\n\r\nThat's right. I will add an option to LatexPrinter and see how it does.",
  "created_at": "2020-01-07T06:00:59Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_latex_basic\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_latex_builtins\", \"test_latex_SingularityFunction\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_latex_functions\", \"test_function_subclass_different_name\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_indexed\", \"test_latex_derivatives\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_SetExpr\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_FourierSeries\", \"test_latex_FormalPowerSeries\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_universalset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_intersection\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_productset\", \"test_set_operators_parenthesis\", \"test_latex_Complexes\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_latex_log\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_mathieu\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_matrix_with_functions\", \"test_latex_NDimArray\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_noncommutative\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_Poly_order\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_settings\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_PrettyPoly\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_categories\", \"test_Modules\", \"test_QuotientRing\", \"test_Tr\", \"test_Adjoint\", \"test_Transpose\", \"test_Hadamard\", \"test_ElementwiseApplyFunction\", \"test_ZeroMatrix\", \"test_OneMatrix\", \"test_Identity\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_fancyset_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_7180\", \"test_issue_8409\", \"test_issue_15439\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_issue_13651\", \"test_latex_UnevaluatedExpr\", \"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\", \"test_KroneckerProduct_printing\", \"test_Quaternion_latex_printing\", \"test_TensorProduct_printing\", \"test_WedgeProduct_printing\", \"test_issue_14041\", \"test_issue_9216\", \"test_latex_printer_tensor\", \"test_multiline_latex\", \"test_issue_15353\", \"test_trace\", \"test_print_basic\", \"test_MatrixSymbol_bold\", \"test_AppliedPermutation\", \"test_PermutationMatrix\", \"test_imaginary_unit\", \"test_text_re_im\", \"test_DiffGeomMethods\", \"test_unit_printing\", \"test_issue_17092\"]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.122658",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}