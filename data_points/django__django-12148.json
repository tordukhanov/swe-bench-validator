{
  "repo": "django/django",
  "instance_id": "django__django-12148",
  "base_commit": "c9bf1910e2c1a72244dbd1e3dd9a3ff7215b8b4a",
  "patch": "diff --git a/django/contrib/flatpages/models.py b/django/contrib/flatpages/models.py\n--- a/django/contrib/flatpages/models.py\n+++ b/django/contrib/flatpages/models.py\n@@ -1,6 +1,6 @@\n from django.contrib.sites.models import Site\n from django.db import models\n-from django.urls import get_script_prefix\n+from django.urls import NoReverseMatch, get_script_prefix, reverse\n from django.utils.encoding import iri_to_uri\n from django.utils.translation import gettext_lazy as _\n \n@@ -36,5 +36,12 @@ def __str__(self):\n         return \"%s -- %s\" % (self.url, self.title)\n \n     def get_absolute_url(self):\n+        from .views import flatpage\n+\n+        for url in (self.url.lstrip('/'), self.url):\n+            try:\n+                return reverse(flatpage, kwargs={'url': url})\n+            except NoReverseMatch:\n+                pass\n         # Handle script prefix manually because we bypass reverse()\n         return iri_to_uri(get_script_prefix().rstrip('/') + self.url)\n",
  "test_patch": "diff --git a/tests/flatpages_tests/absolute_urls.py b/tests/flatpages_tests/absolute_urls.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/flatpages_tests/absolute_urls.py\n@@ -0,0 +1,6 @@\n+from django.contrib.flatpages import views\n+from django.urls import path\n+\n+urlpatterns = [\n+    path('flatpage/', views.flatpage, {'url': '/hardcoded/'}),\n+]\ndiff --git a/tests/flatpages_tests/no_slash_urls.py b/tests/flatpages_tests/no_slash_urls.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/flatpages_tests/no_slash_urls.py\n@@ -0,0 +1,5 @@\n+from django.urls import include, path\n+\n+urlpatterns = [\n+    path('flatpage', include('django.contrib.flatpages.urls')),\n+]\ndiff --git a/tests/flatpages_tests/test_models.py b/tests/flatpages_tests/test_models.py\n--- a/tests/flatpages_tests/test_models.py\n+++ b/tests/flatpages_tests/test_models.py\n@@ -1,5 +1,5 @@\n from django.contrib.flatpages.models import FlatPage\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n from django.test.utils import override_script_prefix\n \n \n@@ -17,3 +17,16 @@ def test_get_absolute_url_honors_script_prefix(self):\n \n     def test_str(self):\n         self.assertEqual(str(self.page), '/café/ -- Café!')\n+\n+    @override_settings(ROOT_URLCONF='flatpages_tests.urls')\n+    def test_get_absolute_url_include(self):\n+        self.assertEqual(self.page.get_absolute_url(), '/flatpage_root/caf%C3%A9/')\n+\n+    @override_settings(ROOT_URLCONF='flatpages_tests.no_slash_urls')\n+    def test_get_absolute_url_include_no_slash(self):\n+        self.assertEqual(self.page.get_absolute_url(), '/flatpagecaf%C3%A9/')\n+\n+    @override_settings(ROOT_URLCONF='flatpages_tests.absolute_urls')\n+    def test_get_absolute_url_with_hardcoded_url(self):\n+        fp = FlatPage(title='Test', url='/hardcoded/')\n+        self.assertEqual(fp.get_absolute_url(), '/flatpage/')\ndiff --git a/tests/flatpages_tests/test_sitemaps.py b/tests/flatpages_tests/test_sitemaps.py\n--- a/tests/flatpages_tests/test_sitemaps.py\n+++ b/tests/flatpages_tests/test_sitemaps.py\n@@ -31,5 +31,8 @@ def setUpTestData(cls):\n \n     def test_flatpage_sitemap(self):\n         response = self.client.get('/flatpages/sitemap.xml')\n-        self.assertIn(b'<url><loc>http://example.com/foo/</loc></url>', response.getvalue())\n-        self.assertNotIn(b'<url><loc>http://example.com/private-foo/</loc></url>', response.getvalue())\n+        self.assertIn(b'<url><loc>http://example.com/flatpage_root/foo/</loc></url>', response.getvalue())\n+        self.assertNotIn(\n+            b'<url><loc>http://example.com/flatpage_root/private-foo/</loc></url>',\n+            response.getvalue(),\n+        )\ndiff --git a/tests/flatpages_tests/urls.py b/tests/flatpages_tests/urls.py\n--- a/tests/flatpages_tests/urls.py\n+++ b/tests/flatpages_tests/urls.py\n@@ -8,6 +8,6 @@\n         {'sitemaps': {'flatpages': FlatPageSitemap}},\n         name='django.contrib.sitemaps.views.sitemap'),\n \n-    path('flatpage_root', include('django.contrib.flatpages.urls')),\n+    path('flatpage_root/', include('django.contrib.flatpages.urls')),\n     path('accounts/', include('django.contrib.auth.urls')),\n ]\n",
  "problem_statement": "reverse() and get_absolute_url() may return different values for same FlatPage\nDescription\n\t \n\t\t(last modified by Tim Graham)\n\t \nThe FlatPage model implements get_absolute_url() without using reverse(). The comment suggests, that this handles SCRIPT_NAME issues, but the link in the admin interface does not work, if you are using a prefix for the flatpages urls. The templatetag for resolving a flatpage works just fine.\n",
  "hints_text": "The implementation is intended to match the catchall middleware. We could try reversing and only if that fails fall back to the current logic.\nI just sent a pull request for a fix for this: ​https://github.com/django/django/pull/2554 This solves all the cases I can think of for including flatpages and running get_absolute_url() on them. By the way, not sure if this is relevant, but: When I was writing the tests for this, I noticed that all the flatpages tests include the flatpages url without a slash, e.g.: url(r'flatpage_root', include('django.contrib.flatpages.urls')), (Note lack of '/' after flatpage_root). This is different than how the documentation recommends including the flatpages, and doesn't make much sense. Not sure what the purpose of this is.\nI left comments for improvement on the PR. Please uncheck \"Patch needs improvement\" when you update it, thanks.\n#28118 is a duplicate.\nI created another ​PR based on the ​first PR.",
  "created_at": "2019-11-26T23:08:25Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_get_absolute_url_include (flatpages_tests.test_models.FlatpageModelTests)\", \"test_get_absolute_url_include_no_slash (flatpages_tests.test_models.FlatpageModelTests)\", \"test_get_absolute_url_with_hardcoded_url (flatpages_tests.test_models.FlatpageModelTests)\", \"test_flatpage_sitemap (flatpages_tests.test_sitemaps.FlatpagesSitemapTests)\"]",
  "PASS_TO_PASS": "[\"test_get_absolute_url_honors_script_prefix (flatpages_tests.test_models.FlatpageModelTests)\", \"test_get_absolute_url_urlencodes (flatpages_tests.test_models.FlatpageModelTests)\", \"test_str (flatpages_tests.test_models.FlatpageModelTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.615859",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}