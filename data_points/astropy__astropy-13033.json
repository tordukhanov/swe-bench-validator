{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-13033",
  "base_commit": "298ccb478e6bf092953bca67a3d29dc6c35f6752",
  "patch": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -55,6 +55,13 @@ class BaseTimeSeries(QTable):\n     _required_columns_relax = False\n \n     def _check_required_columns(self):\n+        def as_scalar_or_list_str(obj):\n+            if not hasattr(obj, \"__len__\"):\n+                return f\"'{obj}'\"\n+            elif len(obj) == 1:\n+                return f\"'{obj[0]}'\"\n+            else:\n+                return str(obj)\n \n         if not self._required_columns_enabled:\n             return\n@@ -76,9 +83,10 @@ def _check_required_columns(self):\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+                raise ValueError(\"{} object is invalid - expected {} \"\n+                                 \"as the first column{} but found {}\"\n+                                 .format(self.__class__.__name__, as_scalar_or_list_str(required_columns),\n+                                            plural, as_scalar_or_list_str(self.colnames[:len(required_columns)])))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\n",
  "test_patch": "diff --git a/astropy/timeseries/tests/test_sampled.py b/astropy/timeseries/tests/test_sampled.py\n--- a/astropy/timeseries/tests/test_sampled.py\n+++ b/astropy/timeseries/tests/test_sampled.py\n@@ -395,6 +395,14 @@ def test_required_columns():\n     assert exc.value.args[0] == (\"TimeSeries object is invalid - expected \"\n                                  \"'time' as the first column but found 'banana'\")\n \n+    # https://github.com/astropy/astropy/issues/13009\n+    ts_2cols_required = ts.copy()\n+    ts_2cols_required._required_columns = ['time', 'a']\n+    with pytest.raises(ValueError) as exc:\n+        ts_2cols_required.remove_column('a')\n+    assert exc.value.args[0] == (\"TimeSeries object is invalid - expected \"\n+                                 \"['time', 'a'] as the first columns but found ['time', 'b']\")\n+\n \n @pytest.mark.parametrize('cls', [BoxLeastSquares, LombScargle])\n def test_periodogram(cls):\n",
  "problem_statement": "TimeSeries: misleading exception when required column check fails.\n<!-- This comments are hidden when you submit the issue,\r\nso you do not need to remove them! -->\r\n\r\n<!-- Please be sure to check out our contributing guidelines,\r\nhttps://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .\r\nPlease be sure to check out our code of conduct,\r\nhttps://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->\r\n\r\n<!-- Please have a search on our GitHub repository to see if a similar\r\nissue has already been posted.\r\nIf a similar issue is closed, have a quick look to see if you are satisfied\r\nby the resolution.\r\nIf not please go ahead and open an issue! -->\r\n\r\n<!-- Please check that the development version still produces the same bug.\r\nYou can install development version with\r\npip install git+https://github.com/astropy/astropy\r\ncommand. -->\r\n\r\n### Description\r\n<!-- Provide a general description of the bug. -->\r\n\r\nFor a `TimeSeries` object that has additional required columns (in addition to `time`), when codes mistakenly try to remove a required column, the exception it produces is misleading.\r\n\r\n### Expected behavior\r\n<!-- What did you expect to happen. -->\r\nAn exception that informs the users required columns are missing.\r\n\r\n### Actual behavior\r\nThe actual exception message is confusing:\r\n`ValueError: TimeSeries object is invalid - expected 'time' as the first columns but found 'time'`\r\n\r\n### Steps to Reproduce\r\n<!-- Ideally a code example could be provided so we can run it ourselves. -->\r\n<!-- If you are pasting code, use triple backticks (```) around\r\nyour code snippet. -->\r\n<!-- If necessary, sanitize your screen output to be pasted so you do not\r\nreveal secrets like tokens and passwords. -->\r\n\r\n```python\r\nfrom astropy.time import Time\r\nfrom astropy.timeseries import TimeSeries\r\n\r\ntime=Time(np.arange(100000, 100003), format='jd')\r\nts = TimeSeries(time=time, data = {\"flux\": [99.9, 99.8, 99.7]})\r\nts._required_columns = [\"time\", \"flux\"]                                   \r\nts.remove_column(\"flux\")\r\n\r\n```\r\n\r\n### System Details\r\n<!-- Even if you do not think this is necessary, it is useful information for the maintainers.\r\nPlease run the following snippet and paste the output below:\r\nimport platform; print(platform.platform())\r\nimport sys; print(\"Python\", sys.version)\r\nimport numpy; print(\"Numpy\", numpy.__version__)\r\nimport erfa; print(\"pyerfa\", erfa.__version__)\r\nimport astropy; print(\"astropy\", astropy.__version__)\r\nimport scipy; print(\"Scipy\", scipy.__version__)\r\nimport matplotlib; print(\"Matplotlib\", matplotlib.__version__)\r\n-->\r\n```\r\nWindows-10-10.0.22000-SP0\r\nPython 3.9.10 | packaged by conda-forge | (main, Feb  1 2022, 21:21:54) [MSC v.1929 64 bit (AMD64)]\r\nNumpy 1.22.3\r\npyerfa 2.0.0.1\r\nastropy 5.0.3\r\nScipy 1.8.0\r\nMatplotlib 3.5.1\r\n```\n",
  "hints_text": "The relevant code that produces the misleading exception.\r\n\r\nhttps://github.com/astropy/astropy/blob/00ccfe76113dca48d19396986872203dc2e978d7/astropy/timeseries/core.py#L77-L82\r\n\r\nIt works under the assumption that `time` is the only required column. So when a `TimeSeries` object has additional required columns, the message no longer makes sense.\r\n\nProposal: change the message to the form of: \r\n\r\n```\r\nValueError: TimeSeries object is invalid - required ['time', 'flux'] as the first columns but found ['time']\r\n```\nYour proposed message is definitely less confusing. Wanna PR? ðŸ˜¸ \nI cannot run tests anymore after updating my local env to Astropy 5. Any idea?\r\n\r\nI used [`pytest` variant](https://docs.astropy.org/en/latest/development/testguide.html#pytest) for running tests.\r\n\r\n```\r\n> pytest  astropy/timeseries/tests/test_common.py\r\n\r\nC:\\pkg\\_winNonPortables\\Anaconda3\\envs\\astropy5_dev\\lib\\site-packages\\pluggy\\_manager.py:91: in register\r\n    raise ValueError(\r\nE   ValueError: Plugin already registered: c:\\dev\\astropy\\astropy\\conftest.py=<module 'astropy.conftest' from 'c:\\\\dev\\\\astropy\\\\astropy\\\\conftest.py'>\r\nE   {'2885294349760': <_pytest.config.PytestPluginManager object at 0x0000029FC8F1DDC0>, 'pytestconfig': <_pytest.config.Config object at 0x0000029FCB43EAC0>, 'mark': <module '_pytest.mark' from 'C:\\\\pkg\\\\_winNonPortables\\\\Anaconda3\\\\envs\\\\astropy5_dev\\\\lib\\\\site-packages\\\\_pytest\\\\mark\\\\__init__.py'>, 'main': <module '_pytest.main' from \r\n...\r\n...\r\n...\r\n'C:\\\\pkg\\\\_winNonPortables\\\\Anaconda3\\\\envs\\\\astropy5_dev\\\\lib\\\\site-packages\\\\xdist\\\\plugin.py'>, 'xdist.looponfail': <module 'xdist.looponfail' from 'C:\\\\pkg\\\\_winNonPortables\\\\Anaconda3\\\\envs\\\\astropy5_dev\\\\lib\\\\site-packages\\\\xdist\\\\looponfail.py'>, 'capturemanager': <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=8 _state='suspended' tmpfile=<_io.TextIOWrapper name='<tempfile._TemporaryFileWrapper object at 0x0000029FCB521F40>' mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=10 _state='suspended' tmpfile=<_io.TextIOWrapper name='<tempfile._TemporaryFileWrapper object at 0x0000029FCCD50820>' mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=6 _state='started' tmpfile=<_io.TextIOWrapper name='nul' mode='r' encoding='cp1252'>> _state='suspended' _in_suspended=False> _capture_fixture=None>, 'C:\\\\dev\\\\astropy\\\\conftest.py': <module 'conftest' from 'C:\\\\dev\\\\astropy\\\\conftest.py'>, 'c:\\\\dev\\\\astropy\\\\astropy\\\\conftest.py': <module 'astropy.conftest' from 'c:\\\\dev\\\\astropy\\\\astropy\\\\conftest.py'>, 'session': <Session astropy exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>, 'lfplugin': <_pytest.cacheprovider.LFPlugin object at 0x0000029FCD0385B0>, 'nfplugin': <_pytest.cacheprovider.NFPlugin object at 0x0000029FCD038790>, '2885391664992': <pytest_html.plugin.HTMLReport object at 0x0000029FCEBEC760>, 'doctestplus': <pytest_doctestplus.plugin.DoctestPlus object at 0x0000029FCEBECAC0>, 'legacypath-tmpdir': <class '_pytest.legacypath.LegacyTmpdirPlugin'>, 'terminalreporter': <_pytest.terminal.TerminalReporter object at 0x0000029FCEBECE50>, 'logging-plugin': <_pytest.logging.LoggingPlugin object at 0x0000029FCEBECFD0>, 'funcmanage': <_pytest.fixtures.FixtureManager object at 0x0000029FCEBF6B80>}\r\n```\r\n\nHuh, never seen that one before. Did you try installing dev astropy on a fresh env, @orionlee ?\nI use a brand new conda env (upgrading my old python 3.7, astropy 4 based env is not worth trouble).\r\n\r\n- I just found [`astropy.test()`](https://docs.astropy.org/en/latest/development/testguide.html#astropy-test) method works for me. So for this small fix it probably suffices.\r\n\r\n```python\r\n> astropy.test(test_path=\"astropy/timeseries/tests/test_common.py\")\r\n```\r\n\r\n- I read some posts online on  `Plugin already registered` error in other projects, they seem to indicate some symlink issues making pytest reading `contest.py` twice, but I can't seem to find such problems in my environment (my astropy is an editable install, so the path to the source is directly used).\r\n\r\n",
  "created_at": "2022-03-31T23:28:27Z",
  "version": "4.3",
  "FAIL_TO_PASS": "[\"astropy/timeseries/tests/test_sampled.py::test_required_columns\"]",
  "PASS_TO_PASS": "[\"astropy/timeseries/tests/test_sampled.py::test_empty_initialization\", \"astropy/timeseries/tests/test_sampled.py::test_empty_initialization_invalid\", \"astropy/timeseries/tests/test_sampled.py::test_initialize_only_time\", \"astropy/timeseries/tests/test_sampled.py::test_initialization_with_data\", \"astropy/timeseries/tests/test_sampled.py::test_initialize_only_data\", \"astropy/timeseries/tests/test_sampled.py::test_initialization_with_table\", \"astropy/timeseries/tests/test_sampled.py::test_initialization_missing_time_delta\", \"astropy/timeseries/tests/test_sampled.py::test_initialization_invalid_time_and_time_start\", \"astropy/timeseries/tests/test_sampled.py::test_initialization_invalid_time_delta\", \"astropy/timeseries/tests/test_sampled.py::test_initialization_with_time_in_data\", \"astropy/timeseries/tests/test_sampled.py::test_initialization_n_samples\", \"astropy/timeseries/tests/test_sampled.py::test_initialization_length_mismatch\", \"astropy/timeseries/tests/test_sampled.py::test_initialization_invalid_both_time_and_time_delta\", \"astropy/timeseries/tests/test_sampled.py::test_fold\", \"astropy/timeseries/tests/test_sampled.py::test_fold_invalid_options\", \"astropy/timeseries/tests/test_sampled.py::test_read_time_missing\", \"astropy/timeseries/tests/test_sampled.py::test_read_time_wrong\", \"astropy/timeseries/tests/test_sampled.py::test_read\", \"astropy/timeseries/tests/test_sampled.py::test_periodogram[BoxLeastSquares]\", \"astropy/timeseries/tests/test_sampled.py::test_periodogram[LombScargle]\"]",
  "environment_setup_commit": "298ccb478e6bf092953bca67a3d29dc6c35f6752",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.524581",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}