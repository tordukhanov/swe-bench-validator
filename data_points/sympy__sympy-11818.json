{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-11818",
  "base_commit": "a221c376f3f382d251a600aa336b45e95f92b7fe",
  "patch": "diff --git a/sympy/sets/fancysets.py b/sympy/sets/fancysets.py\n--- a/sympy/sets/fancysets.py\n+++ b/sympy/sets/fancysets.py\n@@ -1353,6 +1353,25 @@ def _measure(self):\n         \"\"\"\n         return self.sets._measure\n \n+    @classmethod\n+    def from_real(cls, sets):\n+        \"\"\"\n+        Converts given subset of real numbers to a complex region.\n+\n+        Examples\n+        ========\n+\n+        >>> from sympy import Interval, ComplexRegion\n+        >>> unit = Interval(0,1)\n+        >>> ComplexRegion.from_real(unit)\n+        ComplexRegion([0, 1] x {0}, False)\n+\n+        \"\"\"\n+        if not sets.is_subset(S.Reals):\n+            raise ValueError(\"sets must be a subset of the real line\")\n+\n+        return cls(sets * FiniteSet(0))\n+\n     def _contains(self, other):\n         from sympy.functions import arg, Abs\n         from sympy.core.containers import Tuple\n@@ -1409,8 +1428,6 @@ def _intersect(self, other):\n                 return ComplexRegion(new_r_interval*new_theta_interval,\n                                     polar=True)\n \n-        if other is S.Reals:\n-            return other\n \n         if other.is_subset(S.Reals):\n             new_interval = []\n@@ -1433,6 +1450,10 @@ def _intersect(self, other):\n \n     def _union(self, other):\n \n+        if other.is_subset(S.Reals):\n+            # treat a subset of reals as a complex region\n+            other = ComplexRegion.from_real(other)\n+\n         if other.is_ComplexRegion:\n \n             # self in rectangular form\n@@ -1443,9 +1464,6 @@ def _union(self, other):\n             elif self.polar and other.polar:\n                 return ComplexRegion(Union(self.sets, other.sets), polar=True)\n \n-        if self == S.Complexes:\n-            return self\n-\n         return None\n \n \ndiff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -633,6 +633,8 @@ def _intersect(self, other):\n                 for a, b in zip(self.sets, other.sets))\n \n     def _union(self, other):\n+        if other.is_subset(self):\n+            return self\n         if not other.is_ProductSet:\n             return None\n         if len(other.args) != len(self.args):\n",
  "test_patch": "diff --git a/sympy/sets/tests/test_fancysets.py b/sympy/sets/tests/test_fancysets.py\n--- a/sympy/sets/tests/test_fancysets.py\n+++ b/sympy/sets/tests/test_fancysets.py\n@@ -5,7 +5,7 @@\n                              Intersection)\n from sympy.simplify.simplify import simplify\n from sympy import (S, Symbol, Lambda, symbols, cos, sin, pi, oo, Basic,\n-                   Rational, sqrt, tan, log, exp, Abs, I, Tuple)\n+                   Rational, sqrt, tan, log, exp, Abs, I, Tuple, eye)\n from sympy.utilities.iterables import cartes\n from sympy.utilities.pytest import XFAIL, raises\n from sympy.abc import x, y, z, t\n@@ -594,7 +594,7 @@ def test_ComplexRegion_union():\n     assert c7.union(c8) == ComplexRegion(p4)\n \n     assert c1.union(Interval(2, 4)) == Union(c1, Interval(2, 4), evaluate=False)\n-    assert c5.union(Interval(2, 4)) == Union(c5, Interval(2, 4), evaluate=False)\n+    assert c5.union(Interval(2, 4)) == Union(c5, ComplexRegion.from_real(Interval(2, 4)))\n \n \n def test_ComplexRegion_measure():\n@@ -698,3 +698,13 @@ def test_issue_11732():\n     assert (pointComplex in S.Naturals0) == False\n     assert (pointComplex in S.Integers) == False\n     assert (pointComplex in S.Complexes) == True\n+\n+\n+def test_issue_11730():\n+    unit = Interval(0, 1)\n+    square = ComplexRegion(unit ** 2)\n+\n+    assert Union(S.Complexes, FiniteSet(oo)) != S.Complexes\n+    assert Union(S.Complexes, FiniteSet(eye(4))) != S.Complexes\n+    assert Union(unit, square) == square\n+    assert Intersection(S.Reals, square) == unit\n",
  "problem_statement": "Union(FiniteSet(oo), S.Complexes) gives S.Complexes (should remain unevaluated)\nHi, well searching i found this:\n\n``` python\n>>> oo in S.UniversalSet\nTrue\n>>> oo in S.Complexes\nFalse\n>>> Union(FiniteSet(oo), S.Complexes)\nS.Complexes\n```\n\ni don't know with this where `oo` belongs, is part of Complexes or not?\n\nThx. Cya.\n\n",
  "hints_text": "UniversalSet doesn't come into play here. It's just a formal set that always returns True for any containment check. `Union(FiniteSet(oo), S.Complexes)` giving `S.Complexes` is a bug. \n\n(Optimistically setting this as easy to fix. I suspect it isn't difficult, but there is a chance I am wrong)\n",
  "created_at": "2016-11-06T19:54:19Z",
  "version": "1.0",
  "FAIL_TO_PASS": "[\"test_ComplexRegion_union\"]",
  "PASS_TO_PASS": "[\"test_Complex\", \"test_ComplexRegion_FiniteSet\", \"test_ImageSet_contains\", \"test_ImageSet_iterator_not_injective\", \"test_ImageSet_simplification\", \"test_Range_eval_imageset\", \"test_Range_set\", \"test_Reals\", \"test_fun\", \"test_image_is_ImageSet\", \"test_inf_Range_len\", \"test_infinitely_indexed_set_1\", \"test_infinitely_indexed_set_3\", \"test_integers\", \"test_intersections\", \"test_issue_11732\", \"test_issue_9980\", \"test_naturals\", \"test_naturals0\", \"test_range_interval_intersection\", \"test_range_range_intersection\", \"test_union_RealSubSet\"]",
  "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.073445",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}