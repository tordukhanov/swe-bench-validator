{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-21567",
  "base_commit": "2ac6f38c7d88bcc4943cdec4644ef26142392147",
  "patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -10,8 +10,6 @@\n \n from sympy.core.logic import fuzzy_or, fuzzy_and\n \n-\n-\n def _rewrite_hyperbolics_as_exp(expr):\n     expr = sympify(expr)\n     return expr.xreplace({h: h.rewrite(exp)\n@@ -877,6 +875,27 @@ def _eval_as_leading_term(self, x, cdir=0):\n         else:\n             return self.func(arg)\n \n+    def _eval_expand_trig(self, **hints):\n+        arg = self.args[0]\n+        if arg.is_Add:\n+            from sympy import symmetric_poly\n+            CX = [coth(x, evaluate=False)._eval_expand_trig() for x in arg.args]\n+            p = [[], []]\n+            n = len(arg.args)\n+            for i in range(n, -1, -1):\n+                p[(n - i) % 2].append(symmetric_poly(i, CX))\n+            return Add(*p[0])/Add(*p[1])\n+        elif arg.is_Mul:\n+            from sympy import binomial\n+            coeff, x = arg.as_coeff_Mul(rational=True)\n+            if coeff.is_Integer and coeff > 1:\n+                c = coth(x, evaluate=False)\n+                p = [[], []]\n+                for i in range(coeff, -1, -1):\n+                    p[(coeff - i) % 2].append(binomial(coeff, i)*c**i)\n+                return Add(*p[0])/Add(*p[1])\n+        return coth(arg)\n+\n \n class ReciprocalHyperbolicFunction(HyperbolicFunction):\n     \"\"\"Base class for reciprocal functions of hyperbolic functions. \"\"\"\n@@ -939,6 +958,9 @@ def _eval_expand_complex(self, deep=True, **hints):\n         re_part, im_part = self.as_real_imag(deep=True, **hints)\n         return re_part + S.ImaginaryUnit*im_part\n \n+    def _eval_expand_trig(self, **hints):\n+        return self._calculate_reciprocal(\"_eval_expand_trig\", **hints)\n+\n     def _eval_as_leading_term(self, x, cdir=0):\n         return (1/self._reciprocal_of(self.args[0]))._eval_as_leading_term(x)\n \n",
  "test_patch": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -1,7 +1,7 @@\n from sympy import (symbols, Symbol, sinh, nan, oo, zoo, pi, asinh, acosh, log,\n     sqrt, coth, I, cot, E, tanh, tan, cosh, cos, S, sin, Rational, atanh, acoth,\n     Integer, O, exp, sech, sec, csch, asech, acsch, acos, asin, expand_mul,\n-    AccumBounds, im, re)\n+    AccumBounds, im, re, expand_trig)\n \n from sympy.core.expr import unchanged\n from sympy.core.function import ArgumentIndexError\n@@ -327,6 +327,11 @@ def test_coth():\n     x = Symbol('x', extended_real=True)\n     assert coth(x).as_real_imag(deep=False) == (coth(x), 0)\n \n+    assert expand_trig(coth(2*x)) == (coth(x)**2 + 1)/(2*coth(x))\n+    assert expand_trig(coth(3*x)) == (coth(x)**3 + 3*coth(x))/(1 + 3*coth(x)**2)\n+\n+    assert expand_trig(coth(x + y)) == (1 + coth(x)*coth(y))/(coth(x) + coth(y))\n+\n \n def test_coth_series():\n     x = Symbol('x')\n@@ -397,6 +402,8 @@ def test_csch():\n \n     assert csch(n).is_real is True\n \n+    assert expand_trig(csch(x + y)) == 1/(sinh(x)*cosh(y) + cosh(x)*sinh(y))\n+\n \n def test_csch_series():\n     x = Symbol('x')\n@@ -465,6 +472,8 @@ def test_sech():\n \n     assert sech(n).is_real is True\n \n+    assert expand_trig(sech(x + y)) == 1/(cosh(x)*cosh(y) + sinh(x)*sinh(y))\n+\n \n def test_sech_series():\n     x = Symbol('x')\n",
  "problem_statement": "`expand_trig` for `csch`, `sech`\nAlthough we have fixed #21365, it should be extended further for `csch, sech`.\r\nThe behavior for `csc, sec` was to expand it in denominator with `cos, sin`, so it could be taken as a reference.\r\n \r\n```python3\r\n>>> from sympy import *\r\n\r\n>>> x, y = symbols('x y')\r\n>>> expand_trig(tanh(x + y))\r\n(tanh(x) + tanh(y))/(tanh(x)*tanh(y) + 1)\r\n>>> expand_trig(csch(x + y))\r\ncsch(x + y)\r\n>>> expand_trig(sech(x + y))\r\nsech(x + y)\r\n>>> expand_trig(csc(x + y))\r\n1/(sin(x)*cos(y) + sin(y)*cos(x))\r\n>>> expand_trig(sec(x + y))\r\n1/(-sin(x)*sin(y) + cos(x)*cos(y))\r\n```\n",
  "hints_text": "I am working on this issue. I have fixed the problem in the title, but have also realised there is an issue with coth(a+b) as well so I will work that out before sending the pull request.",
  "created_at": "2021-06-02T19:05:29Z",
  "version": "1.9",
  "FAIL_TO_PASS": "[\"test_coth\", \"test_csch\", \"test_sech\"]",
  "PASS_TO_PASS": "[\"test_sinh\", \"test_sinh_series\", \"test_sinh_fdiff\", \"test_cosh\", \"test_cosh_series\", \"test_cosh_fdiff\", \"test_tanh\", \"test_tanh_series\", \"test_tanh_fdiff\", \"test_coth_series\", \"test_coth_fdiff\", \"test_csch_series\", \"test_csch_fdiff\", \"test_sech_series\", \"test_sech_fdiff\", \"test_asinh\", \"test_asinh_rewrite\", \"test_asinh_series\", \"test_asinh_fdiff\", \"test_acosh\", \"test_acosh_rewrite\", \"test_acosh_series\", \"test_acosh_fdiff\", \"test_asech\", \"test_asech_series\", \"test_asech_rewrite\", \"test_asech_fdiff\", \"test_acsch\", \"test_acsch_infinities\", \"test_acsch_rewrite\", \"test_acsch_fdiff\", \"test_atanh\", \"test_atanh_rewrite\", \"test_atanh_series\", \"test_atanh_fdiff\", \"test_acoth\", \"test_acoth_rewrite\", \"test_acoth_series\", \"test_acoth_fdiff\", \"test_inverses\", \"test_leading_term\", \"test_complex\", \"test_complex_2899\", \"test_simplifications\", \"test_issue_4136\", \"test_sinh_rewrite\", \"test_cosh_rewrite\", \"test_tanh_rewrite\", \"test_coth_rewrite\", \"test_csch_rewrite\", \"test_sech_rewrite\", \"test_derivs\", \"test_sinh_expansion\", \"test_cosh_expansion\", \"test_cosh_positive\", \"test_cosh_nonnegative\", \"test_real_assumptions\"]",
  "environment_setup_commit": "f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.144351",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}