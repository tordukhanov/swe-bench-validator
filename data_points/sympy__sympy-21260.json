{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-21260",
  "base_commit": "3ac1464b8840d5f8b618a654f9fbf09c452fe969",
  "patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -7,7 +7,6 @@\n from .cache import cacheit\n from .sympify import _sympify, sympify, SympifyError\n from .compatibility import iterable, ordered\n-from .singleton import S\n from .kind import UndefinedKind\n from ._print_helpers import Printable\n \n@@ -121,19 +120,17 @@ def __new__(cls, *args):\n     def copy(self):\n         return self.func(*self.args)\n \n-    def __reduce_ex__(self, proto):\n-        \"\"\" Pickling support.\"\"\"\n-        return type(self), self.__getnewargs__(), self.__getstate__()\n-\n     def __getnewargs__(self):\n         return self.args\n \n     def __getstate__(self):\n-        return {}\n+        return None\n \n-    def __setstate__(self, state):\n-        for k, v in state.items():\n-            setattr(self, k, v)\n+    def __reduce_ex__(self, protocol):\n+        if protocol < 2:\n+            msg = \"Only pickle protocol 2 or higher is supported by sympy\"\n+            raise NotImplementedError(msg)\n+        return super().__reduce_ex__(protocol)\n \n     def __hash__(self):\n         # hash cannot be cached using cache_it because infinite recurrence\n@@ -2060,3 +2057,7 @@ def _make_find_query(query):\n     elif isinstance(query, Basic):\n         return lambda expr: expr.match(query) is not None\n     return query\n+\n+\n+# Delayed to avoid cyclic import\n+from .singleton import S\ndiff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1206,11 +1206,8 @@ def _new(cls, _mpf_, _prec, zero=True):\n         return obj\n \n     # mpz can't be pickled\n-    def __getnewargs__(self):\n-        return (mlib.to_pickable(self._mpf_),)\n-\n-    def __getstate__(self):\n-        return {'_prec': self._prec}\n+    def __getnewargs_ex__(self):\n+        return ((mlib.to_pickable(self._mpf_),), {'precision': self._prec})\n \n     def _hashable_content(self):\n         return (self._mpf_, self._prec)\n@@ -2665,6 +2662,7 @@ class One(IntegerConstant, metaclass=Singleton):\n     .. [1] https://en.wikipedia.org/wiki/1_%28number%29\n     \"\"\"\n     is_number = True\n+    is_positive = True\n \n     p = 1\n     q = 1\ndiff --git a/sympy/core/singleton.py b/sympy/core/singleton.py\n--- a/sympy/core/singleton.py\n+++ b/sympy/core/singleton.py\n@@ -1,8 +1,6 @@\n \"\"\"Singleton mechanism\"\"\"\n \n \n-from typing import Any, Dict, Type\n-\n from .core import Registry\n from .assumptions import ManagedProperties\n from .sympify import sympify\n@@ -171,26 +169,14 @@ class is instantiated. Additionally, this instance can be accessed through\n     subclasses to have a different metaclass than the superclass, except the\n     subclass may use a subclassed metaclass).\n     \"\"\"\n+    def __init__(cls, *args, **kwargs):\n+        super().__init__(cls, *args, **kwargs)\n+        cls._instance = obj = Basic.__new__(cls)\n+        cls.__new__ = lambda cls: obj\n+        cls.__getnewargs__ = lambda obj: ()\n+        cls.__getstate__ = lambda obj: None\n+        S.register(cls)\n+\n \n-    _instances = {}  # type: Dict[Type[Any], Any]\n-    \"Maps singleton classes to their instances.\"\n-\n-    def __new__(cls, *args, **kwargs):\n-        result = super().__new__(cls, *args, **kwargs)\n-        S.register(result)\n-        return result\n-\n-    def __call__(self, *args, **kwargs):\n-        # Called when application code says SomeClass(), where SomeClass is a\n-        # class of which Singleton is the metaclas.\n-        # __call__ is invoked first, before __new__() and __init__().\n-        if self not in Singleton._instances:\n-            Singleton._instances[self] = \\\n-                super().__call__(*args, **kwargs)\n-                # Invokes the standard constructor of SomeClass.\n-        return Singleton._instances[self]\n-\n-        # Inject pickling support.\n-        def __getnewargs__(self):\n-            return ()\n-        self.__getnewargs__ = __getnewargs__\n+# Delayed to avoid cyclic import\n+from .basic import Basic\ndiff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -300,11 +300,8 @@ def __new_stage2__(cls, name, **assumptions):\n     __xnew_cached_ = staticmethod(\n         cacheit(__new_stage2__))   # symbols are always cached\n \n-    def __getnewargs__(self):\n-        return (self.name,)\n-\n-    def __getstate__(self):\n-        return {'_assumptions': self._assumptions}\n+    def __getnewargs_ex__(self):\n+        return ((self.name,), self.assumptions0)\n \n     def _hashable_content(self):\n         # Note: user-specified assumptions not hashed, just derived ones\n@@ -414,8 +411,8 @@ def __new__(cls, name=None, dummy_index=None, **assumptions):\n \n         return obj\n \n-    def __getstate__(self):\n-        return {'_assumptions': self._assumptions, 'dummy_index': self.dummy_index}\n+    def __getnewargs_ex__(self):\n+        return ((self.name, self.dummy_index), self.assumptions0)\n \n     @cacheit\n     def sort_key(self, order=None):\ndiff --git a/sympy/functions/elementary/miscellaneous.py b/sympy/functions/elementary/miscellaneous.py\n--- a/sympy/functions/elementary/miscellaneous.py\n+++ b/sympy/functions/elementary/miscellaneous.py\n@@ -42,17 +42,16 @@ class IdentityFunction(Lambda, metaclass=Singleton):\n \n     \"\"\"\n \n-    def __new__(cls):\n-        x = Dummy('x')\n-        #construct \"by hand\" to avoid infinite loop\n-        return Expr.__new__(cls, Tuple(x), x)\n+    _symbol = Dummy('x')\n \n     @property\n-    def args(self):\n-        return ()\n+    def signature(self):\n+        return Tuple(self._symbol)\n+\n+    @property\n+    def expr(self):\n+        return self._symbol\n \n-    def __getnewargs__(self):\n-        return ()\n \n Id = S.IdentityFunction\n \ndiff --git a/sympy/physics/paulialgebra.py b/sympy/physics/paulialgebra.py\n--- a/sympy/physics/paulialgebra.py\n+++ b/sympy/physics/paulialgebra.py\n@@ -131,8 +131,11 @@ def __new__(cls, i, label=\"sigma\"):\n         obj.label = label\n         return obj\n \n-    def __getnewargs__(self):\n-        return (self.i,self.label,)\n+    def __getnewargs_ex__(self):\n+        return (self.i, self.label), {}\n+\n+    def _hashable_content(self):\n+        return (self.i, self.label)\n \n     # FIXME don't work for -I*Pauli(2)*Pauli(3)\n     def __mul__(self, other):\ndiff --git a/sympy/sets/fancysets.py b/sympy/sets/fancysets.py\n--- a/sympy/sets/fancysets.py\n+++ b/sympy/sets/fancysets.py\n@@ -255,8 +255,21 @@ class Reals(Interval, metaclass=Singleton):\n \n     ComplexRegion\n     \"\"\"\n-    def __new__(cls):\n-        return Interval.__new__(cls, S.NegativeInfinity, S.Infinity)\n+    @property\n+    def start(self):\n+        return S.NegativeInfinity\n+\n+    @property\n+    def end(self):\n+        return S.Infinity\n+\n+    @property\n+    def left_open(self):\n+        return True\n+\n+    @property\n+    def right_open(self):\n+        return True\n \n     def __eq__(self, other):\n         return other == Interval(S.NegativeInfinity, S.Infinity)\ndiff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -971,23 +971,6 @@ def start(self):\n         \"\"\"\n         return self._args[0]\n \n-    _inf = left = start\n-\n-    @classmethod\n-    def open(cls, a, b):\n-        \"\"\"Return an interval including neither boundary.\"\"\"\n-        return cls(a, b, True, True)\n-\n-    @classmethod\n-    def Lopen(cls, a, b):\n-        \"\"\"Return an interval not including the left boundary.\"\"\"\n-        return cls(a, b, True, False)\n-\n-    @classmethod\n-    def Ropen(cls, a, b):\n-        \"\"\"Return an interval not including the right boundary.\"\"\"\n-        return cls(a, b, False, True)\n-\n     @property\n     def end(self):\n         \"\"\"\n@@ -1005,8 +988,6 @@ def end(self):\n         \"\"\"\n         return self._args[1]\n \n-    _sup = right = end\n-\n     @property\n     def left_open(self):\n         \"\"\"\n@@ -1041,6 +1022,37 @@ def right_open(self):\n         \"\"\"\n         return self._args[3]\n \n+    @classmethod\n+    def open(cls, a, b):\n+        \"\"\"Return an interval including neither boundary.\"\"\"\n+        return cls(a, b, True, True)\n+\n+    @classmethod\n+    def Lopen(cls, a, b):\n+        \"\"\"Return an interval not including the left boundary.\"\"\"\n+        return cls(a, b, True, False)\n+\n+    @classmethod\n+    def Ropen(cls, a, b):\n+        \"\"\"Return an interval not including the right boundary.\"\"\"\n+        return cls(a, b, False, True)\n+\n+    @property\n+    def _inf(self):\n+        return self.start\n+\n+    @property\n+    def _sup(self):\n+        return self.end\n+\n+    @property\n+    def left(self):\n+        return self.start\n+\n+    @property\n+    def right(self):\n+        return self.end\n+\n     @property\n     def is_empty(self):\n         if self.left_open or self.right_open:\n",
  "test_patch": "diff --git a/sympy/core/tests/test_singleton.py b/sympy/core/tests/test_singleton.py\n--- a/sympy/core/tests/test_singleton.py\n+++ b/sympy/core/tests/test_singleton.py\n@@ -3,28 +3,19 @@\n from sympy.core.singleton import S, Singleton\n \n def test_Singleton():\n-    global instantiated\n-    instantiated = 0\n \n     class MySingleton(Basic, metaclass=Singleton):\n-        def __new__(cls):\n-            global instantiated\n-            instantiated += 1\n-            return Basic.__new__(cls)\n+        pass\n \n-    assert instantiated == 0\n     MySingleton() # force instantiation\n-    assert instantiated == 1\n     assert MySingleton() is not Basic()\n     assert MySingleton() is MySingleton()\n     assert S.MySingleton is MySingleton()\n-    assert instantiated == 1\n \n     class MySingleton_sub(MySingleton):\n         pass\n-    assert instantiated == 1\n+\n     MySingleton_sub()\n-    assert instantiated == 2\n     assert MySingleton_sub() is not MySingleton()\n     assert MySingleton_sub() is MySingleton_sub()\n \ndiff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -4,7 +4,7 @@\n \n from sympy.physics.units import meter\n \n-from sympy.testing.pytest import XFAIL\n+from sympy.testing.pytest import XFAIL, raises\n \n from sympy.core.basic import Atom, Basic\n from sympy.core.core import BasicMeta\n@@ -40,7 +40,12 @@\n def check(a, exclude=[], check_attr=True):\n     \"\"\" Check that pickling and copying round-trips.\n     \"\"\"\n-    protocols = [0, 1, 2, copy.copy, copy.deepcopy, 3, 4]\n+    # Pickling with protocols 0 and 1 is disabled for Basic instances:\n+    if isinstance(a, Basic):\n+        for protocol in [0, 1]:\n+            raises(NotImplementedError, lambda: pickle.dumps(a, protocol))\n+\n+    protocols = [2, copy.copy, copy.deepcopy, 3, 4]\n     if cloudpickle:\n         protocols.extend([cloudpickle])\n \n",
  "problem_statement": "Same symbols created in different processes are not resolved as being equal\nHello,\r\n\r\nWhen I try to create symbols (and by extension expressions) in different processes, SymPy somehow does not detect that the symbols are the same even though they have the same name and assumptions.\r\n\r\nAs an example, consider the following code snippet and the respective output:\r\n\r\n```\r\nimport multiprocessing as mp\r\nimport sympy as sp\r\n\r\nVAR_X = sp.Symbol('x', real=True, nonzero=True)\r\n\r\ndef process():\r\n    return sp.Symbol('x', real=True, nonzero=True)\r\n\r\nif __name__ == '__main__':\r\n    a1 = sp.Symbol('a', real=True, nonzero=True)\r\n    a2 = sp.Symbol('a', real=True, nonzero=True)\r\n    print(a1, a2, a1 == a2, a1 - a2, '\\n')\r\n\r\n    pool = mp.Pool(4)\r\n    jobs = []\r\n    for _ in range(5):\r\n        jobs.append(pool.apply_async(process))\r\n    symbols = []\r\n    for job in jobs:\r\n        symbols.append(job.get())\r\n    pool.close()\r\n\r\n    for s in symbols:\r\n        print(s, ' | ', VAR_X, ' | ', s - VAR_X, ' | ', sp.simplify(s - VAR_X))\r\n```\r\n\r\nOutput:\r\n```\r\na a True 0\r\n\r\nx  |  x  |  -x + x  |  -x + x\r\nx  |  x  |  -x + x  |  -x + x\r\nx  |  x  |  -x + x  |  -x + x\r\nx  |  x  |  -x + x  |  -x + x\r\nx  |  x  |  -x + x  |  -x + x\r\n```\r\n\r\n@oscarbenjamin thinks this may be related to pickling and unpickling the symbol. Working in the same process creating two different symbols returns the\r\nexact same object:\r\n```\r\nIn [5]: x1 = Symbol('x')\r\n\r\nIn [6]: x2 = Symbol('x')\r\n\r\nIn [7]: x1 is x2\r\nOut[7]: True\r\n```\r\n\r\nI also tried to explicitly pickle and unpickle the symbols using the `dill` library, but this also didn't help.\r\n\r\nInterestingly, if I obtain two expressions (separately) from different processes, and one is integrand `f` and the other is expected integral `F` (both containing only one free symbol, `x`), SymPy manages to resolve that `simplify(F.diff() - f) == 0` and `simplify(integrate(f) - F) == 0`. Note that I **do not** pass the symbol `x` with respect to which to differentiate or integrate. If I do it, it fails. Unfortunately, I don't have a small enough code snippet readily prepared to exemplify this behaviour.\n",
  "hints_text": "I noticed that if I remove the extra assumptions (i.e. use `sp.Symbol('x')` instead of `sp.Symbol('x', real=True, nonzero=True)`), then it works as expected.\n```\r\nimport sympy as sp\r\n\r\ndef test():\r\n    x1 = sp.Symbol('x', real=True)\r\n    x2 = sp.Symbol('x', real=True)\r\n\r\n    assert (hash(x1) == hash(x2) and sp.simplify(x1 - x2) == 0)\r\n    \r\n    import pickle\r\n    x2_pickled = pickle.dumps(x2)\r\n    x2_unpickled = pickle.loads(x2_pickled)\r\n\r\n    assert (hash(x1) == hash(x2_unpickled) and sp.simplify(x1 - x2_unpickled) == 0)\r\n\r\n\r\nif __name__ == '__main__':\r\n    test()\r\n```\r\n\r\nHere is an example of a minimal unit test which reveals the bug and indeed shows that the issue is with the pickling.\nWithout `real=True` it works so I guess there is an issue with pickling symbols with non-default assumptions.\nIt seems that multiprocessing somehow finds a global symbol (at least on my system). I can see that by appending\r\n```\r\n    from sympy.functions.combinatorial.numbers import _sym\r\n    for s in symbols:\r\n        print(s == _sym)\r\n```\r\nto the code in https://github.com/sympy/sympy/issues/21121#issue-834785397.\nI'm not sure I've completely figured out how Symbol works. The problem seems to be that the `_mhash` gets set before the assumptions are assigned by `__setstate__` when unpickling. That means that the `_mhash` is incorrect.\r\n\r\nThis seems to fix it (using `__getnewargs_ex__` to pass all args up front so that hash is correct from the start):\r\n```diff\r\ndiff --git a/sympy/core/basic.py b/sympy/core/basic.py\r\nindex dce161a2b2..a9bf432a9e 100644\r\n--- a/sympy/core/basic.py\r\n+++ b/sympy/core/basic.py\r\n@@ -121,20 +121,6 @@ def __new__(cls, *args):\r\n     def copy(self):\r\n         return self.func(*self.args)\r\n \r\n-    def __reduce_ex__(self, proto):\r\n-        \"\"\" Pickling support.\"\"\"\r\n-        return type(self), self.__getnewargs__(), self.__getstate__()\r\n-\r\n-    def __getnewargs__(self):\r\n-        return self.args\r\n-\r\n-    def __getstate__(self):\r\n-        return {}\r\n-\r\n-    def __setstate__(self, state):\r\n-        for k, v in state.items():\r\n-            setattr(self, k, v)\r\n-\r\n     def __hash__(self):\r\n         # hash cannot be cached using cache_it because infinite recurrence\r\n         # occurs as hash is needed for setting cache dictionary keys\r\ndiff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\r\nindex 41b3c10672..56f9b3e6b8 100644\r\n--- a/sympy/core/symbol.py\r\n+++ b/sympy/core/symbol.py\r\n@@ -300,11 +300,8 @@ def __new_stage2__(cls, name, **assumptions):\r\n     __xnew_cached_ = staticmethod(\r\n         cacheit(__new_stage2__))   # symbols are always cached\r\n \r\n-    def __getnewargs__(self):\r\n-        return (self.name,)\r\n-\r\n-    def __getstate__(self):\r\n-        return {'_assumptions': self._assumptions}\r\n+    def __getnewargs_ex__(self):\r\n+        return ((self.name,), self.assumptions0)\r\n \r\n     def _hashable_content(self):\r\n         # Note: user-specified assumptions not hashed, just derived ones\r\n```\nIt seems to me that there is a cache problem. Multiprocessing will modify a global symbol in sympy.functions.combinatorial.numbers. This code\r\n```\r\nimport multiprocessing as mp\r\nimport sympy as sp\r\nfrom sympy.functions.combinatorial.numbers import _sym\r\n\r\nprint(_sym.assumptions0)\r\n\r\nVAR_X = sp.Symbol('x', real=True, nonzero=True)\r\n\r\ndef process():\r\n    return sp.Symbol('x', real=True, nonzero=True)\r\n\r\nif __name__ == '__main__':\r\n    a1 = sp.Symbol('a', real=True, nonzero=True)\r\n    a2 = sp.Symbol('a', real=True, nonzero=True)\r\n    print(a1, a2, a1 == a2, a1 - a2, '\\n')\r\n\r\n    pool = mp.Pool(4)\r\n    jobs = []\r\n    for _ in range(5):\r\n        jobs.append(pool.apply_async(process))\r\n    symbols = []\r\n    for job in jobs:\r\n        symbols.append(job.get())\r\n    pool.close()\r\n\r\n    print(_sym.assumptions0)\r\n```\r\ngives this output on my system\r\n```\r\n{'commutative': True}\r\na a True 0 \r\n\r\n{'real': True, 'finite': True, 'imaginary': False, 'extended_real': True, 'commutative': True, 'complex': True, 'hermitian': True, 'infinite': False, 'nonzero': True, 'zero': False, 'extended_nonzero': True}\r\n```",
  "created_at": "2021-04-07T20:07:55Z",
  "version": "1.8",
  "FAIL_TO_PASS": "[\"test_core_basic\", \"test_core_Str\", \"test_core_symbol\", \"test_core_numbers\", \"test_core_float_copy\", \"test_core_relational\", \"test_core_add\", \"test_core_mul\", \"test_core_power\", \"test_core_function\", \"test_core_interval\", \"test_functions\", \"test_geometry\", \"test_integrals\", \"test_physics\", \"test_pickling_polys_polytools\", \"test_pickling_polys_numberfields\", \"test_pickling_polys_rootoftools\", \"test_series\", \"test_concrete\"]",
  "PASS_TO_PASS": "[\"test_Singleton\", \"test_singleton_redefinition\", \"test_core_undefinedfunctions\", \"test_core_multidimensional\", \"test_Singletons\", \"test_logic\", \"test_matrices\", \"test_ntheory\", \"test_pickling_polys_polyclasses\", \"test_pickling_polys_fields\", \"test_pickling_polys_elements\", \"test_pickling_polys_domains\", \"test_pickling_polys_orderings\", \"test_pickling_polys_monomials\", \"test_pickling_polys_errors\", \"test_printing\", \"test_deprecation_warning\"]",
  "environment_setup_commit": "3ac1464b8840d5f8b618a654f9fbf09c452fe969",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.141938",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}