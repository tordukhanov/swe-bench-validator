{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-11041",
  "base_commit": "fbfd4b50050080413c8faca5368b9cb9b1ac9313",
  "patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -996,7 +996,9 @@ def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]:\n                     ]\n                 ):\n                     pytest_temp = self.variable()\n-                    self.variables_overwrite[v.left.target.id] = pytest_temp\n+                    self.variables_overwrite[\n+                        v.left.target.id\n+                    ] = v.left  # type:ignore[assignment]\n                     v.left.target.id = pytest_temp\n             self.push_format_context()\n             res, expl = self.visit(v)\n@@ -1037,10 +1039,19 @@ def visit_Call(self, call: ast.Call) -> Tuple[ast.Name, str]:\n         new_args = []\n         new_kwargs = []\n         for arg in call.args:\n+            if isinstance(arg, ast.Name) and arg.id in self.variables_overwrite:\n+                arg = self.variables_overwrite[arg.id]  # type:ignore[assignment]\n             res, expl = self.visit(arg)\n             arg_expls.append(expl)\n             new_args.append(res)\n         for keyword in call.keywords:\n+            if (\n+                isinstance(keyword.value, ast.Name)\n+                and keyword.value.id in self.variables_overwrite\n+            ):\n+                keyword.value = self.variables_overwrite[\n+                    keyword.value.id\n+                ]  # type:ignore[assignment]\n             res, expl = self.visit(keyword.value)\n             new_kwargs.append(ast.keyword(keyword.arg, res))\n             if keyword.arg:\n@@ -1075,7 +1086,13 @@ def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]:\n         self.push_format_context()\n         # We first check if we have overwritten a variable in the previous assert\n         if isinstance(comp.left, ast.Name) and comp.left.id in self.variables_overwrite:\n-            comp.left.id = self.variables_overwrite[comp.left.id]\n+            comp.left = self.variables_overwrite[\n+                comp.left.id\n+            ]  # type:ignore[assignment]\n+        if isinstance(comp.left, namedExpr):\n+            self.variables_overwrite[\n+                comp.left.target.id\n+            ] = comp.left  # type:ignore[assignment]\n         left_res, left_expl = self.visit(comp.left)\n         if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n             left_expl = f\"({left_expl})\"\n@@ -1093,7 +1110,9 @@ def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]:\n                 and next_operand.target.id == left_res.id\n             ):\n                 next_operand.target.id = self.variable()\n-                self.variables_overwrite[left_res.id] = next_operand.target.id\n+                self.variables_overwrite[\n+                    left_res.id\n+                ] = next_operand  # type:ignore[assignment]\n             next_res, next_expl = self.visit(next_operand)\n             if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                 next_expl = f\"({next_expl})\"\n",
  "test_patch": "diff --git a/testing/test_assertrewrite.py b/testing/test_assertrewrite.py\n--- a/testing/test_assertrewrite.py\n+++ b/testing/test_assertrewrite.py\n@@ -1436,6 +1436,96 @@ def test_walrus_operator_not_override_value():\n         assert result.ret == 0\n \n \n+@pytest.mark.skipif(\n+    sys.version_info < (3, 8), reason=\"walrus operator not available in py<38\"\n+)\n+class TestIssue11028:\n+    def test_assertion_walrus_operator_in_operand(self, pytester: Pytester) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            def test_in_string():\n+              assert (obj := \"foo\") in obj\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 0\n+\n+    def test_assertion_walrus_operator_in_operand_json_dumps(\n+        self, pytester: Pytester\n+    ) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            import json\n+\n+            def test_json_encoder():\n+                assert (obj := \"foo\") in json.dumps(obj)\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 0\n+\n+    def test_assertion_walrus_operator_equals_operand_function(\n+        self, pytester: Pytester\n+    ) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            def f(a):\n+                return a\n+\n+            def test_call_other_function_arg():\n+              assert (obj := \"foo\") == f(obj)\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 0\n+\n+    def test_assertion_walrus_operator_equals_operand_function_keyword_arg(\n+        self, pytester: Pytester\n+    ) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            def f(a='test'):\n+                return a\n+\n+            def test_call_other_function_k_arg():\n+              assert (obj := \"foo\") == f(a=obj)\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 0\n+\n+    def test_assertion_walrus_operator_equals_operand_function_arg_as_function(\n+        self, pytester: Pytester\n+    ) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            def f(a='test'):\n+                return a\n+\n+            def test_function_of_function():\n+              assert (obj := \"foo\") == f(f(obj))\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 0\n+\n+    def test_assertion_walrus_operator_gt_operand_function(\n+        self, pytester: Pytester\n+    ) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            def add_one(a):\n+                return a + 1\n+\n+            def test_gt():\n+              assert (obj := 4) > add_one(obj)\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 1\n+        result.stdout.fnmatch_lines([\"*assert 4 > 5\", \"*where 5 = add_one(4)\"])\n+\n+\n @pytest.mark.skipif(\n     sys.maxsize <= (2**31 - 1), reason=\"Causes OverflowError on 32bit systems\"\n )\n",
  "problem_statement": "UnboundLocalError: cannot access local variable 'x' where it is not associated with a value\nThere seems to be a regression in pytest version `7.3.x` when a **walrus** operator is used in an assert line.\r\nCode:\r\n\r\n```py\r\nimport json\r\nimport pytest\r\n\r\ndef test_json_encoder():\r\n  assert (object:=\"foo\") in json.dumps(object)\r\n```\r\n\r\nFails the test with error:\r\n```shell\r\nUnboundLocalError: cannot access local variable 'object' where it is not associated with a value\r\n```\r\n\r\nin pytest version `7.3.x`, whereas with pytest version `7.2.x` it passes successfully. My Python version is `3.11`.\r\n\r\nLooks like it has to do with PR #10758. \n",
  "hints_text": "Yep, I could indeed bisect this to #10758 / 6e478b094787f3d2bf2db3676d330c7a13ac6b98.\r\n\r\ncc @aless10 \n> Yep, I could indeed bisect this to #10758 / [6e478b0](https://github.com/pytest-dev/pytest/commit/6e478b094787f3d2bf2db3676d330c7a13ac6b98).\r\n> \r\n> cc @aless10\r\n\r\nHi, I think this is definitely something I worked on. It seems that I did not cover this case. @The-Compiler I can work on this one by the end of the week it's ok with you.\nSure thing, feel free and thanks for taking a look!",
  "created_at": "2023-05-27T09:33:16Z",
  "version": "7.4",
  "FAIL_TO_PASS": "[\"testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_in_operand_json_dumps\", \"testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_equals_operand_function\", \"testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_equals_operand_function_keyword_arg\", \"testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_equals_operand_function_arg_as_function\", \"testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_gt_operand_function\"]",
  "PASS_TO_PASS": "[\"testing/test_assertrewrite.py::TestAssertionRewrite::test_place_initial_imports\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_location_is_set\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_name\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertrepr_compare_same_width\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_if_hasattr_fails\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_already_has_message\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_short_circuit_evaluation\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_unary_op\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_binary_op\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop_percent\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_call\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_attribute\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_comparisons\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_len\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_reprcompare\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_raising__bool__in_comparison\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_formatchar\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr_non_ascii\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_more_invalid\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[trivial]\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[assert\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[multiple\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[latin1\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[utf-8\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[multi-line\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[multi\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[backslash\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[assertion\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[escaped\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[no\", \"testing/test_assertrewrite.py::test_try_makedirs\", \"testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[c:/tmp/pycs-d:/projects/src/foo.py-c:/tmp/pycs/projects/src]\", \"testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-d:/projects/src/foo.py-d:/projects/src/__pycache__]\", \"testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[/tmp/pycs-/home/projects/src/foo.py-/tmp/pycs/home/projects/src]\", \"testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-/home/projects/src/foo.py-/home/projects/src/__pycache__]\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[0-240]\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[1-2400]\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[2-None]\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[3-None]\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_rewrites_plugin_as_a_package\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_honors_pep_235\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_multiline\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_tuple\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_expr\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_escape\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_messages_bytes\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_at_operator_issue1290\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_starred_with_side_effect\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_a_file\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_readonly\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_zipfile\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_load_resource_via_files_with_rewrite\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_readonly\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_orphaned_pyc_file\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_package\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_translate_newlines\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_package_without__init__py\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_remember_rewritten_modules\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_sys_meta_path_munged\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_write_pyc\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_success\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_reload_is_same_and_reloads\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_get_data_support\", \"testing/test_assertrewrite.py::test_issue731\", \"testing/test_assertrewrite.py::TestIssue925::test_simple_case\", \"testing/test_assertrewrite.py::TestIssue925::test_long_case\", \"testing/test_assertrewrite.py::TestIssue925::test_many_brackets\", \"testing/test_assertrewrite.py::TestIssue2121::test_rewrite_python_files_contain_subdirs\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_dont_rewrite\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator_reverse\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_no_variable_name_conflict\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_true_assertion_and_changes_variable_value\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_fail_assertion\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_composite\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_compare_boolean_fails\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_none_fails\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_value_changes_cleared_after_each_test\", \"testing/test_assertrewrite.py::TestIssue11028::test_assertion_walrus_operator_in_operand\", \"testing/test_assertrewrite.py::test_source_mtime_long_long[-1]\", \"testing/test_assertrewrite.py::test_source_mtime_long_long[1]\", \"testing/test_assertrewrite.py::test_rewrite_infinite_recursion\", \"testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_basic\", \"testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_pattern_contains_subdirectories\", \"testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_cwd_changed\", \"testing/test_assertrewrite.py::TestAssertionPass::test_option_default\", \"testing/test_assertrewrite.py::TestAssertionPass::test_hook_call\", \"testing/test_assertrewrite.py::TestAssertionPass::test_hook_call_with_parens\", \"testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_hookimpl\", \"testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_cmd_option\", \"testing/test_assertrewrite.py::TestPyCacheDir::test_sys_pycache_prefix_integration\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_default_verbosity\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_increased_verbosity\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_max_increased_verbosity\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_plugin\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_dont_write_bytecode\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_cached_pyc_includes_pytest_version\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_pyc_vs_pyo\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_module_imported_from_conftest\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins_env_var\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_resources_provider_for_loader\"]",
  "environment_setup_commit": "797b924fc44189d0b9c2ad905410f0bd89461ab7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.923653",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}