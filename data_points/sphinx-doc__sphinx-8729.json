{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8729",
  "base_commit": "a71028bf9e18cf9fb6314c8a13a467d724cd9328",
  "patch": "diff --git a/sphinx/ext/apidoc.py b/sphinx/ext/apidoc.py\n--- a/sphinx/ext/apidoc.py\n+++ b/sphinx/ext/apidoc.py\n@@ -24,7 +24,7 @@\n from fnmatch import fnmatch\n from importlib.machinery import EXTENSION_SUFFIXES\n from os import path\n-from typing import Any, List, Tuple\n+from typing import Any, Generator, List, Tuple\n \n import sphinx.locale\n from sphinx import __display_version__, package_dir\n@@ -264,14 +264,46 @@ def is_skipped_module(filename: str, opts: Any, excludes: List[str]) -> bool:\n         return False\n \n \n+def walk(rootpath: str, excludes: List[str], opts: Any\n+         ) -> Generator[Tuple[str, List[str], List[str]], None, None]:\n+    \"\"\"Walk through the directory and list files and subdirectories up.\"\"\"\n+    followlinks = getattr(opts, 'followlinks', False)\n+    includeprivate = getattr(opts, 'includeprivate', False)\n+\n+    for root, subs, files in os.walk(rootpath, followlinks=followlinks):\n+        # document only Python module files (that aren't excluded)\n+        files = sorted(f for f in files\n+                       if f.endswith(PY_SUFFIXES) and\n+                       not is_excluded(path.join(root, f), excludes))\n+\n+        # remove hidden ('.') and private ('_') directories, as well as\n+        # excluded dirs\n+        if includeprivate:\n+            exclude_prefixes = ('.',)  # type: Tuple[str, ...]\n+        else:\n+            exclude_prefixes = ('.', '_')\n+\n+        subs[:] = sorted(sub for sub in subs if not sub.startswith(exclude_prefixes) and\n+                         not is_excluded(path.join(root, sub), excludes))\n+\n+        yield root, subs, files\n+\n+\n+def has_child_module(rootpath: str, excludes: List[str], opts: Any) -> bool:\n+    \"\"\"Check the given directory contains child modules at least one.\"\"\"\n+    for root, subs, files in walk(rootpath, excludes, opts):\n+        if files:\n+            return True\n+\n+    return False\n+\n+\n def recurse_tree(rootpath: str, excludes: List[str], opts: Any,\n                  user_template_dir: str = None) -> List[str]:\n     \"\"\"\n     Look for every file in the directory tree and create the corresponding\n     ReST files.\n     \"\"\"\n-    followlinks = getattr(opts, 'followlinks', False)\n-    includeprivate = getattr(opts, 'includeprivate', False)\n     implicit_namespaces = getattr(opts, 'implicit_namespaces', False)\n \n     # check if the base directory is a package and get its name\n@@ -282,48 +314,36 @@ def recurse_tree(rootpath: str, excludes: List[str], opts: Any,\n         root_package = None\n \n     toplevels = []\n-    for root, subs, files in os.walk(rootpath, followlinks=followlinks):\n-        # document only Python module files (that aren't excluded)\n-        py_files = sorted(f for f in files\n-                          if f.endswith(PY_SUFFIXES) and\n-                          not is_excluded(path.join(root, f), excludes))\n-        is_pkg = is_packagedir(None, py_files)\n+    for root, subs, files in walk(rootpath, excludes, opts):\n+        is_pkg = is_packagedir(None, files)\n         is_namespace = not is_pkg and implicit_namespaces\n         if is_pkg:\n-            for f in py_files[:]:\n+            for f in files[:]:\n                 if is_initpy(f):\n-                    py_files.remove(f)\n-                    py_files.insert(0, f)\n+                    files.remove(f)\n+                    files.insert(0, f)\n         elif root != rootpath:\n             # only accept non-package at toplevel unless using implicit namespaces\n             if not implicit_namespaces:\n                 del subs[:]\n                 continue\n-        # remove hidden ('.') and private ('_') directories, as well as\n-        # excluded dirs\n-        if includeprivate:\n-            exclude_prefixes = ('.',)  # type: Tuple[str, ...]\n-        else:\n-            exclude_prefixes = ('.', '_')\n-        subs[:] = sorted(sub for sub in subs if not sub.startswith(exclude_prefixes) and\n-                         not is_excluded(path.join(root, sub), excludes))\n \n         if is_pkg or is_namespace:\n             # we are in a package with something to document\n-            if subs or len(py_files) > 1 or not is_skipped_package(root, opts):\n+            if subs or len(files) > 1 or not is_skipped_package(root, opts):\n                 subpackage = root[len(rootpath):].lstrip(path.sep).\\\n                     replace(path.sep, '.')\n                 # if this is not a namespace or\n                 # a namespace and there is something there to document\n-                if not is_namespace or len(py_files) > 0:\n+                if not is_namespace or has_child_module(root, excludes, opts):\n                     create_package_file(root, root_package, subpackage,\n-                                        py_files, opts, subs, is_namespace, excludes,\n+                                        files, opts, subs, is_namespace, excludes,\n                                         user_template_dir)\n                     toplevels.append(module_join(root_package, subpackage))\n         else:\n             # if we are at the root level, we don't require it to be a package\n             assert root == rootpath and root_package is None\n-            for py_file in py_files:\n+            for py_file in files:\n                 if not is_skipped_module(path.join(rootpath, py_file), opts, excludes):\n                     module = py_file.split('.')[0]\n                     create_module_file(root_package, module, opts, user_template_dir)\n",
  "test_patch": "diff --git a/tests/test_ext_apidoc.py b/tests/test_ext_apidoc.py\n--- a/tests/test_ext_apidoc.py\n+++ b/tests/test_ext_apidoc.py\n@@ -216,6 +216,8 @@ def test_trailing_underscore(make_app, apidoc):\n def test_excludes(apidoc):\n     outdir = apidoc.outdir\n     assert (outdir / 'conf.py').isfile()\n+    assert (outdir / 'a.rst').isfile()\n+    assert (outdir / 'a.b.rst').isfile()\n     assert (outdir / 'a.b.c.rst').isfile()  # generated because not empty\n     assert not (outdir / 'a.b.e.rst').isfile()  # skipped because of empty after excludes\n     assert (outdir / 'a.b.x.rst').isfile()\n@@ -231,6 +233,8 @@ def test_excludes_subpackage_should_be_skipped(apidoc):\n     \"\"\"Subpackage exclusion should work.\"\"\"\n     outdir = apidoc.outdir\n     assert (outdir / 'conf.py').isfile()\n+    assert (outdir / 'a.rst').isfile()\n+    assert (outdir / 'a.b.rst').isfile()\n     assert (outdir / 'a.b.c.rst').isfile()  # generated because not empty\n     assert not (outdir / 'a.b.e.f.rst').isfile()  # skipped because 'b/e' subpackage is skipped\n \n@@ -244,6 +248,8 @@ def test_excludes_module_should_be_skipped(apidoc):\n     \"\"\"Module exclusion should work.\"\"\"\n     outdir = apidoc.outdir\n     assert (outdir / 'conf.py').isfile()\n+    assert (outdir / 'a.rst').isfile()\n+    assert (outdir / 'a.b.rst').isfile()\n     assert (outdir / 'a.b.c.rst').isfile()  # generated because not empty\n     assert not (outdir / 'a.b.e.f.rst').isfile()  # skipped because of empty after excludes\n \n@@ -257,6 +263,8 @@ def test_excludes_module_should_not_be_skipped(apidoc):\n     \"\"\"Module should be included if no excludes are used.\"\"\"\n     outdir = apidoc.outdir\n     assert (outdir / 'conf.py').isfile()\n+    assert (outdir / 'a.rst').isfile()\n+    assert (outdir / 'a.b.rst').isfile()\n     assert (outdir / 'a.b.c.rst').isfile()  # generated because not empty\n     assert (outdir / 'a.b.e.f.rst').isfile()  # skipped because of empty after excludes\n \n",
  "problem_statement": "sphinx-apidoc on namespaces with only subpackages/namespaces\n**Describe the bug**\r\n--implicit-namespaces allows us to use namespaces in our project tree. At the current deployed implementation (3.4.3) it makes a difference if i have a submodule in my module_path (root python namespace) or only subpackages/namespaces.\r\n\r\nRunning `sphinx-apidoc --implicit-namespaces module_path` with a submodule (some python file) it will choose the module_path as the one and only module otherwise, without a submodule, it will use the subpackages/namespaces as individual python modules. \r\n\r\nThe difference in the output is, that the module.rst of the module_path is not created and modules.rst does contain all subpackages/namespaces as submodules and not only the root module.\r\n\r\nI would recommend to introduce an option to not search recursively for modules, or disable the recursive search if implicit-namespaces are activated.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\nCreate a directory with name 'module' with subdirectories, add python files to the subdirectories.\r\nRun: sphinx-apidoc --implicit-namespaces -o apidoc_out1 ./module\r\nNow add a python file into 'module'.\r\nRun: sphinx-apidoc --implicit-namespaces -o apidoc_out2 ./module\r\nCompare the results.\r\n```\r\n\r\n**Expected behavior**\r\nExpecting same result  in apidoc_out2, with only one added module inside module.rst. Instead module.rst is missing and modules.rst is different.\r\n\r\n**Your project**\r\n[sphinx-apidoc-bug.zip](https://github.com/sphinx-doc/sphinx/files/5854695/sphinx-apidoc-bug.zip)\r\n\r\n**Environment info**\r\n- OS: Win\r\n- Python version: 3.8.0\r\n- Sphinx version: 3.4.3\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2021-01-22T15:43:04Z",
  "version": "3.5",
  "FAIL_TO_PASS": "[\"tests/test_ext_apidoc.py::test_excludes\", \"tests/test_ext_apidoc.py::test_excludes_subpackage_should_be_skipped\", \"tests/test_ext_apidoc.py::test_excludes_module_should_be_skipped\", \"tests/test_ext_apidoc.py::test_excludes_module_should_not_be_skipped\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_apidoc.py::test_simple\", \"tests/test_ext_apidoc.py::test_pep_0420_enabled\", \"tests/test_ext_apidoc.py::test_pep_0420_enabled_separate\", \"tests/test_ext_apidoc.py::test_pep_0420_disabled\", \"tests/test_ext_apidoc.py::test_pep_0420_disabled_top_level_verify\", \"tests/test_ext_apidoc.py::test_trailing_underscore\", \"tests/test_ext_apidoc.py::test_multibyte_parameters\", \"tests/test_ext_apidoc.py::test_extension_parsed\", \"tests/test_ext_apidoc.py::test_toc_all_references_should_exist_pep420_enabled\", \"tests/test_ext_apidoc.py::test_toc_all_references_should_exist_pep420_disabled\", \"tests/test_ext_apidoc.py::test_subpackage_in_toc\", \"tests/test_ext_apidoc.py::test_private\", \"tests/test_ext_apidoc.py::test_toc_file\", \"tests/test_ext_apidoc.py::test_module_file\", \"tests/test_ext_apidoc.py::test_module_file_noheadings\", \"tests/test_ext_apidoc.py::test_package_file\", \"tests/test_ext_apidoc.py::test_package_file_separate\", \"tests/test_ext_apidoc.py::test_package_file_module_first\", \"tests/test_ext_apidoc.py::test_package_file_without_submodules\", \"tests/test_ext_apidoc.py::test_namespace_package_file\"]",
  "environment_setup_commit": "4f8cb861e3b29186b38248fe81e4944fd987fcce",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.061039",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}