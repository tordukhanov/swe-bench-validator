{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-14038",
  "base_commit": "5fcbde2ed7385df250510bd5207f270cba990265",
  "patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -5,6 +5,7 @@\n from sympy.core.singleton import S\n from sympy.core.symbol import symbols\n from sympy.concrete.expr_with_intlimits import ExprWithIntLimits\n+from sympy.core.exprtools import factor_terms\n from sympy.functions.elementary.exponential import exp, log\n from sympy.polys import quo, roots\n from sympy.simplify import powsimp\n@@ -275,18 +276,9 @@ def _eval_product(self, term, limits):\n             return poly.LC()**(n - a + 1) * A * B\n \n         elif term.is_Add:\n-            p, q = term.as_numer_denom()\n-            q = self._eval_product(q, (k, a, n))\n-            if q.is_Number:\n-\n-                # There is expression, which couldn't change by\n-                # as_numer_denom(). E.g. n**(2/3) + 1 --> (n**(2/3) + 1, 1).\n-                # We have to catch this case.\n-                from sympy.concrete.summations import Sum\n-                p = exp(Sum(log(p), (k, a, n)))\n-            else:\n-                p = self._eval_product(p, (k, a, n))\n-            return p / q\n+            factored = factor_terms(term, fraction=True)\n+            if factored.is_Mul:\n+                return self._eval_product(factored, (k, a, n))\n \n         elif term.is_Mul:\n             exclude, include = [], []\n",
  "test_patch": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -1,5 +1,5 @@\n from sympy import (symbols, Symbol, product, factorial, rf, sqrt, cos,\n-                   Function, Product, Rational, Sum, oo, exp, log, S)\n+                   Function, Product, Rational, Sum, oo, exp, log, S, pi)\n from sympy.utilities.pytest import raises\n from sympy import simplify\n \n@@ -362,6 +362,11 @@ def test_issue_13546():\n     assert p.subs(n, 2).doit() == S(15)/2\n \n \n+def test_issue_14036():\n+    a, n = symbols('a n')\n+    assert product(1 - a**2 / (n*pi)**2, [n, 1, oo]) != 0\n+\n+\n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n         exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n",
  "problem_statement": "product(1 - a**2 / (n*pi)**2, [n, 1, oo]) should not evaluate to 0\n```\r\n>>> from sympy import *\r\n>>> from sympy.abc import a,n\r\n>>> product(1 - a**2 / (n*pi)**2, [n, 1, oo])\r\n0\r\n```\r\n(if the product is evaluated the correct result is `sinc(a)`)\r\n\n",
  "hints_text": "",
  "created_at": "2018-01-30T03:49:58Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_issue_14036\"]",
  "PASS_TO_PASS": "[\"test_karr_convention\", \"test_karr_proposition_2a\", \"test_karr_proposition_2b\", \"test_simple_products\", \"test_multiple_products\", \"test_rational_products\", \"test_special_products\", \"test__eval_product\", \"test_product_pow\", \"test_infinite_product\", \"test_conjugate_transpose\", \"test_simplify\", \"test_change_index\", \"test_reorder\", \"test_Product_is_convergent\", \"test_reverse_order\", \"test_issue_9983\", \"test_issue_13546\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.091331",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}