{
  "repo": "django/django",
  "instance_id": "django__django-12062",
  "base_commit": "3e5b349535f011a51dc308898924786143000631",
  "patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -61,16 +61,17 @@ def create_test_db(self, verbosity=1, autoclobber=False, serialize=True, keepdb=\n         settings.DATABASES[self.connection.alias][\"NAME\"] = test_database_name\n         self.connection.settings_dict[\"NAME\"] = test_database_name\n \n-        # We report migrate messages at one level lower than that requested.\n-        # This ensures we don't get flooded with messages during testing\n-        # (unless you really ask to be flooded).\n-        call_command(\n-            'migrate',\n-            verbosity=max(verbosity - 1, 0),\n-            interactive=False,\n-            database=self.connection.alias,\n-            run_syncdb=True,\n-        )\n+        if self.connection.settings_dict['TEST']['MIGRATE']:\n+            # We report migrate messages at one level lower than that\n+            # requested. This ensures we don't get flooded with messages during\n+            # testing (unless you really ask to be flooded).\n+            call_command(\n+                'migrate',\n+                verbosity=max(verbosity - 1, 0),\n+                interactive=False,\n+                database=self.connection.alias,\n+                run_syncdb=True,\n+            )\n \n         # We then serialize the current state of the database into a string\n         # and store it on the connection. This slightly horrific process is so people\ndiff --git a/django/db/utils.py b/django/db/utils.py\n--- a/django/db/utils.py\n+++ b/django/db/utils.py\n@@ -194,8 +194,15 @@ def prepare_test_settings(self, alias):\n             raise ConnectionDoesNotExist(\"The connection %s doesn't exist\" % alias)\n \n         test_settings = conn.setdefault('TEST', {})\n-        for key in ['CHARSET', 'COLLATION', 'NAME', 'MIRROR']:\n-            test_settings.setdefault(key, None)\n+        default_test_settings = [\n+            ('CHARSET', None),\n+            ('COLLATION', None),\n+            ('MIGRATE', True),\n+            ('MIRROR', None),\n+            ('NAME', None),\n+        ]\n+        for key, value in default_test_settings:\n+            test_settings.setdefault(key, value)\n \n     def __getitem__(self, alias):\n         if hasattr(self._connections, alias):\n",
  "test_patch": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,6 +1,7 @@\n import copy\n+from unittest import mock\n \n-from django.db import DEFAULT_DB_ALIAS, connections\n+from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n@@ -40,3 +41,29 @@ def test_custom_test_name_with_test_prefix(self):\n         test_connection.settings_dict['TEST'] = {'NAME': test_name}\n         signature = BaseDatabaseCreation(test_connection).test_db_signature()\n         self.assertEqual(signature[3], test_name)\n+\n+\n+@mock.patch.object(connection, 'ensure_connection')\n+@mock.patch('django.core.management.commands.migrate.Command.handle', return_value=None)\n+class TestDbCreationTests(SimpleTestCase):\n+    def test_migrate_test_setting_false(self, mocked_migrate, mocked_ensure_connection):\n+        creation = connection.creation_class(connection)\n+        saved_settings = copy.deepcopy(connection.settings_dict)\n+        try:\n+            connection.settings_dict['TEST']['MIGRATE'] = False\n+            with mock.patch.object(creation, '_create_test_db'):\n+                creation.create_test_db(verbosity=0, autoclobber=True, serialize=False)\n+            mocked_migrate.assert_not_called()\n+        finally:\n+            connection.settings_dict = saved_settings\n+\n+    def test_migrate_test_setting_true(self, mocked_migrate, mocked_ensure_connection):\n+        creation = connection.creation_class(connection)\n+        saved_settings = copy.deepcopy(connection.settings_dict)\n+        try:\n+            connection.settings_dict['TEST']['MIGRATE'] = True\n+            with mock.patch.object(creation, '_create_test_db'):\n+                creation.create_test_db(verbosity=0, autoclobber=True, serialize=False)\n+            mocked_migrate.assert_called_once()\n+        finally:\n+            connection.settings_dict = saved_settings\n",
  "problem_statement": "Allow disabling of all migrations during tests\nDescription\n\t\nAs an extension to #24919 a setting DATABASE['TEST']['MIGRATE'] = False should disable all migrations on that particular database. This can be done by hooking into django.db.migrations.loader.MigrationLoader.migrations_module() and returning None.\n",
  "hints_text": "​https://github.com/django/django/pull/5601\nUpdated PR: ​https://github.com/django/django/pull/6323\nIn 157d7f1f: Fixed #25388 -- Added an option to allow disabling of migrations during test database creation\nIn 14e6823: Refs #25388 -- Used in-memory database in test_disable_migrations.\nAs described in #26838, this feature doesn't seem to work as migrations are disabled in more than just tests when setting DATABASES['default']['TEST'] = {'MIGRATE': False}. If this requires more than a trivial fix, let's remove the feature from 1.10.\nIn 944e66cb: Reverted \"Fixed #25388 -- Added an option to allow disabling of migrations during test database creation\" This reverts commit 157d7f1f1de4705daddebb77f21bd7097a74513d since it disables migrations all the time, not just during tests.\nIn 5c56ce7: [1.10.x] Reverted \"Fixed #25388 -- Added an option to allow disabling of migrations during test database creation\" This reverts commit 157d7f1f1de4705daddebb77f21bd7097a74513d since it disables migrations all the time, not just during tests. Backport of 944e66cb1db6614ef0644b9030dd1d75e950767c from master\nHere's a WIP concept: ​https://github.com/django/django/compare/master...berkerpeksag:25388-migrate-false-v2 Added an attribute to BaseDatabaseWrapper to be used during the creation of the test database. It's probably not the best way to solve the problem, but it prevents the bug described in #26838.\nAssigned to myself due to inactivity for 2 months. Working on top of Berker's solution.\nPatch submitted ​https://github.com/django/django/pull/7499 it wasn't possible to write tests because setting \"_run_in_test_case\" on the connection only works before creating the test DB. I tried override setting and creating \"ConnectionHandler\" but failed because of the reason above.\nReviewing at DUTH sprint\nAnother option (which I prefer over the current implementation, the more I think about it) would be to add a new option to the migrate management command that would *only* run syncdb (i.e., it would pass an argument into the MigrationLoader telling it to do what you do now in the above PR). This seems less magical than the current implementation as it would facilitate passing the option down through the stack rather than setting it on a global variable (the db connection).\nAnother question: What about the currently documented method of suppressing migrations is insufficient? I.e., would simply improving that documentation be a suitable alternative to this ticket?\nReplying to Tobias McNulty: Another option (which I prefer over the current implementation, the more I think about it) would be to add a new option to the migrate management command that would *only* run syncdb I don't like that option. syncdb in it's current form will go away in some way or another in the future. migrate doesn't run syncdb automatically anymore unless explicitly said otherwise.\nAssigned to myself due to inactivity for 2 months. Thank you for working on this, Eyad. By the way, the inactivity was mainly due to the lack of feedback. I'm not very experienced on this part of Django and I wasn't sure that my solution is a good one. So it would be great if you could get some feedback from the domain experts :)\nMy take on the motivation of this ticket is to ease the boilerplate of setting MIGRATIONS_MODULES['app'] = None for all apps in a test settings file. I think it has some value if a nice solution is found.\nThis would be a very welcome addition to Django. In the mean time, we've been adding the following to all our projects test_settings to speed up testing: class NoMigrations: \"\"\"Disable migrations for all apps\"\"\" def __getitem__(self, item): return None def __contains__(self, item): return True MIGRATION_MODULES = NoMigrations()",
  "created_at": "2019-11-13T03:54:00Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_migrate_test_setting_false (backends.base.test_creation.TestDbCreationTests)\"]",
  "PASS_TO_PASS": "[\"test_custom_test_name (backends.base.test_creation.TestDbSignatureTests)\", \"test_custom_test_name_with_test_prefix (backends.base.test_creation.TestDbSignatureTests)\", \"test_default_name (backends.base.test_creation.TestDbSignatureTests)\", \"test_migrate_test_setting_true (backends.base.test_creation.TestDbCreationTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.592071",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}