{
  "repo": "mwaskom/seaborn",
  "instance_id": "mwaskom__seaborn-3407",
  "base_commit": "515286e02be3e4c0ff2ef4addb34a53c4a676ee4",
  "patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1472,8 +1472,8 @@ def map_diag(self, func, **kwargs):\n                 for ax in diag_axes[1:]:\n                     share_axis(diag_axes[0], ax, \"y\")\n \n-            self.diag_vars = np.array(diag_vars, np.object_)\n-            self.diag_axes = np.array(diag_axes, np.object_)\n+            self.diag_vars = diag_vars\n+            self.diag_axes = diag_axes\n \n         if \"hue\" not in signature(func).parameters:\n             return self._map_diag_iter_hue(func, **kwargs)\n",
  "test_patch": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -1422,6 +1422,13 @@ def test_pairplot_markers(self):\n         with pytest.warns(UserWarning):\n             g = ag.pairplot(self.df, hue=\"a\", vars=vars, markers=markers[:-2])\n \n+    def test_pairplot_column_multiindex(self):\n+\n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\"], [1, 2]])\n+        df = self.df[[\"x\", \"y\"]].set_axis(cols, axis=1)\n+        g = ag.pairplot(df)\n+        assert g.diag_vars == list(cols)\n+\n     def test_corner_despine(self):\n \n         g = ag.PairGrid(self.df, corner=True, despine=False)\n",
  "problem_statement": "pairplot raises KeyError with MultiIndex DataFrame\nWhen trying to pairplot a MultiIndex DataFrame, `pairplot` raises a `KeyError`:\r\n\r\nMRE:\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport seaborn as sns\r\n\r\n\r\ndata = {\r\n    (\"A\", \"1\"): np.random.rand(100),\r\n    (\"A\", \"2\"): np.random.rand(100),\r\n    (\"B\", \"1\"): np.random.rand(100),\r\n    (\"B\", \"2\"): np.random.rand(100),\r\n}\r\ndf = pd.DataFrame(data)\r\nsns.pairplot(df)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in pairplot(data, hue, hue_order, palette, vars, x_vars, y_vars, kind, diag_kind, markers, height, aspect, corner, dropna, plot_kws, diag_kws, grid_kws, size)\r\n   2142     diag_kws.setdefault(\"legend\", False)\r\n   2143     if diag_kind == \"hist\":\r\n-> 2144         grid.map_diag(histplot, **diag_kws)\r\n   2145     elif diag_kind == \"kde\":\r\n   2146         diag_kws.setdefault(\"fill\", True)\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in map_diag(self, func, **kwargs)\r\n   1488                 plt.sca(ax)\r\n   1489 \r\n-> 1490             vector = self.data[var]\r\n   1491             if self._hue_var is not None:\r\n   1492                 hue = self.data[self._hue_var]\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/frame.py) in __getitem__(self, key)\r\n   3765             if is_iterator(key):\r\n   3766                 key = list(key)\r\n-> 3767             indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\r\n   3768 \r\n   3769         # take() does not accept boolean indexers\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _get_indexer_strict(self, key, axis_name)\r\n   2534             indexer = self._get_indexer_level_0(keyarr)\r\n   2535 \r\n-> 2536             self._raise_if_missing(key, indexer, axis_name)\r\n   2537             return self[indexer], indexer\r\n   2538 \r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _raise_if_missing(self, key, indexer, axis_name)\r\n   2552                 cmask = check == -1\r\n   2553                 if cmask.any():\r\n-> 2554                     raise KeyError(f\"{keyarr[cmask]} not in index\")\r\n   2555                 # We get here when levels still contain values which are not\r\n   2556                 # actually in Index anymore\r\n\r\nKeyError: \"['1'] not in index\"\r\n```\r\n\r\nA workaround is to \"flatten\" the columns:\r\n\r\n```python\r\ndf.columns = [\"\".join(column) for column in df.columns]\r\n```\n",
  "hints_text": "",
  "created_at": "2023-06-27T23:17:29Z",
  "version": "0.13",
  "FAIL_TO_PASS": "[\"tests/test_axisgrid.py::TestPairGrid::test_pairplot_column_multiindex\"]",
  "PASS_TO_PASS": "[\"tests/test_axisgrid.py::TestFacetGrid::test_self_data\", \"tests/test_axisgrid.py::TestFacetGrid::test_self_figure\", \"tests/test_axisgrid.py::TestFacetGrid::test_self_axes\", \"tests/test_axisgrid.py::TestFacetGrid::test_axes_array_size\", \"tests/test_axisgrid.py::TestFacetGrid::test_single_axes\", \"tests/test_axisgrid.py::TestFacetGrid::test_col_wrap\", \"tests/test_axisgrid.py::TestFacetGrid::test_normal_axes\", \"tests/test_axisgrid.py::TestFacetGrid::test_wrapped_axes\", \"tests/test_axisgrid.py::TestFacetGrid::test_axes_dict\", \"tests/test_axisgrid.py::TestFacetGrid::test_figure_size\", \"tests/test_axisgrid.py::TestFacetGrid::test_figure_size_with_legend\", \"tests/test_axisgrid.py::TestFacetGrid::test_legend_data\", \"tests/test_axisgrid.py::TestFacetGrid::test_legend_data_missing_level\", \"tests/test_axisgrid.py::TestFacetGrid::test_get_boolean_legend_data\", \"tests/test_axisgrid.py::TestFacetGrid::test_legend_tuples\", \"tests/test_axisgrid.py::TestFacetGrid::test_legend_options\", \"tests/test_axisgrid.py::TestFacetGrid::test_legendout_with_colwrap\", \"tests/test_axisgrid.py::TestFacetGrid::test_legend_tight_layout\", \"tests/test_axisgrid.py::TestFacetGrid::test_subplot_kws\", \"tests/test_axisgrid.py::TestFacetGrid::test_gridspec_kws\", \"tests/test_axisgrid.py::TestFacetGrid::test_gridspec_kws_col_wrap\", \"tests/test_axisgrid.py::TestFacetGrid::test_data_generator\", \"tests/test_axisgrid.py::TestFacetGrid::test_map\", \"tests/test_axisgrid.py::TestFacetGrid::test_map_dataframe\", \"tests/test_axisgrid.py::TestFacetGrid::test_set\", \"tests/test_axisgrid.py::TestFacetGrid::test_set_titles\", \"tests/test_axisgrid.py::TestFacetGrid::test_set_titles_margin_titles\", \"tests/test_axisgrid.py::TestFacetGrid::test_set_ticklabels\", \"tests/test_axisgrid.py::TestFacetGrid::test_set_axis_labels\", \"tests/test_axisgrid.py::TestFacetGrid::test_axis_lims\", \"tests/test_axisgrid.py::TestFacetGrid::test_data_orders\", \"tests/test_axisgrid.py::TestFacetGrid::test_palette\", \"tests/test_axisgrid.py::TestFacetGrid::test_hue_kws\", \"tests/test_axisgrid.py::TestFacetGrid::test_dropna\", \"tests/test_axisgrid.py::TestFacetGrid::test_categorical_column_missing_categories\", \"tests/test_axisgrid.py::TestFacetGrid::test_categorical_warning\", \"tests/test_axisgrid.py::TestFacetGrid::test_refline\", \"tests/test_axisgrid.py::TestFacetGrid::test_apply\", \"tests/test_axisgrid.py::TestFacetGrid::test_pipe\", \"tests/test_axisgrid.py::TestFacetGrid::test_tick_params\", \"tests/test_axisgrid.py::TestPairGrid::test_self_data\", \"tests/test_axisgrid.py::TestPairGrid::test_ignore_datelike_data\", \"tests/test_axisgrid.py::TestPairGrid::test_self_figure\", \"tests/test_axisgrid.py::TestPairGrid::test_self_axes\", \"tests/test_axisgrid.py::TestPairGrid::test_default_axes\", \"tests/test_axisgrid.py::TestPairGrid::test_specific_square_axes[vars0]\", \"tests/test_axisgrid.py::TestPairGrid::test_specific_square_axes[vars1]\", \"tests/test_axisgrid.py::TestPairGrid::test_remove_hue_from_default\", \"tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars0-y_vars0]\", \"tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars1-z]\", \"tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars2-y_vars2]\", \"tests/test_axisgrid.py::TestPairGrid::test_corner\", \"tests/test_axisgrid.py::TestPairGrid::test_size\", \"tests/test_axisgrid.py::TestPairGrid::test_empty_grid\", \"tests/test_axisgrid.py::TestPairGrid::test_map\", \"tests/test_axisgrid.py::TestPairGrid::test_map_nonsquare\", \"tests/test_axisgrid.py::TestPairGrid::test_map_lower\", \"tests/test_axisgrid.py::TestPairGrid::test_map_upper\", \"tests/test_axisgrid.py::TestPairGrid::test_map_mixed_funcsig\", \"tests/test_axisgrid.py::TestPairGrid::test_map_diag\", \"tests/test_axisgrid.py::TestPairGrid::test_map_diag_rectangular\", \"tests/test_axisgrid.py::TestPairGrid::test_map_diag_color\", \"tests/test_axisgrid.py::TestPairGrid::test_map_diag_palette\", \"tests/test_axisgrid.py::TestPairGrid::test_map_diag_and_offdiag\", \"tests/test_axisgrid.py::TestPairGrid::test_diag_sharey\", \"tests/test_axisgrid.py::TestPairGrid::test_map_diag_matplotlib\", \"tests/test_axisgrid.py::TestPairGrid::test_palette\", \"tests/test_axisgrid.py::TestPairGrid::test_hue_kws\", \"tests/test_axisgrid.py::TestPairGrid::test_hue_order\", \"tests/test_axisgrid.py::TestPairGrid::test_hue_order_missing_level\", \"tests/test_axisgrid.py::TestPairGrid::test_hue_in_map\", \"tests/test_axisgrid.py::TestPairGrid::test_nondefault_index\", \"tests/test_axisgrid.py::TestPairGrid::test_dropna[scatterplot]\", \"tests/test_axisgrid.py::TestPairGrid::test_dropna[scatter]\", \"tests/test_axisgrid.py::TestPairGrid::test_histplot_legend\", \"tests/test_axisgrid.py::TestPairGrid::test_pairplot\", \"tests/test_axisgrid.py::TestPairGrid::test_pairplot_reg\", \"tests/test_axisgrid.py::TestPairGrid::test_pairplot_reg_hue\", \"tests/test_axisgrid.py::TestPairGrid::test_pairplot_diag_kde\", \"tests/test_axisgrid.py::TestPairGrid::test_pairplot_kde\", \"tests/test_axisgrid.py::TestPairGrid::test_pairplot_hist\", \"tests/test_axisgrid.py::TestPairGrid::test_pairplot_markers\", \"tests/test_axisgrid.py::TestPairGrid::test_corner_despine\", \"tests/test_axisgrid.py::TestPairGrid::test_corner_set\", \"tests/test_axisgrid.py::TestPairGrid::test_legend\", \"tests/test_axisgrid.py::TestPairGrid::test_tick_params\", \"tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_lists\", \"tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_arrays\", \"tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_series\", \"tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_dataframe\", \"tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_dataframe_bad_variable\", \"tests/test_axisgrid.py::TestJointGrid::test_margin_grid_axis_labels\", \"tests/test_axisgrid.py::TestJointGrid::test_dropna\", \"tests/test_axisgrid.py::TestJointGrid::test_axlims\", \"tests/test_axisgrid.py::TestJointGrid::test_marginal_ticks\", \"tests/test_axisgrid.py::TestJointGrid::test_bivariate_plot\", \"tests/test_axisgrid.py::TestJointGrid::test_univariate_plot\", \"tests/test_axisgrid.py::TestJointGrid::test_univariate_plot_distplot\", \"tests/test_axisgrid.py::TestJointGrid::test_univariate_plot_matplotlib\", \"tests/test_axisgrid.py::TestJointGrid::test_plot\", \"tests/test_axisgrid.py::TestJointGrid::test_space\", \"tests/test_axisgrid.py::TestJointGrid::test_hue[True]\", \"tests/test_axisgrid.py::TestJointGrid::test_hue[False]\", \"tests/test_axisgrid.py::TestJointGrid::test_refline\", \"tests/test_axisgrid.py::TestJointPlot::test_scatter\", \"tests/test_axisgrid.py::TestJointPlot::test_scatter_hue\", \"tests/test_axisgrid.py::TestJointPlot::test_reg\", \"tests/test_axisgrid.py::TestJointPlot::test_resid\", \"tests/test_axisgrid.py::TestJointPlot::test_hist\", \"tests/test_axisgrid.py::TestJointPlot::test_hex\", \"tests/test_axisgrid.py::TestJointPlot::test_kde\", \"tests/test_axisgrid.py::TestJointPlot::test_kde_hue\", \"tests/test_axisgrid.py::TestJointPlot::test_color\", \"tests/test_axisgrid.py::TestJointPlot::test_palette\", \"tests/test_axisgrid.py::TestJointPlot::test_hex_customise\", \"tests/test_axisgrid.py::TestJointPlot::test_bad_kind\", \"tests/test_axisgrid.py::TestJointPlot::test_unsupported_hue_kind\", \"tests/test_axisgrid.py::TestJointPlot::test_leaky_dict\", \"tests/test_axisgrid.py::TestJointPlot::test_distplot_kwarg_warning\", \"tests/test_axisgrid.py::TestJointPlot::test_ax_warning\"]",
  "environment_setup_commit": "23860365816440b050e9211e1c395a966de3c403",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.839291",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}