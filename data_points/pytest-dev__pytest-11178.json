{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-11178",
  "base_commit": "97ed533f63d5780a05702a711555cb6744247a37",
  "patch": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -265,19 +265,20 @@ def _repr_compare(self, other_side: Mapping[object, float]) -> List[str]:\n             approx_side_as_map.items(), other_side.values()\n         ):\n             if approx_value != other_value:\n-                max_abs_diff = max(\n-                    max_abs_diff, abs(approx_value.expected - other_value)\n-                )\n-                if approx_value.expected == 0.0:\n-                    max_rel_diff = math.inf\n-                else:\n-                    max_rel_diff = max(\n-                        max_rel_diff,\n-                        abs(\n-                            (approx_value.expected - other_value)\n-                            / approx_value.expected\n-                        ),\n+                if approx_value.expected is not None and other_value is not None:\n+                    max_abs_diff = max(\n+                        max_abs_diff, abs(approx_value.expected - other_value)\n                     )\n+                    if approx_value.expected == 0.0:\n+                        max_rel_diff = math.inf\n+                    else:\n+                        max_rel_diff = max(\n+                            max_rel_diff,\n+                            abs(\n+                                (approx_value.expected - other_value)\n+                                / approx_value.expected\n+                            ),\n+                        )\n                 different_ids.append(approx_key)\n \n         message_data = [\n",
  "test_patch": "diff --git a/testing/python/approx.py b/testing/python/approx.py\n--- a/testing/python/approx.py\n+++ b/testing/python/approx.py\n@@ -122,6 +122,23 @@ def test_error_messages_native_dtypes(self, assert_approx_raises_regex):\n             ],\n         )\n \n+        assert_approx_raises_regex(\n+            {\"a\": 1.0, \"b\": None, \"c\": None},\n+            {\n+                \"a\": None,\n+                \"b\": 1000.0,\n+                \"c\": None,\n+            },\n+            [\n+                r\"  comparison failed. Mismatched elements: 2 / 3:\",\n+                r\"  Max absolute difference: -inf\",\n+                r\"  Max relative difference: -inf\",\n+                r\"  Index \\| Obtained\\s+\\| Expected\\s+\",\n+                rf\"  a     \\| {SOME_FLOAT} \\| None\",\n+                rf\"  b     \\| None\\s+\\| {SOME_FLOAT} ± {SOME_FLOAT}\",\n+            ],\n+        )\n+\n         assert_approx_raises_regex(\n             [1.0, 2.0, 3.0, 4.0],\n             [1.0, 3.0, 3.0, 5.0],\n",
  "problem_statement": "`pytest.approx` fails with `TypeError: unsupported operand type(s) for -: 'float' and 'NoneType'`\nWhen using `approx` to test float and one of the objects in the `assert` statement contain `None` I see the following TypeError:\r\n\r\n`TypeError: unsupported operand type(s) for -: 'float' and 'NoneType'.\r\n`\r\n\r\n## Minimal example\r\n### Test\r\n```\r\nimport pytest\r\n\r\n\r\n# Expecting assertion error with differing item\r\n# Instead I see \"TypeError: unsupported operand type(s) for -: 'float' and 'NoneType'.\"\r\ndef test_pytest_none_approx():\r\n    actual_result = {\"a\": 1.2}\r\n    expected_result = {\"a\": None}\r\n    approx_expected_result = pytest.approx(expected_result)\r\n    assert approx_expected_result == actual_result\r\n```\r\n### Output\r\n```\r\nE       AssertionError: assert approx({'a': 1.2 ± 1.2e-06}) == {'a': None}\r\nE         (pytest_assertion plugin: representation of details failed: /Users/milanwiedemann/.pyenv/versions/3.10.4/lib/python3.10/site-packages/_pytest/python_api.py:270: TypeError: unsupported operand type(s) for -: 'float' and 'NoneType'.\r\nE          Probably an object has a faulty __repr__.)\r\n```\r\n\r\n## `pip list`\r\n\r\n```\r\nPackage        Version\r\n-------------- -------\r\nattrs          22.2.0\r\nexceptiongroup 1.1.0\r\niniconfig      2.0.0\r\npackaging      23.0\r\npip            22.0.4\r\npluggy         1.0.0\r\npytest         7.2.1\r\nsetuptools     58.1.0\r\ntomli          2.0.1\r\n```\r\n\r\n## Cersions of OS and pytest\r\n\r\n- macOS 12.6.3\r\n- python 3.10.4\r\n- pytest 7.2.1\r\n\r\n\n",
  "hints_text": "We should probably error earlier, none is not approx-able\n\nIt seems to be a mistake to let approx take dict for convenience \nIt appears that `None` is currently functional when passing it directly to approx, but not when passed as part of a dictionary (which gets processed by the `ApproxMapping` class, and a subtraction operation on the dict value is throwing the error).\r\n\r\nI do agree that None shouldn't be approx-able based on what the function should be doing, though an early error on `None` may break existing tests, so should `ApproxMapping` instead be adjusted to better handle `None`? The documentation does include dictionaries with `None` values, and keeping the dict functionality may be helpful when dealing with multiple values from the same function run in a way that parameterize wouldn't cover.\r\n\r\nI'm open to work on any of the above options, let me know the preferred direction!\n> so should ApproxMapping instead be adjusted to better handle None?\r\n\r\nI vote for that one; deprecating `None` would be a whole can of worms, but handling `None` seems to be the way to fix this, given the current failure is not acceptable.",
  "created_at": "2023-07-07T19:54:58Z",
  "version": "8.0",
  "FAIL_TO_PASS": "[\"testing/python/approx.py::TestApprox::test_error_messages_native_dtypes\"]",
  "PASS_TO_PASS": "[\"testing/python/approx.py::TestApprox::test_repr_string\", \"testing/python/approx.py::TestApprox::test_repr_complex_numbers\", \"testing/python/approx.py::TestApprox::test_bool\", \"testing/python/approx.py::TestApprox::test_operator_overloading\", \"testing/python/approx.py::TestApprox::test_exactly_equal\", \"testing/python/approx.py::TestApprox::test_opposite_sign\", \"testing/python/approx.py::TestApprox::test_zero_tolerance\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100-None]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[None--1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[1e+100--1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100-1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100--1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance_message\", \"testing/python/approx.py::TestApprox::test_inf_tolerance\", \"testing/python/approx.py::TestApprox::test_inf_tolerance_expecting_zero\", \"testing/python/approx.py::TestApprox::test_nan_tolerance\", \"testing/python/approx.py::TestApprox::test_reasonable_defaults\", \"testing/python/approx.py::TestApprox::test_default_tolerances\", \"testing/python/approx.py::TestApprox::test_custom_tolerances\", \"testing/python/approx.py::TestApprox::test_relative_tolerance\", \"testing/python/approx.py::TestApprox::test_absolute_tolerance\", \"testing/python/approx.py::TestApprox::test_expecting_zero\", \"testing/python/approx.py::TestApprox::test_expecting_inf\", \"testing/python/approx.py::TestApprox::test_expecting_nan\", \"testing/python/approx.py::TestApprox::test_int\", \"testing/python/approx.py::TestApprox::test_decimal\", \"testing/python/approx.py::TestApprox::test_fraction\", \"testing/python/approx.py::TestApprox::test_complex\", \"testing/python/approx.py::TestApprox::test_list\", \"testing/python/approx.py::TestApprox::test_list_decimal\", \"testing/python/approx.py::TestApprox::test_list_wrong_len\", \"testing/python/approx.py::TestApprox::test_tuple\", \"testing/python/approx.py::TestApprox::test_tuple_wrong_len\", \"testing/python/approx.py::TestApprox::test_tuple_vs_other\", \"testing/python/approx.py::TestApprox::test_dict\", \"testing/python/approx.py::TestApprox::test_dict_decimal\", \"testing/python/approx.py::TestApprox::test_dict_wrong_len\", \"testing/python/approx.py::TestApprox::test_dict_nonnumeric\", \"testing/python/approx.py::TestApprox::test_dict_vs_other\", \"testing/python/approx.py::TestApprox::test_dict_for_div_by_zero\", \"testing/python/approx.py::TestApprox::test_doctests\", \"testing/python/approx.py::TestApprox::test_expected_value_type_error[nested-list]\", \"testing/python/approx.py::TestApprox::test_expected_value_type_error[nested-dict]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[None]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[nested-str]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[dict-with-string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[nested-str]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[dict-with-string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_dict_repr\", \"testing/python/approx.py::TestApprox::test_nonnumeric_list_repr\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[<=]\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[<]\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[>=]\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[>]\", \"testing/python/approx.py::TestApprox::test_generic_ordered_sequence\", \"testing/python/approx.py::TestApprox::test_allow_ordered_sequences_only\", \"testing/python/approx.py::TestRecursiveSequenceMap::test_map_over_scalar\", \"testing/python/approx.py::TestRecursiveSequenceMap::test_map_over_empty_list\", \"testing/python/approx.py::TestRecursiveSequenceMap::test_map_over_list\", \"testing/python/approx.py::TestRecursiveSequenceMap::test_map_over_tuple\", \"testing/python/approx.py::TestRecursiveSequenceMap::test_map_over_nested_lists\", \"testing/python/approx.py::TestRecursiveSequenceMap::test_map_over_mixed_sequence\", \"testing/python/approx.py::TestApprox::test_unicode_plus_minus\"]",
  "environment_setup_commit": "10056865d2a4784934ce043908a0e78d0578f677",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.925689",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}