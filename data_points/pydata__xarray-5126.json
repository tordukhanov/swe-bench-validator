{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-5126",
  "base_commit": "6bfbaede69eb73810cb63672a8161bd1fc147594",
  "patch": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -11,7 +11,7 @@\n from pandas.errors import OutOfBoundsDatetime\n \n from .duck_array_ops import array_equiv\n-from .options import OPTIONS\n+from .options import OPTIONS, _get_boolean_with_default\n from .pycompat import dask_array_type, sparse_array_type\n from .utils import is_duck_array\n \n@@ -371,7 +371,9 @@ def _calculate_col_width(col_items):\n     return col_width\n \n \n-def _mapping_repr(mapping, title, summarizer, col_width=None, max_rows=None):\n+def _mapping_repr(\n+    mapping, title, summarizer, expand_option_name, col_width=None, max_rows=None\n+):\n     if col_width is None:\n         col_width = _calculate_col_width(mapping)\n     if max_rows is None:\n@@ -379,7 +381,9 @@ def _mapping_repr(mapping, title, summarizer, col_width=None, max_rows=None):\n     summary = [f\"{title}:\"]\n     if mapping:\n         len_mapping = len(mapping)\n-        if len_mapping > max_rows:\n+        if not _get_boolean_with_default(expand_option_name, default=True):\n+            summary = [f\"{summary[0]} ({len_mapping})\"]\n+        elif len_mapping > max_rows:\n             summary = [f\"{summary[0]} ({max_rows}/{len_mapping})\"]\n             first_rows = max_rows // 2 + max_rows % 2\n             items = list(mapping.items())\n@@ -396,12 +400,18 @@ def _mapping_repr(mapping, title, summarizer, col_width=None, max_rows=None):\n \n \n data_vars_repr = functools.partial(\n-    _mapping_repr, title=\"Data variables\", summarizer=summarize_datavar\n+    _mapping_repr,\n+    title=\"Data variables\",\n+    summarizer=summarize_datavar,\n+    expand_option_name=\"display_expand_data_vars\",\n )\n \n \n attrs_repr = functools.partial(\n-    _mapping_repr, title=\"Attributes\", summarizer=summarize_attr\n+    _mapping_repr,\n+    title=\"Attributes\",\n+    summarizer=summarize_attr,\n+    expand_option_name=\"display_expand_attrs\",\n )\n \n \n@@ -409,7 +419,11 @@ def coords_repr(coords, col_width=None):\n     if col_width is None:\n         col_width = _calculate_col_width(_get_col_items(coords))\n     return _mapping_repr(\n-        coords, title=\"Coordinates\", summarizer=summarize_coord, col_width=col_width\n+        coords,\n+        title=\"Coordinates\",\n+        summarizer=summarize_coord,\n+        expand_option_name=\"display_expand_coords\",\n+        col_width=col_width,\n     )\n \n \n@@ -493,9 +507,14 @@ def array_repr(arr):\n     else:\n         name_str = \"\"\n \n+    if _get_boolean_with_default(\"display_expand_data\", default=True):\n+        data_repr = short_data_repr(arr)\n+    else:\n+        data_repr = inline_variable_array_repr(arr, OPTIONS[\"display_width\"])\n+\n     summary = [\n         \"<xarray.{} {}({})>\".format(type(arr).__name__, name_str, dim_summary(arr)),\n-        short_data_repr(arr),\n+        data_repr,\n     ]\n \n     if hasattr(arr, \"coords\"):\ndiff --git a/xarray/core/formatting_html.py b/xarray/core/formatting_html.py\n--- a/xarray/core/formatting_html.py\n+++ b/xarray/core/formatting_html.py\n@@ -6,6 +6,7 @@\n import pkg_resources\n \n from .formatting import inline_variable_array_repr, short_data_repr\n+from .options import _get_boolean_with_default\n \n STATIC_FILES = (\"static/html/icons-svg-inline.html\", \"static/css/style.css\")\n \n@@ -164,9 +165,14 @@ def collapsible_section(\n     )\n \n \n-def _mapping_section(mapping, name, details_func, max_items_collapse, enabled=True):\n+def _mapping_section(\n+    mapping, name, details_func, max_items_collapse, expand_option_name, enabled=True\n+):\n     n_items = len(mapping)\n-    collapsed = n_items >= max_items_collapse\n+    expanded = _get_boolean_with_default(\n+        expand_option_name, n_items < max_items_collapse\n+    )\n+    collapsed = not expanded\n \n     return collapsible_section(\n         name,\n@@ -188,7 +194,11 @@ def dim_section(obj):\n def array_section(obj):\n     # \"unique\" id to expand/collapse the section\n     data_id = \"section-\" + str(uuid.uuid4())\n-    collapsed = \"checked\"\n+    collapsed = (\n+        \"checked\"\n+        if _get_boolean_with_default(\"display_expand_data\", default=True)\n+        else \"\"\n+    )\n     variable = getattr(obj, \"variable\", obj)\n     preview = escape(inline_variable_array_repr(variable, max_width=70))\n     data_repr = short_data_repr_html(obj)\n@@ -209,6 +219,7 @@ def array_section(obj):\n     name=\"Coordinates\",\n     details_func=summarize_coords,\n     max_items_collapse=25,\n+    expand_option_name=\"display_expand_coords\",\n )\n \n \n@@ -217,6 +228,7 @@ def array_section(obj):\n     name=\"Data variables\",\n     details_func=summarize_vars,\n     max_items_collapse=15,\n+    expand_option_name=\"display_expand_data_vars\",\n )\n \n \n@@ -225,6 +237,7 @@ def array_section(obj):\n     name=\"Attributes\",\n     details_func=summarize_attrs,\n     max_items_collapse=10,\n+    expand_option_name=\"display_expand_attrs\",\n )\n \n \ndiff --git a/xarray/core/options.py b/xarray/core/options.py\n--- a/xarray/core/options.py\n+++ b/xarray/core/options.py\n@@ -6,6 +6,10 @@\n DISPLAY_MAX_ROWS = \"display_max_rows\"\n DISPLAY_STYLE = \"display_style\"\n DISPLAY_WIDTH = \"display_width\"\n+DISPLAY_EXPAND_ATTRS = \"display_expand_attrs\"\n+DISPLAY_EXPAND_COORDS = \"display_expand_coords\"\n+DISPLAY_EXPAND_DATA_VARS = \"display_expand_data_vars\"\n+DISPLAY_EXPAND_DATA = \"display_expand_data\"\n ENABLE_CFTIMEINDEX = \"enable_cftimeindex\"\n FILE_CACHE_MAXSIZE = \"file_cache_maxsize\"\n KEEP_ATTRS = \"keep_attrs\"\n@@ -19,6 +23,10 @@\n     DISPLAY_MAX_ROWS: 12,\n     DISPLAY_STYLE: \"html\",\n     DISPLAY_WIDTH: 80,\n+    DISPLAY_EXPAND_ATTRS: \"default\",\n+    DISPLAY_EXPAND_COORDS: \"default\",\n+    DISPLAY_EXPAND_DATA_VARS: \"default\",\n+    DISPLAY_EXPAND_DATA: \"default\",\n     ENABLE_CFTIMEINDEX: True,\n     FILE_CACHE_MAXSIZE: 128,\n     KEEP_ATTRS: \"default\",\n@@ -38,6 +46,10 @@ def _positive_integer(value):\n     DISPLAY_MAX_ROWS: _positive_integer,\n     DISPLAY_STYLE: _DISPLAY_OPTIONS.__contains__,\n     DISPLAY_WIDTH: _positive_integer,\n+    DISPLAY_EXPAND_ATTRS: lambda choice: choice in [True, False, \"default\"],\n+    DISPLAY_EXPAND_COORDS: lambda choice: choice in [True, False, \"default\"],\n+    DISPLAY_EXPAND_DATA_VARS: lambda choice: choice in [True, False, \"default\"],\n+    DISPLAY_EXPAND_DATA: lambda choice: choice in [True, False, \"default\"],\n     ENABLE_CFTIMEINDEX: lambda value: isinstance(value, bool),\n     FILE_CACHE_MAXSIZE: _positive_integer,\n     KEEP_ATTRS: lambda choice: choice in [True, False, \"default\"],\n@@ -65,8 +77,8 @@ def _warn_on_setting_enable_cftimeindex(enable_cftimeindex):\n }\n \n \n-def _get_keep_attrs(default):\n-    global_choice = OPTIONS[\"keep_attrs\"]\n+def _get_boolean_with_default(option, default):\n+    global_choice = OPTIONS[option]\n \n     if global_choice == \"default\":\n         return default\n@@ -74,10 +86,14 @@ def _get_keep_attrs(default):\n         return global_choice\n     else:\n         raise ValueError(\n-            \"The global option keep_attrs must be one of True, False or 'default'.\"\n+            f\"The global option {option} must be one of True, False or 'default'.\"\n         )\n \n \n+def _get_keep_attrs(default):\n+    return _get_boolean_with_default(\"keep_attrs\", default)\n+\n+\n class set_options:\n     \"\"\"Set options for xarray in a controlled context.\n \n@@ -108,6 +124,22 @@ class set_options:\n       Default: ``'default'``.\n     - ``display_style``: display style to use in jupyter for xarray objects.\n       Default: ``'text'``. Other options are ``'html'``.\n+    - ``display_expand_attrs``: whether to expand the attributes section for\n+      display of ``DataArray`` or ``Dataset`` objects. Can be ``True`` to always\n+      expand, ``False`` to always collapse, or ``default`` to expand unless over\n+      a pre-defined limit. Default: ``default``.\n+    - ``display_expand_coords``: whether to expand the coordinates section for\n+      display of ``DataArray`` or ``Dataset`` objects. Can be ``True`` to always\n+      expand, ``False`` to always collapse, or ``default`` to expand unless over\n+      a pre-defined limit. Default: ``default``.\n+    - ``display_expand_data``: whether to expand the data section for display\n+      of ``DataArray`` objects. Can be ``True`` to always expand, ``False`` to\n+      always collapse, or ``default`` to expand unless over a pre-defined limit.\n+      Default: ``default``.\n+    - ``display_expand_data_vars``: whether to expand the data variables section\n+      for display of ``Dataset`` objects. Can be ``True`` to always\n+      expand, ``False`` to always collapse, or ``default`` to expand unless over\n+      a pre-defined limit. Default: ``default``.\n \n \n     You can use ``set_options`` either as a context manager:\n",
  "test_patch": "diff --git a/xarray/tests/test_formatting.py b/xarray/tests/test_formatting.py\n--- a/xarray/tests/test_formatting.py\n+++ b/xarray/tests/test_formatting.py\n@@ -391,6 +391,17 @@ def test_array_repr(self):\n \n         assert actual == expected\n \n+        with xr.set_options(display_expand_data=False):\n+            actual = formatting.array_repr(ds[(1, 2)])\n+            expected = dedent(\n+                \"\"\"\\\n+            <xarray.DataArray (1, 2) (test: 1)>\n+            0\n+            Dimensions without coordinates: test\"\"\"\n+            )\n+\n+            assert actual == expected\n+\n \n def test_inline_variable_array_repr_custom_repr():\n     class CustomArray:\n@@ -492,3 +503,19 @@ def test__mapping_repr(display_max_rows, n_vars, n_attr):\n         len_summary = len(summary)\n         data_vars_print_size = min(display_max_rows, len_summary)\n         assert len_summary == data_vars_print_size\n+\n+    with xr.set_options(\n+        display_expand_coords=False,\n+        display_expand_data_vars=False,\n+        display_expand_attrs=False,\n+    ):\n+        actual = formatting.dataset_repr(ds)\n+        expected = dedent(\n+            f\"\"\"\\\n+            <xarray.Dataset>\n+            Dimensions:      (time: 2)\n+            Coordinates: (1)\n+            Data variables: ({n_vars})\n+            Attributes: ({n_attr})\"\"\"\n+        )\n+        assert actual == expected\ndiff --git a/xarray/tests/test_formatting_html.py b/xarray/tests/test_formatting_html.py\n--- a/xarray/tests/test_formatting_html.py\n+++ b/xarray/tests/test_formatting_html.py\n@@ -115,6 +115,17 @@ def test_repr_of_dataarray(dataarray):\n         formatted.count(\"class='xr-section-summary-in' type='checkbox' disabled >\") == 2\n     )\n \n+    with xr.set_options(display_expand_data=False):\n+        formatted = fh.array_repr(dataarray)\n+        assert \"dim_0\" in formatted\n+        # has an expanded data section\n+        assert formatted.count(\"class='xr-array-in' type='checkbox' checked>\") == 0\n+        # coords and attrs don't have an items so they'll be be disabled and collapsed\n+        assert (\n+            formatted.count(\"class='xr-section-summary-in' type='checkbox' disabled >\")\n+            == 2\n+        )\n+\n \n def test_summary_of_multiindex_coord(multiindex):\n     idx = multiindex.x.variable.to_index_variable()\n@@ -138,6 +149,20 @@ def test_repr_of_dataset(dataset):\n     assert \"&lt;U4\" in formatted or \"&gt;U4\" in formatted\n     assert \"&lt;IA&gt;\" in formatted\n \n+    with xr.set_options(\n+        display_expand_coords=False,\n+        display_expand_data_vars=False,\n+        display_expand_attrs=False,\n+    ):\n+        formatted = fh.dataset_repr(dataset)\n+        # coords, attrs, and data_vars are collapsed\n+        assert (\n+            formatted.count(\"class='xr-section-summary-in' type='checkbox'  checked>\")\n+            == 0\n+        )\n+        assert \"&lt;U4\" in formatted or \"&gt;U4\" in formatted\n+        assert \"&lt;IA&gt;\" in formatted\n+\n \n def test_repr_text_fallback(dataset):\n     formatted = fh.dataset_repr(dataset)\n",
  "problem_statement": "FR: Provide option for collapsing the HTML display in notebooks\n# Issue description\r\nThe overly long output of the text repr of xarray always bugged so I was very happy that the recently implemented html repr collapsed the data part, and equally sad to see that 0.16.0 reverted that, IMHO, correct design implementation back, presumably to align it with the text repr.\r\n\r\n# Suggested solution\r\nAs the opinions will vary on what a good repr should do, similar to existing xarray.set_options I would like to have an option that let's me control if the data part (and maybe other parts?) appear in a collapsed fashion for the html repr.\r\n\r\n# Additional questions\r\n* Is it worth considering this as well for the text repr? Or is that harder to implement?\r\n\r\nAny guidance on \r\n  * which files need to change\r\n  * potential pitfalls\r\n\r\nwould be welcome. I'm happy to work on this, as I seem to be the only one not liking the current implementation.\n",
  "hints_text": "Related: #4182",
  "created_at": "2021-04-07T10:51:03Z",
  "version": "0.12",
  "FAIL_TO_PASS": "[\"xarray/tests/test_formatting.py::TestFormatting::test_array_repr\", \"xarray/tests/test_formatting.py::test__mapping_repr[50-40-30]\", \"xarray/tests/test_formatting.py::test__mapping_repr[35-40-30]\", \"xarray/tests/test_formatting.py::test__mapping_repr[11-40-30]\", \"xarray/tests/test_formatting.py::test__mapping_repr[1-40-30]\", \"xarray/tests/test_formatting_html.py::test_repr_of_dataarray\", \"xarray/tests/test_formatting_html.py::test_repr_of_dataset\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_formatting.py::TestFormatting::test_get_indexer_at_least_n_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_first_n_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_last_n_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_last_item\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_item\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_array_flat\", \"xarray/tests/test_formatting.py::TestFormatting::test_pretty_print\", \"xarray/tests/test_formatting.py::TestFormatting::test_maybe_truncate\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_timestamp_out_of_bounds\", \"xarray/tests/test_formatting.py::TestFormatting::test_attribute_repr\", \"xarray/tests/test_formatting.py::TestFormatting::test_diff_array_repr\", \"xarray/tests/test_formatting.py::TestFormatting::test_diff_attrs_repr_with_array\", \"xarray/tests/test_formatting.py::TestFormatting::test_diff_dataset_repr\", \"xarray/tests/test_formatting.py::test_inline_variable_array_repr_custom_repr\", \"xarray/tests/test_formatting.py::test_set_numpy_options\", \"xarray/tests/test_formatting.py::test_short_numpy_repr\", \"xarray/tests/test_formatting.py::test_large_array_repr_length\", \"xarray/tests/test_formatting_html.py::test_short_data_repr_html\", \"xarray/tests/test_formatting_html.py::test_short_data_repr_html_non_str_keys\", \"xarray/tests/test_formatting_html.py::test_short_data_repr_html_dask\", \"xarray/tests/test_formatting_html.py::test_format_dims_no_dims\", \"xarray/tests/test_formatting_html.py::test_format_dims_unsafe_dim_name\", \"xarray/tests/test_formatting_html.py::test_format_dims_non_index\", \"xarray/tests/test_formatting_html.py::test_format_dims_index\", \"xarray/tests/test_formatting_html.py::test_summarize_attrs_with_unsafe_attr_name_and_value\", \"xarray/tests/test_formatting_html.py::test_summary_of_multiindex_coord\", \"xarray/tests/test_formatting_html.py::test_repr_of_multiindex\", \"xarray/tests/test_formatting_html.py::test_repr_text_fallback\", \"xarray/tests/test_formatting_html.py::test_variable_repr_html\"]",
  "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.887690",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}