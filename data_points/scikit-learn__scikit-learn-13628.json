{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13628",
  "base_commit": "6a3fc959b684e2f4b2fab28b27d5fa4018acb6a3",
  "patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -25,7 +25,6 @@\n from .isotonic import IsotonicRegression\n from .svm import LinearSVC\n from .model_selection import check_cv\n-from .metrics.classification import _check_binary_probabilistic_predictions\n \n \n class CalibratedClassifierCV(BaseEstimator, ClassifierMixin):\n@@ -572,6 +571,7 @@ def calibration_curve(y_true, y_prob, normalize=False, n_bins=5,\n     \"\"\"\n     y_true = column_or_1d(y_true)\n     y_prob = column_or_1d(y_prob)\n+    check_consistent_length(y_true, y_prob)\n \n     if normalize:  # Normalize predicted values into interval [0, 1]\n         y_prob = (y_prob - y_prob.min()) / (y_prob.max() - y_prob.min())\n@@ -579,7 +579,11 @@ def calibration_curve(y_true, y_prob, normalize=False, n_bins=5,\n         raise ValueError(\"y_prob has values outside [0, 1] and normalize is \"\n                          \"set to False.\")\n \n-    y_true = _check_binary_probabilistic_predictions(y_true, y_prob)\n+    labels = np.unique(y_true)\n+    if len(labels) > 2:\n+        raise ValueError(\"Only binary classification is supported. \"\n+                         \"Provided labels %s.\" % labels)\n+    y_true = label_binarize(y_true, labels)[:, 0]\n \n     if strategy == 'quantile':  # Determine bin edges by distribution of data\n         quantiles = np.linspace(0, 1, n_bins + 1)\ndiff --git a/sklearn/metrics/classification.py b/sklearn/metrics/classification.py\n--- a/sklearn/metrics/classification.py\n+++ b/sklearn/metrics/classification.py\n@@ -28,7 +28,7 @@\n from scipy.sparse import coo_matrix\n from scipy.sparse import csr_matrix\n \n-from ..preprocessing import LabelBinarizer, label_binarize\n+from ..preprocessing import LabelBinarizer\n from ..preprocessing import LabelEncoder\n from ..utils import assert_all_finite\n from ..utils import check_array\n@@ -2301,25 +2301,6 @@ def hinge_loss(y_true, pred_decision, labels=None, sample_weight=None):\n     return np.average(losses, weights=sample_weight)\n \n \n-def _check_binary_probabilistic_predictions(y_true, y_prob):\n-    \"\"\"Check that y_true is binary and y_prob contains valid probabilities\"\"\"\n-    check_consistent_length(y_true, y_prob)\n-\n-    labels = np.unique(y_true)\n-\n-    if len(labels) > 2:\n-        raise ValueError(\"Only binary classification is supported. \"\n-                         \"Provided labels %s.\" % labels)\n-\n-    if y_prob.max() > 1:\n-        raise ValueError(\"y_prob contains values greater than 1.\")\n-\n-    if y_prob.min() < 0:\n-        raise ValueError(\"y_prob contains values less than 0.\")\n-\n-    return label_binarize(y_true, labels)[:, 0]\n-\n-\n def brier_score_loss(y_true, y_prob, sample_weight=None, pos_label=None):\n     \"\"\"Compute the Brier score.\n     The smaller the Brier score, the better, hence the naming with \"loss\".\n@@ -2353,8 +2334,9 @@ def brier_score_loss(y_true, y_prob, sample_weight=None, pos_label=None):\n         Sample weights.\n \n     pos_label : int or str, default=None\n-        Label of the positive class. If None, the maximum label is used as\n-        positive class\n+        Label of the positive class.\n+        Defaults to the greater label unless y_true is all 0 or all -1\n+        in which case pos_label defaults to 1.\n \n     Returns\n     -------\n@@ -2389,8 +2371,25 @@ def brier_score_loss(y_true, y_prob, sample_weight=None, pos_label=None):\n     assert_all_finite(y_prob)\n     check_consistent_length(y_true, y_prob, sample_weight)\n \n+    labels = np.unique(y_true)\n+    if len(labels) > 2:\n+        raise ValueError(\"Only binary classification is supported. \"\n+                         \"Labels in y_true: %s.\" % labels)\n+    if y_prob.max() > 1:\n+        raise ValueError(\"y_prob contains values greater than 1.\")\n+    if y_prob.min() < 0:\n+        raise ValueError(\"y_prob contains values less than 0.\")\n+\n+    # if pos_label=None, when y_true is in {-1, 1} or {0, 1},\n+    # pos_labe is set to 1 (consistent with precision_recall_curve/roc_curve),\n+    # otherwise pos_label is set to the greater label\n+    # (different from precision_recall_curve/roc_curve,\n+    # the purpose is to keep backward compatibility).\n     if pos_label is None:\n-        pos_label = y_true.max()\n+        if (np.array_equal(labels, [0]) or\n+                np.array_equal(labels, [-1])):\n+            pos_label = 1\n+        else:\n+            pos_label = y_true.max()\n     y_true = np.array(y_true == pos_label, int)\n-    y_true = _check_binary_probabilistic_predictions(y_true, y_prob)\n     return np.average((y_true - y_prob) ** 2, weights=sample_weight)\ndiff --git a/sklearn/metrics/ranking.py b/sklearn/metrics/ranking.py\n--- a/sklearn/metrics/ranking.py\n+++ b/sklearn/metrics/ranking.py\n@@ -469,13 +469,16 @@ def precision_recall_curve(y_true, probas_pred, pos_label=None,\n     Parameters\n     ----------\n     y_true : array, shape = [n_samples]\n-        True targets of binary classification in range {-1, 1} or {0, 1}.\n+        True binary labels. If labels are not either {-1, 1} or {0, 1}, then\n+        pos_label should be explicitly given.\n \n     probas_pred : array, shape = [n_samples]\n         Estimated probabilities or decision function.\n \n     pos_label : int or str, default=None\n-        The label of the positive class\n+        The label of the positive class.\n+        When ``pos_label=None``, if y_true is in {-1, 1} or {0, 1},\n+        ``pos_label`` is set to 1, otherwise an error will be raised.\n \n     sample_weight : array-like of shape = [n_samples], optional\n         Sample weights.\n@@ -552,7 +555,9 @@ def roc_curve(y_true, y_score, pos_label=None, sample_weight=None,\n         (as returned by \"decision_function\" on some classifiers).\n \n     pos_label : int or str, default=None\n-        Label considered as positive and others are considered negative.\n+        The label of the positive class.\n+        When ``pos_label=None``, if y_true is in {-1, 1} or {0, 1},\n+        ``pos_label`` is set to 1, otherwise an error will be raised.\n \n     sample_weight : array-like of shape = [n_samples], optional\n         Sample weights.\n",
  "test_patch": "diff --git a/sklearn/metrics/tests/test_classification.py b/sklearn/metrics/tests/test_classification.py\n--- a/sklearn/metrics/tests/test_classification.py\n+++ b/sklearn/metrics/tests/test_classification.py\n@@ -1997,9 +1997,23 @@ def test_brier_score_loss():\n     assert_raises(ValueError, brier_score_loss, y_true, y_pred[1:])\n     assert_raises(ValueError, brier_score_loss, y_true, y_pred + 1.)\n     assert_raises(ValueError, brier_score_loss, y_true, y_pred - 1.)\n-    # calculate even if only single class in y_true (#6980)\n-    assert_almost_equal(brier_score_loss([0], [0.5]), 0.25)\n-    assert_almost_equal(brier_score_loss([1], [0.5]), 0.25)\n+\n+    # ensure to raise an error for multiclass y_true\n+    y_true = np.array([0, 1, 2, 0])\n+    y_pred = np.array([0.8, 0.6, 0.4, 0.2])\n+    error_message = (\"Only binary classification is supported. Labels \"\n+                     \"in y_true: {}\".format(np.array([0, 1, 2])))\n+    assert_raise_message(ValueError, error_message, brier_score_loss,\n+                         y_true, y_pred)\n+\n+    # calculate correctly when there's only one class in y_true\n+    assert_almost_equal(brier_score_loss([-1], [0.4]), 0.16)\n+    assert_almost_equal(brier_score_loss([0], [0.4]), 0.16)\n+    assert_almost_equal(brier_score_loss([1], [0.4]), 0.36)\n+    assert_almost_equal(\n+        brier_score_loss(['foo'], [0.4], pos_label='bar'), 0.16)\n+    assert_almost_equal(\n+        brier_score_loss(['foo'], [0.4], pos_label='foo'), 0.36)\n \n \n def test_balanced_accuracy_score_unseen():\n",
  "problem_statement": "brier_score_loss error\nHello. I think I found a mistake in brier_score_loss. \r\nWhen you have a target = 1 and a prediction = 1 too, brier_score_loss should be 0 (best result), but it gives 1. Why is it happening? Because _check_binary_probabilistic_predictions gets target with only one class and convert it to 0. And metric calculates for target = 0 and prediction = 1. The same problem for target = 1 and prediction = 0. brier_score_loss is 0 (the best result), but it should be 1. \r\n\r\nExamples:\r\nApprox = [0, 0, 0, 0]\r\nTarget = [1, 1, 1, 1]\r\nWeight = [1, 1, 1, 1]\r\nbrier_score_loss(Target, Approx, sample_weight=Weight) \r\nresult is 0\r\n\r\nApprox = [1, 1, 1, 1]\r\nTarget = [1, 1, 1, 1]\r\nWeight = [1, 1, 1, 1]\r\nbrier_score_loss(Target, Approx, sample_weight=Weight) \r\nresult is 1\r\n\r\nMaybe we should fix it? Thank you.\n",
  "hints_text": "Thanks. Duplicate issue of #9300, #8459\nSorry, just amended those links. #9301 is likely to be merged for next release\nThank you",
  "created_at": "2019-04-12T14:38:20Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/metrics/tests/test_classification.py::test_brier_score_loss\"]",
  "PASS_TO_PASS": "[\"sklearn/metrics/tests/test_classification.py::test_classification_report_dictionary_output\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_accuracy_score_subset_accuracy\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_binary_single_class\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_extra_labels\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_ignored_labels\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_score_non_binary_class\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_duplicate_values\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_tied_values\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_fscore_support_errors\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_unused_pos_label\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_binary\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_binary\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_multilabel\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_errors\", \"sklearn/metrics/tests/test_classification.py::test_cohen_kappa\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_nan\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_numpy_corrcoef\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_jurman\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[100]\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[10000]\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[1000000]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[samples]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[micro]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[macro]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[weighted]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[None]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary_averaged\", \"sklearn/metrics/tests/test_classification.py::test_zero_precision_recall\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_multiclass_subset_labels\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_dtype\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_balanced\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_label_detection\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_digits\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_string_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_unicode_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_long_string_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_labels_target_names_unequal_length\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_no_labels_target_names_unequal_length\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_classification_report\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_zero_one_loss_subset\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_hamming_loss\", \"sklearn/metrics/tests/test_classification.py::test_jaccard_score_validation\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_jaccard_score\", \"sklearn/metrics/tests/test_classification.py::test_multiclass_jaccard_score\", \"sklearn/metrics/tests/test_classification.py::test_average_binary_jaccard_score\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_2\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[macro-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[micro-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[weighted-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[samples-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_average_none\", \"sklearn/metrics/tests/test_classification.py::test_prf_warnings\", \"sklearn/metrics/tests/test_classification.py::test_recall_warnings\", \"sklearn/metrics/tests/test_classification.py::test_precision_warnings\", \"sklearn/metrics/tests/test_classification.py::test_fscore_warnings\", \"sklearn/metrics/tests/test_classification.py::test_prf_average_binary_data_non_binary\", \"sklearn/metrics/tests/test_classification.py::test__check_targets\", \"sklearn/metrics/tests/test_classification.py::test__check_targets_multiclass_with_both_y_true_and_y_pred_binary\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_binary\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_missing_labels_with_labels_none\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_with_missing_labels\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_invariance_lists\", \"sklearn/metrics/tests/test_classification.py::test_log_loss\", \"sklearn/metrics/tests/test_classification.py::test_log_loss_pandas_input\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score_unseen\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true0-y_pred0]\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true1-y_pred1]\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true2-y_pred2]\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_jaccard_similarity_score_deprecation\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.997727",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}