{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-24455",
  "base_commit": "5ee2ecd575818f578961bec7d12aa626d4e78ed5",
  "patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -3219,17 +3219,15 @@ def is_cyclic(self):\n                 self._is_abelian = True\n                 return True\n \n-        for p in factors:\n-            pgens = []\n-            for g in self.generators:\n-                pgens.append(g**p)\n-            if self.index(self.subgroup(pgens)) != p:\n-                self._is_cyclic = False\n-                return False\n+        if not self.is_abelian:\n+            self._is_cyclic = False\n+            return False\n \n-        self._is_cyclic = True\n-        self._is_abelian = True\n-        return True\n+        self._is_cyclic = all(\n+            any(g**(order//p) != self.identity for g in self.generators)\n+            for p, e in factors.items() if e > 1\n+        )\n+        return self._is_cyclic\n \n     @property\n     def is_dihedral(self):\n",
  "test_patch": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -1046,6 +1046,25 @@ def test_cyclic():\n     assert G.is_cyclic\n     assert G._is_abelian\n \n+    # Non-abelian and therefore not cyclic\n+    G = PermutationGroup(*SymmetricGroup(3).generators)\n+    assert G.is_cyclic is False\n+\n+    # Abelian and cyclic\n+    G = PermutationGroup(\n+        Permutation(0, 1, 2, 3),\n+        Permutation(4, 5, 6)\n+    )\n+    assert G.is_cyclic\n+\n+    # Abelian but not cyclic\n+    G = PermutationGroup(\n+        Permutation(0, 1),\n+        Permutation(2, 3),\n+        Permutation(4, 5, 6)\n+    )\n+    assert G.is_cyclic is False\n+\n \n def test_dihedral():\n     G = SymmetricGroup(2)\n",
  "problem_statement": "`PermutationGroup.is_cyclic` incorrect on \"unnamed\" S3\nIf we construct a group `G` that's isomorphic to S3, but don't use the `SymmetricGroup` function to form it, then `G.is_cyclic` is coming up `True`.\r\n\r\n```python\r\nIn [1]: from sympy.combinatorics import *\r\n\r\nIn [2]: S3 = SymmetricGroup(3)\r\n\r\nIn [3]: G = PermutationGroup(*S3.generators)\r\n\r\nIn [4]: G.order()\r\nOut[4]: 6\r\n\r\nIn [5]: ' '.join(str(g.order()) for g in G.elements)\r\nOut[5]: '3 3 2 2 1 2'\r\n\r\nIn [6]: G.is_cyclic\r\nOut[6]: True\r\n```\r\n\r\nI think the `is_cyclic` property method is fine up until the end. It ends like this:\r\n\r\nhttps://github.com/sympy/sympy/blob/d505ea97427cdd03d83dda553c9b4481c812fb54/sympy/combinatorics/perm_groups.py#L3222-L3232\r\n\r\nLet's talk about what's happening here. First, let $G$ be the group, given by generators $\\langle g_i \\rangle$. For any prime $p$ dividing the order of the group, let $H_p$ be the subgroup $\\langle g_i^p \\rangle$ generated by the $p$ th powers of the given generators.\r\n\r\nThe for-loop is saying, \"If $G$ is cyclic, then for all $p$ dividing the order of the group, $[G : H_p] = p$,\" which I think is true. Fine.\r\n\r\nBut the last three lines, after the for-loop, want to say the converse is also true, which it must not be, since $S_3 = \\langle (012), (01) \\rangle$ appears to be a counterexample.\r\n\r\nThe question is whether there's a good way to save this. In other words, there is always the last ditch, brute force method, where we just look through all the elements of the group for a generator:\r\n\r\n```python\r\nn = self.order()\r\nfor g in self.elements:\r\n  if g.order() == n:\r\n    self._is_cyclic = True\r\n    return True\r\nself._is_cyclic = False\r\nreturn False\r\n```\r\nbut it seems like we *almost* had a better method here, and it would be nice if we could patch it. I'm wondering if anyone whose group theory is not as rusty as mine might know a way.\r\n\r\nIf $G^p$ is the subgroup of $G$ consisting of all products of $p$ th powers of elements of $G$, it seems like the theorem we wanted might have been true with $G^p$ in place of $H_p$? I don't know.\r\n\r\nBut it does seem like the discrepancy between $G^p$ and $H_p$ might be the issue here. In the case of $S_3$ presented as $\\langle (012), (01) \\rangle$, $H_3$ is just $\\lbrace e, (01) \\rbrace$ which does have index $3$ (hence the failure), whereas $G^3 = G$ and has index $1$, and the test would not have failed.\n",
  "hints_text": "I think that it is best to start by checking that the group is abelian (by calling `is_abelian`, not just looking at `_is_abelian`).\r\n\r\nA finite abelian group G is the product of its p-components G(p) for primes p dividing the order n of G. The subgroup G(p) consists of those elements of G whose order is a power of p. Its order is the highest power $p^e$ of p dividing n and it is generated by the m'th powers of the generators of G where $m = n/p^e$. It is cyclic if and only if at least one of its generators has order $p^e$.\r\n\r\nA finite abelian group G is cyclic if and only if all of its p-components are cyclic. The \"only if\" part is clear as all subgroups of a cyclic group are cyclic. The inverse implication follows as the product of cyclic groups of mutually prime order is cyclic. For example, consider two cyclic groups G and H of orders m and n, and generated by a and b, respectively. Then the elements of GxH are the products $a^e b^f$, where $e = 0,\\ldots, m-1$ and $f = 0,\\ldots, n-1$. If m and n are relatively prime, it follows from the Chinese Remainder Theorem that, for each pair (e, f), there is a unique $k = 0,\\ldots, mn-1$ such that $k \\equiv e \\pmod{m}$ and $k \\equiv f \\pmod{n}$. Then $a^k = a^e$ and $b^k = b^f$, and therefore $(ab)^k = a^k b^k = a^e b^f$; hence GxH is a cyclic group of order mn generated by ab.\nOkay, so if none of the earlier tests succeeds, we'll determine whether the group actually is abelian or not. If not, it's not cyclic either. If so, we find the Sylow p-subgroups G(p), and apply the fundamental theorem of finite abelian groups. Sounds like a plan. I didn't realize we could pass from generators of G to generators of G(p) in the way you describe (or think of using G(p)).\r\n\r\nSo for each $p$ dividing $n$, we want to know whether, raising all generators of $G$ to the $m$ power, we would get an element of order $p^e$. I think this is equivalent to asking whether $p^e$ divides the order of some generator. This is because, if generator $g$ has order $r$, we can write $r = p^k \\cdot (m, r)$ for some $0 \\leq k \\leq e$. But the order of $g^m$ is $r/(m, r) = p^k$.\r\n\r\nSo what would be a good way to implement this. At this point in the procedure, we've already factored $n$, so we have all the $(p, e)$ pairs. I guess next we compute the order of each $g$ generating $G$. Then for each $(p, e)$ we reduce the orders of the $g$'s mod $p^e$, looking for a 0. In other words, I'm thinking this is better than factoring the order of each $g$.\nIt is not necessary to explicitly compute the generators of G(p). It looks like it would suffice to see if any $n/p$'th power of a generator of G would be non-trivial.",
  "created_at": "2022-12-31T20:17:57Z",
  "version": "1.12",
  "FAIL_TO_PASS": "[\"test_cyclic\"]",
  "PASS_TO_PASS": "[\"test_has\", \"test_generate\", \"test_order\", \"test_equality\", \"test_stabilizer\", \"test_center\", \"test_centralizer\", \"test_coset_rank\", \"test_coset_factor\", \"test_orbits\", \"test_is_normal\", \"test_eq\", \"test_derived_subgroup\", \"test_is_solvable\", \"test_rubik1\", \"test_direct_product\", \"test_orbit_rep\", \"test_schreier_vector\", \"test_random_pr\", \"test_is_alt_sym\", \"test_minimal_block\", \"test_minimal_blocks\", \"test_max_div\", \"test_is_primitive\", \"test_random_stab\", \"test_transitivity_degree\", \"test_schreier_sims_random\", \"test_baseswap\", \"test_schreier_sims_incremental\", \"test_subgroup_search\", \"test_normal_closure\", \"test_derived_series\", \"test_lower_central_series\", \"test_commutator\", \"test_is_nilpotent\", \"test_is_trivial\", \"test_pointwise_stabilizer\", \"test_make_perm\", \"test_elements\", \"test_is_group\", \"test_PermutationGroup\", \"test_coset_transvesal\", \"test_coset_table\", \"test_subgroup\", \"test_generator_product\", \"test_sylow_subgroup\", \"test_polycyclic\", \"test_elementary\", \"test_perfect\", \"test_index\", \"test_dihedral\", \"test_abelian_invariants\", \"test_composition_series\", \"test_is_symmetric\", \"test_conjugacy_class\", \"test_conjugacy_classes\", \"test_coset_class\"]",
  "environment_setup_commit": "c6cb7c5602fa48034ab1bd43c2347a7e8488f12e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.156735",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}