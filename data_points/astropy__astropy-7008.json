{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-7008",
  "base_commit": "264d967708a3dcdb2bce0ed9f9ca3391c40f3ff3",
  "patch": "diff --git a/astropy/constants/__init__.py b/astropy/constants/__init__.py\n--- a/astropy/constants/__init__.py\n+++ b/astropy/constants/__init__.py\n@@ -13,8 +13,8 @@\n     <Quantity 0.510998927603161 MeV>\n \n \"\"\"\n-\n-import itertools\n+import inspect\n+from contextlib import contextmanager\n \n # Hack to make circular imports with units work\n try:\n@@ -23,10 +23,11 @@\n except ImportError:\n     pass\n \n-from .constant import Constant, EMConstant\n-from . import si\n-from . import cgs\n-from . import codata2014, iau2015\n+from .constant import Constant, EMConstant  # noqa\n+from . import si  # noqa\n+from . import cgs  # noqa\n+from . import codata2014, iau2015  # noqa\n+from . import utils as _utils\n \n # for updating the constants module docstring\n _lines = [\n@@ -36,19 +37,65 @@\n     '========== ============== ================ =========================',\n ]\n \n-for _nm, _c in itertools.chain(sorted(vars(codata2014).items()),\n-                               sorted(vars(iau2015).items())):\n-    if isinstance(_c, Constant) and _c.abbrev not in locals():\n-        locals()[_c.abbrev] = _c.__class__(_c.abbrev, _c.name, _c.value,\n-                                           _c._unit_string, _c.uncertainty,\n-                                           _c.reference)\n-\n-        _lines.append('{0:^10} {1:^14.9g} {2:^16} {3}'.format(\n-            _c.abbrev, _c.value, _c._unit_string, _c.name))\n+# NOTE: Update this when default changes.\n+_utils._set_c(codata2014, iau2015, inspect.getmodule(inspect.currentframe()),\n+              not_in_module_only=True, doclines=_lines, set_class=True)\n \n _lines.append(_lines[1])\n \n if __doc__ is not None:\n     __doc__ += '\\n'.join(_lines)\n \n-del _lines, _nm, _c\n+\n+# TODO: Re-implement in a way that is more consistent with astropy.units.\n+#       See https://github.com/astropy/astropy/pull/7008 discussions.\n+@contextmanager\n+def set_enabled_constants(modname):\n+    \"\"\"\n+    Context manager to temporarily set values in the ``constants``\n+    namespace to an older version.\n+    See :ref:`astropy-constants-prior` for usage.\n+\n+    Parameters\n+    ----------\n+    modname : {'astropyconst13'}\n+        Name of the module containing an older version.\n+\n+    \"\"\"\n+\n+    # Re-import here because these were deleted from namespace on init.\n+    import inspect\n+    import warnings\n+    from . import utils as _utils\n+\n+    # NOTE: Update this when default changes.\n+    if modname == 'astropyconst13':\n+        from .astropyconst13 import codata2010 as codata\n+        from .astropyconst13 import iau2012 as iaudata\n+    else:\n+        raise ValueError(\n+            'Context manager does not currently handle {}'.format(modname))\n+\n+    module = inspect.getmodule(inspect.currentframe())\n+\n+    # Ignore warnings about \"Constant xxx already has a definition...\"\n+    with warnings.catch_warnings():\n+        warnings.simplefilter('ignore')\n+        _utils._set_c(codata, iaudata, module,\n+                      not_in_module_only=False, set_class=True)\n+\n+    try:\n+        yield\n+    finally:\n+        with warnings.catch_warnings():\n+            warnings.simplefilter('ignore')\n+            # NOTE: Update this when default changes.\n+            _utils._set_c(codata2014, iau2015, module,\n+                          not_in_module_only=False, set_class=True)\n+\n+\n+# Clean up namespace\n+del inspect\n+del contextmanager\n+del _utils\n+del _lines\ndiff --git a/astropy/constants/astropyconst13.py b/astropy/constants/astropyconst13.py\n--- a/astropy/constants/astropyconst13.py\n+++ b/astropy/constants/astropyconst13.py\n@@ -4,15 +4,12 @@\n See :mod:`astropy.constants` for a complete listing of constants\n defined in Astropy.\n \"\"\"\n-\n-\n-\n-import itertools\n-\n-from .constant import Constant\n+import inspect\n+from . import utils as _utils\n from . import codata2010, iau2012\n \n-for _nm, _c in itertools.chain(sorted(vars(codata2010).items()),\n-                               sorted(vars(iau2012).items())):\n-    if (isinstance(_c, Constant) and _c.abbrev not in locals()):\n-        locals()[_c.abbrev] = _c\n+_utils._set_c(codata2010, iau2012, inspect.getmodule(inspect.currentframe()))\n+\n+# Clean up namespace\n+del inspect\n+del _utils\ndiff --git a/astropy/constants/astropyconst20.py b/astropy/constants/astropyconst20.py\n--- a/astropy/constants/astropyconst20.py\n+++ b/astropy/constants/astropyconst20.py\n@@ -3,15 +3,12 @@\n Astronomical and physics constants for Astropy v2.0.  See :mod:`astropy.constants`\n for a complete listing of constants defined in Astropy.\n \"\"\"\n-\n-\n-\n-import itertools\n-\n-from .constant import Constant\n+import inspect\n+from . import utils as _utils\n from . import codata2014, iau2015\n \n-for _nm, _c in itertools.chain(sorted(vars(codata2014).items()),\n-                               sorted(vars(iau2015).items())):\n-    if (isinstance(_c, Constant) and _c.abbrev not in locals()):\n-        locals()[_c.abbrev] = _c\n+_utils._set_c(codata2014, iau2015, inspect.getmodule(inspect.currentframe()))\n+\n+# Clean up namespace\n+del inspect\n+del _utils\ndiff --git a/astropy/constants/utils.py b/astropy/constants/utils.py\nnew file mode 100644\n--- /dev/null\n+++ b/astropy/constants/utils.py\n@@ -0,0 +1,80 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\"\"\"Utility functions for ``constants`` sub-package.\"\"\"\n+import itertools\n+\n+__all__ = []\n+\n+\n+def _get_c(codata, iaudata, module, not_in_module_only=True):\n+    \"\"\"\n+    Generator to return a Constant object.\n+\n+    Parameters\n+    ----------\n+    codata, iaudata : obj\n+        Modules containing CODATA and IAU constants of interest.\n+\n+    module : obj\n+        Namespace module of interest.\n+\n+    not_in_module_only : bool\n+        If ``True``, ignore constants that are already in the\n+        namespace of ``module``.\n+\n+    Returns\n+    -------\n+    _c : Constant\n+        Constant object to process.\n+\n+    \"\"\"\n+    from .constant import Constant\n+\n+    for _nm, _c in itertools.chain(sorted(vars(codata).items()),\n+                                   sorted(vars(iaudata).items())):\n+        if not isinstance(_c, Constant):\n+            continue\n+        elif (not not_in_module_only) or (_c.abbrev not in module.__dict__):\n+            yield _c\n+\n+\n+def _set_c(codata, iaudata, module, not_in_module_only=True, doclines=None,\n+           set_class=False):\n+    \"\"\"\n+    Set constants in a given module namespace.\n+\n+    Parameters\n+    ----------\n+    codata, iaudata : obj\n+        Modules containing CODATA and IAU constants of interest.\n+\n+    module : obj\n+        Namespace module to modify with the given ``codata`` and ``iaudata``.\n+\n+    not_in_module_only : bool\n+        If ``True``, constants that are already in the namespace\n+        of ``module`` will not be modified.\n+\n+    doclines : list or `None`\n+        If a list is given, this list will be modified in-place to include\n+        documentation of modified constants. This can be used to update\n+        docstring of ``module``.\n+\n+    set_class : bool\n+        Namespace of ``module`` is populated with ``_c.__class__``\n+        instead of just ``_c`` from :func:`_get_c`.\n+\n+    \"\"\"\n+    for _c in _get_c(codata, iaudata, module,\n+                     not_in_module_only=not_in_module_only):\n+        if set_class:\n+            value = _c.__class__(_c.abbrev, _c.name, _c.value,\n+                                 _c._unit_string, _c.uncertainty,\n+                                 _c.reference)\n+        else:\n+            value = _c\n+\n+        setattr(module, _c.abbrev, value)\n+\n+        if doclines is not None:\n+            doclines.append('{0:^10} {1:^14.9g} {2:^16} {3}'.format(\n+                _c.abbrev, _c.value, _c._unit_string, _c.name))\n",
  "test_patch": "diff --git a/astropy/constants/tests/test_prior_version.py b/astropy/constants/tests/test_prior_version.py\n--- a/astropy/constants/tests/test_prior_version.py\n+++ b/astropy/constants/tests/test_prior_version.py\n@@ -1,7 +1,5 @@\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n-\n-\n import copy\n \n import pytest\n@@ -155,3 +153,16 @@ def test_view():\n \n     c4 = Q(c, subok=True, copy=False)\n     assert c4 is c\n+\n+\n+def test_context_manager():\n+    from ... import constants as const\n+\n+    with const.set_enabled_constants('astropyconst13'):\n+        assert const.h.value == 6.62606957e-34  # CODATA2010\n+\n+    assert const.h.value == 6.626070040e-34  # CODATA2014\n+\n+    with pytest.raises(ValueError):\n+        with const.set_enabled_constants('notreal'):\n+            const.h\n",
  "problem_statement": "Context manager for constant versions\nFor some use cases it would be helpful to have a context manager to set the version set of the constants. E.g., something like \r\n```\r\nwith constants_set(astropyconst13):\r\n    ... code goes here ...\r\n````\n",
  "hints_text": "I am trying to take a stab at this but no promises.",
  "created_at": "2017-12-19T20:24:08Z",
  "version": "1.3",
  "FAIL_TO_PASS": "[\"astropy/constants/tests/test_prior_version.py::test_context_manager\"]",
  "PASS_TO_PASS": "[\"astropy/constants/tests/test_prior_version.py::test_c\", \"astropy/constants/tests/test_prior_version.py::test_h\", \"astropy/constants/tests/test_prior_version.py::test_e\", \"astropy/constants/tests/test_prior_version.py::test_g0\", \"astropy/constants/tests/test_prior_version.py::test_b_wien\", \"astropy/constants/tests/test_prior_version.py::test_unit\", \"astropy/constants/tests/test_prior_version.py::test_copy\", \"astropy/constants/tests/test_prior_version.py::test_view\"]",
  "environment_setup_commit": "848c8fa21332abd66b44efe3cb48b72377fb32cc",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.544665",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}