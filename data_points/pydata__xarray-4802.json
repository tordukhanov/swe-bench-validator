{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-4802",
  "base_commit": "84df75d366edaaa0af172047145a3409cac9bb3a",
  "patch": "diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py\n--- a/xarray/coding/variables.py\n+++ b/xarray/coding/variables.py\n@@ -270,9 +270,9 @@ def decode(self, variable, name=None):\n             add_offset = pop_to(attrs, encoding, \"add_offset\", name=name)\n             dtype = _choose_float_dtype(data.dtype, \"add_offset\" in attrs)\n             if np.ndim(scale_factor) > 0:\n-                scale_factor = scale_factor.item()\n+                scale_factor = np.asarray(scale_factor).item()\n             if np.ndim(add_offset) > 0:\n-                add_offset = add_offset.item()\n+                add_offset = np.asarray(add_offset).item()\n             transform = partial(\n                 _scale_offset_decoding,\n                 scale_factor=scale_factor,\n",
  "test_patch": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -8,7 +8,7 @@\n from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n-from . import assert_equal, assert_identical, requires_dask\n+from . import assert_allclose, assert_equal, assert_identical, requires_dask\n \n with suppress(ImportError):\n     import dask.array as da\n@@ -105,3 +105,15 @@ def test_scaling_converts_to_float32(dtype):\n     roundtripped = coder.decode(encoded)\n     assert_identical(original, roundtripped)\n     assert roundtripped.dtype == np.float32\n+\n+\n+@pytest.mark.parametrize(\"scale_factor\", (10, [10]))\n+@pytest.mark.parametrize(\"add_offset\", (0.1, [0.1]))\n+def test_scaling_offset_as_list(scale_factor, add_offset):\n+    # test for #4631\n+    encoding = dict(scale_factor=scale_factor, add_offset=add_offset)\n+    original = xr.Variable((\"x\",), np.arange(10.0), encoding=encoding)\n+    coder = variables.CFScaleOffsetCoder()\n+    encoded = coder.encode(original)\n+    roundtripped = coder.decode(encoded)\n+    assert_allclose(original, roundtripped)\n",
  "problem_statement": "Decode_cf fails when scale_factor is a length-1 list\nSome datasets I work with have `scale_factor` and `add_offset` encoded as length-1 lists. The following code worked as of Xarray 0.16.1\r\n\r\n```python\r\nimport xarray as xr\r\nds = xr.DataArray([0, 1, 2], name='foo',\r\n                  attrs={'scale_factor': [0.01],\r\n                         'add_offset': [1.0]}).to_dataset()\r\nxr.decode_cf(ds)\r\n```\r\n\r\nIn 0.16.2 (just released) and current master, it fails with this error\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-2-a0b01d6a314b> in <module>\r\n      2                   attrs={'scale_factor': [0.01],\r\n      3                          'add_offset': [1.0]}).to_dataset()\r\n----> 4 xr.decode_cf(ds)\r\n\r\n~/Code/xarray/xarray/conventions.py in decode_cf(obj, concat_characters, mask_and_scale, decode_times, decode_coords, drop_variables, use_cftime, decode_timedelta)\r\n    587         raise TypeError(\"can only decode Dataset or DataStore objects\")\r\n    588 \r\n--> 589     vars, attrs, coord_names = decode_cf_variables(\r\n    590         vars,\r\n    591         attrs,\r\n\r\n~/Code/xarray/xarray/conventions.py in decode_cf_variables(variables, attributes, concat_characters, mask_and_scale, decode_times, decode_coords, drop_variables, use_cftime, decode_timedelta)\r\n    490             and stackable(v.dims[-1])\r\n    491         )\r\n--> 492         new_vars[k] = decode_cf_variable(\r\n    493             k,\r\n    494             v,\r\n\r\n~/Code/xarray/xarray/conventions.py in decode_cf_variable(name, var, concat_characters, mask_and_scale, decode_times, decode_endianness, stack_char_dim, use_cftime, decode_timedelta)\r\n    333             variables.CFScaleOffsetCoder(),\r\n    334         ]:\r\n--> 335             var = coder.decode(var, name=name)\r\n    336 \r\n    337     if decode_timedelta:\r\n\r\n~/Code/xarray/xarray/coding/variables.py in decode(self, variable, name)\r\n    271             dtype = _choose_float_dtype(data.dtype, \"add_offset\" in attrs)\r\n    272             if np.ndim(scale_factor) > 0:\r\n--> 273                 scale_factor = scale_factor.item()\r\n    274             if np.ndim(add_offset) > 0:\r\n    275                 add_offset = add_offset.item()\r\n\r\nAttributeError: 'list' object has no attribute 'item'\r\n```\r\n\r\nI'm very confused, because this feels quite similar to #4471, and I thought it was resolved #4485.\r\nHowever, the behavior is different with `'scale_factor': np.array([0.01])`. That works fine--no error.\r\n\r\nHow might I end up with a dataset with `scale_factor` as a python list? It happens when I open a netcdf file using the `h5netcdf` engine (documented by @gerritholl in https://github.com/pydata/xarray/issues/4471#issuecomment-702018925) and then write it to zarr. The numpy array gets encoded as a list in the zarr json metadata. üôÉ \r\n\r\nThis problem would go away if we could resolve the discrepancies between the two engines' treatment of scalar attributes.\r\n\r\n\n",
  "hints_text": "I guess we need `np.asarray(scale_factor).item()`\nBut what did we do before?\nI think it just did `np.array([1, 2, 3.]) * [5]` numpy coverts the `[5]` to an array with one element, which is why it worked:\r\n\r\n```python\r\nxr.coding.variables._scale_offset_decoding(np.array([1, 2, 3.]), [5], None, np.float)\r\n\r\n```\r\n\r\nhttps://github.com/pydata/xarray/blob/49d03d246ce657e0cd3be0582334a1a023c4b374/xarray/coding/variables.py#L217\nOk then I am üëç  on @dcherian's solution.",
  "created_at": "2021-01-12T22:50:26Z",
  "version": "0.12",
  "FAIL_TO_PASS": "[\"xarray/tests/test_coding.py::test_scaling_offset_as_list[0.1-scale_factor1]\", \"xarray/tests/test_coding.py::test_scaling_offset_as_list[add_offset1-10]\", \"xarray/tests/test_coding.py::test_scaling_offset_as_list[add_offset1-scale_factor1]\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_coding.py::test_CFMaskCoder_decode\", \"xarray/tests/test_coding.py::test_CFMaskCoder_encode_missing_fill_values_conflict[numeric-with-dtype]\", \"xarray/tests/test_coding.py::test_CFMaskCoder_encode_missing_fill_values_conflict[numeric-without-dtype]\", \"xarray/tests/test_coding.py::test_CFMaskCoder_encode_missing_fill_values_conflict[times-with-dtype]\", \"xarray/tests/test_coding.py::test_CFMaskCoder_missing_value\", \"xarray/tests/test_coding.py::test_CFMaskCoder_decode_dask\", \"xarray/tests/test_coding.py::test_coder_roundtrip\", \"xarray/tests/test_coding.py::test_scaling_converts_to_float32[u1]\", \"xarray/tests/test_coding.py::test_scaling_converts_to_float32[u2]\", \"xarray/tests/test_coding.py::test_scaling_converts_to_float32[i1]\", \"xarray/tests/test_coding.py::test_scaling_converts_to_float32[i2]\", \"xarray/tests/test_coding.py::test_scaling_converts_to_float32[f2]\", \"xarray/tests/test_coding.py::test_scaling_converts_to_float32[f4]\", \"xarray/tests/test_coding.py::test_scaling_offset_as_list[0.1-10]\"]",
  "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.884216",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}