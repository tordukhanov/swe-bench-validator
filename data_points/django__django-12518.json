{
  "repo": "django/django",
  "instance_id": "django__django-12518",
  "base_commit": "370628673b98ada302c3930865c4bfde2d8ed5a1",
  "patch": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -1,8 +1,7 @@\n from django.apps import apps\n from django.core.management.base import BaseCommand, CommandError\n from django.db import DEFAULT_DB_ALIAS, connections\n-from django.db.migrations.executor import MigrationExecutor\n-from django.db.migrations.loader import AmbiguityError\n+from django.db.migrations.loader import AmbiguityError, MigrationLoader\n \n \n class Command(BaseCommand):\n@@ -33,8 +32,9 @@ def handle(self, *args, **options):\n         # Get the database we're operating from\n         connection = connections[options['database']]\n \n-        # Load up an executor to get all the migration data\n-        executor = MigrationExecutor(connection)\n+        # Load up an loader to get all the migration data, but don't replace\n+        # migrations.\n+        loader = MigrationLoader(connection, replace_migrations=False)\n \n         # Resolve command-line arguments into a migration\n         app_label, migration_name = options['app_label'], options['migration_name']\n@@ -43,10 +43,10 @@ def handle(self, *args, **options):\n             apps.get_app_config(app_label)\n         except LookupError as err:\n             raise CommandError(str(err))\n-        if app_label not in executor.loader.migrated_apps:\n+        if app_label not in loader.migrated_apps:\n             raise CommandError(\"App '%s' does not have migrations\" % app_label)\n         try:\n-            migration = executor.loader.get_migration_by_prefix(app_label, migration_name)\n+            migration = loader.get_migration_by_prefix(app_label, migration_name)\n         except AmbiguityError:\n             raise CommandError(\"More than one migration matches '%s' in app '%s'. Please be more specific.\" % (\n                 migration_name, app_label))\n@@ -61,8 +61,8 @@ def handle(self, *args, **options):\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\n-        plan = [(executor.loader.graph.nodes[target], options['backwards'])]\n-        sql_statements = executor.collect_sql(plan)\n+        plan = [(loader.graph.nodes[target], options['backwards'])]\n+        sql_statements = loader.collect_sql(plan)\n         if not sql_statements and options['verbosity'] >= 1:\n             self.stderr.write('No operations found.')\n         return '\\n'.join(sql_statements)\ndiff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -210,24 +210,6 @@ def _migrate_all_backwards(self, plan, full_plan, fake):\n \n         return state\n \n-    def collect_sql(self, plan):\n-        \"\"\"\n-        Take a migration plan and return a list of collected SQL statements\n-        that represent the best-efforts version of that plan.\n-        \"\"\"\n-        statements = []\n-        state = None\n-        for migration, backwards in plan:\n-            with self.connection.schema_editor(collect_sql=True, atomic=migration.atomic) as schema_editor:\n-                if state is None:\n-                    state = self.loader.project_state((migration.app_label, migration.name), at_end=False)\n-                if not backwards:\n-                    state = migration.apply(state, schema_editor, collect_sql=True)\n-                else:\n-                    state = migration.unapply(state, schema_editor, collect_sql=True)\n-            statements.extend(schema_editor.collected_sql)\n-        return statements\n-\n     def apply_migration(self, state, migration, fake=False, fake_initial=False):\n         \"\"\"Run a migration forwards.\"\"\"\n         migration_recorded = False\ndiff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -40,11 +40,15 @@ class MigrationLoader:\n     in memory.\n     \"\"\"\n \n-    def __init__(self, connection, load=True, ignore_no_migrations=False):\n+    def __init__(\n+        self, connection, load=True, ignore_no_migrations=False,\n+        replace_migrations=True,\n+    ):\n         self.connection = connection\n         self.disk_migrations = None\n         self.applied_migrations = None\n         self.ignore_no_migrations = ignore_no_migrations\n+        self.replace_migrations = replace_migrations\n         if load:\n             self.build_graph()\n \n@@ -223,24 +227,27 @@ def build_graph(self):\n         # Add external dependencies now that the internal ones have been resolved.\n         for key, migration in self.disk_migrations.items():\n             self.add_external_dependencies(key, migration)\n-        # Carry out replacements where possible.\n-        for key, migration in self.replacements.items():\n-            # Get applied status of each of this migration's replacement targets.\n-            applied_statuses = [(target in self.applied_migrations) for target in migration.replaces]\n-            # Ensure the replacing migration is only marked as applied if all of\n-            # its replacement targets are.\n-            if all(applied_statuses):\n-                self.applied_migrations[key] = migration\n-            else:\n-                self.applied_migrations.pop(key, None)\n-            # A replacing migration can be used if either all or none of its\n-            # replacement targets have been applied.\n-            if all(applied_statuses) or (not any(applied_statuses)):\n-                self.graph.remove_replaced_nodes(key, migration.replaces)\n-            else:\n-                # This replacing migration cannot be used because it is partially applied.\n-                # Remove it from the graph and remap dependencies to it (#25945).\n-                self.graph.remove_replacement_node(key, migration.replaces)\n+        # Carry out replacements where possible and if enabled.\n+        if self.replace_migrations:\n+            for key, migration in self.replacements.items():\n+                # Get applied status of each of this migration's replacement\n+                # targets.\n+                applied_statuses = [(target in self.applied_migrations) for target in migration.replaces]\n+                # The replacing migration is only marked as applied if all of\n+                # its replacement targets are.\n+                if all(applied_statuses):\n+                    self.applied_migrations[key] = migration\n+                else:\n+                    self.applied_migrations.pop(key, None)\n+                # A replacing migration can be used if either all or none of\n+                # its replacement targets have been applied.\n+                if all(applied_statuses) or (not any(applied_statuses)):\n+                    self.graph.remove_replaced_nodes(key, migration.replaces)\n+                else:\n+                    # This replacing migration cannot be used because it is\n+                    # partially applied. Remove it from the graph and remap\n+                    # dependencies to it (#25945).\n+                    self.graph.remove_replacement_node(key, migration.replaces)\n         # Ensure the graph is consistent.\n         try:\n             self.graph.validate_consistency()\n@@ -320,3 +327,21 @@ def project_state(self, nodes=None, at_end=True):\n         See graph.make_state() for the meaning of \"nodes\" and \"at_end\".\n         \"\"\"\n         return self.graph.make_state(nodes=nodes, at_end=at_end, real_apps=list(self.unmigrated_apps))\n+\n+    def collect_sql(self, plan):\n+        \"\"\"\n+        Take a migration plan and return a list of collected SQL statements\n+        that represent the best-efforts version of that plan.\n+        \"\"\"\n+        statements = []\n+        state = None\n+        for migration, backwards in plan:\n+            with self.connection.schema_editor(collect_sql=True, atomic=migration.atomic) as schema_editor:\n+                if state is None:\n+                    state = self.project_state((migration.app_label, migration.name), at_end=False)\n+                if not backwards:\n+                    state = migration.apply(state, schema_editor, collect_sql=True)\n+                else:\n+                    state = migration.unapply(state, schema_editor, collect_sql=True)\n+            statements.extend(schema_editor.collected_sql)\n+        return statements\n",
  "test_patch": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -695,6 +695,32 @@ def test_sqlmigrate_for_non_transactional_databases(self):\n             self.assertNotIn(start_transaction_sql.lower(), queries)\n         self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_sqlmigrate_ambiguous_prefix_squashed_migrations(self):\n+        msg = (\n+            \"More than one migration matches '0001' in app 'migrations'. \"\n+            \"Please be more specific.\"\n+        )\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('sqlmigrate', 'migrations', '0001')\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_sqlmigrate_squashed_migration(self):\n+        out = io.StringIO()\n+        call_command('sqlmigrate', 'migrations', '0001_squashed_0002', stdout=out)\n+        output = out.getvalue().lower()\n+        self.assertIn('-- create model author', output)\n+        self.assertIn('-- create model book', output)\n+        self.assertNotIn('-- create model tribble', output)\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_sqlmigrate_replaced_migration(self):\n+        out = io.StringIO()\n+        call_command('sqlmigrate', 'migrations', '0001_initial', stdout=out)\n+        output = out.getvalue().lower()\n+        self.assertIn('-- create model author', output)\n+        self.assertIn('-- create model tribble', output)\n+\n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_operations'})\n     def test_migrations_no_operations(self):\n         err = io.StringIO()\n",
  "problem_statement": "sqlmigrate doesn't allow inspecting migrations that have been squashed\nDescription\n\t\nThis project for another ticket can be used to reproduce: ​https://github.com/adamchainz/django-unique-together-bug\nWhen running sqlmigrate to pick up migration 0001 in this project, it complains that two migrations have that prefix:\n$ python manage.py sqlmigrate testapp 0001\nCommandError: More than one migration matches '0001' in app 'testapp'. Please be more specific.\nBut when trying to be more specific, it's not possible to load it:\n$ python manage.py sqlmigrate testapp 0001_initial\nTraceback (most recent call last):\n File \"manage.py\", line 21, in <module>\n\tmain()\n File \"manage.py\", line 17, in main\n\texecute_from_command_line(sys.argv)\n File \"/.../django/django/core/management/__init__.py\", line 401, in execute_from_command_line\n\tutility.execute()\n File \"/.../django/django/core/management/__init__.py\", line 395, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/.../django/django/core/management/base.py\", line 328, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"/.../django/django/core/management/commands/sqlmigrate.py\", line 30, in execute\n\treturn super().execute(*args, **options)\n File \"/.../django/django/core/management/base.py\", line 369, in execute\n\toutput = self.handle(*args, **options)\n File \"/.../django/django/core/management/commands/sqlmigrate.py\", line 64, in handle\n\tplan = [(executor.loader.graph.nodes[targets[0]], options['backwards'])]\nKeyError: ('testapp', '0001_initial')\nIt would be nice to:\nA) catch this error and report a nice message as well\nB) allow inspection of individual migrations that have been involved in a squash. Normally the workflow is to remove the individual migrations some time after committing the squash, but until that is done it could be useful to see their sql.\n",
  "hints_text": "Hi! This seems quite relevant to me, as in the company I work for, we'll probably start using squashed migration soon-ish and we use sqlmigrate extensively. I'd like to tackle this change :) It does not seem too complicated to allowed inspecting the SQL of replaced migrations. I already wrote a small test that reproduces the behaviour described in the stacktrace. Technically, I guess I should be able to find an elegant way to detect the migration was replaced and find it in the MigrationLoader. Visually, should the command display that the inspected migration is replaced and by which squashed migration? Thanks! David\nPatch: ​https://github.com/django/django/pull/12518\nSorry didn't see your comment until now, went through my spam box. Visually, should the command display that the inspected migration is replaced and by which squashed migration? I don't think that's necessary. The recommended procedure with a squashed migration is to drop the originals after every developer and deployment has received the squashed one. So the state where both exist in parallel doesn't live for long.\nReplying to Adam (Chainz) Johnson: Sorry didn't see your comment until now, went through my spam box. Visually, should the command display that the inspected migration is replaced and by which squashed migration? I don't think that's necessary. The recommended procedure with a squashed migration is to drop the originals after every developer and deployment has received the squashed one. So the state where both exist in parallel doesn't live for long. Yep, that's what I expected and it's the strategy I took in the PR. Just showing the SQL queries, just as if no replacement existed.",
  "created_at": "2020-03-01T22:17:19Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_sqlmigrate_replaced_migration (migrations.test_commands.MigrateTests)\"]",
  "PASS_TO_PASS": "[\"test_makemigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_makemigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"--squashed-name specifies the new migration's name.\", \"--squashed-name also works if a start migration is omitted.\", \"test_squashmigrations_initial_attribute (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_invalid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_optimizes (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_squashes (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_valid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_ticket_23799_squashmigrations_no_optimize (migrations.test_commands.SquashMigrationsTests)\", \"test_failing_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_files_content (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_auto_now_add_interactive (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_check (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_conflict_exit (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_consistency_checks_respect_routers (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_default_merge_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_disabled_migrations_for_app (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_connections (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_no_app_specified (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_handle_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_inconsistent_history (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_accept (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_by_default (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_reject (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_dont_output_dependency_operations (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_no_conflict (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output_valueerror (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_announce (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_nonexistent_toplevel_package (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_path_not_exist (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_apps_initial (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes_no_apps (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_common_ancestor (migrations.test_commands.MakeMigrationsTests)\", \"Migration directories without an __init__.py file are allowed.\", \"test_makemigrations_non_interactive_no_field_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_no_model_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_addition (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_alteration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_order (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_no_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_invalid_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_ambiguous_prefix (migrations.test_commands.MigrateTests)\", \"test_app_without_migrations (migrations.test_commands.MigrateTests)\", \"test_migrate (migrations.test_commands.MigrateTests)\", \"test_migrate_conflict_exit (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_initial_case_insensitive (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_split_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_inconsistent_history (migrations.test_commands.MigrateTests)\", \"test_migrate_initial_false (migrations.test_commands.MigrateTests)\", \"Tests migrate --plan output.\", \"test_migrate_record_replaced (migrations.test_commands.MigrateTests)\", \"test_migrate_record_squashed (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_app_label (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_app_with_migrations (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_deferred_sql_executed_with_schemaeditor (migrations.test_commands.MigrateTests)\", \"test_migrate_with_system_checks (migrations.test_commands.MigrateTests)\", \"test_migrations_no_operations (migrations.test_commands.MigrateTests)\", \"test_regression_22823_unmigrated_fk_to_migrated_model (migrations.test_commands.MigrateTests)\", \"test_showmigrations_list (migrations.test_commands.MigrateTests)\", \"test_showmigrations_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_app_label_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_multiple_app_labels (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_single_app_label (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_squashed (migrations.test_commands.MigrateTests)\", \"test_showmigrations_unmigrated_app (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_ambiguous_prefix_squashed_migrations (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_backwards (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_for_non_atomic_migration (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_for_non_transactional_databases (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_forwards (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_squashed_migration (migrations.test_commands.MigrateTests)\", \"test_unknown_prefix (migrations.test_commands.MigrateTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.629441",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}