{
  "repo": "django/django",
  "instance_id": "django__django-12855",
  "base_commit": "f2051eb8a7febdaaa43bd33bf5a6108c5f428e59",
  "patch": "diff --git a/django/conf/urls/__init__.py b/django/conf/urls/__init__.py\n--- a/django/conf/urls/__init__.py\n+++ b/django/conf/urls/__init__.py\n@@ -1,4 +1,7 @@\n+import warnings\n+\n from django.urls import include, re_path\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.views import defaults\n \n __all__ = ['handler400', 'handler403', 'handler404', 'handler500', 'include', 'url']\n@@ -10,4 +13,9 @@\n \n \n def url(regex, view, kwargs=None, name=None):\n+    warnings.warn(\n+        'django.conf.urls.url() is deprecated in favor of '\n+        'django.urls.re_path().',\n+        RemovedInDjango40Warning,\n+    )\n     return re_path(regex, view, kwargs, name)\ndiff --git a/django/views/i18n.py b/django/views/i18n.py\n--- a/django/views/i18n.py\n+++ b/django/views/i18n.py\n@@ -196,8 +196,8 @@ class JavaScriptCatalog(View):\n     Return the selected language catalog as a JavaScript library.\n \n     Receive the list of packages to check for translations in the `packages`\n-    kwarg either from the extra dictionary passed to the url() function or as a\n-    plus-sign delimited string from the request. Default is 'django.conf'.\n+    kwarg either from the extra dictionary passed to the path() function or as\n+    a plus-sign delimited string from the request. Default is 'django.conf'.\n \n     You can override the gettext domain for this view, but usually you don't\n     want to do that as JavaScript messages go to the djangojs domain. This\n",
  "test_patch": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -1,9 +1,11 @@\n import uuid\n \n+from django.conf.urls import url as conf_url\n from django.core.exceptions import ImproperlyConfigured\n from django.test import SimpleTestCase\n from django.test.utils import override_settings\n from django.urls import NoReverseMatch, Resolver404, path, resolve, reverse\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .converters import DynamicConverter\n from .views import empty_view\n@@ -303,3 +305,13 @@ def raises_type_error(value):\n             raise TypeError('This type error propagates.')\n         with self.assertRaisesMessage(TypeError, 'This type error propagates.'):\n             reverse('dynamic', kwargs={'value': object()})\n+\n+\n+class DeprecationTests(SimpleTestCase):\n+    def test_url_warning(self):\n+        msg = (\n+            'django.conf.urls.url() is deprecated in favor of '\n+            'django.urls.re_path().'\n+        )\n+        with self.assertRaisesMessage(RemovedInDjango40Warning, msg):\n+            conf_url(r'^regex/(?P<pk>[0-9]+)/$', empty_view, name='regex')\n",
  "problem_statement": "Deprecate django.conf.urls.url().\nDescription\n\t\nThe docs for ​django.conf.urls.url say:\nThis function is an alias to django.urls.re_path(). It’s likely to be deprecated in a future release.\nIt looks like the change was made in this ​commit back in 2016 (Django 2.0). Given some years have passed, is it now the time to deprecate this function?\n",
  "hints_text": "Agreed. We can deprecate it in Django 3.1 and remove in Django 4.0. Aymeric ​proposed to deprecate it in Django 3.1 when we discussed DEP 201.",
  "created_at": "2020-05-04T19:25:37Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_url_warning (urlpatterns.tests.DeprecationTests)\"]",
  "PASS_TO_PASS": "[\"test_allows_non_ascii_but_valid_identifiers (urlpatterns.tests.ParameterRestrictionTests)\", \"test_integer_parameter_name_causes_exception (urlpatterns.tests.ParameterRestrictionTests)\", \"test_non_identifier_parameter_name_causes_exception (urlpatterns.tests.ParameterRestrictionTests)\", \"test_resolve_type_error_propagates (urlpatterns.tests.ConversionExceptionTests)\", \"test_resolve_value_error_means_no_match (urlpatterns.tests.ConversionExceptionTests)\", \"test_reverse_type_error_propagates (urlpatterns.tests.ConversionExceptionTests)\", \"test_reverse_value_error_means_no_match (urlpatterns.tests.ConversionExceptionTests)\", \"test_matching_urls (urlpatterns.tests.ConverterTests)\", \"test_nonmatching_urls (urlpatterns.tests.ConverterTests)\", \"test_matching_urls_same_name (urlpatterns.tests.SameNameTests)\", \"test_converter_resolve (urlpatterns.tests.SimplifiedURLTests)\", \"test_converter_reverse (urlpatterns.tests.SimplifiedURLTests)\", \"test_converter_reverse_with_second_layer_instance_namespace (urlpatterns.tests.SimplifiedURLTests)\", \"test_invalid_converter (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_inclusion_is_matchable (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_inclusion_is_reversible (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_double_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_empty_string_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_multiple_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_typed_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_without_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_reverse_with_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_reverse_without_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_re_path (urlpatterns.tests.SimplifiedURLTests)\", \"test_re_path_with_missing_optional_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_re_path_with_optional_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_space_in_route (urlpatterns.tests.SimplifiedURLTests)\", \"test_two_variable_at_start_of_path_pattern (urlpatterns.tests.SimplifiedURLTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.636693",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}