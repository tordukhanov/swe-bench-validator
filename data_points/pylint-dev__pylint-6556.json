{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-6556",
  "base_commit": "fa183c7d15b5f3c7dd8dee86fc74caae42c3926c",
  "patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -937,8 +937,6 @@ def _check_astroid_module(\n             self.process_tokens(tokens)\n             if self._ignore_file:\n                 return False\n-            # walk ast to collect line numbers\n-            self.file_state.collect_block_lines(self.msgs_store, node)\n             # run raw and tokens checkers\n             for raw_checker in rawcheckers:\n                 raw_checker.process_module(node)\ndiff --git a/pylint/utils/file_state.py b/pylint/utils/file_state.py\n--- a/pylint/utils/file_state.py\n+++ b/pylint/utils/file_state.py\n@@ -74,25 +74,32 @@ def collect_block_lines(\n         self, msgs_store: MessageDefinitionStore, module_node: nodes.Module\n     ) -> None:\n         \"\"\"Walk the AST to collect block level options line numbers.\"\"\"\n+        warnings.warn(\n+            \"'collect_block_lines' has been deprecated and will be removed in pylint 3.0.\",\n+            DeprecationWarning,\n+        )\n         for msg, lines in self._module_msgs_state.items():\n             self._raw_module_msgs_state[msg] = lines.copy()\n         orig_state = self._module_msgs_state.copy()\n         self._module_msgs_state = {}\n         self._suppression_mapping = {}\n         self._effective_max_line_number = module_node.tolineno\n-        self._collect_block_lines(msgs_store, module_node, orig_state)\n+        for msgid, lines in orig_state.items():\n+            for msgdef in msgs_store.get_message_definitions(msgid):\n+                self._set_state_on_block_lines(msgs_store, module_node, msgdef, lines)\n \n-    def _collect_block_lines(\n+    def _set_state_on_block_lines(\n         self,\n         msgs_store: MessageDefinitionStore,\n         node: nodes.NodeNG,\n-        msg_state: MessageStateDict,\n+        msg: MessageDefinition,\n+        msg_state: dict[int, bool],\n     ) -> None:\n         \"\"\"Recursively walk (depth first) AST to collect block level options\n-        line numbers.\n+        line numbers and set the state correctly.\n         \"\"\"\n         for child in node.get_children():\n-            self._collect_block_lines(msgs_store, child, msg_state)\n+            self._set_state_on_block_lines(msgs_store, child, msg, msg_state)\n         # first child line number used to distinguish between disable\n         # which are the first child of scoped node with those defined later.\n         # For instance in the code below:\n@@ -115,9 +122,7 @@ def _collect_block_lines(\n             firstchildlineno = node.body[0].fromlineno\n         else:\n             firstchildlineno = node.tolineno\n-        for msgid, lines in msg_state.items():\n-            for msg in msgs_store.get_message_definitions(msgid):\n-                self._set_message_state_in_block(msg, lines, node, firstchildlineno)\n+        self._set_message_state_in_block(msg, msg_state, node, firstchildlineno)\n \n     def _set_message_state_in_block(\n         self,\n@@ -139,18 +144,61 @@ def _set_message_state_in_block(\n                 if lineno > firstchildlineno:\n                     state = True\n                 first_, last_ = node.block_range(lineno)\n+                # pylint: disable=useless-suppression\n+                # For block nodes first_ is their definition line. For example, we\n+                # set the state of line zero for a module to allow disabling\n+                # invalid-name for the module. For example:\n+                # 1. # pylint: disable=invalid-name\n+                # 2. ...\n+                # OR\n+                # 1. \"\"\"Module docstring\"\"\"\n+                # 2. # pylint: disable=invalid-name\n+                # 3. ...\n+                #\n+                # But if we already visited line 0 we don't need to set its state again\n+                # 1. # pylint: disable=invalid-name\n+                # 2. # pylint: enable=invalid-name\n+                # 3. ...\n+                # The state should come from line 1, not from line 2\n+                # Therefore, if the 'fromlineno' is already in the states we just start\n+                # with the lineno we were originally visiting.\n+                # pylint: enable=useless-suppression\n+                if (\n+                    first_ == node.fromlineno\n+                    and first_ >= firstchildlineno\n+                    and node.fromlineno in self._module_msgs_state.get(msg.msgid, ())\n+                ):\n+                    first_ = lineno\n+\n             else:\n                 first_ = lineno\n                 last_ = last\n             for line in range(first_, last_ + 1):\n-                # do not override existing entries\n-                if line in self._module_msgs_state.get(msg.msgid, ()):\n+                # Do not override existing entries. This is especially important\n+                # when parsing the states for a scoped node where some line-disables\n+                # have already been parsed.\n+                if (\n+                    (\n+                        isinstance(node, nodes.Module)\n+                        and node.fromlineno <= line < lineno\n+                    )\n+                    or (\n+                        not isinstance(node, nodes.Module)\n+                        and node.fromlineno < line < lineno\n+                    )\n+                ) and line in self._module_msgs_state.get(msg.msgid, ()):\n                     continue\n                 if line in lines:  # state change in the same block\n                     state = lines[line]\n                     original_lineno = line\n+\n+                # Update suppression mapping\n                 if not state:\n                     self._suppression_mapping[(msg.msgid, line)] = original_lineno\n+                else:\n+                    self._suppression_mapping.pop((msg.msgid, line), None)\n+\n+                # Update message state for respective line\n                 try:\n                     self._module_msgs_state[msg.msgid][line] = state\n                 except KeyError:\n@@ -160,10 +208,20 @@ def _set_message_state_in_block(\n     def set_msg_status(self, msg: MessageDefinition, line: int, status: bool) -> None:\n         \"\"\"Set status (enabled/disable) for a given message at a given line.\"\"\"\n         assert line > 0\n+        assert self._module\n+        # TODO: 3.0: Remove unnecessary assertion\n+        assert self._msgs_store\n+\n+        # Expand the status to cover all relevant block lines\n+        self._set_state_on_block_lines(\n+            self._msgs_store, self._module, msg, {line: status}\n+        )\n+\n+        # Store the raw value\n         try:\n-            self._module_msgs_state[msg.msgid][line] = status\n+            self._raw_module_msgs_state[msg.msgid][line] = status\n         except KeyError:\n-            self._module_msgs_state[msg.msgid] = {line: status}\n+            self._raw_module_msgs_state[msg.msgid] = {line: status}\n \n     def handle_ignored_message(\n         self, state_scope: Literal[0, 1, 2] | None, msgid: str, line: int | None\n",
  "test_patch": "diff --git a/tests/functional/b/bad_option_value_disable.py b/tests/functional/b/bad_option_value_disable.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/functional/b/bad_option_value_disable.py\n@@ -0,0 +1,14 @@\n+\"\"\"Tests for the disabling of bad-option-value.\"\"\"\n+# pylint: disable=invalid-name\n+\n+# pylint: disable=bad-option-value\n+\n+var = 1  # pylint: disable=a-removed-option\n+\n+# pylint: enable=bad-option-value\n+\n+var = 1  # pylint: disable=a-removed-option # [bad-option-value]\n+\n+# bad-option-value needs to be disabled before the bad option\n+var = 1  # pylint: disable=a-removed-option, bad-option-value # [bad-option-value]\n+var = 1  # pylint: disable=bad-option-value, a-removed-option\ndiff --git a/tests/functional/b/bad_option_value_disable.txt b/tests/functional/b/bad_option_value_disable.txt\nnew file mode 100644\n--- /dev/null\n+++ b/tests/functional/b/bad_option_value_disable.txt\n@@ -0,0 +1,2 @@\n+bad-option-value:10:0:None:None::Bad option value for disable. Don't recognize message a-removed-option.:UNDEFINED\n+bad-option-value:13:0:None:None::Bad option value for disable. Don't recognize message a-removed-option.:UNDEFINED\ndiff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -190,8 +190,14 @@ def reporter():\n @pytest.fixture\n def initialized_linter(linter: PyLinter) -> PyLinter:\n     linter.open()\n-    linter.set_current_module(\"toto\", \"mydir/toto\")\n-    linter.file_state = FileState(\"toto\", linter.msgs_store)\n+    linter.set_current_module(\"long_test_file\", \"long_test_file\")\n+    linter.file_state = FileState(\n+        \"long_test_file\",\n+        linter.msgs_store,\n+        linter.get_ast(\n+            str(join(REGRTEST_DATA_DIR, \"long_test_file.py\")), \"long_test_file\"\n+        ),\n+    )\n     return linter\n \n \n@@ -271,9 +277,9 @@ def test_enable_message_block(initialized_linter: PyLinter) -> None:\n     filepath = join(REGRTEST_DATA_DIR, \"func_block_disable_msg.py\")\n     linter.set_current_module(\"func_block_disable_msg\")\n     astroid = linter.get_ast(filepath, \"func_block_disable_msg\")\n+    linter.file_state = FileState(\"func_block_disable_msg\", linter.msgs_store, astroid)\n     linter.process_tokens(tokenize_module(astroid))\n     fs = linter.file_state\n-    fs.collect_block_lines(linter.msgs_store, astroid)\n     # global (module level)\n     assert linter.is_message_enabled(\"W0613\")\n     assert linter.is_message_enabled(\"E1101\")\n@@ -310,7 +316,6 @@ def test_enable_message_block(initialized_linter: PyLinter) -> None:\n     assert linter.is_message_enabled(\"E1101\", 75)\n     assert linter.is_message_enabled(\"E1101\", 77)\n \n-    fs = linter.file_state\n     assert fs._suppression_mapping[\"W0613\", 18] == 17\n     assert fs._suppression_mapping[\"E1101\", 33] == 30\n     assert (\"E1101\", 46) not in fs._suppression_mapping\ndiff --git a/tests/regrtest_data/long_test_file.py b/tests/regrtest_data/long_test_file.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/regrtest_data/long_test_file.py\n@@ -0,0 +1,100 @@\n+\"\"\"\n+This file is used for bad-option-value's test. We needed a module that isn’t restricted by line numbers\n+as the tests use various line numbers to test the behaviour.\n+\n+Using an empty module creates issue as you can’t disable something on line 10 if it doesn’t exist. Thus, we created an extra long file so we never run into an issue with that.\n+\"\"\"\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+print(1)\ndiff --git a/tests/test_deprecation.py b/tests/test_deprecation.py\n--- a/tests/test_deprecation.py\n+++ b/tests/test_deprecation.py\n@@ -9,6 +9,7 @@\n from typing import Any\n \n import pytest\n+from astroid import nodes\n \n from pylint.checkers import BaseChecker\n from pylint.checkers.mapreduce_checker import MapReduceMixin\n@@ -100,3 +101,10 @@ def test_filestate() -> None:\n     with pytest.warns(DeprecationWarning):\n         FileState(msg_store=MessageDefinitionStore())\n     FileState(\"foo\", MessageDefinitionStore())\n+\n+\n+def test_collectblocklines() -> None:\n+    \"\"\"Test FileState.collect_block_lines.\"\"\"\n+    state = FileState(\"foo\", MessageDefinitionStore())\n+    with pytest.warns(DeprecationWarning):\n+        state.collect_block_lines(MessageDefinitionStore(), nodes.Module(\"foo\"))\n",
  "problem_statement": "Can't disable bad-option-value\n### Steps to reproduce\r\n1. Write code on a computer with a somewhat new pylint (2.4.3 in my example). Get a warning like `useless-object-inheritance` that I want to ignore, as I'm writing code compatible with python2 and python3.\r\n2. Disable said warning with `# pylint: disable=useless-object-inheritance`.\r\n3. Get a \"Bad option value\" when other people run their pylint version (example: 2.3.1; and by people, sometimes I mean docker instances ran from Jenkins that I would rather not rebuild or that depend on other people and I can't modify)\r\n4. Try to disable said error with a global `# pylint: disable=bad-option-value`\r\n\r\n### Current behavior\r\n`# pylint: disable=bad-option-value` is ignored\r\n`# pylint: disable=E0012` is ignored\r\n\r\n### Expected behavior\r\nTo be able to write code that works on several versions of pylint and not having to make sure every computer in the company and every docker container has the same pylint version.\r\n\r\n\n",
  "hints_text": "Thanks for the report, this is definitely something we should be able to fix.\nHi. It seems to work when it's on the same line but not globally (which could be useful but I didn't found anything on the documentation). So I have to do:\r\n`# pylint: disable=bad-option-value,useless-object-inheritance`\r\nIf I later want to use another option, I have to repeat it again:\r\n`# pylint: disable=bad-option-value,consider-using-sys-exit`\nMy (unwarranted) two cents: I don't quite see the point of allowing to run different versions of pylint on the same code base.\r\n\r\nDifferent versions of pylint are likely to yield different warnings, because checks are added (and sometimes removed) between versions, and bugs (such as false positives) are fixed. So if your teammate does not run the same version as you do, they may have a \"perfect pylint score\", while your version gets warnings. Surely you'd rather have a reproducible output, and the best way to achieve that is to warrant a specific version of pylint across the team and your CI environment.\n@dbaty Running different versions of pylint helps when porting code from Python2 to Python3\nSo, what's the status ?\nDropping support for an option, and also having a bad-option-value be an error makes pylint not backwards compatible. It looks like you expect everyone to be able to atomically update their pylint version *and* all of their code annotations in all of their environments at the same time.\r\n\r\nI maintain packages supporting python 2.7, 3.4-3.10, and since pylint no longer supports all of those, I'm forced to use older versions of pylint in some environments, which now are not compatible with the latest. I don't know if this is a new behavior or has always been this way, but today was the first time I've had any problem with pylint , and am going to have to disable it in CI now.\r\n\n@jacobtylerwalls I have a fix, but it requires changing the signature of `PyLinter.process_tokens`. Do we consider that public API?\r\n\r\nThe issue is that we need to call `file_state.collect_block_lines` to expand a block-level disable over its respective block. This can only be done with access to the `ast` node. Changing `PyLinter.disable` to have access to `node` seems like a very breaking change, although it would be much better to do the expansion immediately upon disabling instead of somewhere later.\r\nMy approach does it every time we find a `disable` pragma. We can explore whether we can do something like `collect_block_lines_one_message` instead of iterating over the complete `_module_msgs_state` every time. Still, whatever we do we require access to `node` inside of `process_tokens`.\r\nHow likely is it that plugins are calling `PyLinter.process_tokens`?\r\n\r\n```diff\r\ndiff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\r\nindex 7c40f4bf2..4b00ba5ac 100644\r\n--- a/pylint/lint/pylinter.py\r\n+++ b/pylint/lint/pylinter.py\r\n@@ -527,7 +527,9 @@ class PyLinter(\r\n     # block level option handling #############################################\r\n     # see func_block_disable_msg.py test case for expected behaviour\r\n \r\n-    def process_tokens(self, tokens: list[tokenize.TokenInfo]) -> None:\r\n+    def process_tokens(\r\n+        self, tokens: list[tokenize.TokenInfo], node: nodes.Module\r\n+    ) -> None:\r\n         \"\"\"Process tokens from the current module to search for module/block level\r\n         options.\r\n         \"\"\"\r\n@@ -595,6 +597,7 @@ class PyLinter(\r\n                             l_start -= 1\r\n                         try:\r\n                             meth(msgid, \"module\", l_start)\r\n+                            self.file_state.collect_block_lines(self.msgs_store, node)\r\n                         except exceptions.UnknownMessageError:\r\n                             msg = f\"{pragma_repr.action}. Don't recognize message {msgid}.\"\r\n                             self.add_message(\r\n@@ -1043,7 +1046,7 @@ class PyLinter(\r\n             # assert astroid.file.endswith('.py')\r\n             # invoke ITokenChecker interface on self to fetch module/block\r\n             # level options\r\n-            self.process_tokens(tokens)\r\n+            self.process_tokens(tokens, node)\r\n             if self._ignore_file:\r\n                 return False\r\n             # walk ast to collect line numbers\r\ndiff --git a/tests/functional/b/bad_option_value_disable.py b/tests/functional/b/bad_option_value_disable.py\r\nnew file mode 100644\r\nindex 000000000..cde604411\r\n--- /dev/null\r\n+++ b/tests/functional/b/bad_option_value_disable.py\r\n@@ -0,0 +1,6 @@\r\n+\"\"\"Tests for the disabling of bad-option-value.\"\"\"\r\n+# pylint: disable=invalid-name\r\n+\r\n+# pylint: disable=bad-option-value\r\n+\r\n+var = 1  # pylint: disable=a-removed-option\r\n```\nThe PyLinter is pylint's internal god class, I think if we don't dare to modify it it's a problem. On the other hand, it might be possible to make the node ``Optional`` with a default value of ``None`` and raise a deprecation warning if the node is ``None`` without too much hassle ?\r\n\r\n```diff\r\n- self.file_state.collect_block_lines(self.msgs_store, node)\r\n+ if node is not None:\r\n+     self.file_state.collect_block_lines(self.msgs_store, node)\r\n+ else:\r\n+     warnings.warn(\" process_tokens... deprecation... 3.0.. bad option value won't be disablable...\")\nYeah, just making it optional and immediately deprecating it sounds good. Let's add a test for a disabling a message by ID also.\nI found some issue while working on this so it will take a little longer.\r\n\r\nHowever, would you guys be okay with one refactor before this to create a `_MessageStateHandler`. I would move all methods like `disable`, `enable`, `set_message_state` etc into this class. Similar to how we moved some of the `PyLinter` stuff to `_ArgumentsManager`. I know we had something similar with `MessageHandlerMixIn` previously, but the issue was that that class was always mixed with `PyLinter` but `mypy` didn't know this.\r\nThere are two main benefits:\r\n1) Clean up of `PyLinter` and its file\r\n2) We no longer need to inherit from `BaseTokenChecker`. This is better as `pylint` will rightfully complain about `process_tokens` signature not having `node` as argument. If we keep inheriting we will need to keep giving a default value, which is something we want to avoid in the future.\r\n\r\nFor now I would only:\r\n1) Create `_MessageStateHandler` and let `PyLinter` inherit from it.\r\n2) Make `PyLinter` a `BaseChecker` and move `process_tokens` to `_MessageStateHandler`.\r\n3) Fix the issue in this issue.\r\n\r\nEdit: A preparing PR has been opened with https://github.com/PyCQA/pylint/pull/6537.\nBefore I look closer to come up with an opinion, I just remember we have #5156, so we should keep it in mind or close it.\nI think #5156 is compatible with the proposition Daniel made, it can be a first step as it's better to inherit from ``BaseChecker`` than from ``BaseTokenChecker``.\n@DanielNoord sounds good to me!\nWell, the refactor turned out to be rather pointless as I ran into multiple subtle regressions with my first approach.\r\n\r\nI'm now looking into a different solution: modifying `FileState` to always have access to the relevant `Module` and then expanding pragma's whenever we encounter them. However, this is also proving tricky... I can see why this issue has remained open for so long.\nThank you for looking into it!\nMaybe a setting is enough?",
  "created_at": "2022-05-09T07:24:39Z",
  "version": "2.14",
  "FAIL_TO_PASS": "[\"tests/lint/unittest_lint.py::test_enable_message_block\", \"tests/test_deprecation.py::test_collectblocklines\"]",
  "PASS_TO_PASS": "[\"tests/lint/unittest_lint.py::test_no_args\", \"tests/lint/unittest_lint.py::test_one_arg[case0]\", \"tests/lint/unittest_lint.py::test_one_arg[case1]\", \"tests/lint/unittest_lint.py::test_one_arg[case2]\", \"tests/lint/unittest_lint.py::test_one_arg[case3]\", \"tests/lint/unittest_lint.py::test_one_arg[case4]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case0]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case1]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case2]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case3]\", \"tests/lint/unittest_lint.py::test_more_args[case0]\", \"tests/lint/unittest_lint.py::test_more_args[case1]\", \"tests/lint/unittest_lint.py::test_more_args[case2]\", \"tests/lint/unittest_lint.py::test_pylint_visit_method_taken_in_account\", \"tests/lint/unittest_lint.py::test_enable_message\", \"tests/lint/unittest_lint.py::test_enable_message_category\", \"tests/lint/unittest_lint.py::test_message_state_scope\", \"tests/lint/unittest_lint.py::test_enable_by_symbol\", \"tests/lint/unittest_lint.py::test_enable_report\", \"tests/lint/unittest_lint.py::test_report_output_format_aliased\", \"tests/lint/unittest_lint.py::test_set_unsupported_reporter\", \"tests/lint/unittest_lint.py::test_set_option_1\", \"tests/lint/unittest_lint.py::test_set_option_2\", \"tests/lint/unittest_lint.py::test_enable_checkers\", \"tests/lint/unittest_lint.py::test_errors_only\", \"tests/lint/unittest_lint.py::test_disable_similar\", \"tests/lint/unittest_lint.py::test_disable_alot\", \"tests/lint/unittest_lint.py::test_addmessage\", \"tests/lint/unittest_lint.py::test_addmessage_invalid\", \"tests/lint/unittest_lint.py::test_load_plugin_command_line\", \"tests/lint/unittest_lint.py::test_load_plugin_config_file\", \"tests/lint/unittest_lint.py::test_load_plugin_configuration\", \"tests/lint/unittest_lint.py::test_init_hooks_called_before_load_plugins\", \"tests/lint/unittest_lint.py::test_analyze_explicit_script\", \"tests/lint/unittest_lint.py::test_full_documentation\", \"tests/lint/unittest_lint.py::test_list_msgs_enabled\", \"tests/lint/unittest_lint.py::test_pylint_home\", \"tests/lint/unittest_lint.py::test_pylint_home_from_environ\", \"tests/lint/unittest_lint.py::test_warn_about_old_home\", \"tests/lint/unittest_lint.py::test_pylintrc\", \"tests/lint/unittest_lint.py::test_pylintrc_parentdir\", \"tests/lint/unittest_lint.py::test_pylintrc_parentdir_no_package\", \"tests/lint/unittest_lint.py::test_custom_should_analyze_file\", \"tests/lint/unittest_lint.py::test_multiprocessing[1]\", \"tests/lint/unittest_lint.py::test_multiprocessing[2]\", \"tests/lint/unittest_lint.py::test_filename_with__init__\", \"tests/lint/unittest_lint.py::test_by_module_statement_value\", \"tests/test_deprecation.py::test_mapreducemixin\", \"tests/test_deprecation.py::test_reporter_implements\", \"tests/test_deprecation.py::test_checker_implements\", \"tests/test_deprecation.py::test_interfaces\", \"tests/test_deprecation.py::test_load_and_save_results\", \"tests/test_deprecation.py::test_filestate\"]",
  "environment_setup_commit": "680edebc686cad664bbed934a490aeafa775f163",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.914077",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}