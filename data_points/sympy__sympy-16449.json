{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-16449",
  "base_commit": "aefdd023dc4f73c441953ed51f5f05a076f0862f",
  "patch": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -48,7 +48,7 @@\n from sympy import (log, sqrt, pi, S, Dummy, Interval, sympify, gamma,\n                    Piecewise, And, Eq, binomial, factorial, Sum, floor, Abs,\n                    Lambda, Basic, lowergamma, erf, erfi, I, hyper, uppergamma,\n-                   sinh, Ne, expint)\n+                   sinh, atan, Ne, expint)\n \n from sympy import beta as beta_fn\n from sympy import cos, sin, exp, besseli, besselj, besselk\n@@ -480,6 +480,10 @@ def check(x0, gamma):\n     def pdf(self, x):\n         return 1/(pi*self.gamma*(1 + ((x - self.x0)/self.gamma)**2))\n \n+    def _cdf(self, x):\n+        x0, gamma = self.x0, self.gamma\n+        return (1/pi)*atan((x - x0)/gamma) + S.Half\n+\n     def _characteristic_function(self, t):\n         return exp(self.x0 * I * t -  self.gamma * Abs(t))\n \n@@ -1514,6 +1518,10 @@ def pdf(self, x):\n         eta, b = self.eta, self.b\n         return b*eta*exp(b*x)*exp(eta)*exp(-eta*exp(b*x))\n \n+    def _cdf(self, x):\n+        eta, b = self.eta, self.b\n+        return 1 - exp(eta)*exp(-eta*exp(b*x))\n+\n     def _moment_generating_function(self, t):\n         eta, b = self.eta, self.b\n         return eta * exp(eta) * expint(t/b, eta)\n@@ -1898,6 +1906,10 @@ def pdf(self, x):\n         a = self.a\n         return sqrt(2/pi)*x**2*exp(-x**2/(2*a**2))/a**3\n \n+    def _cdf(self, x):\n+        a = self.a\n+        return erf(sqrt(2)*x/(2*a)) - sqrt(2)*x*exp(-x**2/(2*a**2))/(sqrt(pi)*a)\n+\n def Maxwell(name, a):\n     r\"\"\"\n     Create a continuous random variable with a Maxwell distribution.\n@@ -2424,6 +2436,10 @@ def pdf(self, x):\n         sigma = self.sigma\n         return x/sigma**2*exp(-x**2/(2*sigma**2))\n \n+    def _cdf(self, x):\n+        sigma = self.sigma\n+        return 1 - exp(-(x**2/(2*sigma**2)))\n+\n     def _characteristic_function(self, t):\n         sigma = self.sigma\n         return 1 - sigma*t*exp(-sigma**2*t**2/2) * sqrt(pi/2) * (erfi(sigma*t/sqrt(2)) - I)\n",
  "test_patch": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -1,6 +1,6 @@\n from sympy import (Symbol, Abs, exp, S, N, pi, simplify, Interval, erf, erfc, Ne,\n                    Eq, log, lowergamma, uppergamma, Sum, symbols, sqrt, And, gamma, beta,\n-                   Piecewise, Integral, sin, cos, besseli, factorial, binomial,\n+                   Piecewise, Integral, sin, cos, atan, besseli, factorial, binomial,\n                    floor, expand_func, Rational, I, re, im, lambdify, hyper, diff, Or, Mul)\n from sympy.core.compatibility import range\n from sympy.external import import_module\n@@ -250,6 +250,8 @@ def test_cauchy():\n \n     X = Cauchy('x', x0, gamma)\n     assert density(X)(x) == 1/(pi*gamma*(1 + (x - x0)**2/gamma**2))\n+    assert cdf(X)(x) == atan((x - x0)/gamma)/pi + S.Half\n+    assert diff(cdf(X)(x), x) == density(X)(x)\n \n     gamma = Symbol(\"gamma\", positive=False)\n     raises(ValueError, lambda: Cauchy('x', x0, gamma))\n@@ -436,6 +438,8 @@ def test_gompertz():\n \n     X = Gompertz(\"x\", b, eta)\n     assert density(X)(x) == b*eta*exp(eta)*exp(b*x)*exp(-eta*exp(b*x))\n+    assert cdf(X)(x) == 1 - exp(eta)*exp(-eta*exp(b*x))\n+    assert diff(cdf(X)(x), x) == density(X)(x)\n \n \n def test_gumbel():\n@@ -511,6 +515,8 @@ def test_maxwell():\n         (sqrt(pi)*a**3))\n     assert E(X) == 2*sqrt(2)*a/sqrt(pi)\n     assert simplify(variance(X)) == a**2*(-8 + 3*pi)/pi\n+    assert cdf(X)(x) == erf(sqrt(2)*x/(2*a)) - sqrt(2)*x*exp(-x**2/(2*a**2))/(sqrt(pi)*a)\n+    assert diff(cdf(X)(x), x) == density(X)(x)\n \n \n def test_nakagami():\n@@ -570,6 +576,8 @@ def test_rayleigh():\n     assert density(X)(x) ==  x*exp(-x**2/(2*sigma**2))/sigma**2\n     assert E(X) == sqrt(2)*sqrt(pi)*sigma/2\n     assert variance(X) == -pi*sigma**2/2 + 2*sigma**2\n+    assert cdf(X)(x) == 1 - exp(-x**2/(2*sigma**2))\n+    assert diff(cdf(X)(x), x) == density(X)(x)\n \n \n def test_shiftedgompertz():\n",
  "problem_statement": "Add CDF to maxwell distribution\nAdd function to find CDF of Maxwell distribution using reference: [wiki](https://en.wikipedia.org/wiki/Maxwell%E2%80%93Boltzmann_distribution)\n",
  "hints_text": "",
  "created_at": "2019-03-26T17:40:37Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_cauchy\", \"test_gompertz\", \"test_maxwell\", \"test_rayleigh\"]",
  "PASS_TO_PASS": "[\"test_single_normal\", \"test_ContinuousDomain\", \"test_symbolic\", \"test_cdf\", \"test_characteristic_function\", \"test_sample_continuous\", \"test_ContinuousRV\", \"test_arcsin\", \"test_benini\", \"test_beta\", \"test_betaprime\", \"test_chi\", \"test_chi_noncentral\", \"test_chi_squared\", \"test_dagum\", \"test_erlang\", \"test_exponential\", \"test_f_distribution\", \"test_fisher_z\", \"test_frechet\", \"test_gamma\", \"test_gamma_inverse\", \"test_gumbel\", \"test_kumaraswamy\", \"test_laplace\", \"test_logistic\", \"test_lognormal\", \"test_nakagami\", \"test_pareto\", \"test_pareto_numeric\", \"test_raised_cosine\", \"test_shiftedgompertz\", \"test_studentt\", \"test_trapezoidal\", \"test_quadratic_u\", \"test_uniform\", \"test_uniform_P\", \"test_von_mises\", \"test_weibull\", \"test_weibull_numeric\", \"test_wignersemicircle\", \"test_prefab_sampling\", \"test_input_value_assertions\", \"test_probability_unevaluated\", \"test_density_unevaluated\", \"test_NormalDistribution\", \"test_random_parameters\", \"test_random_parameters_given\", \"test_conjugate_priors\", \"test_difficult_univariate\", \"test_issue_10003\", \"test_long_precomputed_cdf\", \"test_issue_13324\", \"test_FiniteSet_prob\", \"test_prob_neq\", \"test_union\", \"test_Or\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.107620",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}