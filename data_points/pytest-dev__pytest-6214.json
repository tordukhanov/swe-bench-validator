{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-6214",
  "base_commit": "f24f20a46e0efd8b375ab3457e9f6864e59979e5",
  "patch": "diff --git a/src/_pytest/setupplan.py b/src/_pytest/setupplan.py\n--- a/src/_pytest/setupplan.py\n+++ b/src/_pytest/setupplan.py\n@@ -16,7 +16,8 @@ def pytest_addoption(parser):\n def pytest_fixture_setup(fixturedef, request):\n     # Will return a dummy fixture if the setuponly option is provided.\n     if request.config.option.setupplan:\n-        fixturedef.cached_result = (None, None, None)\n+        my_cache_key = fixturedef.cache_key(request)\n+        fixturedef.cached_result = (None, my_cache_key, None)\n         return fixturedef.cached_result\n \n \n",
  "test_patch": "diff --git a/testing/python/setup_plan.py b/testing/python/setup_plan.py\n--- a/testing/python/setup_plan.py\n+++ b/testing/python/setup_plan.py\n@@ -17,3 +17,94 @@ def test_arg(arg):\n     result.stdout.fnmatch_lines(\n         [\"*SETUP    F arg*\", \"*test_arg (fixtures used: arg)\", \"*TEARDOWN F arg*\"]\n     )\n+\n+\n+def test_show_multi_test_fixture_setup_and_teardown_correctly_simple(testdir):\n+    \"\"\"\n+    Verify that when a fixture lives for longer than a single test, --setup-plan\n+    correctly displays the SETUP/TEARDOWN indicators the right number of times.\n+\n+    As reported in https://github.com/pytest-dev/pytest/issues/2049\n+    --setup-plan was showing SETUP/TEARDOWN on every test, even when the fixture\n+    should persist through multiple tests.\n+\n+    (Note that this bug never affected actual test execution, which used the\n+    correct fixture lifetimes. It was purely a display bug for --setup-plan, and\n+    did not affect the related --setup-show or --setup-only.)\n+    \"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+        @pytest.fixture(scope = 'class')\n+        def fix():\n+            return object()\n+        class TestClass:\n+            def test_one(self, fix):\n+                assert False\n+            def test_two(self, fix):\n+                assert False\n+    \"\"\"\n+    )\n+\n+    result = testdir.runpytest(\"--setup-plan\")\n+    assert result.ret == 0\n+\n+    setup_fragment = \"SETUP    C fix\"\n+    setup_count = 0\n+\n+    teardown_fragment = \"TEARDOWN C fix\"\n+    teardown_count = 0\n+\n+    for line in result.stdout.lines:\n+        if setup_fragment in line:\n+            setup_count += 1\n+        if teardown_fragment in line:\n+            teardown_count += 1\n+\n+    # before the fix this tests, there would have been a setup/teardown\n+    # message for each test, so the counts would each have been 2\n+    assert setup_count == 1\n+    assert teardown_count == 1\n+\n+\n+def test_show_multi_test_fixture_setup_and_teardown_same_as_setup_show(testdir):\n+    \"\"\"\n+    Verify that SETUP/TEARDOWN messages match what comes out of --setup-show.\n+    \"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+        @pytest.fixture(scope = 'session')\n+        def sess():\n+            return True\n+        @pytest.fixture(scope = 'module')\n+        def mod():\n+            return True\n+        @pytest.fixture(scope = 'class')\n+        def cls():\n+            return True\n+        @pytest.fixture(scope = 'function')\n+        def func():\n+            return True\n+        def test_outside(sess, mod, cls, func):\n+            assert True\n+        class TestCls:\n+            def test_one(self, sess, mod, cls, func):\n+                assert True\n+            def test_two(self, sess, mod, cls, func):\n+                assert True\n+    \"\"\"\n+    )\n+\n+    plan_result = testdir.runpytest(\"--setup-plan\")\n+    show_result = testdir.runpytest(\"--setup-show\")\n+\n+    # the number and text of these lines should be identical\n+    plan_lines = [\n+        l for l in plan_result.stdout.lines if \"SETUP\" in l or \"TEARDOWN\" in l\n+    ]\n+    show_lines = [\n+        l for l in show_result.stdout.lines if \"SETUP\" in l or \"TEARDOWN\" in l\n+    ]\n+\n+    assert plan_lines == show_lines\n",
  "problem_statement": "--setup-plan and --setup-only seem to claim different things\nI have the following example:\r\n```python\r\nfrom pytest import fixture\r\n\r\n\r\n@fixture(scope='module')\r\ndef fixture1():\r\n    print('Setup of fixture1')\r\n    yield 'fixture1'\r\n    print('Teardown of fixture1')\r\n\r\n\r\n@fixture(scope='module')\r\ndef fixture2():\r\n    print('Setup of fixture2')\r\n    yield 'fixture2'\r\n    print('Teardown of fixture2')\r\n\r\n\r\ndef test_1(fixture1):\r\n    print('Running test with {}'.format(fixture1))\r\n\r\n\r\ndef test_2(fixture1, fixture2):\r\n    print('Running test with {} and {}'.format(fixture1, fixture2))\r\n\r\n\r\ndef test_3(fixture2):\r\n    print('Running test with {}'.format(fixture2))\r\n\r\n```\r\n\r\nWhen running with `--setup-plan`, I get the following output (indicating extra teardown of fixture1 and 2):\r\n```\r\ntest_fixture_lifetime.py \r\n  SETUP    M fixture1\r\n        test_fixture_lifetime.py::test_1 (fixtures used: fixture1)\r\n  TEARDOWN M fixture1\r\n  SETUP    M fixture1\r\n  SETUP    M fixture2\r\n        test_fixture_lifetime.py::test_2 (fixtures used: fixture1, fixture2)\r\n  TEARDOWN M fixture2\r\n  SETUP    M fixture2\r\n        test_fixture_lifetime.py::test_3 (fixtures used: fixture2)\r\n  TEARDOWN M fixture2\r\n  TEARDOWN M fixture1\r\n```\r\n\r\nWhen running with `--setup-show`, the SETUP and TEARDOWN markers occur where my actual setup and teardown code executes:\r\n```\r\ntest_fixture_lifetime.py Setup of fixture1\r\n\r\n  SETUP    M fixture1\r\n        test_fixture_lifetime.py::test_1 (fixtures used: fixture1)Running test with fixture1\r\n.Setup of fixture2\r\n\r\n  SETUP    M fixture2\r\n        test_fixture_lifetime.py::test_2 (fixtures used: fixture1, fixture2)Running test with fixture1 and fixture2\r\n.\r\n        test_fixture_lifetime.py::test_3 (fixtures used: fixture2)Running test with fixture2\r\n.Teardown of fixture2\r\n\r\n  TEARDOWN M fixture2Teardown of fixture1\r\n\r\n  TEARDOWN M fixture1\r\n```\n--setup-plan and --setup-only seem to claim different things\nI have the following example:\r\n```python\r\nfrom pytest import fixture\r\n\r\n\r\n@fixture(scope='module')\r\ndef fixture1():\r\n    print('Setup of fixture1')\r\n    yield 'fixture1'\r\n    print('Teardown of fixture1')\r\n\r\n\r\n@fixture(scope='module')\r\ndef fixture2():\r\n    print('Setup of fixture2')\r\n    yield 'fixture2'\r\n    print('Teardown of fixture2')\r\n\r\n\r\ndef test_1(fixture1):\r\n    print('Running test with {}'.format(fixture1))\r\n\r\n\r\ndef test_2(fixture1, fixture2):\r\n    print('Running test with {} and {}'.format(fixture1, fixture2))\r\n\r\n\r\ndef test_3(fixture2):\r\n    print('Running test with {}'.format(fixture2))\r\n\r\n```\r\n\r\nWhen running with `--setup-plan`, I get the following output (indicating extra teardown of fixture1 and 2):\r\n```\r\ntest_fixture_lifetime.py \r\n  SETUP    M fixture1\r\n        test_fixture_lifetime.py::test_1 (fixtures used: fixture1)\r\n  TEARDOWN M fixture1\r\n  SETUP    M fixture1\r\n  SETUP    M fixture2\r\n        test_fixture_lifetime.py::test_2 (fixtures used: fixture1, fixture2)\r\n  TEARDOWN M fixture2\r\n  SETUP    M fixture2\r\n        test_fixture_lifetime.py::test_3 (fixtures used: fixture2)\r\n  TEARDOWN M fixture2\r\n  TEARDOWN M fixture1\r\n```\r\n\r\nWhen running with `--setup-show`, the SETUP and TEARDOWN markers occur where my actual setup and teardown code executes:\r\n```\r\ntest_fixture_lifetime.py Setup of fixture1\r\n\r\n  SETUP    M fixture1\r\n        test_fixture_lifetime.py::test_1 (fixtures used: fixture1)Running test with fixture1\r\n.Setup of fixture2\r\n\r\n  SETUP    M fixture2\r\n        test_fixture_lifetime.py::test_2 (fixtures used: fixture1, fixture2)Running test with fixture1 and fixture2\r\n.\r\n        test_fixture_lifetime.py::test_3 (fixtures used: fixture2)Running test with fixture2\r\n.Teardown of fixture2\r\n\r\n  TEARDOWN M fixture2Teardown of fixture1\r\n\r\n  TEARDOWN M fixture1\r\n```\n",
  "hints_text": "Hi @oscarh,\r\ncould you state your expectations a little bit clearer? Are you surprised, that in your first output, the setup and teardown is announced more often than they would actually occur? I try to have a look into it over the weekend, but as far I remember, it was not straightforward to arrange the fixtures at this point of collection.\r\n\nHi @sallner,\r\n\r\nSorry about the late reply. As you have guessed, I was surprised that the setup and teardown are printed more ofter than they're executed. In other words, the plan, and what happens seem to differ.\nThis is really confusing. While both `--setup-show` and `--setup-only` display the setup correctly, `--setup-plan` makes no sense.\nThe plugin implementing this is https://github.com/pytest-dev/pytest/blob/cc464f6b96e59deafbe1e393beba7a21351c2e9d/src/_pytest/setupplan.py - in case you want to investigate / fix this.\nHi @oscarh,\r\ncould you state your expectations a little bit clearer? Are you surprised, that in your first output, the setup and teardown is announced more often than they would actually occur? I try to have a look into it over the weekend, but as far I remember, it was not straightforward to arrange the fixtures at this point of collection.\r\n\nHi @sallner,\r\n\r\nSorry about the late reply. As you have guessed, I was surprised that the setup and teardown are printed more ofter than they're executed. In other words, the plan, and what happens seem to differ.\nThis is really confusing. While both `--setup-show` and `--setup-only` display the setup correctly, `--setup-plan` makes no sense.\nThe plugin implementing this is https://github.com/pytest-dev/pytest/blob/cc464f6b96e59deafbe1e393beba7a21351c2e9d/src/_pytest/setupplan.py - in case you want to investigate / fix this.",
  "created_at": "2019-11-17T22:54:57Z",
  "version": "5.2",
  "FAIL_TO_PASS": "[\"testing/python/setup_plan.py::test_show_multi_test_fixture_setup_and_teardown_correctly_simple\", \"testing/python/setup_plan.py::test_show_multi_test_fixture_setup_and_teardown_same_as_setup_show\"]",
  "PASS_TO_PASS": "[\"testing/python/setup_plan.py::test_show_fixtures_and_test\"]",
  "environment_setup_commit": "f36ea240fe3579f945bf5d6cc41b5e45a572249d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.931658",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}