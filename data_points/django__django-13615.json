{
  "repo": "django/django",
  "instance_id": "django__django-13615",
  "base_commit": "8ed024b9b9ca4491fcb17cb15b3b5f18a8f60ff8",
  "patch": "diff --git a/django/core/management/commands/makemessages.py b/django/core/management/commands/makemessages.py\n--- a/django/core/management/commands/makemessages.py\n+++ b/django/core/management/commands/makemessages.py\n@@ -383,6 +383,14 @@ def handle(self, *args, **options):\n \n             # Build po files for each selected locale\n             for locale in locales:\n+                if '-' in locale:\n+                    self.stdout.write(\n+                        'invalid locale %s, did you mean %s?' % (\n+                            locale,\n+                            locale.replace('-', '_'),\n+                        ),\n+                    )\n+                    continue\n                 if self.verbosity > 0:\n                     self.stdout.write('processing locale %s' % locale)\n                 for potfile in potfiles:\n",
  "test_patch": "diff --git a/tests/i18n/test_extraction.py b/tests/i18n/test_extraction.py\n--- a/tests/i18n/test_extraction.py\n+++ b/tests/i18n/test_extraction.py\n@@ -152,6 +152,20 @@ def test_no_option(self):\n             with self.assertRaisesRegex(CommandError, msg):\n                 management.call_command('makemessages')\n \n+    def test_valid_locale(self):\n+        out = StringIO()\n+        management.call_command('makemessages', locale=['de'], stdout=out, verbosity=1)\n+        self.assertNotIn('invalid locale de', out.getvalue())\n+        self.assertIn('processing locale de', out.getvalue())\n+        self.assertIs(Path(self.PO_FILE).exists(), True)\n+\n+    def test_invalid_locale(self):\n+        out = StringIO()\n+        management.call_command('makemessages', locale=['pl-PL'], stdout=out, verbosity=1)\n+        self.assertIn('invalid locale pl-PL, did you mean pl_PL?', out.getvalue())\n+        self.assertNotIn('processing locale pl-PL', out.getvalue())\n+        self.assertIs(Path('locale/pl-PL/LC_MESSAGES/django.po').exists(), False)\n+\n     def test_comments_extractor(self):\n         management.call_command('makemessages', locale=[LOCALE], verbosity=0)\n         self.assertTrue(os.path.exists(self.PO_FILE))\n",
  "problem_statement": "Add warning in makemessages command if the localecode with `l` flag is not correct\nDescription\n\t \n\t\t(last modified by Sanyam Khurana)\n\t \nHey Calude,\nWhat about normalizing the directory name to something that would just work.\nFor example, \nNo matter, if the developer is doing all these:\npython manage.py makemessages -l zh_cn\npython manage.py makemessages -l zh_CN\npython manage.py makemessages -l ZH_CN\npython manage.py makemessages -l ZH-CN\netc.\nwe, just normalize the directory name to zh_CN and it would work.\nI'm still about to read the code of makemessages command and probably if there are any more checks than just this, then we'll have to figure out another way all together.\n",
  "hints_text": "We have to be careful in deciding what is a \"good\" and a \"bad\" code. However I agree that we can avoid some mistakes, notably the confusion between IETF language tags [1] and ISO/IEC 15897 (Posix) [2] codes generally expected by Django. [1] ​https://en.wikipedia.org/wiki/IETF_language_tag [2] ​https://en.wikipedia.org/wiki/Locale_(computer_software)\n​PR\n​PR\nI think I would still output a warning when a language code is normalized, just to inform the user that its input has been corrected.\nWarning added when a language code is normalized.\nTrying to coerce any input to something like a ​language tag only to hack it back to a ​locale using to_locale() feels like a kludge. It would be better to improve documentation.\nImproving documentation is welcome, but silently accepting a wrong language code also look a bit suspicious. I think I would be happy with a warning without coercing anything.\nWe definitely need to improve the documentations. Coercing the language code is something we have to take call on.\nReplying to Claude Paroz: Improving documentation is welcome, but silently accepting a wrong language code also look a bit suspicious. I think I would be happy with a warning without coercing anything. I agree. I think a warning would make sense, without coercion. It is still possible to provide a locale to makemessages where there are no actual message catalogs in any of the paths in settings.LOCALE_PATHS. We should probably scrap all the normalization stuff and just output a warning message if a locale specified by the user is not in all_locales. At the moment we output a \"processing locale xx_XX\" message if verbosity > 0 which should be fixed to only happen for valid, existing locales. As an aside, this is checking --locale for makemessages, but what about compilemessages? (And are their any others?)\nNow I am thinking more to avoid the coercing and to put just a warning message.\nTim Current implementation involved just adding the warning message. We are not normalizing locale now.\nTim, I would like to understand better what needs to be done next ?\nAs commented on the pull request, you cannot use the all_locales variable as a reference as it does not contain new (valid) language codes. The modified test in your patch shows a 'Invalid locale en' message which is obviously wrong, isn't it? You may try using the django.utils.translation.trans_real.language_code_re to check the locale code syntax.\nHi Vishvajit! Are you still working on the bug? Do you need any help?\nHi Sanyam, Yes, I am working on this ticket but your help would be very appreciated.\nHi, Here my thoughts: language_code_re gets 'pt_BR'. And it does not get 'ZH-CN'. I did this: r'[a-z]{2}(_[A-Z]{2})?' It seems to work. But one test prints: System check identified no issues (0 silenced). Invalid locale d Invalid locale e ................................................. ---------------------------------------------------------------------- Ran 49 tests in 1.425s OK I did a check and there is only one line - 740 - that's use locale=LOCALE. All others use locale=[LOCALE]. What do you think Mark?\nI forgot to say that the regrex I sent fails to: ja_JP_JP no_NO_NY th_TH_TH\nI'm going to de-assign this because there's been progress, so that someone looking can pick it up.\nCan I claim this? I think I can move this forward\nHi Manav, please do, no need to ask (but can I advise that you take just one at a time to begin :)\nCan we use LANG_INFO from django.conf.locale in order to solve the conflict and raise the warning or as an alternative of language_code_re? If yes, then please confirm so that I may submit a patch, and also please suggest some way to use the same. OR We could even use the regex from language_code_re which is re.compile(r'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*(?:@[a-z0-9]{1,20})?$', re.IGNORECASE) to solve the conflict and raise the warning. Please suggest the best option to work on, for the patch.\nThe problem with using LANG_INFO is that you exclude some extra languages added specifically for a project. You can try to use language_code_re, but you'll have to take into account the language code vs locale code difference.",
  "created_at": "2020-10-27T11:57:51Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_invalid_locale (i18n.test_extraction.BasicExtractorTests)\"]",
  "PASS_TO_PASS": "[\"test_no_locale_raises (i18n.test_extraction.CustomLayoutExtractionTests)\", \"test_project_locale_paths (i18n.test_extraction.CustomLayoutExtractionTests)\", \"test_project_locale_paths_pathlib (i18n.test_extraction.CustomLayoutExtractionTests)\", \"Ticket #20311.\", \"test_keep_pot_disabled_by_default (i18n.test_extraction.KeepPotFileExtractorTests)\", \"test_keep_pot_enabled (i18n.test_extraction.KeepPotFileExtractorTests)\", \"test_keep_pot_explicitly_disabled (i18n.test_extraction.KeepPotFileExtractorTests)\", \"test_default_root_settings (i18n.test_extraction.JavascriptExtractorTests)\", \"test_javascript_literals (i18n.test_extraction.JavascriptExtractorTests)\", \"test_media_static_dirs_ignored (i18n.test_extraction.JavascriptExtractorTests)\", \"test_makemessages_no_settings (i18n.test_extraction.NoSettingsExtractionTests)\", \"test_command_help (i18n.test_extraction.ExcludedLocaleExtractionTests)\", \"test_multiple_locales_excluded (i18n.test_extraction.ExcludedLocaleExtractionTests)\", \"test_multiple_locales_excluded_with_locale (i18n.test_extraction.ExcludedLocaleExtractionTests)\", \"test_one_locale_excluded (i18n.test_extraction.ExcludedLocaleExtractionTests)\", \"test_one_locale_excluded_with_locale (i18n.test_extraction.ExcludedLocaleExtractionTests)\", \"test_add_location_gettext_version_check (i18n.test_extraction.LocationCommentsTests)\", \"test_all_locales (i18n.test_extraction.MultipleLocaleExtractionTests)\", \"test_multiple_locales (i18n.test_extraction.MultipleLocaleExtractionTests)\", \"test_comments_extractor (i18n.test_extraction.BasicExtractorTests)\", \"test_extraction_error (i18n.test_extraction.BasicExtractorTests)\", \"test xgettext warning about multiple bare interpolation placeholders\", \"test_makemessages_find_files (i18n.test_extraction.BasicExtractorTests)\", \"test_makemessages_gettext_version (i18n.test_extraction.BasicExtractorTests)\", \"test_no_option (i18n.test_extraction.BasicExtractorTests)\", \"test_po_file_encoding_when_updating (i18n.test_extraction.BasicExtractorTests)\", \"Content-Type: ... charset=CHARSET is replaced with charset=UTF-8\", \"test_special_char_extracted (i18n.test_extraction.BasicExtractorTests)\", \"Template comment tags on the same line of other constructs (#19552)\", \"test_unicode_decode_error (i18n.test_extraction.BasicExtractorTests)\", \"test_use_i18n_false (i18n.test_extraction.BasicExtractorTests)\", \"test_valid_locale (i18n.test_extraction.BasicExtractorTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.664131",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}