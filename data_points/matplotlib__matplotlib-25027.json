{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25027",
  "base_commit": "f0f133943d3e4f1e2e665291fe1c8f658a84cc09",
  "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -5783,13 +5783,7 @@ def _pcolorargs(self, funcname, *args, shading='auto', **kwargs):\n                     raise ValueError(\n                         'x and y arguments to pcolormesh cannot have '\n                         'non-finite values or be of type '\n-                        'numpy.ma.core.MaskedArray with masked values')\n-                # safe_masked_invalid() returns an ndarray for dtypes other\n-                # than floating point.\n-                if isinstance(X, np.ma.core.MaskedArray):\n-                    X = X.data  # strip mask as downstream doesn't like it...\n-                if isinstance(Y, np.ma.core.MaskedArray):\n-                    Y = Y.data\n+                        'numpy.ma.MaskedArray with masked values')\n             nrows, ncols = C.shape[:2]\n         else:\n             raise _api.nargs_error(funcname, takes=\"1 or 3\", given=len(args))\n@@ -5839,9 +5833,11 @@ def _interp_grid(X):\n                                 \"This may lead to incorrectly calculated cell \"\n                                 \"edges, in which case, please supply \"\n                                 f\"explicit cell edges to {funcname}.\")\n-                        X = np.hstack((X[:, [0]] - dX[:, [0]],\n-                                       X[:, :-1] + dX,\n-                                       X[:, [-1]] + dX[:, [-1]]))\n+\n+                        hstack = np.ma.hstack if np.ma.isMA(X) else np.hstack\n+                        X = hstack((X[:, [0]] - dX[:, [0]],\n+                                    X[:, :-1] + dX,\n+                                    X[:, [-1]] + dX[:, [-1]]))\n                     else:\n                         # This is just degenerate, but we can't reliably guess\n                         # a dX if there is just one value.\n@@ -5959,7 +5955,7 @@ def pcolor(self, *args, shading=None, alpha=None, norm=None, cmap=None,\n \n         Returns\n         -------\n-        `matplotlib.collections.Collection`\n+        `matplotlib.collections.PolyQuadMesh`\n \n         Other Parameters\n         ----------------\n@@ -5977,7 +5973,7 @@ def pcolor(self, *args, shading=None, alpha=None, norm=None, cmap=None,\n \n         **kwargs\n             Additionally, the following arguments are allowed. They are passed\n-            along to the `~matplotlib.collections.PolyCollection` constructor:\n+            along to the `~matplotlib.collections.PolyQuadMesh` constructor:\n \n         %(PolyCollection:kwdoc)s\n \n@@ -6011,35 +6007,6 @@ def pcolor(self, *args, shading=None, alpha=None, norm=None, cmap=None,\n         shading = shading.lower()\n         X, Y, C, shading = self._pcolorargs('pcolor', *args, shading=shading,\n                                             kwargs=kwargs)\n-        Ny, Nx = X.shape\n-\n-        # convert to MA, if necessary.\n-        C = ma.asarray(C)\n-        X = ma.asarray(X)\n-        Y = ma.asarray(Y)\n-\n-        mask = ma.getmaskarray(X) + ma.getmaskarray(Y)\n-        xymask = (mask[0:-1, 0:-1] + mask[1:, 1:] +\n-                  mask[0:-1, 1:] + mask[1:, 0:-1])\n-        # don't plot if C or any of the surrounding vertices are masked.\n-        mask = ma.getmaskarray(C) + xymask\n-\n-        unmask = ~mask\n-        X1 = ma.filled(X[:-1, :-1])[unmask]\n-        Y1 = ma.filled(Y[:-1, :-1])[unmask]\n-        X2 = ma.filled(X[1:, :-1])[unmask]\n-        Y2 = ma.filled(Y[1:, :-1])[unmask]\n-        X3 = ma.filled(X[1:, 1:])[unmask]\n-        Y3 = ma.filled(Y[1:, 1:])[unmask]\n-        X4 = ma.filled(X[:-1, 1:])[unmask]\n-        Y4 = ma.filled(Y[:-1, 1:])[unmask]\n-        npoly = len(X1)\n-\n-        xy = np.stack([X1, Y1, X2, Y2, X3, Y3, X4, Y4, X1, Y1], axis=-1)\n-        verts = xy.reshape((npoly, 5, 2))\n-\n-        C = ma.filled(C[:Ny - 1, :Nx - 1])[unmask]\n-\n         linewidths = (0.25,)\n         if 'linewidth' in kwargs:\n             kwargs['linewidths'] = kwargs.pop('linewidth')\n@@ -6053,19 +6020,29 @@ def pcolor(self, *args, shading=None, alpha=None, norm=None, cmap=None,\n         # unless the boundary is not stroked, in which case the\n         # default will be False; with unstroked boundaries, aa\n         # makes artifacts that are often disturbing.\n-        if 'antialiased' in kwargs:\n-            kwargs['antialiaseds'] = kwargs.pop('antialiased')\n-        if 'antialiaseds' not in kwargs and cbook._str_lower_equal(ec, \"none\"):\n-            kwargs['antialiaseds'] = False\n+        if 'antialiaseds' in kwargs:\n+            kwargs['antialiased'] = kwargs.pop('antialiaseds')\n+        if 'antialiased' not in kwargs and cbook._str_lower_equal(ec, \"none\"):\n+            kwargs['antialiased'] = False\n \n         kwargs.setdefault('snap', False)\n \n-        collection = mcoll.PolyCollection(\n-            verts, array=C, cmap=cmap, norm=norm, alpha=alpha, **kwargs)\n-        collection._scale_norm(norm, vmin, vmax)\n+        if np.ma.isMaskedArray(X) or np.ma.isMaskedArray(Y):\n+            stack = np.ma.stack\n+            X = np.ma.asarray(X)\n+            Y = np.ma.asarray(Y)\n+            # For bounds collections later\n+            x = X.compressed()\n+            y = Y.compressed()\n+        else:\n+            stack = np.stack\n+            x = X\n+            y = Y\n+        coords = stack([X, Y], axis=-1)\n \n-        x = X.compressed()\n-        y = Y.compressed()\n+        collection = mcoll.PolyQuadMesh(\n+            coords, array=C, cmap=cmap, norm=norm, alpha=alpha, **kwargs)\n+        collection._scale_norm(norm, vmin, vmax)\n \n         # Transform from native to data coordinates?\n         t = collection._transform\n@@ -6258,7 +6235,7 @@ def pcolormesh(self, *args, alpha=None, norm=None, cmap=None, vmin=None,\n \n         The main difference lies in the created object and internal data\n         handling:\n-        While `~.Axes.pcolor` returns a `.PolyCollection`, `~.Axes.pcolormesh`\n+        While `~.Axes.pcolor` returns a `.PolyQuadMesh`, `~.Axes.pcolormesh`\n         returns a `.QuadMesh`. The latter is more specialized for the given\n         purpose and thus is faster. It should almost always be preferred.\n \n@@ -6267,12 +6244,13 @@ def pcolormesh(self, *args, alpha=None, norm=None, cmap=None, vmin=None,\n         for *C*. However, only `~.Axes.pcolor` supports masked arrays for *X*\n         and *Y*. The reason lies in the internal handling of the masked values.\n         `~.Axes.pcolor` leaves out the respective polygons from the\n-        PolyCollection. `~.Axes.pcolormesh` sets the facecolor of the masked\n+        PolyQuadMesh. `~.Axes.pcolormesh` sets the facecolor of the masked\n         elements to transparent. You can see the difference when using\n         edgecolors. While all edges are drawn irrespective of masking in a\n         QuadMesh, the edge between two adjacent masked quadrilaterals in\n         `~.Axes.pcolor` is not drawn as the corresponding polygons do not\n-        exist in the PolyCollection.\n+        exist in the PolyQuadMesh. Because PolyQuadMesh draws each individual\n+        polygon, it also supports applying hatches and linestyles to the collection.\n \n         Another difference is the support of Gouraud shading in\n         `~.Axes.pcolormesh`, which is not available with `~.Axes.pcolor`.\ndiff --git a/lib/matplotlib/collections.py b/lib/matplotlib/collections.py\n--- a/lib/matplotlib/collections.py\n+++ b/lib/matplotlib/collections.py\n@@ -875,7 +875,7 @@ def update_scalarmappable(self):\n         # Allow possibility to call 'self.set_array(None)'.\n         if self._A is not None:\n             # QuadMesh can map 2d arrays (but pcolormesh supplies 1d array)\n-            if self._A.ndim > 1 and not isinstance(self, QuadMesh):\n+            if self._A.ndim > 1 and not isinstance(self, _MeshData):\n                 raise ValueError('Collections can only map rank 1 arrays')\n             if np.iterable(self._alpha):\n                 if self._alpha.size != self._A.size:\n@@ -1944,9 +1944,11 @@ def draw(self, renderer):\n         renderer.close_group(self.__class__.__name__)\n \n \n-class QuadMesh(Collection):\n+class _MeshData:\n     r\"\"\"\n-    Class for the efficient drawing of a quadrilateral mesh.\n+    Class for managing the two dimensional coordinates of Quadrilateral meshes\n+    and the associated data with them. This class is a mixin and is intended to\n+    be used with another collection that will implement the draw separately.\n \n     A quadrilateral mesh is a grid of M by N adjacent quadrilaterals that are\n     defined via a (M+1, N+1) grid of vertices. The quadrilateral (m, n) is\n@@ -1966,42 +1968,12 @@ class QuadMesh(Collection):\n         The vertices. ``coordinates[m, n]`` specifies the (x, y) coordinates\n         of vertex (m, n).\n \n-    antialiased : bool, default: True\n-\n     shading : {'flat', 'gouraud'}, default: 'flat'\n-\n-    Notes\n-    -----\n-    Unlike other `.Collection`\\s, the default *pickradius* of `.QuadMesh` is 0,\n-    i.e. `~.Artist.contains` checks whether the test point is within any of the\n-    mesh quadrilaterals.\n-\n     \"\"\"\n-\n-    def __init__(self, coordinates, *, antialiased=True, shading='flat',\n-                 **kwargs):\n-        kwargs.setdefault(\"pickradius\", 0)\n-        # end of signature deprecation code\n-\n+    def __init__(self, coordinates, *, shading='flat'):\n         _api.check_shape((None, None, 2), coordinates=coordinates)\n         self._coordinates = coordinates\n-        self._antialiased = antialiased\n         self._shading = shading\n-        self._bbox = transforms.Bbox.unit()\n-        self._bbox.update_from_data_xy(self._coordinates.reshape(-1, 2))\n-        # super init delayed after own init because array kwarg requires\n-        # self._coordinates and self._shading\n-        super().__init__(**kwargs)\n-        self.set_mouseover(False)\n-\n-    def get_paths(self):\n-        if self._paths is None:\n-            self.set_paths()\n-        return self._paths\n-\n-    def set_paths(self):\n-        self._paths = self._convert_mesh_to_paths(self._coordinates)\n-        self.stale = True\n \n     def set_array(self, A):\n         \"\"\"\n@@ -2040,9 +2012,6 @@ def set_array(self, A):\n                     f\"{' or '.join(map(str, ok_shapes))}, not {A.shape}\")\n         return super().set_array(A)\n \n-    def get_datalim(self, transData):\n-        return (self.get_transform() - transData).transform_bbox(self._bbox)\n-\n     def get_coordinates(self):\n         \"\"\"\n         Return the vertices of the mesh as an (M+1, N+1, 2) array.\n@@ -2053,6 +2022,18 @@ def get_coordinates(self):\n         \"\"\"\n         return self._coordinates\n \n+    def get_edgecolor(self):\n+        # docstring inherited\n+        # Note that we want to return an array of shape (N*M, 4)\n+        # a flattened RGBA collection\n+        return super().get_edgecolor().reshape(-1, 4)\n+\n+    def get_facecolor(self):\n+        # docstring inherited\n+        # Note that we want to return an array of shape (N*M, 4)\n+        # a flattened RGBA collection\n+        return super().get_facecolor().reshape(-1, 4)\n+\n     @staticmethod\n     def _convert_mesh_to_paths(coordinates):\n         \"\"\"\n@@ -2116,6 +2097,64 @@ def _convert_mesh_to_triangles(self, coordinates):\n         tmask = np.isnan(colors[..., 2, 3])\n         return triangles[~tmask], colors[~tmask]\n \n+\n+class QuadMesh(_MeshData, Collection):\n+    r\"\"\"\n+    Class for the efficient drawing of a quadrilateral mesh.\n+\n+    A quadrilateral mesh is a grid of M by N adjacent quadrilaterals that are\n+    defined via a (M+1, N+1) grid of vertices. The quadrilateral (m, n) is\n+    defined by the vertices ::\n+\n+               (m+1, n) ----------- (m+1, n+1)\n+                  /                   /\n+                 /                 /\n+                /               /\n+            (m, n) -------- (m, n+1)\n+\n+    The mesh need not be regular and the polygons need not be convex.\n+\n+    Parameters\n+    ----------\n+    coordinates : (M+1, N+1, 2) array-like\n+        The vertices. ``coordinates[m, n]`` specifies the (x, y) coordinates\n+        of vertex (m, n).\n+\n+    antialiased : bool, default: True\n+\n+    shading : {'flat', 'gouraud'}, default: 'flat'\n+\n+    Notes\n+    -----\n+    Unlike other `.Collection`\\s, the default *pickradius* of `.QuadMesh` is 0,\n+    i.e. `~.Artist.contains` checks whether the test point is within any of the\n+    mesh quadrilaterals.\n+\n+    \"\"\"\n+\n+    def __init__(self, coordinates, *, antialiased=True, shading='flat',\n+                 **kwargs):\n+        kwargs.setdefault(\"pickradius\", 0)\n+        super().__init__(coordinates=coordinates, shading=shading)\n+        Collection.__init__(self, **kwargs)\n+\n+        self._antialiased = antialiased\n+        self._bbox = transforms.Bbox.unit()\n+        self._bbox.update_from_data_xy(self._coordinates.reshape(-1, 2))\n+        self.set_mouseover(False)\n+\n+    def get_paths(self):\n+        if self._paths is None:\n+            self.set_paths()\n+        return self._paths\n+\n+    def set_paths(self):\n+        self._paths = self._convert_mesh_to_paths(self._coordinates)\n+        self.stale = True\n+\n+    def get_datalim(self, transData):\n+        return (self.get_transform() - transData).transform_bbox(self._bbox)\n+\n     @artist.allow_rasterization\n     def draw(self, renderer):\n         if not self.get_visible():\n@@ -2170,3 +2209,161 @@ def get_cursor_data(self, event):\n         if contained and self.get_array() is not None:\n             return self.get_array().ravel()[info[\"ind\"]]\n         return None\n+\n+\n+class PolyQuadMesh(_MeshData, PolyCollection):\n+    \"\"\"\n+    Class for drawing a quadrilateral mesh as individual Polygons.\n+\n+    A quadrilateral mesh is a grid of M by N adjacent quadrilaterals that are\n+    defined via a (M+1, N+1) grid of vertices. The quadrilateral (m, n) is\n+    defined by the vertices ::\n+\n+               (m+1, n) ----------- (m+1, n+1)\n+                  /                   /\n+                 /                 /\n+                /               /\n+            (m, n) -------- (m, n+1)\n+\n+    The mesh need not be regular and the polygons need not be convex.\n+\n+    Parameters\n+    ----------\n+    coordinates : (M+1, N+1, 2) array-like\n+        The vertices. ``coordinates[m, n]`` specifies the (x, y) coordinates\n+        of vertex (m, n).\n+\n+    Notes\n+    -----\n+    Unlike `.QuadMesh`, this class will draw each cell as an individual Polygon.\n+    This is significantly slower, but allows for more flexibility when wanting\n+    to add additional properties to the cells, such as hatching.\n+\n+    Another difference from `.QuadMesh` is that if any of the vertices or data\n+    of a cell are masked, that Polygon will **not** be drawn and it won't be in\n+    the list of paths returned.\n+    \"\"\"\n+\n+    def __init__(self, coordinates, **kwargs):\n+        # We need to keep track of whether we are using deprecated compression\n+        # Update it after the initializers\n+        self._deprecated_compression = False\n+        super().__init__(coordinates=coordinates)\n+        PolyCollection.__init__(self, verts=[], **kwargs)\n+        # Store this during the compression deprecation period\n+        self._original_mask = ~self._get_unmasked_polys()\n+        self._deprecated_compression = np.any(self._original_mask)\n+        # Setting the verts updates the paths of the PolyCollection\n+        # This is called after the initializers to make sure the kwargs\n+        # have all been processed and available for the masking calculations\n+        self._set_unmasked_verts()\n+\n+    def _get_unmasked_polys(self):\n+        \"\"\"Get the unmasked regions using the coordinates and array\"\"\"\n+        # mask(X) | mask(Y)\n+        mask = np.any(np.ma.getmaskarray(self._coordinates), axis=-1)\n+\n+        # We want the shape of the polygon, which is the corner of each X/Y array\n+        mask = (mask[0:-1, 0:-1] | mask[1:, 1:] | mask[0:-1, 1:] | mask[1:, 0:-1])\n+\n+        if (getattr(self, \"_deprecated_compression\", False) and\n+                np.any(self._original_mask)):\n+            return ~(mask | self._original_mask)\n+        # Take account of the array data too, temporarily avoiding\n+        # the compression warning and resetting the variable after the call\n+        with cbook._setattr_cm(self, _deprecated_compression=False):\n+            arr = self.get_array()\n+        if arr is not None:\n+            arr = np.ma.getmaskarray(arr)\n+            if arr.ndim == 3:\n+                # RGB(A) case\n+                mask |= np.any(arr, axis=-1)\n+            elif arr.ndim == 2:\n+                mask |= arr\n+            else:\n+                mask |= arr.reshape(self._coordinates[:-1, :-1, :].shape[:2])\n+        return ~mask\n+\n+    def _set_unmasked_verts(self):\n+        X = self._coordinates[..., 0]\n+        Y = self._coordinates[..., 1]\n+\n+        unmask = self._get_unmasked_polys()\n+        X1 = np.ma.filled(X[:-1, :-1])[unmask]\n+        Y1 = np.ma.filled(Y[:-1, :-1])[unmask]\n+        X2 = np.ma.filled(X[1:, :-1])[unmask]\n+        Y2 = np.ma.filled(Y[1:, :-1])[unmask]\n+        X3 = np.ma.filled(X[1:, 1:])[unmask]\n+        Y3 = np.ma.filled(Y[1:, 1:])[unmask]\n+        X4 = np.ma.filled(X[:-1, 1:])[unmask]\n+        Y4 = np.ma.filled(Y[:-1, 1:])[unmask]\n+        npoly = len(X1)\n+\n+        xy = np.ma.stack([X1, Y1, X2, Y2, X3, Y3, X4, Y4, X1, Y1], axis=-1)\n+        verts = xy.reshape((npoly, 5, 2))\n+        self.set_verts(verts)\n+\n+    def get_edgecolor(self):\n+        # docstring inherited\n+        # We only want to return the facecolors of the polygons\n+        # that were drawn.\n+        ec = super().get_edgecolor()\n+        unmasked_polys = self._get_unmasked_polys().ravel()\n+        if len(ec) != len(unmasked_polys):\n+            # Mapping is off\n+            return ec\n+        return ec[unmasked_polys, :]\n+\n+    def get_facecolor(self):\n+        # docstring inherited\n+        # We only want to return the facecolors of the polygons\n+        # that were drawn.\n+        fc = super().get_facecolor()\n+        unmasked_polys = self._get_unmasked_polys().ravel()\n+        if len(fc) != len(unmasked_polys):\n+            # Mapping is off\n+            return fc\n+        return fc[unmasked_polys, :]\n+\n+    def set_array(self, A):\n+        # docstring inherited\n+        prev_unmask = self._get_unmasked_polys()\n+        # MPL <3.8 compressed the mask, so we need to handle flattened 1d input\n+        # until the deprecation expires, also only warning when there are masked\n+        # elements and thus compression occurring.\n+        if self._deprecated_compression and np.ndim(A) == 1:\n+            _api.warn_deprecated(\"3.8\", message=\"Setting a PolyQuadMesh array using \"\n+                                 \"the compressed values is deprecated. \"\n+                                 \"Pass the full 2D shape of the original array \"\n+                                 f\"{prev_unmask.shape} including the masked elements.\")\n+            Afull = np.empty(self._original_mask.shape)\n+            Afull[~self._original_mask] = A\n+            # We also want to update the mask with any potential\n+            # new masked elements that came in. But, we don't want\n+            # to update any of the compression from the original\n+            mask = self._original_mask.copy()\n+            mask[~self._original_mask] |= np.ma.getmask(A)\n+            A = np.ma.array(Afull, mask=mask)\n+            return super().set_array(A)\n+        self._deprecated_compression = False\n+        super().set_array(A)\n+        # If the mask has changed at all we need to update\n+        # the set of Polys that we are drawing\n+        if not np.array_equal(prev_unmask, self._get_unmasked_polys()):\n+            self._set_unmasked_verts()\n+\n+    def get_array(self):\n+        # docstring inherited\n+        # Can remove this entire function once the deprecation period ends\n+        A = super().get_array()\n+        if A is None:\n+            return\n+        if self._deprecated_compression and np.any(np.ma.getmask(A)):\n+            _api.warn_deprecated(\"3.8\", message=(\n+                \"Getting the array from a PolyQuadMesh will return the full \"\n+                \"array in the future (uncompressed). To get this behavior now \"\n+                \"set the PolyQuadMesh with a 2D array .set_array(data2d).\"))\n+            # Setting an array of a polycollection required\n+            # compressing the array\n+            return np.ma.compressed(A)\n+        return A\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_collections.py b/lib/matplotlib/tests/test_collections.py\n--- a/lib/matplotlib/tests/test_collections.py\n+++ b/lib/matplotlib/tests/test_collections.py\n@@ -19,6 +19,11 @@\n from matplotlib.testing.decorators import check_figures_equal, image_comparison\n \n \n+@pytest.fixture(params=[\"pcolormesh\", \"pcolor\"])\n+def pcfunc(request):\n+    return request.param\n+\n+\n def generate_EventCollection_plot():\n     \"\"\"Generate the initial collection and plot it.\"\"\"\n     positions = np.array([0., 1., 2., 3., 5., 8., 13., 21.])\n@@ -818,12 +823,12 @@ def test_autolim_with_zeros(transform, expected):\n     np.testing.assert_allclose(ax.get_xlim(), expected)\n \n \n-def test_quadmesh_set_array_validation():\n+def test_quadmesh_set_array_validation(pcfunc):\n     x = np.arange(11)\n     y = np.arange(8)\n     z = np.random.random((7, 10))\n     fig, ax = plt.subplots()\n-    coll = ax.pcolormesh(x, y, z)\n+    coll = getattr(ax, pcfunc)(x, y, z)\n \n     with pytest.raises(ValueError, match=re.escape(\n             \"For X (11) and Y (8) with flat shading, A should have shape \"\n@@ -866,12 +871,65 @@ def test_quadmesh_set_array_validation():\n     coll = ax.pcolormesh(x, y, z, shading='gouraud')\n \n \n-def test_quadmesh_get_coordinates():\n+def test_polyquadmesh_masked_vertices_array():\n+    xx, yy = np.meshgrid([0, 1, 2], [0, 1, 2, 3])\n+    # 2 x 3 mesh data\n+    zz = (xx*yy)[:-1, :-1]\n+    quadmesh = plt.pcolormesh(xx, yy, zz)\n+    quadmesh.update_scalarmappable()\n+    quadmesh_fc = quadmesh.get_facecolor()[1:, :]\n+    # Mask the origin vertex in x\n+    xx = np.ma.masked_where((xx == 0) & (yy == 0), xx)\n+    polymesh = plt.pcolor(xx, yy, zz)\n+    polymesh.update_scalarmappable()\n+    # One cell should be left out\n+    assert len(polymesh.get_paths()) == 5\n+    # Poly version should have the same facecolors as the end of the quadmesh\n+    assert_array_equal(quadmesh_fc, polymesh.get_facecolor())\n+\n+    # Mask the origin vertex in y\n+    yy = np.ma.masked_where((xx == 0) & (yy == 0), yy)\n+    polymesh = plt.pcolor(xx, yy, zz)\n+    polymesh.update_scalarmappable()\n+    # One cell should be left out\n+    assert len(polymesh.get_paths()) == 5\n+    # Poly version should have the same facecolors as the end of the quadmesh\n+    assert_array_equal(quadmesh_fc, polymesh.get_facecolor())\n+\n+    # Mask the origin cell data\n+    zz = np.ma.masked_where((xx[:-1, :-1] == 0) & (yy[:-1, :-1] == 0), zz)\n+    polymesh = plt.pcolor(zz)\n+    polymesh.update_scalarmappable()\n+    # One cell should be left out\n+    assert len(polymesh.get_paths()) == 5\n+    # Poly version should have the same facecolors as the end of the quadmesh\n+    assert_array_equal(quadmesh_fc, polymesh.get_facecolor())\n+\n+    # Setting array with 1D compressed values is deprecated\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning,\n+                      match=\"Setting a PolyQuadMesh\"):\n+        polymesh.set_array(np.ones(5))\n+\n+    # We should also be able to call set_array with a new mask and get\n+    # updated polys\n+    # Remove mask, should add all polys back\n+    zz = np.arange(6).reshape((3, 2))\n+    polymesh.set_array(zz)\n+    polymesh.update_scalarmappable()\n+    assert len(polymesh.get_paths()) == 6\n+    # Add mask should remove polys\n+    zz = np.ma.masked_less(zz, 2)\n+    polymesh.set_array(zz)\n+    polymesh.update_scalarmappable()\n+    assert len(polymesh.get_paths()) == 4\n+\n+\n+def test_quadmesh_get_coordinates(pcfunc):\n     x = [0, 1, 2]\n     y = [2, 4, 6]\n     z = np.ones(shape=(2, 2))\n     xx, yy = np.meshgrid(x, y)\n-    coll = plt.pcolormesh(xx, yy, z)\n+    coll = getattr(plt, pcfunc)(xx, yy, z)\n \n     # shape (3, 3, 2)\n     coords = np.stack([xx.T, yy.T]).T\n@@ -908,23 +966,23 @@ def test_quadmesh_set_array():\n     assert np.array_equal(coll.get_array(), np.ones(16))\n \n \n-def test_quadmesh_vmin_vmax():\n+def test_quadmesh_vmin_vmax(pcfunc):\n     # test when vmin/vmax on the norm changes, the quadmesh gets updated\n     fig, ax = plt.subplots()\n     cmap = mpl.colormaps['plasma']\n     norm = mpl.colors.Normalize(vmin=0, vmax=1)\n-    coll = ax.pcolormesh([[1]], cmap=cmap, norm=norm)\n+    coll = getattr(ax, pcfunc)([[1]], cmap=cmap, norm=norm)\n     fig.canvas.draw()\n-    assert np.array_equal(coll.get_facecolors()[0, 0, :], cmap(norm(1)))\n+    assert np.array_equal(coll.get_facecolors()[0, :], cmap(norm(1)))\n \n     # Change the vmin/vmax of the norm so that the color is from\n     # the bottom of the colormap now\n     norm.vmin, norm.vmax = 1, 2\n     fig.canvas.draw()\n-    assert np.array_equal(coll.get_facecolors()[0, 0, :], cmap(norm(1)))\n+    assert np.array_equal(coll.get_facecolors()[0, :], cmap(norm(1)))\n \n \n-def test_quadmesh_alpha_array():\n+def test_quadmesh_alpha_array(pcfunc):\n     x = np.arange(4)\n     y = np.arange(4)\n     z = np.arange(9).reshape((3, 3))\n@@ -932,26 +990,26 @@ def test_quadmesh_alpha_array():\n     alpha_flat = alpha.ravel()\n     # Provide 2-D alpha:\n     fig, (ax0, ax1) = plt.subplots(2)\n-    coll1 = ax0.pcolormesh(x, y, z, alpha=alpha)\n-    coll2 = ax1.pcolormesh(x, y, z)\n+    coll1 = getattr(ax0, pcfunc)(x, y, z, alpha=alpha)\n+    coll2 = getattr(ax0, pcfunc)(x, y, z)\n     coll2.set_alpha(alpha)\n     plt.draw()\n-    assert_array_equal(coll1.get_facecolors()[..., -1], alpha)\n-    assert_array_equal(coll2.get_facecolors()[..., -1], alpha)\n+    assert_array_equal(coll1.get_facecolors()[:, -1], alpha_flat)\n+    assert_array_equal(coll2.get_facecolors()[:, -1], alpha_flat)\n     # Or provide 1-D alpha:\n     fig, (ax0, ax1) = plt.subplots(2)\n-    coll1 = ax0.pcolormesh(x, y, z, alpha=alpha)\n-    coll2 = ax1.pcolormesh(x, y, z)\n+    coll1 = getattr(ax0, pcfunc)(x, y, z, alpha=alpha)\n+    coll2 = getattr(ax1, pcfunc)(x, y, z)\n     coll2.set_alpha(alpha)\n     plt.draw()\n-    assert_array_equal(coll1.get_facecolors()[..., -1], alpha)\n-    assert_array_equal(coll2.get_facecolors()[..., -1], alpha)\n+    assert_array_equal(coll1.get_facecolors()[:, -1], alpha_flat)\n+    assert_array_equal(coll2.get_facecolors()[:, -1], alpha_flat)\n \n \n-def test_alpha_validation():\n+def test_alpha_validation(pcfunc):\n     # Most of the relevant testing is in test_artist and test_colors.\n     fig, ax = plt.subplots()\n-    pc = ax.pcolormesh(np.arange(12).reshape((3, 4)))\n+    pc = getattr(ax, pcfunc)(np.arange(12).reshape((3, 4)))\n     with pytest.raises(ValueError, match=\"^Data array shape\"):\n         pc.set_alpha([0.5, 0.6])\n         pc.update_scalarmappable()\n@@ -985,15 +1043,15 @@ def test_legend_inverse_size_label_relationship():\n \n \n @mpl.style.context('default')\n-@pytest.mark.parametrize('pcfunc', [plt.pcolor, plt.pcolormesh])\n def test_color_logic(pcfunc):\n+    pcfunc = getattr(plt, pcfunc)\n     z = np.arange(12).reshape(3, 4)\n     # Explicitly set an edgecolor.\n     pc = pcfunc(z, edgecolors='red', facecolors='none')\n     pc.update_scalarmappable()  # This is called in draw().\n     # Define 2 reference \"colors\" here for multiple use.\n     face_default = mcolors.to_rgba_array(pc._get_default_facecolor())\n-    mapped = pc.get_cmap()(pc.norm(z.ravel() if pcfunc == plt.pcolor else z))\n+    mapped = pc.get_cmap()(pc.norm(z.ravel()))\n     # GitHub issue #1302:\n     assert mcolors.same_color(pc.get_edgecolor(), 'red')\n     # Check setting attributes after initialization:\n@@ -1023,7 +1081,7 @@ def test_color_logic(pcfunc):\n     assert mcolors.same_color(pc.get_edgecolor(), 'none')\n     assert mcolors.same_color(pc.get_facecolor(), face_default)  # not mapped\n     # Turn it back on by restoring the array (must be 1D!):\n-    pc.set_array(z.ravel() if pcfunc == plt.pcolor else z)\n+    pc.set_array(z)\n     pc.update_scalarmappable()\n     assert np.array_equal(pc.get_facecolor(), mapped)\n     assert mcolors.same_color(pc.get_edgecolor(), 'none')\n@@ -1068,18 +1126,20 @@ def test_LineCollection_args():\n     assert mcolors.same_color(lc.get_facecolor(), 'none')\n \n \n-def test_array_wrong_dimensions():\n+def test_array_dimensions(pcfunc):\n+    # Make sure we can set the 1D, 2D, and 3D array shapes\n     z = np.arange(12).reshape(3, 4)\n-    pc = plt.pcolor(z)\n-    with pytest.raises(ValueError, match=\"^Collections can only map\"):\n-        pc.set_array(z)\n-        pc.update_scalarmappable()\n-    pc = plt.pcolormesh(z)\n-    pc.set_array(z)  # 2D is OK for Quadmesh\n+    pc = getattr(plt, pcfunc)(z)\n+    # 1D\n+    pc.set_array(z.ravel())\n+    pc.update_scalarmappable()\n+    # 2D\n+    pc.set_array(z)\n     pc.update_scalarmappable()\n     # 3D RGB is OK as well\n-    z = np.arange(36).reshape(3, 4, 3)\n+    z = np.arange(36, dtype=np.uint8).reshape(3, 4, 3)\n     pc.set_array(z)\n+    pc.update_scalarmappable()\n \n \n def test_get_segments():\n",
  "problem_statement": "[ENH]: support RGB(A) in pcolor\n### Problem\n\nSince #24619 `pcolormesh` can handle RGB(A) arrays.  There is an entirely reasonable request in Cartopy that `pcolormesh` there also supports this (https://github.com/SciTools/cartopy/issues/2156).  However, Cartopy’s wrapping logic for `pcolormesh` actually [uses `pcolor` under the hood](https://github.com/SciTools/cartopy/blob/c8f1b0f2363bcceca75d2afaaee6988b7717cfa7/lib/cartopy/mpl/geoaxes.py#L1954-L1964), so we’d need RGB(A) support in `pcolor` before we could get it working.\n\n### Proposed solution\n\nI think we first need #25027 and then add RGB(A) logic on top of that, but I have not dug too far into the details.\r\n\r\ncc @greglucas\n",
  "hints_text": "",
  "created_at": "2023-01-19T02:43:47Z",
  "version": "3.6",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_collections.py::test_quadmesh_set_array_validation[pcolor]\", \"lib/matplotlib/tests/test_collections.py::test_polyquadmesh_masked_vertices_array\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_get_coordinates[pcolor]\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_vmin_vmax[pcolormesh]\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_alpha_array[pcolormesh]\", \"lib/matplotlib/tests/test_collections.py::test_color_logic[pcolormesh]\", \"lib/matplotlib/tests/test_collections.py::test_color_logic[pcolor]\", \"lib/matplotlib/tests/test_collections.py::test_array_dimensions[pcolor]\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_collections.py::test__EventCollection__get_props[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__get_props[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_positions[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_positions[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__add_positions[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__add_positions[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__append_positions[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__append_positions[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__extend_positions[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__extend_positions[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__switch_orientation[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__switch_orientation[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__switch_orientation_2x[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__switch_orientation_2x[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_orientation[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_orientation[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_linelength[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_linelength[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_lineoffset[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_lineoffset[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_prop[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_prop[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_color[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_color[pdf]\", \"lib/matplotlib/tests/test_collections.py::test_null_collection_datalim\", \"lib/matplotlib/tests/test_collections.py::test_no_offsets_datalim\", \"lib/matplotlib/tests/test_collections.py::test_add_collection\", \"lib/matplotlib/tests/test_collections.py::test_collection_log_datalim[png]\", \"lib/matplotlib/tests/test_collections.py::test_quiver_limits\", \"lib/matplotlib/tests/test_collections.py::test_barb_limits\", \"lib/matplotlib/tests/test_collections.py::test_EllipseCollection[png]\", \"lib/matplotlib/tests/test_collections.py::test_polycollection_close[png]\", \"lib/matplotlib/tests/test_collections.py::test_regularpolycollection_rotate[png]\", \"lib/matplotlib/tests/test_collections.py::test_regularpolycollection_scale[png]\", \"lib/matplotlib/tests/test_collections.py::test_picking\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_contains\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_contains_concave\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_cursor_data\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_cursor_data_multiple_points\", \"lib/matplotlib/tests/test_collections.py::test_linestyle_single_dashes\", \"lib/matplotlib/tests/test_collections.py::test_size_in_xy[png]\", \"lib/matplotlib/tests/test_collections.py::test_pandas_indexing\", \"lib/matplotlib/tests/test_collections.py::test_lslw_bcast\", \"lib/matplotlib/tests/test_collections.py::test_set_wrong_linestyle\", \"lib/matplotlib/tests/test_collections.py::test_capstyle\", \"lib/matplotlib/tests/test_collections.py::test_joinstyle\", \"lib/matplotlib/tests/test_collections.py::test_cap_and_joinstyle_image[png]\", \"lib/matplotlib/tests/test_collections.py::test_scatter_post_alpha[png]\", \"lib/matplotlib/tests/test_collections.py::test_scatter_alpha_array\", \"lib/matplotlib/tests/test_collections.py::test_pathcollection_legend_elements\", \"lib/matplotlib/tests/test_collections.py::test_EventCollection_nosort\", \"lib/matplotlib/tests/test_collections.py::test_collection_set_verts_array\", \"lib/matplotlib/tests/test_collections.py::test_collection_set_array\", \"lib/matplotlib/tests/test_collections.py::test_blended_collection_autolim\", \"lib/matplotlib/tests/test_collections.py::test_singleton_autolim\", \"lib/matplotlib/tests/test_collections.py::test_autolim_with_zeros[transData-expected0]\", \"lib/matplotlib/tests/test_collections.py::test_autolim_with_zeros[transAxes-expected1]\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_set_array_validation[pcolormesh]\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_get_coordinates[pcolormesh]\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_set_array\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_vmin_vmax[pcolor]\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_alpha_array[pcolor]\", \"lib/matplotlib/tests/test_collections.py::test_alpha_validation[pcolormesh]\", \"lib/matplotlib/tests/test_collections.py::test_alpha_validation[pcolor]\", \"lib/matplotlib/tests/test_collections.py::test_legend_inverse_size_label_relationship\", \"lib/matplotlib/tests/test_collections.py::test_LineCollection_args\", \"lib/matplotlib/tests/test_collections.py::test_array_dimensions[pcolormesh]\", \"lib/matplotlib/tests/test_collections.py::test_get_segments\", \"lib/matplotlib/tests/test_collections.py::test_set_offsets_late\", \"lib/matplotlib/tests/test_collections.py::test_set_offset_transform\", \"lib/matplotlib/tests/test_collections.py::test_set_offset_units\", \"lib/matplotlib/tests/test_collections.py::test_check_masked_offsets[png]\", \"lib/matplotlib/tests/test_collections.py::test_masked_set_offsets[png]\", \"lib/matplotlib/tests/test_collections.py::test_check_offsets_dtype\", \"lib/matplotlib/tests/test_collections.py::test_striped_lines[png-orange]\", \"lib/matplotlib/tests/test_collections.py::test_striped_lines[png-gapcolor1]\"]",
  "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.816337",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}