{
  "repo": "django/django",
  "instance_id": "django__django-11030",
  "base_commit": "2aaabe2004e1953eb7d7057edcf2fabd37f7394d",
  "patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -64,7 +64,7 @@ def default_alias(self):\n             return '%s__%s' % (expressions[0].name, self.name.lower())\n         raise TypeError(\"Complex expressions require an alias\")\n \n-    def get_group_by_cols(self):\n+    def get_group_by_cols(self, alias=None):\n         return []\n \n     def as_sql(self, compiler, connection, **extra_context):\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -332,7 +332,7 @@ def relabeled_clone(self, change_map):\n     def copy(self):\n         return copy.copy(self)\n \n-    def get_group_by_cols(self):\n+    def get_group_by_cols(self, alias=None):\n         if not self.contains_aggregate:\n             return [self]\n         cols = []\n@@ -669,7 +669,7 @@ def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize\n         c.for_save = for_save\n         return c\n \n-    def get_group_by_cols(self):\n+    def get_group_by_cols(self, alias=None):\n         return []\n \n \n@@ -694,7 +694,7 @@ def __repr__(self):\n     def as_sql(self, compiler, connection):\n         return '(%s)' % self.sql, self.params\n \n-    def get_group_by_cols(self):\n+    def get_group_by_cols(self, alias=None):\n         return [self]\n \n \n@@ -737,7 +737,7 @@ def as_sql(self, compiler, connection):\n     def relabeled_clone(self, relabels):\n         return self.__class__(relabels.get(self.alias, self.alias), self.target, self.output_field)\n \n-    def get_group_by_cols(self):\n+    def get_group_by_cols(self, alias=None):\n         return [self]\n \n     def get_db_converters(self, connection):\n@@ -769,7 +769,7 @@ def as_sql(self, compiler, connection):\n         qn = compiler.quote_name_unless_alias\n         return qn(self.target.column), []\n \n-    def get_group_by_cols(self):\n+    def get_group_by_cols(self, alias=None):\n         return [self]\n \n     def get_db_converters(self, connection):\n@@ -810,7 +810,7 @@ def relabeled_clone(self, relabels):\n     def as_sql(self, compiler, connection):\n         return connection.ops.quote_name(self.refs), []\n \n-    def get_group_by_cols(self):\n+    def get_group_by_cols(self, alias=None):\n         return [self]\n \n \n@@ -905,7 +905,7 @@ def as_sql(self, compiler, connection, template=None, **extra_context):\n         template = template or self.template\n         return template % template_params, sql_params\n \n-    def get_group_by_cols(self):\n+    def get_group_by_cols(self, alias=None):\n         # This is not a complete expression and cannot be used in GROUP BY.\n         cols = []\n         for source in self.get_source_expressions():\n@@ -1082,6 +1082,11 @@ def _prepare(self, output_field):\n             return clone\n         return self\n \n+    def get_group_by_cols(self, alias=None):\n+        if alias:\n+            return [Ref(alias, self)]\n+        return []\n+\n \n class Exists(Subquery):\n     template = 'EXISTS(%(subquery)s)'\n@@ -1171,7 +1176,7 @@ def as_mysql(self, compiler, connection):\n             template = 'IF(ISNULL(%(expression)s),0,1), %(expression)s %(ordering)s '\n         return self.as_sql(compiler, connection, template=template)\n \n-    def get_group_by_cols(self):\n+    def get_group_by_cols(self, alias=None):\n         cols = []\n         for source in self.get_source_expressions():\n             cols.extend(source.get_group_by_cols())\n@@ -1281,7 +1286,7 @@ def __str__(self):\n     def __repr__(self):\n         return '<%s: %s>' % (self.__class__.__name__, self)\n \n-    def get_group_by_cols(self):\n+    def get_group_by_cols(self, alias=None):\n         return []\n \n \n@@ -1317,7 +1322,7 @@ def as_sql(self, compiler, connection):\n     def __repr__(self):\n         return '<%s: %s>' % (self.__class__.__name__, self)\n \n-    def get_group_by_cols(self):\n+    def get_group_by_cols(self, alias=None):\n         return []\n \n     def __str__(self):\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -104,7 +104,7 @@ def relabeled_clone(self, relabels):\n             new.rhs = new.rhs.relabeled_clone(relabels)\n         return new\n \n-    def get_group_by_cols(self):\n+    def get_group_by_cols(self, alias=None):\n         cols = self.lhs.get_group_by_cols()\n         if hasattr(self.rhs, 'get_group_by_cols'):\n             cols.extend(self.rhs.get_group_by_cols())\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -8,6 +8,8 @@\n \"\"\"\n import difflib\n import functools\n+import inspect\n+import warnings\n from collections import Counter, namedtuple\n from collections.abc import Iterator, Mapping\n from itertools import chain, count, product\n@@ -35,6 +37,7 @@\n from django.db.models.sql.where import (\n     AND, OR, ExtraWhere, NothingNode, WhereNode,\n )\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.functional import cached_property\n from django.utils.tree import Node\n \n@@ -1818,9 +1821,20 @@ def set_group_by(self):\n         \"\"\"\n         group_by = list(self.select)\n         if self.annotation_select:\n-            for annotation in self.annotation_select.values():\n-                for col in annotation.get_group_by_cols():\n-                    group_by.append(col)\n+            for alias, annotation in self.annotation_select.items():\n+                try:\n+                    inspect.getcallargs(annotation.get_group_by_cols, alias=alias)\n+                except TypeError:\n+                    annotation_class = annotation.__class__\n+                    msg = (\n+                        '`alias=None` must be added to the signature of '\n+                        '%s.%s.get_group_by_cols().'\n+                    ) % (annotation_class.__module__, annotation_class.__qualname__)\n+                    warnings.warn(msg, category=RemovedInDjango40Warning)\n+                    group_by_cols = annotation.get_group_by_cols()\n+                else:\n+                    group_by_cols = annotation.get_group_by_cols(alias=alias)\n+                group_by.extend(group_by_cols)\n         self.group_by = tuple(group_by)\n \n     def add_select_related(self, fields):\ndiff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -114,7 +114,7 @@ def as_sql(self, compiler, connection):\n                 sql_string = '(%s)' % sql_string\n         return sql_string, result_params\n \n-    def get_group_by_cols(self):\n+    def get_group_by_cols(self, alias=None):\n         cols = []\n         for child in self.children:\n             cols.extend(child.get_group_by_cols())\n",
  "test_patch": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -8,8 +8,9 @@\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n     Max, Min, Sum, Value,\n )\n-from django.db.models.expressions import Case, When\n+from django.db.models.expressions import Case, Exists, OuterRef, Subquery, When\n from django.test import TestCase\n+from django.test.testcases import skipUnlessDBFeature\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -1114,3 +1115,48 @@ def test_arguments_must_be_expressions(self):\n             Book.objects.aggregate(is_book=True)\n         with self.assertRaisesMessage(TypeError, msg % ', '.join([str(FloatField()), 'True'])):\n             Book.objects.aggregate(FloatField(), Avg('price'), is_book=True)\n+\n+    def test_aggregation_subquery_annotation(self):\n+        \"\"\"Subquery annotations are excluded from the GROUP BY if they are\n+        not explicitly grouped against.\"\"\"\n+        latest_book_pubdate_qs = Book.objects.filter(\n+            publisher=OuterRef('pk')\n+        ).order_by('-pubdate').values('pubdate')[:1]\n+        publisher_qs = Publisher.objects.annotate(\n+            latest_book_pubdate=Subquery(latest_book_pubdate_qs),\n+        ).annotate(count=Count('book'))\n+        with self.assertNumQueries(1) as ctx:\n+            list(publisher_qs)\n+        self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    @skipUnlessDBFeature('supports_subqueries_in_group_by')\n+    def test_group_by_subquery_annotation(self):\n+        \"\"\"\n+        Subquery annotations are included in the GROUP BY if they are\n+        grouped against.\n+        \"\"\"\n+        long_books_count_qs = Book.objects.filter(\n+            publisher=OuterRef('pk'),\n+            pages__gt=400,\n+        ).values(\n+            'publisher'\n+        ).annotate(count=Count('pk')).values('count')\n+        long_books_count_breakdown = Publisher.objects.values_list(\n+            Subquery(long_books_count_qs, IntegerField()),\n+        ).annotate(total=Count('*'))\n+        self.assertEqual(dict(long_books_count_breakdown), {None: 1, 1: 4})\n+\n+    @skipUnlessDBFeature('supports_subqueries_in_group_by')\n+    def test_group_by_exists_annotation(self):\n+        \"\"\"\n+        Exists annotations are included in the GROUP BY if they are\n+        grouped against.\n+        \"\"\"\n+        long_books_qs = Book.objects.filter(\n+            publisher=OuterRef('pk'),\n+            pages__gt=800,\n+        )\n+        has_long_books_breakdown = Publisher.objects.values_list(\n+            Exists(long_books_qs),\n+        ).annotate(total=Count('*'))\n+        self.assertEqual(dict(has_long_books_breakdown), {True: 2, False: 3})\ndiff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -586,7 +586,6 @@ def test_chaining_annotation_filter_with_m2m(self):\n             [{'jacob_name': 'Jacob Kaplan-Moss', 'james_name': 'James Bennett'}],\n         )\n \n-    @skipUnlessDBFeature('supports_subqueries_in_group_by')\n     def test_annotation_filter_with_subquery(self):\n         long_books_qs = Book.objects.filter(\n             publisher=OuterRef('pk'),\ndiff --git a/tests/expressions/test_deprecation.py b/tests/expressions/test_deprecation.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/expressions/test_deprecation.py\n@@ -0,0 +1,24 @@\n+from django.db.models import Count, Func\n+from django.test import SimpleTestCase\n+from django.utils.deprecation import RemovedInDjango40Warning\n+\n+from .models import Employee\n+\n+\n+class MissingAliasFunc(Func):\n+    template = '1'\n+\n+    def get_group_by_cols(self):\n+        return []\n+\n+\n+class GetGroupByColsTest(SimpleTestCase):\n+    def test_missing_alias(self):\n+        msg = (\n+            '`alias=None` must be added to the signature of '\n+            'expressions.test_deprecation.MissingAliasFunc.get_group_by_cols().'\n+        )\n+        with self.assertRaisesMessage(RemovedInDjango40Warning, msg):\n+            Employee.objects.values(\n+                one=MissingAliasFunc(),\n+            ).annotate(cnt=Count('company_ceo_set'))\n",
  "problem_statement": "Subquery expressions unnecessarily added to group by\nDescription\n\t\nHi friends,\nMy Django/SQL skills are not good enough to properly isolate the problem independently of my use case detailed below. I believe the problem is Subqueries being forced in to the group_by clause because they are select expressions. Per the below if I remove the subqueries manually from sql group_by, my query runs perfectly. I tried to manually edit the qs.query.group_by, but because it is created by compiler.get_group_by() I cannot fix the ORM query group by clause.\nAre Subquery expressions always supposed to be included in group_by? If this is desired behavior is it possible to toggle it off so the ORM can produce the accurate query?\n\"\"\"\nProblem Statement: The individual annotations work fine when run independently, but when chained the query takes 5 minutes. This is due to the final group by clause unexpectedly receiving the Subquery as extra fields.\n\"\"\"\n​\n# relevant models and querysets\nclass ClaimQuerySet(models.QuerySet):\n\tdef annotate_all(self):\n\t\t\"\"\"Adds ``results``, ``latest_note_text``, and ``latest_assessment_text`` to the queryset.\"\"\"\n\t\treturn self.annotate_latest_results().annotate_most_recent_note().annotate_most_recent_assessment()\n​\n\tdef prefetch_all(self, annotate_sum=True):\n\t\treturn self.prefetch_notes().prefetch_latest_results(annotate_sum)\n​\n\tdef prefetch_latest_results(self, annotate_sum: bool=True):\n\t\t\"\"\"Prefetches the most result :class:`RulesEngineResult` object and optionally\n\t\tpreload its :attr:`RulesEngineResult.score`.\n​\n\t\tArgs:\n\t\t\tannotate_sum:\n\t\t\"\"\"\n\t\tlatest_runs = self.latest_runs\n\t\tif annotate_sum:\n\t\t\tlatest_runs = latest_runs.annotate(_score=Sum('results__value'))\n\t\treturn self.prefetch_related(Prefetch(\n\t\t\t'rules_engine_results', queryset=latest_runs, to_attr='_last_run')\n\t\t)\n​\n\tdef prefetch_notes(self):\n\t\t\"\"\"Prefetches all related notes and assessments.\"\"\"\n\t\treturn self.prefetch_related('notes', 'assessments')\n​\n\t@property\n\tdef latest_runs(self):\n\t\t\"\"\"Shortcut for :attr:`RulesEngineResultQuerySet.get_latest_runs`\"\"\"\n\t\treturn RulesEngineResult.objects.get_latest_runs()\n​\n\tdef annotate_latest_results(self) -> 'ClaimQuerySet':\n\t\t\"\"\"Annotates the queryset with a new field ``results`` whose value is the Sum\n\t\tof the last :attr:`RulesEngineResult.results` for the claim.\n\t\t\"\"\"\n\t\t# Only Sum on runs in the above set.\n\t\tfilter_q = Q(rules_engine_results__in=self.latest_runs)\n\t\t# noinspection PyTypeChecker\n\t\treturn self.annotate(results=Sum('rules_engine_results__results__value', filter=filter_q))\n​\n\tdef annotate_most_recent_note(self) -> 'ClaimQuerySet':\n\t\t\"\"\"Annotates the queryset with a field ``latest_note_text`` whose value is the last\n\t\tentered :attr:`Note.text` for the claim or ``None`` if there are no associated notes.\n\t\t\"\"\"\n\t\treturn self._annotate_most_recent_basenote(Note, 'latest_note_text')\n​\n\tdef annotate_most_recent_assessment(self) -> 'ClaimQuerySet':\n\t\t\"\"\"Annotates the queryset with a field ``latest_assessment_text`` whose value is the last\n\t\tentered :attr:`Assessment.text` for the claim or ``None`` if there are no associated assessments.\n\t\t\"\"\"\n\t\treturn self._annotate_most_recent_basenote(Assessment, 'latest_assessment_text')\n​\n\tdef _annotate_most_recent_basenote(self, model: Type['BaseNote'], field_name: str) -> 'ClaimQuerySet':\n\t\tnewest = model.objects.filter(claim=OuterRef('id')).order_by('-created')\n\t\tannotate_kwargs = {\n\t\t\tfield_name: Subquery(newest.values('text')[:1])\n\t\t}\n\t\t# noinspection PyTypeChecker\n\t\treturn self.annotate(**annotate_kwargs)\n​\n​\nclass Claim(BaseClaim):\n\t\"\"\"Concrete :class:`~mkl.fraud_django.models.BaseClaim` for\n\t:mod:`~mkl.fraud_django.workers_comp` claims.\n\t\"\"\"\n\tobjects = ClaimQuerySet.as_manager()\n\tfirst_rules_engine_run = models.DateField()\n​\n\t@property\n\tdef latest_note(self) -> 'Note':\n\t\t\"\"\"Returns the latest :class:`Note`.\"\"\"\n\t\treturn self.notes.latest()\n​\n\t@property\n\tdef latest_assessment(self) -> 'Assessment':\n\t\t\"\"\"Retrieves the latest :class:`Assessment`.\"\"\"\n\t\treturn self.assessments.latest()\n​\n\t@property\n\tdef latest_rulesengine_run(self) -> 'RulesEngineResult':\n\t\t\"\"\"Returns the most most recent run.\n​\n\t\t.. note::\n​\n\t\t\tUse :meth:`ClaimQuerySet.prefetch_latest_results` to\n\t\t\tprefetch the last_run, falls back on querying for the latest value.\n​\n\t\t\tNote, if used in a prefetched queryset the value could be stale.\n\t\t\"\"\"\n\t\treturn self._get_latest(RulesEngineResult, '_last_run')\n​\n\tdef _get_latest(self, model: Type[models.Model], cache_attr: str):\n\t\t\"\"\"Handler to return None if a latest related object does not exist,\n\t\tchecks the cache first.\"\"\"\n\t\tif hasattr(self, cache_attr):\n\t\t\ttry:\n\t\t\t\treturn getattr(self, cache_attr)[0]\n\t\t\texcept IndexError:\n\t\t\t\treturn None\n\t\ttry:\n\t\t\treturn model.objects.filter(claim=self).latest()\n\t\texcept model.DoesNotExist:\n\t\t\treturn None\n​\n\tdef __unicode__(self):\n\t\treturn self.claim_number\n​\n​\nclass BaseNote(models.Model):\n\t\"\"\"Abstract Base Model for both Notes and Assessments.\n​\n\tUse this base for any claim related editable field whose\n\thistorical data is important.\n​\n\tOn the claim we can write functions to retrieve the latest.\n​\n\t.. note:: The related name will be the class name lower case with an 's'.\n​\n\tAttributes:\n\t\ttext (str): The user provided content\n\t\tcreated (datetime.datetime): Created time stamp\n\t\tclaim (:class:`Claim`): The claim related to the note.\n\t\"\"\"\n\tid = models.AutoField(primary_key=True)\n\ttext = models.TextField(max_length=1000)\n\tcreated = models.DateTimeField(auto_now_add=True)\n\tclaim = models.ForeignKey('Claim', on_delete=models.PROTECT, related_name='%(class)ss')\n​\n\tclass Meta:\n\t\tabstract = True\n\t\tget_latest_by = 'created'\n\t\tordering = ('-created',)\n​\n​\nclass Note(BaseNote):\n\t\"\"\"Concrete class for Notes, related_name will become ``notes``.\"\"\"\n​\n​\nclass Assessment(BaseNote):\n\t\"\"\"Concrete class for Assessment, related_name will become ``assessments``.\"\"\"\n\tCHOICES = (\n\t\t('01', 'Will open a case'),\n\t\t('02', 'Will not open a case'),\n\t\t('03', 'Previously opened'),\n\t\t('04', \"Appears suspicious but won't open\"),\n\t\t('05', 'Not enough info to determine'),\n\t\t('06', 'Existing vendor request'),\n\t)\n\ttext = models.CharField(max_length=1000, choices=CHOICES)\n​\n\tdef get_choice_value(self) -> str:\n\t\t\"\"\"Returns the value as the choice human readable text.\"\"\"\n\t\tdb_text = self.text\n\t\treturn dict(self.CHOICES)[db_text]\n​\n​\nclass RuleResult(models.Model):\n\t\"\"\"The result of running the engine for a particular claim against a :class:`Rule`.\n​\n\tAttributes:\n\t\trule: The rule to be checked\n\t\tvalue: The numeric weight of the result\n\t\tresult: The rules engine result of all rules run against the claim\n\t\"\"\"\n\tid = models.AutoField(primary_key=True)\n\trule = models.ForeignKey('Rule', on_delete=models.PROTECT)\n\tvalue = models.IntegerField()\n\tresult = models.ForeignKey('RulesEngineResult', on_delete=models.PROTECT, related_name='results')\n​\n​\nclass RulesEngineResultQuerySet(models.QuerySet):\n\tdef get_latest_runs(self):\n\t\t\"\"\"Filters to only the most recent :class:`RulesEngineResult`\\s.\"\"\"\n\t\tannotated = self.annotate(\n\t\t\tlatest=Max('claim__rules_engine_results__created')\n\t\t)\n\t\treturn annotated.filter(created=F('latest'))\n​\n​\nclass RulesEngineResult(models.Model):\n\t\"\"\"\n\tRulesEngine run result.\n​\n\tAttributes:\n\t\tclaim (:class:`Claim`): The claim run through the RulesEngine.\n\t\tresults (List[:class:`RuleResult`]): Collection of results for each rule.\n\t\"\"\"\n\tid = models.AutoField(primary_key=True)\n\tcreated = models.DateTimeField(auto_now_add=True)\n\tclaim = models.ForeignKey('Claim', on_delete=models.PROTECT, related_name='rules_engine_results')\n\tobjects = RulesEngineResultQuerySet.as_manager()\n​\n\tclass Meta:\n\t\tget_latest_by = 'created'\n​\n\t@property\n\tdef score(self) -> int:\n\t\t\"\"\"Returns the aggregate score of all related results. Checks prefetched cache first.\"\"\"\n\t\tif hasattr(self, '_score'):\n\t\t\treturn self._score\n\t\td = self.results.aggregate(score=models.Sum('value'))\n\t\treturn d['score']\n​\n​\n\"\"\"\nIndividual Query rendering\n\"\"\"\n# Recent Note\nqs = models.Claim.objects.annotate_most_recent_note()\n​\nSELECT \"workers_comp_claim\".\"id\",\n\t \"workers_comp_claim\".\"claim_number\",\n\t \"workers_comp_claim\".\"first_rules_engine_run\",\n\t (SELECT U0.\"text\"\n\t\tFROM \"workers_comp_note\" U0\n\t\tWHERE U0.\"claim_id\" = (\"workers_comp_claim\".\"id\")\n\t\tORDER BY U0.\"created\" DESC\n\t\tLIMIT 1) AS \"latest_note_text\"\nFROM \"workers_comp_claim\"\n​\n# Recent Assessment\nqs = models.Claim.objects.annotate_most_recent_assessment()\n​\nSELECT \"workers_comp_claim\".\"id\",\n\t \"workers_comp_claim\".\"claim_number\",\n\t \"workers_comp_claim\".\"first_rules_engine_run\",\n\t (SELECT U0.\"text\"\n\t\tFROM \"workers_comp_assessment\" U0\n\t\tWHERE U0.\"claim_id\" = (\"workers_comp_claim\".\"id\")\n\t\tORDER BY U0.\"created\" DESC\n\t\tLIMIT 1) AS \"latest_assessment_text\"\nFROM \"workers_comp_claim\"\n​\n# Latest Results (Run)\nqs = models.Claim.objects.annotate_latest_results()\n​\nSELECT \"workers_comp_claim\".\"id\",\n\t \"workers_comp_claim\".\"claim_number\",\n\t \"workers_comp_claim\".\"first_rules_engine_run\",\n\t SUM(\"workers_comp_ruleresult\".\"value\") FILTER (WHERE \"workers_comp_rulesengineresult\".\"id\" IN (SELECT U0.\"id\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t FROM \"workers_comp_rulesengineresult\" U0\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t INNER JOIN \"workers_comp_claim\" U1 ON (U0.\"claim_id\" = U1.\"id\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t LEFT OUTER JOIN \"workers_comp_rulesengineresult\" U2 ON (U1.\"id\" = U2.\"claim_id\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY U0.\"id\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t HAVING U0.\"created\" = (MAX(U2.\"created\")))) AS \"results\"\nFROM \"workers_comp_claim\"\n\t LEFT OUTER JOIN \"workers_comp_rulesengineresult\"\n\t\t\t\t\t ON (\"workers_comp_claim\".\"id\" = \"workers_comp_rulesengineresult\".\"claim_id\")\n\t LEFT OUTER JOIN \"workers_comp_ruleresult\"\n\t\t\t\t\t ON (\"workers_comp_rulesengineresult\".\"id\" = \"workers_comp_ruleresult\".\"result_id\")\nGROUP BY \"workers_comp_claim\".\"id\"\n​\n​\n\"\"\"\nWhen chained the query renders incorrectly like this\n\"\"\"\nqs = models.Claim.objects.annotate_latest_results().annotate_most_recent_note().annotate_most_recent_assessment()\n​\nSELECT \"workers_comp_claim\".\"id\",\n\t \"workers_comp_claim\".\"claim_number\",\n\t \"workers_comp_claim\".\"first_rules_engine_run\",\n\t SUM(\"workers_comp_ruleresult\".\"value\") FILTER (WHERE \"workers_comp_rulesengineresult\".\"id\" IN (SELECT U0.\"id\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t FROM \"workers_comp_rulesengineresult\" U0\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t INNER JOIN \"workers_comp_claim\" U1 ON (U0.\"claim_id\" = U1.\"id\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t LEFT OUTER JOIN \"workers_comp_rulesengineresult\" U2 ON (U1.\"id\" = U2.\"claim_id\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY U0.\"id\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t HAVING U0.\"created\" = (MAX(U2.\"created\")))) AS \"results\",\n\t (SELECT U0.\"text\"\n\t\tFROM \"workers_comp_note\" U0\n\t\tWHERE U0.\"claim_id\" = (\"workers_comp_claim\".\"id\")\n\t\tORDER BY U0.\"created\" DESC\n\t\tLIMIT 1)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t AS \"latest_note_text\",\n\t (SELECT U0.\"text\"\n\t\tFROM \"workers_comp_assessment\" U0\n\t\tWHERE U0.\"claim_id\" = (\"workers_comp_claim\".\"id\")\n\t\tORDER BY U0.\"created\" DESC\n\t\tLIMIT 1)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t AS \"latest_assessment_text\"\nFROM \"workers_comp_claim\"\n\t LEFT OUTER JOIN \"workers_comp_rulesengineresult\"\n\t\t\t\t\t ON (\"workers_comp_claim\".\"id\" = \"workers_comp_rulesengineresult\".\"claim_id\")\n\t LEFT OUTER JOIN \"workers_comp_ruleresult\"\n\t\t\t\t\t ON (\"workers_comp_rulesengineresult\".\"id\" = \"workers_comp_ruleresult\".\"result_id\")\nGROUP BY \"workers_comp_claim\".\"id\", (SELECT U0.\"text\"\n\t\t\t\t\t\t\t\t\t FROM \"workers_comp_note\" U0\n\t\t\t\t\t\t\t\t\t WHERE U0.\"claim_id\" = (\"workers_comp_claim\".\"id\")\n\t\t\t\t\t\t\t\t\t ORDER BY U0.\"created\" DESC\n\t\t\t\t\t\t\t\t\t LIMIT 1), (SELECT U0.\"text\"\n\t\t\t\t\t\t\t\t\t\t\t\tFROM \"workers_comp_assessment\" U0\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE U0.\"claim_id\" = (\"workers_comp_claim\".\"id\")\n\t\t\t\t\t\t\t\t\t\t\t\tORDER BY U0.\"created\" DESC\n\t\t\t\t\t\t\t\t\t\t\t\tLIMIT 1)\n​\n​\n\"\"\"\nWhy is Django performing the group by with the Subqueries? How do I make it render correctly like this:\n\"\"\"\nSELECT \"workers_comp_claim\".\"id\",\n\t \"workers_comp_claim\".\"claim_number\",\n\t \"workers_comp_claim\".\"first_rules_engine_run\",\n\t SUM(\"workers_comp_ruleresult\".\"value\") FILTER (WHERE \"workers_comp_rulesengineresult\".\"id\" IN (SELECT U0.\"id\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t FROM \"workers_comp_rulesengineresult\" U0\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t INNER JOIN \"workers_comp_claim\" U1 ON (U0.\"claim_id\" = U1.\"id\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t LEFT OUTER JOIN \"workers_comp_rulesengineresult\" U2 ON (U1.\"id\" = U2.\"claim_id\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY U0.\"id\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t HAVING U0.\"created\" = (MAX(U2.\"created\")))) AS \"results\",\n\t (SELECT U0.\"text\"\n\t\tFROM \"workers_comp_note\" U0\n\t\tWHERE U0.\"claim_id\" = (\"workers_comp_claim\".\"id\")\n\t\tORDER BY U0.\"created\" DESC\n\t\tLIMIT 1)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t AS \"latest_note_text\",\n\t (SELECT U0.\"text\"\n\t\tFROM \"workers_comp_assessment\" U0\n\t\tWHERE U0.\"claim_id\" = (\"workers_comp_claim\".\"id\")\n\t\tORDER BY U0.\"created\" DESC\n\t\tLIMIT 1)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t AS \"latest_assessment_text\"\nFROM \"workers_comp_claim\"\n\t LEFT OUTER JOIN \"workers_comp_rulesengineresult\"\n\t\t\t\t\t ON (\"workers_comp_claim\".\"id\" = \"workers_comp_rulesengineresult\".\"claim_id\")\n\t LEFT OUTER JOIN \"workers_comp_ruleresult\"\n\t\t\t\t\t ON (\"workers_comp_rulesengineresult\".\"id\" = \"workers_comp_ruleresult\".\"result_id\")\nGROUP BY \"workers_comp_claim\".\"id\";\n",
  "hints_text": "See TicketClosingReasons/UseSupportChannels for places to ask \"is it a bug/how do I?\" questions. Most likely you'll need to simplify your problem. If you find Django at fault, please create a more concise, minimal ticket.\nAdditional details about which database engine and Django version you are using would be also appreciated.\nI suspect Subquery.get_group_by_cols needs to be adjusted to return an empty list. Since #30099 (2.2a1+ only) ​it returns [self] but before this change ​it returned all the filter conditions with a left hand side which is even worst. Could you try subclassing Subquery and overriding get_group_by_cols to return [], use the subclass with your query, and see if it helps?\nReplying to Simon Charette: Additional details about which database engine and Django version you are using would be also appreciated. Hi Simon. I am using Django 2.1.5 and Postgre.\nReplying to Simon Charette: I suspect Subquery.get_group_by_cols needs to be adjusted to return an empty list. Since #30099 (2.2a1+ only) ​it returns [self] but before this change ​it returned all the filter conditions with a left hand side which is even worst. Could you try subclassing Subquery and overriding get_group_by_cols to return [], use the subclass with your query, and see if it helps? Wow I don't know what black magic that did but it works!\nI just ran the full suite with the get_group_by_cols override detailed and it worked fine, this case is simply untested. Jonny, would you be interested in submitting a Github PR with the changes suggested above with the addition of a regression test to make sure the GROUP BY doesn't occur? I'd be happy to offer assistance like I did for #30099 in ​https://github.com/django/django/pull/10846.\nReplying to Simon Charette: I just ran the full suite with the get_group_by_cols override detailed and it worked fine, this case is simply untested. Jonny, would you be interested in submitting a Github PR with the changes suggested above with the addition of a regression test to make sure the GROUP BY doesn't occur? I'd be happy to offer assistance like I did for #30099 in ​https://github.com/django/django/pull/10846. Sure thing Simon. I just need to figure out how to write a generic test case...\nThis happens to be a bit related to #29542.\nJonny, by playing a bit with the code I noticed that it's a bit more complex than simply returning an empty list in Subquery.get_group_by_cols. Can you confirm that both queries were returning the appropriate results but that the one where subqueries were added to the GROUP BY was performing significantly slower? If that's the case then this is more of an optimization problem where subqueries can sometimes be removed from the GROUP BY and sometimes not but not in all cases. e.g. Publisher.objects.annotate( has_long_books=Exists( Book.objects.filter( publisher=OuterRef('pk'), pages__gt=800, ), ), ).values_list('has_long_books').annotate( total=Count('*'), ) When there's an explicit grouping by a subquery (or exists) then it must be honoured but I believe in other cases it's doesn't have to.\nI renamed the ticket because I'm pretty confident that the generated query doesn't cause the wrong results to be returned. The fact that the ORM doesn't have the introspection abilities to determine if some annotated expressions can be trimmed from the GROUP BY clause on aggregation ​is a known limitation and there's probably other existing issues for other type of expressions. Since the initial approach of making get_group_by_cols return an empty list is not viable for the aforementioned reason I think we should begin by merging ​regression tests to prevent this edge case from being overlooked in the future.",
  "created_at": "2019-02-27T04:33:12Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_missing_alias (expressions.test_deprecation.GetGroupByColsTest)\", \"Subquery annotations are excluded from the GROUP BY if they are\"]",
  "PASS_TO_PASS": "[\"test_aggregate_over_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotate_exists (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotate_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_filter_with_subquery (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_in_f_grouped_by_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_reverse_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_with_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_arguments_must_be_expressions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_basic_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_basic_f_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_boolean_value_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_chaining_annotation_filter_with_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_column_field_ordering (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_column_field_ordering_with_deferred (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_combined_annotation_commutative (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_custom_functions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_custom_functions_can_ref_other_functions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_defer_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_empty_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_agg_with_double_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation_with_double_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation_with_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_wrong_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_joined_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mixed_type_annotation_date_interval (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mixed_type_annotation_numbers (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mti_annotations (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_null_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_order_by_aggregate (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_order_by_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_update_with_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_values_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_values_with_pk_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_add_implementation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_alias (aggregation.tests.AggregateTestCase)\", \"test_aggregate_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_in_order_by (aggregation.tests.AggregateTestCase)\", \"test_aggregate_multi_join (aggregation.tests.AggregateTestCase)\", \"test_aggregate_over_complex_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregation_expressions (aggregation.tests.AggregateTestCase)\", \"test_annotate_basic (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer_select_related (aggregation.tests.AggregateTestCase)\", \"test_annotate_m2m (aggregation.tests.AggregateTestCase)\", \"test_annotate_ordering (aggregation.tests.AggregateTestCase)\", \"test_annotate_over_annotate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_list (aggregation.tests.AggregateTestCase)\", \"test_annotated_aggregate_over_annotated_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotation (aggregation.tests.AggregateTestCase)\", \"test_annotation_expressions (aggregation.tests.AggregateTestCase)\", \"test_arguments_must_be_expressions (aggregation.tests.AggregateTestCase)\", \"test_avg_decimal_field (aggregation.tests.AggregateTestCase)\", \"test_avg_duration_field (aggregation.tests.AggregateTestCase)\", \"test_backwards_m2m_annotate (aggregation.tests.AggregateTestCase)\", \"test_combine_different_types (aggregation.tests.AggregateTestCase)\", \"test_complex_aggregations_require_kwarg (aggregation.tests.AggregateTestCase)\", \"test_complex_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_count (aggregation.tests.AggregateTestCase)\", \"test_count_distinct_expression (aggregation.tests.AggregateTestCase)\", \"test_count_star (aggregation.tests.AggregateTestCase)\", \"test_dates_with_aggregation (aggregation.tests.AggregateTestCase)\", \"test_decimal_max_digits_has_no_effect (aggregation.tests.AggregateTestCase)\", \"test_empty_aggregate (aggregation.tests.AggregateTestCase)\", \"test_even_more_aggregate (aggregation.tests.AggregateTestCase)\", \"test_expression_on_aggregation (aggregation.tests.AggregateTestCase)\", \"test_filter_aggregate (aggregation.tests.AggregateTestCase)\", \"test_filtering (aggregation.tests.AggregateTestCase)\", \"test_fkey_aggregate (aggregation.tests.AggregateTestCase)\", \"test_group_by_exists_annotation (aggregation.tests.AggregateTestCase)\", \"test_group_by_subquery_annotation (aggregation.tests.AggregateTestCase)\", \"test_grouped_annotation_in_group_by (aggregation.tests.AggregateTestCase)\", \"test_missing_output_field_raises_error (aggregation.tests.AggregateTestCase)\", \"test_more_aggregation (aggregation.tests.AggregateTestCase)\", \"test_multi_arg_aggregate (aggregation.tests.AggregateTestCase)\", \"test_multiple_aggregates (aggregation.tests.AggregateTestCase)\", \"test_non_grouped_annotation_not_in_group_by (aggregation.tests.AggregateTestCase)\", \"test_nonaggregate_aggregation_throws (aggregation.tests.AggregateTestCase)\", \"test_nonfield_annotation (aggregation.tests.AggregateTestCase)\", \"test_order_of_precedence (aggregation.tests.AggregateTestCase)\", \"test_related_aggregate (aggregation.tests.AggregateTestCase)\", \"test_reverse_fkey_annotate (aggregation.tests.AggregateTestCase)\", \"test_single_aggregate (aggregation.tests.AggregateTestCase)\", \"test_sum_distinct_aggregate (aggregation.tests.AggregateTestCase)\", \"test_sum_duration_field (aggregation.tests.AggregateTestCase)\", \"test_ticket11881 (aggregation.tests.AggregateTestCase)\", \"test_ticket12886 (aggregation.tests.AggregateTestCase)\", \"test_ticket17424 (aggregation.tests.AggregateTestCase)\", \"test_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_values_annotation_with_expression (aggregation.tests.AggregateTestCase)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.556602",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}