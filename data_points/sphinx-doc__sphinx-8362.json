{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8362",
  "base_commit": "8981e84779ff87f1a058939a5d678e5993d67aa8",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1222,7 +1222,7 @@ def format_args(self, **kwargs: Any) -> str:\n \n         try:\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n-            sig = inspect.signature(self.object, follow_wrapped=True,\n+            sig = inspect.signature(self.object,\n                                     type_aliases=self.env.config.autodoc_type_aliases)\n             args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n@@ -1862,7 +1862,6 @@ def format_args(self, **kwargs: Any) -> str:\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                     sig = inspect.signature(self.object, bound_method=True,\n-                                            follow_wrapped=True,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n                 args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -431,14 +431,20 @@ def _should_unwrap(subject: Callable) -> bool:\n     return False\n \n \n-def signature(subject: Callable, bound_method: bool = False, follow_wrapped: bool = False,\n+def signature(subject: Callable, bound_method: bool = False, follow_wrapped: bool = None,\n               type_aliases: Dict = {}) -> inspect.Signature:\n     \"\"\"Return a Signature object for the given *subject*.\n \n     :param bound_method: Specify *subject* is a bound method or not\n     :param follow_wrapped: Same as ``inspect.signature()``.\n-                           Defaults to ``False`` (get a signature of *subject*).\n     \"\"\"\n+\n+    if follow_wrapped is None:\n+        follow_wrapped = True\n+    else:\n+        warnings.warn('The follow_wrapped argument of sphinx.util.inspect.signature() is '\n+                      'deprecated', RemovedInSphinx50Warning, stacklevel=2)\n+\n     try:\n         try:\n             if _should_unwrap(subject):\n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/decorator.py b/tests/roots/test-ext-autodoc/target/decorator.py\n--- a/tests/roots/test-ext-autodoc/target/decorator.py\n+++ b/tests/roots/test-ext-autodoc/target/decorator.py\n@@ -29,3 +29,25 @@ class Bar:\n     @deco1\n     def meth(self, name=None, age=None):\n         pass\n+\n+\n+class Baz:\n+    @deco1\n+    def __init__(self, name=None, age=None):\n+        pass\n+\n+\n+class Qux:\n+    @deco1\n+    def __new__(self, name=None, age=None):\n+        pass\n+\n+\n+class _Metaclass(type):\n+    @deco1\n+    def __call__(self, name=None, age=None):\n+        pass\n+\n+\n+class Quux(metaclass=_Metaclass):\n+    pass\ndiff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -48,3 +48,28 @@ def test_classes(app):\n         '',\n     ]\n \n+\n+def test_decorators(app):\n+    actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Baz(name=None, age=None)',\n+        '   :module: target.decorator',\n+        '',\n+    ]\n+\n+    actual = do_autodoc(app, 'class', 'target.decorator.Qux')\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Qux(name=None, age=None)',\n+        '   :module: target.decorator',\n+        '',\n+    ]\n+\n+    actual = do_autodoc(app, 'class', 'target.decorator.Quux')\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Quux(name=None, age=None)',\n+        '   :module: target.decorator',\n+        '',\n+    ]\ndiff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -100,7 +100,7 @@ def wrapped_bound_method(*args, **kwargs):\n \n     # wrapped bound method\n     sig = inspect.signature(wrapped_bound_method)\n-    assert stringify_signature(sig) == '(*args, **kwargs)'\n+    assert stringify_signature(sig) == '(arg1, **kwargs)'\n \n \n def test_signature_partialmethod():\n",
  "problem_statement": "autodoc uses a wrapper's signature for a decorated class\n**Describe the bug**\r\n\r\n`autodoc` uses a wrapper's signature for a decorated class.\r\n\r\n**To Reproduce**\r\n\r\nBranch: https://github.com/harupy/sphinx/tree/decorated-class\r\n\r\nSteps to reproduce the behavior:\r\n\r\nIn `tests/roots/test-ext-autodoc/target/decorator.py`, add:.\r\n\r\n```python\r\n\r\ndef deco(cls):\r\n    _original_init = cls.__init__\r\n\r\n    @wraps(_original_init)\r\n    def wrapped(self, *args, **kwargs):\r\n        _original_init(self, *args, **kwargs)\r\n\r\n    cls.__init__ = wrapped\r\n    return cls\r\n\r\n@deco\r\nclass Bar2:\r\n    def __init__(self, name=None, age=None):\r\n        pass\r\n```\r\n\r\nIn `tests/test_ext_autodoc.py`, add:\r\n\r\n```python\r\n@pytest.mark.sphinx('html', testroot='ext-autodoc')\r\ndef test_decorated_class(app):\r\n    print(do_autodoc(app, 'class', 'target.decorator.Bar2'))\r\n    raise Exception  # fails this test to see stdout\r\n```\r\n\r\nThen, run:\r\n\r\n```\r\ntox -e py37 tests/test_ext_autodoc.py::test_decorated_class\r\n```\r\n\r\nThis outputs:\r\n\r\n```\r\n--- Captured stdout call ---\r\n['', '.. py:class:: Bar2(*args, **kwargs)', '   :module: target.decorator', '']\r\n```\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n```\r\n--- Captured stdout call ---\r\n['', '.. py:class:: Bar2(self, name=None, age=None)', '   :module: target.decorator', '']\r\n```\r\n\r\n\r\n\r\n**Your project**\r\nLink to your sphinx project, or attach zipped small project sample.\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Environment info**\r\n- OS: [e.g. Unix/Linux/Mac/Win/other with version]\r\n- Python version: [e.g. 3.7.1]\r\n- Sphinx version: [e.g. 1.8.2]\r\n- Sphinx extensions:  [e.g. sphinx.ext.autodoc, recommonmark]\r\n- Extra tools: [e.g. Browser, tex or something else]\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\n- [e.g. URL or Ticket]\r\n\n",
  "hints_text": "`ClassDocumenter` doesn't seem to set `follow_wrapped` to `True` when extracting a signature.\r\n\r\nhttps://github.com/sphinx-doc/sphinx/blob/38b868cc0d0583d9a58496cd121f0bc345bf9eaa/sphinx/ext/autodoc/__init__.py#L1401\nThe same thing occurs here:\r\n\r\nhttps://github.com/sphinx-doc/sphinx/blob/38b868cc0d0583d9a58496cd121f0bc345bf9eaa/sphinx/ext/autodoc/type_comment.py#L120-L122\r\n\r\nThis causes `type_sig` and `sig` to have different parameters and throw `KeyError` here:\r\n\r\nhttps://github.com/sphinx-doc/sphinx/blob/38b868cc0d0583d9a58496cd121f0bc345bf9eaa/sphinx/ext/autodoc/type_comment.py#L125\n@tk0miya Correct me if I'm wrong. It looks like just specifying `follow_wrapped=True` solves the issue. If so, I'd be happy to open a PR (that makes the change and adds some tests to verify it).\n@harupy You're right! Could you make a PR, please? Additionally, cases of `__call__` and `__new__` are also needed to add `follow_wrapped=True`, I think. Could you check them too if possible?\n@tk0miya Created a PR: https://github.com/sphinx-doc/sphinx/pull/8115 ðŸ˜„ \nThis issue prevents me from upgrading from 3.0 to 3.2.1, the bugfix by @harupy works perfectly.\n@tk0miya Could you review #8115?",
  "created_at": "2020-11-03T17:39:46Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_autoclass.py::test_decorators\", \"tests/test_util_inspect.py::test_signature_methods\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_autoclass.py::test_classes\", \"tests/test_util_inspect.py::test_signature\", \"tests/test_util_inspect.py::test_signature_partial\", \"tests/test_util_inspect.py::test_signature_partialmethod\", \"tests/test_util_inspect.py::test_signature_annotations\", \"tests/test_util_inspect.py::test_signature_annotations_py38\", \"tests/test_util_inspect.py::test_signature_from_str_basic\", \"tests/test_util_inspect.py::test_signature_from_str_default_values\", \"tests/test_util_inspect.py::test_signature_from_str_annotations\", \"tests/test_util_inspect.py::test_signature_from_str_complex_annotations\", \"tests/test_util_inspect.py::test_signature_from_str_kwonly_args\", \"tests/test_util_inspect.py::test_signature_from_str_positionaly_only_args\", \"tests/test_util_inspect.py::test_signature_from_str_invalid\", \"tests/test_util_inspect.py::test_signature_from_ast\", \"tests/test_util_inspect.py::test_safe_getattr_with_default\", \"tests/test_util_inspect.py::test_safe_getattr_with_exception\", \"tests/test_util_inspect.py::test_safe_getattr_with_property_exception\", \"tests/test_util_inspect.py::test_safe_getattr_with___dict___override\", \"tests/test_util_inspect.py::test_dictionary_sorting\", \"tests/test_util_inspect.py::test_set_sorting\", \"tests/test_util_inspect.py::test_set_sorting_fallback\", \"tests/test_util_inspect.py::test_frozenset_sorting\", \"tests/test_util_inspect.py::test_frozenset_sorting_fallback\", \"tests/test_util_inspect.py::test_dict_customtype\", \"tests/test_util_inspect.py::test_isclassmethod\", \"tests/test_util_inspect.py::test_isstaticmethod\", \"tests/test_util_inspect.py::test_iscoroutinefunction\", \"tests/test_util_inspect.py::test_isfunction\", \"tests/test_util_inspect.py::test_isbuiltin\", \"tests/test_util_inspect.py::test_isdescriptor\", \"tests/test_util_inspect.py::test_isattributedescriptor\", \"tests/test_util_inspect.py::test_isproperty\", \"tests/test_util_inspect.py::test_isgenericalias\", \"tests/test_util_inspect.py::test_unpartial\", \"tests/test_util_inspect.py::test_getdoc_inherited_decorated_method\", \"tests/test_util_inspect.py::test_is_builtin_class_method\"]",
  "environment_setup_commit": "3f560cd67239f75840cc7a439ab54d8509c855f6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.054094",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}