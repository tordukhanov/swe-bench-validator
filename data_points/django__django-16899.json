{
  "repo": "django/django",
  "instance_id": "django__django-16899",
  "base_commit": "d3d173425fc0a1107836da5b4567f1c88253191b",
  "patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -771,10 +771,11 @@ def _check_readonly_fields_item(self, obj, field_name, label):\n             except FieldDoesNotExist:\n                 return [\n                     checks.Error(\n-                        \"The value of '%s' is not a callable, an attribute of \"\n-                        \"'%s', or an attribute of '%s'.\"\n+                        \"The value of '%s' refers to '%s', which is not a callable, \"\n+                        \"an attribute of '%s', or an attribute of '%s'.\"\n                         % (\n                             label,\n+                            field_name,\n                             obj.__class__.__name__,\n                             obj.model._meta.label,\n                         ),\n",
  "test_patch": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -798,8 +798,9 @@ class SongAdmin(admin.ModelAdmin):\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n-                \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is \"\n+                \"not a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n             )\n@@ -814,8 +815,9 @@ class CityInline(admin.TabularInline):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n-                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is \"\n+                \"not a callable, an attribute of 'CityInline', or an attribute of \"\n+                \"'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n             )\n",
  "problem_statement": "ModelAdmin: Error message for readonly_fields's check does not include the field name\nDescription\n\t\nWhen subclassing a ModelAdmin, the current error message for the readonly_fields would indicate the index of the value at fault but it will not include the field's name (from the test suite):\nThe value of 'readonly_fields[0]' is not a callable, an attribute of 'CityInline', or an attribute of 'admin_checks.City'.\nOther fields like list_editable, raw_id_fields, list_display, etc. would also include this value:\nThe value of 'list_editable[0]' refers to 'original_release', which is not contained in 'list_display'.\nIt would be good if we can unify this and include the field name in the readonly_fields checks, it also eases the understanding of the error when using the framework.\n",
  "hints_text": "",
  "created_at": "2023-05-26T13:41:37Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_nonexistent_field (admin_checks.tests.SystemChecksTestCase.test_nonexistent_field)\", \"test_nonexistent_field_on_inline (admin_checks.tests.SystemChecksTestCase.test_nonexistent_field_on_inline)\"]",
  "PASS_TO_PASS": "[\"test_admin_check_ignores_import_error_in_middleware (admin_checks.tests.SystemChecksTestCase.test_admin_check_ignores_import_error_in_middleware)\", \"test_allows_checks_relying_on_other_modeladmins (admin_checks.tests.SystemChecksTestCase.test_allows_checks_relying_on_other_modeladmins)\", \"test_app_label_in_admin_checks (admin_checks.tests.SystemChecksTestCase.test_app_label_in_admin_checks)\", \"test_apps_dependencies (admin_checks.tests.SystemChecksTestCase.test_apps_dependencies)\", \"test_cannot_include_through (admin_checks.tests.SystemChecksTestCase.test_cannot_include_through)\", \"test_check_fieldset_sublists_for_duplicates (admin_checks.tests.SystemChecksTestCase.test_check_fieldset_sublists_for_duplicates)\", \"test_check_sublists_for_duplicates (admin_checks.tests.SystemChecksTestCase.test_check_sublists_for_duplicates)\", \"test_checks_are_performed (admin_checks.tests.SystemChecksTestCase.test_checks_are_performed)\", \"test_context_processor_dependencies (admin_checks.tests.SystemChecksTestCase.test_context_processor_dependencies)\", \"test_context_processor_dependencies_model_backend_subclass (admin_checks.tests.SystemChecksTestCase.test_context_processor_dependencies_model_backend_subclass)\", \"test_custom_adminsite (admin_checks.tests.SystemChecksTestCase.test_custom_adminsite)\", \"The fieldsets checks are skipped when the ModelAdmin.get_form() method\", \"# Regression test for #8027: custom ModelForms with fields/fieldsets\", \"test_editable (admin_checks.tests.SystemChecksTestCase.test_editable)\", \"test_exclude_duplicate_values (admin_checks.tests.SystemChecksTestCase.test_exclude_duplicate_values)\", \"test_exclude_in_inline (admin_checks.tests.SystemChecksTestCase.test_exclude_in_inline)\", \"Regression test for #9932 - exclude in InlineModelAdmin should not\", \"Tests for basic system checks of 'exclude' option values (#12689)\", \"Regression test for #12209 -- If the explicitly provided through model\", \"test_extra (admin_checks.tests.SystemChecksTestCase.test_extra)\", \"test_field_name_not_in_list_display (admin_checks.tests.SystemChecksTestCase.test_field_name_not_in_list_display)\", \"The first fieldset's fields must be a list/tuple.\", \"Regression test for #11709 - when testing for fk excluding (when exclude is\", \"A GenericInlineModelAdmin errors if the ct_field points to a\", \"A GenericInlineModelAdmin errors if the ct_fk_field points to a\", \"A model without a GenericForeignKey raises problems if it's included\", \"A GenericInlineModelAdmin raises problems if the ct_field points to a\", \"A GenericInlineModelAdmin raises problems if the ct_fk_field points to\", \"Regression test for #12203/#12237 - Fail more gracefully when a M2M field that\", \"test_inline_self_check (admin_checks.tests.SystemChecksTestCase.test_inline_self_check)\", \"test_inline_with_specified (admin_checks.tests.SystemChecksTestCase.test_inline_with_specified)\", \"test_inlines_property (admin_checks.tests.SystemChecksTestCase.test_inlines_property)\", \"test_list_editable_missing_field (admin_checks.tests.SystemChecksTestCase.test_list_editable_missing_field)\", \"test_list_editable_not_a_list_or_tuple (admin_checks.tests.SystemChecksTestCase.test_list_editable_not_a_list_or_tuple)\", \"Ensure list_filter can access reverse fields even when the app registry\", \"test_middleware_dependencies (admin_checks.tests.SystemChecksTestCase.test_middleware_dependencies)\", \"test_middleware_subclasses (admin_checks.tests.SystemChecksTestCase.test_middleware_subclasses)\", \"test_nested_fields (admin_checks.tests.SystemChecksTestCase.test_nested_fields)\", \"test_nested_fieldsets (admin_checks.tests.SystemChecksTestCase.test_nested_fieldsets)\", \"test_no_template_engines (admin_checks.tests.SystemChecksTestCase.test_no_template_engines)\", \"Regression for ensuring ModelAdmin.fields can contain non-model fields\", \"Regression for ensuring ModelAdmin.field can handle first elem being a\", \"The second fieldset's fields must be a list/tuple.\", \"test_pk_not_editable (admin_checks.tests.SystemChecksTestCase.test_pk_not_editable)\", \"test_readonly (admin_checks.tests.SystemChecksTestCase.test_readonly)\", \"test_readonly_and_editable (admin_checks.tests.SystemChecksTestCase.test_readonly_and_editable)\", \"test_readonly_dynamic_attribute_on_modeladmin (admin_checks.tests.SystemChecksTestCase.test_readonly_dynamic_attribute_on_modeladmin)\", \"test_readonly_fields_not_list_or_tuple (admin_checks.tests.SystemChecksTestCase.test_readonly_fields_not_list_or_tuple)\", \"test_readonly_lambda (admin_checks.tests.SystemChecksTestCase.test_readonly_lambda)\", \"test_readonly_method_on_model (admin_checks.tests.SystemChecksTestCase.test_readonly_method_on_model)\", \"test_readonly_on_method (admin_checks.tests.SystemChecksTestCase.test_readonly_on_method)\", \"test_readonly_on_modeladmin (admin_checks.tests.SystemChecksTestCase.test_readonly_on_modeladmin)\", \"test_several_templates_backends (admin_checks.tests.SystemChecksTestCase.test_several_templates_backends)\", \"Regression test for #22034 - check that generic inlines don't look for\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.774946",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}