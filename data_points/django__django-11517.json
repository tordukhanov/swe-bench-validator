{
  "repo": "django/django",
  "instance_id": "django__django-11517",
  "base_commit": "f03b7bd11461e8b525c27d5344f8cd3a21c9565e",
  "patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -2,6 +2,7 @@\n import os\n import pkgutil\n import sys\n+from argparse import _SubParsersAction\n from collections import defaultdict\n from difflib import get_close_matches\n from importlib import import_module\n@@ -118,17 +119,28 @@ def call_command(command_name, *args, **options):\n     }\n     arg_options = {opt_mapping.get(key, key): value for key, value in options.items()}\n     parse_args = [str(a) for a in args]\n+\n+    def get_actions(parser):\n+        # Parser actions and actions from sub-parser choices.\n+        for opt in parser._actions:\n+            if isinstance(opt, _SubParsersAction):\n+                for sub_opt in opt.choices.values():\n+                    yield from get_actions(sub_opt)\n+            else:\n+                yield opt\n+\n+    parser_actions = list(get_actions(parser))\n     # Any required arguments which are passed in via **options must be passed\n     # to parse_args().\n     parse_args += [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n-        for opt in parser._actions if opt.required and opt.dest in options\n+        for opt in parser_actions if opt.required and opt.dest in options\n     ]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n     # Raise an error if any unknown options were passed.\n     stealth_options = set(command.base_stealth_options + command.stealth_options)\n-    dest_parameters = {action.dest for action in parser._actions}\n+    dest_parameters = {action.dest for action in parser_actions}\n     valid_options = (dest_parameters | stealth_options).union(opt_mapping)\n     unknown_options = set(options) - valid_options\n     if unknown_options:\n",
  "test_patch": "diff --git a/tests/user_commands/management/commands/subparser_dest.py b/tests/user_commands/management/commands/subparser_dest.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/user_commands/management/commands/subparser_dest.py\n@@ -0,0 +1,13 @@\n+from django.core.management.base import BaseCommand\n+from django.utils.version import PY37\n+\n+\n+class Command(BaseCommand):\n+    def add_arguments(self, parser):\n+        kwargs = {'required': True} if PY37 else {}\n+        subparsers = parser.add_subparsers(dest='subcommand', **kwargs)\n+        parser_foo = subparsers.add_parser('foo')\n+        parser_foo.add_argument('--bar')\n+\n+    def handle(self, *args, **options):\n+        self.stdout.write(','.join(options))\ndiff --git a/tests/user_commands/management/commands/subparser_required.py b/tests/user_commands/management/commands/subparser_required.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/user_commands/management/commands/subparser_required.py\n@@ -0,0 +1,13 @@\n+from django.core.management.base import BaseCommand\n+\n+\n+class Command(BaseCommand):\n+    def add_arguments(self, parser):\n+        subparsers_1 = parser.add_subparsers(dest='subcommand_1')\n+        parser_foo_1 = subparsers_1.add_parser('foo_1')\n+        subparsers_2 = parser_foo_1.add_subparsers(dest='subcommand_2')\n+        parser_foo_2 = subparsers_2.add_parser('foo_2')\n+        parser_foo_2.add_argument('--bar', required=True)\n+\n+    def handle(self, *args, **options):\n+        self.stdout.write(','.join(options))\ndiff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -15,6 +15,7 @@\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import captured_stderr, extend_sys_path\n from django.utils import translation\n+from django.utils.version import PY37\n \n from .management.commands import dance\n \n@@ -218,10 +219,34 @@ def test_subparser(self):\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_subparser_dest_args(self):\n+        out = StringIO()\n+        management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n+        self.assertIn('bar', out.getvalue())\n+\n+    def test_subparser_dest_required_args(self):\n+        out = StringIO()\n+        management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n+        self.assertIn('bar', out.getvalue())\n+\n     def test_subparser_invalid_option(self):\n         msg = \"Error: invalid choice: 'test' (choose from 'foo')\"\n         with self.assertRaisesMessage(CommandError, msg):\n             management.call_command('subparser', 'test', 12)\n+        if PY37:\n+            # \"required\" option requires Python 3.7 and later.\n+            msg = 'Error: the following arguments are required: subcommand'\n+            with self.assertRaisesMessage(CommandError, msg):\n+                management.call_command('subparser_dest', subcommand='foo', bar=12)\n+        else:\n+            msg = (\n+                'Unknown option(s) for subparser_dest command: subcommand. '\n+                'Valid options are: bar, force_color, help, no_color, '\n+                'pythonpath, settings, skip_checks, stderr, stdout, '\n+                'traceback, verbosity, version.'\n+            )\n+            with self.assertRaisesMessage(TypeError, msg):\n+                management.call_command('subparser_dest', subcommand='foo', bar=12)\n \n     def test_create_parser_kwargs(self):\n         \"\"\"BaseCommand.create_parser() passes kwargs to CommandParser.\"\"\"\n",
  "problem_statement": "call_command raises ValueError when subparser dest is passed in options.\nDescription\n\t\nIf a management command contains subparsers:\nclass Command(BaseCommand):\n\tdef add_arguments(self, parser):\n\t\tsubparsers = parser.add_subparsers(title=\"subcommands\",\n\t\t\t\t\t\t\t\t\t\t dest=\"subcommand\",\n\t\t\t\t\t\t\t\t\t\t required=True)\n\t\tfoo = subparsers.add_parser(\"foo\")\n\t\tfoo.set_defaults(method=self.on_foo_command)\n\t\tfoo.add_argument(\"--bar\")\nIn Django, 1.11, this could be called using\ncall_command('mycommand', 'foo', bar=True)\nWith the additional argument validation in call_command, this generates ValueError: min() arg is an empty sequence at line 124 in django/core/management/__init__.py because the _SubParsersAction.option_strings is an empty array.\n\tparse_args += [\n\t\t'{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n\t\tfor opt in parser._actions if opt.required and opt.dest in options\n\t]\nIf the subcommand parser is not tagged as required, TypeError: Unknown option(s) for mycommand command: bar occurs downstream.\nThe same occurs if the subcommand is passed as an option:\ncall_command('mycommand', subcommand='foo', bar=True)\n",
  "hints_text": "Thanks for the report. In Django 1.11 your custom command raises TypeError: __init__() missing 1 required positional argument: 'cmd' which has been fixed in dd68b51e1da54267bde4799fa0d9fbd4290eb8b5. I wasn't able to run your example in Django < 2.2. call_command('mycommand', 'foo', bar=True) raises TypeError: Unknown option(s) for mycommand command: bar. which seems fine for me because you added only --bar argument, i.e. >>> management.call_command('mycommand', 'foo', '--bar', '1') >>> management.call_command('mycommand', 'foo', '--bar', True) work as expected. IMO there is only issue with validation of call_command('mycommand', subcommand='foo', bar=True) because it raises File \"django/core/management/__init__.py\", line 130, in <listcomp> for opt in parser._actions if opt.required and opt.dest in options ValueError: min() arg is an empty sequence",
  "created_at": "2019-06-26T20:18:50Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_subparser_dest_args (user_commands.tests.CommandTests)\", \"test_subparser_dest_required_args (user_commands.tests.CommandTests)\", \"test_subparser_invalid_option (user_commands.tests.CommandTests)\"]",
  "PASS_TO_PASS": "[\"test_get_random_secret_key (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_false (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_true (user_commands.tests.UtilsTests)\", \"test_no_existent_external_program (user_commands.tests.UtilsTests)\", \"test_normalize_path_patterns_truncates_wildcard_base (user_commands.tests.UtilsTests)\", \"test_call_command_no_checks (user_commands.tests.CommandTests)\", \"test_call_command_option_parsing (user_commands.tests.CommandTests)\", \"test_call_command_option_parsing_non_string_arg (user_commands.tests.CommandTests)\", \"test_call_command_unrecognized_option (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_mixed_options (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_options (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_no_app_labels_and_parameters_should_raise_a_command_error (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_only_empty_parameter_should_ends_gracefully (user_commands.tests.CommandTests)\", \"test_calling_command_with_app_labels_and_parameters_should_be_ok (user_commands.tests.CommandTests)\", \"test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok (user_commands.tests.CommandTests)\", \"test_check_migrations (user_commands.tests.CommandTests)\", \"test_command (user_commands.tests.CommandTests)\", \"test_command_add_arguments_after_common_arguments (user_commands.tests.CommandTests)\", \"test_command_style (user_commands.tests.CommandTests)\", \"BaseCommand.create_parser() passes kwargs to CommandParser.\", \"test_discover_commands_in_eggs (user_commands.tests.CommandTests)\", \"An unknown command raises CommandError\", \"test_find_command_without_PATH (user_commands.tests.CommandTests)\", \"test_language_preserved (user_commands.tests.CommandTests)\", \"test_no_translations_deactivate_translations (user_commands.tests.CommandTests)\", \"test_output_transaction (user_commands.tests.CommandTests)\", \"test_subparser (user_commands.tests.CommandTests)\", \"Exception raised in a command should raise CommandError with\", \"test_disallowed_abbreviated_options (user_commands.tests.CommandRunTests)\", \"test_script_prefix_set_in_commands (user_commands.tests.CommandRunTests)\", \"test_skip_checks (user_commands.tests.CommandRunTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.574604",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}