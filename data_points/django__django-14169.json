{
  "repo": "django/django",
  "instance_id": "django__django-14169",
  "base_commit": "f5a22442176878d07e80ae5ba0af1dd8d6910fbd",
  "patch": "diff --git a/django/db/backends/sqlite3/creation.py b/django/db/backends/sqlite3/creation.py\n--- a/django/db/backends/sqlite3/creation.py\n+++ b/django/db/backends/sqlite3/creation.py\n@@ -55,7 +55,7 @@ def get_test_db_clone_settings(self, suffix):\n             return orig_settings_dict\n         else:\n             root, ext = os.path.splitext(orig_settings_dict['NAME'])\n-            return {**orig_settings_dict, 'NAME': '{}_{}.{}'.format(root, suffix, ext)}\n+            return {**orig_settings_dict, 'NAME': '{}_{}{}'.format(root, suffix, ext)}\n \n     def _clone_test_db(self, suffix, verbosity, keepdb=False):\n         source_database_name = self.connection.settings_dict['NAME']\n",
  "test_patch": "diff --git a/tests/backends/sqlite/test_creation.py b/tests/backends/sqlite/test_creation.py\n--- a/tests/backends/sqlite/test_creation.py\n+++ b/tests/backends/sqlite/test_creation.py\n@@ -14,3 +14,20 @@ def test_custom_test_name(self):\n         test_connection.settings_dict['TEST']['NAME'] = 'custom.sqlite.db'\n         signature = test_connection.creation_class(test_connection).test_db_signature()\n         self.assertEqual(signature, (None, 'custom.sqlite.db'))\n+\n+    def test_get_test_db_clone_settings_name(self):\n+        test_connection = copy.copy(connections[DEFAULT_DB_ALIAS])\n+        test_connection.settings_dict = copy.deepcopy(\n+            connections[DEFAULT_DB_ALIAS].settings_dict,\n+        )\n+        tests = [\n+            ('test.sqlite3', 'test_1.sqlite3'),\n+            ('test', 'test_1'),\n+        ]\n+        for test_db_name, expected_clone_name in tests:\n+            with self.subTest(test_db_name=test_db_name):\n+                test_connection.settings_dict['NAME'] = test_db_name\n+                test_connection.settings_dict['TEST']['NAME'] = test_db_name\n+                creation_class = test_connection.creation_class(test_connection)\n+                clone_settings_dict = creation_class.get_test_db_clone_settings('1')\n+                self.assertEqual(clone_settings_dict['NAME'], expected_clone_name)\n",
  "problem_statement": "Extra dot in cloned test database file names on SQLite when using --parallel.\nDescription\n\t\nWhen asking Django to create on-disk (instead of in-memory) sqlite cloned test databases by using the --parallel flag, the cloned file names are created as, e.g., \"test_db_1..sqlite3\", \"test_db_2..sqlite3\", etc. (with two dots instead of one).\nIf the specified test database name lacks any extension, e.g. just 'test_db', then the cloned file names have a trailing dot: \"test_db_1.\", \"test_db_2.\", \"test_db_3.\", etc.\nThis is due to this line: \nâ€‹https://github.com/django/django/blob/main/django/db/backends/sqlite3/creation.py#L58\n...in get_test_db_clone_settings() which constructs the file name using the string: \n'{}_{}.{}'.format(root, suffix, ext)\nHowever, os.path.splitext() already includes the dot in the returned extension ('ext'). Removing the dot from the format string seems the only change needed to fix it:\n'{}_{}{}'.format(root, suffix, ext)\nFrom the github file history it looks like this quirk has been there since the --parallel flag was first introduced (commit 0586c061f0b857e2259bea48e21ebb69a7878d13 in Sep 2015).\nTo reproduce the issue:\nIn settings.py, force on-disk instead of in-memory test databases by specifying any test db name:\nDATABASES = {\n\t'default': {\n\t\tENGINE: 'django.db.backends.sqlite3',\n\t\tNAME: 'db.sqlite3',\n\t\tTEST: {\n\t\t\t'NAME': test_db.sqlite3',\n\t\t}\n\t}\n}\nCreate any model with migrations, and more than one TestCase class (to ensure --parallel creates clones of the test database).\nAnd on the command line, run tests with --parallel and --keepdb to see the db files generated. This should be run on a multi-core processor.\nmanage.py test --parallel --keepdb\n",
  "hints_text": "Good catch, would you like to prepare a patch? (tests are required)\nReplying to Mariusz Felisiak: Good catch, would you like to prepare a patch? (tests are required) May I work on this patch.",
  "created_at": "2021-03-23T05:01:47Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_get_test_db_clone_settings_name (backends.sqlite.test_creation.TestDbSignatureTests)\"]",
  "PASS_TO_PASS": "[\"test_custom_test_name (backends.sqlite.test_creation.TestDbSignatureTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.683370",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}