{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-7571",
  "base_commit": "422685d0bdc110547535036c1ff398b5e1c44145",
  "patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -345,6 +345,7 @@ def __init__(self, item: nodes.Node) -> None:\n         \"\"\"Creates a new funcarg.\"\"\"\n         self._item = item\n         # dict of log name -> log level\n+        self._initial_handler_level = None  # type: Optional[int]\n         self._initial_logger_levels = {}  # type: Dict[Optional[str], int]\n \n     def _finalize(self) -> None:\n@@ -353,6 +354,8 @@ def _finalize(self) -> None:\n         This restores the log levels changed by :meth:`set_level`.\n         \"\"\"\n         # restore log levels\n+        if self._initial_handler_level is not None:\n+            self.handler.setLevel(self._initial_handler_level)\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n@@ -434,6 +437,7 @@ def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> Non\n         # save the original log-level to restore it during teardown\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n+        self._initial_handler_level = self.handler.level\n         self.handler.setLevel(level)\n \n     @contextmanager\n",
  "test_patch": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -2,6 +2,7 @@\n \n import pytest\n from _pytest.logging import caplog_records_key\n+from _pytest.pytester import Testdir\n \n logger = logging.getLogger(__name__)\n sublogger = logging.getLogger(__name__ + \".baz\")\n@@ -27,8 +28,11 @@ def test_change_level(caplog):\n     assert \"CRITICAL\" in caplog.text\n \n \n-def test_change_level_undo(testdir):\n-    \"\"\"Ensure that 'set_level' is undone after the end of the test\"\"\"\n+def test_change_level_undo(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test.\n+\n+    Tests the logging output themselves (affacted both by logger and handler levels).\n+    \"\"\"\n     testdir.makepyfile(\n         \"\"\"\n         import logging\n@@ -50,6 +54,33 @@ def test2(caplog):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n+def test_change_level_undos_handler_level(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\n+\n+    Issue #7569. Tests the handler level specifically.\n+    \"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n+\n def test_with_statement(caplog):\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n",
  "problem_statement": "caplog fixture doesn't restore log level after test\nFrom the documentation at https://docs.pytest.org/en/6.0.0/logging.html#caplog-fixture, \"The log levels set are restored automatically at the end of the test\".\r\nIt used to work, but looks broken in new 6.0 release. Minimal example to reproduce:\r\n\r\n```\r\ndef test_foo(caplog):\r\n    caplog.set_level(42)\r\n\r\ndef test_bar(caplog):\r\n    print(caplog.handler.level)\r\n```\r\n\r\nIt prints \"0\" for pytest<6, \"42\" after.\n",
  "hints_text": "This probably regressed in fcbaab8b0b89abc622dbfb7982cf9bd8c91ef301. I will take a look.",
  "created_at": "2020-07-29T12:00:47Z",
  "version": "6.0",
  "FAIL_TO_PASS": "[\"testing/logging/test_fixture.py::test_change_level_undos_handler_level\"]",
  "PASS_TO_PASS": "[\"testing/logging/test_fixture.py::test_change_level\", \"testing/logging/test_fixture.py::test_with_statement\", \"testing/logging/test_fixture.py::test_log_access\", \"testing/logging/test_fixture.py::test_messages\", \"testing/logging/test_fixture.py::test_record_tuples\", \"testing/logging/test_fixture.py::test_unicode\", \"testing/logging/test_fixture.py::test_clear\", \"testing/logging/test_fixture.py::test_caplog_captures_for_all_stages\", \"testing/logging/test_fixture.py::test_fixture_help\", \"testing/logging/test_fixture.py::test_change_level_undo\", \"testing/logging/test_fixture.py::test_ini_controls_global_log_level\", \"testing/logging/test_fixture.py::test_caplog_can_override_global_log_level\", \"testing/logging/test_fixture.py::test_caplog_captures_despite_exception\", \"testing/logging/test_fixture.py::test_log_report_captures_according_to_config_option_upon_failure\"]",
  "environment_setup_commit": "634cde9506eb1f48dec3ec77974ee8dc952207c6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.938935",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}