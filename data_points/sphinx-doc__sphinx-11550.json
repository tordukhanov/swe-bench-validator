{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-11550",
  "base_commit": "4dee1629901f5e5c2aefc274da42483e16770e50",
  "patch": "diff --git a/sphinx/ext/autodoc/preserve_defaults.py b/sphinx/ext/autodoc/preserve_defaults.py\n--- a/sphinx/ext/autodoc/preserve_defaults.py\n+++ b/sphinx/ext/autodoc/preserve_defaults.py\n@@ -8,17 +8,23 @@\n \n import ast\n import inspect\n-from typing import TYPE_CHECKING, Any\n+import types\n+import warnings\n+from typing import TYPE_CHECKING\n \n import sphinx\n+from sphinx.deprecation import RemovedInSphinx90Warning\n from sphinx.locale import __\n from sphinx.pycode.ast import unparse as ast_unparse\n from sphinx.util import logging\n \n if TYPE_CHECKING:\n+    from typing import Any\n+\n     from sphinx.application import Sphinx\n \n logger = logging.getLogger(__name__)\n+_LAMBDA_NAME = (lambda: None).__name__\n \n \n class DefaultValue:\n@@ -31,12 +37,19 @@ def __repr__(self) -> str:\n \n def get_function_def(obj: Any) -> ast.FunctionDef | None:\n     \"\"\"Get FunctionDef object from living object.\n+\n     This tries to parse original code for living object and returns\n     AST node for given *obj*.\n     \"\"\"\n+    warnings.warn('sphinx.ext.autodoc.preserve_defaults.get_function_def is'\n+                  ' deprecated and scheduled for removal in Sphinx 9.'\n+                  ' Use sphinx.ext.autodoc.preserve_defaults._get_arguments() to'\n+                  ' extract AST arguments objects from a lambda or regular'\n+                  ' function.', RemovedInSphinx90Warning, stacklevel=2)\n+\n     try:\n         source = inspect.getsource(obj)\n-        if source.startswith((' ', r'\\t')):\n+        if source.startswith((' ', '\\t')):\n             # subject is placed inside class or block.  To read its docstring,\n             # this adds if-block before the declaration.\n             module = ast.parse('if True:\\n' + source)\n@@ -48,6 +61,53 @@ def get_function_def(obj: Any) -> ast.FunctionDef | None:\n         return None\n \n \n+def _get_arguments(obj: Any, /) -> ast.arguments | None:\n+    \"\"\"Parse 'ast.arguments' from an object.\n+\n+    This tries to parse the original code for an object and returns\n+    an 'ast.arguments' node.\n+    \"\"\"\n+    try:\n+        source = inspect.getsource(obj)\n+        if source.startswith((' ', '\\t')):\n+            # 'obj' is in some indented block.\n+            module = ast.parse('if True:\\n' + source)\n+            subject = module.body[0].body[0]  # type: ignore[attr-defined]\n+        else:\n+            module = ast.parse(source)\n+            subject = module.body[0]\n+    except (OSError, TypeError):\n+        # bail; failed to load source for 'obj'.\n+        return None\n+    except SyntaxError:\n+        if _is_lambda(obj):\n+            # Most likely a multi-line arising from detecting a lambda, e.g.:\n+            #\n+            # class Egg:\n+            #     x = property(\n+            #         lambda self: 1, doc=\"...\")\n+            return None\n+\n+        # Other syntax errors that are not due to the fact that we are\n+        # documenting a lambda function are propagated\n+        # (in particular if a lambda is renamed by the user).\n+        raise\n+\n+    return _get_arguments_inner(subject)\n+\n+\n+def _is_lambda(x, /):\n+    return isinstance(x, types.LambdaType) and x.__name__ == _LAMBDA_NAME\n+\n+\n+def _get_arguments_inner(x: Any, /) -> ast.arguments | None:\n+    if isinstance(x, (ast.AsyncFunctionDef, ast.FunctionDef, ast.Lambda)):\n+        return x.args\n+    if isinstance(x, (ast.Assign, ast.AnnAssign)):\n+        return _get_arguments_inner(x.value)\n+    return None\n+\n+\n def get_default_value(lines: list[str], position: ast.AST) -> str | None:\n     try:\n         if position.lineno == position.end_lineno:\n@@ -67,18 +127,24 @@ def update_defvalue(app: Sphinx, obj: Any, bound_method: bool) -> None:\n \n     try:\n         lines = inspect.getsource(obj).splitlines()\n-        if lines[0].startswith((' ', r'\\t')):\n-            lines.insert(0, '')  # insert a dummy line to follow what get_function_def() does.\n+        if lines[0].startswith((' ', '\\t')):\n+            # insert a dummy line to follow what _get_arguments() does.\n+            lines.insert(0, '')\n     except (OSError, TypeError):\n         lines = []\n \n     try:\n-        function = get_function_def(obj)\n-        assert function is not None  # for mypy\n-        if function.args.defaults or function.args.kw_defaults:\n+        args = _get_arguments(obj)\n+        if args is None:\n+            # If the object is a built-in, we won't be always able to recover\n+            # the function definition and its arguments. This happens if *obj*\n+            # is the `__init__` method generated automatically for dataclasses.\n+            return\n+\n+        if args.defaults or args.kw_defaults:\n             sig = inspect.signature(obj)\n-            defaults = list(function.args.defaults)\n-            kw_defaults = list(function.args.kw_defaults)\n+            defaults = list(args.defaults)\n+            kw_defaults = list(args.kw_defaults)\n             parameters = list(sig.parameters.values())\n             for i, param in enumerate(parameters):\n                 if param.default is param.empty:\n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/preserve_defaults.py b/tests/roots/test-ext-autodoc/target/preserve_defaults.py\n--- a/tests/roots/test-ext-autodoc/target/preserve_defaults.py\n+++ b/tests/roots/test-ext-autodoc/target/preserve_defaults.py\n@@ -30,3 +30,31 @@ def clsmeth(cls, name: str = CONSTANT, sentinel: Any = SENTINEL,\n                 now: datetime = datetime.now(), color: int = 0xFFFFFF,\n                 *, kwarg1, kwarg2 = 0xFFFFFF) -> None:\n         \"\"\"docstring\"\"\"\n+\n+\n+get_sentinel = lambda custom=SENTINEL: custom\n+\"\"\"docstring\"\"\"\n+\n+\n+class MultiLine:\n+    \"\"\"docstring\"\"\"\n+\n+    # The properties will raise a silent SyntaxError because \"lambda self: 1\"\n+    # will be detected as a function to update the default values of. However,\n+    # only prop3 will not fail because it's on a single line whereas the others\n+    # will fail to parse.\n+\n+    prop1 = property(\n+      lambda self: 1, doc=\"docstring\")\n+\n+    prop2 = property(\n+      lambda self: 2, doc=\"docstring\"\n+    )\n+\n+    prop3 = property(lambda self: 3, doc=\"docstring\")\n+\n+    prop4 = (property\n+    (lambda self: 4, doc=\"docstring\"))\n+\n+    prop5 = property\\\n+    (lambda self: 5, doc=\"docstring\")\ndiff --git a/tests/roots/test-ext-autodoc/target/preserve_defaults_special_constructs.py b/tests/roots/test-ext-autodoc/target/preserve_defaults_special_constructs.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/preserve_defaults_special_constructs.py\n@@ -0,0 +1,50 @@\n+from __future__ import annotations\n+\n+from collections import namedtuple\n+from dataclasses import dataclass, field\n+from typing import NamedTuple, TypedDict\n+\n+#: docstring\n+SENTINEL = object()\n+\n+\n+#: docstring\n+ze_lambda = lambda z=SENTINEL: None\n+\n+\n+def foo(x, y, z=SENTINEL):\n+    \"\"\"docstring\"\"\"\n+\n+\n+@dataclass\n+class DataClass:\n+    \"\"\"docstring\"\"\"\n+    a: int\n+    b: object = SENTINEL\n+    c: list[int] = field(default_factory=lambda: [1, 2, 3])\n+\n+\n+@dataclass(init=False)\n+class DataClassNoInit:\n+    \"\"\"docstring\"\"\"\n+    a: int\n+    b: object = SENTINEL\n+    c: list[int] = field(default_factory=lambda: [1, 2, 3])\n+\n+\n+class MyTypedDict(TypedDict):\n+    \"\"\"docstring\"\"\"\n+    a: int\n+    b: object\n+    c: list[int]\n+\n+\n+class MyNamedTuple1(NamedTuple):\n+    \"\"\"docstring\"\"\"\n+    a: int\n+    b: object = object()\n+    c: list[int] = [1, 2, 3]\n+\n+\n+class MyNamedTuple2(namedtuple('Base', ('a', 'b'), defaults=(0, SENTINEL))):\n+    \"\"\"docstring\"\"\"\ndiff --git a/tests/test_ext_autodoc_preserve_defaults.py b/tests/test_ext_autodoc_preserve_defaults.py\n--- a/tests/test_ext_autodoc_preserve_defaults.py\n+++ b/tests/test_ext_autodoc_preserve_defaults.py\n@@ -40,6 +40,42 @@ def test_preserve_defaults(app):\n         '      docstring',\n         '',\n         '',\n+        '.. py:class:: MultiLine()',\n+        '   :module: target.preserve_defaults',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:property:: MultiLine.prop1',\n+        '      :module: target.preserve_defaults',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:property:: MultiLine.prop2',\n+        '      :module: target.preserve_defaults',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:property:: MultiLine.prop3',\n+        '      :module: target.preserve_defaults',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:property:: MultiLine.prop4',\n+        '      :module: target.preserve_defaults',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:property:: MultiLine.prop5',\n+        '      :module: target.preserve_defaults',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n         '.. py:function:: foo(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, '\n         'now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, '\n         'kwarg2=%s) -> None' % (color, color),\n@@ -47,4 +83,110 @@ def test_preserve_defaults(app):\n         '',\n         '   docstring',\n         '',\n+        '',\n+        '.. py:function:: get_sentinel(custom=SENTINEL)',\n+        '   :module: target.preserve_defaults',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_preserve_defaults': True})\n+def test_preserve_defaults_special_constructs(app):\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'module', 'target.preserve_defaults_special_constructs', options)\n+\n+    # * dataclasses.dataclass:\n+    #   - __init__ source code is not available\n+    #   - default values specified at class level are not discovered\n+    #   - values wrapped in a field(...) expression cannot be analyzed\n+    #     easily even if annotations were to be parsed\n+    # * typing.NamedTuple:\n+    #   - __init__ source code is not available\n+    #   - default values specified at class level are not discovered\n+    # * collections.namedtuple:\n+    #   - default values are specified as \"default=(d1, d2, ...)\"\n+    #\n+    # In the future, it might be possible to find some additional default\n+    # values by parsing the source code of the annotations but the task is\n+    # rather complex.\n+\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.preserve_defaults_special_constructs',\n+        '',\n+        '',\n+        '.. py:class:: DataClass('\n+        'a: int, b: object = <object object>, c: list[int] = <factory>)',\n+        '   :module: target.preserve_defaults_special_constructs',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:class:: DataClassNoInit()',\n+        '   :module: target.preserve_defaults_special_constructs',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:class:: MyNamedTuple1('\n+        'a: int, b: object = <object object>, c: list[int] = [1, 2, 3])',\n+        '   :module: target.preserve_defaults_special_constructs',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: MyNamedTuple1.a',\n+        '      :module: target.preserve_defaults_special_constructs',\n+        '      :type: int',\n+        '',\n+        '      Alias for field number 0',\n+        '',\n+        '',\n+        '   .. py:attribute:: MyNamedTuple1.b',\n+        '      :module: target.preserve_defaults_special_constructs',\n+        '      :type: object',\n+        '',\n+        '      Alias for field number 1',\n+        '',\n+        '',\n+        '   .. py:attribute:: MyNamedTuple1.c',\n+        '      :module: target.preserve_defaults_special_constructs',\n+        '      :type: list[int]',\n+        '',\n+        '      Alias for field number 2',\n+        '',\n+        '',\n+        '.. py:class:: MyNamedTuple2(a=0, b=<object object>)',\n+        '   :module: target.preserve_defaults_special_constructs',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:class:: MyTypedDict',\n+        '   :module: target.preserve_defaults_special_constructs',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:data:: SENTINEL',\n+        '   :module: target.preserve_defaults_special_constructs',\n+        '   :value: <object object>',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:function:: foo(x, y, z=SENTINEL)',\n+        '   :module: target.preserve_defaults_special_constructs',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:function:: ze_lambda(z=SENTINEL)',\n+        '   :module: target.preserve_defaults_special_constructs',\n+        '',\n+        '   docstring',\n+        '',\n     ]\n",
  "problem_statement": "autodoc preserve defaults leads to exception on multiline lambda\n### Describe the bug\n\nIn [cssutils](/jaraco/cssutils), I've stumbled into an issue where the docs builds are failing (https://github.com/jaraco/cssutils/issues/36).\r\n\r\nAfter some [investigation](https://stackoverflow.com/questions/76443979/exception-invalid-syntax-while-formatting-arguments-for-property), I learned that the issue seems to be related to the use of `autodoc` with `autodoc_preserve_defaults = True` and the use of `property(lambda)` where the lambda is on a different line from the `property`.\n\n### How to Reproduce\n\n```\r\n draft $ cat mod.py\r\nclass X:\r\n  foo = property(\r\n    lambda self: None, doc=\"Foo.\")\r\n draft $ cat conf.py\r\nextensions = [\r\n    'sphinx.ext.autodoc',\r\n]\r\n\r\nmaster_doc = \"index\"\r\n\r\n# Preserve authored syntax for defaults\r\nautodoc_preserve_defaults = True\r\n draft $ cat index.rst\r\n.. automodule:: mod\r\n    :members:\r\n    :undoc-members:\r\n draft $ pip-run sphinx -- -m sphinx . build\r\nRunning Sphinx v7.0.1\r\nmaking output directory... done\r\nbuilding [mo]: targets for 0 po files that are out of date\r\nwriting output... \r\nbuilding [html]: targets for 1 source files that are out of date\r\nupdating environment: [new config] 1 added, 0 changed, 0 removed\r\nreading sources... [100%] index                                                                                                                \r\nWARNING: error while formatting arguments for mod.X.foo: Handler <function update_defvalue at 0x102c2b100> for event 'autodoc-before-process-signature' threw an exception (exception: unmatched ')' (<unknown>, line 2))\r\nlooking for now-outdated files... none found\r\npickling environment... done\r\nchecking consistency... done\r\npreparing documents... done\r\nwriting output... [100%] index                                                                                                                 \r\ngenerating indices... genindex py-modindex done\r\nwriting additional pages... search done\r\ncopying static files... done\r\ncopying extra files... done\r\ndumping search index in English (code: en)... done\r\ndumping object inventory... done\r\nbuild succeeded, 1 warning.\r\n\r\nThe HTML pages are in build.\r\n```\n\n### Environment Information\n\n```text\ndraft $ pip-run sphinx -- -m sphinx --bug-report\r\nPlease paste all output below into the bug report template\r\n\r\n\r\n\r\nPlatform:              darwin; (macOS-13.4-arm64-arm-64bit)\r\nPython version:        3.11.3 (main, Apr  7 2023, 20:13:31) [Clang 14.0.0 (clang-1400.0.29.202)])\r\nPython implementation: CPython\r\nSphinx version:        7.0.1\r\nDocutils version:      0.20.1\r\nJinja2 version:        3.1.2\r\nPygments version:      2.15.1\n```\n\n\n### Sphinx extensions\n\n```python\nsphinx.ext.autodoc\n```\n\n\n### Additional context\n\nWeirdly, removing the carriage return after `property(` suppresses the error. Also, converting to a traditional `@property` decorator or replacing the lambda with a simple function also suppresses the error:\r\n\r\n```\r\nclass X:\r\n  def _f(self):\r\n    return\r\n  foo = property(\r\n    _f, doc=\"Foo.\")\r\n```\n",
  "hints_text": "**TL;DR** `autodoc_preserve_defaults` does not work with lambdas.\r\n\r\nEven the following simple example \r\n\r\n```python\r\nX = object()\r\nZ = lambda x=X: x\r\n\"\"\"The Z function.\"\"\"\r\n```\r\n\r\nmiserably fails. The reason is because the object being documented is a lambda function. Because of that, the extracted AST node is not a function definition node:\r\n\r\nhttps://github.com/sphinx-doc/sphinx/blob/d3c91f951255c6729a53e38c895ddc0af036b5b9/sphinx/ext/autodoc/preserve_defaults.py#L35-L41\r\n\r\nYour example also highlights another issue. The corresponding source is\r\n\r\n```python\r\n    lambda self: None, doc=\"Foo.\")\r\n```\r\n\r\nYou'll wrap it in a fake block and would ask to parse:\r\n\r\n```python\r\nif True:\r\n    lambda self: None, doc=\"Foo.\")\r\n```\r\n\r\nand obviously it fails. The reason why it works when no lambda is used is because the source code of your function is correctly found. For the simple example above, the corresponding source code is\r\n\r\n```python\r\nZ = lambda x=X: x\r\n```\r\n\r\nwhich is an *assignment* and not a function definition. Note that `module.body[0].body[0]` is still incorrect because it is an expression node whose value is the lambda function (`module.body[0].body[0].value`). So we need to change the implementation of `get_function_def`. \r\n\r\n---\r\n\r\nI can work on the issue today but won't be able to guarantee that it can be easily solved. I think I'll just consider the case of a lambda function differently and handle the case when the source code of the lambda function is wrapped or decorated and whether there are trailing braces to close.\r\n\r\n\nThanks for the analysis.\r\n\r\nI understand this report is fairly obscure, so I'll be surprised and impressed if you're able to solve it elegantly or quickly.\r\n\r\nFrom the sounds of things, my best bet would for now be to accept that this form isn't supported and work to port the usage in the library to use naturally-decorated property methods, which I'll do.\n> I understand this report is fairly obscure, so I'll be surprised and impressed if you're able to solve it elegantly or quickly.\r\n\r\nWell, it should not be that hard actually. It's just that I don't necessarily have all the corner cases in mind (nor the time to look carefully). I'll only be able to look at it in mid July",
  "created_at": "2023-08-03T08:56:59Z",
  "version": "7.2",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_preserve_defaults.py::test_preserve_defaults\", \"tests/test_ext_autodoc_preserve_defaults.py::test_preserve_defaults_special_constructs\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "7758e016231c3886e5a290c00fcb2c75d1f36c18",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.038480",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}