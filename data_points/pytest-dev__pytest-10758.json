{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-10758",
  "base_commit": "d5dda84ef346b83e0b634a92e00c62a8a10e0061",
  "patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -44,9 +44,13 @@\n if TYPE_CHECKING:\n     from _pytest.assertion import AssertionState\n \n+if sys.version_info >= (3, 8):\n+    namedExpr = ast.NamedExpr\n+else:\n+    namedExpr = ast.Expr\n \n-assertstate_key = StashKey[\"AssertionState\"]()\n \n+assertstate_key = StashKey[\"AssertionState\"]()\n \n # pytest caches rewritten pycs in pycache dirs\n PYTEST_TAG = f\"{sys.implementation.cache_tag}-pytest-{version}\"\n@@ -635,8 +639,12 @@ class AssertionRewriter(ast.NodeVisitor):\n        .push_format_context() and .pop_format_context() which allows\n        to build another %-formatted string while already building one.\n \n-    This state is reset on every new assert statement visited and used\n-    by the other visitors.\n+    :variables_overwrite: A dict filled with references to variables\n+       that change value within an assert. This happens when a variable is\n+       reassigned with the walrus operator\n+\n+    This state, except the variables_overwrite,  is reset on every new assert\n+    statement visited and used by the other visitors.\n     \"\"\"\n \n     def __init__(\n@@ -652,6 +660,7 @@ def __init__(\n         else:\n             self.enable_assertion_pass_hook = False\n         self.source = source\n+        self.variables_overwrite: Dict[str, str] = {}\n \n     def run(self, mod: ast.Module) -> None:\n         \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n@@ -666,7 +675,7 @@ def run(self, mod: ast.Module) -> None:\n         if doc is not None and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n-        lineno = 1\n+        item = None\n         for item in mod.body:\n             if (\n                 expect_docstring\n@@ -937,6 +946,18 @@ def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]:\n                 ast.copy_location(node, assert_)\n         return self.statements\n \n+    def visit_NamedExpr(self, name: namedExpr) -> Tuple[namedExpr, str]:\n+        # This method handles the 'walrus operator' repr of the target\n+        # name if it's a local variable or _should_repr_global_name()\n+        # thinks it's acceptable.\n+        locs = ast.Call(self.builtin(\"locals\"), [], [])\n+        target_id = name.target.id  # type: ignore[attr-defined]\n+        inlocs = ast.Compare(ast.Str(target_id), [ast.In()], [locs])\n+        dorepr = self.helper(\"_should_repr_global_name\", name)\n+        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n+        expr = ast.IfExp(test, self.display(name), ast.Str(target_id))\n+        return name, self.explanation_param(expr)\n+\n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n         # Display the repr of the name if it's a local variable or\n         # _should_repr_global_name() thinks it's acceptable.\n@@ -963,6 +984,20 @@ def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]:\n                 # cond is set in a prior loop iteration below\n                 self.expl_stmts.append(ast.If(cond, fail_inner, []))  # noqa\n                 self.expl_stmts = fail_inner\n+                # Check if the left operand is a namedExpr and the value has already been visited\n+                if (\n+                    isinstance(v, ast.Compare)\n+                    and isinstance(v.left, namedExpr)\n+                    and v.left.target.id\n+                    in [\n+                        ast_expr.id\n+                        for ast_expr in boolop.values[:i]\n+                        if hasattr(ast_expr, \"id\")\n+                    ]\n+                ):\n+                    pytest_temp = self.variable()\n+                    self.variables_overwrite[v.left.target.id] = pytest_temp\n+                    v.left.target.id = pytest_temp\n             self.push_format_context()\n             res, expl = self.visit(v)\n             body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n@@ -1038,6 +1073,9 @@ def visit_Attribute(self, attr: ast.Attribute) -> Tuple[ast.Name, str]:\n \n     def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]:\n         self.push_format_context()\n+        # We first check if we have overwritten a variable in the previous assert\n+        if isinstance(comp.left, ast.Name) and comp.left.id in self.variables_overwrite:\n+            comp.left.id = self.variables_overwrite[comp.left.id]\n         left_res, left_expl = self.visit(comp.left)\n         if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n             left_expl = f\"({left_expl})\"\n@@ -1049,6 +1087,13 @@ def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]:\n         syms = []\n         results = [left_res]\n         for i, op, next_operand in it:\n+            if (\n+                isinstance(next_operand, namedExpr)\n+                and isinstance(left_res, ast.Name)\n+                and next_operand.target.id == left_res.id\n+            ):\n+                next_operand.target.id = self.variable()\n+                self.variables_overwrite[left_res.id] = next_operand.target.id\n             next_res, next_expl = self.visit(next_operand)\n             if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                 next_expl = f\"({next_expl})\"\n@@ -1072,6 +1117,7 @@ def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]:\n             res: ast.expr = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n+\n         return res, self.explanation_param(self.pop_format_context(expl_call))\n \n \n",
  "test_patch": "diff --git a/testing/test_assertrewrite.py b/testing/test_assertrewrite.py\n--- a/testing/test_assertrewrite.py\n+++ b/testing/test_assertrewrite.py\n@@ -1265,6 +1265,177 @@ def test_simple_failure():\n         result.stdout.fnmatch_lines([\"*E*assert (1 + 1) == 3\"])\n \n \n+@pytest.mark.skipif(\n+    sys.version_info < (3, 8), reason=\"walrus operator not available in py<38\"\n+)\n+class TestIssue10743:\n+    def test_assertion_walrus_operator(self, pytester: Pytester) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            def my_func(before, after):\n+                return before == after\n+\n+            def change_value(value):\n+                return value.lower()\n+\n+            def test_walrus_conversion():\n+                a = \"Hello\"\n+                assert not my_func(a, a := change_value(a))\n+                assert a == \"hello\"\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 0\n+\n+    def test_assertion_walrus_operator_dont_rewrite(self, pytester: Pytester) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            'PYTEST_DONT_REWRITE'\n+            def my_func(before, after):\n+                return before == after\n+\n+            def change_value(value):\n+                return value.lower()\n+\n+            def test_walrus_conversion_dont_rewrite():\n+                a = \"Hello\"\n+                assert not my_func(a, a := change_value(a))\n+                assert a == \"hello\"\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 0\n+\n+    def test_assertion_inline_walrus_operator(self, pytester: Pytester) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            def my_func(before, after):\n+                return before == after\n+\n+            def test_walrus_conversion_inline():\n+                a = \"Hello\"\n+                assert not my_func(a, a := a.lower())\n+                assert a == \"hello\"\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 0\n+\n+    def test_assertion_inline_walrus_operator_reverse(self, pytester: Pytester) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            def my_func(before, after):\n+                return before == after\n+\n+            def test_walrus_conversion_reverse():\n+                a = \"Hello\"\n+                assert my_func(a := a.lower(), a)\n+                assert a == 'hello'\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 0\n+\n+    def test_assertion_walrus_no_variable_name_conflict(\n+        self, pytester: Pytester\n+    ) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            def test_walrus_conversion_no_conflict():\n+                a = \"Hello\"\n+                assert a == (b := a.lower())\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 1\n+        result.stdout.fnmatch_lines([\"*AssertionError: assert 'Hello' == 'hello'\"])\n+\n+    def test_assertion_walrus_operator_true_assertion_and_changes_variable_value(\n+        self, pytester: Pytester\n+    ) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            def test_walrus_conversion_succeed():\n+                a = \"Hello\"\n+                assert a != (a := a.lower())\n+                assert a == 'hello'\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 0\n+\n+    def test_assertion_walrus_operator_fail_assertion(self, pytester: Pytester) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            def test_walrus_conversion_fails():\n+                a = \"Hello\"\n+                assert a == (a := a.lower())\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 1\n+        result.stdout.fnmatch_lines([\"*AssertionError: assert 'Hello' == 'hello'\"])\n+\n+    def test_assertion_walrus_operator_boolean_composite(\n+        self, pytester: Pytester\n+    ) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            def test_walrus_operator_change_boolean_value():\n+                a = True\n+                assert a and True and ((a := False) is False) and (a is False) and ((a := None) is None)\n+                assert a is None\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 0\n+\n+    def test_assertion_walrus_operator_compare_boolean_fails(\n+        self, pytester: Pytester\n+    ) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            def test_walrus_operator_change_boolean_value():\n+                a = True\n+                assert not (a and ((a := False) is False))\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 1\n+        result.stdout.fnmatch_lines([\"*assert not (True and False is False)\"])\n+\n+    def test_assertion_walrus_operator_boolean_none_fails(\n+        self, pytester: Pytester\n+    ) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            def test_walrus_operator_change_boolean_value():\n+                a = True\n+                assert not (a and ((a := None) is None))\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 1\n+        result.stdout.fnmatch_lines([\"*assert not (True and None is None)\"])\n+\n+    def test_assertion_walrus_operator_value_changes_cleared_after_each_test(\n+        self, pytester: Pytester\n+    ) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            def test_walrus_operator_change_value():\n+                a = True\n+                assert (a := None) is None\n+\n+            def test_walrus_operator_not_override_value():\n+                a = True\n+                assert a is True\n+        \"\"\"\n+        )\n+        result = pytester.runpytest()\n+        assert result.ret == 0\n+\n+\n @pytest.mark.skipif(\n     sys.maxsize <= (2**31 - 1), reason=\"Causes OverflowError on 32bit systems\"\n )\n",
  "problem_statement": "Walrus operator causes different behavior in PyTest.\nI am currently testing the following function but find that the function passes the test in the normal Python terminal but fails in a PyTest run. The walrus operator is relatively new and not many people use it. I think that there may be an inconsistency in the execution environment.\r\n\r\n```\r\nimport numpy as np\r\n\r\ndef test_walrus_conversion():\r\n    a = np.random.random(16)\r\n    assert not np.array_equal(a, a := a.astype(np.uint8))\r\n    assert np.all(a == 0)\r\n```\r\n\n",
  "hints_text": "It's very likely a missed case in the asset rewrite\n\n\nHi, I did some tests on this since I was curious about how this works.\r\nI created a module like this \r\n\r\n```\r\ndef my_func(before, after):\r\n    return before == after\r\n\r\ndef change_value(value):\r\n    return value.lower()\r\n\r\ndef test_walrus_conversion():\r\n    a = \"Hello\"\r\n    assert not my_func(a, a := change_value(a))\r\n    assert a == \"hello\"\r\n```\r\nand run it. It fails as the issuer stated. Then I added \"\"\"PYTEST_DONT_REWRITE\"\"\" at the beginning of the module and now it passes. \r\nIf it's ok with you I'd like to try to fix this.\r\n\r\nAs a side note, this is a very edge case and I don't know if it is clean to write something like this. Anyway, since the unittest mode says that this test should pass, we should align with that\r\n\r\n\r\n\n@aless10 thnks for providing a self-contained reproducer\r\n\r\ni wonder if it also behaves that way if change_value is inlined\r\n\r\nwe should align with whatever is the result when using `--assert=plain`",
  "created_at": "2023-02-22T21:43:37Z",
  "version": "7.2",
  "FAIL_TO_PASS": "[\"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_true_assertion_and_changes_variable_value\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_fail_assertion\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_compare_boolean_fails\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_none_fails\"]",
  "PASS_TO_PASS": "[\"testing/test_assertrewrite.py::TestAssertionRewrite::test_place_initial_imports\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_location_is_set\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_name\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertrepr_compare_same_width\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_if_hasattr_fails\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_already_has_message\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_short_circuit_evaluation\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_unary_op\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_binary_op\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop_percent\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_call\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_attribute\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_comparisons\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_len\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_reprcompare\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_raising__bool__in_comparison\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_formatchar\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr_non_ascii\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_more_invalid\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[trivial]\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[assert\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[multiple\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[latin1\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[utf-8\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[multi-line\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[multi\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[backslash\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[assertion\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[escaped\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[no\", \"testing/test_assertrewrite.py::test_try_makedirs\", \"testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[c:/tmp/pycs-d:/projects/src/foo.py-c:/tmp/pycs/projects/src]\", \"testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-d:/projects/src/foo.py-d:/projects/src/__pycache__]\", \"testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[/tmp/pycs-/home/projects/src/foo.py-/tmp/pycs/home/projects/src]\", \"testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-/home/projects/src/foo.py-/home/projects/src/__pycache__]\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[0-240]\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[1-2400]\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[2-None]\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[3-None]\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_rewrites_plugin_as_a_package\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_honors_pep_235\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_multiline\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_tuple\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_expr\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_escape\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_messages_bytes\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_at_operator_issue1290\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_starred_with_side_effect\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_a_file\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_readonly\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_zipfile\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_load_resource_via_files_with_rewrite\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_readonly\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_orphaned_pyc_file\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_package\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_translate_newlines\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_package_without__init__py\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_remember_rewritten_modules\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_sys_meta_path_munged\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_write_pyc\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_success\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_reload_is_same_and_reloads\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_get_data_support\", \"testing/test_assertrewrite.py::test_issue731\", \"testing/test_assertrewrite.py::TestIssue925::test_simple_case\", \"testing/test_assertrewrite.py::TestIssue925::test_long_case\", \"testing/test_assertrewrite.py::TestIssue925::test_many_brackets\", \"testing/test_assertrewrite.py::TestIssue2121::test_rewrite_python_files_contain_subdirs\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_dont_rewrite\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator_reverse\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_no_variable_name_conflict\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_composite\", \"testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_value_changes_cleared_after_each_test\", \"testing/test_assertrewrite.py::test_source_mtime_long_long[-1]\", \"testing/test_assertrewrite.py::test_source_mtime_long_long[1]\", \"testing/test_assertrewrite.py::test_rewrite_infinite_recursion\", \"testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_basic\", \"testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_pattern_contains_subdirectories\", \"testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_cwd_changed\", \"testing/test_assertrewrite.py::TestAssertionPass::test_option_default\", \"testing/test_assertrewrite.py::TestAssertionPass::test_hook_call\", \"testing/test_assertrewrite.py::TestAssertionPass::test_hook_call_with_parens\", \"testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_hookimpl\", \"testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_cmd_option\", \"testing/test_assertrewrite.py::TestPyCacheDir::test_sys_pycache_prefix_integration\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_default_verbosity\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_increased_verbosity\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_max_increased_verbosity\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_plugin\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_dont_write_bytecode\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_cached_pyc_includes_pytest_version\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_pyc_vs_pyo\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_module_imported_from_conftest\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins_env_var\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_resources_provider_for_loader\"]",
  "environment_setup_commit": "572b5657d7ca557593418ce0319fabff88800c73",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.922975",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}