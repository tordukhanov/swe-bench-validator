{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-26089",
  "base_commit": "f588d2b06e5b3c3296046d2ee9f0c13831cafe1c",
  "patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -330,6 +330,12 @@ def _update_bbox_to_anchor(self, loc_in_canvas):\n     _legend_kw_doc_base)\n _docstring.interpd.update(_legend_kw_doc=_legend_kw_both_st)\n \n+_legend_kw_set_loc_st = (\n+    _loc_doc_base.format(parent='axes/figure',\n+                         default=\":rc:`legend.loc` for Axes, 'upper right' for Figure\",\n+                         best=_loc_doc_best, outside=_outside_doc))\n+_docstring.interpd.update(_legend_kw_set_loc_doc=_legend_kw_set_loc_st)\n+\n \n class Legend(Artist):\n     \"\"\"\n@@ -503,58 +509,6 @@ def val_or_rc(val, rc_name):\n             )\n         self.parent = parent\n \n-        loc0 = loc\n-        self._loc_used_default = loc is None\n-        if loc is None:\n-            loc = mpl.rcParams[\"legend.loc\"]\n-            if not self.isaxes and loc in [0, 'best']:\n-                loc = 'upper right'\n-\n-        type_err_message = (\"loc must be string, coordinate tuple, or\"\n-                            f\" an integer 0-10, not {loc!r}\")\n-\n-        # handle outside legends:\n-        self._outside_loc = None\n-        if isinstance(loc, str):\n-            if loc.split()[0] == 'outside':\n-                # strip outside:\n-                loc = loc.split('outside ')[1]\n-                # strip \"center\" at the beginning\n-                self._outside_loc = loc.replace('center ', '')\n-                # strip first\n-                self._outside_loc = self._outside_loc.split()[0]\n-                locs = loc.split()\n-                if len(locs) > 1 and locs[0] in ('right', 'left'):\n-                    # locs doesn't accept \"left upper\", etc, so swap\n-                    if locs[0] != 'center':\n-                        locs = locs[::-1]\n-                    loc = locs[0] + ' ' + locs[1]\n-            # check that loc is in acceptable strings\n-            loc = _api.check_getitem(self.codes, loc=loc)\n-        elif np.iterable(loc):\n-            # coerce iterable into tuple\n-            loc = tuple(loc)\n-            # validate the tuple represents Real coordinates\n-            if len(loc) != 2 or not all(isinstance(e, numbers.Real) for e in loc):\n-                raise ValueError(type_err_message)\n-        elif isinstance(loc, int):\n-            # validate the integer represents a string numeric value\n-            if loc < 0 or loc > 10:\n-                raise ValueError(type_err_message)\n-        else:\n-            # all other cases are invalid values of loc\n-            raise ValueError(type_err_message)\n-\n-        if self.isaxes and self._outside_loc:\n-            raise ValueError(\n-                f\"'outside' option for loc='{loc0}' keyword argument only \"\n-                \"works for figure legends\")\n-\n-        if not self.isaxes and loc == 0:\n-            raise ValueError(\n-                \"Automatic legend placement (loc='best') not implemented for \"\n-                \"figure legend\")\n-\n         self._mode = mode\n         self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n \n@@ -598,9 +552,8 @@ def val_or_rc(val, rc_name):\n         # init with null renderer\n         self._init_legend_box(handles, labels, markerfirst)\n \n-        tmp = self._loc_used_default\n-        self._set_loc(loc)\n-        self._loc_used_default = tmp  # ignore changes done by _set_loc\n+        # Set legend location\n+        self.set_loc(loc)\n \n         # figure out title font properties:\n         if title_fontsize is not None and title_fontproperties is not None:\n@@ -686,6 +639,73 @@ def _set_artist_props(self, a):\n \n         a.set_transform(self.get_transform())\n \n+    @_docstring.dedent_interpd\n+    def set_loc(self, loc=None):\n+        \"\"\"\n+        Set the location of the legend.\n+\n+        .. versionadded:: 3.8\n+\n+        Parameters\n+        ----------\n+        %(_legend_kw_set_loc_doc)s\n+        \"\"\"\n+        loc0 = loc\n+        self._loc_used_default = loc is None\n+        if loc is None:\n+            loc = mpl.rcParams[\"legend.loc\"]\n+            if not self.isaxes and loc in [0, 'best']:\n+                loc = 'upper right'\n+\n+        type_err_message = (\"loc must be string, coordinate tuple, or\"\n+                            f\" an integer 0-10, not {loc!r}\")\n+\n+        # handle outside legends:\n+        self._outside_loc = None\n+        if isinstance(loc, str):\n+            if loc.split()[0] == 'outside':\n+                # strip outside:\n+                loc = loc.split('outside ')[1]\n+                # strip \"center\" at the beginning\n+                self._outside_loc = loc.replace('center ', '')\n+                # strip first\n+                self._outside_loc = self._outside_loc.split()[0]\n+                locs = loc.split()\n+                if len(locs) > 1 and locs[0] in ('right', 'left'):\n+                    # locs doesn't accept \"left upper\", etc, so swap\n+                    if locs[0] != 'center':\n+                        locs = locs[::-1]\n+                    loc = locs[0] + ' ' + locs[1]\n+            # check that loc is in acceptable strings\n+            loc = _api.check_getitem(self.codes, loc=loc)\n+        elif np.iterable(loc):\n+            # coerce iterable into tuple\n+            loc = tuple(loc)\n+            # validate the tuple represents Real coordinates\n+            if len(loc) != 2 or not all(isinstance(e, numbers.Real) for e in loc):\n+                raise ValueError(type_err_message)\n+        elif isinstance(loc, int):\n+            # validate the integer represents a string numeric value\n+            if loc < 0 or loc > 10:\n+                raise ValueError(type_err_message)\n+        else:\n+            # all other cases are invalid values of loc\n+            raise ValueError(type_err_message)\n+\n+        if self.isaxes and self._outside_loc:\n+            raise ValueError(\n+                f\"'outside' option for loc='{loc0}' keyword argument only \"\n+                \"works for figure legends\")\n+\n+        if not self.isaxes and loc == 0:\n+            raise ValueError(\n+                \"Automatic legend placement (loc='best') not implemented for \"\n+                \"figure legend\")\n+\n+        tmp = self._loc_used_default\n+        self._set_loc(loc)\n+        self._loc_used_default = tmp  # ignore changes done by _set_loc\n+\n     def _set_loc(self, loc):\n         # find_offset function will be provided to _legend_box and\n         # _legend_box will draw itself at the location of the return\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -755,6 +755,26 @@ def test_legend_alignment(alignment):\n     assert leg.get_alignment() == alignment\n \n \n+@pytest.mark.parametrize('loc', ('center', 'best',))\n+def test_ax_legend_set_loc(loc):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test')\n+    leg = ax.legend()\n+    leg.set_loc(loc)\n+    assert leg._get_loc() == mlegend.Legend.codes[loc]\n+\n+\n+@pytest.mark.parametrize('loc', ('outside right', 'right',))\n+def test_fig_legend_set_loc(loc):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test')\n+    leg = fig.legend()\n+    leg.set_loc(loc)\n+\n+    loc = loc.split()[1] if loc.startswith(\"outside\") else loc\n+    assert leg._get_loc() == mlegend.Legend.codes[loc]\n+\n+\n @pytest.mark.parametrize('alignment', ('center', 'left', 'right'))\n def test_legend_set_alignment(alignment):\n     fig, ax = plt.subplots()\n",
  "problem_statement": "[ENH]: Add public method to update `Legend` object's loc property .\n### Problem\r\n\r\n* I'm working on the issue https://github.com/sympy/sympy/pull/24429. The `Legend` object's `loc` property can only be set at initialization time. There is no public method to update the `loc` property when the object  has been created.\r\n*  It can now be understood as implemented as follows:\r\n```python3\r\nfrom matplotlib import pyplot as plt\r\nfrom matplotlib.legend import Legend\r\n\r\ndef plot(loc: str):\r\n    fig = plt.figure()\r\n    ax = fig.add_subplot(1, 1, 1)\r\n\r\n    x = [-10.0, -9.657349547286204, -9.318462608835684, -9.031177432527166, -8.691618609025815, -8.407140700722843, -8.152708015644635, -7.839130676473357, -7.499034134688037, -7.172556788526309, -6.847257574849716, -6.552316320455642, -6.230727469453974, -5.914856113060868]\r\n    y = [4.5397868702434395e-05, 6.394971420131934e-05, 8.974373333525978e-05, 0.00011960725629360318, 0.00016795968412322188, 0.000223217496066253, 0.00028787162356623547, 0.00039385623135828983, 0.0005533125089980317, 0.0007667698609716984, 0.0010612377365216156, 0.0014247739486663552, 0.001964154207369101, 0.002691782877150404]\r\n    ax.plot(x, y, label=\"f(x)\")\r\n    if ax.legend():\r\n        ax.legend_.set_visible(True)\r\n        _loc_code = Legend.codes.get(loc, 'best')  # user choose the location\r\n        ax.legend_._set_loc(_loc_code)  # Using a private function, which can be very fragile.\r\n    plt.show()\r\n\r\nplot(\"center\")\r\n```\r\n* Desired implementation\r\n``` Python3\r\nfrom matplotlib import pyplot as plt\r\nfrom matplotlib.legend import Legend\r\n\r\ndef plot(loc: str):\r\n    fig = plt.figure()\r\n    ax = fig.add_subplot(1, 1, 1)\r\n\r\n    x = [-10.0, -9.657349547286204, -9.318462608835684, -9.031177432527166, -8.691618609025815, -8.407140700722843, -8.152708015644635, -7.839130676473357, -7.499034134688037, -7.172556788526309, -6.847257574849716, -6.552316320455642, -6.230727469453974, -5.914856113060868]\r\n    y = [4.5397868702434395e-05, 6.394971420131934e-05, 8.974373333525978e-05, 0.00011960725629360318, 0.00016795968412322188, 0.000223217496066253, 0.00028787162356623547, 0.00039385623135828983, 0.0005533125089980317, 0.0007667698609716984, 0.0010612377365216156, 0.0014247739486663552, 0.001964154207369101, 0.002691782877150404]\r\n    ax.plot(x, y, label=\"f(x)\")\r\n    if ax.legend():\r\n        ax.legend_.set_visible(True)\r\n        ax.legend_.set_loc(loc)  # A public method to change the legend location is better.\r\n    plt.show()\r\n\r\nplot(\"center\")\r\n```\r\n\r\n\r\n\r\n### Proposed solution\r\n\r\n_No response_\n",
  "hints_text": "See also: https://discourse.matplotlib.org/t/legends-are-difficult-to-modify/21506\nadmins,Are we planning on implementing this or no?\nI'm not sure why this was closed.  I think if a PR came in that did this in a non invasive way it should be fine.  \n@jklymak @cocolato He closed it cause someone gave a thumbs down on my comment. I asked it cause I wanted to do it, but I still wanted a reasonable chance of getting approved, so I just wanted to check it was something we wanted. \nI'm not clear what the objection would be - but maybe @mwaskom has clarifying comments? \nAlright, I think I figured it out, although I was wondering I think update_loc might make the most sense in this context\n\n@jklymak \n\nHeres something that technically works? Although, I am confused as to why set_loc is technically public, despite being called from the legend, but I fail to see the usefulness of having this function, as it seems unnecessary. it is also technically called from Legend object, so I fail to see why this is technically 'public'\r\n```\r\ndef set_loc(self, loc):\r\n      loc=self.codes.get(loc,'best')\r\n      self._set_loc(loc)\r\n```\r\n\r\nI think a better idea would just be setting _set_loc(self, loc) to this just to avoid the unnecessary need to call Legend.codes.get()  from the client. \r\n\r\n```\r\ndef _set_loc(self, loc):\r\n   #Line  I am currently considering adding\r\n   loc=self.codes.get(loc,'best')\r\n   # rest of the current _set_loc function\r\n   self._loc_used_default = False\r\n   self._loc_real = loc\r\n   self.stale = True\r\n   self._legend_box.set_offset(self._findoffset)\r\n```\r\n\r\nThoughts?\r\n\r\n\r\n@\nIt's not a good idea to change the current definition of `_set_loc`; a new `set_loc`/`update_loc` method might be more appropriate\r\n\nTotally agree, `set_loc` (which I believe should be the name, consistently with other `set_*` methods), is what should be called by the user. Also, it makes sense to have the argument checking in the public method and not in the private method (any code calling the private should know that they are calling it correctly).\r\n\r\n(If your approach works or not, I cannot really tell though.)\nI have a question, is update_loc supposed to have any differences between _set_loc? I have issue seeing any differences between the implementation of the two methods other than the name, being public/private and update_loc internally calling  Legend.codes.get(loc, 'best')? Thank you!\r\n\r\n@oscargus @cocolato \r\nThis is _set_loc btw:\r\n    def _set_loc(self, loc):\r\n        # find_offset function will be provided to _legend_box and\r\n        # _legend_box will draw itself at the location of the return\r\n        # value of the find_offset.\r\n        self._loc_used_default = False\r\n        self._loc_real = loc\r\n        self.stale = True\r\n        self._legend_box.set_offset(self._findoffset)\r\n\r\n\r\n\nIMO, `set_loc` is intended for external users and should accept more enumeration-like, explicitly meaning arguments like `center`、`best`、`upper left`, rather than get code from the class variable `Legend.codes.get(loc, 'best')`.  Perhaps it would be more appropriate to implement it through the `Artist.set()` method.\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/b3bd929cf07ea35479fded8f739126ccc39edd6d/lib/matplotlib/artist.py#L147-L147\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/b3bd929cf07ea35479fded8f739126ccc39edd6d/lib/matplotlib/artist.py#L1216-L1231\r\n",
  "created_at": "2023-06-08T02:56:42Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_legend.py::test_ax_legend_set_loc[center]\", \"lib/matplotlib/tests/test_legend.py::test_ax_legend_set_loc[best]\", \"lib/matplotlib/tests/test_legend.py::test_fig_legend_set_loc[outside\", \"lib/matplotlib/tests/test_legend.py::test_fig_legend_set_loc[right]\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_legend.py::test_legend_ordereddict\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto4\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto5\", \"lib/matplotlib/tests/test_legend.py::test_various_labels[png]\", \"lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_label_with_leading_underscore\", \"lib/matplotlib/tests/test_legend.py::test_labels_first[png]\", \"lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]\", \"lib/matplotlib/tests/test_legend.py::test_fancy[png]\", \"lib/matplotlib/tests/test_legend.py::test_fancy[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_framealpha[png]\", \"lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_rc[png]\", \"lib/matplotlib/tests/test_legend.py::test_rc[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_expand[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_hatching[png]\", \"lib/matplotlib/tests/test_legend.py::test_hatching[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_remove\", \"lib/matplotlib/tests/test_legend.py::test_reverse_legend_handles_and_labels\", \"lib/matplotlib/tests/test_legend.py::test_reverse_legend_display[png]\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs\", \"lib/matplotlib/tests/test_legend.py::test_figure_legend_outside\", \"lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]\", \"lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend\", \"lib/matplotlib/tests/test_legend.py::test_nanscatter\", \"lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok\", \"lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]\", \"lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]\", \"lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes\", \"lib/matplotlib/tests/test_legend.py::test_handler_numpoints\", \"lib/matplotlib/tests/test_legend.py::test_text_nohandler_warning\", \"lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend\", \"lib/matplotlib/tests/test_legend.py::test_shadow_argument_types[png]\", \"lib/matplotlib/tests/test_legend.py::test_shadow_invalid_argument\", \"lib/matplotlib/tests/test_legend.py::test_shadow_framealpha\", \"lib/matplotlib/tests/test_legend.py::test_legend_title_empty\", \"lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent\", \"lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer\", \"lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[center]\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[left]\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[right]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[center]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[left]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[right]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_linecolor_iterable\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_linecolor_cmap\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markeredgecolor_iterable\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markeredgecolor_cmap\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markerfacecolor_iterable\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markfacecolor_cmap\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short\", \"lib/matplotlib/tests/test_legend.py::test_get_set_draggable\", \"lib/matplotlib/tests/test_legend.py::test_legend_draggable[True]\", \"lib/matplotlib/tests/test_legend.py::test_legend_draggable[False]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_handles\", \"lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc\", \"lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception\", \"lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_text_axes\", \"lib/matplotlib/tests/test_legend.py::test_handlerline2d\", \"lib/matplotlib/tests/test_legend.py::test_subfigure_legend\", \"lib/matplotlib/tests/test_legend.py::test_setting_alpha_keeps_polycollection_color\", \"lib/matplotlib/tests/test_legend.py::test_legend_markers_from_line2d\", \"lib/matplotlib/tests/test_legend.py::test_ncol_ncols[png]\", \"lib/matplotlib/tests/test_legend.py::test_ncol_ncols[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_loc_invalid_tuple_exception\", \"lib/matplotlib/tests/test_legend.py::test_loc_valid_tuple\", \"lib/matplotlib/tests/test_legend.py::test_loc_valid_list\", \"lib/matplotlib/tests/test_legend.py::test_loc_invalid_list_exception\", \"lib/matplotlib/tests/test_legend.py::test_loc_invalid_type\", \"lib/matplotlib/tests/test_legend.py::test_loc_validation_numeric_value\", \"lib/matplotlib/tests/test_legend.py::test_loc_validation_string_value\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.827844",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}