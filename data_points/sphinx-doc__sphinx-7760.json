{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7760",
  "base_commit": "34f35793302571811dc0a38b4b648dff28bc31f6",
  "patch": "diff --git a/sphinx/ext/coverage.py b/sphinx/ext/coverage.py\n--- a/sphinx/ext/coverage.py\n+++ b/sphinx/ext/coverage.py\n@@ -22,6 +22,7 @@\n from sphinx.builders import Builder\n from sphinx.locale import __\n from sphinx.util import logging\n+from sphinx.util.console import red  # type: ignore\n from sphinx.util.inspect import safe_getattr\n \n logger = logging.getLogger(__name__)\n@@ -121,6 +122,14 @@ def write_c_coverage(self) -> None:\n                 write_header(op, filename)\n                 for typ, name in sorted(undoc):\n                     op.write(' * %-50s [%9s]\\n' % (name, typ))\n+                    if self.config.coverage_show_missing_items:\n+                        if self.app.quiet or self.app.warningiserror:\n+                            logger.warning(__('undocumented c api: %s [%s] in file %s'),\n+                                           name, typ, filename)\n+                        else:\n+                            logger.info(red('undocumented  ') + 'c   ' + 'api       ' +\n+                                        '%-30s' % (name + \" [%9s]\" % typ) +\n+                                        red(' - in file ') + filename)\n                 op.write('\\n')\n \n     def ignore_pyobj(self, full_name: str) -> bool:\n@@ -239,16 +248,48 @@ def write_py_coverage(self) -> None:\n                     if undoc['funcs']:\n                         op.write('Functions:\\n')\n                         op.writelines(' * %s\\n' % x for x in undoc['funcs'])\n+                        if self.config.coverage_show_missing_items:\n+                            if self.app.quiet or self.app.warningiserror:\n+                                for func in undoc['funcs']:\n+                                    logger.warning(\n+                                        __('undocumented python function: %s :: %s'),\n+                                        name, func)\n+                            else:\n+                                for func in undoc['funcs']:\n+                                    logger.info(red('undocumented  ') + 'py  ' + 'function  ' +\n+                                                '%-30s' % func + red(' - in module ') + name)\n                         op.write('\\n')\n                     if undoc['classes']:\n                         op.write('Classes:\\n')\n-                        for name, methods in sorted(\n+                        for class_name, methods in sorted(\n                                 undoc['classes'].items()):\n                             if not methods:\n-                                op.write(' * %s\\n' % name)\n+                                op.write(' * %s\\n' % class_name)\n+                                if self.config.coverage_show_missing_items:\n+                                    if self.app.quiet or self.app.warningiserror:\n+                                        logger.warning(\n+                                            __('undocumented python class: %s :: %s'),\n+                                            name, class_name)\n+                                    else:\n+                                        logger.info(red('undocumented  ') + 'py  ' +\n+                                                    'class     ' + '%-30s' % class_name +\n+                                                    red(' - in module ') + name)\n                             else:\n-                                op.write(' * %s -- missing methods:\\n\\n' % name)\n+                                op.write(' * %s -- missing methods:\\n\\n' % class_name)\n                                 op.writelines('   - %s\\n' % x for x in methods)\n+                                if self.config.coverage_show_missing_items:\n+                                    if self.app.quiet or self.app.warningiserror:\n+                                        for meth in methods:\n+                                            logger.warning(\n+                                                __('undocumented python method:' +\n+                                                   ' %s :: %s :: %s'),\n+                                                name, class_name, meth)\n+                                    else:\n+                                        for meth in methods:\n+                                            logger.info(red('undocumented  ') + 'py  ' +\n+                                                        'method    ' + '%-30s' %\n+                                                        (class_name + '.' + meth) +\n+                                                        red(' - in module ') + name)\n                         op.write('\\n')\n \n             if failed:\n@@ -273,4 +314,5 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n     app.add_config_value('coverage_ignore_c_items', {}, False)\n     app.add_config_value('coverage_write_headline', True, False)\n     app.add_config_value('coverage_skip_undoc_in_source', False, False)\n+    app.add_config_value('coverage_show_missing_items', False, False)\n     return {'version': sphinx.__display_version__, 'parallel_read_safe': True}\n",
  "test_patch": "diff --git a/tests/test_ext_coverage.py b/tests/test_ext_coverage.py\n--- a/tests/test_ext_coverage.py\n+++ b/tests/test_ext_coverage.py\n@@ -28,6 +28,8 @@ def test_build(app, status, warning):\n \n     assert ' * mod -- No module named mod'  # in the \"failed import\" section\n \n+    assert \"undocumented  py\" not in status.getvalue()\n+\n     c_undoc = (app.outdir / 'c.txt').read_text()\n     assert c_undoc.startswith('Undocumented C API elements\\n'\n                               '===========================\\n')\n@@ -46,6 +48,8 @@ def test_build(app, status, warning):\n     assert 'Class' in undoc_py['autodoc_target']['classes']\n     assert 'undocmeth' in undoc_py['autodoc_target']['classes']['Class']\n \n+    assert \"undocumented  c\" not in status.getvalue()\n+\n \n @pytest.mark.sphinx('coverage', testroot='ext-coverage')\n def test_coverage_ignore_pyobjects(app, status, warning):\n@@ -64,3 +68,28 @@ def test_coverage_ignore_pyobjects(app, status, warning):\n \n '''\n     assert actual == expected\n+\n+\n+@pytest.mark.sphinx('coverage', confoverrides={'coverage_show_missing_items': True})\n+def test_show_missing_items(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert \"undocumented\" in status.getvalue()\n+\n+    assert \"py  function  raises\" in status.getvalue()\n+    assert \"py  class     Base\" in status.getvalue()\n+    assert \"py  method    Class.roger\" in status.getvalue()\n+\n+    assert \"c   api       Py_SphinxTest [ function]\" in status.getvalue()\n+\n+\n+@pytest.mark.sphinx('coverage', confoverrides={'coverage_show_missing_items': True})\n+def test_show_missing_items_quiet(app, status, warning):\n+    app.quiet = True\n+    app.builder.build_all()\n+\n+    assert \"undocumented python function: autodoc_target :: raises\" in warning.getvalue()\n+    assert \"undocumented python class: autodoc_target :: Base\" in warning.getvalue()\n+    assert \"undocumented python method: autodoc_target :: Class :: roger\" in warning.getvalue()\n+\n+    assert \"undocumented c api: Py_SphinxTest [function]\" in warning.getvalue()\n",
  "problem_statement": "coverage ext - config to print missing coverage as warning\n**Is your feature request related to a problem? Please describe.**\r\nI run CI tests with tox and want to test my docs also.\r\n\r\nI created the following tox env but the problem is that the `docs-test-coverage` env does not fail on missing coverage.\r\n```ini\r\n[testenv:docs-test-{html,linkcheck,coverage,doctest}]\r\ndescription = build and check docs with sphinx builder (env name) ||\r\n              1st build for check and get all warnings &\r\n              2nd build for success/fail status\r\nextras = docs\r\ncommands =\r\n    #: html\r\n    html: sphinx-build -b html -aEnq docs/source docs/build/test/html\r\n    html: sphinx-build -b html -aEnQW docs/source docs/build/test/html\r\n    #: linkcheck\r\n    linkcheck: sphinx-build -b linkcheck -aEnq docs/source docs/build/test/linkcheck\r\n    linkcheck: sphinx-build -b linkcheck -aEnQW docs/source docs/build/test/linkcheck\r\n    #: doctest\r\n    doctest: sphinx-build -b doctest -aEnq docs/source docs/build/test/doctest\r\n    doctest: sphinx-build -b doctest -aEnQW docs/source docs/build/test/doctest\r\n    #: coverage\r\n    coverage: sphinx-build -b coverage -aEnq docs/source docs/build/test/coverage\r\n    coverage: sphinx-build -b coverage -aEnQW docs/source docs/build/test/coverage\r\n```\r\n\r\n**Describe the solution you'd like**\r\nMy idea is to simply add another config variable like `coverage_print_missing_as_warning` for the `coverage` extension to not only print the missing coverage to ` .txt` files but also as a warning to stdout (or stderr?) like the `linkcheck` builder on broken links.\r\n\r\n\r\n**Describe alternatives you've considered**\r\nI considered writing a script which checks if there is content in the `python.txt` file and returns the appropriate exit code. The script could then be called by `tox` after the `coverage` builder ran.\r\n\r\nEDIT: Added config name.\n",
  "hints_text": "I am currently experimenting on a fork with my feature request.\r\n\r\nI added two conf vars:\r\n- `coverage_print_missing_c_items`\r\n- `coverage_print_missing_py_items`\r\n\r\nThey default to `False` and when they are set to `True` in `conf.py` the `coverage` builder prints to console. For the output I took the `linkcheck` builder as example.\r\n\r\nSo normally this gets printed via `logger.info()`:\r\n![info log](https://user-images.githubusercontent.com/43916661/83350241-1f322780-a33b-11ea-9013-7743d3436fce.PNG)\r\n\r\nAnd when set to `quiet` or `warning is error` this gets printed via `logger.warning()`\r\n![warn log](https://user-images.githubusercontent.com/43916661/83350062-aaaab900-a339-11ea-8c7a-8de9a4e7ab67.PNG)\r\n\r\nI will clean up the code and make a draft PR. If the idea gets approved I will add tests etc.\r\n\r\nEDIT: New screenshot with lines from `test_ext_coverage::test_build`\r\nEDIT2: Added screenshot for warning logger",
  "created_at": "2020-05-31T10:59:11Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"tests/test_ext_coverage.py::test_show_missing_items\", \"tests/test_ext_coverage.py::test_show_missing_items_quiet\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_coverage.py::test_build\", \"tests/test_ext_coverage.py::test_coverage_ignore_pyobjects\"]",
  "environment_setup_commit": "5afc77ee27fc01c57165ab260d3a76751f9ddb35",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.046545",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}