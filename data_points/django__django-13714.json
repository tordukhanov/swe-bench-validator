{
  "repo": "django/django",
  "instance_id": "django__django-13714",
  "base_commit": "b996424199cca58f64b77faeaa367b7e7efb9776",
  "patch": "diff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py\n--- a/django/db/backends/sqlite3/features.py\n+++ b/django/db/backends/sqlite3/features.py\n@@ -70,11 +70,12 @@ def introspected_field_types(self):\n \n     @cached_property\n     def supports_json_field(self):\n-        try:\n-            with self.connection.cursor() as cursor, transaction.atomic():\n-                cursor.execute('SELECT JSON(\\'{\"a\": \"b\"}\\')')\n-        except OperationalError:\n-            return False\n+        with self.connection.cursor() as cursor:\n+            try:\n+                with transaction.atomic(self.connection.alias):\n+                    cursor.execute('SELECT JSON(\\'{\"a\": \"b\"}\\')')\n+            except OperationalError:\n+                return False\n         return True\n \n     can_introspect_json_field = property(operator.attrgetter('supports_json_field'))\n",
  "test_patch": "diff --git a/tests/backends/sqlite/test_features.py b/tests/backends/sqlite/test_features.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/backends/sqlite/test_features.py\n@@ -0,0 +1,18 @@\n+from unittest import mock, skipUnless\n+\n+from django.db import OperationalError, connection\n+from django.test import TestCase\n+\n+\n+@skipUnless(connection.vendor == 'sqlite', 'SQLite tests.')\n+class FeaturesTests(TestCase):\n+    def test_supports_json_field_operational_error(self):\n+        if hasattr(connection.features, 'supports_json_field'):\n+            del connection.features.supports_json_field\n+        msg = 'unable to open database file'\n+        with mock.patch(\n+            'django.db.backends.base.base.BaseDatabaseWrapper.cursor',\n+            side_effect=OperationalError(msg),\n+        ):\n+            with self.assertRaisesMessage(OperationalError, msg):\n+                connection.features.supports_json_field\n",
  "problem_statement": "SQLite3 bad filepath raising as JSON extension error.\nDescription\n\t\nApplying migrations on an installation using spatialite backend (probably sqlite too) where the path to the database file does not exist causes a confusing JSON field error.\nTake this following DATABASES configuration. Note that the dev.sqlite3 file does not exist.\nDATABASES = {\n\t'default': {\n\t\t'ENGINE': 'django.contrib.gis.db.backends.spatialite',\n\t\t'NAME': '/home/user/app/dev.sqlite3',\n\t}\n}\nWhen running ./manage.py migrate the following exception is raised\nSystemCheckError: System check identified some issues:\nERRORS:\nrumble_common.RumbleEvent: (fields.E180) SQLite does not support JSONFields.\nWe assert the JSON extension is present with the following code block, as per https://code.djangoproject.com/wiki/JSON1Extension\n>>> import sqlite3\n>>> conn = sqlite3.connect(':memory:')\n>>> cursor = conn.cursor()\n>>> cursor.execute('SELECT JSON(\\'{\"a\": \"b\"}\\')')\nThe issue is resolved by changing \nDATABASES['default']['NAME']\nto point to the right path.\nThe issue is that the error is misleading, and leads developers down the wrong rabbit hole\nHope thats descriptive enough, thanks all!\nExtra:\nDjango 3.1.3\nDebian Buster Docker environment\n",
  "hints_text": "Thanks for the report. Regression in 6789ded0a6ab797f0dcdfa6ad5d1cfa46e23abcd. Reproduced at c70cd2a926ffab47f6613e83e0c8828eb6c2c064.",
  "created_at": "2020-11-24T20:21:23Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_supports_json_field_operational_error (backends.sqlite.test_features.FeaturesTests)\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.667764",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}