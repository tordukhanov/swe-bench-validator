{
  "repo": "django/django",
  "instance_id": "django__django-12121",
  "base_commit": "ceecd0556dc6f013b5b62fedb12453b8ae3b8067",
  "patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -632,11 +632,18 @@ def _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs):\n                     candidate_subs = kwargs\n                 # Convert the candidate subs to text using Converter.to_url().\n                 text_candidate_subs = {}\n+                match = True\n                 for k, v in candidate_subs.items():\n                     if k in converters:\n-                        text_candidate_subs[k] = converters[k].to_url(v)\n+                        try:\n+                            text_candidate_subs[k] = converters[k].to_url(v)\n+                        except ValueError:\n+                            match = False\n+                            break\n                     else:\n                         text_candidate_subs[k] = str(v)\n+                if not match:\n+                    continue\n                 # WSGI provides decoded URLs, without %xx escapes, and the URL\n                 # resolver operates on such URLs. First substitute arguments\n                 # without quoting to build a decoded URL and look for a match.\n",
  "test_patch": "diff --git a/tests/urlpatterns/path_same_name_urls.py b/tests/urlpatterns/path_same_name_urls.py\n--- a/tests/urlpatterns/path_same_name_urls.py\n+++ b/tests/urlpatterns/path_same_name_urls.py\n@@ -1,6 +1,8 @@\n-from django.urls import path, re_path\n+from django.urls import path, re_path, register_converter\n \n-from . import views\n+from . import converters, views\n+\n+register_converter(converters.DynamicConverter, 'to_url_value_error')\n \n urlpatterns = [\n     # Different number of arguments.\n@@ -18,4 +20,15 @@\n     # Different regular expressions.\n     re_path(r'^regex/uppercase/([A-Z]+)/', views.empty_view, name='regex'),\n     re_path(r'^regex/lowercase/([a-z]+)/', views.empty_view, name='regex'),\n+    # converter.to_url() raises ValueError (no match).\n+    path(\n+        'converter_to_url/int/<value>/',\n+        views.empty_view,\n+        name='converter_to_url',\n+    ),\n+    path(\n+        'converter_to_url/tiny_int/<to_url_value_error:value>/',\n+        views.empty_view,\n+        name='converter_to_url',\n+    ),\n ]\ndiff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -3,7 +3,7 @@\n from django.core.exceptions import ImproperlyConfigured\n from django.test import SimpleTestCase\n from django.test.utils import override_settings\n-from django.urls import Resolver404, path, resolve, reverse\n+from django.urls import NoReverseMatch, Resolver404, path, resolve, reverse\n \n from .converters import DynamicConverter\n from .views import empty_view\n@@ -203,6 +203,12 @@ def test_nonmatching_urls(self):\n @override_settings(ROOT_URLCONF='urlpatterns.path_same_name_urls')\n class SameNameTests(SimpleTestCase):\n     def test_matching_urls_same_name(self):\n+        @DynamicConverter.register_to_url\n+        def requires_tiny_int(value):\n+            if value > 5:\n+                raise ValueError\n+            return value\n+\n         tests = [\n             ('number_of_args', [\n                 ([], {}, '0/'),\n@@ -227,6 +233,10 @@ def test_matching_urls_same_name(self):\n                 (['ABC'], {}, 'uppercase/ABC/'),\n                 (['abc'], {}, 'lowercase/abc/'),\n             ]),\n+            ('converter_to_url', [\n+                ([6], {}, 'int/6/'),\n+                ([1], {}, 'tiny_int/1/'),\n+            ]),\n         ]\n         for url_name, cases in tests:\n             for args, kwargs, url_suffix in cases:\n@@ -272,9 +282,16 @@ def raises_type_error(value):\n         with self.assertRaisesMessage(TypeError, 'This type error propagates.'):\n             resolve('/dynamic/abc/')\n \n-    def test_reverse_value_error_propagates(self):\n+    def test_reverse_value_error_means_no_match(self):\n         @DynamicConverter.register_to_url\n         def raises_value_error(value):\n-            raise ValueError('This value error propagates.')\n-        with self.assertRaisesMessage(ValueError, 'This value error propagates.'):\n+            raise ValueError\n+        with self.assertRaises(NoReverseMatch):\n+            reverse('dynamic', kwargs={'value': object()})\n+\n+    def test_reverse_type_error_propagates(self):\n+        @DynamicConverter.register_to_url\n+        def raises_type_error(value):\n+            raise TypeError('This type error propagates.')\n+        with self.assertRaisesMessage(TypeError, 'This type error propagates.'):\n             reverse('dynamic', kwargs={'value': object()})\n",
  "problem_statement": "Feature/docs: how should url converters decline to match for a named route?\nDescription\n\t\nIt is sometimes convenient to have multiple instances of a named route, where the correct one is chosen based on whether the URL converters to_url call succeeds. For example, the attached file has routes like this:\n\tpath('export/foo/<foo:obj>', index, name='export'),\n\tpath('export/bar/<bar:obj>', index, name='export'),\nI then wanted to put {% url \"export\" some_foo_or_bar %} in a generic export template and have the correct URL inserted.\nMy first attempt to do this was to raise ValueError in to_url for non-matching values, hoping that it would work the same as to_python where the docs specify that \"A ValueError is interpreted as no match.\"\nThat didn't work -- nothing catches the ValueError in to_url -- so I found the workaround demonstrated in the attachment: if to_url returns an empty string (or some string that doesn't match the converter's regex), then the later regex check in _reverse_with_prefix will detect the non-match and everything seems to work out.\nSo this is either a feature request or a documentation check. I'm thinking either:\n_reverse_with_prefix could be updated so to_url works the same as to_python, and a ValueError indicates no match (which I think just means wrapping try: ... except ValueError: continue around the appropriate line), or\nthe docs could be updated to indicate that, in to_url, a converter should return a non-regex-matching string such as the empty string in order to decline a match.\n",
  "hints_text": "Single-file Django project demonstrating type-matching based url resolution\nHaving multiple URLs with the same name is not supported. (You'd need to have a converter that knew how to handle both types, or else two URLs with distinct names.) I think this kind of question is better aimed at support channels. See TicketClosingReasons/UseSupportChannels.\nHaving multiple URLs with the same name is not supported. Hmm, I don't think that's right. â€‹According to the docs: \"You may also use the same name for multiple URL patterns if they differ in their arguments. In addition to the URL name, reverse() matches the number of arguments and the names of the keyword arguments.\" There's code in django.urls.resolvers specifically to support polymorphic name resolution, which is why examples like this will work: Resolution based on keywords: path('export/baz/<int:baz>', index, name='export'), # {% url \"export\" baz=1 %} path('export/boo/<int:boo>', index, name='export'), # {% url \"export\" boo=1 %} Resolution based on values: re_path(r'^import/foo/(\\d+)$', index, name='import'), # {% url \"import\" 123 %} re_path(r'^import/bar/([a-z]+)$', index, name='import'), # {% url \"import\" \"abc\" %} It is strange for polymorphic name resolution to be supported in both of those cases, but not in the case where one converter can successfully convert the value and the other cannot. I filed this bug to address that edge case.\nOK, good. You're right about the number of args and keyword arguments case. Super. Sorry for missing that. (Is your second \"Resolution based on values\" example right? It should be number of positional args, rather then type, no? Doesn't matter.) The issue here is that in your case the kwarg is obj both times. So reverse can't currently pick it up. Fine. Then, yes, your suggestion to raise a ValueError seems plausible enough. Want to take that on? (I've unchecked \"Easy pickings\" as I think there's probably more in this than that entails.)\nIs your second \"Resolution based on values\" example right? It should be number of positional args, rather then type, no? Yeah, just for the sake of documenting this, the actual logic of reverse() is a little more sophisticated than the docs suggest. Reversing by name returns the last-defined url with the given name, where (a) the arg count or kwarg keywords match, and (b) the generated url matches the path or re_path's regex. The second test means that we match based on argument type as well as count in practice. While matching on type isn't documented (that I know of), I think it's implicit to the user expectation that reverse() should return URLs that resolve back to the matched path -- otherwise in basic <int:id> cases you get a weird situation where passing the wrong value to reverse() appears to work but then returns a non-resolvable URL. I hadn't noticed, but that also means that resolving based on url converter type already works in some situations! path('import/foo/<str:obj>', index, name='import'), # {% url \"import\" \"abc\" %} path('import/bar/<int:obj>', index, name='import'), # {% url \"import\" 123 %} The above works because IntConverter happens to follow the undocumented protocol that converters can decline a match by returning a string that doesn't match their regex, so reversing on \"abc\" falls through to the previous route. Then, yes, your suggestion to raise a ValueError seems plausible enough. Want to take that on? Sure! Haven't contributed before, but the contributor docs look great -- I'll take a pass at it and see if I can figure it out.\nHey Jack, super follow-up. Sure! Haven't contributed before, but the contributor docs look great -- I'll take a pass at it and see if I can figure it out. Great! Welcome aboard! ðŸš€ If you need an input open a PR early and we'll do that. A docs clarification may be in order whilst you're in here. ðŸ™‚\nFWIW â€‹this was discussed before and accepted in #16774 The idea was to introduce new exceptions dedicated to this purpose, e.g. ContinueResolving. I guess this ticket should be closed as a duplicate.\nHere's a PR for review: â€‹PR Simon, thanks for finding those related links! This ticket is distinct from #16774, though. That one is about allowing views to raise ContinueResolving internally once control is handed off to them, which would be a much larger change to the internal resolution logic. This one involves adding a single try: ... except ValueError: continue to the reverse() logic to give url converters an explicit way to deny a match in to_url(), which they can already do by returning empty string or other non-regex-matching response, and which is consistent with the handling of ValueError in to_python(). As you can see from the new tests in the PR, Django already supports type-based reverse resolution in a variety of cases, and this PR just fills in one edge case. I do see how the two are related, though! Depending why someone wants to raise ContinueResolving from a view, they might be able to solve the same problem by raising ValueError from converter.to_python since converters landed in Django 2.0. That's not affected one way or another by this patch to reverse(), though.",
  "created_at": "2019-11-21T19:11:36Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_reverse_value_error_means_no_match (urlpatterns.tests.ConversionExceptionTests)\", \"test_matching_urls_same_name (urlpatterns.tests.SameNameTests)\", \"test_converter_resolve (urlpatterns.tests.SimplifiedURLTests)\"]",
  "PASS_TO_PASS": "[\"test_allows_non_ascii_but_valid_identifiers (urlpatterns.tests.ParameterRestrictionTests)\", \"test_non_identifier_parameter_name_causes_exception (urlpatterns.tests.ParameterRestrictionTests)\", \"test_resolve_type_error_propagates (urlpatterns.tests.ConversionExceptionTests)\", \"test_resolve_value_error_means_no_match (urlpatterns.tests.ConversionExceptionTests)\", \"test_reverse_type_error_propagates (urlpatterns.tests.ConversionExceptionTests)\", \"test_matching_urls (urlpatterns.tests.ConverterTests)\", \"test_nonmatching_urls (urlpatterns.tests.ConverterTests)\", \"test_converter_reverse (urlpatterns.tests.SimplifiedURLTests)\", \"test_converter_reverse_with_second_layer_instance_namespace (urlpatterns.tests.SimplifiedURLTests)\", \"test_invalid_converter (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_inclusion_is_matchable (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_inclusion_is_reversible (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_double_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_empty_string_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_multiple_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_typed_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_without_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_reverse_with_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_reverse_without_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_re_path (urlpatterns.tests.SimplifiedURLTests)\", \"test_re_path_with_missing_optional_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_re_path_with_optional_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_space_in_route (urlpatterns.tests.SimplifiedURLTests)\", \"test_two_variable_at_start_of_path_pattern (urlpatterns.tests.SimplifiedURLTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.592967",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}