{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-4703",
  "base_commit": "3a6f08e4a1155e5098c3bec2d779cb3e654a1b11",
  "patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -813,7 +813,9 @@ def _get_imported_module(self, importnode, modname):\n             self.add_message(\"import-error\", args=repr(dotted_modname), node=importnode)\n         return None\n \n-    def _add_imported_module(self, node, importedmodname):\n+    def _add_imported_module(\n+        self, node: Union[astroid.Import, astroid.ImportFrom], importedmodname: str\n+    ) -> None:\n         \"\"\"notify an imported module, used to analyze dependencies\"\"\"\n         module_file = node.root().file\n         context_name = node.root().name\n@@ -826,6 +828,10 @@ def _add_imported_module(self, node, importedmodname):\n         except ImportError:\n             pass\n \n+        in_type_checking_block = (\n+            isinstance(node.parent, astroid.If) and node.parent.is_typing_guard()\n+        )\n+\n         if context_name == importedmodname:\n             self.add_message(\"import-self\", node=node)\n \n@@ -845,7 +851,10 @@ def _add_imported_module(self, node, importedmodname):\n \n             # update import graph\n             self.import_graph[context_name].add(importedmodname)\n-            if not self.linter.is_message_enabled(\"cyclic-import\", line=node.lineno):\n+            if (\n+                not self.linter.is_message_enabled(\"cyclic-import\", line=node.lineno)\n+                or in_type_checking_block\n+            ):\n                 self._excluded_edges[context_name].add(importedmodname)\n \n     def _check_preferred_module(self, node, mod_path):\n",
  "test_patch": "diff --git a/tests/input/func_noerror_cycle/__init__.py b/tests/input/func_noerror_cycle/__init__.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/input/func_noerror_cycle/__init__.py\n@@ -0,0 +1,3 @@\n+# https://github.com/PyCQA/pylint/issues/3525\n+# `cyclic-import` should not be emitted if one import\n+# is guarded by `typing.TYPE_CHECKING`\ndiff --git a/tests/input/func_noerror_cycle/a.py b/tests/input/func_noerror_cycle/a.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/input/func_noerror_cycle/a.py\n@@ -0,0 +1,8 @@\n+# pylint: disable=missing-docstring\n+from typing import List\n+\n+from .b import var\n+\n+LstT = List[int]\n+\n+print(var)\ndiff --git a/tests/input/func_noerror_cycle/b.py b/tests/input/func_noerror_cycle/b.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/input/func_noerror_cycle/b.py\n@@ -0,0 +1,7 @@\n+# pylint: disable=missing-docstring\n+from typing import TYPE_CHECKING\n+\n+if TYPE_CHECKING:\n+    from .a import LstT\n+\n+var: \"LstT\" = [1, 2]\ndiff --git a/tests/messages/func_noerror_cycle.txt b/tests/messages/func_noerror_cycle.txt\nnew file mode 100644\ndiff --git a/tests/test_func.py b/tests/test_func.py\n--- a/tests/test_func.py\n+++ b/tests/test_func.py\n@@ -121,7 +121,7 @@ def gen_tests(filter_rgx):\n         tests.append((module_file, messages_file, dependencies))\n     if UPDATE_FILE.exists():\n         return tests\n-    assert len(tests) < 12, \"Please do not add new test cases here.\" + \"\\n\".join(\n+    assert len(tests) < 13, \"Please do not add new test cases here.\" + \"\\n\".join(\n         str(k) for k in tests if not k[2]\n     )\n     return tests\n",
  "problem_statement": "Imports within TYPE_CHECKING can induce \"cyclic-import\"\nSuppose you have two modules: a.py and b.py.  `a` imports `b`, but `b` needs `a` in order to do type annotations, then this is usually done by importing `a` within a `TYPE_CHECKING` block.  Unfortunately, this causes pylint to report `cyclic-import`.\r\n\r\nPossibly related to https://github.com/PyCQA/pylint/issues/3285\n",
  "hints_text": "Not only this but they can produce very weir errors, ones reported to files that do not have any imports related to the cyclic ones inside, at least with current code from master. I cannot reproduce the problem with v2.6.0 release, but that one has other issues.",
  "created_at": "2021-07-11T21:49:04Z",
  "version": "2.9",
  "FAIL_TO_PASS": "[\"tests/test_func.py::test_functionality[func_noerror_cycle]\"]",
  "PASS_TO_PASS": "[\"tests/test_func.py::test_functionality[func_w0401_disabled_in_func.py]\", \"tests/test_func.py::test_functionality[func_i0022.py]\", \"tests/test_func.py::test_functionality[func_w0401.py]\", \"tests/test_func.py::test_functionality[func_w0801.py]\", \"tests/test_func.py::test_functionality[func_w0401_package]\", \"tests/test_func.py::test_functionality[func_w0401_disabled.py]\", \"tests/test_func.py::test_functionality[func_i0014.py]\", \"tests/test_func.py::test_functionality[func_i0013.py]\", \"tests/test_func.py::test_functionality[func_i0020.py]\", \"tests/test_func.py::test_functionality[func_i0011.py]\", \"tests/test_func.py::test_functionality[func_i0012.py]\"]",
  "environment_setup_commit": "c04f92ef68e5ea779a60bfddb91dc677c5470fd0",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.908960",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}