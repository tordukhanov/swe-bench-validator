{
  "repo": "django/django",
  "instance_id": "django__django-12504",
  "base_commit": "d4bf3b4c75c0e1229062ad4c937725931f699fb7",
  "patch": "diff --git a/django/contrib/auth/views.py b/django/contrib/auth/views.py\n--- a/django/contrib/auth/views.py\n+++ b/django/contrib/auth/views.py\n@@ -1,3 +1,4 @@\n+import warnings\n from urllib.parse import urlparse, urlunparse\n \n from django.conf import settings\n@@ -21,6 +22,7 @@\n from django.shortcuts import resolve_url\n from django.urls import reverse_lazy\n from django.utils.decorators import method_decorator\n+from django.utils.deprecation import RemovedInDjango50Warning\n from django.utils.http import url_has_allowed_host_and_scheme, urlsafe_base64_decode\n from django.utils.translation import gettext_lazy as _\n from django.views.decorators.cache import never_cache\n@@ -117,23 +119,38 @@ class LogoutView(SuccessURLAllowedHostsMixin, TemplateView):\n     Log out the user and display the 'You are logged out' message.\n     \"\"\"\n \n+    # RemovedInDjango50Warning: when the deprecation ends, remove \"get\" and\n+    # \"head\" from http_method_names.\n+    http_method_names = [\"get\", \"head\", \"post\", \"options\"]\n     next_page = None\n     redirect_field_name = REDIRECT_FIELD_NAME\n     template_name = \"registration/logged_out.html\"\n     extra_context = None\n \n+    # RemovedInDjango50Warning: when the deprecation ends, move\n+    # @method_decorator(csrf_protect) from post() to dispatch().\n     @method_decorator(never_cache)\n     def dispatch(self, request, *args, **kwargs):\n+        if request.method.lower() == \"get\":\n+            warnings.warn(\n+                \"Log out via GET requests is deprecated and will be removed in Django \"\n+                \"5.0. Use POST requests for logging out.\",\n+                RemovedInDjango50Warning,\n+            )\n+        return super().dispatch(request, *args, **kwargs)\n+\n+    @method_decorator(csrf_protect)\n+    def post(self, request, *args, **kwargs):\n+        \"\"\"Logout may be done via POST.\"\"\"\n         auth_logout(request)\n         next_page = self.get_next_page()\n         if next_page:\n             # Redirect to this page until the session has been cleared.\n             return HttpResponseRedirect(next_page)\n-        return super().dispatch(request, *args, **kwargs)\n+        return super().get(request, *args, **kwargs)\n \n-    def post(self, request, *args, **kwargs):\n-        \"\"\"Logout may be done via POST.\"\"\"\n-        return self.get(request, *args, **kwargs)\n+    # RemovedInDjango50Warning.\n+    get = post\n \n     def get_next_page(self):\n         if self.next_page is not None:\n",
  "test_patch": "diff --git a/tests/auth_tests/test_signals.py b/tests/auth_tests/test_signals.py\n--- a/tests/auth_tests/test_signals.py\n+++ b/tests/auth_tests/test_signals.py\n@@ -60,13 +60,13 @@ def test_login(self):\n     def test_logout_anonymous(self):\n         # The log_out function will still trigger the signal for anonymous\n         # users.\n-        self.client.get(\"/logout/next_page/\")\n+        self.client.post(\"/logout/next_page/\")\n         self.assertEqual(len(self.logged_out), 1)\n         self.assertIsNone(self.logged_out[0])\n \n     def test_logout(self):\n         self.client.login(username=\"testclient\", password=\"password\")\n-        self.client.get(\"/logout/next_page/\")\n+        self.client.post(\"/logout/next_page/\")\n         self.assertEqual(len(self.logged_out), 1)\n         self.assertEqual(self.logged_out[0].username, \"testclient\")\n \ndiff --git a/tests/auth_tests/test_views.py b/tests/auth_tests/test_views.py\n--- a/tests/auth_tests/test_views.py\n+++ b/tests/auth_tests/test_views.py\n@@ -29,9 +29,10 @@\n from django.db import connection\n from django.http import HttpRequest, HttpResponse\n from django.middleware.csrf import CsrfViewMiddleware, get_token\n-from django.test import Client, TestCase, override_settings\n+from django.test import Client, TestCase, ignore_warnings, override_settings\n from django.test.client import RedirectCycleError\n from django.urls import NoReverseMatch, reverse, reverse_lazy\n+from django.utils.deprecation import RemovedInDjango50Warning\n from django.utils.http import urlsafe_base64_encode\n \n from .client import PasswordResetConfirmClient\n@@ -538,7 +539,7 @@ def fail_login(self):\n         )\n \n     def logout(self):\n-        self.client.get(\"/logout/\")\n+        self.client.post(\"/logout/\")\n \n     def test_password_change_fails_with_invalid_old_password(self):\n         self.login()\n@@ -979,7 +980,10 @@ def confirm_logged_out(self):\n     def test_default_logout_then_login(self):\n         self.login()\n         req = HttpRequest()\n-        req.method = \"GET\"\n+        req.method = \"POST\"\n+        csrf_token = get_token(req)\n+        req.COOKIES[settings.CSRF_COOKIE_NAME] = csrf_token\n+        req.POST = {\"csrfmiddlewaretoken\": csrf_token}\n         req.session = self.client.session\n         response = logout_then_login(req)\n         self.confirm_logged_out()\n@@ -988,12 +992,28 @@ def test_default_logout_then_login(self):\n     def test_logout_then_login_with_custom_login(self):\n         self.login()\n         req = HttpRequest()\n-        req.method = \"GET\"\n+        req.method = \"POST\"\n+        csrf_token = get_token(req)\n+        req.COOKIES[settings.CSRF_COOKIE_NAME] = csrf_token\n+        req.POST = {\"csrfmiddlewaretoken\": csrf_token}\n         req.session = self.client.session\n         response = logout_then_login(req, login_url=\"/custom/\")\n         self.confirm_logged_out()\n         self.assertRedirects(response, \"/custom/\", fetch_redirect_response=False)\n \n+    @ignore_warnings(category=RemovedInDjango50Warning)\n+    @override_settings(LOGIN_URL=\"/login/\")\n+    def test_default_logout_then_login_get(self):\n+        self.login()\n+        req = HttpRequest()\n+        req.method = \"GET\"\n+        req.session = self.client.session\n+        response = logout_then_login(req)\n+        # RemovedInDjango50Warning: When the deprecation ends, replace with\n+        #   self.assertEqual(response.status_code, 405)\n+        self.confirm_logged_out()\n+        self.assertRedirects(response, \"/login/\", fetch_redirect_response=False)\n+\n \n class LoginRedirectAuthenticatedUser(AuthViewsTestCase):\n     dont_redirect_url = \"/login/redirect_authenticated_user_default/\"\n@@ -1136,7 +1156,7 @@ def confirm_logged_out(self):\n     def test_logout_default(self):\n         \"Logout without next_page option renders the default template\"\n         self.login()\n-        response = self.client.get(\"/logout/\")\n+        response = self.client.post(\"/logout/\")\n         self.assertContains(response, \"Logged out\")\n         self.confirm_logged_out()\n \n@@ -1146,10 +1166,21 @@ def test_logout_with_post(self):\n         self.assertContains(response, \"Logged out\")\n         self.confirm_logged_out()\n \n+    def test_logout_with_get_raises_deprecation_warning(self):\n+        self.login()\n+        msg = (\n+            \"Log out via GET requests is deprecated and will be removed in Django 5.0. \"\n+            \"Use POST requests for logging out.\"\n+        )\n+        with self.assertWarnsMessage(RemovedInDjango50Warning, msg):\n+            response = self.client.get(\"/logout/\")\n+        self.assertContains(response, \"Logged out\")\n+        self.confirm_logged_out()\n+\n     def test_14377(self):\n         # Bug 14377\n         self.login()\n-        response = self.client.get(\"/logout/\")\n+        response = self.client.post(\"/logout/\")\n         self.assertIn(\"site\", response.context)\n \n     def test_logout_doesnt_cache(self):\n@@ -1157,16 +1188,16 @@ def test_logout_doesnt_cache(self):\n         The logout() view should send \"no-cache\" headers for reasons described\n         in #25490.\n         \"\"\"\n-        response = self.client.get(\"/logout/\")\n+        response = self.client.post(\"/logout/\")\n         self.assertIn(\"no-store\", response.headers[\"Cache-Control\"])\n \n     def test_logout_with_overridden_redirect_url(self):\n         # Bug 11223\n         self.login()\n-        response = self.client.get(\"/logout/next_page/\")\n+        response = self.client.post(\"/logout/next_page/\")\n         self.assertRedirects(response, \"/somewhere/\", fetch_redirect_response=False)\n \n-        response = self.client.get(\"/logout/next_page/?next=/login/\")\n+        response = self.client.post(\"/logout/next_page/?next=/login/\")\n         self.assertRedirects(response, \"/login/\", fetch_redirect_response=False)\n \n         self.confirm_logged_out()\n@@ -1174,28 +1205,28 @@ def test_logout_with_overridden_redirect_url(self):\n     def test_logout_with_next_page_specified(self):\n         \"Logout with next_page option given redirects to specified resource\"\n         self.login()\n-        response = self.client.get(\"/logout/next_page/\")\n+        response = self.client.post(\"/logout/next_page/\")\n         self.assertRedirects(response, \"/somewhere/\", fetch_redirect_response=False)\n         self.confirm_logged_out()\n \n     def test_logout_with_redirect_argument(self):\n         \"Logout with query string redirects to specified resource\"\n         self.login()\n-        response = self.client.get(\"/logout/?next=/login/\")\n+        response = self.client.post(\"/logout/?next=/login/\")\n         self.assertRedirects(response, \"/login/\", fetch_redirect_response=False)\n         self.confirm_logged_out()\n \n     def test_logout_with_custom_redirect_argument(self):\n         \"Logout with custom query string redirects to specified resource\"\n         self.login()\n-        response = self.client.get(\"/logout/custom_query/?follow=/somewhere/\")\n+        response = self.client.post(\"/logout/custom_query/?follow=/somewhere/\")\n         self.assertRedirects(response, \"/somewhere/\", fetch_redirect_response=False)\n         self.confirm_logged_out()\n \n     def test_logout_with_named_redirect(self):\n         \"Logout resolves names or URLs passed as next_page.\"\n         self.login()\n-        response = self.client.get(\"/logout/next_page/named/\")\n+        response = self.client.post(\"/logout/next_page/named/\")\n         self.assertRedirects(\n             response, \"/password_reset/\", fetch_redirect_response=False\n         )\n@@ -1203,7 +1234,7 @@ def test_logout_with_named_redirect(self):\n \n     def test_success_url_allowed_hosts_same_host(self):\n         self.login()\n-        response = self.client.get(\"/logout/allowed_hosts/?next=https://testserver/\")\n+        response = self.client.post(\"/logout/allowed_hosts/?next=https://testserver/\")\n         self.assertRedirects(\n             response, \"https://testserver/\", fetch_redirect_response=False\n         )\n@@ -1211,7 +1242,7 @@ def test_success_url_allowed_hosts_same_host(self):\n \n     def test_success_url_allowed_hosts_safe_host(self):\n         self.login()\n-        response = self.client.get(\"/logout/allowed_hosts/?next=https://otherserver/\")\n+        response = self.client.post(\"/logout/allowed_hosts/?next=https://otherserver/\")\n         self.assertRedirects(\n             response, \"https://otherserver/\", fetch_redirect_response=False\n         )\n@@ -1219,7 +1250,7 @@ def test_success_url_allowed_hosts_safe_host(self):\n \n     def test_success_url_allowed_hosts_unsafe_host(self):\n         self.login()\n-        response = self.client.get(\"/logout/allowed_hosts/?next=https://evil/\")\n+        response = self.client.post(\"/logout/allowed_hosts/?next=https://evil/\")\n         self.assertRedirects(\n             response, \"/logout/allowed_hosts/\", fetch_redirect_response=False\n         )\n@@ -1246,7 +1277,7 @@ def test_security_check(self):\n                     \"bad_url\": quote(bad_url),\n                 }\n                 self.login()\n-                response = self.client.get(nasty_url)\n+                response = self.client.post(nasty_url)\n                 self.assertEqual(response.status_code, 302)\n                 self.assertNotIn(\n                     bad_url, response.url, \"%s should be blocked\" % bad_url\n@@ -1272,7 +1303,7 @@ def test_security_check(self):\n                     \"good_url\": quote(good_url),\n                 }\n                 self.login()\n-                response = self.client.get(safe_url)\n+                response = self.client.post(safe_url)\n                 self.assertEqual(response.status_code, 302)\n                 self.assertIn(good_url, response.url, \"%s should be allowed\" % good_url)\n                 self.confirm_logged_out()\n@@ -1286,7 +1317,7 @@ def test_security_check_https(self):\n             \"next_url\": quote(non_https_next_url),\n         }\n         self.login()\n-        response = self.client.get(url, secure=True)\n+        response = self.client.post(url, secure=True)\n         self.assertRedirects(response, logout_url, fetch_redirect_response=False)\n         self.confirm_logged_out()\n \n@@ -1295,19 +1326,19 @@ def test_logout_preserve_language(self):\n         self.login()\n         self.client.post(\"/setlang/\", {\"language\": \"pl\"})\n         self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, \"pl\")\n-        self.client.get(\"/logout/\")\n+        self.client.post(\"/logout/\")\n         self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, \"pl\")\n \n     @override_settings(LOGOUT_REDIRECT_URL=\"/custom/\")\n     def test_logout_redirect_url_setting(self):\n         self.login()\n-        response = self.client.get(\"/logout/\")\n+        response = self.client.post(\"/logout/\")\n         self.assertRedirects(response, \"/custom/\", fetch_redirect_response=False)\n \n     @override_settings(LOGOUT_REDIRECT_URL=\"logout\")\n     def test_logout_redirect_url_named_setting(self):\n         self.login()\n-        response = self.client.get(\"/logout/\")\n+        response = self.client.post(\"/logout/\")\n         self.assertRedirects(response, \"/logout/\", fetch_redirect_response=False)\n \n \n",
  "problem_statement": "Logout link should be protected\nDescription\n\t\nThere is a logout link in admin app. It is link, not a form. Therefore it is not CSRF-protected.\nProbably it is not so important to protect logout from CSRF attack, because this fact cannot be used to do anything harmful. So this is just a request for purity.\nAnother reason is that GET request should never change invernal state of the system.\n",
  "hints_text": "The ​HTTP spec says (9.1.1) that GET requests \"​SHOULD NOT have the significance of taking an action other than retrieval\", and \"ought to be considered 'safe'\". It also says (9.1.2) that GET has the property of idempotence. A logout link is idempotent. Therefore, we are HTTP compliant. As for CSRF; I fail to see why this is relevant. Given that there is no incoming data, and no data processing, I cannot see an CSRF weakness, even in-principle.\nLogout link is idempotent, right. But GET /logout/ make a job other than retrieval. It destroys a session. Deletes something. Imagine a bot which crawl every link on the site. After visiting /logout/ the state of the system will change and visiting every link will redirect to login form. So, I think, in ideal world the /logout/ link should be visited only with DELETE requests. Browsers doesn't allow DELETE (without XHR), so we have two options to emulate it: with GET and with POST. For now it's GET. But this GET is not really \"safe\", it deletes session.\nThe point Russell was making was that 'SHOULD NOT' is not the same as 'MUST NOT'. In practice, while being logged out by a 3rd party might be a nuisance, in general the attackers will gain extremely little except ill-will, and therefore there is little motivation to exploit this, and fairly trivial consequences if they do.\nOn the recommendation of Alex Gaynor, I'm reopening this ticket. The issue is that this presents a really tempting avenue for DoS type attacks. The attack (which I have, through great force of will, refrained from illustrating in this post) is to simply embed the non-side-effect-free url as an image. The link obviously does not display a picture, but the browser does retrieve the content, forcing the user to log out. This makes removal of offensive content particularly obnoxious for administrators. Fixing this could involve requiring a form, or (since using a link to log out is convenient) a nonce of some sort. Some forums implement the functionality with a pass-through page which submits a form via javascript.\nSure, let's have the admin use a logout view which logs out if request.method == 'POST' otherwise shows an intermediary confirmation page. Site.login wraps the django.contrib.auth.views logout view and changing that would be backwards incompatible, so it'll have to be a new view (and it may as well live in auth so it can be used in other situations too).\nSounds like a plan +1\nIn the admin we can also have some jQuery (or other javascript) code that will change the logout link so that it does a POST to the logout view by submitting a (dynamically generated) POST form. That would be better than a pass through page because it requires just one HTTP request.\nHave this more or less working however, need a csrf token when doing the logout in javascript. Not sure the best way to go about this. Make a call to the url to get the csrf back then use that to submit? Not sure - seems like a wonky idea. EDIT: Easy enough - added {{ csrf_token }} to data being posted.\nAdded patch but still needs work - looking for feedback. https://code.djangoproject.com/attachment/ticket/15619/ticket15619.diff The logout confirmation screen is no longer used - is it something we actually need? If so, any suggestions on how to keep it other than replacing the <html /> element with the payload from the AJAX request? Or is that a valid way to do it?\n1) Why POST the form over AJAX? Can't you just put a logout form on all admin pages that the browser submits when the logout link is clicked? 2) The logout link should still point to the logout confirmation page unless the click event is co-opted by JavaScript and converted into a POST. This way the confirmation page will still come into play if someone has JavaScript disabled.\nTobias seems to have hit it on the head. That sounds like the right solution to me too.\nNew patch submitted with a bit more sane method of attack.\nIt's more usual to say if request.method == \"POST\" The \"are you sure you want to log out\" isn't translated. It also needs tests and documentation. Otherwise, the method looks pretty good to me. I'd like someone who's more familiar with the admin coding conventions than I to make the final call, but it's about ready. Thanks for keeping at this :)\nRegression tests fail using this patch. Attempting to fix regression tests.\nUpdated code, fixed regression tests and added new regression tests.\nAs per julienphalip's feedback on irc: \"it'd be good to test the actual login status after using both the POST and GET methods. It seems the patch only looks at what template is being used.\" Suggested using: self.assertTrue(SESSION_KEY not in self.client.session)\nMilestone 1.4 deleted\nsetting patch needs improvement per comment 18\nBeginning work on this patch again.\nTalking to julienphalip on #django-dev - we are going to look at getting ModelAdmin.media() to return only the js files needed for a given view. This may require changing ModelAdmin.media() to be a method that takes arguments, rather than staying as a property. Once this is complete, we can move ahead with the solution as outlined in the rest of this ticket.\n#7989 was a duplicate.\nReplying to lukeplant: The point Russell was making was that 'SHOULD NOT' is not the same as 'MUST NOT'. In practice, while being logged out by a 3rd party might be a nuisance, in general the attackers will gain extremely little except ill-will, and therefore there is little motivation to exploit this, and fairly trivial consequences if they do. Really? [[Image(https://code.djangoproject.com/logout)]] EDIT(aaugustin): added quotes around the image wiki markup.\nCongratulations, you've proved you like wasting our time. Don't be surprised if your comments are ignored from now on. By the way, this isn't even an proof-of-concept against Django, it's against Trac.\nReplying to aaugustin: Congratulations, you've proved you like wasting our time. Don't be surprised if your comments are ignored from now on. By the way, this isn't even an proof-of-concept against Django, it's against Trac. It is the same problem in Django as is in Trac. It would be very easy to add a lot fake images to whatever site powered by Django, some are listed at Django homepage. Or Django Project admin itself :) [[Image(https://www.djangoproject.com/admin/logout/)]]\nReplying to vzima: It is the same problem in Django as is in Trac. It would be very easy to add a lot fake images to whatever site powered by Django, some are listed at Django homepage. Or Django Project admin itself :) Please stop arguing with us when we already agree with you. See comment number 4, which is after mine.\nReplying to lukeplant: Replying to vzima: It is the same problem in Django as is in Trac. It would be very easy to add a lot fake images to whatever site powered by Django, some are listed at Django homepage. Or Django Project admin itself :) Please stop arguing with us when we already agree with you. See comment number 4, which is after mine. My main point is that this ticket should be closed as soon as possible because the bug has security consequences. The bug is opened 2 years and it does not seem its patch will be included into 1.5 either. The last patch probably requires no update except comment:18 and then it got stuck. Anyway, based on last patch from ashchristopher I created a github branch ​https://github.com/vzima/django/tree/15619-protected-logout with updated patch which considers comment:18. Also I moved the base code from admin logout to auth logout so logouts are protected also outside of admin application. Feedback welcome, so we can finally close this issue.\nThe patch no longer applies cleanly and an update for the contrib.auth documentation is not included. A change like this also belongs in the release notes, as it causes a backwards incompatibility.\nI’ve added the documentation and made a few changes to vzima’s patch: ​https://github.com/django/django/pull/1934\nPatch LGTM\nFor a few days I have the branch on work, but KJ was a bit faster :) I provide my pull as well, I found there few things differ, though I replaced logout link with form as well. ​https://github.com/django/django/pull/1963\nI'd rather note this here, in case it gets lost on github: KJ didn't fix the logout links in password change templates.\nThe input that masquerades as an anchor doesn't render all that well across various browsers, also it'll break for people with custom CSS. I would replace it with <a href=\"/admin/logout/\" id=\"logout-link\"> and a jQuery click handler along those lines: $('#logout-link').click(function() { $(this).parents('form').submit(); return false; }) People without JS can still logout because the href points to the intermediary page.\nReplying to loic84: The input that masquerades as an anchor doesn't render all that well across various browsers, also it'll break for people with custom CSS. We could also keep the form and style the button as a button.\n​https://groups.google.com/d/topic/django-developers/MmFzCq8oB5I/discussion",
  "created_at": "2020-02-27T17:07:31Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_logout_with_get_raises_deprecation_warning (auth_tests.test_views.LogoutTest)\"]",
  "PASS_TO_PASS": "[\"Named URLs should be reversible\", \"test_redirect_to_login_with_lazy (auth_tests.test_views.RedirectToLoginTests)\", \"test_redirect_to_login_with_lazy_and_unicode (auth_tests.test_views.RedirectToLoginTests)\", \"test_https_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_lazy_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_login_url_with_querystring (auth_tests.test_views.LoginURLSettings)\", \"test_named_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_remote_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_remote_login_url_with_next_querystring (auth_tests.test_views.LoginURLSettings)\", \"test_standard_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_failed_login_without_request (auth_tests.test_signals.SignalTestCase)\", \"test_login (auth_tests.test_signals.SignalTestCase)\", \"The user_logged_in signal is only registered if the user model has a\", \"test_logout (auth_tests.test_signals.SignalTestCase)\", \"test_logout_anonymous (auth_tests.test_signals.SignalTestCase)\", \"Only `last_login` is updated in `update_last_login`\", \"test_default_logout_then_login (auth_tests.test_views.LogoutThenLoginTests)\", \"test_default_logout_then_login_get (auth_tests.test_views.LogoutThenLoginTests)\", \"test_logout_then_login_with_custom_login (auth_tests.test_views.LogoutThenLoginTests)\", \"test_success_url_allowed_hosts_safe_host (auth_tests.test_views.LoginSuccessURLAllowedHostsTest)\", \"test_success_url_allowed_hosts_same_host (auth_tests.test_views.LoginSuccessURLAllowedHostsTest)\", \"test_success_url_allowed_hosts_unsafe_host (auth_tests.test_views.LoginSuccessURLAllowedHostsTest)\", \"test_custom (auth_tests.test_views.LoginRedirectUrlTest)\", \"test_default (auth_tests.test_views.LoginRedirectUrlTest)\", \"test_named (auth_tests.test_views.LoginRedirectUrlTest)\", \"test_remote (auth_tests.test_views.LoginRedirectUrlTest)\", \"#21649 - Ensure contrib.auth.views.password_change updates the user's\", \"test_confirm_valid_custom_user (auth_tests.test_views.CustomUserPasswordResetTest)\", \"A uidb64 that decodes to a non-UUID doesn't crash.\", \"test_confirm_valid_custom_user (auth_tests.test_views.UUIDUserPasswordResetTest)\", \"test_password_change_done_fails (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_done_succeeds (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_fails_with_invalid_old_password (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_fails_with_mismatched_passwords (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_redirect_custom (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_redirect_custom_named (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_redirect_default (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_succeeds (auth_tests.test_views.ChangePasswordTest)\", \"test_current_site_in_context_after_login (auth_tests.test_views.LoginTest)\", \"Makes sure that a login rotates the currently-used CSRF token.\", \"test_login_form_contains_request (auth_tests.test_views.LoginTest)\", \"test_login_get_default_redirect_url (auth_tests.test_views.LoginTest)\", \"test_login_named_next_page_named (auth_tests.test_views.LoginTest)\", \"test_login_next_page (auth_tests.test_views.LoginTest)\", \"test_login_next_page_overrides_login_redirect_url_setting (auth_tests.test_views.LoginTest)\", \"test_login_redirect_url_overrides_get_default_redirect_url (auth_tests.test_views.LoginTest)\", \"test_login_redirect_url_overrides_next_page (auth_tests.test_views.LoginTest)\", \"Session without django.contrib.auth.HASH_SESSION_KEY should login\", \"test_security_check (auth_tests.test_views.LoginTest)\", \"test_security_check_https (auth_tests.test_views.LoginTest)\", \"To avoid reusing another user's session, ensure a new, empty session is\", \"As above, but same user logging in after a password change.\", \"Stay on the login page by default.\", \"If not logged in, stay on the same page.\", \"test_permission_required_logged_in (auth_tests.test_views.LoginRedirectAuthenticatedUser)\", \"test_permission_required_not_logged_in (auth_tests.test_views.LoginRedirectAuthenticatedUser)\", \"If logged in, go to default redirected URL.\", \"Detect a redirect loop if LOGIN_REDIRECT_URL is not correctly set,\", \"If next is specified as a GET parameter, go there.\", \"If logged in, go to custom redirected URL.\", \"test_admin_password_change (auth_tests.test_views.UUIDUserTests)\", \"test_14377 (auth_tests.test_views.LogoutTest)\", \"Logout without next_page option renders the default template\", \"The logout() view should send \\\"no-cache\\\" headers for reasons described\", \"Language is preserved after logout.\", \"test_logout_redirect_url_named_setting (auth_tests.test_views.LogoutTest)\", \"test_logout_redirect_url_setting (auth_tests.test_views.LogoutTest)\", \"Logout with custom query string redirects to specified resource\", \"Logout resolves names or URLs passed as next_page.\", \"Logout with next_page option given redirects to specified resource\", \"test_logout_with_overridden_redirect_url (auth_tests.test_views.LogoutTest)\", \"test_logout_with_post (auth_tests.test_views.LogoutTest)\", \"Logout with query string redirects to specified resource\", \"test_security_check (auth_tests.test_views.LogoutTest)\", \"test_security_check_https (auth_tests.test_views.LogoutTest)\", \"test_success_url_allowed_hosts_safe_host (auth_tests.test_views.LogoutTest)\", \"test_success_url_allowed_hosts_same_host (auth_tests.test_views.LogoutTest)\", \"test_success_url_allowed_hosts_unsafe_host (auth_tests.test_views.LogoutTest)\", \"test_confirm_complete (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_custom_reset_url_token (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_custom_reset_url_token_link_redirects_to_set_password_page (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_different_passwords (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_display_user_from_form (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_invalid (auth_tests.test_views.PasswordResetTest)\", \"A POST with an invalid token is rejected.\", \"test_confirm_invalid_post (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_invalid_user (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_link_redirects_to_set_password_page (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_login_post_reset (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_login_post_reset_already_logged_in (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_login_post_reset_custom_backend (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_overflow_user (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_redirect_custom (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_redirect_custom_named (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_redirect_default (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_valid (auth_tests.test_views.PasswordResetTest)\", \"Email is sent if a valid email address is provided for password reset\", \"If the provided email is not registered, don't raise any error but\", \"extra_email_context should be available in the email template context.\", \"A multipart email with text/plain and text/html is sent\", \"test_invalid_link_if_going_directly_to_the_final_reset_password_url (auth_tests.test_views.PasswordResetTest)\", \"test_missing_kwargs (auth_tests.test_views.PasswordResetTest)\", \"Poisoned HTTP_HOST headers can't be used for reset emails\", \"Poisoned HTTP_HOST headers can't be used for reset emails on admin views\", \"test_reset_custom_redirect (auth_tests.test_views.PasswordResetTest)\", \"test_reset_custom_redirect_named (auth_tests.test_views.PasswordResetTest)\", \"test_reset_redirect_default (auth_tests.test_views.PasswordResetTest)\", \"test_changelist_disallows_password_lookups (auth_tests.test_views.ChangelistTests)\", \"test_password_change_bad_url (auth_tests.test_views.ChangelistTests)\", \"test_user_change_different_user_password (auth_tests.test_views.ChangelistTests)\", \"test_user_change_email (auth_tests.test_views.ChangelistTests)\", \"test_user_change_password (auth_tests.test_views.ChangelistTests)\", \"test_user_change_password_passes_user_to_has_change_permission (auth_tests.test_views.ChangelistTests)\", \"test_user_not_change (auth_tests.test_views.ChangelistTests)\", \"test_view_user_password_is_readonly (auth_tests.test_views.ChangelistTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.628434",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}