{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-5180",
  "base_commit": "c54ec94a6e4c3276eac3e2bbea3c77a040d5674a",
  "patch": "diff --git a/xarray/coding/times.py b/xarray/coding/times.py\n--- a/xarray/coding/times.py\n+++ b/xarray/coding/times.py\n@@ -68,6 +68,10 @@\n )\n \n \n+def _is_standard_calendar(calendar):\n+    return calendar.lower() in _STANDARD_CALENDARS\n+\n+\n def _netcdf_to_numpy_timeunit(units):\n     units = units.lower()\n     if not units.endswith(\"s\"):\n@@ -166,7 +170,7 @@ def _decode_datetime_with_cftime(num_dates, units, calendar):\n \n \n def _decode_datetime_with_pandas(flat_num_dates, units, calendar):\n-    if calendar not in _STANDARD_CALENDARS:\n+    if not _is_standard_calendar(calendar):\n         raise OutOfBoundsDatetime(\n             \"Cannot decode times from a non-standard calendar, {!r}, using \"\n             \"pandas.\".format(calendar)\n@@ -237,7 +241,7 @@ def decode_cf_datetime(num_dates, units, calendar=None, use_cftime=None):\n                 dates[np.nanargmin(num_dates)].year < 1678\n                 or dates[np.nanargmax(num_dates)].year >= 2262\n             ):\n-                if calendar in _STANDARD_CALENDARS:\n+                if _is_standard_calendar(calendar):\n                     warnings.warn(\n                         \"Unable to decode time axis into full \"\n                         \"numpy.datetime64 objects, continuing using \"\n@@ -247,7 +251,7 @@ def decode_cf_datetime(num_dates, units, calendar=None, use_cftime=None):\n                         stacklevel=3,\n                     )\n             else:\n-                if calendar in _STANDARD_CALENDARS:\n+                if _is_standard_calendar(calendar):\n                     dates = cftime_to_nptime(dates)\n     elif use_cftime:\n         dates = _decode_datetime_with_cftime(flat_num_dates, units, calendar)\n@@ -450,7 +454,7 @@ def encode_cf_datetime(dates, units=None, calendar=None):\n \n     delta, ref_date = _unpack_netcdf_time_units(units)\n     try:\n-        if calendar not in _STANDARD_CALENDARS or dates.dtype.kind == \"O\":\n+        if not _is_standard_calendar(calendar) or dates.dtype.kind == \"O\":\n             # parse with cftime instead\n             raise OutOfBoundsDatetime\n         assert dates.dtype == \"datetime64[ns]\"\n",
  "test_patch": "diff --git a/xarray/tests/test_coding_times.py b/xarray/tests/test_coding_times.py\n--- a/xarray/tests/test_coding_times.py\n+++ b/xarray/tests/test_coding_times.py\n@@ -26,7 +26,7 @@\n from xarray.coding.variables import SerializationWarning\n from xarray.conventions import _update_bounds_attributes, cf_encoder\n from xarray.core.common import contains_cftime_datetimes\n-from xarray.testing import assert_equal\n+from xarray.testing import assert_equal, assert_identical\n \n from . import (\n     arm_xfail,\n@@ -1049,3 +1049,23 @@ def test__encode_datetime_with_cftime():\n     expected = cftime.date2num(times, encoding_units, calendar)\n     result = _encode_datetime_with_cftime(times, encoding_units, calendar)\n     np.testing.assert_equal(result, expected)\n+\n+\n+@pytest.mark.parametrize(\"calendar\", [\"gregorian\", \"Gregorian\", \"GREGORIAN\"])\n+def test_decode_encode_roundtrip_with_non_lowercase_letters(calendar):\n+    # See GH 5093.\n+    times = [0, 1]\n+    units = \"days since 2000-01-01\"\n+    attrs = {\"calendar\": calendar, \"units\": units}\n+    variable = Variable([\"time\"], times, attrs)\n+    decoded = conventions.decode_cf_variable(\"time\", variable)\n+    encoded = conventions.encode_cf_variable(decoded)\n+\n+    # Previously this would erroneously be an array of cftime.datetime\n+    # objects.  We check here that it is decoded properly to np.datetime64.\n+    assert np.issubdtype(decoded.dtype, np.datetime64)\n+\n+    # Use assert_identical to ensure that the calendar attribute maintained its\n+    # original form throughout the roundtripping process, uppercase letters and\n+    # all.\n+    assert_identical(variable, encoded)\n",
  "problem_statement": "open_dataset uses cftime, not datetime64, when calendar attribute is \"Gregorian\"\n<!-- Please include a self-contained copy-pastable example that generates the issue if possible.\r\n\r\nPlease be concise with code posted. See guidelines below on how to provide a good bug report:\r\n\r\n- Craft Minimal Bug Reports: http://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports\r\n- Minimal Complete Verifiable Examples: https://stackoverflow.com/help/mcve\r\n\r\nBug reports that follow these guidelines are easier to diagnose, and so are often handled much more quickly.\r\n-->\r\n\r\n**What happened**:\r\n\r\nI used `xarray.open_dataset` to open a NetCDF file whose `time` coordinate had the `calendar` attribute set to `Gregorian`. All dates were within the Timestamp-valid range.\r\n\r\nThe resulting dataset represented the `time` co-ordinate as a\r\n`cftime._cftime.DatetimeGregorian`.\r\n\r\n**What you expected to happen**:\r\n\r\nI expected the dataset to represent the `time` co-ordinate as a `datetime64[ns]`, as documented [here](http://xarray.pydata.org/en/stable/generated/xarray.open_dataset.html) and [here](http://xarray.pydata.org/en/stable/weather-climate.html#non-standard-calendars-and-dates-outside-the-timestamp-valid-range).\r\n\r\n**Minimal Complete Verifiable Example**:\r\n\r\n```python\r\nimport xarray as xr\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\ndef print_time_type(dataset):\r\n    print(dataset.time.dtype, type(dataset.time[0].item()))\r\n\r\nda = xr.DataArray(\r\n    data=[32, 16, 8],\r\n    dims=[\"time\"],\r\n    coords=dict(\r\n        time=pd.date_range(\"2014-09-06\", periods=3),\r\n        reference_time=pd.Timestamp(\"2014-09-05\"),\r\n    ),\r\n)\r\n\r\n\r\n# Create dataset and confirm type of time\r\nds1 = xr.Dataset({\"myvar\": da})\r\nprint_time_type(ds1)  # prints \"datetime64[ns]\" <class 'int'>\r\n\r\n# Manually set time attributes to \"Gregorian\" rather\r\n# than default \"proleptic_gregorian\".\r\nds1.time.encoding[\"calendar\"] = \"Gregorian\"\r\nds1.reference_time.encoding[\"calendar\"] = \"Gregorian\"\r\nds1.to_netcdf(\"test-capitalized.nc\")\r\n\r\nds2 = xr.open_dataset(\"test-capitalized.nc\")\r\nprint_time_type(ds2)\r\n# prints \"object <class 'cftime._cftime.DatetimeGregorian'>\"\r\n\r\n# Workaround: add \"Gregorian\" to list of standard calendars.\r\nxr.coding.times._STANDARD_CALENDARS.add(\"Gregorian\")\r\nds3 = xr.open_dataset(\"test-capitalized.nc\")\r\nprint_time_type(ds3)  # prints \"datetime64[ns]\" <class 'int'>\r\n```\r\n\r\n**Anything else we need to know?**:\r\n\r\nThe [documentation for the `use_cftime` parameter of `open_dataset`](http://xarray.pydata.org/en/stable/generated/xarray.open_dataset.html) says:\r\n\r\n> If None (default), attempt to decode times to `np.datetime64[ns]` objects; if this is not possible, decode times to `cftime.datetime` objects.\r\n\r\nIn practice, we are getting some `cftime.datetime`s even for times which are interpretable and representable as `np.datetime64[ns]`s. In particular, we have some NetCDF files in which the `time` variable has a `calendar` attribute with a value of `Gregorian` (with a capital ‘G’). CF conventions [allow this](http://cfconventions.org/Data/cf-conventions/cf-conventions-1.8/cf-conventions.html#_attributes):\r\n\r\n> When this standard defines string attributes that may take various prescribed values, the possible values are generally given in lower case. However, applications programs should not be sensitive to case in these attributes.\r\n\r\nHowever, xarray regards `Gregorian` as a non-standard calendar and falls back to `cftime.datetime`. If (as in the example) `Gregorian` is added to `xr.coding.times._STANDARD_CALENDARS`, the times are read as `np.datetime64[ns]`s.\r\n\r\nSuggested fix: in [`xarray.coding.times._decode_datetime_with_pandas`](https://github.com/pydata/xarray/blob/45b4436bd5a82e7020357cf681b13067a8dd59e9/xarray/coding/times.py#L169), change ‘`if calendar not in _STANDARD_CALENDARS:`’ to ‘`if calendar.lower() not in _STANDARD_CALENDARS:`’.\r\n\r\n**Environment**:\r\n\r\n<details><summary>Output of <tt>xr.show_versions()</tt></summary>\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.9.2 | packaged by conda-forge | (default, Feb 21 2021, 05:02:46) \r\n[GCC 9.3.0]\r\npython-bits: 64\r\nOS: Linux\r\nOS-release: 5.8.0-48-generic\r\nmachine: x86_64\r\nprocessor: x86_64\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_GB.UTF-8\r\nLOCALE: en_GB.UTF-8\r\nlibhdf5: 1.10.6\r\nlibnetcdf: 4.7.4\r\n\r\nxarray: 0.17.1.dev39+g45b4436b\r\npandas: 1.2.3\r\nnumpy: 1.20.2\r\nscipy: None\r\nnetCDF4: 1.5.6\r\npydap: None\r\nh5netcdf: None\r\nh5py: None\r\nNio: None\r\nzarr: None\r\ncftime: 1.4.1\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: None\r\ncfgrib: None\r\niris: None\r\nbottleneck: None\r\ndask: None\r\ndistributed: None\r\nmatplotlib: None\r\ncartopy: None\r\nseaborn: None\r\nnumbagg: None\r\npint: None\r\nsetuptools: 49.6.0.post20210108\r\npip: 21.0.1\r\nconda: None\r\npytest: None\r\nIPython: None\r\nsphinx: None\r\n\r\n<!-- Paste the output here xr.show_versions() here -->\r\n\r\n</details>\r\n\r\n\n",
  "hints_text": "Many thanks for the clear report.  I totally agree we should be able to handle this.  It would be great if you could put together a PR with a fix and some added test coverage.\r\n\r\nMy only suggestion would be to implement your fix at a higher level in the call stack, e.g. by converting the input `calendar` to lowercase within [`xarray.coding.times.decode_cf_datetime`](https://github.com/pydata/xarray/blob/ba47216ec1cd2f170fd85a10f232be7bf3ecc578/xarray/coding/times.py#L208-L257) before using it anywhere else.  I think this may be cleaner since we do similar checks to the one in `_decode_datetime_with_pandas` in other places, e.g. [here](https://github.com/pydata/xarray/blob/ba47216ec1cd2f170fd85a10f232be7bf3ecc578/xarray/coding/times.py#L240-L251).",
  "created_at": "2021-04-17T20:44:57Z",
  "version": "0.12",
  "FAIL_TO_PASS": "[\"xarray/tests/test_coding_times.py::test_decode_encode_roundtrip_with_non_lowercase_letters[Gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_encode_roundtrip_with_non_lowercase_letters[GREGORIAN]\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates0-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates1-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates2-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates3-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates4-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates5-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates6-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates7-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates8-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates9-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates10-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates11-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates12-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates13-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates14-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates15-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates16-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates17-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates18-Hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates19-Hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates20-Hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates21-\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates22-\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates23-\", \"xarray/tests/test_coding_times.py::test_cf_datetime[10-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates27-daYs\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates28-daYs\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates29-daYs\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates30-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates31-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates32-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates33-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates34-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates35-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates36-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates37-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates38-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[0-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates42-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates43-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates44-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates45-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates46-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates47-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates48-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates49-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates50-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates51-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates52-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates53-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates54-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates55-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates56-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[17093352.0-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates60-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates61-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates62-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[0-milliseconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[0-microseconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates69-seconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates70-seconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates71-seconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates72-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates73-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates74-hour\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_non_standard_units\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_non_iso_strings\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[360_day-720058.0]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[all_leap-732059.0]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[366_day-732059.0]\", \"xarray/tests/test_coding_times.py::test_decode_360_day_calendar\", \"xarray/tests/test_coding_times.py::test_decode_abbreviation\", \"xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates0-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates1-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates2-days\", \"xarray/tests/test_coding_times.py::test_decoded_cf_datetime_array_2d\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[N-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[U-microseconds]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[L-milliseconds]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[S-seconds]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[T-minutes]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[H-hours]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[D-days]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates0-days\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates1-days\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates2-days\", \"xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args0-days\", \"xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args1-seconds\", \"xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args2-days\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1D-days-numbers0]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas1-days-numbers1]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1h-hours-numbers2]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1ms-milliseconds-numbers3]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1us-microseconds-numbers4]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1ns-nanoseconds-numbers5]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas6-None-numbers6]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas7-hours-numbers7]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[NaT-days-nan]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas9-days-numbers9]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta_2d\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas0-days]\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas1-hours]\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas2-minutes]\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas3-seconds]\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args0-0001-02-03\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args1-0010-02-03\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args2-0100-02-03\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args3-1000-02-03\", \"xarray/tests/test_coding_times.py::test_decode_cf[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_cf[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_cf[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_cf[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_cf[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_cf[julian]\", \"xarray/tests/test_coding_times.py::test_decode_cf[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_cf[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_cf[standard]\", \"xarray/tests/test_coding_times.py::test_decode_cf_time_bounds\", \"xarray/tests/test_coding_times.py::test_encode_time_bounds\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes[non_cftime_data0]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes[non_cftime_data1]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes_dask[non_cftime_data0]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes_dask[non_cftime_data1]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_pandas_min\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[360_day]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[365_day]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[366_day]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[all_leap]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[gregorian]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[julian]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[noleap]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-noleap]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[julian]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[standard]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-days]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[N]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[U]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[L]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[S]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[T]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[H]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[D]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[U]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[L]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[S]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[T]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[H]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[D]\", \"xarray/tests/test_coding_times.py::test__encode_datetime_with_cftime\", \"xarray/tests/test_coding_times.py::test_decode_encode_roundtrip_with_non_lowercase_letters[gregorian]\"]",
  "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.888039",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}