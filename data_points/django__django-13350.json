{
  "repo": "django/django",
  "instance_id": "django__django-13350",
  "base_commit": "5fcfe5361e5b8c9738b1ee4c1e9a6f293a7dda40",
  "patch": "diff --git a/django/core/files/uploadhandler.py b/django/core/files/uploadhandler.py\n--- a/django/core/files/uploadhandler.py\n+++ b/django/core/files/uploadhandler.py\n@@ -1,7 +1,7 @@\n \"\"\"\n Base file upload handler classes, and the built-in concrete subclasses\n \"\"\"\n-\n+import os\n from io import BytesIO\n \n from django.conf import settings\n@@ -127,6 +127,13 @@ def upload_complete(self):\n         \"\"\"\n         pass\n \n+    def upload_interrupted(self):\n+        \"\"\"\n+        Signal that the upload was interrupted. Subclasses should perform\n+        cleanup that is necessary for this handler.\n+        \"\"\"\n+        pass\n+\n \n class TemporaryFileUploadHandler(FileUploadHandler):\n     \"\"\"\n@@ -147,6 +154,15 @@ def file_complete(self, file_size):\n         self.file.size = file_size\n         return self.file\n \n+    def upload_interrupted(self):\n+        if hasattr(self, 'file'):\n+            temp_location = self.file.temporary_file_path()\n+            try:\n+                self.file.close()\n+                os.remove(temp_location)\n+            except FileNotFoundError:\n+                pass\n+\n \n class MemoryFileUploadHandler(FileUploadHandler):\n     \"\"\"\ndiff --git a/django/http/multipartparser.py b/django/http/multipartparser.py\n--- a/django/http/multipartparser.py\n+++ b/django/http/multipartparser.py\n@@ -150,6 +150,8 @@ def parse(self):\n         num_post_keys = 0\n         # To limit the amount of data read from the request.\n         read_size = None\n+        # Whether a file upload is finished.\n+        uploaded_file = True\n \n         try:\n             for item_type, meta_data, field_stream in Parser(stream, self._boundary):\n@@ -159,6 +161,7 @@ def parse(self):\n                     # we hit the next boundary/part of the multipart content.\n                     self.handle_file_complete(old_field_name, counters)\n                     old_field_name = None\n+                    uploaded_file = True\n \n                 try:\n                     disposition = meta_data['content-disposition'][1]\n@@ -225,6 +228,7 @@ def parse(self):\n                         content_length = None\n \n                     counters = [0] * len(handlers)\n+                    uploaded_file = False\n                     try:\n                         for handler in handlers:\n                             try:\n@@ -279,6 +283,9 @@ def parse(self):\n             if not e.connection_reset:\n                 exhaust(self._input_data)\n         else:\n+            if not uploaded_file:\n+                for handler in handlers:\n+                    handler.upload_interrupted()\n             # Make sure that the request data is all fed\n             exhaust(self._input_data)\n \n",
  "test_patch": "diff --git a/tests/file_uploads/tests.py b/tests/file_uploads/tests.py\n--- a/tests/file_uploads/tests.py\n+++ b/tests/file_uploads/tests.py\n@@ -6,12 +6,13 @@\n import tempfile as sys_tempfile\n import unittest\n from io import BytesIO, StringIO\n+from unittest import mock\n from urllib.parse import quote\n \n from django.core.files import temp as tempfile\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.http.multipartparser import (\n-    MultiPartParser, MultiPartParserError, parse_header,\n+    FILE, MultiPartParser, MultiPartParserError, Parser, parse_header,\n )\n from django.test import SimpleTestCase, TestCase, client, override_settings\n \n@@ -435,6 +436,38 @@ def test_broken_custom_upload_handler(self):\n             with self.assertRaisesMessage(AttributeError, msg):\n                 self.client.post('/quota/broken/', {'f': file})\n \n+    def test_stop_upload_temporary_file_handler(self):\n+        with tempfile.NamedTemporaryFile() as temp_file:\n+            temp_file.write(b'a')\n+            temp_file.seek(0)\n+            response = self.client.post('/temp_file/stop_upload/', {'file': temp_file})\n+            temp_path = response.json()['temp_path']\n+            self.assertIs(os.path.exists(temp_path), False)\n+\n+    def test_upload_interrupted_temporary_file_handler(self):\n+        # Simulate an interrupted upload by omitting the closing boundary.\n+        class MockedParser(Parser):\n+            def __iter__(self):\n+                for item in super().__iter__():\n+                    item_type, meta_data, field_stream = item\n+                    yield item_type, meta_data, field_stream\n+                    if item_type == FILE:\n+                        return\n+\n+        with tempfile.NamedTemporaryFile() as temp_file:\n+            temp_file.write(b'a')\n+            temp_file.seek(0)\n+            with mock.patch(\n+                'django.http.multipartparser.Parser',\n+                MockedParser,\n+            ):\n+                response = self.client.post(\n+                    '/temp_file/upload_interrupted/',\n+                    {'file': temp_file},\n+                )\n+            temp_path = response.json()['temp_path']\n+            self.assertIs(os.path.exists(temp_path), False)\n+\n     def test_fileupload_getlist(self):\n         file = tempfile.NamedTemporaryFile\n         with file() as file1, file() as file2, file() as file2a:\ndiff --git a/tests/file_uploads/uploadhandler.py b/tests/file_uploads/uploadhandler.py\n--- a/tests/file_uploads/uploadhandler.py\n+++ b/tests/file_uploads/uploadhandler.py\n@@ -2,7 +2,9 @@\n Upload handlers to test the upload API.\n \"\"\"\n \n-from django.core.files.uploadhandler import FileUploadHandler, StopUpload\n+from django.core.files.uploadhandler import (\n+    FileUploadHandler, StopUpload, TemporaryFileUploadHandler,\n+)\n \n \n class QuotaUploadHandler(FileUploadHandler):\n@@ -27,6 +29,12 @@ def file_complete(self, file_size):\n         return None\n \n \n+class StopUploadTemporaryFileHandler(TemporaryFileUploadHandler):\n+    \"\"\"A handler that raises a StopUpload exception.\"\"\"\n+    def receive_data_chunk(self, raw_data, start):\n+        raise StopUpload()\n+\n+\n class CustomUploadError(Exception):\n     pass\n \ndiff --git a/tests/file_uploads/urls.py b/tests/file_uploads/urls.py\n--- a/tests/file_uploads/urls.py\n+++ b/tests/file_uploads/urls.py\n@@ -13,6 +13,8 @@\n     path('quota/broken/', views.file_upload_quota_broken),\n     path('getlist_count/', views.file_upload_getlist_count),\n     path('upload_errors/', views.file_upload_errors),\n+    path('temp_file/stop_upload/', views.file_stop_upload_temporary_file),\n+    path('temp_file/upload_interrupted/', views.file_upload_interrupted_temporary_file),\n     path('filename_case/', views.file_upload_filename_case_view),\n     re_path(r'^fd_closing/(?P<access>t|f)/$', views.file_upload_fd_closing),\n ]\ndiff --git a/tests/file_uploads/views.py b/tests/file_uploads/views.py\n--- a/tests/file_uploads/views.py\n+++ b/tests/file_uploads/views.py\n@@ -2,11 +2,14 @@\n import os\n \n from django.core.files.uploadedfile import UploadedFile\n+from django.core.files.uploadhandler import TemporaryFileUploadHandler\n from django.http import HttpResponse, HttpResponseServerError, JsonResponse\n \n from .models import FileModel\n from .tests import UNICODE_FILENAME, UPLOAD_TO\n-from .uploadhandler import ErroringUploadHandler, QuotaUploadHandler\n+from .uploadhandler import (\n+    ErroringUploadHandler, QuotaUploadHandler, StopUploadTemporaryFileHandler,\n+)\n \n \n def file_upload_view(request):\n@@ -101,6 +104,24 @@ def file_upload_quota_broken(request):\n     return response\n \n \n+def file_stop_upload_temporary_file(request):\n+    request.upload_handlers.insert(0, StopUploadTemporaryFileHandler())\n+    request.upload_handlers.pop(2)\n+    request.FILES  # Trigger file parsing.\n+    return JsonResponse(\n+        {'temp_path': request.upload_handlers[0].file.temporary_file_path()},\n+    )\n+\n+\n+def file_upload_interrupted_temporary_file(request):\n+    request.upload_handlers.insert(0, TemporaryFileUploadHandler())\n+    request.upload_handlers.pop(2)\n+    request.FILES  # Trigger file parsing.\n+    return JsonResponse(\n+        {'temp_path': request.upload_handlers[0].file.temporary_file_path()},\n+    )\n+\n+\n def file_upload_getlist_count(request):\n     \"\"\"\n     Check the .getlist() function to ensure we receive the correct number of files.\n",
  "problem_statement": "Temporary files do not get deleted on canceled upload request.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nTemporary files do not get deleted when upload (request) is canceled by client (e.g. browser is closed before upload is finished).\n",
  "hints_text": "Reproduced at ed880d92b50c641c3e7f6e8ce5741085ffe1f8fb with django.core.files.uploadhandler.TemporaryFileUploadHandler.\nI am analysing a bit the code to deal with uploads. I have noticed that file_complete method is never called if upload is interrupted. Now, since content lenght seems to be unreliable (in my tests is always 0) I am thinking how to solve this issue in a clean way. One of the option I am thinking about is to add a new flag to TemporaryFileUploadHandler that will be set to True within file_complete and having some cleanup code within upload_complete that will check if the flag is True or False and will delete the incomplete file. Does this sound right?\nDoes this have a PR merged? If not can I look into this? I want to get started with contributing to Django for a while now, but I haven't been able to do so. Also, could someone please tell me if this ticket is easy enough for a beginner to resolve?\nHi Sanskar. There's no patch. You can look into Mattia's suggestion to see if it makes sense.\nâ€‹PR\nAll tests run on my machine (macOS) but the CI test on Windows fails because of a PermissionError, due to the temporary file being used by some other process. Is there any possible fix for this on Windows? Or should I just alter my patch to handle such os errors and label this patch as POSIX only?",
  "created_at": "2020-08-26T12:07:10Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_upload_interrupted_temporary_file_handler (file_uploads.tests.FileUploadTests)\"]",
  "PASS_TO_PASS": "[\"test_bad_type_content_length (file_uploads.tests.MultiParserTests)\", \"test_empty_upload_handlers (file_uploads.tests.MultiParserTests)\", \"test_invalid_content_type (file_uploads.tests.MultiParserTests)\", \"test_negative_content_length (file_uploads.tests.MultiParserTests)\", \"test_rfc2231_parsing (file_uploads.tests.MultiParserTests)\", \"test_rfc2231_wrong_title (file_uploads.tests.MultiParserTests)\", \"test_not_a_directory (file_uploads.tests.DirectoryCreationTests)\", \"test_base64_upload (file_uploads.tests.FileUploadTests)\", \"test_big_base64_newlines_upload (file_uploads.tests.FileUploadTests)\", \"test_big_base64_upload (file_uploads.tests.FileUploadTests)\", \"test_blank_filenames (file_uploads.tests.FileUploadTests)\", \"test_broken_custom_upload_handler (file_uploads.tests.FileUploadTests)\", \"Uploaded files may have content type parameters available.\", \"test_custom_upload_handler (file_uploads.tests.FileUploadTests)\", \"Uploaded file names should be sanitized before ever reaching the view.\", \"test_empty_multipart_handled_gracefully (file_uploads.tests.FileUploadTests)\", \"test_file_content (file_uploads.tests.FileUploadTests)\", \"test_file_error_blocking (file_uploads.tests.FileUploadTests)\", \"test_filename_case_preservation (file_uploads.tests.FileUploadTests)\", \"File names over 256 characters (dangerous on some platforms) get fixed up.\", \"test_fileupload_getlist (file_uploads.tests.FileUploadTests)\", \"test_fileuploads_closed_at_request_end (file_uploads.tests.FileUploadTests)\", \"test_large_upload (file_uploads.tests.FileUploadTests)\", \"test_no_parsing_triggered_by_fd_closing (file_uploads.tests.FileUploadTests)\", \"test_simple_upload (file_uploads.tests.FileUploadTests)\", \"test_stop_upload_temporary_file_handler (file_uploads.tests.FileUploadTests)\", \"test_truncated_multipart_handled_gracefully (file_uploads.tests.FileUploadTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.655029",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}