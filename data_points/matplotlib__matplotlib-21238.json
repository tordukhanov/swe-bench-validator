{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-21238",
  "base_commit": "8a8dd9093d381500555bccf46fc5d46b42d132ec",
  "patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -167,7 +167,7 @@ def __init__(self):\n         # Normally, artist classes need to be queried for mouseover info if and\n         # only if they override get_cursor_data.\n         self._mouseover = type(self).get_cursor_data != Artist.get_cursor_data\n-        self._callbacks = cbook.CallbackRegistry()\n+        self._callbacks = cbook.CallbackRegistry(signals=[\"pchanged\"])\n         try:\n             self.axes = None\n         except AttributeError:\ndiff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1199,7 +1199,8 @@ def cla(self):\n             spine.clear()\n \n         self.ignore_existing_data_limits = True\n-        self.callbacks = cbook.CallbackRegistry()\n+        self.callbacks = cbook.CallbackRegistry(\n+            signals=[\"xlim_changed\", \"ylim_changed\", \"zlim_changed\"])\n \n         if self._sharex is not None:\n             self.sharex(self._sharex)\ndiff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -655,7 +655,8 @@ def __init__(self, axes, pickradius=15):\n         self.axes = axes\n         self.major = Ticker()\n         self.minor = Ticker()\n-        self.callbacks = cbook.CallbackRegistry()\n+        self.callbacks = cbook.CallbackRegistry(\n+            signals=[\"units\", \"units finalize\"])\n \n         self._autolabelpos = True\n \n@@ -806,7 +807,8 @@ def clear(self):\n         self._set_scale('linear')\n \n         # Clear the callback registry for this axis, or it may \"leak\"\n-        self.callbacks = cbook.CallbackRegistry()\n+        self.callbacks = cbook.CallbackRegistry(\n+            signals=[\"units\", \"units finalize\"])\n \n         # whether the grids are on\n         self._major_tick_kw['gridOn'] = (\ndiff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -175,13 +175,20 @@ class CallbackRegistry:\n        The default handler prints the exception (with `traceback.print_exc`) if\n        an interactive event loop is running; it re-raises the exception if no\n        interactive event loop is running.\n+\n+    signals : list, optional\n+        If not None, *signals* is a list of signals that this registry handles:\n+        attempting to `process` or to `connect` to a signal not in the list\n+        throws a `ValueError`.  The default, None, does not restrict the\n+        handled signals.\n     \"\"\"\n \n     # We maintain two mappings:\n     #   callbacks: signal -> {cid -> weakref-to-callback}\n     #   _func_cid_map: signal -> {weakref-to-callback -> cid}\n \n-    def __init__(self, exception_handler=_exception_printer):\n+    def __init__(self, exception_handler=_exception_printer, *, signals=None):\n+        self._signals = None if signals is None else list(signals)  # Copy it.\n         self.exception_handler = exception_handler\n         self.callbacks = {}\n         self._cid_gen = itertools.count()\n@@ -217,6 +224,8 @@ def connect(self, signal, func):\n         if signal == \"units finalize\":\n             _api.warn_deprecated(\n                 \"3.5\", name=signal, obj_type=\"signal\", alternative=\"units\")\n+        if self._signals is not None:\n+            _api.check_in_list(self._signals, signal=signal)\n         self._func_cid_map.setdefault(signal, {})\n         proxy = _weak_or_strong_ref(func, self._remove_proxy)\n         if proxy in self._func_cid_map[signal]:\n@@ -280,6 +289,8 @@ def process(self, s, *args, **kwargs):\n         All of the functions registered to receive callbacks on *s* will be\n         called with ``*args`` and ``**kwargs``.\n         \"\"\"\n+        if self._signals is not None:\n+            _api.check_in_list(self._signals, signal=s)\n         for cid, ref in list(self.callbacks.get(s, {}).items()):\n             func = ref()\n             if func is not None:\ndiff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -359,7 +359,7 @@ def __init__(self, norm=None, cmap=None):\n         self.set_cmap(cmap)  # The Colormap instance of this ScalarMappable.\n         #: The last colorbar associated with this ScalarMappable. May be None.\n         self.colorbar = None\n-        self.callbacks = cbook.CallbackRegistry()\n+        self.callbacks = cbook.CallbackRegistry(signals=[\"changed\"])\n \n     callbacksSM = _api.deprecated(\"3.5\", alternative=\"callbacks\")(\n         property(lambda self: self.callbacks))\ndiff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1132,7 +1132,7 @@ def __init__(self, vmin=None, vmax=None, clip=False):\n         self._vmax = _sanitize_extrema(vmax)\n         self._clip = clip\n         self._scale = None\n-        self.callbacks = cbook.CallbackRegistry()\n+        self.callbacks = cbook.CallbackRegistry(signals=[\"changed\"])\n \n     @property\n     def vmin(self):\ndiff --git a/lib/matplotlib/container.py b/lib/matplotlib/container.py\n--- a/lib/matplotlib/container.py\n+++ b/lib/matplotlib/container.py\n@@ -18,7 +18,7 @@ def __new__(cls, *args, **kwargs):\n         return tuple.__new__(cls, args[0])\n \n     def __init__(self, kl, label=None):\n-        self._callbacks = cbook.CallbackRegistry()\n+        self._callbacks = cbook.CallbackRegistry(signals=[\"pchanged\"])\n         self._remove_method = None\n         self.set_label(label)\n \ndiff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2249,11 +2249,12 @@ def __init__(self,\n             else:\n                 _api.check_in_list(['constrained', 'tight'], layout=layout)\n \n-        self.callbacks = cbook.CallbackRegistry()\n+        self.callbacks = cbook.CallbackRegistry(signals=[\"dpi_changed\"])\n         # Callbacks traditionally associated with the canvas (and exposed with\n         # a proxy property), but that actually need to be on the figure for\n         # pickling.\n-        self._canvas_callbacks = cbook.CallbackRegistry()\n+        self._canvas_callbacks = cbook.CallbackRegistry(\n+            signals=FigureCanvasBase.events)\n         self._button_pick_id = self._canvas_callbacks.connect(\n             'button_press_event', lambda event: self.canvas.pick(event))\n         self._scroll_pick_id = self._canvas_callbacks.connect(\ndiff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -183,7 +183,7 @@ def __init__(self, ax, label, image=None,\n                              horizontalalignment='center',\n                              transform=ax.transAxes)\n \n-        self._observers = cbook.CallbackRegistry()\n+        self._observers = cbook.CallbackRegistry(signals=[\"clicked\"])\n \n         self.connect_event('button_press_event', self._click)\n         self.connect_event('button_release_event', self._release)\n@@ -275,7 +275,7 @@ def __init__(self, ax, orientation, closedmin, closedmax,\n         self.connect_event(\"button_release_event\", self._update)\n         if dragging:\n             self.connect_event(\"motion_notify_event\", self._update)\n-        self._observers = cbook.CallbackRegistry()\n+        self._observers = cbook.CallbackRegistry(signals=[\"changed\"])\n \n     def _stepped_value(self, val):\n         \"\"\"Return *val* coerced to closest number in the ``valstep`` grid.\"\"\"\n@@ -1031,7 +1031,7 @@ def __init__(self, ax, labels, actives=None):\n \n         self.connect_event('button_press_event', self._clicked)\n \n-        self._observers = cbook.CallbackRegistry()\n+        self._observers = cbook.CallbackRegistry(signals=[\"clicked\"])\n \n     def _clicked(self, event):\n         if self.ignore(event) or event.button != 1 or event.inaxes != self.ax:\n@@ -1160,7 +1160,7 @@ def __init__(self, ax, label, initial='',\n             verticalalignment='center', horizontalalignment=textalignment,\n             parse_math=False)\n \n-        self._observers = cbook.CallbackRegistry()\n+        self._observers = cbook.CallbackRegistry(signals=[\"change\", \"submit\"])\n \n         ax.set(\n             xlim=(0, 1), ylim=(0, 1),  # s.t. cursor appears from first click.\n@@ -1447,7 +1447,7 @@ def __init__(self, ax, labels, active=0, activecolor='blue'):\n \n         self.connect_event('button_press_event', self._clicked)\n \n-        self._observers = cbook.CallbackRegistry()\n+        self._observers = cbook.CallbackRegistry(signals=[\"clicked\"])\n \n     cnt = _api.deprecated(\"3.4\")(property(  # Not real, but close enough.\n         lambda self: len(self._observers.callbacks['clicked'])))\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_cbook.py b/lib/matplotlib/tests/test_cbook.py\n--- a/lib/matplotlib/tests/test_cbook.py\n+++ b/lib/matplotlib/tests/test_cbook.py\n@@ -363,6 +363,19 @@ def test_callbackregistry_custom_exception_handler(monkeypatch, cb, excp):\n         cb.process('foo')\n \n \n+def test_callbackregistry_signals():\n+    cr = cbook.CallbackRegistry(signals=[\"foo\"])\n+    results = []\n+    def cb(x): results.append(x)\n+    cr.connect(\"foo\", cb)\n+    with pytest.raises(ValueError):\n+        cr.connect(\"bar\", cb)\n+    cr.process(\"foo\", 1)\n+    with pytest.raises(ValueError):\n+        cr.process(\"bar\", 1)\n+    assert results == [1]\n+\n+\n def test_callbackregistry_blocking():\n     # Needs an exception handler for interactive testing environments\n     # that would only print this out instead of raising the exception\n",
  "problem_statement": "mpl_connect silently does nothing when passed an invalid event type string\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\nIf `fig.canvas.mpl_connect` is passed an invalid event type string, it silently does nothing. I think there should at least be a warning (maybe an error?)\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\n**Code for reproduction**\r\n\r\n<!--A minimum code snippet required to reproduce the bug, also minimizing the number of dependencies required-->\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax = plt.subplots()\r\ndef onclick(event):\r\n    print('Event!')\r\ncid = fig.canvas.mpl_connect('invalid_event_string', onclick)\r\nplt.show()\r\n```\r\n\r\n**Actual outcome**\r\n\r\nClicking around or doing or trying to trigger `onclick()` does nothing.\r\n\r\n**Expected outcome**\r\n\r\nI would expect a warning if 'invalid_event_string' isn't one of the strings listed at http://matplotlib.org/devdocs/api/backend_bases_api.html?highlight=mpl_connect#matplotlib.backend_bases.FigureCanvasBase.mpl_connect\r\n\r\n**Matplotlib version**\r\n  * Matplotlib Version: master installed from source using pip\r\n\n",
  "hints_text": "Adding a warning might be noisier than useful as events get connected and\ndisconnected all the time. We should see if we are regularly firing events\nafter disconnects or not. But I can see how this could be useful for\ndebugging.\n\nOn Jul 4, 2017 11:32 AM, \"David Stansby\" <notifications@github.com> wrote:\n\n> Bug report\n>\n> If fig.canvas.mpl_connect is passed an invalid event type string, it\n> silently does nothing. I think there should at least be a warning (maybe an\n> error?)\n>\n> *Code for reproduction*\n>\n> import matplotlib.pyplot as plt\n>\n> fig, ax = plt.subplots()def onclick(event):\n>     print('Event!')\n> cid = fig.canvas.mpl_connect('invalid_event_string', onclick)\n> plt.show()\n>\n> *Actual outcome*\n>\n> Clicking around or doing or trying to trigger onclick() does nothing.\n>\n> *Expected outcome*\n>\n> I would expect a warning if 'invalid_event_string' isn't one of the\n> strings listed at http://matplotlib.org/devdocs/\n> api/backend_bases_api.html?highlight=mpl_connect#matplotlib.backend_bases.\n> FigureCanvasBase.mpl_connect\n>\n> *Matplotlib version*\n>\n>    - Matplotlib Version: master installed from source using pip\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/matplotlib/matplotlib/issues/8839>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AARy-JNEYD1iLc19seb4BxF2Op2fEgu_ks5sKlsMgaJpZM4ONfXo>\n> .\n>\n\nThe callback registries do not know what keys they are going to get (which I think is a feature!), but adding an optional set of expected keys to the registry init + warning or error on invalid keys is a reasonable idea.\nNo, I was thinking more along the lines of issuing a warning for unknown\nevents on the emit call. Although, now that I think of it, that wouldn't\nhelp for connecting to built-in events.\n\nOn Jul 5, 2017 4:03 PM, \"Thomas A Caswell\" <notifications@github.com> wrote:\n\n> The callback registries do not know what keys they are going to get (which\n> I think is a feature!), but adding an optional set of expected keys to the\n> registry init + warning or error on invalid keys is a reasonable idea.\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/matplotlib/matplotlib/issues/8839#issuecomment-313211155>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AARy-HgcXt7ANz0Pgj2RSB75Q-EQMJnmks5sK-wkgaJpZM4ONfXo>\n> .\n>\n",
  "created_at": "2021-09-30T22:10:17Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_signals\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_cbook.py::Test_delete_masked_points::test_bad_first_arg\", \"lib/matplotlib/tests/test_cbook.py::Test_delete_masked_points::test_string_seq\", \"lib/matplotlib/tests/test_cbook.py::Test_delete_masked_points::test_datetime\", \"lib/matplotlib/tests/test_cbook.py::Test_delete_masked_points::test_rgba\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_bad_dims\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_boxplot_stats_autorange_false\", \"lib/matplotlib/tests/test_cbook.py::Test_callback_registry::test_pickling\", \"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_default_exception_handler\", \"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_custom_exception_handler[cb0-RuntimeError]\", \"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_custom_exception_handler[cb1-TestException]\", \"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_custom_exception_handler[cb2-ValueError]\", \"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_blocking\", \"lib/matplotlib/tests/test_cbook.py::test_sanitize_sequence\", \"lib/matplotlib/tests/test_cbook.py::test_normalize_kwargs_fail[inp0-kwargs_to_norm0]\", \"lib/matplotlib/tests/test_cbook.py::test_normalize_kwargs_fail[inp1-kwargs_to_norm1]\", \"lib/matplotlib/tests/test_cbook.py::test_normalize_kwargs_pass[None-expected0-kwargs_to_norm0]\", \"lib/matplotlib/tests/test_cbook.py::test_normalize_kwargs_pass[inp1-expected1-kwargs_to_norm1]\", \"lib/matplotlib/tests/test_cbook.py::test_normalize_kwargs_pass[inp2-expected2-kwargs_to_norm2]\", \"lib/matplotlib/tests/test_cbook.py::test_warn_external_frame_embedded_python\", \"lib/matplotlib/tests/test_cbook.py::test_to_prestep\", \"lib/matplotlib/tests/test_cbook.py::test_to_prestep_empty\", \"lib/matplotlib/tests/test_cbook.py::test_to_poststep\", \"lib/matplotlib/tests/test_cbook.py::test_to_poststep_empty\", \"lib/matplotlib/tests/test_cbook.py::test_to_midstep\", \"lib/matplotlib/tests/test_cbook.py::test_to_midstep_empty\", \"lib/matplotlib/tests/test_cbook.py::test_step_fails[args0]\", \"lib/matplotlib/tests/test_cbook.py::test_step_fails[args1]\", \"lib/matplotlib/tests/test_cbook.py::test_step_fails[args2]\", \"lib/matplotlib/tests/test_cbook.py::test_grouper\", \"lib/matplotlib/tests/test_cbook.py::test_grouper_private\", \"lib/matplotlib/tests/test_cbook.py::test_flatiter\", \"lib/matplotlib/tests/test_cbook.py::test_reshape2d\", \"lib/matplotlib/tests/test_cbook.py::test_reshape2d_pandas\", \"lib/matplotlib/tests/test_cbook.py::test_contiguous_regions\", \"lib/matplotlib/tests/test_cbook.py::test_safe_first_element_pandas_series\", \"lib/matplotlib/tests/test_cbook.py::test_warn_external\", \"lib/matplotlib/tests/test_cbook.py::test_array_patch_perimeters\", \"lib/matplotlib/tests/test_cbook.py::test_setattr_cm\", \"lib/matplotlib/tests/test_cbook.py::test_format_approx\"]",
  "environment_setup_commit": "f93c0a3dcb82feed0262d758626c90d4002685f3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.792265",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}