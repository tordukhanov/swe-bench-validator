{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-22098",
  "base_commit": "614b20371677c4c8d4d5912db15008bed85022ee",
  "patch": "diff --git a/sympy/functions/elementary/complexes.py b/sympy/functions/elementary/complexes.py\n--- a/sympy/functions/elementary/complexes.py\n+++ b/sympy/functions/elementary/complexes.py\n@@ -318,9 +318,10 @@ class sign(Function):\n     _singularities = True\n \n     def doit(self, **hints):\n-        if self.args[0].is_zero is False:\n+        s = super().doit()\n+        if s == self and self.args[0].is_zero is False:\n             return self.args[0] / Abs(self.args[0])\n-        return self\n+        return s\n \n     @classmethod\n     def eval(cls, arg):\ndiff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1049,6 +1049,14 @@ class EvaluateFalseTransformer(ast.NodeTransformer):\n         ast.BitAnd: 'And',\n         ast.BitXor: 'Not',\n     }\n+    functions = (\n+        'Abs', 'im', 're', 'sign', 'arg', 'conjugate',\n+        'acos', 'acot', 'acsc', 'asec', 'asin', 'atan',\n+        'acosh', 'acoth', 'acsch', 'asech', 'asinh', 'atanh',\n+        'cos', 'cot', 'csc', 'sec', 'sin', 'tan',\n+        'cosh', 'coth', 'csch', 'sech', 'sinh', 'tanh',\n+        'exp', 'ln', 'log', 'sqrt', 'cbrt',\n+    )\n \n     def flatten(self, args, func):\n         result = []\n@@ -1116,3 +1124,9 @@ def visit_BinOp(self, node):\n \n             return new_node\n         return node\n+\n+    def visit_Call(self, node):\n+        new_node = self.generic_visit(node)\n+        if isinstance(node.func, ast.Name) and node.func.id in self.functions:\n+            new_node.keywords.append(ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load())))\n+        return new_node\n",
  "test_patch": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -206,6 +206,8 @@ def test_sign():\n     assert sign(3*I) == I\n     assert sign(-3*I) == -I\n     assert sign(0) == 0\n+    assert sign(0, evaluate=False).doit() == 0\n+    assert sign(oo, evaluate=False).doit() == 1\n     assert sign(nan) is nan\n     assert sign(2 + 2*I).doit() == sqrt(2)*(2 + 2*I)/4\n     assert sign(2 + 3*I).simplify() == sign(2 + 3*I)\ndiff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -168,6 +168,22 @@ def test_recursive_evaluate_false_10560():\n         assert parse_expr(text, evaluate=False) == parse_expr(result, evaluate=False)\n \n \n+def test_function_evaluate_false():\n+    inputs = [\n+        'Abs(0)', 'im(0)', 're(0)', 'sign(0)', 'arg(0)', 'conjugate(0)',\n+        'acos(0)', 'acot(0)', 'acsc(0)', 'asec(0)', 'asin(0)', 'atan(0)',\n+        'acosh(0)', 'acoth(0)', 'acsch(0)', 'asech(0)', 'asinh(0)', 'atanh(0)',\n+        'cos(0)', 'cot(0)', 'csc(0)', 'sec(0)', 'sin(0)', 'tan(0)',\n+        'cosh(0)', 'coth(0)', 'csch(0)', 'sech(0)', 'sinh(0)', 'tanh(0)',\n+        'exp(0)', 'log(0)', 'sqrt(0)',\n+    ]\n+    for case in inputs:\n+        expr = parse_expr(case, evaluate=False)\n+        assert case == str(expr) != str(expr.doit())\n+    assert str(parse_expr('ln(0)', evaluate=False)) == 'log(0)'\n+    assert str(parse_expr('cbrt(0)', evaluate=False)) == '0**(1/3)'\n+\n+\n def test_issue_10773():\n     inputs = {\n     '-10/5': '(-10)/5',\n",
  "problem_statement": "parse_expr partially evaluates under sqrt with evaluate=False\nPython 3.8.5 (default, Jul 28 2020, 12:59:40)\r\n[GCC 9.3.0] on linux\r\nwith sympy v1.7\r\n\r\n```python\r\n>>> import sympy\r\n>>> sympy.parse_expr(\"2+2\", evaluate=True)\r\n4\r\n>>> sympy.parse_expr(\"2+2\", evaluate=False)\r\n2 + 2\r\n>>> sympy.parse_expr(\"sqrt(2+2)\", evaluate=False)\r\nsqrt(2 + 2)\r\n>>> sympy.parse_expr(\"sqrt(2*2)\", evaluate=False)\r\n2\r\n>>> sympy.parse_expr(\"sqrt(2/2)\", evaluate=False)\r\n1\r\n>>> sympy.parse_expr(\"sin(2/2)\", evaluate=False)\r\nsin(2/2)\r\n>>> sympy.parse_expr(\"sin(2*2)\", evaluate=False)\r\nsin(2*2)\r\n>>> sympy.parse_expr(\"sin(2+2)\", evaluate=False)\r\nsin(2 + 2)\r\n```\r\n\r\nI was expecting to get:\r\n```python\r\n>>> sympy.parse_expr(\"sqrt(2*2)\", evaluate=False)\r\nsqrt(2*2)\r\n>>> sympy.parse_expr(\"sqrt(2/2)\", evaluate=False)\r\nsqrt(2/2)\r\n```\r\n\r\n`evaluate=False` does not seem to propagate correctly, since the used sympy functions support `evaluate=False` on their own:\r\n\r\n```python\r\n>>> sympy.sqrt(sympy.Mul(2,2, evaluate=False), evaluate=False)\r\nsqrt(2*2)\r\n>>> sympy.parse_expr(\"sqrt(2*2, evaluate=False)\", evaluate=False)\r\nsqrt(2*2)\r\n```\n",
  "hints_text": "I can confirm this in 1.7 and also in previous versions so this is not a new bug.\r\n\r\nIt also happens with `sqrt(4)`:\r\n```python\r\nIn [1]: sqrt(4, evaluate=False)                                                                                                   \r\nOut[1]: √4\r\n\r\nIn [2]: parse_expr(\"sqrt(4)\", evaluate=False)                                                                                     \r\nOut[2]: 2\r\n```\r\n\r\nI think maybe it happens with all functions:\r\n```python\r\nIn [5]: parse_expr(\"exp(0)\", evaluate=False)                                                                                      \r\nOut[5]: 1\r\n\r\nIn [6]: exp(0, evaluate=False)                                                                                                    \r\nOut[6]: \r\n 0\r\nℯ \r\n```\r\n\r\nIt looks like the evaluatefalse method only works for a few basic operators:\r\nhttps://github.com/sympy/sympy/blob/e5c901e5f30bcc9bd0cb91f03d0696815b96bd1a/sympy/parsing/sympy_parser.py#L1021-L1031\n@oscarbenjamin Thanks for the quick reply! \r\n\r\nHow come that:\r\n\r\n```python\r\n>>> sympy.parse_expr(\"sin(12/6)\", evaluate=False)\r\nsin(12/6)\r\n```\r\n\r\nAs there is no custom `ast.Name` visitor on `EvaluateFalseTransformer` I'd expect that it yields  `sin(2)` as in case for sqrt\r\n\r\n```python\r\n>>> sympy.parse_expr(\"sqrt(12/6)\", evaluate=False)\r\nsqrt(2)\r\n```\r\n\r\n\r\n\nI think that when a `Pow` evaluates it forces the evaluation of its args.\nI encounted similar problems w/ Matrix values, outside of parsing:\r\n\r\n```\r\n$ python\r\nPython 3.9.1 (default, Jan 20 2021, 00:00:00) \r\n[GCC 10.2.1 20201125 (Red Hat 10.2.1-9)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from sympy import *\r\n>>> from sympy import __version__\r\n>>> __version__\r\n'1.7.1'\r\n\r\n>>> Mul(3, 4, evaluate=False)  # As expected, multiply is not evaluated.\r\n3*4\r\n\r\n>>> Mul(3, Matrix([[4]]), evaluate=False)  # Multiply is unexpectedly evaluated.\r\nMatrix([[12]])\r\n```\r\n\r\nThis problem does not occur with `Add`:\r\n\r\n```\r\n>>> Add(3, 4, evaluate=False)\r\n3 + 4\r\n\r\n>>> Add(3, Matrix([[4]]), evaluate=False)\r\n3 + Matrix([[4]])\r\n```\n> I encounted similar problems w/ Matrix values, outside of parsing:\r\n\r\nThat's a different problem",
  "created_at": "2021-09-14T04:00:05Z",
  "version": "1.10",
  "FAIL_TO_PASS": "[\"test_sign\", \"test_function_evaluate_false\"]",
  "PASS_TO_PASS": "[\"test_re\", \"test_im\", \"test_as_real_imag\", \"test_Abs\", \"test_Abs_rewrite\", \"test_Abs_real\", \"test_Abs_properties\", \"test_abs\", \"test_arg\", \"test_arg_rewrite\", \"test_adjoint\", \"test_conjugate\", \"test_conjugate_transpose\", \"test_transpose\", \"test_polarify\", \"test_unpolarify\", \"test_issue_4035\", \"test_issue_3206\", \"test_issue_4754_derivative_conjugate\", \"test_derivatives_issue_4757\", \"test_issue_11413\", \"test_periodic_argument\", \"test_principal_branch\", \"test_issue_14216\", \"test_issue_14238\", \"test_zero_assumptions\", \"test_sympy_parser\", \"test_rationalize\", \"test_factorial_fail\", \"test_repeated_fail\", \"test_repeated_dot_only\", \"test_local_dict\", \"test_local_dict_split_implmult\", \"test_local_dict_symbol_to_fcn\", \"test_global_dict\", \"test_issue_2515\", \"test_issue_7663\", \"test_recursive_evaluate_false_10560\", \"test_issue_10773\", \"test_split_symbols\", \"test_split_symbols_function\", \"test_functional_exponent\", \"test_match_parentheses_implicit_multiplication\", \"test_convert_equals_signs\", \"test_parse_function_issue_3539\", \"test_split_symbols_numeric\", \"test_unicode_names\", \"test_python3_features\"]",
  "environment_setup_commit": "fd40404e72921b9e52a5f9582246e4a6cd96c431",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.148991",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}