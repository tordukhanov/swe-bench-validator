{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-23573",
  "base_commit": "39c997ee9dc772838ec8e671e9820fb0a070e060",
  "patch": "diff --git a/lib/matplotlib/_constrained_layout.py b/lib/matplotlib/_constrained_layout.py\n--- a/lib/matplotlib/_constrained_layout.py\n+++ b/lib/matplotlib/_constrained_layout.py\n@@ -187,8 +187,8 @@ def make_layoutgrids(fig, layoutgrids, rect=(0, 0, 1, 1)):\n \n     # for each axes at the local level add its gridspec:\n     for ax in fig._localaxes:\n-        if hasattr(ax, 'get_subplotspec'):\n-            gs = ax.get_subplotspec().get_gridspec()\n+        gs = ax.get_gridspec()\n+        if gs is not None:\n             layoutgrids = make_layoutgrids_gs(layoutgrids, gs)\n \n     return layoutgrids\n@@ -248,24 +248,22 @@ def check_no_collapsed_axes(layoutgrids, fig):\n         ok = check_no_collapsed_axes(layoutgrids, sfig)\n         if not ok:\n             return False\n-\n     for ax in fig.axes:\n-        if hasattr(ax, 'get_subplotspec'):\n-            gs = ax.get_subplotspec().get_gridspec()\n-            if gs in layoutgrids:\n-                lg = layoutgrids[gs]\n-                for i in range(gs.nrows):\n-                    for j in range(gs.ncols):\n-                        bb = lg.get_inner_bbox(i, j)\n-                        if bb.width <= 0 or bb.height <= 0:\n-                            return False\n+        gs = ax.get_gridspec()\n+        if gs in layoutgrids:  # also implies gs is not None.\n+            lg = layoutgrids[gs]\n+            for i in range(gs.nrows):\n+                for j in range(gs.ncols):\n+                    bb = lg.get_inner_bbox(i, j)\n+                    if bb.width <= 0 or bb.height <= 0:\n+                        return False\n     return True\n \n \n def compress_fixed_aspect(layoutgrids, fig):\n     gs = None\n     for ax in fig.axes:\n-        if not hasattr(ax, 'get_subplotspec'):\n+        if ax.get_subplotspec() is None:\n             continue\n         ax.apply_aspect()\n         sub = ax.get_subplotspec()\n@@ -357,7 +355,7 @@ def make_layout_margins(layoutgrids, fig, renderer, *, w_pad=0, h_pad=0,\n         layoutgrids[sfig].parent.edit_outer_margin_mins(margins, ss)\n \n     for ax in fig._localaxes:\n-        if not hasattr(ax, 'get_subplotspec') or not ax.get_in_layout():\n+        if not ax.get_subplotspec() or not ax.get_in_layout():\n             continue\n \n         ss = ax.get_subplotspec()\n@@ -488,8 +486,8 @@ def match_submerged_margins(layoutgrids, fig):\n     for sfig in fig.subfigs:\n         match_submerged_margins(layoutgrids, sfig)\n \n-    axs = [a for a in fig.get_axes() if (hasattr(a, 'get_subplotspec')\n-                                         and a.get_in_layout())]\n+    axs = [a for a in fig.get_axes()\n+           if a.get_subplotspec() is not None and a.get_in_layout()]\n \n     for ax1 in axs:\n         ss1 = ax1.get_subplotspec()\n@@ -620,7 +618,7 @@ def reposition_axes(layoutgrids, fig, renderer, *,\n                         wspace=wspace, hspace=hspace)\n \n     for ax in fig._localaxes:\n-        if not hasattr(ax, 'get_subplotspec') or not ax.get_in_layout():\n+        if ax.get_subplotspec() is None or not ax.get_in_layout():\n             continue\n \n         # grid bbox is in Figure coordinates, but we specify in panel\n@@ -742,10 +740,9 @@ def reset_margins(layoutgrids, fig):\n     for sfig in fig.subfigs:\n         reset_margins(layoutgrids, sfig)\n     for ax in fig.axes:\n-        if hasattr(ax, 'get_subplotspec') and ax.get_in_layout():\n-            ss = ax.get_subplotspec()\n-            gs = ss.get_gridspec()\n-            if gs in layoutgrids:\n+        if ax.get_in_layout():\n+            gs = ax.get_gridspec()\n+            if gs in layoutgrids:  # also implies gs is not None.\n                 layoutgrids[gs].reset_margins()\n     layoutgrids[fig].reset_margins()\n \ndiff --git a/lib/matplotlib/axes/__init__.py b/lib/matplotlib/axes/__init__.py\n--- a/lib/matplotlib/axes/__init__.py\n+++ b/lib/matplotlib/axes/__init__.py\n@@ -1,2 +1,18 @@\n-from ._subplots import *\n+from . import _base\n from ._axes import *\n+\n+# Backcompat.\n+from ._axes import Axes as Subplot\n+\n+\n+class _SubplotBaseMeta(type):\n+    def __instancecheck__(self, obj):\n+        return (isinstance(obj, _base._AxesBase)\n+                and obj.get_subplotspec() is not None)\n+\n+\n+class SubplotBase(metaclass=_SubplotBaseMeta):\n+    pass\n+\n+\n+def subplot_class_factory(cls): return cls\ndiff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1,4 +1,4 @@\n-from collections.abc import MutableSequence\n+from collections.abc import Iterable, MutableSequence\n from contextlib import ExitStack\n import functools\n import inspect\n@@ -18,6 +18,7 @@\n import matplotlib.collections as mcoll\n import matplotlib.colors as mcolors\n import matplotlib.font_manager as font_manager\n+from matplotlib.gridspec import SubplotSpec\n import matplotlib.image as mimage\n import matplotlib.lines as mlines\n import matplotlib.patches as mpatches\n@@ -569,8 +570,8 @@ def __str__(self):\n         return \"{0}({1[0]:g},{1[1]:g};{1[2]:g}x{1[3]:g})\".format(\n             type(self).__name__, self._position.bounds)\n \n-    def __init__(self, fig, rect,\n-                 *,\n+    def __init__(self, fig,\n+                 *args,\n                  facecolor=None,  # defaults to rc axes.facecolor\n                  frameon=True,\n                  sharex=None,  # use Axes instance's xaxis info\n@@ -589,9 +590,18 @@ def __init__(self, fig, rect,\n         fig : `~matplotlib.figure.Figure`\n             The Axes is built in the `.Figure` *fig*.\n \n-        rect : tuple (left, bottom, width, height).\n-            The Axes is built in the rectangle *rect*. *rect* is in\n-            `.Figure` coordinates.\n+        *args\n+            ``*args`` can be a single ``(left, bottom, width, height)``\n+            rectangle or a single `.Bbox`.  This specifies the rectangle (in\n+            figure coordinates) where the Axes is positioned.\n+\n+            ``*args`` can also consist of three numbers or a single three-digit\n+            number; in the latter case, the digits are considered as\n+            independent numbers.  The numbers are interpreted as ``(nrows,\n+            ncols, index)``: ``(nrows, ncols)`` specifies the size of an array\n+            of subplots, and ``index`` is the 1-based index of the subplot\n+            being created.  Finally, ``*args`` can also directly be a\n+            `.SubplotSpec` instance.\n \n         sharex, sharey : `~.axes.Axes`, optional\n             The x or y `~.matplotlib.axis` is shared with the x or\n@@ -616,10 +626,21 @@ def __init__(self, fig, rect,\n         \"\"\"\n \n         super().__init__()\n-        if isinstance(rect, mtransforms.Bbox):\n-            self._position = rect\n+        if \"rect\" in kwargs:\n+            if args:\n+                raise TypeError(\n+                    \"'rect' cannot be used together with positional arguments\")\n+            rect = kwargs.pop(\"rect\")\n+            _api.check_isinstance((mtransforms.Bbox, Iterable), rect=rect)\n+            args = (rect,)\n+        subplotspec = None\n+        if len(args) == 1 and isinstance(args[0], mtransforms.Bbox):\n+            self._position = args[0]\n+        elif len(args) == 1 and np.iterable(args[0]):\n+            self._position = mtransforms.Bbox.from_bounds(*args[0])\n         else:\n-            self._position = mtransforms.Bbox.from_bounds(*rect)\n+            self._position = self._originalPosition = mtransforms.Bbox.unit()\n+            subplotspec = SubplotSpec._from_subplot_args(fig, args)\n         if self._position.width < 0 or self._position.height < 0:\n             raise ValueError('Width and height specified must be non-negative')\n         self._originalPosition = self._position.frozen()\n@@ -632,8 +653,16 @@ def __init__(self, fig, rect,\n         self._sharey = sharey\n         self.set_label(label)\n         self.set_figure(fig)\n+        # The subplotspec needs to be set after the figure (so that\n+        # figure-level subplotpars are taken into account), but the figure\n+        # needs to be set after self._position is initialized.\n+        if subplotspec:\n+            self.set_subplotspec(subplotspec)\n+        else:\n+            self._subplotspec = None\n         self.set_box_aspect(box_aspect)\n         self._axes_locator = None  # Optionally set via update(kwargs).\n+\n         # placeholder for any colorbars added that use this Axes.\n         # (see colorbar.py):\n         self._colorbars = []\n@@ -737,6 +766,19 @@ def __repr__(self):\n                 fields += [f\"{name}label={axis.get_label().get_text()!r}\"]\n         return f\"<{self.__class__.__name__}: \" + \", \".join(fields) + \">\"\n \n+    def get_subplotspec(self):\n+        \"\"\"Return the `.SubplotSpec` associated with the subplot, or None.\"\"\"\n+        return self._subplotspec\n+\n+    def set_subplotspec(self, subplotspec):\n+        \"\"\"Set the `.SubplotSpec`. associated with the subplot.\"\"\"\n+        self._subplotspec = subplotspec\n+        self._set_position(subplotspec.get_position(self.figure))\n+\n+    def get_gridspec(self):\n+        \"\"\"Return the `.GridSpec` associated with the subplot, or None.\"\"\"\n+        return self._subplotspec.get_gridspec() if self._subplotspec else None\n+\n     @_api.delete_parameter(\"3.6\", \"args\")\n     @_api.delete_parameter(\"3.6\", \"kwargs\")\n     def get_window_extent(self, renderer=None, *args, **kwargs):\n@@ -4424,17 +4466,23 @@ def get_tightbbox(self, renderer=None, call_axes_locator=True,\n \n     def _make_twin_axes(self, *args, **kwargs):\n         \"\"\"Make a twinx Axes of self. This is used for twinx and twiny.\"\"\"\n-        # Typically, SubplotBase._make_twin_axes is called instead of this.\n         if 'sharex' in kwargs and 'sharey' in kwargs:\n-            raise ValueError(\"Twinned Axes may share only one axis\")\n-        ax2 = self.figure.add_axes(\n-            self.get_position(True), *args, **kwargs,\n-            axes_locator=_TransformedBoundsLocator(\n-                [0, 0, 1, 1], self.transAxes))\n+            # The following line is added in v2.2 to avoid breaking Seaborn,\n+            # which currently uses this internal API.\n+            if kwargs[\"sharex\"] is not self and kwargs[\"sharey\"] is not self:\n+                raise ValueError(\"Twinned Axes may share only one axis\")\n+        ss = self.get_subplotspec()\n+        if ss:\n+            twin = self.figure.add_subplot(ss, *args, **kwargs)\n+        else:\n+            twin = self.figure.add_axes(\n+                self.get_position(True), *args, **kwargs,\n+                axes_locator=_TransformedBoundsLocator(\n+                    [0, 0, 1, 1], self.transAxes))\n         self.set_adjustable('datalim')\n-        ax2.set_adjustable('datalim')\n-        self._twinned_axes.join(self, ax2)\n-        return ax2\n+        twin.set_adjustable('datalim')\n+        self._twinned_axes.join(self, twin)\n+        return twin\n \n     def twinx(self):\n         \"\"\"\n@@ -4502,3 +4550,56 @@ def get_shared_x_axes(self):\n     def get_shared_y_axes(self):\n         \"\"\"Return an immutable view on the shared y-axes Grouper.\"\"\"\n         return cbook.GrouperView(self._shared_axes[\"y\"])\n+\n+    def label_outer(self):\n+        \"\"\"\n+        Only show \"outer\" labels and tick labels.\n+\n+        x-labels are only kept for subplots on the last row (or first row, if\n+        labels are on the top side); y-labels only for subplots on the first\n+        column (or last column, if labels are on the right side).\n+        \"\"\"\n+        self._label_outer_xaxis(check_patch=False)\n+        self._label_outer_yaxis(check_patch=False)\n+\n+    def _label_outer_xaxis(self, *, check_patch):\n+        # see documentation in label_outer.\n+        if check_patch and not isinstance(self.patch, mpl.patches.Rectangle):\n+            return\n+        ss = self.get_subplotspec()\n+        if not ss:\n+            return\n+        label_position = self.xaxis.get_label_position()\n+        if not ss.is_first_row():  # Remove top label/ticklabels/offsettext.\n+            if label_position == \"top\":\n+                self.set_xlabel(\"\")\n+            self.xaxis.set_tick_params(which=\"both\", labeltop=False)\n+            if self.xaxis.offsetText.get_position()[1] == 1:\n+                self.xaxis.offsetText.set_visible(False)\n+        if not ss.is_last_row():  # Remove bottom label/ticklabels/offsettext.\n+            if label_position == \"bottom\":\n+                self.set_xlabel(\"\")\n+            self.xaxis.set_tick_params(which=\"both\", labelbottom=False)\n+            if self.xaxis.offsetText.get_position()[1] == 0:\n+                self.xaxis.offsetText.set_visible(False)\n+\n+    def _label_outer_yaxis(self, *, check_patch):\n+        # see documentation in label_outer.\n+        if check_patch and not isinstance(self.patch, mpl.patches.Rectangle):\n+            return\n+        ss = self.get_subplotspec()\n+        if not ss:\n+            return\n+        label_position = self.yaxis.get_label_position()\n+        if not ss.is_first_col():  # Remove left label/ticklabels/offsettext.\n+            if label_position == \"left\":\n+                self.set_ylabel(\"\")\n+            self.yaxis.set_tick_params(which=\"both\", labelleft=False)\n+            if self.yaxis.offsetText.get_position()[0] == 0:\n+                self.yaxis.offsetText.set_visible(False)\n+        if not ss.is_last_col():  # Remove right label/ticklabels/offsettext.\n+            if label_position == \"right\":\n+                self.set_ylabel(\"\")\n+            self.yaxis.set_tick_params(which=\"both\", labelright=False)\n+            if self.yaxis.offsetText.get_position()[0] == 1:\n+                self.yaxis.offsetText.set_visible(False)\ndiff --git a/lib/matplotlib/axes/_subplots.py b/lib/matplotlib/axes/_subplots.py\ndeleted file mode 100644\n--- a/lib/matplotlib/axes/_subplots.py\n+++ /dev/null\n@@ -1,116 +0,0 @@\n-import matplotlib as mpl\n-from matplotlib import cbook\n-from matplotlib.axes._axes import Axes\n-from matplotlib.gridspec import SubplotSpec\n-\n-\n-class SubplotBase:\n-    \"\"\"\n-    Base class for subplots, which are :class:`Axes` instances with\n-    additional methods to facilitate generating and manipulating a set\n-    of :class:`Axes` within a figure.\n-    \"\"\"\n-\n-    def __init__(self, fig, *args, **kwargs):\n-        \"\"\"\n-        Parameters\n-        ----------\n-        fig : `matplotlib.figure.Figure`\n-\n-        *args : tuple (*nrows*, *ncols*, *index*) or int\n-            The array of subplots in the figure has dimensions ``(nrows,\n-            ncols)``, and *index* is the index of the subplot being created.\n-            *index* starts at 1 in the upper left corner and increases to the\n-            right.\n-\n-            If *nrows*, *ncols*, and *index* are all single digit numbers, then\n-            *args* can be passed as a single 3-digit number (e.g. 234 for\n-            (2, 3, 4)).\n-\n-        **kwargs\n-            Keyword arguments are passed to the Axes (sub)class constructor.\n-        \"\"\"\n-        # _axes_class is set in the subplot_class_factory\n-        self._axes_class.__init__(self, fig, [0, 0, 1, 1], **kwargs)\n-        # This will also update the axes position.\n-        self.set_subplotspec(SubplotSpec._from_subplot_args(fig, args))\n-\n-    def get_subplotspec(self):\n-        \"\"\"Return the `.SubplotSpec` instance associated with the subplot.\"\"\"\n-        return self._subplotspec\n-\n-    def set_subplotspec(self, subplotspec):\n-        \"\"\"Set the `.SubplotSpec`. instance associated with the subplot.\"\"\"\n-        self._subplotspec = subplotspec\n-        self._set_position(subplotspec.get_position(self.figure))\n-\n-    def get_gridspec(self):\n-        \"\"\"Return the `.GridSpec` instance associated with the subplot.\"\"\"\n-        return self._subplotspec.get_gridspec()\n-\n-    def label_outer(self):\n-        \"\"\"\n-        Only show \"outer\" labels and tick labels.\n-\n-        x-labels are only kept for subplots on the last row (or first row, if\n-        labels are on the top side); y-labels only for subplots on the first\n-        column (or last column, if labels are on the right side).\n-        \"\"\"\n-        self._label_outer_xaxis(check_patch=False)\n-        self._label_outer_yaxis(check_patch=False)\n-\n-    def _label_outer_xaxis(self, *, check_patch):\n-        # see documentation in label_outer.\n-        if check_patch and not isinstance(self.patch, mpl.patches.Rectangle):\n-            return\n-        ss = self.get_subplotspec()\n-        label_position = self.xaxis.get_label_position()\n-        if not ss.is_first_row():  # Remove top label/ticklabels/offsettext.\n-            if label_position == \"top\":\n-                self.set_xlabel(\"\")\n-            self.xaxis.set_tick_params(which=\"both\", labeltop=False)\n-            if self.xaxis.offsetText.get_position()[1] == 1:\n-                self.xaxis.offsetText.set_visible(False)\n-        if not ss.is_last_row():  # Remove bottom label/ticklabels/offsettext.\n-            if label_position == \"bottom\":\n-                self.set_xlabel(\"\")\n-            self.xaxis.set_tick_params(which=\"both\", labelbottom=False)\n-            if self.xaxis.offsetText.get_position()[1] == 0:\n-                self.xaxis.offsetText.set_visible(False)\n-\n-    def _label_outer_yaxis(self, *, check_patch):\n-        # see documentation in label_outer.\n-        if check_patch and not isinstance(self.patch, mpl.patches.Rectangle):\n-            return\n-        ss = self.get_subplotspec()\n-        label_position = self.yaxis.get_label_position()\n-        if not ss.is_first_col():  # Remove left label/ticklabels/offsettext.\n-            if label_position == \"left\":\n-                self.set_ylabel(\"\")\n-            self.yaxis.set_tick_params(which=\"both\", labelleft=False)\n-            if self.yaxis.offsetText.get_position()[0] == 0:\n-                self.yaxis.offsetText.set_visible(False)\n-        if not ss.is_last_col():  # Remove right label/ticklabels/offsettext.\n-            if label_position == \"right\":\n-                self.set_ylabel(\"\")\n-            self.yaxis.set_tick_params(which=\"both\", labelright=False)\n-            if self.yaxis.offsetText.get_position()[0] == 1:\n-                self.yaxis.offsetText.set_visible(False)\n-\n-    def _make_twin_axes(self, *args, **kwargs):\n-        \"\"\"Make a twinx axes of self. This is used for twinx and twiny.\"\"\"\n-        if 'sharex' in kwargs and 'sharey' in kwargs:\n-            # The following line is added in v2.2 to avoid breaking Seaborn,\n-            # which currently uses this internal API.\n-            if kwargs[\"sharex\"] is not self and kwargs[\"sharey\"] is not self:\n-                raise ValueError(\"Twinned Axes may share only one axis\")\n-        twin = self.figure.add_subplot(self.get_subplotspec(), *args, **kwargs)\n-        self.set_adjustable('datalim')\n-        twin.set_adjustable('datalim')\n-        self._twinned_axes.join(self, twin)\n-        return twin\n-\n-\n-subplot_class_factory = cbook._make_class_factory(\n-    SubplotBase, \"{}Subplot\", \"_axes_class\")\n-Subplot = subplot_class_factory(Axes)  # Provided for backward compatibility.\ndiff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -188,12 +188,9 @@ def __call__(self, ax, renderer):\n \n     def get_subplotspec(self):\n         # make tight_layout happy..\n-        ss = getattr(self._cbar.ax, 'get_subplotspec', None)\n-        if ss is None:\n-            if not hasattr(self._orig_locator, \"get_subplotspec\"):\n-                return None\n-            ss = self._orig_locator.get_subplotspec\n-        return ss()\n+        return (\n+            self._cbar.ax.get_subplotspec()\n+            or getattr(self._orig_locator, \"get_subplotspec\", lambda: None)())\n \n \n @_docstring.interpd\n@@ -1460,23 +1457,19 @@ def make_axes(parents, location=None, orientation=None, fraction=0.15,\n def make_axes_gridspec(parent, *, location=None, orientation=None,\n                        fraction=0.15, shrink=1.0, aspect=20, **kwargs):\n     \"\"\"\n-    Create a `.SubplotBase` suitable for a colorbar.\n+    Create an `~.axes.Axes` suitable for a colorbar.\n \n     The axes is placed in the figure of the *parent* axes, by resizing and\n     repositioning *parent*.\n \n-    This function is similar to `.make_axes`. Primary differences are\n-\n-    - `.make_axes_gridspec` should only be used with a `.SubplotBase` parent.\n-\n-    - `.make_axes` creates an `~.axes.Axes`; `.make_axes_gridspec` creates a\n-      `.SubplotBase`.\n+    This function is similar to `.make_axes` and mostly compatible with it.\n+    Primary differences are\n \n+    - `.make_axes_gridspec` requires the *parent* to have a subplotspec.\n+    - `.make_axes` positions the axes in figure coordinates;\n+      `.make_axes_gridspec` positions it using a subplotspec.\n     - `.make_axes` updates the position of the parent.  `.make_axes_gridspec`\n-      replaces the ``grid_spec`` attribute of the parent with a new one.\n-\n-    While this function is meant to be compatible with `.make_axes`,\n-    there could be some minor differences.\n+      replaces the parent gridspec with a new one.\n \n     Parameters\n     ----------\n@@ -1486,7 +1479,7 @@ def make_axes_gridspec(parent, *, location=None, orientation=None,\n \n     Returns\n     -------\n-    cax : `~.axes.SubplotBase`\n+    cax : `~.axes.Axes`\n         The child axes.\n     kwargs : dict\n         The reduced keyword dictionary to be passed when creating the colorbar\ndiff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -33,7 +33,7 @@\n import matplotlib.colorbar as cbar\n import matplotlib.image as mimage\n \n-from matplotlib.axes import Axes, SubplotBase, subplot_class_factory\n+from matplotlib.axes import Axes\n from matplotlib.gridspec import GridSpec\n from matplotlib.layout_engine import (\n     ConstrainedLayoutEngine, TightLayoutEngine, LayoutEngine,\n@@ -237,7 +237,7 @@ def autofmt_xdate(\n             Selects which ticklabels to rotate.\n         \"\"\"\n         _api.check_in_list(['major', 'minor', 'both'], which=which)\n-        allsubplots = all(hasattr(ax, 'get_subplotspec') for ax in self.axes)\n+        allsubplots = all(ax.get_subplotspec() for ax in self.axes)\n         if len(self.axes) == 1:\n             for label in self.axes[0].get_xticklabels(which=which):\n                 label.set_ha(ha)\n@@ -675,13 +675,11 @@ def add_subplot(self, *args, **kwargs):\n \n         Returns\n         -------\n-        `.axes.SubplotBase`, or another subclass of `~.axes.Axes`\n+        `~.axes.Axes`\n \n-            The Axes of the subplot. The returned Axes base class depends on\n-            the projection used. It is `~.axes.Axes` if rectilinear projection\n-            is used and `.projections.polar.PolarAxes` if polar projection\n-            is used. The returned Axes is then a subplot subclass of the\n-            base class.\n+            The Axes of the subplot. The returned Axes can actually be an\n+            instance of a subclass, such as `.projections.polar.PolarAxes` for\n+            polar projections.\n \n         Other Parameters\n         ----------------\n@@ -725,11 +723,13 @@ def add_subplot(self, *args, **kwargs):\n             raise TypeError(\n                 \"add_subplot() got an unexpected keyword argument 'figure'\")\n \n-        if len(args) == 1 and isinstance(args[0], SubplotBase):\n+        if (len(args) == 1\n+                and isinstance(args[0], mpl.axes._base._AxesBase)\n+                and args[0].get_subplotspec()):\n             ax = args[0]\n             key = ax._projection_init\n             if ax.get_figure() is not self:\n-                raise ValueError(\"The Subplot must have been created in \"\n+                raise ValueError(\"The Axes must have been created in \"\n                                  \"the present figure\")\n         else:\n             if not args:\n@@ -742,7 +742,7 @@ def add_subplot(self, *args, **kwargs):\n                 args = tuple(map(int, str(args[0])))\n             projection_class, pkw = self._process_projection_requirements(\n                 *args, **kwargs)\n-            ax = subplot_class_factory(projection_class)(self, *args, **pkw)\n+            ax = projection_class(self, *args, **pkw)\n             key = (projection_class, pkw)\n         return self._add_axes_internal(ax, key)\n \n@@ -1204,9 +1204,8 @@ def colorbar(\n \n         use_gridspec : bool, optional\n             If *cax* is ``None``, a new *cax* is created as an instance of\n-            Axes.  If *ax* is an instance of Subplot and *use_gridspec* is\n-            ``True``, *cax* is created as an instance of Subplot using the\n-            :mod:`.gridspec` module.\n+            Axes.  If *ax* is positioned with a subplotspec and *use_gridspec*\n+            is ``True``, then *cax* is also positioned with a subplotspec.\n \n         Returns\n         -------\n@@ -1254,7 +1253,9 @@ def colorbar(\n         if cax is None:\n             current_ax = self.gca()\n             userax = False\n-            if (use_gridspec and isinstance(ax, SubplotBase)):\n+            if (use_gridspec\n+                    and isinstance(ax, mpl.axes._base._AxesBase)\n+                    and ax.get_subplotspec()):\n                 cax, kwargs = cbar.make_axes_gridspec(ax, **kwargs)\n             else:\n                 cax, kwargs = cbar.make_axes(ax, **kwargs)\n@@ -1312,7 +1313,7 @@ def subplots_adjust(self, left=None, bottom=None, right=None, top=None,\n             return\n         self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n         for ax in self.axes:\n-            if hasattr(ax, 'get_subplotspec'):\n+            if ax.get_subplotspec() is not None:\n                 ax._set_position(ax.get_subplotspec().get_position(self))\n         self.stale = True\n \n@@ -1359,9 +1360,7 @@ def align_xlabels(self, axs=None):\n         \"\"\"\n         if axs is None:\n             axs = self.axes\n-        axs = np.ravel(axs)\n-        axs = [ax for ax in axs if hasattr(ax, 'get_subplotspec')]\n-\n+        axs = [ax for ax in np.ravel(axs) if ax.get_subplotspec() is not None]\n         for ax in axs:\n             _log.debug(' Working on: %s', ax.get_xlabel())\n             rowspan = ax.get_subplotspec().rowspan\n@@ -1421,9 +1420,7 @@ def align_ylabels(self, axs=None):\n         \"\"\"\n         if axs is None:\n             axs = self.axes\n-        axs = np.ravel(axs)\n-        axs = [ax for ax in axs if hasattr(ax, 'get_subplotspec')]\n-\n+        axs = [ax for ax in np.ravel(axs) if ax.get_subplotspec() is not None]\n         for ax in axs:\n             _log.debug(' Working on: %s', ax.get_ylabel())\n             colspan = ax.get_subplotspec().colspan\ndiff --git a/lib/matplotlib/gridspec.py b/lib/matplotlib/gridspec.py\n--- a/lib/matplotlib/gridspec.py\n+++ b/lib/matplotlib/gridspec.py\n@@ -211,8 +211,8 @@ def _check_gridspec_exists(figure, nrows, ncols):\n         or create a new one\n         \"\"\"\n         for ax in figure.get_axes():\n-            if hasattr(ax, 'get_subplotspec'):\n-                gs = ax.get_subplotspec().get_gridspec()\n+            gs = ax.get_gridspec()\n+            if gs is not None:\n                 if hasattr(gs, 'get_topmost_subplotspec'):\n                     # This is needed for colorbar gridspec layouts.\n                     # This is probably OK because this whole logic tree\n@@ -413,7 +413,7 @@ def update(self, **kwargs):\n                 raise AttributeError(f\"{k} is an unknown keyword\")\n         for figmanager in _pylab_helpers.Gcf.figs.values():\n             for ax in figmanager.canvas.figure.axes:\n-                if isinstance(ax, mpl.axes.SubplotBase):\n+                if ax.get_subplotspec() is not None:\n                     ss = ax.get_subplotspec().get_topmost_subplotspec()\n                     if ss.get_gridspec() == self:\n                         ax._set_position(\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -1130,13 +1130,11 @@ def subplot(*args, **kwargs):\n \n     Returns\n     -------\n-    `.axes.SubplotBase`, or another subclass of `~.axes.Axes`\n+    `~.axes.Axes`\n \n-        The axes of the subplot. The returned axes base class depends on\n-        the projection used. It is `~.axes.Axes` if rectilinear projection\n-        is used and `.projections.polar.PolarAxes` if polar projection\n-        is used. The returned axes is then a subplot subclass of the\n-        base class.\n+        The Axes of the subplot. The returned Axes can actually be an instance\n+        of a subclass, such as `.projections.polar.PolarAxes` for polar\n+        projections.\n \n     Other Parameters\n     ----------------\n@@ -1253,7 +1251,7 @@ def subplot(*args, **kwargs):\n \n     for ax in fig.axes:\n         # if we found an Axes at the position sort out if we can re-use it\n-        if hasattr(ax, 'get_subplotspec') and ax.get_subplotspec() == key:\n+        if ax.get_subplotspec() == key:\n             # if the user passed no kwargs, re-use\n             if kwargs == {}:\n                 break\n@@ -1560,12 +1558,11 @@ def subplot2grid(shape, loc, rowspan=1, colspan=1, fig=None, **kwargs):\n \n     Returns\n     -------\n-    `.axes.SubplotBase`, or another subclass of `~.axes.Axes`\n+    `~.axes.Axes`\n \n-        The axes of the subplot.  The returned axes base class depends on the\n-        projection used.  It is `~.axes.Axes` if rectilinear projection is used\n-        and `.projections.polar.PolarAxes` if polar projection is used.  The\n-        returned axes is then a subplot subclass of the base class.\n+        The Axes of the subplot. The returned Axes can actually be an instance\n+        of a subclass, such as `.projections.polar.PolarAxes` for polar\n+        projections.\n \n     Notes\n     -----\ndiff --git a/lib/mpl_toolkits/axes_grid1/axes_divider.py b/lib/mpl_toolkits/axes_grid1/axes_divider.py\n--- a/lib/mpl_toolkits/axes_grid1/axes_divider.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_divider.py\n@@ -6,7 +6,6 @@\n \n import matplotlib as mpl\n from matplotlib import _api\n-from matplotlib.axes import SubplotBase\n from matplotlib.gridspec import SubplotSpec\n import matplotlib.transforms as mtransforms\n from . import axes_size as Size\n@@ -343,10 +342,7 @@ def __call__(self, axes, renderer):\n                                          renderer)\n \n     def get_subplotspec(self):\n-        if hasattr(self._axes_divider, \"get_subplotspec\"):\n-            return self._axes_divider.get_subplotspec()\n-        else:\n-            return None\n+        return self._axes_divider.get_subplotspec()\n \n \n class SubplotDivider(Divider):\n@@ -421,10 +417,7 @@ def __init__(self, axes, xref=None, yref=None):\n     def _get_new_axes(self, *, axes_class=None, **kwargs):\n         axes = self._axes\n         if axes_class is None:\n-            if isinstance(axes, SubplotBase):\n-                axes_class = axes._axes_class\n-            else:\n-                axes_class = type(axes)\n+            axes_class = type(axes)\n         return axes_class(axes.get_figure(), axes.get_position(original=True),\n                           **kwargs)\n \n@@ -552,10 +545,7 @@ def get_anchor(self):\n             return self._anchor\n \n     def get_subplotspec(self):\n-        if hasattr(self._axes, \"get_subplotspec\"):\n-            return self._axes.get_subplotspec()\n-        else:\n-            return None\n+        return self._axes.get_subplotspec()\n \n \n # Helper for HBoxDivider/VBoxDivider.\ndiff --git a/lib/mpl_toolkits/axes_grid1/axes_rgb.py b/lib/mpl_toolkits/axes_grid1/axes_rgb.py\n--- a/lib/mpl_toolkits/axes_grid1/axes_rgb.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_rgb.py\n@@ -26,10 +26,7 @@ def make_rgb_axes(ax, pad=0.01, axes_class=None, **kwargs):\n \n     ax_rgb = []\n     if axes_class is None:\n-        try:\n-            axes_class = ax._axes_class\n-        except AttributeError:\n-            axes_class = type(ax)\n+        axes_class = type(ax)\n \n     for ny in [4, 2, 0]:\n         ax1 = axes_class(ax.get_figure(), ax.get_position(original=True),\ndiff --git a/lib/mpl_toolkits/axes_grid1/parasite_axes.py b/lib/mpl_toolkits/axes_grid1/parasite_axes.py\n--- a/lib/mpl_toolkits/axes_grid1/parasite_axes.py\n+++ b/lib/mpl_toolkits/axes_grid1/parasite_axes.py\n@@ -2,7 +2,6 @@\n import matplotlib.artist as martist\n import matplotlib.image as mimage\n import matplotlib.transforms as mtransforms\n-from matplotlib.axes import subplot_class_factory\n from matplotlib.transforms import Bbox\n from .mpl_axes import Axes\n \n@@ -226,16 +225,9 @@ def get_tightbbox(self, renderer=None, call_axes_locator=True,\n         return Bbox.union([b for b in bbs if b.width != 0 or b.height != 0])\n \n \n-host_axes_class_factory = cbook._make_class_factory(\n-    HostAxesBase, \"{}HostAxes\", \"_base_axes_class\")\n-HostAxes = host_axes_class_factory(Axes)\n-SubplotHost = subplot_class_factory(HostAxes)\n-\n-\n-def host_subplot_class_factory(axes_class):\n-    host_axes_class = host_axes_class_factory(axes_class)\n-    subplot_host_class = subplot_class_factory(host_axes_class)\n-    return subplot_host_class\n+host_axes_class_factory = host_subplot_class_factory = \\\n+    cbook._make_class_factory(HostAxesBase, \"{}HostAxes\", \"_base_axes_class\")\n+HostAxes = SubplotHost = host_axes_class_factory(Axes)\n \n \n def host_axes(*args, axes_class=Axes, figure=None, **kwargs):\n@@ -260,23 +252,4 @@ def host_axes(*args, axes_class=Axes, figure=None, **kwargs):\n     return ax\n \n \n-def host_subplot(*args, axes_class=Axes, figure=None, **kwargs):\n-    \"\"\"\n-    Create a subplot that can act as a host to parasitic axes.\n-\n-    Parameters\n-    ----------\n-    figure : `matplotlib.figure.Figure`\n-        Figure to which the subplot will be added. Defaults to the current\n-        figure `.pyplot.gcf()`.\n-\n-    *args, **kwargs\n-        Will be passed on to the underlying ``Axes`` object creation.\n-    \"\"\"\n-    import matplotlib.pyplot as plt\n-    host_subplot_class = host_subplot_class_factory(axes_class)\n-    if figure is None:\n-        figure = plt.gcf()\n-    ax = host_subplot_class(figure, *args, **kwargs)\n-    figure.add_subplot(ax)\n-    return ax\n+host_subplot = host_axes\ndiff --git a/lib/mpl_toolkits/axisartist/__init__.py b/lib/mpl_toolkits/axisartist/__init__.py\n--- a/lib/mpl_toolkits/axisartist/__init__.py\n+++ b/lib/mpl_toolkits/axisartist/__init__.py\n@@ -5,10 +5,9 @@\n from .grid_helper_curvelinear import GridHelperCurveLinear\n from .floating_axes import FloatingAxes, FloatingSubplot\n from mpl_toolkits.axes_grid1.parasite_axes import (\n-    host_axes_class_factory, parasite_axes_class_factory,\n-    subplot_class_factory)\n+    host_axes_class_factory, parasite_axes_class_factory)\n \n \n ParasiteAxes = parasite_axes_class_factory(Axes)\n HostAxes = host_axes_class_factory(Axes)\n-SubplotHost = subplot_class_factory(HostAxes)\n+SubplotHost = HostAxes\ndiff --git a/lib/mpl_toolkits/axisartist/axislines.py b/lib/mpl_toolkits/axisartist/axislines.py\n--- a/lib/mpl_toolkits/axisartist/axislines.py\n+++ b/lib/mpl_toolkits/axisartist/axislines.py\n@@ -558,9 +558,6 @@ def new_floating_axis(self, nth_coord, value, axis_direction=\"bottom\"):\n         return axis\n \n \n-Subplot = maxes.subplot_class_factory(Axes)\n-\n-\n class AxesZero(Axes):\n \n     def clear(self):\n@@ -577,4 +574,5 @@ def clear(self):\n             self._axislines[k].set_visible(False)\n \n \n-SubplotZero = maxes.subplot_class_factory(AxesZero)\n+Subplot = Axes\n+SubplotZero = AxesZero\ndiff --git a/lib/mpl_toolkits/axisartist/floating_axes.py b/lib/mpl_toolkits/axisartist/floating_axes.py\n--- a/lib/mpl_toolkits/axisartist/floating_axes.py\n+++ b/lib/mpl_toolkits/axisartist/floating_axes.py\n@@ -11,7 +11,6 @@\n \n import matplotlib as mpl\n from matplotlib import _api, cbook\n-import matplotlib.axes as maxes\n import matplotlib.patches as mpatches\n from matplotlib.path import Path\n \n@@ -339,4 +338,4 @@ def adjust_axes_lim(self):\n     FloatingAxesBase, \"Floating{}\")\n FloatingAxes = floatingaxes_class_factory(\n     host_axes_class_factory(axislines.Axes))\n-FloatingSubplot = maxes.subplot_class_factory(FloatingAxes)\n+FloatingSubplot = FloatingAxes\ndiff --git a/lib/mpl_toolkits/axisartist/parasite_axes.py b/lib/mpl_toolkits/axisartist/parasite_axes.py\n--- a/lib/mpl_toolkits/axisartist/parasite_axes.py\n+++ b/lib/mpl_toolkits/axisartist/parasite_axes.py\n@@ -1,9 +1,7 @@\n from mpl_toolkits.axes_grid1.parasite_axes import (\n-    host_axes_class_factory, parasite_axes_class_factory,\n-    subplot_class_factory)\n+    host_axes_class_factory, parasite_axes_class_factory)\n from .axislines import Axes\n \n \n ParasiteAxes = parasite_axes_class_factory(Axes)\n-HostAxes = host_axes_class_factory(Axes)\n-SubplotHost = subplot_class_factory(HostAxes)\n+HostAxes = SubplotHost = host_axes_class_factory(Axes)\ndiff --git a/tutorials/intermediate/artists.py b/tutorials/intermediate/artists.py\n--- a/tutorials/intermediate/artists.py\n+++ b/tutorials/intermediate/artists.py\n@@ -29,8 +29,8 @@\n the containers are places to put them (:class:`~matplotlib.axis.Axis`,\n :class:`~matplotlib.axes.Axes` and :class:`~matplotlib.figure.Figure`).  The\n standard use is to create a :class:`~matplotlib.figure.Figure` instance, use\n-the ``Figure`` to create one or more :class:`~matplotlib.axes.Axes` or\n-:class:`~matplotlib.axes.Subplot` instances, and use the ``Axes`` instance\n+the ``Figure`` to create one or more :class:`~matplotlib.axes.Axes`\n+instances, and use the ``Axes`` instance\n helper methods to create the primitives.  In the example below, we create a\n ``Figure`` instance using :func:`matplotlib.pyplot.figure`, which is a\n convenience method for instantiating ``Figure`` instances and connecting them\n@@ -59,10 +59,7 @@ class in the Matplotlib API, and the one you will be working with most\n :class:`~matplotlib.image.AxesImage`, respectively).  These helper methods\n will take your data (e.g., ``numpy`` arrays and strings) and create\n primitive ``Artist`` instances as needed (e.g., ``Line2D``), add them to\n-the relevant containers, and draw them when requested.  Most of you\n-are probably familiar with the :class:`~matplotlib.axes.Subplot`,\n-which is just a special case of an ``Axes`` that lives on a regular\n-rows by columns grid of ``Subplot`` instances.  If you want to create\n+the relevant containers, and draw them when requested.  If you want to create\n an ``Axes`` at an arbitrary location, simply use the\n :meth:`~matplotlib.figure.Figure.add_axes` method which takes a list\n of ``[left, bottom, width, height]`` values in 0-1 relative figure\n@@ -79,8 +76,8 @@ class in the Matplotlib API, and the one you will be working with most\n     line, = ax.plot(t, s, color='blue', lw=2)\n \n In this example, ``ax`` is the ``Axes`` instance created by the\n-``fig.add_subplot`` call above (remember ``Subplot`` is just a subclass of\n-``Axes``) and when you call ``ax.plot``, it creates a ``Line2D`` instance and\n+``fig.add_subplot`` call above and when you call ``ax.plot``, it creates a\n+``Line2D`` instance and\n adds it to the ``Axes``.  In the interactive `IPython <https://ipython.org/>`_\n session below, you can see that the ``Axes.lines`` list is length one and\n contains the same line that was returned by the ``line, = ax.plot...`` call:\n@@ -298,10 +295,10 @@ class in the Matplotlib API, and the one you will be working with most\n #     In [158]: ax2 = fig.add_axes([0.1, 0.1, 0.7, 0.3])\n #\n #     In [159]: ax1\n-#     Out[159]: <AxesSubplot:>\n+#     Out[159]: <Axes:>\n #\n #     In [160]: print(fig.axes)\n-#     [<AxesSubplot:>, <matplotlib.axes._axes.Axes object at 0x7f0768702be0>]\n+#     [<Axes:>, <matplotlib.axes._axes.Axes object at 0x7f0768702be0>]\n #\n # Because the figure maintains the concept of the \"current Axes\" (see\n # :meth:`Figure.gca <matplotlib.figure.Figure.gca>` and\n@@ -348,7 +345,7 @@ class in the Matplotlib API, and the one you will be working with most\n # ================ ============================================================\n # Figure attribute Description\n # ================ ============================================================\n-# axes             A list of `~.axes.Axes` instances (includes Subplot)\n+# axes             A list of `~.axes.Axes` instances\n # patch            The `.Rectangle` background\n # images           A list of `.FigureImage` patches -\n #                  useful for raw pixel display\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -66,7 +66,7 @@ def test_repr():\n     ax.set_xlabel('x')\n     ax.set_ylabel('y')\n     assert repr(ax) == (\n-        \"<AxesSubplot: \"\n+        \"<Axes: \"\n         \"label='label', title={'center': 'title'}, xlabel='x', ylabel='y'>\")\n \n \n@@ -2712,7 +2712,7 @@ def _as_mpl_axes(self):\n \n     # testing axes creation with subplot\n     ax = plt.subplot(121, projection=prj)\n-    assert type(ax) == mpl.axes._subplots.subplot_class_factory(PolarAxes)\n+    assert type(ax) == PolarAxes\n     plt.close()\n \n \ndiff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -262,7 +262,7 @@ def test_add_subplot_invalid():\n         fig.add_subplot(2, 2.0, 1)\n     _, ax = plt.subplots()\n     with pytest.raises(ValueError,\n-                       match='The Subplot must have been created in the '\n+                       match='The Axes must have been created in the '\n                              'present figure'):\n         fig.add_subplot(ax)\n \ndiff --git a/lib/matplotlib/tests/test_subplots.py b/lib/matplotlib/tests/test_subplots.py\n--- a/lib/matplotlib/tests/test_subplots.py\n+++ b/lib/matplotlib/tests/test_subplots.py\n@@ -3,9 +3,9 @@\n import numpy as np\n import pytest\n \n+from matplotlib.axes import Axes, SubplotBase\n import matplotlib.pyplot as plt\n from matplotlib.testing.decorators import check_figures_equal, image_comparison\n-import matplotlib.axes as maxes\n \n \n def check_shared(axs, x_shared, y_shared):\n@@ -122,6 +122,12 @@ def test_label_outer_span():\n         fig.axes, [False, True, False, True], [True, True, False, False])\n \n \n+def test_label_outer_non_gridspec():\n+    ax = plt.axes([0, 0, 1, 1])\n+    ax.label_outer()  # Does nothing.\n+    check_visible([ax], [True], [True])\n+\n+\n def test_shared_and_moved():\n     # test if sharey is on, but then tick_left is called that labels don't\n     # re-appear.  Seaborn does this just to be sure yaxis is on left...\n@@ -209,11 +215,6 @@ def test_dont_mutate_kwargs():\n     assert gridspec_kw == {'width_ratios': [1, 2]}\n \n \n-def test_subplot_factory_reapplication():\n-    assert maxes.subplot_class_factory(maxes.Axes) is maxes.Subplot\n-    assert maxes.subplot_class_factory(maxes.Subplot) is maxes.Subplot\n-\n-\n @pytest.mark.parametrize(\"width_ratios\", [None, [1, 3, 2]])\n @pytest.mark.parametrize(\"height_ratios\", [None, [1, 2]])\n @check_figures_equal(extensions=['png'])\n@@ -251,3 +252,11 @@ def test_ratio_overlapping_kws(method, args):\n     with pytest.raises(ValueError, match='width_ratios'):\n         getattr(plt, method)(*args, width_ratios=[1, 2, 3],\n                              gridspec_kw={'width_ratios': [1, 2, 3]})\n+\n+\n+def test_old_subplot_compat():\n+    fig = plt.figure()\n+    assert isinstance(fig.add_subplot(), SubplotBase)\n+    assert not isinstance(fig.add_axes(rect=[0, 0, 1, 1]), SubplotBase)\n+    with pytest.raises(TypeError):\n+        Axes(fig, [0, 0, 1, 1], rect=[0, 0, 1, 1])\ndiff --git a/lib/matplotlib/tests/test_transforms.py b/lib/matplotlib/tests/test_transforms.py\n--- a/lib/matplotlib/tests/test_transforms.py\n+++ b/lib/matplotlib/tests/test_transforms.py\n@@ -510,7 +510,7 @@ def test_str_transform():\n                 Affine2D().scale(1.0),\n                 Affine2D().scale(1.0))),\n         PolarTransform(\n-            PolarAxesSubplot(0.125,0.1;0.775x0.8),\n+            PolarAxes(0.125,0.1;0.775x0.8),\n             use_rmin=True,\n             _apply_theta_transforms=False)),\n     CompositeGenericTransform(\ndiff --git a/lib/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py b/lib/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py\n--- a/lib/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py\n+++ b/lib/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py\n@@ -8,7 +8,7 @@\n \n from mpl_toolkits.axes_grid1.parasite_axes import ParasiteAxes\n from mpl_toolkits.axisartist import SubplotHost\n-from mpl_toolkits.axes_grid1.parasite_axes import host_subplot_class_factory\n+from mpl_toolkits.axes_grid1.parasite_axes import host_axes_class_factory\n from mpl_toolkits.axisartist import angle_helper\n from mpl_toolkits.axisartist.axislines import Axes\n from mpl_toolkits.axisartist.grid_helper_curvelinear import \\\n@@ -59,7 +59,7 @@ def inverted(self):\n \n     fig = plt.figure()\n \n-    SubplotHost = host_subplot_class_factory(Axes)\n+    SubplotHost = host_axes_class_factory(Axes)\n \n     tr = MyTransform(1)\n     grid_helper = GridHelperCurveLinear(tr)\ndiff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -56,7 +56,7 @@ def test_axes3d_repr():\n     ax.set_ylabel('y')\n     ax.set_zlabel('z')\n     assert repr(ax) == (\n-        \"<Axes3DSubplot: label='label', \"\n+        \"<Axes3D: label='label', \"\n         \"title={'center': 'title'}, xlabel='x', ylabel='y', zlabel='z'>\")\n \n \n",
  "problem_statement": "The axes module structure\nThis is a question or feature request. \r\n\r\nI have looked into the documentation and believe that some problems is the result of the axes folder and its structure. I am not sure what is supposed to be automatic and what is not in sphinx but `axes.SubplotBase` is for example not included in the documentation even though most `axes` used in matplotlib are probably of that class.\r\n\r\n`.. automodule:: matplotlib.axes` does not work even though `Axes` and `SubplotBase` exist in that module.\r\n`.. automodule:: matplotlib.axes._subplots` works as I would expect but the paths are wrong.\r\n\r\n`from matplotlib.axes import SubplotBase, Axes` works but the class of actual objects are using the full path, for example `matplotlib.axes._subplots.AxesSubplot` \r\n\r\nI don't know much of module structures or module aliases but I think it is kind of inconvenient when different paths are used in different places and I believe that more work than needed is necessary to write the documentation correctly. See for example #11443.\r\n\r\nIs it possibly to get a module structure such that the `obj.__class__`  path is the same as the alias path, i.e. `axes.Axes` is always used instead of `axes._axes.Axes`? \r\n\n",
  "hints_text": "One can always readjust `cls.__module__` post-hoc; setting `__all__` appropriately may also help with sphinx.\r\n(A single `axes.py` would be sufficiently enormous that I think keeping a split implementation is more manageable.)\nMight be worth checking out http://sphinx-automodapi.readthedocs.io/en/latest/ in the long run, which automatically does module documentation and includes everything.",
  "created_at": "2022-08-06T22:02:35Z",
  "version": "3.5",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_repr\", \"lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_invalid\", \"lib/matplotlib/tests/test_subplots.py::test_label_outer_non_gridspec\", \"lib/matplotlib/tests/test_transforms.py::test_str_transform\", \"lib/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py::test_custom_transform[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_repr\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_get_labels\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_shift\", \"lib/matplotlib/tests/test_axes.py::test_acorr[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_matshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_cla\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting\", \"lib/matplotlib/tests/test_axes.py::test_inverted_cla\", \"lib/matplotlib/tests/test_axes.py::test_cla_not_redefined\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tight\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared\", \"lib/matplotlib/tests/test_axes.py::test_use_sticky_edges\", \"lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_empty\", \"lib/matplotlib/tests/test_axes.py::test_arrow_in_view\", \"lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow\", \"lib/matplotlib/tests/test_axes.py::test_annotate_signature\", \"lib/matplotlib/tests/test_axes.py::test_fill_units[png]\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_single_date[png]\", \"lib/matplotlib/tests/test_axes.py::test_shaped_data[png]\", \"lib/matplotlib/tests/test_axes.py::test_structured_data\", \"lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_pickable\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim\", \"lib/matplotlib/tests/test_axes.py::test_inverted_limits\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorflaterror\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[png]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arc_angles[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle\", \"lib/matplotlib/tests/test_axes.py::test_markevery[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]\", \"lib/matplotlib/tests/test_axes.py::test_nan_bar_values\", \"lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_regression\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels_length\", \"lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked\", \"lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_float16\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]\", \"lib/matplotlib/tests/test_axes.py::test_stairs[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_update[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_empty\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2\", \"lib/matplotlib/tests/test_axes.py::test_stairs_options[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_density\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error\", \"lib/matplotlib/tests/test_axes.py::test_pyplot_axes\", \"lib/matplotlib/tests/test_axes.py::test_log_scales\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_no_data\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_invalid\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_zorder\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]\", \"lib/matplotlib/tests/test_axes.py::test_manage_xticks\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_not_single\", \"lib/matplotlib/tests/test_axes.py::test_tick_space_size_0\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_shape\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid\", \"lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/\", \"lib/matplotlib/tests/test_axes.py::test_stem[png-w/o\", \"lib/matplotlib/tests/test_axes.py::test_stem_args\", \"lib/matplotlib/tests/test_axes.py::test_stem_markerfmt\", \"lib/matplotlib/tests/test_axes.py::test_stem_dates\", \"lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/\", \"lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/o\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged\", \"lib/matplotlib/tests/test_axes.py::test_hist_emptydata\", \"lib/matplotlib/tests/test_axes.py::test_hist_labels\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure\", \"lib/matplotlib/tests/test_axes.py::test_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]\", \"lib/matplotlib/tests/test_axes.py::test_empty_eventplot\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_styles[png]\", \"lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]\", \"lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_args\", \"lib/matplotlib/tests/test_axes.py::test_vlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_vlines_default\", \"lib/matplotlib/tests/test_axes.py::test_hlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_hlines_default\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_subplot_key_hash\", \"lib/matplotlib/tests/test_axes.py::test_specgram[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_fs_none\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd[png]\", \"lib/matplotlib/tests/test_axes.py::test_spectrum[png]\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases\", \"lib/matplotlib/tests/test_axes.py::test_twin_remove[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]\", \"lib/matplotlib/tests/test_axes.py::test_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]\", \"lib/matplotlib/tests/test_axes.py::test_vline_limit\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]\", \"lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3\", \"lib/matplotlib/tests/test_axes.py::test_shared_aspect_error\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_method_errors\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]\", \"lib/matplotlib/tests/test_axes.py::test_relim_visible_only\", \"lib/matplotlib/tests/test_axes.py::test_text_labelsize\", \"lib/matplotlib/tests/test_axes.py::test_pie_default[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_textprops\", \"lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values\", \"lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie\", \"lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]\", \"lib/matplotlib/tests/test_axes.py::test_set_noniterable_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc\", \"lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_label_update\", \"lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]\", \"lib/matplotlib/tests/test_axes.py::test_margins\", \"lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must\", \"lib/matplotlib/tests/test_axes.py::test_length_one_hist\", \"lib/matplotlib/tests/test_axes.py::test_set_xy_bound\", \"lib/matplotlib/tests/test_axes.py::test_pathological_hexbin\", \"lib/matplotlib/tests/test_axes.py::test_color_None\", \"lib/matplotlib/tests/test_axes.py::test_color_alias\", \"lib/matplotlib/tests/test_axes.py::test_numerical_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_unicode_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_move_offsetlabel\", \"lib/matplotlib/tests/test_axes.py::test_rc_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_tick\", \"lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick\", \"lib/matplotlib/tests/test_axes.py::test_square_plot\", \"lib/matplotlib/tests/test_axes.py::test_bad_plot_args\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_shared_scale\", \"lib/matplotlib/tests/test_axes.py::test_shared_bool\", \"lib/matplotlib/tests/test_axes.py::test_violin_point_mass\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_title_pad\", \"lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]\", \"lib/matplotlib/tests/test_axes.py::test_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]\", \"lib/matplotlib/tests/test_axes.py::test_axes_margins\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks_log\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_empty\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates\", \"lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing\", \"lib/matplotlib/tests/test_axes.py::test_pandas_index_shape\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist\", \"lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center\", \"lib/matplotlib/tests/test_axes.py::test_tick_apply_tickdir_deprecation\", \"lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside\", \"lib/matplotlib/tests/test_axes.py::test_none_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_bar_uint8\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_axisbelow[png]\", \"lib/matplotlib/tests/test_axes.py::test_titletwiny\", \"lib/matplotlib/tests/test_axes.py::test_titlesetpos\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[left\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[center\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[both\", \"lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page\", \"lib/matplotlib/tests/test_axes.py::test_offset_label_color\", \"lib/matplotlib/tests/test_axes.py::test_offset_text_visible\", \"lib/matplotlib/tests/test_axes.py::test_large_offset\", \"lib/matplotlib/tests/test_axes.py::test_barb_units\", \"lib/matplotlib/tests/test_axes.py::test_quiver_units\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_cycle\", \"lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation\", \"lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle\", \"lib/matplotlib/tests/test_axes.py::test_log_margins\", \"lib/matplotlib/tests/test_axes.py::test_color_length_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_legend\", \"lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args\", \"lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits\", \"lib/matplotlib/tests/test_axes.py::test_zero_linewidth\", \"lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox\", \"lib/matplotlib/tests/test_axes.py::test_inset\", \"lib/matplotlib/tests/test_axes.py::test_zoom_inset\", \"lib/matplotlib/tests/test_axes.py::test_inset_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_inset_projection\", \"lib/matplotlib/tests/test_axes.py::test_inset_subclass\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]\", \"lib/matplotlib/tests/test_axes.py::test_set_position\", \"lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom\", \"lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan\", \"lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index\", \"lib/matplotlib/tests/test_axes.py::test_scatter_empty_data\", \"lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_fail\", \"lib/matplotlib/tests/test_axes.py::test_secondary_resize\", \"lib/matplotlib/tests/test_axes.py::test_secondary_minorloc\", \"lib/matplotlib/tests/test_axes.py::test_secondary_formatter\", \"lib/matplotlib/tests/test_axes.py::test_secondary_repr\", \"lib/matplotlib/tests/test_axes.py::test_normal_axes\", \"lib/matplotlib/tests/test_axes.py::test_nodecorator\", \"lib/matplotlib/tests/test_axes.py::test_displaced_spine\", \"lib/matplotlib/tests/test_axes.py::test_tickdirs\", \"lib/matplotlib/tests/test_axes.py::test_minor_accountedfor\", \"lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2\", \"lib/matplotlib/tests/test_axes.py::test_hist_auto_bins\", \"lib/matplotlib/tests/test_axes.py::test_hist_nan_data\", \"lib/matplotlib/tests/test_axes.py::test_hist_range_and_density\", \"lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position\", \"lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init\", \"lib/matplotlib/tests/test_axes.py::test_redraw_in_frame\", \"lib/matplotlib/tests/test_axes.py::test_invisible_axes_events\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]\", \"lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]\", \"lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions\", \"lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_retick\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_center\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_labels\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted\", \"lib/matplotlib/tests/test_axes.py::test_nan_barlabels\", \"lib/matplotlib/tests/test_axes.py::test_patch_bounds\", \"lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_artist_sublists\", \"lib/matplotlib/tests/test_axes.py::test_empty_line_plots\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format\", \"lib/matplotlib/tests/test_axes.py::test_automatic_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_errors\", \"lib/matplotlib/tests/test_axes.py::test_clim\", \"lib/matplotlib/tests/test_axes.py::test_bezier_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_get_xticklabel\", \"lib/matplotlib/tests/test_figure.py::test_align_labels[png]\", \"lib/matplotlib/tests/test_figure.py::test_align_labels_stray_axes\", \"lib/matplotlib/tests/test_figure.py::test_figure_label\", \"lib/matplotlib/tests/test_figure.py::test_fignum_exists\", \"lib/matplotlib/tests/test_figure.py::test_clf_keyword\", \"lib/matplotlib/tests/test_figure.py::test_figure[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_figure_legend[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure_legend[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_gca\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_subclass\", \"lib/matplotlib/tests/test_figure.py::test_suptitle[png]\", \"lib/matplotlib/tests/test_figure.py::test_suptitle[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_suptitle_fontproperties\", \"lib/matplotlib/tests/test_figure.py::test_alpha[png]\", \"lib/matplotlib/tests/test_figure.py::test_too_many_figures\", \"lib/matplotlib/tests/test_figure.py::test_iterability_axes_argument\", \"lib/matplotlib/tests/test_figure.py::test_set_fig_size\", \"lib/matplotlib/tests/test_figure.py::test_axes_remove\", \"lib/matplotlib/tests/test_figure.py::test_figaspect\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[both]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[major]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[minor]\", \"lib/matplotlib/tests/test_figure.py::test_change_dpi\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[1-nan]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[-1-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[inf-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_add_axes\", \"lib/matplotlib/tests/test_figure.py::test_subplots_shareax_loglabels\", \"lib/matplotlib/tests/test_figure.py::test_savefig\", \"lib/matplotlib/tests/test_figure.py::test_savefig_warns\", \"lib/matplotlib/tests/test_figure.py::test_savefig_backend\", \"lib/matplotlib/tests/test_figure.py::test_savefig_pixel_ratio[Agg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_pixel_ratio[Cairo]\", \"lib/matplotlib/tests/test_figure.py::test_figure_repr\", \"lib/matplotlib/tests/test_figure.py::test_valid_layouts\", \"lib/matplotlib/tests/test_figure.py::test_invalid_layouts\", \"lib/matplotlib/tests/test_figure.py::test_add_artist[png]\", \"lib/matplotlib/tests/test_figure.py::test_add_artist[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[png]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[ps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[eps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[svg]\", \"lib/matplotlib/tests/test_figure.py::test_tightbbox\", \"lib/matplotlib/tests/test_figure.py::test_axes_removal\", \"lib/matplotlib/tests/test_figure.py::test_removed_axis\", \"lib/matplotlib/tests/test_figure.py::test_figure_clear[clear]\", \"lib/matplotlib/tests/test_figure.py::test_figure_clear[clf]\", \"lib/matplotlib/tests/test_figure.py::test_clf_not_redefined\", \"lib/matplotlib/tests/test_figure.py::test_picking_does_not_stale\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_twotuple\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[eps]\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_all_nested[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_tuple[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x0-None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x1-SKIP-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x2-0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x3-None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x4-SKIP-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x5-0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail_list_of_str\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[subplot_kw0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[subplot_kw1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_string_parser\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[AAA\\\\nBBB-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[\\\\nAAA\\\\nBBB\\\\n-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[ABC\\\\nDEF-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x0-(?m)we\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x1-There\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[AAA\\\\nc\\\\nBBB-All\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x3-All\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_hashable_keys[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[abc]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[cab]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[bca]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[cba]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[acb]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[bac]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_user_order\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_share_all\", \"lib/matplotlib/tests/test_figure.py::test_reused_gridspec\", \"lib/matplotlib/tests/test_figure.py::test_subfigure[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_tightbbox\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_dpi\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_ss[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_double[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_spanning\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_ticks\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_scatter_size[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_pdf\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_kwargs\", \"lib/matplotlib/tests/test_figure.py::test_add_axes_kwargs\", \"lib/matplotlib/tests/test_figure.py::test_ginput\", \"lib/matplotlib/tests/test_figure.py::test_waitforbuttonpress\", \"lib/matplotlib/tests/test_figure.py::test_kwargs_pass\", \"lib/matplotlib/tests/test_figure.py::test_rcparams[png]\", \"lib/matplotlib/tests/test_figure.py::test_deepcopy\", \"lib/matplotlib/tests/test_figure.py::test_unpickle_with_device_pixel_ratio\", \"lib/matplotlib/tests/test_subplots.py::test_shared\", \"lib/matplotlib/tests/test_subplots.py::test_label_outer_span\", \"lib/matplotlib/tests/test_subplots.py::test_shared_and_moved\", \"lib/matplotlib/tests/test_subplots.py::test_exceptions\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_offsettext[png]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_offsettext[pdf]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[True-True-True-True]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[True-True-True-False]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[True-True-False-True]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[True-True-False-False]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[True-False-True-True]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[True-False-True-False]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[True-False-False-True]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[True-False-False-False]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[False-True-True-True]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[False-True-True-False]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[False-True-False-True]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[False-True-False-False]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[False-False-True-True]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[False-False-True-False]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[False-False-False-True]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_ticklabels[False-False-False-False]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_axislabels[left-bottom]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_axislabels[left-top]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_axislabels[right-bottom]\", \"lib/matplotlib/tests/test_subplots.py::test_subplots_hide_axislabels[right-top]\", \"lib/matplotlib/tests/test_subplots.py::test_get_gridspec\", \"lib/matplotlib/tests/test_subplots.py::test_dont_mutate_kwargs\", \"lib/matplotlib/tests/test_subplots.py::test_width_and_height_ratios[png-None-None]\", \"lib/matplotlib/tests/test_subplots.py::test_width_and_height_ratios[png-None-width_ratios1]\", \"lib/matplotlib/tests/test_subplots.py::test_width_and_height_ratios[png-height_ratios1-None]\", \"lib/matplotlib/tests/test_subplots.py::test_width_and_height_ratios[png-height_ratios1-width_ratios1]\", \"lib/matplotlib/tests/test_subplots.py::test_width_and_height_ratios_mosaic[png-None-None]\", \"lib/matplotlib/tests/test_subplots.py::test_width_and_height_ratios_mosaic[png-None-width_ratios1]\", \"lib/matplotlib/tests/test_subplots.py::test_width_and_height_ratios_mosaic[png-height_ratios1-None]\", \"lib/matplotlib/tests/test_subplots.py::test_width_and_height_ratios_mosaic[png-height_ratios1-width_ratios1]\", \"lib/matplotlib/tests/test_subplots.py::test_ratio_overlapping_kws[subplots-args0]\", \"lib/matplotlib/tests/test_subplots.py::test_ratio_overlapping_kws[subplot_mosaic-args1]\", \"lib/matplotlib/tests/test_subplots.py::test_old_subplot_compat\", \"lib/matplotlib/tests/test_transforms.py::test_non_affine_caching\", \"lib/matplotlib/tests/test_transforms.py::test_external_transform_api\", \"lib/matplotlib/tests/test_transforms.py::test_pre_transform_plotting[png]\", \"lib/matplotlib/tests/test_transforms.py::test_pre_transform_plotting[pdf]\", \"lib/matplotlib/tests/test_transforms.py::test_contour_pre_transform_limits\", \"lib/matplotlib/tests/test_transforms.py::test_pcolor_pre_transform_limits\", \"lib/matplotlib/tests/test_transforms.py::test_pcolormesh_pre_transform_limits\", \"lib/matplotlib/tests/test_transforms.py::test_Affine2D_from_values\", \"lib/matplotlib/tests/test_transforms.py::test_affine_inverted_invalidated\", \"lib/matplotlib/tests/test_transforms.py::test_clipping_of_log\", \"lib/matplotlib/tests/test_transforms.py::TestBasicTransform::test_transform_depth\", \"lib/matplotlib/tests/test_transforms.py::TestBasicTransform::test_left_to_right_iteration\", \"lib/matplotlib/tests/test_transforms.py::TestBasicTransform::test_transform_shortcuts\", \"lib/matplotlib/tests/test_transforms.py::TestBasicTransform::test_contains_branch\", \"lib/matplotlib/tests/test_transforms.py::TestBasicTransform::test_affine_simplification\", \"lib/matplotlib/tests/test_transforms.py::TestTransformPlotInterface::test_line_extent_axes_coords\", \"lib/matplotlib/tests/test_transforms.py::TestTransformPlotInterface::test_line_extent_data_coords\", \"lib/matplotlib/tests/test_transforms.py::TestTransformPlotInterface::test_line_extent_compound_coords1\", \"lib/matplotlib/tests/test_transforms.py::TestTransformPlotInterface::test_line_extent_predata_transform_coords\", \"lib/matplotlib/tests/test_transforms.py::TestTransformPlotInterface::test_line_extent_compound_coords2\", \"lib/matplotlib/tests/test_transforms.py::TestTransformPlotInterface::test_line_extents_affine\", \"lib/matplotlib/tests/test_transforms.py::TestTransformPlotInterface::test_line_extents_non_affine\", \"lib/matplotlib/tests/test_transforms.py::TestTransformPlotInterface::test_pathc_extents_non_affine\", \"lib/matplotlib/tests/test_transforms.py::TestTransformPlotInterface::test_pathc_extents_affine\", \"lib/matplotlib/tests/test_transforms.py::TestTransformPlotInterface::test_line_extents_for_non_affine_transData\", \"lib/matplotlib/tests/test_transforms.py::test_bbox_frozen_copies_minpos\", \"lib/matplotlib/tests/test_transforms.py::test_bbox_intersection\", \"lib/matplotlib/tests/test_transforms.py::test_bbox_as_strings\", \"lib/matplotlib/tests/test_transforms.py::test_transform_single_point\", \"lib/matplotlib/tests/test_transforms.py::test_log_transform\", \"lib/matplotlib/tests/test_transforms.py::test_nan_overlap\", \"lib/matplotlib/tests/test_transforms.py::test_transform_angles\", \"lib/matplotlib/tests/test_transforms.py::test_nonsingular\", \"lib/matplotlib/tests/test_transforms.py::test_invalid_arguments\", \"lib/matplotlib/tests/test_transforms.py::test_transformed_path\", \"lib/matplotlib/tests/test_transforms.py::test_transformed_patch_path\", \"lib/matplotlib/tests/test_transforms.py::test_lockable_bbox[x0]\", \"lib/matplotlib/tests/test_transforms.py::test_lockable_bbox[y0]\", \"lib/matplotlib/tests/test_transforms.py::test_lockable_bbox[x1]\", \"lib/matplotlib/tests/test_transforms.py::test_lockable_bbox[y1]\", \"lib/matplotlib/tests/test_transforms.py::test_copy\", \"lib/matplotlib/tests/test_transforms.py::test_deepcopy\", \"lib/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py::test_polar_box[png]\", \"lib/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py::test_axis_direction[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invisible_axes[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_aspects[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_primary_views[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_colors\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_shaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_notshaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_bar3d_lightsource\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contour3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contour3d_extend3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_fill[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_extend[png-both-levels0]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_extend[png-min-levels1]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contourf3d_extend[png-max-levels2]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_tricontour[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_contour3d_1d_input\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_lines3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_plot_scalar[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_mixedsubplots[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_tight_layout_text[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_color[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_linewidth[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_linewidth_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_sorting[png-True]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter3d_sorting[png-False]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_marker_draw_order_data_reversed[png--50]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_marker_draw_order_data_reversed[png-130]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_marker_draw_order_view_rotated[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_plot_3d_from_2d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d_shaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d_masked[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_surface3d_masked_strides[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_text3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_text3d_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_trisurf3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_trisurf3d_shaded[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3dzerocstride[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3dzerorstride[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_wireframe3dzerostrideraises\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_mixedsamplesraises\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3d_empty[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3d_masked[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_patch_modification\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_patch_collection_modification[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly3dcollection_verts_validation\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly3dcollection_closed[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly_collection_2d_to_3d_empty\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_poly3dcollection_alpha[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_add_collection3d_zs_array[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_add_collection3d_zs_scalar[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_labelpad[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_cla[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_rotated[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_plotsurface_1d_raises\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_proj_transform\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_proj_axes_cube[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_proj_axes_cube_ortho[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_rot\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_world\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_lines_dists[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_lines_dists_nowarning\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_autoscale\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[True-x]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[True-y]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[True-z]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[False-x]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[False-y]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[False-z]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[None-x]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[None-y]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_unautoscale[None-z]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_focal_length_checks\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_focal_length[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_ortho[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_axes3d_isometric[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-left-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-left-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-right-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_xlim3d-right-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-bottom-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-bottom-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-top-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_ylim3d-top-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-bottom-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-bottom-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-top-inf]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_invalid_axes_limits[set_zlim3d-top-nan]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_simple[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_edge_style[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_named_colors[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_rgb_data[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_alpha[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_xyz[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::TestVoxels::test_calling_conventions\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_line3d_set_get_data_3d\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_inverted[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_inverted_cla\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_ax3d_tickcolour\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_ticklabel_format[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_quiver3D_smoke[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_minor_ticks[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_errorbar3d_errorevery[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_errorbar3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_stem3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_equal_box_aspect[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_colorbar_pos\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_shared_axes_retick\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_pan\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scalarmap_update[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_subfigure_simple\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_computed_zorder[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_format_coord\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_get_axis_position\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args0-kwargs0-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args1-kwargs1-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args2-kwargs2-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args3-kwargs3-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args4-kwargs4-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[ValueError-args5-kwargs5-margin\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[TypeError-args6-kwargs6-Cannot\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[TypeError-args7-kwargs7-Cannot\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[TypeError-args8-kwargs8-Cannot\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_margins_errors[TypeError-args9-kwargs9-Must\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_text_3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_draw_single_lines_from_Nx1\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_pathpatch_3d[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_scatter_spiral[png]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_Poly3DCollection_get_facecolor\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_Poly3DCollection_get_edgecolor\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_view_init_vertical_axis[z-proj_expected0-axis_lines_expected0-tickdirs_expected0]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_view_init_vertical_axis[y-proj_expected1-axis_lines_expected1-tickdirs_expected1]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_view_init_vertical_axis[x-proj_expected2-axis_lines_expected2-tickdirs_expected2]\", \"lib/mpl_toolkits/tests/test_mplot3d.py::test_arc_pathpatch[png]\"]",
  "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.804786",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}