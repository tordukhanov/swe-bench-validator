{
  "repo": "django/django",
  "instance_id": "django__django-11692",
  "base_commit": "f37face331f21cb8af70fc4ec101ec7b6be1f63e",
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -503,7 +503,10 @@ def get_combinator_sql(self, combinator, all):\n                         part_sql = 'SELECT * FROM ({})'.format(part_sql)\n                     # Add parentheses when combining with compound query if not\n                     # already added for all compound queries.\n-                    elif not features.supports_slicing_ordering_in_compound:\n+                    elif (\n+                        self.query.subquery or\n+                        not features.supports_slicing_ordering_in_compound\n+                    ):\n                         part_sql = '({})'.format(part_sql)\n                 parts += ((part_sql, part_args),)\n             except EmptyResultSet:\n@@ -517,7 +520,9 @@ def get_combinator_sql(self, combinator, all):\n         combinator_sql = self.connection.ops.set_operators[combinator]\n         if all and combinator == 'union':\n             combinator_sql += ' ALL'\n-        braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n+        braces = '{}'\n+        if not self.query.subquery and features.supports_slicing_ordering_in_compound:\n+            braces = '({})'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n         result = [' {} '.format(combinator_sql).join(sql_parts)]\n         params = []\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1048,6 +1048,12 @@ def resolve_expression(self, query, *args, **kwargs):\n         clone.bump_prefix(query)\n         clone.subquery = True\n         clone.where.resolve_expression(query, *args, **kwargs)\n+        # Resolve combined queries.\n+        if clone.combinator:\n+            clone.combined_queries = tuple([\n+                combined_query.resolve_expression(query, *args, **kwargs)\n+                for combined_query in clone.combined_queries\n+            ])\n         for key, value in clone.annotations.items():\n             resolved = value.resolve_expression(query, *args, **kwargs)\n             if hasattr(resolved, 'external_aliases'):\n",
  "test_patch": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,11 +1,11 @@\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n-from django.db.models import Exists, F, IntegerField, OuterRef, Value\n+from django.db.models import Exists, F, IntegerField, OuterRef, Subquery, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n from django.test.utils import CaptureQueriesContext\n \n-from .models import Celebrity, Number, ReservedName\n+from .models import Author, Celebrity, ExtraInfo, Number, ReservedName\n \n \n @skipUnlessDBFeature('supports_select_union')\n@@ -252,6 +252,39 @@ def test_union_multiple_models_with_values_list_and_order_by_extra_select(self):\n             [reserved_name.pk],\n         )\n \n+    def test_union_in_subquery(self):\n+        ReservedName.objects.bulk_create([\n+            ReservedName(name='rn1', order=8),\n+            ReservedName(name='rn2', order=1),\n+            ReservedName(name='rn3', order=5),\n+        ])\n+        qs1 = Number.objects.filter(num__gt=7, num=OuterRef('order'))\n+        qs2 = Number.objects.filter(num__lt=2, num=OuterRef('order'))\n+        self.assertCountEqual(\n+            ReservedName.objects.annotate(\n+                number=Subquery(qs1.union(qs2).values('num')),\n+            ).filter(number__isnull=False).values_list('order', flat=True),\n+            [8, 1],\n+        )\n+\n+    def test_union_in_subquery_related_outerref(self):\n+        e1 = ExtraInfo.objects.create(value=7, info='e3')\n+        e2 = ExtraInfo.objects.create(value=5, info='e2')\n+        e3 = ExtraInfo.objects.create(value=1, info='e1')\n+        Author.objects.bulk_create([\n+            Author(name='a1', num=1, extra=e1),\n+            Author(name='a2', num=3, extra=e2),\n+            Author(name='a3', num=2, extra=e3),\n+        ])\n+        qs1 = ExtraInfo.objects.order_by().filter(value=OuterRef('num'))\n+        qs2 = ExtraInfo.objects.order_by().filter(value__lt=OuterRef('extra__value'))\n+        qs = Author.objects.annotate(\n+            info=Subquery(qs1.union(qs2).values('info')[:1]),\n+        ).filter(info__isnull=False).values_list('name', flat=True)\n+        self.assertCountEqual(qs, ['a1', 'a2'])\n+        # Combined queries don't mutate.\n+        self.assertCountEqual(qs, ['a1', 'a2'])\n+\n     def test_count_union(self):\n         qs1 = Number.objects.filter(num__lte=1).values('num')\n         qs2 = Number.objects.filter(num__gte=2, num__lte=3).values('num')\n",
  "problem_statement": "Can't use OuterRef in union Subquery\nDescription\n\t\nWhen you make a QuerySet using the union method or the | operator, the QuerySet passed into the union method cannot reference OuterRef even when wrapped with Subquery.\nFor example:\ncls = Document.objects.filter(\n\tchecklist__isnull=False,\n\tpart=OuterRef('id')\n).values('checklist__customer', 'created')\nots = Document.objects.filter(\n\townershiptransfer__isnull=False,\n\tpart=OuterRef('id')\n).values('ownershiptransfer__ship_target__contact', 'created')\nreturn self.annotate(\n\towner=Subquery(cls.union(ots).values('owner')[:1])\n)\nReturns this error:\nValueError\nThis queryset contains a reference to an outer query and may only be used in a subquery.\nI get the same error with this statement:\nreturn self.annotate(\n\towner=Subquery((cls | ots).values('owner')[:1])\n)\n(As an aside, I also get an error when I try to apply an order_by clause.)\n",
  "hints_text": "Are you sure that generating some sensible SQL for this queryset is possible?\nYes, it is possible to generate SQL for this query. I tried it myself. ...I suppose \"sensible\" is a subjective term. I just tried using an __in lookup, but that was getting to be a struggle. Maybe Subquery wasn't originally intended to be used with unions, but I think it would be a good feature to have, especially in the discussion of CTEs (common table expressions).\nhi, I thought that we can use union queries in subqueries by replacing the alias from origin query to union queries. I've pushed a commit. if this approach is ok, I can add other tests and go further? â€‹PR\ncls = Document.objects.filter( checklist__isnull=False, part=OuterRef('id') ).values('checklist__customer', 'created') ots = Document.objects.filter( ownershiptransfer__isnull=False, part=OuterRef('id') ).values('ownershiptransfer__ship_target__contact', 'created') return self.annotate( owner=Subquery(cls.union(ots).values('owner')[:1]) ) I change the example like this: cls = Document.objects.filter( checklist__isnull=False, ).values('checklist__customer', 'created') ots = Document.objects.filter( ownershiptransfer__isnull=False, ).values('ownershiptransfer__ship_target__contact', 'created') return self.annotate( owner=Subquery(cls.union(ots).filter(part=OuterRef('id')).values('owner')[:1]) )\nI forgot it, thanks.",
  "created_at": "2019-08-21T08:09:45Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_union_in_subquery (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_in_subquery_related_outerref (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
  "PASS_TO_PASS": "[\"test_combining_multiple_models (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_empty_qs_union_with_ordered_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_with_filters_unsupported_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_limits (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_operator_on_combined_qs_error (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_by_same_type (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_raises_on_non_selected_column (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_alias (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression_and_alias (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_qs_with_subcompound_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_distinct (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_multiple_models_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_multiple_models_with_values_list_and_order_by_extra_select (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_none (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_extra_and_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_two_annotated_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_and_order_on_annotation (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_on_annotated_and_unannotated (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_operations_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_ordering_slicing_raises_db_error (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.580705",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}