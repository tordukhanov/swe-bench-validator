{
  "repo": "django/django",
  "instance_id": "django__django-15248",
  "base_commit": "f1905db6c0004a2b6c8b69c55a1f5f9da58ce2eb",
  "patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -116,7 +116,7 @@ def get_deleted_objects(objs, request, admin_site):\n         return [], {}, set(), []\n     else:\n         using = router.db_for_write(obj._meta.model)\n-    collector = NestedObjects(using=using)\n+    collector = NestedObjects(using=using, origin=objs)\n     collector.collect(objs)\n     perms_needed = set()\n \ndiff --git a/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py b/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py\n--- a/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py\n+++ b/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py\n@@ -51,7 +51,7 @@ def handle(self, **options):\n                     ct_info = []\n                     for ct in to_remove:\n                         ct_info.append('    - Content type for %s.%s' % (ct.app_label, ct.model))\n-                        collector = NoFastDeleteCollector(using=using)\n+                        collector = NoFastDeleteCollector(using=using, origin=ct)\n                         collector.collect([ct])\n \n                         for obj_type, objs in collector.data.items():\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -987,7 +987,7 @@ def delete(self, using=None, keep_parents=False):\n                 \"to None.\" % (self._meta.object_name, self._meta.pk.attname)\n             )\n         using = using or router.db_for_write(self.__class__, instance=self)\n-        collector = Collector(using=using)\n+        collector = Collector(using=using, origin=self)\n         collector.collect([self], keep_parents=keep_parents)\n         return collector.delete()\n \ndiff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -76,8 +76,10 @@ def get_candidate_relations_to_delete(opts):\n \n \n class Collector:\n-    def __init__(self, using):\n+    def __init__(self, using, origin=None):\n         self.using = using\n+        # A Model or QuerySet object.\n+        self.origin = origin\n         # Initially, {model: {instances}}, later values become lists.\n         self.data = defaultdict(set)\n         # {model: {(field, value): {instances}}}\n@@ -404,7 +406,8 @@ def delete(self):\n             for model, obj in self.instances_with_model():\n                 if not model._meta.auto_created:\n                     signals.pre_delete.send(\n-                        sender=model, instance=obj, using=self.using\n+                        sender=model, instance=obj, using=self.using,\n+                        origin=self.origin,\n                     )\n \n             # fast deletes\n@@ -435,7 +438,8 @@ def delete(self):\n                 if not model._meta.auto_created:\n                     for obj in instances:\n                         signals.post_delete.send(\n-                            sender=model, instance=obj, using=self.using\n+                            sender=model, instance=obj, using=self.using,\n+                            origin=self.origin,\n                         )\n \n         # update collected instances\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -753,7 +753,7 @@ def delete(self):\n         del_query.query.select_related = False\n         del_query.query.clear_ordering(force=True)\n \n-        collector = Collector(using=del_query.db)\n+        collector = Collector(using=del_query.db, origin=self)\n         collector.collect(del_query)\n         deleted, _rows_count = collector.delete()\n \n",
  "test_patch": "diff --git a/tests/signals/models.py b/tests/signals/models.py\n--- a/tests/signals/models.py\n+++ b/tests/signals/models.py\n@@ -30,3 +30,8 @@ class Book(models.Model):\n \n     def __str__(self):\n         return self.name\n+\n+\n+class Page(models.Model):\n+    book = models.ForeignKey(Book, on_delete=models.CASCADE)\n+    text = models.TextField()\ndiff --git a/tests/signals/tests.py b/tests/signals/tests.py\n--- a/tests/signals/tests.py\n+++ b/tests/signals/tests.py\n@@ -7,7 +7,7 @@\n from django.test import SimpleTestCase, TestCase\n from django.test.utils import isolate_apps\n \n-from .models import Author, Book, Car, Person\n+from .models import Author, Book, Car, Page, Person\n \n \n class BaseSignalSetup:\n@@ -118,9 +118,9 @@ def post_save_handler(signal, sender, instance, **kwargs):\n     def test_delete_signals(self):\n         data = []\n \n-        def pre_delete_handler(signal, sender, instance, **kwargs):\n+        def pre_delete_handler(signal, sender, instance, origin, **kwargs):\n             data.append(\n-                (instance, sender, instance.id is None)\n+                (instance, sender, instance.id is None, origin)\n             )\n \n         # #8285: signals can be any callable\n@@ -128,9 +128,9 @@ class PostDeleteHandler:\n             def __init__(self, data):\n                 self.data = data\n \n-            def __call__(self, signal, sender, instance, **kwargs):\n+            def __call__(self, signal, sender, instance, origin, **kwargs):\n                 self.data.append(\n-                    (instance, sender, instance.id is None)\n+                    (instance, sender, instance.id is None, origin)\n                 )\n         post_delete_handler = PostDeleteHandler(data)\n \n@@ -140,8 +140,8 @@ def __call__(self, signal, sender, instance, **kwargs):\n             p1 = Person.objects.create(first_name=\"John\", last_name=\"Smith\")\n             p1.delete()\n             self.assertEqual(data, [\n-                (p1, Person, False),\n-                (p1, Person, False),\n+                (p1, Person, False, p1),\n+                (p1, Person, False, p1),\n             ])\n             data[:] = []\n \n@@ -152,8 +152,8 @@ def __call__(self, signal, sender, instance, **kwargs):\n             p2.save()\n             p2.delete()\n             self.assertEqual(data, [\n-                (p2, Person, False),\n-                (p2, Person, False),\n+                (p2, Person, False, p2),\n+                (p2, Person, False, p2),\n             ])\n             data[:] = []\n \n@@ -167,6 +167,78 @@ def __call__(self, signal, sender, instance, **kwargs):\n             signals.pre_delete.disconnect(pre_delete_handler)\n             signals.post_delete.disconnect(post_delete_handler)\n \n+    def test_delete_signals_origin_model(self):\n+        data = []\n+\n+        def pre_delete_handler(signal, sender, instance, origin, **kwargs):\n+            data.append((sender, origin))\n+\n+        def post_delete_handler(signal, sender, instance, origin, **kwargs):\n+            data.append((sender, origin))\n+\n+        person = Person.objects.create(first_name='John', last_name='Smith')\n+        book = Book.objects.create(name='Rayuela')\n+        Page.objects.create(text='Page 1', book=book)\n+        Page.objects.create(text='Page 2', book=book)\n+\n+        signals.pre_delete.connect(pre_delete_handler, weak=False)\n+        signals.post_delete.connect(post_delete_handler, weak=False)\n+        try:\n+            # Instance deletion.\n+            person.delete()\n+            self.assertEqual(data, [(Person, person), (Person, person)])\n+            data[:] = []\n+            # Cascade deletion.\n+            book.delete()\n+            self.assertEqual(data, [\n+                (Page, book),\n+                (Page, book),\n+                (Book, book),\n+                (Page, book),\n+                (Page, book),\n+                (Book, book),\n+            ])\n+        finally:\n+            signals.pre_delete.disconnect(pre_delete_handler)\n+            signals.post_delete.disconnect(post_delete_handler)\n+\n+    def test_delete_signals_origin_queryset(self):\n+        data = []\n+\n+        def pre_delete_handler(signal, sender, instance, origin, **kwargs):\n+            data.append((sender, origin))\n+\n+        def post_delete_handler(signal, sender, instance, origin, **kwargs):\n+            data.append((sender, origin))\n+\n+        Person.objects.create(first_name='John', last_name='Smith')\n+        book = Book.objects.create(name='Rayuela')\n+        Page.objects.create(text='Page 1', book=book)\n+        Page.objects.create(text='Page 2', book=book)\n+\n+        signals.pre_delete.connect(pre_delete_handler, weak=False)\n+        signals.post_delete.connect(post_delete_handler, weak=False)\n+        try:\n+            # Queryset deletion.\n+            qs = Person.objects.all()\n+            qs.delete()\n+            self.assertEqual(data, [(Person, qs), (Person, qs)])\n+            data[:] = []\n+            # Cascade deletion.\n+            qs = Book.objects.all()\n+            qs.delete()\n+            self.assertEqual(data, [\n+                (Page, qs),\n+                (Page, qs),\n+                (Book, qs),\n+                (Page, qs),\n+                (Page, qs),\n+                (Book, qs),\n+            ])\n+        finally:\n+            signals.pre_delete.disconnect(pre_delete_handler)\n+            signals.post_delete.disconnect(post_delete_handler)\n+\n     def test_decorators(self):\n         data = []\n \n",
  "problem_statement": "Add ability to know where an object was deleted from to pre/post delete signals\nDescription\n\t\nSince deleting objects deletes related objects, it would be good to know the origin of the delete. \nIt lets the signal listeners know why an object is being delete. If it's deleted from a model.delete(), you know which instance initiated the delete and if it's from a queryset.delete() you know which queryset initiated the delete, with the models in that queryset. Using this you know if the instance is being deleted directly or because it's related to another instance.\n",
  "hints_text": "See a possibly related issue in #6870.\nChange UI/UX from NULL to False.\nChange Easy pickings from NULL to False.",
  "created_at": "2021-12-28T02:36:47Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_delete_signals (signals.tests.SignalTests)\", \"test_delete_signals_origin_model (signals.tests.SignalTests)\", \"test_delete_signals_origin_queryset (signals.tests.SignalTests)\"]",
  "PASS_TO_PASS": "[\"test_already_loaded_model (signals.tests.LazyModelRefTests)\", \"test_disconnect_registered_model (signals.tests.LazyModelRefTests)\", \"test_disconnect_unregistered_model (signals.tests.LazyModelRefTests)\", \"test_invalid_sender_model_name (signals.tests.LazyModelRefTests)\", \"test_not_loaded_model (signals.tests.LazyModelRefTests)\", \"Model signals registered with model classes as senders don't use the\", \"test_decorators (signals.tests.SignalTests)\", \"Signals that disconnect when being called don't mess future\", \"test_disconnect_model (signals.tests.SignalTests)\", \"test_lazy_model_signal (signals.tests.SignalTests)\", \"test_model_pre_init_and_post_init (signals.tests.SignalTests)\", \"test_save_and_delete_signals_with_m2m (signals.tests.SignalTests)\", \"test_save_signals (signals.tests.SignalTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.722315",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}