{
  "repo": "django/django",
  "instance_id": "django__django-15774",
  "base_commit": "d19a53d8e3640e8f937048bf7826c7e2229a9665",
  "patch": "diff --git a/django/utils/translation/trans_null.py b/django/utils/translation/trans_null.py\n--- a/django/utils/translation/trans_null.py\n+++ b/django/utils/translation/trans_null.py\n@@ -61,7 +61,7 @@ def get_language_from_path(request):\n \n \n def get_supported_language_variant(lang_code, strict=False):\n-    if lang_code == settings.LANGUAGE_CODE:\n+    if lang_code and lang_code.lower() == settings.LANGUAGE_CODE.lower():\n         return lang_code\n     else:\n         raise LookupError(lang_code)\ndiff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -478,8 +478,9 @@ def check_for_language(lang_code):\n def get_languages():\n     \"\"\"\n     Cache of settings.LANGUAGES in a dictionary for easy lookups by key.\n+    Convert keys to lowercase as they should be treated as case-insensitive.\n     \"\"\"\n-    return dict(settings.LANGUAGES)\n+    return {key.lower(): value for key, value in dict(settings.LANGUAGES).items()}\n \n \n @functools.lru_cache(maxsize=1000)\n@@ -510,7 +511,7 @@ def get_supported_language_variant(lang_code, strict=False):\n         supported_lang_codes = get_languages()\n \n         for code in possible_lang_codes:\n-            if code in supported_lang_codes and check_for_language(code):\n+            if code.lower() in supported_lang_codes and check_for_language(code):\n                 return code\n         if not strict:\n             # if fr-fr is not supported, try fr-ca.\n",
  "test_patch": "diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1902,9 +1902,10 @@ def test_parse_language_cookie(self):\n         USE_I18N=True,\n         LANGUAGES=[\n             (\"en\", \"English\"),\n+            (\"ar-dz\", \"Algerian Arabic\"),\n             (\"de\", \"German\"),\n             (\"de-at\", \"Austrian German\"),\n-            (\"pt-br\", \"Portuguese (Brazil)\"),\n+            (\"pt-BR\", \"Portuguese (Brazil)\"),\n         ],\n     )\n     def test_get_supported_language_variant_real(self):\n@@ -1915,8 +1916,11 @@ def test_get_supported_language_variant_real(self):\n         self.assertEqual(g(\"de-at\"), \"de-at\")\n         self.assertEqual(g(\"de-ch\"), \"de\")\n         self.assertEqual(g(\"pt-br\"), \"pt-br\")\n+        self.assertEqual(g(\"pt-BR\"), \"pt-BR\")\n         self.assertEqual(g(\"pt\"), \"pt-br\")\n         self.assertEqual(g(\"pt-pt\"), \"pt-br\")\n+        self.assertEqual(g(\"ar-dz\"), \"ar-dz\")\n+        self.assertEqual(g(\"ar-DZ\"), \"ar-DZ\")\n         with self.assertRaises(LookupError):\n             g(\"pt\", strict=True)\n         with self.assertRaises(LookupError):\n@@ -1946,7 +1950,6 @@ def test_get_supported_language_variant_null(self):\n         LANGUAGES=[\n             (\"en\", \"English\"),\n             (\"en-latn-us\", \"Latin English\"),\n-            (\"en-Latn-US\", \"BCP 47 case format\"),\n             (\"de\", \"German\"),\n             (\"de-1996\", \"German, orthography of 1996\"),\n             (\"de-at\", \"Austrian German\"),\n@@ -1970,6 +1973,7 @@ def test_get_language_from_path_real(self):\n             (\"/de/\", \"de\"),\n             (\"/de-1996/\", \"de-1996\"),\n             (\"/de-at/\", \"de-at\"),\n+            (\"/de-AT/\", \"de-AT\"),\n             (\"/de-ch/\", \"de\"),\n             (\"/de-ch-1901/\", \"de-ch-1901\"),\n             (\"/de-simple-page-test/\", None),\n",
  "problem_statement": "Django detects HTTP Accept-Language header in case-sensitive manner\nDescription\n\t\nThis issue was originally discussed in django-developers: ​https://groups.google.com/forum/#!topic/django-developers/1Y9LZSAOSnE\nPer ​w3c, ​rfc2616 and ​bcp47, Language tags should be parsed in case-insensitive, however, I noticed that Django detects HTTP Accept-Language headers in case-sensitive manner.\nFor example, the following headers:\nChrome: Accept-Language: zh-TW,zh;q=0.8,en-US;q=0.6,en;q=0.4\nFirefox: Accept-Language: zh-tw,zh;q=0.8,en-us;q=0.5,en;q=0.3\nDjango will correctly display Traditional Chinese for Chrome, but won't for Firefox because of lower-cased TW.\nThe fix contains two parts:\nFix potential case-sensitive places in code to follow case-insensitive (for example parse_accept_lang_header())\nFix ​documentation, correct the sentence \"Browsers send the names of the languages they accept in the Accept-Language HTTP header using this format. Examples: it, de-at, es, pt-br. Both the language and the country parts are in lower case. \", which obviously incorrect, Chrome uses tags like zh-TW, pt-BR.\n",
  "hints_text": "Case sensitivity should have been resolved by 2bab9d6d9ea095c4bcaeede2df576708afd46291 I have done some local tests and couldn't reproduce your issue. Having a failing test case would help.\nClosing as needsinfo.\nI've just hit this same problem today, here's some example code: views.py: class ExampleView(TemplateView): template_name = 'example.html' def get_context_data(self, **kwargs: Any) -> Dict[str, Any]: context = super().get_context_data(**kwargs) context['language_code'] = translation.get_language() # ^-- should be pt-BR, but is pt return context test_views.py def test_example_view(db, client): language_code = 'pt-BR' resp = client.get(reverse('example'), HTTP_ACCEPT_LANGUAGE=language_code) assert resp.context_data['language_code'] == language_code # ^-- AssertionError: pt-BR != pt The code path that's going wrong is: LocaleMiddleware.process_request calls translation.get_language_from_request get_language_from_request calls parse_accept_lang_header which turns pt-BR into pt-br get_language_from_request then calls get_supported_language_variant, passing pt-br as the lang_code get_supported_language_variant then runs if code in supported_lang_codes, which is False (note that 'pt-BR' in supported_lang_codes == True) get_supported_language_variant then returns the fallback lang_code pt\nI've created a simple reproduction using the above example code as a basis. You can find it here: ​https://github.com/danielsamuels/django_23689\nThanks for the test project!",
  "created_at": "2022-06-16T05:34:00Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_get_language_from_path_real (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_null (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_real (i18n.tests.MiscTests)\"]",
  "PASS_TO_PASS": "[\"test_lazy (i18n.tests.TestModels)\", \"test_safestr (i18n.tests.TestModels)\", \"test_check_for_language (i18n.tests.CountrySpecificLanguageTests)\", \"test_check_for_language_null (i18n.tests.CountrySpecificLanguageTests)\", \"test_get_language_from_request (i18n.tests.CountrySpecificLanguageTests)\", \"test_get_language_from_request_null (i18n.tests.CountrySpecificLanguageTests)\", \"test_specific_language_codes (i18n.tests.CountrySpecificLanguageTests)\", \"OSError is raised if the default language is unparseable.\", \"get_language_info return the first fallback language info if the lang_info\", \"test_localized_language_info (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code_and_country_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_only_country_code (i18n.tests.TestLanguageInfo)\", \"test_django_fallback (i18n.tests.DjangoFallbackResolutionOrderI18NTests)\", \"test_check_for_language (i18n.tests.NonDjangoLanguageTests)\", \"test_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"test_plural_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"test_ignores_non_mo_files (i18n.tests.TranslationFileChangedTests)\", \"test_resets_cache_with_mo_files (i18n.tests.TranslationFileChangedTests)\", \"test_round_away_from_one (i18n.tests.UtilsTests)\", \"test_streaming_response (i18n.tests.LocaleMiddlewareTests)\", \"test_bug14894_translation_activate_thread_safety (i18n.tests.TranslationThreadSafetyTests)\", \"Untranslated strings for territorial language variants use the\", \"test_i18n_app_dirs (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_app_dirs_ignore_django_apps (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_disabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_enabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_local_locale (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_locale_paths (i18n.tests.WatchForTranslationChangesTests)\", \"test_locale_paths_override_app_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"test_locale_paths_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"test_app_translation (i18n.tests.AppResolutionOrderI18NTests)\", \"After setting LANGUAGE, the cache should be cleared and languages\", \"With a non-English LANGUAGE_CODE and if the active language is English\", \"test_get_language_from_path_null (i18n.tests.MiscTests)\", \"test_i18n_patterns_returns_list (i18n.tests.MiscTests)\", \"Now test that we parse language preferences stored in a cookie correctly.\", \"Now test that we parse a literal HTTP header correctly.\", \"Testing HTTP header parsing. First, we test that we can parse the\", \"Some languages may have special fallbacks that don't follow the simple\", \"Subsequent language codes should be used when the language code is not\", \"Some browsers (Firefox, IE, etc.) use deprecated language codes. As these\", \"\\\"loading_app\\\" does not have translations for all languages provided by\", \"Empty value must stay empty after being translated (#23196).\", \"test_language_bidi (i18n.tests.TranslationTests)\", \"test_language_bidi_null (i18n.tests.TranslationTests)\", \"Format string interpolation should work with *_lazy objects.\", \"test_lazy_pickle (i18n.tests.TranslationTests)\", \"Translations on files with Mac or DOS end of lines will be converted\", \"Normally, French has 2 plurals. As other/locale/fr/LC_MESSAGES/django.po\", \"test_ngettext_lazy (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_bool (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_format_style (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_pickle (i18n.tests.TranslationTests)\", \"test_override (i18n.tests.TranslationTests)\", \"test_override_decorator (i18n.tests.TranslationTests)\", \"The language restored is the one used when the function was\", \"test_pgettext (i18n.tests.TranslationTests)\", \"Test plurals with ngettext. French differs from English in that 0 is singular.\", \"test_plural_null (i18n.tests.TranslationTests)\", \"Translating a string requiring no auto-escaping with gettext or pgettext\", \"test_to_language (i18n.tests.TranslationTests)\", \"test_to_locale (i18n.tests.TranslationTests)\", \"With i18n_patterns(..., prefix_default_language=False), the default\", \"A request for a nonexistent URL shouldn't cause a redirect to\", \"test_other_lang_with_prefix (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_page_with_dash (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_unprefixed_language_other_than_accept_language (i18n.tests.UnprefixedDefaultLanguageTests)\", \"The first input format for DATE_INPUT_FORMATS, TIME_INPUT_FORMATS, and\", \"test_all_format_strings (i18n.tests.FormattingTests)\", \"The active locale's formats take precedence over the default settings\", \"test_format_arbitrary_settings (i18n.tests.FormattingTests)\", \"test_get_custom_format (i18n.tests.FormattingTests)\", \"test_get_format_lazy_format (i18n.tests.FormattingTests)\", \"test_get_format_modules_lang (i18n.tests.FormattingTests)\", \"Tests the iter_format_modules function.\", \"Tests the iter_format_modules function always yields format modules in\", \"Catalan locale with format i18n disabled translations will be used,\", \"test_l10n_enabled (i18n.tests.FormattingTests)\", \"Localization of numbers\", \"Test the {% localize %} templatetag and the localize/unlocalize filters.\", \"Form input with 'as_hidden' or 'as_text' is correctly localized.\", \"Tests if form input is correctly localized\", \"test_localized_input_func (i18n.tests.FormattingTests)\", \"A string representation is returned for unlocalized numbers.\", \"Tests django.utils.formats.sanitize_separators.\", \"test_sanitize_strftime_format (i18n.tests.FormattingTests)\", \"test_sanitize_strftime_format_with_escaped_percent (i18n.tests.FormattingTests)\", \"Check if sublocales fall back to the main locale\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.740616",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}