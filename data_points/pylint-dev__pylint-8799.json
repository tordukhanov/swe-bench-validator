{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-8799",
  "base_commit": "b9ed113e31c9c938eb5dfb378e8c5b9dea2ff31b",
  "patch": "diff --git a/pylint/lint/run.py b/pylint/lint/run.py\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -175,9 +175,11 @@ def __init__(\n                 sys.exit(code)\n             return\n \n-        # Display help messages if there are no files to lint\n-        if not args:\n-            print(linter.help())\n+        # Display help if there are no files to lint or no checks enabled\n+        if not args or len(linter.config.disable) == len(\n+            linter.msgs_store._messages_definitions\n+        ):\n+            print(\"No files to lint: exiting.\")\n             sys.exit(32)\n \n         if linter.config.jobs < 0:\n",
  "test_patch": "diff --git a/tests/test_self.py b/tests/test_self.py\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -212,6 +212,11 @@ def test_nonexistent_config_file(self) -> None:\n     def test_error_missing_arguments(self) -> None:\n         self._runtest([], code=32)\n \n+    def test_disable_all(self) -> None:\n+        out = StringIO()\n+        self._runtest([UNNECESSARY_LAMBDA, \"--disable=all\"], out=out, code=32)\n+        assert \"No files to lint: exiting.\" in out.getvalue().strip()\n+\n     def test_no_out_encoding(self) -> None:\n         \"\"\"Test redirection of stdout with non ascii characters.\"\"\"\n         # This test reproduces bug #48066 ; it happens when stdout is redirected\n",
  "problem_statement": "Short circuit if all checks disabled\n### Bug description\n\nRunning \"pylint test.py --disable=all\" takes more than 3s!\r\n```sh\r\n$ touch test.py\r\n$ time pylint test.py --disable=all\r\n\r\nreal    0m3.684s\r\nuser    0m0.000s\r\nsys     0m0.015s\r\n```\r\nRunning pylint without \"disable=all\" on a little project (150-lines telegram bot) takes more than 8s. It is non-usable.\r\n```sh\r\n$ time pylint main.py\r\n************* Module main\r\nmain.py:137:7: R0133: Comparison between constants: '0 == 1' has a constant value (comparison-of-constants)\r\nmain.py:147:0: C0116: Missing function or method docstring (missing-function-docstring)\r\n\r\n------------------------------------------------------------------\r\nYour code has been rated at 9.57/10 (previous run: 9.57/10, +0.00)\r\n\r\n\r\nreal    0m8.352s\r\nuser    0m0.000s\r\nsys     0m0.000s\r\n```\n\n### Configuration\n\n_No response_\n\n### Command used\n\n```shell\npylint test.py\n```\n\n\n### Pylint output\n\n```shell\n...\n```\n\n\n### Expected behavior\n\nIt is unacceptable that even on an empty file pylint runs for at least 3 seconds. I use the VS Code extension in my project, which for a small example with a 150-line project reacts to changes in 8 (!) seconds. This is literally impossible to use.\n\n### Pylint version\n\n```shell\n$ pylint --version\r\npylint 2.17.4\r\nastroid 2.15.5\r\nPython 3.11.2 (tags/v3.11.2:878ead1, Feb  7 2023, 16:38:35) [MSC v.1934 64 bit (AMD64)]\n```\n\n\n### OS / Environment\n\nWindows 11\n\n### Additional dependencies\n\n_No response_\n",
  "hints_text": "Hello, are you using any particular libraries or code construct ? As it is it's going to be impossible to reproduce. \nThe gpt4free repository was cloned in this project, I added it to ignore in the .pylintrc file. This reduced the running time by only 2 seconds.\r\nChecking the file with \"\\n\":\r\n```sh\r\n$ echo \"\\n\" > test.py && time pylint test.py\r\n************* Module test\r\ntest.py:1:2: E0001: Parsing failed: 'unexpected character after line continuation character (<unknown>, line 1)' (syntax-error)\r\n\r\nreal    0m1.639s\r\nuser    0m0.000s\r\nsys     0m0.015s\r\n```\r\nChecking the bot file (150 lines):\r\n```sh\r\n$time pylint main.py\r\n************* Module main\r\nmain.py:137:7: R0133: Comparison between constants: '0 == 1' has a constant value (comparison-of-constants)\r\nmain.py:147:0: C0116: Missing function or method docstring (missing-function-docstring)\r\n\r\n------------------------------------------------------------------\r\nYour code has been rated at 9.57/10 (previous run: 9.57/10, +0.00)\r\n\r\n\r\nreal    0m6.689s\r\nuser    0m0.000s\r\nsys     0m0.031s\r\n```\r\nThere are no big files in the working directory.\r\nI created an empty file in empty folder, here is the output of pylint:\r\n```sh\r\n$ mkdir pylint-testing && cd pylint-testing\r\n\r\n$ touch test.py\r\n\r\n$ time pylint test.py --disable=all\r\n\r\nreal    0m1.616s\r\nuser    0m0.000s\r\nsys     0m0.015s\r\n\r\n$ time pylint test.py\r\n\r\nreal    0m1.592s\r\nuser    0m0.000s\r\nsys     0m0.000s\r\n```\r\nI don't think it's a problem of specific libraries. If you want me to share any logs or traces with you, let me know.\nI tested my code with flake8 and pycodestyle (aka pep8). There are results:\r\n```sh\r\n$ time flake8 main.py\r\nmain.py:27:80: E501 line too long (80 > 79 characters)\r\nmain.py:66:80: E501 line too long (82 > 79 characters)\r\nmain.py:80:80: E501 line too long (88 > 79 characters)\r\nmain.py:97:80: E501 line too long (81 > 79 characters)\r\nmain.py:114:67: E261 at least two spaces before inline comment\r\nmain.py:114:80: E501 line too long (111 > 79 characters)\r\nmain.py:118:80: E501 line too long (83 > 79 characters)\r\nmain.py:123:67: E261 at least two spaces before inline comment\r\nmain.py:123:80: E501 line too long (111 > 79 characters)\r\nmain.py:125:80: E501 line too long (85 > 79 characters)\r\nmain.py:127:80: E501 line too long (88 > 79 characters)\r\nmain.py:135:80: E501 line too long (98 > 79 characters)\r\nmain.py:137:15: E261 at least two spaces before inline comment\r\nmain.py:143:80: E501 line too long (82 > 79 characters)\r\n\r\nreal    0m0.673s\r\nuser    0m0.000s\r\nsys     0m0.000s\r\n```\r\n\r\n```sh\r\n$ time pycodestyle main.py\r\nmain.py:27:80: E501 line too long (80 > 79 characters)\r\nmain.py:66:80: E501 line too long (82 > 79 characters)\r\nmain.py:80:80: E501 line too long (88 > 79 characters)\r\nmain.py:97:80: E501 line too long (81 > 79 characters)\r\nmain.py:114:67: E261 at least two spaces before inline comment\r\nmain.py:114:80: E501 line too long (111 > 79 characters)\r\nmain.py:118:80: E501 line too long (83 > 79 characters)\r\nmain.py:123:67: E261 at least two spaces before inline comment\r\nmain.py:123:80: E501 line too long (111 > 79 characters)\r\nmain.py:125:80: E501 line too long (85 > 79 characters)\r\nmain.py:127:80: E501 line too long (88 > 79 characters)\r\nmain.py:135:80: E501 line too long (98 > 79 characters)\r\nmain.py:137:15: E261 at least two spaces before inline comment\r\nmain.py:143:80: E501 line too long (82 > 79 characters)\r\n\r\nreal    0m0.301s\r\nuser    0m0.015s\r\nsys     0m0.000s\r\n```\r\n\r\nI understand that pylint does a deeper analysis, but that shouldn't increase the check time by 6 seconds.\nDuplicate of #5933 @Pierre-Sassoulas ?\nOr https://github.com/pylint-dev/astroid/issues/2161, but I don't think those perf issues are *that* bad so I suppose it's a pathological case on a specific lib / code construct and not a duplicate.\nCould you use a profiler like cProfile and post the result? You can profile:\n\nfrom pylint.lint import Run\nRun([\"a.py\", \"disable=all\"])\n\n\n> There are no big files in the working directory.\r\n\r\nThe size of the files is not material; it's what they import. If you import pandas, pylint is going to parse and replace the AST for pandas. That's going to take some time--it's part of pylint's distinct value proposition versus ruff, flake8, etc.\r\n\r\nThat said, I've seen a sprinkle of bug reports about `--disable=all` taking non-trivial time, so we may as well short circuit and just print the help message if a user disables everything.\nI rescoped it to \"short circuit if all checks disabled\" to make it actionable, but if you have a specific import statement you can share to advance the investigation, feel free to provide it. Otherwise it would be a duplicate of #5835 or #1416. Thanks.",
  "created_at": "2023-06-26T13:57:28Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"tests/test_self.py::TestRunTC::test_disable_all\"]",
  "PASS_TO_PASS": "[\"tests/test_self.py::TestRunTC::test_pkginfo\", \"tests/test_self.py::TestRunTC::test_all\", \"tests/test_self.py::TestRunTC::test_no_ext_file\", \"tests/test_self.py::TestRunTC::test_w0704_ignored\", \"tests/test_self.py::TestRunTC::test_exit_zero\", \"tests/test_self.py::TestRunTC::test_nonexistent_config_file\", \"tests/test_self.py::TestRunTC::test_error_missing_arguments\", \"tests/test_self.py::TestRunTC::test_no_out_encoding\", \"tests/test_self.py::TestRunTC::test_parallel_execution\", \"tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments\", \"tests/test_self.py::TestRunTC::test_enable_all_works\", \"tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled\", \"tests/test_self.py::TestRunTC::test_type_annotation_names\", \"tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports\", \"tests/test_self.py::TestRunTC::test_reject_empty_indent_strings\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing\", \"tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes\", \"tests/test_self.py::TestRunTC::test_information_category_disabled_by_default\", \"tests/test_self.py::TestRunTC::test_error_mode_shows_no_score\", \"tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default\", \"tests/test_self.py::TestRunTC::test_confidence_levels\", \"tests/test_self.py::TestRunTC::test_bom_marker\", \"tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options\", \"tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values\", \"tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults\", \"tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8\", \"tests/test_self.py::TestRunTC::test_parseable_file_path\", \"tests/test_self.py::TestRunTC::test_stdin[/mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin_missing_modulename\", \"tests/test_self.py::TestRunTC::test_relative_imports[False]\", \"tests/test_self.py::TestRunTC::test_relative_imports[True]\", \"tests/test_self.py::TestRunTC::test_stdin_syntax_error\", \"tests/test_self.py::TestRunTC::test_version\", \"tests/test_self.py::TestRunTC::test_fail_under\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-broad-exception-caught-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-broad-exception-caught-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-broad-exception-caught-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-broad-exception-caught-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0116-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-fake1,C,fake2-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0115-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts2-16]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts3-16]\", \"tests/test_self.py::TestRunTC::test_modify_sys_path\", \"tests/test_self.py::TestRunTC::test_plugin_that_imports_from_open\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args0]\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args1]\", \"tests/test_self.py::TestRunTC::test_import_plugin_from_local_directory_if_pythonpath_cwd\", \"tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check\", \"tests/test_self.py::TestRunTC::test_can_list_directories_without_dunder_init\", \"tests/test_self.py::TestRunTC::test_jobs_score\", \"tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath\", \"tests/test_self.py::TestRunTC::test_output_file_valid_path\", \"tests/test_self.py::TestRunTC::test_output_file_invalid_path_exits_with_code_32\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args3-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args4-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args5-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args6-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args7-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args8-22]\", \"tests/test_self.py::TestRunTC::test_one_module_fatal_error\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args3-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args4-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args5-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args6-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args7-1]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args8-1]\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[text-{path}:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[parseable-{path}:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[msvs-{path}(4):\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[colorized-{path}:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json-\\\"message\\\":\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_custom_reporter\", \"tests/test_self.py::TestRunTC::test_output_file_specified_in_rcfile\", \"tests/test_self.py::TestRunTC::test_load_text_repoter_if_not_provided\", \"tests/test_self.py::TestRunTC::test_regex_paths_csv_validator\", \"tests/test_self.py::TestRunTC::test_recursive\", \"tests/test_self.py::TestRunTC::test_recursive_globbing\", \"tests/test_self.py::TestRunTC::test_ignore_recursive[ignored_subdirectory]\", \"tests/test_self.py::TestRunTC::test_ignore_recursive[failing.py]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[ignored_.*]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[failing.*]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_from_stdin\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*ignored.*]\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*failing.*]\", \"tests/test_self.py::TestRunTC::test_recursive_current_dir\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive_current_dir\", \"tests/test_self.py::TestRunTC::test_syntax_error_invalid_encoding\", \"tests/test_self.py::TestRunTC::test_encoding[good.py-]\", \"tests/test_self.py::TestRunTC::test_encoding[bad_wrong_num.py-(syntax-error)]\", \"tests/test_self.py::TestRunTC::test_encoding[bad_missing_num.py-(bad-file-encoding)]\", \"tests/test_self.py::TestRunTC::test_line_too_long_useless_suppression\", \"tests/test_self.py::TestRunTC::test_output_no_header\", \"tests/test_self.py::TestRunTC::test_no_name_in_module\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command0-Emittable\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command1-Enabled\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command2-nonascii-checker]\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command3-Confidence(name='HIGH',\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command4-pylint.extensions.empty_comment]\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command5-Pylint\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command6-Environment\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args0-:unreachable\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args1-No\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args2---help-msg:\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args3-:invalid-name\", \"tests/test_self.py::TestCallbackOptions::test_generate_rcfile\", \"tests/test_self.py::TestCallbackOptions::test_generate_config_disable_symbolic_names\", \"tests/test_self.py::TestCallbackOptions::test_generate_toml_config\", \"tests/test_self.py::TestCallbackOptions::test_generate_toml_config_disable_symbolic_names\", \"tests/test_self.py::TestCallbackOptions::test_errors_only\", \"tests/test_self.py::TestCallbackOptions::test_errors_only_functions_as_disable\", \"tests/test_self.py::TestCallbackOptions::test_verbose\", \"tests/test_self.py::TestCallbackOptions::test_enable_all_extensions\"]",
  "environment_setup_commit": "a0ce6e424e3a208f3aed1cbf6e16c40853bec3c0",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.919479",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}