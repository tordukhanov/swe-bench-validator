{
  "repo": "django/django",
  "instance_id": "django__django-15752",
  "base_commit": "a3a1290d47326c3f87824b3cf7ca969cb0d364aa",
  "patch": "diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -3,6 +3,7 @@\n not in INSTALLED_APPS.\n \"\"\"\n import unicodedata\n+import warnings\n \n from django.contrib.auth import password_validation\n from django.contrib.auth.hashers import (\n@@ -12,6 +13,7 @@\n )\n from django.db import models\n from django.utils.crypto import get_random_string, salted_hmac\n+from django.utils.deprecation import RemovedInDjango51Warning\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -40,6 +42,11 @@ def make_random_password(\n         allowed_chars. The default value of allowed_chars does not have \"I\" or\n         \"O\" or letters and digits that look similar -- just to avoid confusion.\n         \"\"\"\n+        warnings.warn(\n+            \"BaseUserManager.make_random_password() is deprecated.\",\n+            category=RemovedInDjango51Warning,\n+            stacklevel=2,\n+        )\n         return get_random_string(length, allowed_chars)\n \n     def get_by_natural_key(self, username):\n",
  "test_patch": "diff --git a/tests/auth_tests/test_models.py b/tests/auth_tests/test_models.py\n--- a/tests/auth_tests/test_models.py\n+++ b/tests/auth_tests/test_models.py\n@@ -18,6 +18,8 @@\n from django.db.migrations.state import ModelState, ProjectState\n from django.db.models.signals import post_save\n from django.test import SimpleTestCase, TestCase, TransactionTestCase, override_settings\n+from django.test.utils import ignore_warnings\n+from django.utils.deprecation import RemovedInDjango51Warning\n \n from .models import CustomEmailField, IntegerUsernameUser\n \n@@ -164,6 +166,7 @@ def test_create_superuser_raises_error_on_false_is_staff(self):\n                 is_staff=False,\n             )\n \n+    @ignore_warnings(category=RemovedInDjango51Warning)\n     def test_make_random_password(self):\n         allowed_chars = \"abcdefg\"\n         password = UserManager().make_random_password(5, allowed_chars)\n@@ -171,6 +174,11 @@ def test_make_random_password(self):\n         for char in password:\n             self.assertIn(char, allowed_chars)\n \n+    def test_make_random_password_warning(self):\n+        msg = \"BaseUserManager.make_random_password() is deprecated.\"\n+        with self.assertWarnsMessage(RemovedInDjango51Warning, msg):\n+            UserManager().make_random_password()\n+\n     def test_runpython_manager_methods(self):\n         def forwards(apps, schema_editor):\n             UserModel = apps.get_model(\"auth\", \"User\")\n",
  "problem_statement": "Deprecate make_random_password().\nDescription\n\t \n\t\t(last modified by Carlton Gibson)\n\t \nIt's unused since fcd837cd0f9b2c706bc49af509628778d442bb3f, see also Carlton's comment.\n",
  "hints_text": "Hello all, I've opened a PR for this â€‹https://github.com/django/django/pull/15752, this is my first contribution so go easy on me :). Appreciate any feedback on the code change and also on whether I've followed correct procedure. Thanks.",
  "created_at": "2022-06-02T13:41:54Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_make_random_password_warning (auth_tests.test_models.UserManagerTestCase)\"]",
  "PASS_TO_PASS": "[\"test_load_data_with_user_permissions (auth_tests.test_models.LoadDataWithNaturalKeysAndMultipleDatabasesTestCase)\", \"test_create_superuser (auth_tests.test_models.TestCreateSuperUserSignals)\", \"test_create_user (auth_tests.test_models.TestCreateSuperUserSignals)\", \"test_group_natural_key (auth_tests.test_models.NaturalKeysTestCase)\", \"test_user_natural_key (auth_tests.test_models.NaturalKeysTestCase)\", \"test_check_password (auth_tests.test_models.AnonymousUserTests)\", \"test_delete (auth_tests.test_models.AnonymousUserTests)\", \"test_eq (auth_tests.test_models.AnonymousUserTests)\", \"test_hash (auth_tests.test_models.AnonymousUserTests)\", \"test_int (auth_tests.test_models.AnonymousUserTests)\", \"test_properties (auth_tests.test_models.AnonymousUserTests)\", \"test_save (auth_tests.test_models.AnonymousUserTests)\", \"test_set_password (auth_tests.test_models.AnonymousUserTests)\", \"test_str (auth_tests.test_models.AnonymousUserTests)\", \"test_str (auth_tests.test_models.PermissionTests)\", \"test_str (auth_tests.test_models.GroupTests)\", \"test_backend_without_with_perm (auth_tests.test_models.UserWithPermTestCase)\", \"test_basic (auth_tests.test_models.UserWithPermTestCase)\", \"test_custom_backend (auth_tests.test_models.UserWithPermTestCase)\", \"test_custom_backend_pass_obj (auth_tests.test_models.UserWithPermTestCase)\", \"test_invalid_backend_type (auth_tests.test_models.UserWithPermTestCase)\", \"test_invalid_permission_name (auth_tests.test_models.UserWithPermTestCase)\", \"test_invalid_permission_type (auth_tests.test_models.UserWithPermTestCase)\", \"test_multiple_backends (auth_tests.test_models.UserWithPermTestCase)\", \"test_nonexistent_backend (auth_tests.test_models.UserWithPermTestCase)\", \"test_nonexistent_permission (auth_tests.test_models.UserWithPermTestCase)\", \"test_builtin_user_isactive (auth_tests.test_models.IsActiveTestCase)\", \"tests that the default value for is_active is provided\", \"test_clean_normalize_username (auth_tests.test_models.AbstractBaseUserTests)\", \"test_custom_email (auth_tests.test_models.AbstractBaseUserTests)\", \"test_default_email (auth_tests.test_models.AbstractBaseUserTests)\", \"Passwords are usable even if they don't correspond to a hasher in\", \"test_normalize_username (auth_tests.test_models.AbstractBaseUserTests)\", \"test_user_is_created_and_added_to_group (auth_tests.test_models.LoadDataWithoutNaturalKeysTestCase)\", \"test_user_is_created_and_added_to_group (auth_tests.test_models.LoadDataWithNaturalKeysTestCase)\", \"test_create_super_user_raises_error_on_false_is_superuser (auth_tests.test_models.UserManagerTestCase)\", \"test_create_superuser_raises_error_on_false_is_staff (auth_tests.test_models.UserManagerTestCase)\", \"test_create_user (auth_tests.test_models.UserManagerTestCase)\", \"test_create_user_email_domain_normalize (auth_tests.test_models.UserManagerTestCase)\", \"test_create_user_email_domain_normalize_rfc3696 (auth_tests.test_models.UserManagerTestCase)\", \"test_create_user_email_domain_normalize_with_whitespace (auth_tests.test_models.UserManagerTestCase)\", \"test_create_user_is_staff (auth_tests.test_models.UserManagerTestCase)\", \"test_empty_username (auth_tests.test_models.UserManagerTestCase)\", \"test_make_random_password (auth_tests.test_models.UserManagerTestCase)\", \"test_runpython_manager_methods (auth_tests.test_models.UserManagerTestCase)\", \"password_changed() shouldn't be called if User.check_password()\", \"test_email_user (auth_tests.test_models.AbstractUserTestCase)\", \"test_last_login_default (auth_tests.test_models.AbstractUserTestCase)\", \"test_user_clean_normalize_email (auth_tests.test_models.AbstractUserTestCase)\", \"Calling user.save() twice should trigger password_changed() once.\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.740243",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}