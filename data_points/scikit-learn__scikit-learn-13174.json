{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13174",
  "base_commit": "09bc27630fb8feea2f10627dce25e93cd6ff258a",
  "patch": "diff --git a/sklearn/ensemble/weight_boosting.py b/sklearn/ensemble/weight_boosting.py\n--- a/sklearn/ensemble/weight_boosting.py\n+++ b/sklearn/ensemble/weight_boosting.py\n@@ -30,16 +30,15 @@\n from scipy.special import xlogy\n \n from .base import BaseEnsemble\n-from ..base import ClassifierMixin, RegressorMixin, is_regressor, is_classifier\n+from ..base import ClassifierMixin, RegressorMixin, is_classifier, is_regressor\n \n-from .forest import BaseForest\n from ..tree import DecisionTreeClassifier, DecisionTreeRegressor\n-from ..tree.tree import BaseDecisionTree\n-from ..tree._tree import DTYPE\n-from ..utils import check_array, check_X_y, check_random_state\n+from ..utils import check_array, check_random_state, check_X_y, safe_indexing\n from ..utils.extmath import stable_cumsum\n from ..metrics import accuracy_score, r2_score\n-from sklearn.utils.validation import has_fit_parameter, check_is_fitted\n+from ..utils.validation import check_is_fitted\n+from ..utils.validation import has_fit_parameter\n+from ..utils.validation import _num_samples\n \n __all__ = [\n     'AdaBoostClassifier',\n@@ -70,6 +69,26 @@ def __init__(self,\n         self.learning_rate = learning_rate\n         self.random_state = random_state\n \n+    def _validate_data(self, X, y=None):\n+\n+        # Accept or convert to these sparse matrix formats so we can\n+        # use safe_indexing\n+        accept_sparse = ['csr', 'csc']\n+        if y is None:\n+            ret = check_array(X,\n+                              accept_sparse=accept_sparse,\n+                              ensure_2d=False,\n+                              allow_nd=True,\n+                              dtype=None)\n+        else:\n+            ret = check_X_y(X, y,\n+                            accept_sparse=accept_sparse,\n+                            ensure_2d=False,\n+                            allow_nd=True,\n+                            dtype=None,\n+                            y_numeric=is_regressor(self))\n+        return ret\n+\n     def fit(self, X, y, sample_weight=None):\n         \"\"\"Build a boosted classifier/regressor from the training set (X, y).\n \n@@ -77,9 +96,7 @@ def fit(self, X, y, sample_weight=None):\n         ----------\n         X : {array-like, sparse matrix} of shape = [n_samples, n_features]\n             The training input samples. Sparse matrix can be CSC, CSR, COO,\n-            DOK, or LIL. COO, DOK, and LIL are converted to CSR. The dtype is\n-            forced to DTYPE from tree._tree if the base classifier of this\n-            ensemble weighted boosting classifier is a tree or forest.\n+            DOK, or LIL. COO, DOK, and LIL are converted to CSR.\n \n         y : array-like of shape = [n_samples]\n             The target values (class labels in classification, real numbers in\n@@ -97,22 +114,12 @@ def fit(self, X, y, sample_weight=None):\n         if self.learning_rate <= 0:\n             raise ValueError(\"learning_rate must be greater than zero\")\n \n-        if (self.base_estimator is None or\n-                isinstance(self.base_estimator, (BaseDecisionTree,\n-                                                 BaseForest))):\n-            dtype = DTYPE\n-            accept_sparse = 'csc'\n-        else:\n-            dtype = None\n-            accept_sparse = ['csr', 'csc']\n-\n-        X, y = check_X_y(X, y, accept_sparse=accept_sparse, dtype=dtype,\n-                         y_numeric=is_regressor(self))\n+        X, y = self._validate_data(X, y)\n \n         if sample_weight is None:\n             # Initialize weights to 1 / n_samples\n-            sample_weight = np.empty(X.shape[0], dtype=np.float64)\n-            sample_weight[:] = 1. / X.shape[0]\n+            sample_weight = np.empty(_num_samples(X), dtype=np.float64)\n+            sample_weight[:] = 1. / _num_samples(X)\n         else:\n             sample_weight = check_array(sample_weight, ensure_2d=False)\n             # Normalize existing weights\n@@ -216,7 +223,7 @@ def staged_score(self, X, y, sample_weight=None):\n         ----------\n         X : {array-like, sparse matrix} of shape = [n_samples, n_features]\n             The training input samples. Sparse matrix can be CSC, CSR, COO,\n-            DOK, or LIL. DOK and LIL are converted to CSR.\n+            DOK, or LIL. COO, DOK, and LIL are converted to CSR.\n \n         y : array-like, shape = [n_samples]\n             Labels for X.\n@@ -228,6 +235,8 @@ def staged_score(self, X, y, sample_weight=None):\n         -------\n         z : float\n         \"\"\"\n+        X = self._validate_data(X)\n+\n         for y_pred in self.staged_predict(X):\n             if is_classifier(self):\n                 yield accuracy_score(y, y_pred, sample_weight=sample_weight)\n@@ -259,18 +268,6 @@ def feature_importances_(self):\n                 \"since base_estimator does not have a \"\n                 \"feature_importances_ attribute\")\n \n-    def _validate_X_predict(self, X):\n-        \"\"\"Ensure that X is in the proper format\"\"\"\n-        if (self.base_estimator is None or\n-                isinstance(self.base_estimator,\n-                           (BaseDecisionTree, BaseForest))):\n-            X = check_array(X, accept_sparse='csr', dtype=DTYPE)\n-\n-        else:\n-            X = check_array(X, accept_sparse=['csr', 'csc', 'coo'])\n-\n-        return X\n-\n \n def _samme_proba(estimator, n_classes, X):\n     \"\"\"Calculate algorithm 4, step 2, equation c) of Zhu et al [1].\n@@ -391,7 +388,7 @@ def fit(self, X, y, sample_weight=None):\n         ----------\n         X : {array-like, sparse matrix} of shape = [n_samples, n_features]\n             The training input samples. Sparse matrix can be CSC, CSR, COO,\n-            DOK, or LIL. DOK and LIL are converted to CSR.\n+            DOK, or LIL. COO, DOK, and LIL are converted to CSR.\n \n         y : array-like of shape = [n_samples]\n             The target values (class labels).\n@@ -442,8 +439,7 @@ def _boost(self, iboost, X, y, sample_weight, random_state):\n             The index of the current boost iteration.\n \n         X : {array-like, sparse matrix} of shape = [n_samples, n_features]\n-            The training input samples. Sparse matrix can be CSC, CSR, COO,\n-            DOK, or LIL. DOK and LIL are converted to CSR.\n+            The training input samples.\n \n         y : array-like of shape = [n_samples]\n             The target values (class labels).\n@@ -591,13 +587,15 @@ def predict(self, X):\n         ----------\n         X : {array-like, sparse matrix} of shape = [n_samples, n_features]\n             The training input samples. Sparse matrix can be CSC, CSR, COO,\n-            DOK, or LIL. DOK and LIL are converted to CSR.\n+            DOK, or LIL. COO, DOK, and LIL are converted to CSR.\n \n         Returns\n         -------\n         y : array of shape = [n_samples]\n             The predicted classes.\n         \"\"\"\n+        X = self._validate_data(X)\n+\n         pred = self.decision_function(X)\n \n         if self.n_classes_ == 2:\n@@ -618,13 +616,16 @@ def staged_predict(self, X):\n         Parameters\n         ----------\n         X : array-like of shape = [n_samples, n_features]\n-            The input samples.\n+            The input samples. Sparse matrix can be CSC, CSR, COO,\n+            DOK, or LIL. COO, DOK, and LIL are converted to CSR.\n \n         Returns\n         -------\n         y : generator of array, shape = [n_samples]\n             The predicted classes.\n         \"\"\"\n+        X = self._validate_data(X)\n+\n         n_classes = self.n_classes_\n         classes = self.classes_\n \n@@ -644,7 +645,7 @@ def decision_function(self, X):\n         ----------\n         X : {array-like, sparse matrix} of shape = [n_samples, n_features]\n             The training input samples. Sparse matrix can be CSC, CSR, COO,\n-            DOK, or LIL. DOK and LIL are converted to CSR.\n+            DOK, or LIL. COO, DOK, and LIL are converted to CSR.\n \n         Returns\n         -------\n@@ -657,7 +658,7 @@ def decision_function(self, X):\n             class in ``classes_``, respectively.\n         \"\"\"\n         check_is_fitted(self, \"n_classes_\")\n-        X = self._validate_X_predict(X)\n+        X = self._validate_data(X)\n \n         n_classes = self.n_classes_\n         classes = self.classes_[:, np.newaxis]\n@@ -687,7 +688,7 @@ def staged_decision_function(self, X):\n         ----------\n         X : {array-like, sparse matrix} of shape = [n_samples, n_features]\n             The training input samples. Sparse matrix can be CSC, CSR, COO,\n-            DOK, or LIL. DOK and LIL are converted to CSR.\n+            DOK, or LIL. COO, DOK, and LIL are converted to CSR.\n \n         Returns\n         -------\n@@ -700,7 +701,7 @@ def staged_decision_function(self, X):\n             class in ``classes_``, respectively.\n         \"\"\"\n         check_is_fitted(self, \"n_classes_\")\n-        X = self._validate_X_predict(X)\n+        X = self._validate_data(X)\n \n         n_classes = self.n_classes_\n         classes = self.classes_[:, np.newaxis]\n@@ -741,7 +742,7 @@ def predict_proba(self, X):\n         ----------\n         X : {array-like, sparse matrix} of shape = [n_samples, n_features]\n             The training input samples. Sparse matrix can be CSC, CSR, COO,\n-            DOK, or LIL. DOK and LIL are converted to CSR.\n+            DOK, or LIL. COO, DOK, and LIL are converted to CSR.\n \n         Returns\n         -------\n@@ -750,12 +751,12 @@ def predict_proba(self, X):\n             outputs is the same of that of the `classes_` attribute.\n         \"\"\"\n         check_is_fitted(self, \"n_classes_\")\n+        X = self._validate_data(X)\n \n         n_classes = self.n_classes_\n-        X = self._validate_X_predict(X)\n \n         if n_classes == 1:\n-            return np.ones((X.shape[0], 1))\n+            return np.ones((_num_samples(X), 1))\n \n         if self.algorithm == 'SAMME.R':\n             # The weights are all 1. for SAMME.R\n@@ -790,7 +791,7 @@ def staged_predict_proba(self, X):\n         ----------\n         X : {array-like, sparse matrix} of shape = [n_samples, n_features]\n             The training input samples. Sparse matrix can be CSC, CSR, COO,\n-            DOK, or LIL. DOK and LIL are converted to CSR.\n+            DOK, or LIL. COO, DOK, and LIL are converted to CSR.\n \n         Returns\n         -------\n@@ -798,7 +799,7 @@ def staged_predict_proba(self, X):\n             The class probabilities of the input samples. The order of\n             outputs is the same of that of the `classes_` attribute.\n         \"\"\"\n-        X = self._validate_X_predict(X)\n+        X = self._validate_data(X)\n \n         n_classes = self.n_classes_\n         proba = None\n@@ -837,7 +838,7 @@ def predict_log_proba(self, X):\n         ----------\n         X : {array-like, sparse matrix} of shape = [n_samples, n_features]\n             The training input samples. Sparse matrix can be CSC, CSR, COO,\n-            DOK, or LIL. DOK and LIL are converted to CSR.\n+            DOK, or LIL. COO, DOK, and LIL are converted to CSR.\n \n         Returns\n         -------\n@@ -845,6 +846,7 @@ def predict_log_proba(self, X):\n             The class probabilities of the input samples. The order of\n             outputs is the same of that of the `classes_` attribute.\n         \"\"\"\n+        X = self._validate_data(X)\n         return np.log(self.predict_proba(X))\n \n \n@@ -937,7 +939,7 @@ def fit(self, X, y, sample_weight=None):\n         ----------\n         X : {array-like, sparse matrix} of shape = [n_samples, n_features]\n             The training input samples. Sparse matrix can be CSC, CSR, COO,\n-            DOK, or LIL. DOK and LIL are converted to CSR.\n+            DOK, or LIL. COO, DOK, and LIL are converted to CSR.\n \n         y : array-like of shape = [n_samples]\n             The target values (real numbers).\n@@ -975,8 +977,7 @@ def _boost(self, iboost, X, y, sample_weight, random_state):\n             The index of the current boost iteration.\n \n         X : {array-like, sparse matrix} of shape = [n_samples, n_features]\n-            The training input samples. Sparse matrix can be CSC, CSR, COO,\n-            DOK, or LIL. DOK and LIL are converted to CSR.\n+            The training input samples.\n \n         y : array-like of shape = [n_samples]\n             The target values (class labels in classification, real numbers in\n@@ -1008,14 +1009,16 @@ def _boost(self, iboost, X, y, sample_weight, random_state):\n         # For NumPy >= 1.7.0 use np.random.choice\n         cdf = stable_cumsum(sample_weight)\n         cdf /= cdf[-1]\n-        uniform_samples = random_state.random_sample(X.shape[0])\n+        uniform_samples = random_state.random_sample(_num_samples(X))\n         bootstrap_idx = cdf.searchsorted(uniform_samples, side='right')\n         # searchsorted returns a scalar\n         bootstrap_idx = np.array(bootstrap_idx, copy=False)\n \n         # Fit on the bootstrapped sample and obtain a prediction\n         # for all samples in the training set\n-        estimator.fit(X[bootstrap_idx], y[bootstrap_idx])\n+        X_ = safe_indexing(X, bootstrap_idx)\n+        y_ = safe_indexing(y, bootstrap_idx)\n+        estimator.fit(X_, y_)\n         y_predict = estimator.predict(X)\n \n         error_vect = np.abs(y_predict - y)\n@@ -1067,10 +1070,10 @@ def _get_median_predict(self, X, limit):\n         median_or_above = weight_cdf >= 0.5 * weight_cdf[:, -1][:, np.newaxis]\n         median_idx = median_or_above.argmax(axis=1)\n \n-        median_estimators = sorted_idx[np.arange(X.shape[0]), median_idx]\n+        median_estimators = sorted_idx[np.arange(_num_samples(X)), median_idx]\n \n         # Return median predictions\n-        return predictions[np.arange(X.shape[0]), median_estimators]\n+        return predictions[np.arange(_num_samples(X)), median_estimators]\n \n     def predict(self, X):\n         \"\"\"Predict regression value for X.\n@@ -1082,7 +1085,7 @@ def predict(self, X):\n         ----------\n         X : {array-like, sparse matrix} of shape = [n_samples, n_features]\n             The training input samples. Sparse matrix can be CSC, CSR, COO,\n-            DOK, or LIL. DOK and LIL are converted to CSR.\n+            DOK, or LIL. COO, DOK, and LIL are converted to CSR.\n \n         Returns\n         -------\n@@ -1090,7 +1093,7 @@ def predict(self, X):\n             The predicted regression values.\n         \"\"\"\n         check_is_fitted(self, \"estimator_weights_\")\n-        X = self._validate_X_predict(X)\n+        X = self._validate_data(X)\n \n         return self._get_median_predict(X, len(self.estimators_))\n \n@@ -1107,8 +1110,7 @@ def staged_predict(self, X):\n         Parameters\n         ----------\n         X : {array-like, sparse matrix} of shape = [n_samples, n_features]\n-            The training input samples. Sparse matrix can be CSC, CSR, COO,\n-            DOK, or LIL. DOK and LIL are converted to CSR.\n+            The training input samples.\n \n         Returns\n         -------\n@@ -1116,7 +1118,7 @@ def staged_predict(self, X):\n             The predicted regression values.\n         \"\"\"\n         check_is_fitted(self, \"estimator_weights_\")\n-        X = self._validate_X_predict(X)\n+        X = self._validate_data(X)\n \n         for i, _ in enumerate(self.estimators_, 1):\n             yield self._get_median_predict(X, limit=i)\n",
  "test_patch": "diff --git a/sklearn/ensemble/tests/test_weight_boosting.py b/sklearn/ensemble/tests/test_weight_boosting.py\n--- a/sklearn/ensemble/tests/test_weight_boosting.py\n+++ b/sklearn/ensemble/tests/test_weight_boosting.py\n@@ -471,7 +471,6 @@ def fit(self, X, y, sample_weight=None):\n def test_sample_weight_adaboost_regressor():\n     \"\"\"\n     AdaBoostRegressor should work without sample_weights in the base estimator\n-\n     The random weighted sampling is done internally in the _boost method in\n     AdaBoostRegressor.\n     \"\"\"\n@@ -486,3 +485,27 @@ def predict(self, X):\n     boost = AdaBoostRegressor(DummyEstimator(), n_estimators=3)\n     boost.fit(X, y_regr)\n     assert_equal(len(boost.estimator_weights_), len(boost.estimator_errors_))\n+\n+\n+def test_multidimensional_X():\n+    \"\"\"\n+    Check that the AdaBoost estimators can work with n-dimensional\n+    data matrix\n+    \"\"\"\n+\n+    from sklearn.dummy import DummyClassifier, DummyRegressor\n+\n+    rng = np.random.RandomState(0)\n+\n+    X = rng.randn(50, 3, 3)\n+    yc = rng.choice([0, 1], 50)\n+    yr = rng.randn(50)\n+\n+    boost = AdaBoostClassifier(DummyClassifier(strategy='most_frequent'))\n+    boost.fit(X, yc)\n+    boost.predict(X)\n+    boost.predict_proba(X)\n+\n+    boost = AdaBoostRegressor(DummyRegressor())\n+    boost.fit(X, yr)\n+    boost.predict(X)\n",
  "problem_statement": "Minimize validation of X in ensembles with a base estimator\nCurrently AdaBoost\\* requires `X` to be an array or sparse matrix of numerics. However, since the data is not processed directly by `AdaBoost*` but by its base estimator (on which `fit`, `predict_proba` and `predict` may be called), we should not need to constrain the data that much, allowing for `X` to be a list of text blobs or similar.\r\n\r\nSimilar may apply to other ensemble methods.\r\n\r\nDerived from #7767.\r\n\n",
  "hints_text": "That could be applied to any meta-estimator that uses a base estimator, right?\n\nYes, it could be. I didn't have time when I wrote this issue to check the applicability to other ensembles.\n\nUpdated title and description\n\n@jnothman I think that we have two options.\n- Validate the input early as it is now and introduce a new parameter `check_input`  in `fit`, `predict`, etc with default vaule `True` in order to preserve the current behavior.  The `check_input` could be in the constrcutor.\n- Relax the validation in the ensemble and let base estimator to handle the validation.\n\nWhat do you think? I'll sent a PR.\n\nIMO assuming the base estimator manages validation is fine.\n\nIs this still open ? can I work on it?\r\n\n@Chaitya62 I didn't have the time to work on this. So, go ahead.\n@chkoar onit!\nAfter reading code for 2 days and trying to understand what actually needs to be changed I figured out that in that a call to check_X_y is being made which is forcing X to be 2d now for the patch should I do what @chkoar  suggested ? \nAs in let the base estimator handle validation? Yes, IMO\n\nOn 5 December 2016 at 06:46, Chaitya Shah <notifications@github.com> wrote:\n\n> After reading code for 2 days and trying to understand what actually needs\n> to be changed I figured out that in that a call to check_X_y is being made\n> which is forcing X to be 2d now for the patch should I do what @chkoar\n> <https://github.com/chkoar> suggested ?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/scikit-learn/scikit-learn/issues/7768#issuecomment-264726009>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEz69Z4CUcCqOlkaOc0xpln9o1ovc85ks5rExiygaJpZM4KiQ_P>\n> .\n>\n\nCool I ll submit a PR soon \n@Chaitya62, Let me inform if you are not working on this anymore. I want to work on this. \n@devanshdalal I am working  on it have a minor  issue which I hope I ll soon solve\n@Chaitya62 Are you still working on this?\r\n\n@dalmia go ahead work on it I am not able to test my code properly\r\n\n@Chaitya62 Thanks!\nI'd like to work on this, if that's ok\nAs a first step, I tried looking at the behavior of meta-estimators when passed a 3D tensor. Looks like almost all meta-estimators which accept a base estimator fail :\r\n\r\n```\r\n>>> pytest -sx -k 'test_meta_estimators' sklearn/tests/test_common.py\r\n<....>\r\nAdaBoostClassifier raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\r\nAdaBoostRegressor raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\r\nBaggingClassifier raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\r\nBaggingRegressor raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\r\nExtraTreesClassifier raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\r\nExtraTreesRegressor raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\r\n\r\nSkipping GradientBoostingClassifier - 'base_estimator' key not supported\r\nSkipping GradientBoostingRegressor - 'base_estimator' key not supported\r\nIsolationForest raised error 'default contamination parameter 0.1 will change in version 0.22 to \"auto\". This will change the predict method behavior.' when parsing data   \r\n\r\nRANSACRegressor raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data                                     \r\nRandomForestClassifier raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\r\nRandomForestRegressor raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\r\n```\r\n@jnothman @amueller considering this, should this be a WONTFIX, or should all the meta-estimators be fixed?\nThanks for looking into this. Not all ensembles are meta-estimators. Here\nwe intend things that should be generic enough to support non-scikit-learn\nuse-cases: not just dealing with rectangular feature matrices.\n\nOn Fri, 14 Sep 2018 at 08:23, Karthik Duddu <notifications@github.com>\nwrote:\n\n> As a first step, I tried looking at behavior of meta-estimators when\n> passed a 3D tensor. Looks like almost all meta-estimators which accept a\n> base estimator fail :\n>\n> >>> pytest -sx -k 'test_meta_estimators' sklearn/tests/test_common.py\n> <....>\n> AdaBoostClassifier raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\n> AdaBoostRegressor raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\n> BaggingClassifier raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\n> BaggingRegressor raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\n> ExtraTreesClassifier raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\n> ExtraTreesRegressor raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\n>\n> Skipping GradientBoostingClassifier - 'base_estimator' key not supported\n> Skipping GradientBoostingRegressor - 'base_estimator' key not supported\n> IsolationForest raised error 'default contamination parameter 0.1 will change in version 0.22 to \"auto\". This will change the predict method behavior.' when parsing data\n>\n> RANSACRegressor raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\n> RandomForestClassifier raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\n> RandomForestRegressor raised error 'Found array with dim 3. Estimator expected <= 2.' when parsing data\n>\n> @jnothman <https://github.com/jnothman> @amueller\n> <https://github.com/amueller> considering this, should this be a WONTFIX,\n> or should all the meta-estimators be fixed?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/scikit-learn/scikit-learn/issues/7768#issuecomment-421171742>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEz68Axs1khuYjm7lM4guYgyf2IlUL_ks5uatrDgaJpZM4KiQ_P>\n> .\n>\n\n@jnothman  `Adaboost` tests are [testing](https://github.com/scikit-learn/scikit-learn/blob/ff28c42b192aa9aab8b61bc8a56b5ceb1170dec7/sklearn/ensemble/tests/test_weight_boosting.py#L323) the sparsity of the `X`. This means that we should skip these tests in order to relax the validation, right?\nSounds like it as long as it doesn't do other things with X than fit the\nbase estimator\n",
  "created_at": "2019-02-15T22:37:43Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/ensemble/tests/test_weight_boosting.py::test_multidimensional_X\"]",
  "PASS_TO_PASS": "[\"sklearn/ensemble/tests/test_weight_boosting.py::test_samme_proba\", \"sklearn/ensemble/tests/test_weight_boosting.py::test_oneclass_adaboost_proba\", \"sklearn/ensemble/tests/test_weight_boosting.py::test_classification_toy\", \"sklearn/ensemble/tests/test_weight_boosting.py::test_regression_toy\", \"sklearn/ensemble/tests/test_weight_boosting.py::test_iris\", \"sklearn/ensemble/tests/test_weight_boosting.py::test_boston\", \"sklearn/ensemble/tests/test_weight_boosting.py::test_staged_predict\", \"sklearn/ensemble/tests/test_weight_boosting.py::test_gridsearch\", \"sklearn/ensemble/tests/test_weight_boosting.py::test_pickle\", \"sklearn/ensemble/tests/test_weight_boosting.py::test_importances\", \"sklearn/ensemble/tests/test_weight_boosting.py::test_error\", \"sklearn/ensemble/tests/test_weight_boosting.py::test_base_estimator\", \"sklearn/ensemble/tests/test_weight_boosting.py::test_sample_weight_missing\", \"sklearn/ensemble/tests/test_weight_boosting.py::test_sparse_classification\", \"sklearn/ensemble/tests/test_weight_boosting.py::test_sparse_regression\", \"sklearn/ensemble/tests/test_weight_boosting.py::test_sample_weight_adaboost_regressor\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.990644",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}