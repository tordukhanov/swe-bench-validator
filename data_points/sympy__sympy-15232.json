{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15232",
  "base_commit": "4f41286b22a05d5d75f456f1e574d8c115bab5d4",
  "patch": "diff --git a/sympy/core/exprtools.py b/sympy/core/exprtools.py\n--- a/sympy/core/exprtools.py\n+++ b/sympy/core/exprtools.py\n@@ -1312,10 +1312,7 @@ def Dummy(*args, **kwargs):\n             if a.is_Symbol:\n                 nc_syms.add(a)\n             elif not (a.is_Add or a.is_Mul or a.is_Pow):\n-                if all(s.is_commutative for s in a.free_symbols):\n-                    rep.append((a, Dummy()))\n-                else:\n-                    nc_obj.add(a)\n+                nc_obj.add(a)\n                 pot.skip()\n \n     # If there is only one nc symbol or object, it can be factored regularly\n",
  "test_patch": "diff --git a/sympy/core/tests/test_exprtools.py b/sympy/core/tests/test_exprtools.py\n--- a/sympy/core/tests/test_exprtools.py\n+++ b/sympy/core/tests/test_exprtools.py\n@@ -1,10 +1,10 @@\n \"\"\"Tests for tools for manipulating of large commutative expressions. \"\"\"\n \n-from sympy import (S, Add, sin, Mul, Symbol, oo, Integral, sqrt, Tuple, I,\n+from sympy import (S, Add, sin, Mul, Symbol, oo, Integral, sqrt, Tuple, I, Function,\n                    Interval, O, symbols, simplify, collect, Sum, Basic, Dict,\n                    root, exp, cos, sin, oo, Dummy, log)\n from sympy.core.exprtools import (decompose_power, Factors, Term, _gcd_terms,\n-                                  gcd_terms, factor_terms, factor_nc,\n+                                  gcd_terms, factor_terms, factor_nc, _mask_nc,\n                                   _monotonic_sign)\n from sympy.core.mul import _keep_coeff as _keep_coeff\n from sympy.simplify.cse_opts import sub_pre\n@@ -376,6 +376,13 @@ def test_issue_7903():\n     t = exp(I*cos(a)) + exp(-I*sin(a))\n     assert t.simplify()\n \n+def test_issue_8263():\n+    F, G = symbols('F, G', commutative=False, cls=Function)\n+    x, y = symbols('x, y')\n+    expr, dummies, _ = _mask_nc(F(x)*G(y) - G(y)*F(x))\n+    for v in dummies.values():\n+        assert not v.is_commutative\n+    assert not expr.is_zero\n \n def test_monotonic_sign():\n     F = _monotonic_sign\n",
  "problem_statement": "factor() function issue for non-commutative objects\nIn commit a5bd02caf51d868ef151a22fe588dbddb43aee82 by @smichr, from line 652 to line 660 in the file sympy/core/exprtools.py, there are some parts that I couldn't understand:\n\n```\n    elif not a.is_commutative:\n        if a.is_Symbol:\n            nc_syms.add(a)\n        elif not (a.is_Add or a.is_Mul or a.is_Pow):\n            if all(s.is_commutative for s in a.free_symbols):\n                rep.append((a, Dummy()))\n            else:\n                nc_obj.add(a)\n            pot.skip()\n```\n\nI am trying to add a non-commutative class whose free_symbols are commutative. (e.g., operator with time dependence) In this case, even if the object itself is non-commutative, the factor() function gives the wrong result, because of the lines\n\n```\n            if all(s.is_commutative for s in a.free_symbols):\n                rep.append((a, Dummy()))\n```\n\nIn my understanding, this line treats a non-commutative object as commutative if all its free_symbols are commutative. What is the purpose of this line?\n\n",
  "hints_text": "Just shortsightedness - I didn't know that you can declare an object as noncommutative. In that case I guess you would add another test like `if all(...) and a.?.is_commutative is ?`. You would have to fill in the ? with whatever is needed to test that the object itself is non-commutative.\n\nsee also #5856 and #6225\n",
  "created_at": "2018-09-13T18:55:36Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_issue_8263\"]",
  "PASS_TO_PASS": "[\"test_decompose_power\", \"test_Factors\", \"test_Term\", \"test_gcd_terms\", \"test_factor_terms\", \"test_xreplace\", \"test_factor_nc\", \"test_issue_6360\", \"test_issue_7903\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.097550",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}