{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-19763",
  "base_commit": "28289122be81e0bc0a6ee0c4c5b7343a46ce2e4e",
  "patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -1600,8 +1600,8 @@ def __init__(self, ax, horizOn=True, vertOn=True, useblit=False,\n                  **lineprops):\n         super().__init__(ax)\n \n-        self.connect_event('motion_notify_event', self.onmove)\n-        self.connect_event('draw_event', self.clear)\n+        self.connect_event('motion_notify_event', self._onmove)\n+        self.connect_event('draw_event', self._clear)\n \n         self.visible = True\n         self.horizOn = horizOn\n@@ -1616,16 +1616,25 @@ def __init__(self, ax, horizOn=True, vertOn=True, useblit=False,\n         self.background = None\n         self.needclear = False\n \n+    @_api.deprecated('3.5')\n     def clear(self, event):\n         \"\"\"Internal event handler to clear the cursor.\"\"\"\n+        self._clear(event)\n         if self.ignore(event):\n             return\n-        if self.useblit:\n-            self.background = self.canvas.copy_from_bbox(self.ax.bbox)\n         self.linev.set_visible(False)\n         self.lineh.set_visible(False)\n \n-    def onmove(self, event):\n+    def _clear(self, event):\n+        \"\"\"Internal event handler to clear the cursor.\"\"\"\n+        if self.ignore(event):\n+            return\n+        if self.useblit:\n+            self.background = self.canvas.copy_from_bbox(self.ax.bbox)\n+\n+    onmove = _api.deprecate_privatize_attribute('3.5')\n+\n+    def _onmove(self, event):\n         \"\"\"Internal event handler to draw the cursor when the mouse moves.\"\"\"\n         if self.ignore(event):\n             return\n@@ -1640,15 +1649,15 @@ def onmove(self, event):\n                 self.needclear = False\n             return\n         self.needclear = True\n-        if not self.visible:\n-            return\n+\n         self.linev.set_xdata((event.xdata, event.xdata))\n+        self.linev.set_visible(self.visible and self.vertOn)\n \n         self.lineh.set_ydata((event.ydata, event.ydata))\n-        self.linev.set_visible(self.visible and self.vertOn)\n         self.lineh.set_visible(self.visible and self.horizOn)\n \n-        self._update()\n+        if self.visible and (self.vertOn or self.horizOn):\n+            self._update()\n \n     def _update(self):\n         if self.useblit:\n@@ -1749,8 +1758,8 @@ def connect(self):\n         \"\"\"Connect events.\"\"\"\n         for canvas, info in self._canvas_infos.items():\n             info[\"cids\"] = [\n-                canvas.mpl_connect('motion_notify_event', self.onmove),\n-                canvas.mpl_connect('draw_event', self.clear),\n+                canvas.mpl_connect('motion_notify_event', self._onmove),\n+                canvas.mpl_connect('draw_event', self._clear),\n             ]\n \n     def disconnect(self):\n@@ -1760,24 +1769,31 @@ def disconnect(self):\n                 canvas.mpl_disconnect(cid)\n             info[\"cids\"].clear()\n \n+    @_api.deprecated('3.5')\n     def clear(self, event):\n+        \"\"\"Clear the cursor.\"\"\"\n+        if self.ignore(event):\n+            return\n+        self._clear(event)\n+        for line in self.vlines + self.hlines:\n+            line.set_visible(False)\n+\n+    def _clear(self, event):\n         \"\"\"Clear the cursor.\"\"\"\n         if self.ignore(event):\n             return\n         if self.useblit:\n             for canvas, info in self._canvas_infos.items():\n                 info[\"background\"] = canvas.copy_from_bbox(canvas.figure.bbox)\n-        for line in self.vlines + self.hlines:\n-            line.set_visible(False)\n \n-    def onmove(self, event):\n+    onmove = _api.deprecate_privatize_attribute('3.5')\n+\n+    def _onmove(self, event):\n         if (self.ignore(event)\n                 or event.inaxes not in self.axes\n                 or not event.canvas.widgetlock.available(self)):\n             return\n         self.needclear = True\n-        if not self.visible:\n-            return\n         if self.vertOn:\n             for line in self.vlines:\n                 line.set_xdata((event.xdata, event.xdata))\n@@ -1786,7 +1802,8 @@ def onmove(self, event):\n             for line in self.hlines:\n                 line.set_ydata((event.ydata, event.ydata))\n                 line.set_visible(self.visible)\n-        self._update()\n+        if self.visible and (self.vertOn or self.horizOn):\n+            self._update()\n \n     def _update(self):\n         if self.useblit:\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1517,7 +1517,7 @@ def test_MultiCursor(horizOn, vertOn):\n     # Can't use `do_event` as that helper requires the widget\n     # to have a single .ax attribute.\n     event = mock_event(ax1, xdata=.5, ydata=.25)\n-    multi.onmove(event)\n+    multi._onmove(event)\n \n     # the lines in the first two ax should both move\n     for l in multi.vlines:\n@@ -1528,7 +1528,7 @@ def test_MultiCursor(horizOn, vertOn):\n     # test a move event in an Axes not part of the MultiCursor\n     # the lines in ax1 and ax2 should not have moved.\n     event = mock_event(ax3, xdata=.75, ydata=.75)\n-    multi.onmove(event)\n+    multi._onmove(event)\n     for l in multi.vlines:\n         assert l.get_xdata() == (.5, .5)\n     for l in multi.hlines:\n",
  "problem_statement": "Multicursor disappears when not moving on nbagg with useblit=False + burns CPU\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\nWhen on the nbagg backend if you stop moving the mouse the multicursor will disappear. The same example works fine on the qt backend.\r\n\r\nAdditionally I noticed that when I add the multicursor my cpu usage jumps and the kernel busy indicator constantly flashes on and off. \r\n\r\nShowing the plot without the multicursor:\r\n![image](https://user-images.githubusercontent.com/10111092/109886513-28e01700-7c4e-11eb-8aac-d8a18832f787.png)\r\nand with the multicursor (just displaying, not interacting with the plot):\r\n\r\n![image](https://user-images.githubusercontent.com/10111092/109886579-490fd600-7c4e-11eb-94d8-ce4d9425559f.png)\r\nThat usage is pretty stable and my laptop's fan goes wild.\r\n\r\nThe issue with the dissappearing was originally noticed by @ipcoder in https://github.com/matplotlib/ipympl/issues/306\r\n\r\n**Code for reproduction**\r\n\r\n<!--A minimum code snippet required to reproduce the bug.\r\nPlease make sure to minimize the number of dependencies required, and provide\r\nany necessary plotted data.\r\nAvoid using threads, as Matplotlib is (explicitly) not thread-safe.-->\r\n\r\n```python\r\n%matplotlib nbagg\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.widgets import MultiCursor\r\n\r\nt = np.arange(0.0, 2.0, 0.01)\r\ns1 = np.sin(2*np.pi*t)\r\ns2 = np.sin(4*np.pi*t)\r\n\r\nfig, (ax1, ax2) = plt.subplots(2, sharex=True)\r\nax1.plot(t, s1)\r\nax2.plot(t, s2)\r\n\r\nmulti = MultiCursor(fig.canvas, (ax1, ax2), color='r', lw=1, useblit=False)\r\nplt.show()\r\n```\r\n\r\n**Actual outcome**\r\n\r\n![Peek 2021-03-03 18-12](https://user-images.githubusercontent.com/10111092/109885329-54fa9880-7c4c-11eb-9caa-f765dda6f729.gif)\r\n\r\nand the high CPU usage\r\n\r\n\r\n**Expected outcome**\r\nRed line doesn't disappear + my CPU doesn't get crushed.\r\n\r\n\r\n<!--A description of the expected outcome from the code snippet-->\r\n<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->\r\n\r\n**Matplotlib version**\r\n<!--Please specify your platform and versions of the relevant libraries you are using:-->\r\n  * Operating system: Ubuntu\r\n  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): '3.3.4.post2456+gfd23bb238'\r\n  * Matplotlib backend (`print(matplotlib.get_backend())`): nbagg\r\n  * Python version: '3.9.1 | packaged by conda-forge | (default, Jan 26 2021, 01:34:10) \\n[GCC 9.3.0]'\r\n  * Jupyter version (if applicable): Notebook 6.2.0 - IPython 7.20.0\r\n\r\ndev instlal of maptlotlib + conda-forge for the others \r\n\n",
  "hints_text": "On matplotlib master nbagg supports blitting - so I also tried with that - which prevents the high cpu usage but the smearing of the image (https://github.com/matplotlib/matplotlib/issues/19116) is renders the widget unusable:\r\n\r\n![Peek 2021-03-03 18-35](https://user-images.githubusercontent.com/10111092/109887241-5d080780-7c4f-11eb-897a-c12af8896d31.gif)\r\n\r\nso I think it's still important to fix the `useblit=False` case.\r\n\nI think the CPU burning loop is happening because the multicursor attaches a callback to the draw_event that will it self trigger a draw event and then :infinity:  followed by :fire: :computer: :fire: \r\n\r\nThe path is:\r\nhttps://github.com/matplotlib/matplotlib/blob/6a35abfa2efdaf3b9efe49d4398164fa4cc6c3a3/lib/matplotlib/widgets.py#L1636\r\n\r\nto https://github.com/matplotlib/matplotlib/blob/6a35abfa2efdaf3b9efe49d4398164fa4cc6c3a3/lib/matplotlib/widgets.py#L1643-L1651\r\n\r\nand `line.set_visible` sets an artist to stale and then a draw happens again.\r\n\r\nConfusingly this doesn't happen on the qt backend, but does on the nbagg backend???\r\n\r\nYou see this behavior with this:\r\n\r\n\r\n```python\r\n%matplotlib notebook\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.widgets import MultiCursor\r\nimport ipywidgets as widgets\r\n\r\nt = np.arange(0.0, 2.0, 0.01)\r\ns1 = np.sin(2*np.pi*t)\r\ns2 = np.sin(4*np.pi*t)\r\n\r\nfig, (ax1, ax2) = plt.subplots(2, sharex=True)\r\nax1.plot(t, s1)\r\nax2.plot(t, s2)\r\n\r\nout = widgets.Output()\r\ndisplay(out)\r\nn = 0\r\ndef drawn(event):\r\n    global n\r\n    n += 1\r\n    with out:\r\n        print(f'drawn! {n}')\r\nfig.canvas.mpl_connect('draw_event', drawn)\r\nmulti = MultiCursor(fig.canvas, (ax1, ax2), color='r', lw=1, useblit=False)\r\nplt.show()\r\n```\r\n\r\n![Peek 2021-03-03 19-18](https://user-images.githubusercontent.com/10111092/109890480-58dee880-7c55-11eb-9a0f-20db4066c186.gif)\r\n\nHaving not looked at the implementation at all, a simple fix might be to cache the mouse position (which may already be available from the existing Line2D's current position), and then not do anything if the mouse hasn't moved?\n@QuLogic looking at this again I think this is about nbagg and the js side rather than anything with multicursor. A simpler reproduction is:\r\n\r\n```python\r\n%matplotlib nbagg\r\nimport matplotlib.pyplot as plt\r\nfrom ipywidgets import Output\r\n\r\nfig, ax = plt.subplots()\r\nl, = ax.plot([0,1],[0,1])\r\n\r\nout = Output()\r\ndisplay(out)\r\nn =0\r\ndef drawn(event):\r\n    global n\r\n    n+=1\r\n    with out:\r\n        print(n)\r\n    l.set_visible(False)\r\nfig.canvas.mpl_connect('draw_event', drawn)\r\n```\r\n\r\nwhich may be due to the the draw message that the frontend sends back from here?\r\nhttps://github.com/matplotlib/matplotlib/blob/33c3e72e8b228e5e1244d7792103b920df094866/lib/matplotlib/backends/web_backend/js/mpl.js#L394-L399\nWhat is going on with `fig.stale`?\r\n\r\nThe double-buffering that nbagg does may also be contributing here.\nI have been testing the matplotlib 3.4.0rc1 and I confirm the high CPU usage and significant slow down when using the notebook backend. There are also issue \r\nI don't have a minimum example to reproduce without installing hyperspy but what we uses is fairly similar to the [blitting tutorial](https://matplotlib.org/stable/tutorials/advanced/blitting.html). See https://github.com/hyperspy/hyperspy/blob/RELEASE_next_minor/hyperspy/drawing/figure.py for more details.\r\n\r\nThe example of the blitting tutorial doesn't seem to be working:\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nx = np.linspace(0, 2 * np.pi, 100)\r\n\r\nfig, ax = plt.subplots()\r\n\r\n# animated=True tells matplotlib to only draw the artist when we\r\n# explicitly request it\r\n(ln,) = ax.plot(x, np.sin(x), animated=True)\r\n\r\n# make sure the window is raised, but the script keeps going\r\nplt.show(block=False)\r\n\r\n# stop to admire our empty window axes and ensure it is rendered at\r\n# least once.\r\n#\r\n# We need to fully draw the figure at its final size on the screen\r\n# before we continue on so that :\r\n#  a) we have the correctly sized and drawn background to grab\r\n#  b) we have a cached renderer so that ``ax.draw_artist`` works\r\n# so we spin the event loop to let the backend process any pending operations\r\nplt.pause(0.1)\r\n\r\n# get copy of entire figure (everything inside fig.bbox) sans animated artist\r\nbg = fig.canvas.copy_from_bbox(fig.bbox)\r\n# draw the animated artist, this uses a cached renderer\r\nax.draw_artist(ln)\r\n# show the result to the screen, this pushes the updated RGBA buffer from the\r\n# renderer to the GUI framework so you can see it\r\nfig.canvas.blit(fig.bbox)\r\n```\r\nIt gives an empty figure:\r\n![image](https://user-images.githubusercontent.com/11851990/110686248-26923580-81d7-11eb-8c92-001bd0bdcf75.png)\r\n\r\nand the following error message:\r\n```python\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-2-f625949ed20b> in <module>\r\n     26 bg = fig.canvas.copy_from_bbox(fig.bbox)\r\n     27 # draw the animated artist, this uses a cached renderer\r\n---> 28 ax.draw_artist(ln)\r\n     29 # show the result to the screen, this pushes the updated RGBA buffer from the\r\n     30 # renderer to the GUI framework so you can see it\r\n\r\n/opt/miniconda3/lib/python3.8/site-packages/matplotlib/axes/_base.py in draw_artist(self, a)\r\n   2936         \"\"\"\r\n   2937         if self.figure._cachedRenderer is None:\r\n-> 2938             raise AttributeError(\"draw_artist can only be used after an \"\r\n   2939                                  \"initial draw which caches the renderer\")\r\n   2940         a.draw(self.figure._cachedRenderer)\r\n\r\nAttributeError: draw_artist can only be used after an initial draw which caches the renderer\r\n\r\n```\r\n\r\nUsing blitting is now slower than without... :( Any chance to have this fix before the 3.4.0 release? Or to have if disable, through the `supports_blit` property until it is working well enough?\r\n\r\n\r\n\n> What is going on with `fig.stale`?\r\n> \r\n> The double-buffering that nbagg does may also be contributing here.\r\n\r\nChanging to `print(n, 'before', l.stale, l.axes.stale, l.axes.figure.stale)` (and printing again after `l.set_visible`) prints out:\r\n```\r\n1 before False False False\r\n1 after True True True\r\n2 before True False False\r\n2 after True True True\r\n2 before True False False\r\n2 after True True True\r\n```\r\nand never changes after that.\r\n\r\nWhereas on `Agg` or `TkAgg`, it's all `False`, then all `True`, then stops.\r\n\r\nSo somehow the `draw_event` is called before all the Artists are marked up-to-date or something.\nI think the issue here is that:\r\n\r\n - the `ob.clear` method is hooked up to `'draw_event'` which fires at the bottom of `Figure.draw()` (which is called from inside of Canvas.draw()`\r\n -  in `clear` we set the cursor artists to be not visible (and it appears to have been that way for a long time)\r\n - in `CanvasBase.draw_idle` and in the `pyplot._auto_draw_if_interactive` we have a whole bunch of de-bouncing logic so that the draws triggered while drawing get ignored (this is why tkagg / qtagg does not go into the same infinite loop).  I think I am missing some details here, but I do not think it changes the analysis.  In IPython we only auto-draw when the user gets the prompt back from executing something (so no loops there!).  \r\n - in nbagg when we trigger draw_idle on the python side we resolve that by sending a note to the front end to please request a draw.  This eventually comes back to the python side which triggers the actual render.  This extra round trip is what is opening us up to the infinite loop \r\n - One critical detail I may be missing is what in triggering the `draw_idle` in the nbagg case?\r\n\r\nThis goes back to at least 3.3 so is not a recent regression.  I think that removing the `set_visible(False)` lines is the simplest and correct fix (or probably better, pulling the blit logic out into a method not called 'clear' and registering that with `draw_event` (as when we do a clean re-render (due to changing the size or similar) we need to grab a new background of the correct size).\n> Whereas on `Agg` or `TkAgg`, it's all `False`, then all `True`, then stops.\r\n\r\nBut something I missed before, is that the line is actually drawn. So the stale did not trigger a re-draw in other backends. The stale handler for figures in `pyplot` is:\r\nhttps://github.com/matplotlib/matplotlib/blob/bfa31a482d6baa9a6da417bc1c20d4cd93abcece/lib/matplotlib/pyplot.py#L782-L800\r\n\r\nAnd the `draw_idle` for most backends will set a flag which is cleared when the draw actually happens (since they use event loops to signal this), but WebAgg does _not_. It always sends a `draw` message to the frontend, which has some sort of `waiting` flag, but I have not figured out why that does not limit things yet.\nThe second and subsequent `draw_idle` come from `post_execute`:\r\n```pytb\r\n  File \".../matplotlib/lib/matplotlib/pyplot.py\", line 138, in post_execute\r\n    draw_all()\r\n  File \".../matplotlib/lib/matplotlib/_pylab_helpers.py\", line 137, in draw_all\r\n    manager.canvas.draw_idle()\r\n  File \".../matplotlib/lib/matplotlib/backends/backend_webagg_core.py\", line 164, in draw_idle\r\n    traceback.print_stack(None)\r\n```\r\nDidn't we have a previous issue with this?\nBased on the original PR https://github.com/matplotlib/matplotlib/pull/4091#issuecomment-73774842, there is `post_execute` and `post_run_cell`; why did we use the former and not the latter? Do we even need this hook at all, with the stale figure tracking?\nThe previous similar issue was https://github.com/matplotlib/matplotlib/issues/13971#issuecomment-609006518, and the fix in that case was to avoid causing the figure to get marked stale during draw. As @tacaswell had mentioned earlier, doing the same in `MultiCursor` is probably the best option here.",
  "created_at": "2021-03-24T07:55:54Z",
  "version": "3.3",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-False]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-True]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-False]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-True]\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs0-None]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs2-None]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs4-None]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs5-None]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_deprecation_selector_visible_attribute\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[True-new_center0]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[False-new_center1]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_set_props_handle_props\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_add_state\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[RectangleSelector]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[EllipseSelector]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_add_remove_set\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_ellipse\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_handles\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs0]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[vertical-True-kwargs1]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs2]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs3]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_direction\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_set_props_handle_props\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear[span]\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear[rectangle]\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[span]\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[rectangle]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_add_state\", \"lib/matplotlib/tests/test_widgets.py::test_tool_line_handle\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_snapping_values_span_selector\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_snap\", \"lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs0]\", \"lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs1]\", \"lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs2]\", \"lib/matplotlib/tests/test_widgets.py::test_CheckButtons\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox[none]\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox[toolbar2]\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox[toolmanager]\", \"lib/matplotlib/tests/test_widgets.py::test_check_radio_buttons_image[png]\", \"lib/matplotlib/tests/test_widgets.py::test_radio_buttons[png]\", \"lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax_invalid\", \"lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax\", \"lib/matplotlib/tests/test_widgets.py::test_slider_valmin_valmax\", \"lib/matplotlib/tests/test_widgets.py::test_slider_valstep_snapping\", \"lib/matplotlib/tests/test_widgets.py::test_slider_horizontal_vertical\", \"lib/matplotlib/tests/test_widgets.py::test_slider_reset\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector[True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rect_visibility[png]\", \"lib/matplotlib/tests/test_widgets.py::test_rect_visibility[pdf]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-1]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-2]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-3]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-1]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-2]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-3]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_box\"]",
  "environment_setup_commit": "28289122be81e0bc0a6ee0c4c5b7343a46ce2e4e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.788826",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}