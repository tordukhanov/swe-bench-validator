{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-21769",
  "base_commit": "6d63dcf6b4eab0879ffbb945611850242b051f87",
  "patch": "diff --git a/sympy/physics/quantum/cg.py b/sympy/physics/quantum/cg.py\n--- a/sympy/physics/quantum/cg.py\n+++ b/sympy/physics/quantum/cg.py\n@@ -10,6 +10,7 @@\n \n from sympy.functions.special.tensor_functions import KroneckerDelta\n from sympy.physics.wigner import clebsch_gordan, wigner_3j, wigner_6j, wigner_9j\n+from sympy.printing.precedence import PRECEDENCE\n \n __all__ = [\n     'CG',\n@@ -159,14 +160,16 @@ class CG(Wigner3j):\n     coefficients are defined as [1]_:\n \n     .. math ::\n-        C^{j_1,m_1}_{j_2,m_2,j_3,m_3} = \\left\\langle j_1,m_1;j_2,m_2 | j_3,m_3\\right\\rangle\n+        C^{j_3,m_3}_{j_1,m_1,j_2,m_2} = \\left\\langle j_1,m_1;j_2,m_2 | j_3,m_3\\right\\rangle\n \n     Parameters\n     ==========\n \n-    j1, m1, j2, m2, j3, m3 : Number, Symbol\n-        Terms determining the angular momentum of coupled angular momentum\n-        systems.\n+    j1, m1, j2, m2 : Number, Symbol\n+        Angular momenta of states 1 and 2.\n+\n+    j3, m3: Number, Symbol\n+        Total angular momentum of the coupled system.\n \n     Examples\n     ========\n@@ -180,6 +183,11 @@ class CG(Wigner3j):\n         CG(3/2, 3/2, 1/2, -1/2, 1, 1)\n         >>> cg.doit()\n         sqrt(3)/2\n+        >>> CG(j1=S(1)/2, m1=-S(1)/2, j2=S(1)/2, m2=+S(1)/2, j3=1, m3=0).doit()\n+        sqrt(2)/2\n+\n+\n+    Compare [2]_.\n \n     See Also\n     ========\n@@ -190,7 +198,12 @@ class CG(Wigner3j):\n     ==========\n \n     .. [1] Varshalovich, D A, Quantum Theory of Angular Momentum. 1988.\n+    .. [2] `Clebsch-Gordan Coefficients, Spherical Harmonics, and d Functions\n+        <https://pdg.lbl.gov/2020/reviews/rpp2020-rev-clebsch-gordan-coefs.pdf>`_\n+        in P.A. Zyla *et al.* (Particle Data Group), Prog. Theor. Exp. Phys.\n+        2020, 083C01 (2020).\n     \"\"\"\n+    precedence = PRECEDENCE[\"Pow\"] - 1\n \n     def doit(self, **hints):\n         if self.is_symbolic:\n",
  "test_patch": "diff --git a/sympy/physics/quantum/tests/test_printing.py b/sympy/physics/quantum/tests/test_printing.py\n--- a/sympy/physics/quantum/tests/test_printing.py\n+++ b/sympy/physics/quantum/tests/test_printing.py\n@@ -114,7 +114,8 @@ def test_cg():\n \"\"\"\n     assert pretty(cg) == ascii_str\n     assert upretty(cg) == ucode_str\n-    assert latex(cg) == r'C^{5,6}_{1,2,3,4}'\n+    assert latex(cg) == 'C^{5,6}_{1,2,3,4}'\n+    assert latex(cg ** 2) == R'\\left(C^{5,6}_{1,2,3,4}\\right)^{2}'\n     sT(cg, \"CG(Integer(1), Integer(2), Integer(3), Integer(4), Integer(5), Integer(6))\")\n     assert str(wigner3j) == 'Wigner3j(1, 2, 3, 4, 5, 6)'\n     ascii_str = \\\n",
  "problem_statement": "Latex repr of CG with power does not render correctly\nThere seem to be Latex rendering problems when a Clebsch-Gordan coefficient (`CG`) is, for instance, squared:\r\n\r\n![image](https://user-images.githubusercontent.com/29308176/108862593-ab365e80-75f0-11eb-9b43-f589ea1197b5.png)\r\n<details>\r\n<summary>Code snippet</summary>\r\n\r\n```python\r\nfrom sympy.physics.quantum.cg import CG\r\ncg = CG(j1=0, m1=0, j2=0, m2=0, j3=0, m3=0)\r\ncg ** 2\r\n```\r\n\r\n</details>\r\n\r\nI ran this with **Sympy v1.7.1**\r\n\r\nIt could be that this is strictly speaking a Jupyter lab/notebook problem, because the `str` that `latex()` returns is (I think) valid syntax:\r\n\r\n```python\r\n>>> from sympy import latex\r\n>>> from sympy.physics.quantum.cg import CG\r\n>>> cg = CG(j1=0, m1=0, j2=0, m2=0, j3=0, m3=0)\r\n>>> latex(cg ** 2)\r\n'C^{0,0}_{0,0,0,0}^{2}'\r\n```\r\n\r\nStill, a simple fix for `CG` would be to wrap the `str` in braces:\r\nhttps://github.com/sympy/sympy/blob/9e8f62e059d83178c1d8a1e19acac5473bdbf1c1/sympy/physics/quantum/cg.py#L217\r\n\r\n\r\n```python\r\nreturn r'{C^{%s,%s}_{%s,%s,%s,%s}}' % tuple(label) \r\n```\r\n\r\n<details>\r\n<summary>Result in Jupyter</summary>\r\n\r\n![image](https://user-images.githubusercontent.com/29308176/108864976-ff424280-75f2-11eb-8a56-ad5305d2bc4a.png)\r\n\r\n<details>\r\n<summary>Code snippet</summary>\r\n\r\n```python\r\nfrom sympy.physics.quantum.cg import CG\r\ncg = CG(j1=0, m1=0, j2=0, m2=0, j3=0, m3=0)\r\ncg ** 2\r\n```\r\n\r\n```python\r\nfrom sympy import Symbol, sqrt\r\ndisplay(cg, cg * Symbol(\"a\"), sqrt(cg), cg * CG(j1=1, m1=1, j2=0, m2=0, j3=1, m3=1))\r\n```\r\n\r\n</details>\r\n\r\n</details>\r\n\r\nRelated issues: #19661 and #20959\n",
  "hints_text": "",
  "created_at": "2021-07-22T16:53:52Z",
  "version": "1.9",
  "FAIL_TO_PASS": "[\"test_cg\"]",
  "PASS_TO_PASS": "[\"test_anticommutator\", \"test_commutator\", \"test_constants\", \"test_dagger\", \"test_gate\", \"test_hilbert\", \"test_innerproduct\", \"test_operator\", \"test_qexpr\", \"test_qubit\", \"test_spin\", \"test_state\", \"test_tensorproduct\"]",
  "environment_setup_commit": "f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.146072",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}