{
  "repo": "django/django",
  "instance_id": "django__django-13807",
  "base_commit": "89fc144dedc737a79929231438f035b1d4a993c9",
  "patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -327,19 +327,24 @@ def check_constraints(self, table_names=None):\n                     violations = cursor.execute('PRAGMA foreign_key_check').fetchall()\n                 else:\n                     violations = chain.from_iterable(\n-                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()\n+                        cursor.execute(\n+                            'PRAGMA foreign_key_check(%s)'\n+                            % self.ops.quote_name(table_name)\n+                        ).fetchall()\n                         for table_name in table_names\n                     )\n                 # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check\n                 for table_name, rowid, referenced_table_name, foreign_key_index in violations:\n                     foreign_key = cursor.execute(\n-                        'PRAGMA foreign_key_list(%s)' % table_name\n+                        'PRAGMA foreign_key_list(%s)' % self.ops.quote_name(table_name)\n                     ).fetchall()[foreign_key_index]\n                     column_name, referenced_column_name = foreign_key[3:5]\n                     primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)\n                     primary_key_value, bad_value = cursor.execute(\n                         'SELECT %s, %s FROM %s WHERE rowid = %%s' % (\n-                            primary_key_column_name, column_name, table_name\n+                            self.ops.quote_name(primary_key_column_name),\n+                            self.ops.quote_name(column_name),\n+                            self.ops.quote_name(table_name),\n                         ),\n                         (rowid,),\n                     ).fetchone()\n",
  "test_patch": "diff --git a/tests/backends/models.py b/tests/backends/models.py\n--- a/tests/backends/models.py\n+++ b/tests/backends/models.py\n@@ -140,3 +140,11 @@ class Author(models.Model):\n \n class Book(models.Model):\n     author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n+\n+\n+class SQLKeywordsModel(models.Model):\n+    id = models.AutoField(primary_key=True, db_column='select')\n+    reporter = models.ForeignKey(Reporter, models.CASCADE, db_column='where')\n+\n+    class Meta:\n+        db_table = 'order'\ndiff --git a/tests/backends/tests.py b/tests/backends/tests.py\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -20,7 +20,7 @@\n \n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n-    ReporterProxy, SchoolClass, Square,\n+    ReporterProxy, SchoolClass, SQLKeywordsModel, Square,\n     VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n )\n \n@@ -625,6 +625,17 @@ def test_check_constraints(self):\n                     connection.check_constraints()\n             transaction.set_rollback(True)\n \n+    def test_check_constraints_sql_keywords(self):\n+        with transaction.atomic():\n+            obj = SQLKeywordsModel.objects.create(reporter=self.r)\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n+\n \n class ThreadTests(TransactionTestCase):\n \n",
  "problem_statement": "loaddata crashes on SQLite when table names are SQL keywords.\nDescription\n\t\nSteps to reproduce:\nCreate a Model called Order. (order is a SQL reserved word)\nCreate fixtures for the model\nUse manage.py loaddata to load the fixture.\nNotice that it fails with the following error. This is because the table name order is not quoted properly\n(0.000) PRAGMA foreign_key_check(order); args=None\nTraceback (most recent call last):\n File \"python3.7/site-packages/django/db/backends/utils.py\", line 82, in _execute\n\treturn self.cursor.execute(sql)\n File \"python3.7/site-packages/django/db/backends/sqlite3/base.py\", line 411, in execute\n\treturn Database.Cursor.execute(self, query)\nsqlite3.OperationalError: near \"order\": syntax error\nRoot Cause\nFile: python3.7/site-packages/django/db/backends/sqlite3/base.py line 327\nFunction: check_constraints\nDetails: due to missing back ticks around %s in the SQL statement PRAGMA foreign_key_check(%s)\nHere in check_constraints line 327 in context\n\t\t\t\tif table_names is None:\n\t\t\t\t\tviolations = cursor.execute('PRAGMA foreign_key_check').fetchall()\n\t\t\t\telse:\n\t\t\t\t\tviolations = chain.from_iterable(\n\t\t\t\t\t\tcursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()\n\t\t\t\t\t\tfor table_name in table_names\n\t\t\t\t\t)\nAnd here line 333\n\t\t\t\tfor table_name, rowid, referenced_table_name, foreign_key_index in violations:\n\t\t\t\t\tforeign_key = cursor.execute(\n\t\t\t\t\t\t'PRAGMA foreign_key_list(%s)' % table_name\n\t\t\t\t\t).fetchall()[foreign_key_index]\nIssue confirmed in\n3.1.0\n3.1.2\n",
  "hints_text": "Thanks for the report, I was able to reproduce this issue with db_table = 'order'. Reproduced at 966b5b49b6521483f1c90b4499c4c80e80136de3.\nSimply wrapping table_name in connection.ops.quote_name should address the issue for anyone interested in picking the issue up.\na little guidance needed as this is my first ticket.\nwill the issue be fixed if i just wrap %s around back ticks -> %s as in 'PRAGMA foreign_key_check(%s)' and 'PRAGMA foreign_key_list(%s)' % table_name?\nNayan, Have you seen Simon's comment? We should wrap with quote_name().\n\"Details: due to missing back ticks around %s in the SQL statement PRAGMA foreign_key_check(%s)\" But it is quoted that this should fix the issue.\nshall i wrap \"table_name\" in \"quote_name\" as in \"quote_name(table_name)\"?\nshall i wrap \"table_name\" in \"quote_name\" as in \"quote_name(table_name)\"? yes, self.ops.quote_name(table_name)\nFirst contribution, currently trying to understand the code to figure out how to write a regression test for this. Any help in how to unit test this is appreciated.\nI believe I got it. Will put my test in tests/fixtures_regress which has a lot of regression tests for loaddata already, creating a new Order model and a fixture for it.\nSuggested test improvements to avoid the creation of another model.\nThings have been busy for me but I'm still on it, I'll do the changes to the patch later this week.\nSince this issue hasn't received any activity recently, may I assign it to myself?\nSure, feel-free.\nPatch awaiting review. PR: â€‹https://github.com/django/django/pull/13807",
  "created_at": "2020-12-23T21:09:32Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_check_constraints_sql_keywords (backends.tests.FkConstraintsTests)\"]",
  "PASS_TO_PASS": "[\"Sequence names are correct when resetting generic relations (Ref #13941)\", \"test_parameter_escaping (backends.tests.EscapingChecks)\", \"test_paramless_no_escaping (backends.tests.EscapingChecks)\", \"An executemany call with too many/not enough parameters will raise an exception (Refs #12612)\", \"test_paramless_no_escaping (backends.tests.EscapingChecksDebug)\", \"test_can_reference_existent (backends.tests.DBConstraintTestCase)\", \"test_can_reference_non_existent (backends.tests.DBConstraintTestCase)\", \"test_many_to_many (backends.tests.DBConstraintTestCase)\", \"test_django_date_extract (backends.tests.DateQuotingTest)\", \"test_debug_sql (backends.tests.LastExecutedQueryTest)\", \"test_last_executed_query (backends.tests.LastExecutedQueryTest)\", \"test_last_executed_query_without_previous_query (backends.tests.LastExecutedQueryTest)\", \"last_executed_query() returns a string.\", \"Test creation of model with long name and long pk name doesn't error. Ref #8901\", \"test_sequence_name_length_limits_flush (backends.tests.LongNameTest)\", \"test_sequence_name_length_limits_m2m (backends.tests.LongNameTest)\", \"test_check_constraints (backends.tests.FkConstraintsTests)\", \"test_disable_constraint_checks_context_manager (backends.tests.FkConstraintsTests)\", \"test_disable_constraint_checks_manually (backends.tests.FkConstraintsTests)\", \"test_integrity_checks_on_creation (backends.tests.FkConstraintsTests)\", \"test_integrity_checks_on_update (backends.tests.FkConstraintsTests)\", \"test_closing_non_shared_connections (backends.tests.ThreadTests)\", \"test_connections_thread_local (backends.tests.ThreadTests)\", \"test_default_connection_thread_local (backends.tests.ThreadTests)\", \"test_pass_connection_between_threads (backends.tests.ThreadTests)\", \"test_thread_sharing_count (backends.tests.ThreadTests)\", \"test_cached_db_features (backends.tests.BackendTestCase)\", \"test_cursor_contextmanager (backends.tests.BackendTestCase)\", \"test_cursor_executemany (backends.tests.BackendTestCase)\", \"test_cursor_executemany_with_empty_params_list (backends.tests.BackendTestCase)\", \"test_cursor_executemany_with_iterator (backends.tests.BackendTestCase)\", \"test_database_operations_helper_class (backends.tests.BackendTestCase)\", \"test_database_operations_init (backends.tests.BackendTestCase)\", \"Creating an existing table returns a DatabaseError\", \"test_queries (backends.tests.BackendTestCase)\", \"test_timezone_none_use_tz_false (backends.tests.BackendTestCase)\", \"test_unicode_fetches (backends.tests.BackendTestCase)\", \"test_unicode_password (backends.tests.BackendTestCase)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.670574",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}