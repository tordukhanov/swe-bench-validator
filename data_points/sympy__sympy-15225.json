{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15225",
  "base_commit": "4f41286b22a05d5d75f456f1e574d8c115bab5d4",
  "patch": "diff --git a/sympy/logic/boolalg.py b/sympy/logic/boolalg.py\n--- a/sympy/logic/boolalg.py\n+++ b/sympy/logic/boolalg.py\n@@ -1993,8 +1993,9 @@ def _finger(eq):\n     # of times it appeared as a Not(symbol),\n     # of times it appeared as a Symbol in an And or Or,\n     # of times it appeared as a Not(Symbol) in an And or Or,\n-    sum of the number of arguments with which it appeared,\n-    counting Symbol as 1 and Not(Symbol) as 2\n+    sum of the number of arguments with which it appeared\n+    as a Symbol, counting Symbol as 1 and Not(Symbol) as 2\n+    and counting self as 1\n     ]\n \n     >>> from sympy.logic.boolalg import _finger as finger\n@@ -2002,7 +2003,18 @@ def _finger(eq):\n     >>> from sympy.abc import a, b, x, y\n     >>> eq = Or(And(Not(y), a), And(Not(y), b), And(x, y))\n     >>> dict(finger(eq))\n-    {(0, 0, 1, 0, 2): [x], (0, 0, 1, 0, 3): [a, b], (0, 0, 1, 2, 8): [y]}\n+    {(0, 0, 1, 0, 2): [x], (0, 0, 1, 0, 3): [a, b], (0, 0, 1, 2, 2): [y]}\n+    >>> dict(finger(x & ~y))\n+    {(0, 1, 0, 0, 0): [y], (1, 0, 0, 0, 0): [x]}\n+\n+    The equation must not have more than one level of nesting:\n+\n+    >>> dict(finger(And(Or(x, y), y)))\n+    {(0, 0, 1, 0, 2): [x], (1, 0, 1, 0, 2): [y]}\n+    >>> dict(finger(And(Or(x, And(a, x)), y)))\n+    Traceback (most recent call last):\n+    ...\n+    NotImplementedError: unexpected level of nesting\n \n     So y and x have unique fingerprints, but a and b do not.\n     \"\"\"\n@@ -2019,9 +2031,10 @@ def _finger(eq):\n                 if ai.is_Symbol:\n                     d[ai][2] += 1\n                     d[ai][-1] += o\n-                else:\n+                elif ai.is_Not:\n                     d[ai.args[0]][3] += 1\n-                    d[ai.args[0]][-1] += o\n+                else:\n+                    raise NotImplementedError('unexpected level of nesting')\n     inv = defaultdict(list)\n     for k, v in ordered(iter(d.items())):\n         inv[tuple(v)].append(k)\n@@ -2079,9 +2092,9 @@ def match(function1, function2):\n \n         # do some quick checks\n         if function1.__class__ != function2.__class__:\n-            return None\n+            return None  # maybe simplification would make them the same\n         if len(function1.args) != len(function2.args):\n-            return None\n+            return None  # maybe simplification would make them the same\n         if function1.is_Symbol:\n             return {function1: function2}\n \n@@ -2109,4 +2122,4 @@ def match(function1, function2):\n     m = match(a, b)\n     if m:\n         return a, m\n-    return m is not None\n+    return m\n",
  "test_patch": "diff --git a/sympy/logic/tests/test_boolalg.py b/sympy/logic/tests/test_boolalg.py\n--- a/sympy/logic/tests/test_boolalg.py\n+++ b/sympy/logic/tests/test_boolalg.py\n@@ -283,6 +283,7 @@ def test_bool_map():\n     function2 = SOPform([a,b,c],[[1, 0, 1], [1, 0, 0]])\n     assert bool_map(function1, function2) == \\\n         (function1, {y: a, z: b})\n+    assert bool_map(Xor(x, y), ~Xor(x, y)) == False\n \n \n def test_bool_symbol():\n",
  "problem_statement": "xor bool_map equivalent to xnor? - Flaw in _finger fingerprint\n\r\n`from sympy import *`\r\n`A1,A2 = symbols('A1,A2')`\r\n`f1 = Xor(A1,A2)`\r\n`f2 = ~(Xor(A1,A2))`\r\n`print(bool_map(f2,f1))`\r\n`print(bool_map(f1,f2))`\r\n\r\nresults in\r\n\r\n`((A1 & A2) | (~A1 & ~A2), {A1: A1, A2: A2})`\r\n`((A1 & ~A2) | (A2 & ~A1), {A1: A1, A2: A2})`\r\n\r\nThe simplified functions fro f1 and f2 are correct, and clearly different, yet bool_map returned what it though to be a valid symbol mapping?\n",
  "hints_text": "This is a  flaw in the _finger 5-item fingerprint:\r\n\r\n>  Assign a 5-item fingerprint to each symbol in the equation:\r\n    [\r\n    # of times it appeared as a Symbol,\r\n    # of times it appeared as a Not(symbol),\r\n    # of times it appeared as a Symbol in an And or Or,\r\n    # of times it appeared as a Not(Symbol) in an And or Or,\r\n    sum of the number of arguments with which it appeared,\r\n    counting Symbol as 1 and Not(Symbol) as 2\r\n    ]\r\n\r\n```\r\nfrom sympy import *\r\nfrom sympy.logic.boolalg import _finger\r\nfrom pprint import pprint\r\n\r\nA1,A2 = symbols('A1,A2')\r\na = _finger((A1 & A2) | (~A1 & ~A2))\r\nb = _finger((A1 & ~A2) | (~A1 & A2))\r\n\r\npprint(a)\r\npprint(b)\r\n```\r\nresults in identical fingerprints for A1 and A2:\r\n\r\n```\r\ndefaultdict(<class 'list'>, {(0, 0, 1, 1, 6): [A1, A2]})\r\ndefaultdict(<class 'list'>, {(0, 0, 1, 1, 6): [A1, A2]})\r\n```\r\n\r\nwhich is why A1 and A2 appear interchangeable\nI would like to work on it. I am doing a course on Digital Logic and Design. It's a great opportunity to apply here. :-)\nI'm very interested in the origination of the _finger heuristic.  Is it some classically known method? or was it a hack in place of a more compute intensive truth-table or formal approach?\r\n\r\nAn escape like this would be TERRIBLE in a Logical Equivalence Checking tool for digital circuit design!  Keep me posted on your suggestion for an alternate solution.\nGitHub history shows that it was introduced in https://github.com/sympy/sympy/pull/1619.\nFormal equivalence checking looks like a fascinating topic: https://en.wikipedia.org/wiki/Formal_equivalence_checking\r\nIf I had time, I think it would be fun to implement something like BDD https://en.wikipedia.org/wiki/Binary_decision_diagram into sympy\r\n\n> GitHub history shows that it was introduced in #1619.\r\n\r\nWow, it's been in there for 6 years, and nobody noticed it can't differentiate XOR/XNOR?\nTrying to stay true to the idea presented in the docstring, I would make this change:\r\n\r\n```diff\r\ndiff --git a/sympy/logic/boolalg.py b/sympy/logic/boolalg.py\r\nindex dfdec57..ce165fa 100644\r\n--- a/sympy/logic/boolalg.py\r\n+++ b/sympy/logic/boolalg.py\r\n@@ -2024,8 +2024,9 @@ def _finger(eq):\r\n     # of times it appeared as a Not(symbol),\r\n     # of times it appeared as a Symbol in an And or Or,\r\n     # of times it appeared as a Not(Symbol) in an And or Or,\r\n-    sum of the number of arguments with which it appeared,\r\n-    counting Symbol as 1 and Not(Symbol) as 2\r\n+    sum of the number of arguments with which it appeared\r\n+    as a Symbol, counting Symbol as 1 and Not(Symbol) as 2\r\n+    and counting self as 1\r\n     ]\r\n \r\n     >>> from sympy.logic.boolalg import _finger as finger\r\n@@ -2033,7 +2034,18 @@ def _finger(eq):\r\n     >>> from sympy.abc import a, b, x, y\r\n     >>> eq = Or(And(Not(y), a), And(Not(y), b), And(x, y))\r\n     >>> dict(finger(eq))\r\n-    {(0, 0, 1, 0, 2): [x], (0, 0, 1, 0, 3): [a, b], (0, 0, 1, 2, 8): [y]}\r\n+    {(0, 0, 1, 0, 2): [x], (0, 0, 1, 0, 3): [a, b], (0, 0, 1, 2, 2): [y]}\r\n+    >>> dict(finger(x & ~y))\r\n+    {(0, 1, 0, 0, 0): [y], (1, 0, 0, 0, 0): [x]}\r\n+\r\n+    The equation must not have more than one level of nesting:\r\n+\r\n+    >>> dict(finger(And(Or(x, y), y)))\r\n+    {(0, 0, 1, 0, 2): [x], (1, 0, 1, 0, 2): [y]}\r\n+    >>> dict(finger(And(Or(x, And(a, x)), y)))\r\n+    Traceback (most recent call last):\r\n+    ...\r\n+    NotImplementedError: unexpected level of nesting\r\n \r\n     So y and x have unique fingerprints, but a and b do not.\r\n     \"\"\"\r\n@@ -2050,9 +2062,10 @@ def _finger(eq):\r\n                 if ai.is_Symbol:\r\n                     d[ai][2] += 1\r\n                     d[ai][-1] += o\r\n-                else:\r\n+                elif ai.is_Not:\r\n                     d[ai.args[0]][3] += 1\r\n-                    d[ai.args[0]][-1] += o\r\n+                else:\r\n+                    raise NotImplementedError('unexpected level of nesting')\r\n     inv = defaultdict(list)\r\n     for k, v in ordered(iter(d.items())):\r\n         inv[tuple(v)].append(k)\r\n@@ -2110,9 +2123,9 @@ def match(function1, function2):\r\n \r\n         # do some quick checks\r\n         if function1.__class__ != function2.__class__:\r\n-            return None\r\n+            return None  # maybe simplification would make them the same\r\n         if len(function1.args) != len(function2.args):\r\n-            return None\r\n+            return None  # maybe simplification would make them the same\r\n         if function1.is_Symbol:\r\n             return {function1: function2}\r\n \r\n@@ -2140,4 +2153,4 @@ def match(function1, function2):\r\n     m = match(a, b)\r\n     if m:\r\n         return a, m\r\n-    return m is not None\r\n+    return m\r\ndiff --git a/sympy/logic/tests/test_boolalg.py b/sympy/logic/tests/test_boolalg.py\r\nindex 798da58..bb3d8c9 100644\r\n--- a/sympy/logic/tests/test_boolalg.py\r\n+++ b/sympy/logic/tests/test_boolalg.py\r\n@@ -285,6 +285,7 @@ def test_bool_map():\r\n     function2 = SOPform([a,b,c],[[1, 0, 1], [1, 0, 0]])\r\n     assert bool_map(function1, function2) == \\\r\n         (function1, {y: a, z: b})\r\n+    assert bool_map(Xor(x, y), ~Xor(x, y)) == False\r\n \r\n \r\n def test_bool_symbol():\r\n```\r\n\r\n\n> Is it some classically known method\r\n\r\nThe intent is not to check for digital equivalence, it is to detect when two expressions are structurally the same but having a different set of symbols. Two expressions should be able to pass this to be considered as a candidate for mapping:\r\n```python\r\ndef match(a, b):\r\n    if len(a.args) != len(b.args):\r\n        return False\r\n    if not isinstance(a, b.func) and not isinstance(b, a.func):\r\n        return False\r\n    return all(match(*z) for z in zip(*map(ordered, (a.args, b.args))))\r\n```\r\nThere are methods like `dummy_eq` that do this for objects that create a single dummy symbol in the result, e.g. \r\n```\r\n>>> Sum(x,(x,1,3)) == Sum(y,(y,1,3))\r\nFalse\r\n>>> Sum(x,(x,1,3)).dummy_eq(Sum(y,(y,1,3)))\r\nTrue\r\n>>>\r\n```\r\nbut not every object has this implemented:\r\n```\r\n>>> Derivative(f(x),x) == Derivative(f(y),y)\r\nFalse\r\n>>> Derivative(f(x),x).dummy_eq(Derivative(f(y),y))\r\nFalse\r\n```",
  "created_at": "2018-09-12T22:35:45Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_bool_map\"]",
  "PASS_TO_PASS": "[\"test_overloading\", \"test_And\", \"test_Or\", \"test_Xor\", \"test_Not\", \"test_Nand\", \"test_Nor\", \"test_Xnor\", \"test_Implies\", \"test_Equivalent\", \"test_equals\", \"test_simplification\", \"test_bool_symbol\", \"test_is_boolean\", \"test_subs\", \"test_commutative\", \"test_and_associativity\", \"test_or_assicativity\", \"test_double_negation\", \"test_eliminate_implications\", \"test_conjuncts\", \"test_disjuncts\", \"test_distribute\", \"test_to_nnf\", \"test_to_cnf\", \"test_to_dnf\", \"test_to_int_repr\", \"test_is_nnf\", \"test_is_cnf\", \"test_is_dnf\", \"test_ITE\", \"test_is_literal\", \"test_operators\", \"test_true_false\", \"test_bool_as_set\", \"test_all_or_nothing\", \"test_canonical_atoms\", \"test_issue_8777\", \"test_issue_8975\", \"test_term_to_integer\", \"test_integer_to_term\", \"test_truth_table\", \"test_issue_8571\", \"test_expand_relational\", \"test_issue_12717\", \"test_as_Boolean\", \"test_binary_symbols\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.097084",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}