{
  "repo": "django/django",
  "instance_id": "django__django-14071",
  "base_commit": "a9cf954e6174450057ea1065aa2ccbbd12f59b65",
  "patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -239,6 +239,14 @@ def _check_raw_id_fields_item(self, obj, field_name, label):\n         except FieldDoesNotExist:\n             return refer_to_missing_field(field=field_name, option=label, obj=obj, id='admin.E002')\n         else:\n+            # Using attname is not supported.\n+            if field.name != field_name:\n+                return refer_to_missing_field(\n+                    field=field_name,\n+                    option=label,\n+                    obj=obj,\n+                    id='admin.E002',\n+                )\n             if not field.many_to_many and not isinstance(field, models.ForeignKey):\n                 return must_be('a foreign key or a many-to-many field', option=label, obj=obj, id='admin.E003')\n             else:\n@@ -1129,8 +1137,8 @@ def must_inherit_from(parent, option, obj, id):\n def refer_to_missing_field(field, option, obj, id):\n     return [\n         checks.Error(\n-            \"The value of '%s' refers to '%s', which is not an attribute of \"\n-            \"'%s'.\" % (option, field, obj.model._meta.label),\n+            \"The value of '%s' refers to '%s', which is not a field of '%s'.\"\n+            % (option, field, obj.model._meta.label),\n             obj=obj.__class__,\n             id=id,\n         ),\n",
  "test_patch": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -309,7 +309,7 @@ class SongAdmin(admin.ModelAdmin):\n         self.assertEqual(SongAdmin(Song, AdminSite()).check(), [\n             checks.Error(\n                 \"The value of 'list_editable[0]' refers to 'test', which is \"\n-                \"not an attribute of 'admin_checks.Song'.\",\n+                \"not a field of 'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id='admin.E121',\n             )\n@@ -618,7 +618,7 @@ class RawIdNonexistentAdmin(admin.ModelAdmin):\n         expected = [\n             checks.Error(\n                 \"The value of 'raw_id_fields[0]' refers to 'nonexistent', \"\n-                \"which is not an attribute of 'admin_checks.Album'.\",\n+                \"which is not a field of 'admin_checks.Album'.\",\n                 obj=RawIdNonexistentAdmin,\n                 id='admin.E002',\n             )\ndiff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -63,7 +63,7 @@ class TestModelAdmin(ModelAdmin):\n         self.assertIsInvalid(\n             TestModelAdmin, ValidationTestModel,\n             \"The value of 'raw_id_fields[0]' refers to 'non_existent_field', \"\n-            \"which is not an attribute of 'modeladmin.ValidationTestModel'.\",\n+            \"which is not a field of 'modeladmin.ValidationTestModel'.\",\n             'admin.E002'\n         )\n \n@@ -84,6 +84,18 @@ class TestModelAdmin(ModelAdmin):\n \n         self.assertIsValid(TestModelAdmin, ValidationTestModel)\n \n+    def test_field_attname(self):\n+        class TestModelAdmin(ModelAdmin):\n+            raw_id_fields = ['band_id']\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin,\n+            ValidationTestModel,\n+            \"The value of 'raw_id_fields[0]' refers to 'band_id', which is \"\n+            \"not a field of 'modeladmin.ValidationTestModel'.\",\n+            'admin.E002',\n+        )\n+\n \n class FieldsetsCheckTests(CheckTestCase):\n \n@@ -278,7 +290,7 @@ class TestModelAdmin(ModelAdmin):\n         self.assertIsInvalid(\n             TestModelAdmin, ValidationTestModel,\n             \"The value of 'filter_vertical[0]' refers to 'non_existent_field', \"\n-            \"which is not an attribute of 'modeladmin.ValidationTestModel'.\",\n+            \"which is not a field of 'modeladmin.ValidationTestModel'.\",\n             'admin.E019'\n         )\n \n@@ -318,7 +330,7 @@ class TestModelAdmin(ModelAdmin):\n         self.assertIsInvalid(\n             TestModelAdmin, ValidationTestModel,\n             \"The value of 'filter_horizontal[0]' refers to 'non_existent_field', \"\n-            \"which is not an attribute of 'modeladmin.ValidationTestModel'.\",\n+            \"which is not a field of 'modeladmin.ValidationTestModel'.\",\n             'admin.E019'\n         )\n \n@@ -359,7 +371,7 @@ class TestModelAdmin(ModelAdmin):\n         self.assertIsInvalid(\n             TestModelAdmin, ValidationTestModel,\n             \"The value of 'radio_fields' refers to 'non_existent_field', \"\n-            \"which is not an attribute of 'modeladmin.ValidationTestModel'.\",\n+            \"which is not a field of 'modeladmin.ValidationTestModel'.\",\n             'admin.E022'\n         )\n \n@@ -421,7 +433,7 @@ class TestModelAdmin(ModelAdmin):\n         self.assertIsInvalid(\n             TestModelAdmin, ValidationTestModel,\n             \"The value of 'prepopulated_fields' refers to 'non_existent_field', \"\n-            \"which is not an attribute of 'modeladmin.ValidationTestModel'.\",\n+            \"which is not a field of 'modeladmin.ValidationTestModel'.\",\n             'admin.E027'\n         )\n \n@@ -432,7 +444,7 @@ class TestModelAdmin(ModelAdmin):\n         self.assertIsInvalid(\n             TestModelAdmin, ValidationTestModel,\n             \"The value of 'prepopulated_fields[\\\"slug\\\"][0]' refers to 'non_existent_field', \"\n-            \"which is not an attribute of 'modeladmin.ValidationTestModel'.\",\n+            \"which is not a field of 'modeladmin.ValidationTestModel'.\",\n             'admin.E030'\n         )\n \n@@ -873,7 +885,7 @@ class TestModelAdmin(ModelAdmin):\n         self.assertIsInvalid(\n             TestModelAdmin, ValidationTestModel,\n             \"The value of 'ordering[0]' refers to 'non_existent_field', \"\n-            \"which is not an attribute of 'modeladmin.ValidationTestModel'.\",\n+            \"which is not a field of 'modeladmin.ValidationTestModel'.\",\n             'admin.E033'\n         )\n \n@@ -914,7 +926,7 @@ class TestModelAdmin(ModelAdmin):\n         self.assertIsInvalid(\n             TestModelAdmin, ValidationTestModel,\n             \"The value of 'ordering[0]' refers to 'nonexistent', which is not \"\n-            \"an attribute of 'modeladmin.ValidationTestModel'.\",\n+            \"a field of 'modeladmin.ValidationTestModel'.\",\n             'admin.E033'\n         )\n \n@@ -1342,7 +1354,7 @@ class Admin(ModelAdmin):\n             Admin, ValidationTestModel,\n             msg=(\n                 \"The value of 'autocomplete_fields[0]' refers to 'nonexistent', \"\n-                \"which is not an attribute of 'modeladmin.ValidationTestModel'.\"\n+                \"which is not a field of 'modeladmin.ValidationTestModel'.\"\n             ),\n             id='admin.E037',\n             invalid_obj=Admin,\n",
  "problem_statement": "Admin's raw_id_field check admin.E002 doesn't catch .attname mis-references\nDescription\n\t\nSince admin.E002 relies on models.Options.get_field which allows retrieval of fields by both name and attname referring to fields by attname while only name ​is taken into consideration allows the check to pass while raw_id_fields is not honoured.\ne.g.\nclass BookAdmin(ModelAdmin):\n\traw_id_fields = ['author_id']\npasses admin.E002 but the author field won't use the raw_id feature.\nThe _check_raw_id_fields_item method should also make sure to check field.name == field_name on field retrieval success and return refer_to_missing_field(field=field_name, option=label, obj=obj, id='admin.E002') when it's not the case.\n",
  "hints_text": "Alternatively all db_field.name in self.raw_id_fields checks could be changed to db_field.name in self.raw_id_fields or db_field.attname in self.raw_id_fields but that seems like a lot of work for little benefit.\n​PR\nI've created a ​PR to check field.name with field_name in _check_raw_id_fields_item method. Alternatively all db_field.name in self.raw_id_fields checks could be changed to db_field.name in self.raw_id_fields or db_field.attname in self.raw_id_fields but that seems like a lot of work for little benefit. I found two lines in the django.contrib.admin.options which have db_field.name in self.raw_id_fields check: ​https://github.com/django/django/blob/d3ecef26b9fda02b88f925a800ae38dd5873c878/django/contrib/admin/options.py#L229 ​https://github.com/django/django/blob/d3ecef26b9fda02b88f925a800ae38dd5873c878/django/contrib/admin/options.py#L262 Should I change them?\nHasan, I think it's one way or the other. We either add tested support for referring to fields by .attname by changing all db_field.name in raw_id_fields checks to {db_field.name, db_field.attname}.union(raw_id_fields) or adjust admin.E002 not to return false negative when dealing with .attname references. Either way works and I don't have strong feeling about one approach over the other as long as its not silently allowed to be misconfigured.",
  "created_at": "2021-03-02T15:16:27Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_autocomplete_e037 (modeladmin.test_checks.AutocompleteFieldsTests)\", \"test_missing_field (modeladmin.test_checks.FilterVerticalCheckTests)\", \"test_missing_field (modeladmin.test_checks.FilterHorizontalCheckTests)\", \"test_missing_field (modeladmin.test_checks.PrepopulatedFieldsCheckTests)\", \"test_missing_field_again (modeladmin.test_checks.PrepopulatedFieldsCheckTests)\", \"test_invalid_expression (modeladmin.test_checks.OrderingCheckTests)\", \"test_not_iterable (modeladmin.test_checks.OrderingCheckTests)\", \"test_field_attname (modeladmin.test_checks.RawIdCheckTests)\", \"test_missing_field (modeladmin.test_checks.RawIdCheckTests)\", \"test_missing_field (modeladmin.test_checks.RadioFieldsCheckTests)\", \"test_app_label_in_admin_checks (admin_checks.tests.SystemChecksTestCase)\", \"test_list_editable_missing_field (admin_checks.tests.SystemChecksTestCase)\"]",
  "PASS_TO_PASS": "[\"test_actions_not_unique (modeladmin.test_checks.ActionsCheckTests)\", \"test_actions_unique (modeladmin.test_checks.ActionsCheckTests)\", \"test_custom_permissions_require_matching_has_method (modeladmin.test_checks.ActionsCheckTests)\", \"test_not_integer (modeladmin.test_checks.ExtraCheckTests)\", \"test_valid_case (modeladmin.test_checks.ExtraCheckTests)\", \"test_invalid_field_type (modeladmin.test_checks.DateHierarchyCheckTests)\", \"test_missing_field (modeladmin.test_checks.DateHierarchyCheckTests)\", \"test_related_invalid_field_type (modeladmin.test_checks.DateHierarchyCheckTests)\", \"test_related_valid_case (modeladmin.test_checks.DateHierarchyCheckTests)\", \"test_valid_case (modeladmin.test_checks.DateHierarchyCheckTests)\", \"test_autocomplete_e036 (modeladmin.test_checks.AutocompleteFieldsTests)\", \"test_autocomplete_e039 (modeladmin.test_checks.AutocompleteFieldsTests)\", \"test_autocomplete_e040 (modeladmin.test_checks.AutocompleteFieldsTests)\", \"test_autocomplete_e38 (modeladmin.test_checks.AutocompleteFieldsTests)\", \"test_autocomplete_is_onetoone (modeladmin.test_checks.AutocompleteFieldsTests)\", \"test_autocomplete_is_valid (modeladmin.test_checks.AutocompleteFieldsTests)\", \"test_duplicate_fields_in_fields (modeladmin.test_checks.FieldsCheckTests)\", \"test_inline (modeladmin.test_checks.FieldsCheckTests)\", \"test_both_list_editable_and_list_display_links (modeladmin.test_checks.ListDisplayEditableTests)\", \"The first item in list_display can be in list_editable as long as\", \"The first item in list_display cannot be in list_editable if\", \"The first item in list_display can be the same as the first in\", \"The first item in list_display cannot be the same as the first item\", \"list_display and list_editable can contain the same values\", \"test_missing_field (modeladmin.test_checks.FkNameCheckTests)\", \"test_valid_case (modeladmin.test_checks.FkNameCheckTests)\", \"test_invalid_field_type (modeladmin.test_checks.FilterVerticalCheckTests)\", \"test_not_iterable (modeladmin.test_checks.FilterVerticalCheckTests)\", \"test_valid_case (modeladmin.test_checks.FilterVerticalCheckTests)\", \"test_invalid_field_type (modeladmin.test_checks.FilterHorizontalCheckTests)\", \"test_not_iterable (modeladmin.test_checks.FilterHorizontalCheckTests)\", \"test_valid_case (modeladmin.test_checks.FilterHorizontalCheckTests)\", \"test_inline_without_formset_class (modeladmin.test_checks.FormsetCheckTests)\", \"test_invalid_type (modeladmin.test_checks.FormsetCheckTests)\", \"test_valid_case (modeladmin.test_checks.FormsetCheckTests)\", \"test_fieldsets_with_custom_form_validation (modeladmin.test_checks.FormCheckTests)\", \"test_invalid_type (modeladmin.test_checks.FormCheckTests)\", \"test_valid_case (modeladmin.test_checks.FormCheckTests)\", \"test_duplicate_fields (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_duplicate_fields_in_fieldsets (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_fieldsets_with_custom_form_validation (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_item_not_a_pair (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_missing_fields_key (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_non_iterable_item (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_not_iterable (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_second_element_of_item_not_a_dict (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_specified_both_fields_and_fieldsets (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_valid_case (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_invalid_callable (modeladmin.test_checks.InlinesCheckTests)\", \"test_invalid_model (modeladmin.test_checks.InlinesCheckTests)\", \"test_invalid_model_type (modeladmin.test_checks.InlinesCheckTests)\", \"test_missing_model_field (modeladmin.test_checks.InlinesCheckTests)\", \"test_not_correct_inline_field (modeladmin.test_checks.InlinesCheckTests)\", \"test_not_iterable (modeladmin.test_checks.InlinesCheckTests)\", \"test_not_model_admin (modeladmin.test_checks.InlinesCheckTests)\", \"test_valid_case (modeladmin.test_checks.InlinesCheckTests)\", \"test_None_is_valid_case (modeladmin.test_checks.ListDisplayLinksCheckTests)\", \"list_display_links is checked for list/tuple/None even if\", \"list_display_links check is skipped if get_list_display() is overridden.\", \"test_missing_field (modeladmin.test_checks.ListDisplayLinksCheckTests)\", \"test_missing_in_list_display (modeladmin.test_checks.ListDisplayLinksCheckTests)\", \"test_not_iterable (modeladmin.test_checks.ListDisplayLinksCheckTests)\", \"test_valid_case (modeladmin.test_checks.ListDisplayLinksCheckTests)\", \"test_not_integer (modeladmin.test_checks.ListPerPageCheckTests)\", \"test_valid_case (modeladmin.test_checks.ListPerPageCheckTests)\", \"test_not_integer (modeladmin.test_checks.ListMaxShowAllCheckTests)\", \"test_valid_case (modeladmin.test_checks.ListMaxShowAllCheckTests)\", \"test_not_integer (modeladmin.test_checks.MaxNumCheckTests)\", \"test_valid_case (modeladmin.test_checks.MaxNumCheckTests)\", \"test_callable (modeladmin.test_checks.ListFilterTests)\", \"test_list_filter_is_func (modeladmin.test_checks.ListFilterTests)\", \"test_list_filter_validation (modeladmin.test_checks.ListFilterTests)\", \"test_missing_field (modeladmin.test_checks.ListFilterTests)\", \"test_not_associated_with_field_name (modeladmin.test_checks.ListFilterTests)\", \"test_not_callable (modeladmin.test_checks.ListFilterTests)\", \"test_not_filter (modeladmin.test_checks.ListFilterTests)\", \"test_not_filter_again (modeladmin.test_checks.ListFilterTests)\", \"test_not_filter_again_again (modeladmin.test_checks.ListFilterTests)\", \"test_not_list_filter_class (modeladmin.test_checks.ListFilterTests)\", \"test_valid_case (modeladmin.test_checks.ListFilterTests)\", \"test_invalid_type (modeladmin.test_checks.ListSelectRelatedCheckTests)\", \"test_valid_case (modeladmin.test_checks.ListSelectRelatedCheckTests)\", \"test_invalid_field_type (modeladmin.test_checks.ListDisplayTests)\", \"test_missing_field (modeladmin.test_checks.ListDisplayTests)\", \"test_not_iterable (modeladmin.test_checks.ListDisplayTests)\", \"test_valid_case (modeladmin.test_checks.ListDisplayTests)\", \"test_valid_field_accessible_via_instance (modeladmin.test_checks.ListDisplayTests)\", \"test_not_boolean (modeladmin.test_checks.SaveAsCheckTests)\", \"test_valid_case (modeladmin.test_checks.SaveAsCheckTests)\", \"test_not_integer (modeladmin.test_checks.MinNumCheckTests)\", \"test_valid_case (modeladmin.test_checks.MinNumCheckTests)\", \"test_invalid_field_type (modeladmin.test_checks.PrepopulatedFieldsCheckTests)\", \"test_not_dictionary (modeladmin.test_checks.PrepopulatedFieldsCheckTests)\", \"test_not_list_or_tuple (modeladmin.test_checks.PrepopulatedFieldsCheckTests)\", \"test_one_to_one_field (modeladmin.test_checks.PrepopulatedFieldsCheckTests)\", \"test_valid_case (modeladmin.test_checks.PrepopulatedFieldsCheckTests)\", \"test_random_marker_not_alone (modeladmin.test_checks.OrderingCheckTests)\", \"test_valid_case (modeladmin.test_checks.OrderingCheckTests)\", \"test_valid_complex_case (modeladmin.test_checks.OrderingCheckTests)\", \"test_valid_expression (modeladmin.test_checks.OrderingCheckTests)\", \"test_valid_random_marker_case (modeladmin.test_checks.OrderingCheckTests)\", \"test_not_iterable (modeladmin.test_checks.SearchFieldsCheckTests)\", \"test_not_boolean (modeladmin.test_checks.SaveOnTopCheckTests)\", \"test_valid_case (modeladmin.test_checks.SaveOnTopCheckTests)\", \"test_invalid_field_type (modeladmin.test_checks.RawIdCheckTests)\", \"test_not_iterable (modeladmin.test_checks.RawIdCheckTests)\", \"test_valid_case (modeladmin.test_checks.RawIdCheckTests)\", \"test_invalid_field_type (modeladmin.test_checks.RadioFieldsCheckTests)\", \"test_invalid_value (modeladmin.test_checks.RadioFieldsCheckTests)\", \"test_not_dictionary (modeladmin.test_checks.RadioFieldsCheckTests)\", \"test_valid_case (modeladmin.test_checks.RadioFieldsCheckTests)\", \"test_admin_check_ignores_import_error_in_middleware (admin_checks.tests.SystemChecksTestCase)\", \"test_allows_checks_relying_on_other_modeladmins (admin_checks.tests.SystemChecksTestCase)\", \"test_apps_dependencies (admin_checks.tests.SystemChecksTestCase)\", \"test_cannot_include_through (admin_checks.tests.SystemChecksTestCase)\", \"test_check_fieldset_sublists_for_duplicates (admin_checks.tests.SystemChecksTestCase)\", \"test_check_sublists_for_duplicates (admin_checks.tests.SystemChecksTestCase)\", \"test_checks_are_performed (admin_checks.tests.SystemChecksTestCase)\", \"test_context_processor_dependencies (admin_checks.tests.SystemChecksTestCase)\", \"test_context_processor_dependencies_model_backend_subclass (admin_checks.tests.SystemChecksTestCase)\", \"test_custom_adminsite (admin_checks.tests.SystemChecksTestCase)\", \"The fieldsets checks are skipped when the ModelAdmin.get_form() method\", \"# Regression test for #8027: custom ModelForms with fields/fieldsets\", \"test_editable (admin_checks.tests.SystemChecksTestCase)\", \"test_exclude_duplicate_values (admin_checks.tests.SystemChecksTestCase)\", \"test_exclude_in_inline (admin_checks.tests.SystemChecksTestCase)\", \"Regression test for #9932 - exclude in InlineModelAdmin should not\", \"Tests for basic system checks of 'exclude' option values (#12689)\", \"Regression test for #12209 -- If the explicitly provided through model\", \"test_extra (admin_checks.tests.SystemChecksTestCase)\", \"test_field_name_not_in_list_display (admin_checks.tests.SystemChecksTestCase)\", \"The first fieldset's fields must be a list/tuple.\", \"Regression test for #11709 - when testing for fk excluding (when exclude is\", \"A GenericInlineModelAdmin errors if the ct_field points to a\", \"A GenericInlineModelAdmin errors if the ct_fk_field points to a\", \"A model without a GenericForeignKey raises problems if it's included\", \"A GenericInlineModelAdmin raises problems if the ct_field points to a\", \"A GenericInlineModelAdmin raises problems if the ct_fk_field points to\", \"Regression test for #12203/#12237 - Fail more gracefully when a M2M field that\", \"test_inline_self_check (admin_checks.tests.SystemChecksTestCase)\", \"test_inline_with_specified (admin_checks.tests.SystemChecksTestCase)\", \"test_inlines_property (admin_checks.tests.SystemChecksTestCase)\", \"test_list_editable_not_a_list_or_tuple (admin_checks.tests.SystemChecksTestCase)\", \"Ensure list_filter can access reverse fields even when the app registry\", \"test_middleware_dependencies (admin_checks.tests.SystemChecksTestCase)\", \"test_middleware_subclasses (admin_checks.tests.SystemChecksTestCase)\", \"test_nested_fields (admin_checks.tests.SystemChecksTestCase)\", \"test_nested_fieldsets (admin_checks.tests.SystemChecksTestCase)\", \"test_no_template_engines (admin_checks.tests.SystemChecksTestCase)\", \"Regression for ensuring ModelAdmin.fields can contain non-model fields\", \"Regression for ensuring ModelAdmin.field can handle first elem being a\", \"test_nonexistent_field (admin_checks.tests.SystemChecksTestCase)\", \"test_nonexistent_field_on_inline (admin_checks.tests.SystemChecksTestCase)\", \"The second fieldset's fields must be a list/tuple.\", \"test_readonly (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_and_editable (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_dynamic_attribute_on_modeladmin (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_fields_not_list_or_tuple (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_lambda (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_method_on_model (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_on_method (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_on_modeladmin (admin_checks.tests.SystemChecksTestCase)\", \"test_several_templates_backends (admin_checks.tests.SystemChecksTestCase)\", \"Regression test for #22034 - check that generic inlines don't look for\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.680645",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}