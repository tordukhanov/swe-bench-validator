{
  "repo": "psf/requests",
  "instance_id": "psf__requests-774",
  "base_commit": "27b55a74d7b9bd2f8c60fd0ee342bcbbf40e0a66",
  "patch": "diff --git a/requests/models.py b/requests/models.py\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -413,7 +413,10 @@ def full_url(self):\n         if not scheme in SCHEMAS:\n             raise InvalidSchema(\"Invalid scheme %r\" % scheme)\n \n-        netloc = netloc.encode('idna').decode('utf-8')\n+        try:\n+            netloc = netloc.encode('idna').decode('utf-8')\n+        except UnicodeError:\n+            raise InvalidURL('URL has an invalid label.')\n \n         if not path:\n             path = '/'\n",
  "test_patch": "diff --git a/tests/test_requests.py b/tests/test_requests.py\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -19,6 +19,7 @@\n from requests import HTTPError\n from requests import get, post, head, put\n from requests.auth import HTTPBasicAuth, HTTPDigestAuth\n+from requests.exceptions import InvalidURL\n \n if 'HTTPBIN_URL' not in os.environ:\n     os.environ['HTTPBIN_URL'] = 'http://httpbin.org/'\n@@ -1062,6 +1063,10 @@ def test_bytes_files(self):\n         \"\"\"Test that `bytes` can be used as the values of `files`.\"\"\"\n         post(httpbin('post'), files={'test': b'test'})\n \n+    def test_invalid_urls_throw_requests_exception(self):\n+        \"\"\"Test that URLs with invalid labels throw\n+        Requests.exceptions.InvalidURL instead of UnicodeError.\"\"\"\n+        self.assertRaises(InvalidURL, get, 'http://.google.com/')\n \n if __name__ == '__main__':\n     unittest.main()\n",
  "problem_statement": "Catch UnicodeError coming from encodings/idna.py\nHere's a Python 2.6 Requests 0.13.1 traceback.  Looks like the call to `netloc.encode('idna').decode('utf-8')` needs a try/except.\n\n```\nFile \"/srv/import-service/lib/python2.6/site-packages/requests/api.py\", line 76, in head\n    return request('head', url, **kwargs)\n  File \"/srv/import-service/lib/python2.6/site-packages/requests/safe_mode.py\", line 37, in wrapped\n    return function(method, url, **kwargs)\n  File \"/srv/import-service/lib/python2.6/site-packages/requests/api.py\", line 42, in request\n    return s.request(method=method, url=url, **kwargs)\n  File \"/srv/import-service/lib/python2.6/site-packages/requests/sessions.py\", line 230, in request\n    r.send(prefetch=prefetch)\n  File \"/srv/import-service/lib/python2.6/site-packages/requests/models.py\", line 618, in send\n    self._build_response(r)\n  File \"/srv/import-service/lib/python2.6/site-packages/requests/models.py\", line 305, in _build_response\n    request.send()\n  File \"/srv/import-service/lib/python2.6/site-packages/requests/models.py\", line 474, in send\n    url = self.full_url\n  File \"/srv/import-service/lib/python2.6/site-packages/requests/models.py\", line 388, in full_url\n    netloc = netloc.encode('idna').decode('utf-8')\n  File \"/srv/import-service/lib/python2.6/encodings/idna.py\", line 164, in encode\n    result.append(ToASCII(label))\n  File \"/srv/import-service/lib/python2.6/encodings/idna.py\", line 73, in ToASCII\n    raise UnicodeError(\"label empty or too long\")\nUnicodeError: label empty or too long\n```\n\n",
  "hints_text": "This incredibly unhelpful exception is sometimes thrown because the URL is invalid. For example:\n\n``` python\n>>> u'google.com'.encode('idna')\n'google.com'\n>>> u'.google.com'.encode('idna')\nUnicodeError: label empty or too long\n```\n\nWould it be possible for you to check the URL you're using, or alternatively to post it here so I can take a look?\n\n@terrycojones Is this bug still affecting you, or has it been resolved?\n",
  "created_at": "2012-08-10T16:49:52Z",
  "version": "0.13",
  "FAIL_TO_PASS": "[\"tests/test_requests.py::RequestsTestSuite::test_GET_no_redirect\", \"tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS\", \"tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_PARAMS\", \"tests/test_requests.py::RequestsTestSuite::test_danger_mode_redirects\", \"tests/test_requests.py::RequestsTestSuite::test_httpauth_recursion\", \"tests/test_requests.py::RequestsTestSuite::test_iter_lines\", \"tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring_multivalued\"]",
  "PASS_TO_PASS": "[\"tests/test_requests.py::RequestsTestSuite::test_BASICAUTH_TUPLE_HTTP_200_OK_GET\", \"tests/test_requests.py::RequestsTestSuite::test_HEAD_no_redirect\", \"tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET\", \"tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_PARAMS\", \"tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_HEAD\", \"tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_PUT\", \"tests/test_requests.py::RequestsTestSuite::test_HTTP_302_ALLOW_REDIRECT_GET\", \"tests/test_requests.py::RequestsTestSuite::test_HTTP_302_GET\", \"tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES\", \"tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_STRINGS\", \"tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_HEADERS\", \"tests/test_requests.py::RequestsTestSuite::test_accept_objects_with_string_representations_as_urls\", \"tests/test_requests.py::RequestsTestSuite::test_bytes_files\", \"tests/test_requests.py::RequestsTestSuite::test_cached_response\", \"tests/test_requests.py::RequestsTestSuite::test_can_have_none_in_header_values\", \"tests/test_requests.py::RequestsTestSuite::test_connection_error\", \"tests/test_requests.py::RequestsTestSuite::test_connection_error_with_safe_mode\", \"tests/test_requests.py::RequestsTestSuite::test_connection_keepalive_and_close\", \"tests/test_requests.py::RequestsTestSuite::test_decompress_gzip\", \"tests/test_requests.py::RequestsTestSuite::test_default_status_raising\", \"tests/test_requests.py::RequestsTestSuite::test_empty_response\", \"tests/test_requests.py::RequestsTestSuite::test_entry_points\", \"tests/test_requests.py::RequestsTestSuite::test_file_post_data\", \"tests/test_requests.py::RequestsTestSuite::test_head_content\", \"tests/test_requests.py::RequestsTestSuite::test_invalid_url\", \"tests/test_requests.py::RequestsTestSuite::test_max_redirects\", \"tests/test_requests.py::RequestsTestSuite::test_multiple_hooks\", \"tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_post_data\", \"tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_postdata\", \"tests/test_requests.py::RequestsTestSuite::test_nonzero_evaluation\", \"tests/test_requests.py::RequestsTestSuite::test_params_are_added_before_fragment\", \"tests/test_requests.py::RequestsTestSuite::test_path_is_not_double_encoded\", \"tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files\", \"tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files_as_tuples\", \"tests/test_requests.py::RequestsTestSuite::test_prefetch_redirect_bug\", \"tests/test_requests.py::RequestsTestSuite::test_prefetch_return_response_interaction\", \"tests/test_requests.py::RequestsTestSuite::test_redirect_history\", \"tests/test_requests.py::RequestsTestSuite::test_relative_redirect_history\", \"tests/test_requests.py::RequestsTestSuite::test_request_ok_set\", \"tests/test_requests.py::RequestsTestSuite::test_response_has_unicode_url\", \"tests/test_requests.py::RequestsTestSuite::test_response_sent\", \"tests/test_requests.py::RequestsTestSuite::test_session_HTTP_200_OK_GET\", \"tests/test_requests.py::RequestsTestSuite::test_session_persistent_params\", \"tests/test_requests.py::RequestsTestSuite::test_session_pickling\", \"tests/test_requests.py::RequestsTestSuite::test_single_hook\", \"tests/test_requests.py::RequestsTestSuite::test_status_raising\", \"tests/test_requests.py::RequestsTestSuite::test_unicode_get\", \"tests/test_requests.py::RequestsTestSuite::test_upload_binary_data\", \"tests/test_requests.py::RequestsTestSuite::test_urlencoded_get_query_multivalued_param\", \"tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_data\", \"tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_and_data\", \"tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_multivalued_and_data\", \"tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring\", \"tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_port\", \"tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_scheme\", \"tests/test_requests.py::RequestsTestSuite::test_user_agent_transfers\"]",
  "environment_setup_commit": "27b55a74d7b9bd2f8c60fd0ee342bcbbf40e0a66",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.866842",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}