{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-7535",
  "base_commit": "7ec6401ffabf79d52938ece5b8ff566a8b9c260e",
  "patch": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -262,7 +262,15 @@ def __str__(self) -> str:\n             raise\n         except BaseException:\n             line = \"???\"\n-        return \"  File %r:%d in %s\\n  %s\\n\" % (self.path, self.lineno + 1, name, line)\n+        # This output does not quite match Python's repr for traceback entries,\n+        # but changing it to do so would break certain plugins.  See\n+        # https://github.com/pytest-dev/pytest/pull/7535/ for details.\n+        return \"  File %r:%d in %s\\n  %s\\n\" % (\n+            str(self.path),\n+            self.lineno + 1,\n+            name,\n+            line,\n+        )\n \n     @property\n     def name(self) -> str:\n",
  "test_patch": "diff --git a/testing/code/test_code.py b/testing/code/test_code.py\n--- a/testing/code/test_code.py\n+++ b/testing/code/test_code.py\n@@ -1,3 +1,4 @@\n+import re\n import sys\n from types import FrameType\n from unittest import mock\n@@ -170,6 +171,15 @@ def test_getsource(self) -> None:\n         assert len(source) == 6\n         assert \"assert False\" in source[5]\n \n+    def test_tb_entry_str(self):\n+        try:\n+            assert False\n+        except AssertionError:\n+            exci = ExceptionInfo.from_current()\n+        pattern = r\"  File '.*test_code.py':\\d+ in test_tb_entry_str\\n  assert False\"\n+        entry = str(exci.traceback[0])\n+        assert re.match(pattern, entry)\n+\n \n class TestReprFuncArgs:\n     def test_not_raise_exception_with_mixed_encoding(self, tw_mock) -> None:\n",
  "problem_statement": "pytest 6: Traceback in pytest.raises contains repr of py.path.local\nThe [werkzeug](https://github.com/pallets/werkzeug) tests fail with pytest 6:\r\n\r\n```python\r\n    def test_import_string_provides_traceback(tmpdir, monkeypatch):\r\n        monkeypatch.syspath_prepend(str(tmpdir))\r\n        # Couple of packages\r\n        dir_a = tmpdir.mkdir(\"a\")\r\n        dir_b = tmpdir.mkdir(\"b\")\r\n        # Totally packages, I promise\r\n        dir_a.join(\"__init__.py\").write(\"\")\r\n        dir_b.join(\"__init__.py\").write(\"\")\r\n        # 'aa.a' that depends on 'bb.b', which in turn has a broken import\r\n        dir_a.join(\"aa.py\").write(\"from b import bb\")\r\n        dir_b.join(\"bb.py\").write(\"from os import a_typo\")\r\n    \r\n        # Do we get all the useful information in the traceback?\r\n        with pytest.raises(ImportError) as baz_exc:\r\n            utils.import_string(\"a.aa\")\r\n        traceback = \"\".join(str(line) for line in baz_exc.traceback)\r\n>       assert \"bb.py':1\" in traceback  # a bit different than typical python tb\r\nE       assert \"bb.py':1\" in \"  File local('/home/florian/tmp/werkzeugtest/werkzeug/tests/test_utils.py'):205 in test_import_string_provides_traceb...l('/tmp/pytest-of-florian/pytest-29/test_import_string_provides_tr0/b/bb.py'):1 in <module>\\n  from os import a_typo\\n\"\r\n```\r\n\r\nThis is because of 2ee90887b77212e2e8f427ed6db9feab85f06b49 (#7274, \"code: remove last usage of py.error\") - it removed the `str(...)`, but the format string uses `%r`, so now we get the repr of the `py.path.local` object instead of the repr of a string.\r\n\r\nI believe this should continue to use `\"%r\" % str(self.path)` so the output is the same in all cases.\r\n\r\ncc @bluetech @hroncok \n",
  "hints_text": "",
  "created_at": "2020-07-23T14:15:26Z",
  "version": "6.0",
  "FAIL_TO_PASS": "[\"testing/code/test_code.py::TestTracebackEntry::test_tb_entry_str\"]",
  "PASS_TO_PASS": "[\"testing/code/test_code.py::test_ne\", \"testing/code/test_code.py::test_code_gives_back_name_for_not_existing_file\", \"testing/code/test_code.py::test_code_with_class\", \"testing/code/test_code.py::test_code_fullsource\", \"testing/code/test_code.py::test_code_source\", \"testing/code/test_code.py::test_frame_getsourcelineno_myself\", \"testing/code/test_code.py::test_getstatement_empty_fullsource\", \"testing/code/test_code.py::test_code_from_func\", \"testing/code/test_code.py::test_unicode_handling\", \"testing/code/test_code.py::test_code_getargs\", \"testing/code/test_code.py::test_frame_getargs\", \"testing/code/test_code.py::TestExceptionInfo::test_bad_getsource\", \"testing/code/test_code.py::TestExceptionInfo::test_from_current_with_missing\", \"testing/code/test_code.py::TestTracebackEntry::test_getsource\", \"testing/code/test_code.py::TestReprFuncArgs::test_not_raise_exception_with_mixed_encoding\", \"testing/code/test_code.py::test_ExceptionChainRepr\"]",
  "environment_setup_commit": "634cde9506eb1f48dec3ec77974ee8dc952207c6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.938684",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}