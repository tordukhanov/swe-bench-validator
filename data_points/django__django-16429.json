{
  "repo": "django/django",
  "instance_id": "django__django-16429",
  "base_commit": "6c86495bcee22eac19d7fb040b2988b830707cbd",
  "patch": "diff --git a/django/utils/timesince.py b/django/utils/timesince.py\n--- a/django/utils/timesince.py\n+++ b/django/utils/timesince.py\n@@ -97,6 +97,7 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):\n             d.hour,\n             d.minute,\n             d.second,\n+            tzinfo=d.tzinfo,\n         )\n     else:\n         pivot = d\n",
  "test_patch": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,7 +1,7 @@\n import datetime\n \n from django.test import TestCase\n-from django.test.utils import requires_tz_support\n+from django.test.utils import override_settings, requires_tz_support\n from django.utils import timezone, translation\n from django.utils.timesince import timesince, timeuntil\n from django.utils.translation import npgettext_lazy\n@@ -171,7 +171,7 @@ def utcoffset(self, dt):\n         self.assertEqual(timeuntil(past), \"0\\xa0minutes\")\n \n     def test_thousand_years_ago(self):\n-        t = datetime.datetime(1007, 8, 14, 13, 46, 0)\n+        t = self.t.replace(year=self.t.year - 1000)\n         self.assertEqual(timesince(t, self.t), \"1000\\xa0years\")\n         self.assertEqual(timeuntil(self.t, t), \"1000\\xa0years\")\n \n@@ -240,3 +240,11 @@ def test_depth_invalid(self):\n         msg = \"depth must be greater than 0.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             timesince(self.t, self.t, depth=0)\n+\n+\n+@requires_tz_support\n+@override_settings(USE_TZ=True)\n+class TZAwareTimesinceTests(TimesinceTests):\n+    def setUp(self):\n+        super().setUp()\n+        self.t = timezone.make_aware(self.t, timezone.get_default_timezone())\n",
  "problem_statement": "timesince() raises TypeError with USE_TZ=True and >1 month interval.\nDescription\n\t \n\t\t(last modified by Sage Abdullah)\n\t \nAs of 8d67e16493c903adc9d049141028bc0fff43f8c8, calling timesince() with a datetime object that's one month (or more) in the past and the USE_TZ setting is set to True results in the following crash:\nTypeError: can't subtract offset-naive and offset-aware datetimes\nTest:\n...\nclass TimesinceTests(TestCase):\n\t...\n\t@requires_tz_support\n\t@override_settings(USE_TZ=True)\n\tdef test_long_interval_with_tz(self):\n\t\tnow = timezone.now()\n\t\td = now - datetime.timedelta(days=31)\n\t\tself.assertEqual(timesince(d), \"1\\xa0month\")\nI believe this is because the pivot instantiated here: â€‹https://github.com/django/django/blob/d2310f6473593d28c14b63a72253408b568e100a/django/utils/timesince.py#L93-L100 does not take into account the datetime object's tzinfo. Adding 0, d.tzinfo arguments to the datetime.datetime call seems to fix this.\nHappy to send a PR.\n",
  "hints_text": "Thanks for the report, however test_long_interval_with_tz works for me on the current main branch ðŸ¤”\nWhoops, sorry, I haven't properly tested the function as I currently don't have a local Django dev environment. I'm testing this on a shell with my Django project, I think this should be reproducible: >>> from django.utils import timezone >>> from django.utils.timesince import timesince >>> import datetime >>> timesince(timezone.now() - datetime.timedelta(days=31)) Traceback (most recent call last): File \"<console>\", line 1, in <module> File \"/Users/sage/Code/github/wagtail/wagtail/venv/lib/python3.10/site-packages/django/utils/timesince.py\", line 103, in timesince remaining_time = (now - pivot).total_seconds() TypeError: can't subtract offset-naive and offset-aware datetimes\nOK, with self.settings(USE_TZ=True) was missing: @requires_tz_support def test_long_interval_with_tz(self): with self.settings(USE_TZ=True): now = timezone.now() d = now - datetime.timedelta(days=40) self.assertEqual(timesince(d), \"1\\xa0month\") Regression in 8d67e16493c903adc9d049141028bc0fff43f8c8.\nOops, ninja'd! I was adding override_settings to the ticket description.\nâ€‹PR",
  "created_at": "2023-01-05T11:41:37Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_depth (utils_tests.test_timesince.TZAwareTimesinceTests)\", \"test_depth_invalid (utils_tests.test_timesince.TZAwareTimesinceTests)\", \"Test other units.\", \"test_thousand_years_ago (utils_tests.test_timesince.TZAwareTimesinceTests)\"]",
  "PASS_TO_PASS": "[\"Timesince should work with both date objects (#9672)\", \"Both timesince and timeuntil should work on date objects (#17937).\", \"When using two different timezones.\", \"If the two differing units aren't adjacent, only the first unit is\", \"When the second date occurs before the first, we should always\", \"equal datetimes.\", \"Microseconds and seconds are ignored.\", \"test_leap_year (utils_tests.test_timesince.TZAwareTimesinceTests)\", \"test_leap_year_new_years_eve (utils_tests.test_timesince.TZAwareTimesinceTests)\", \"test_months_edge (utils_tests.test_timesince.TZAwareTimesinceTests)\", \"Test multiple units.\", \"test_naive_datetime_with_tzinfo_attribute (utils_tests.test_timesince.TZAwareTimesinceTests)\", \"test_second_before_equal_first_humanize_time_strings (utils_tests.test_timesince.TZAwareTimesinceTests)\", \"test_depth (utils_tests.test_timesince.TimesinceTests)\", \"test_depth_invalid (utils_tests.test_timesince.TimesinceTests)\", \"test_leap_year (utils_tests.test_timesince.TimesinceTests)\", \"test_leap_year_new_years_eve (utils_tests.test_timesince.TimesinceTests)\", \"test_months_edge (utils_tests.test_timesince.TimesinceTests)\", \"test_naive_datetime_with_tzinfo_attribute (utils_tests.test_timesince.TimesinceTests)\", \"test_second_before_equal_first_humanize_time_strings (utils_tests.test_timesince.TimesinceTests)\", \"test_thousand_years_ago (utils_tests.test_timesince.TimesinceTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.758096",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}