{
  "repo": "django/django",
  "instance_id": "django__django-15199",
  "base_commit": "bf7afe9c4e21f5fe5090c47b2b6ffc5a03a85815",
  "patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -1,6 +1,7 @@\n import copy\n import itertools\n import operator\n+import warnings\n from functools import total_ordering, wraps\n \n \n@@ -11,8 +12,6 @@ class cached_property:\n \n     A cached property can be made out of an existing method:\n     (e.g. ``url = cached_property(get_absolute_url)``).\n-    The optional ``name`` argument is obsolete as of Python 3.6 and will be\n-    deprecated in Django 4.0 (#30127).\n     \"\"\"\n     name = None\n \n@@ -24,6 +23,15 @@ def func(instance):\n         )\n \n     def __init__(self, func, name=None):\n+        from django.utils.deprecation import RemovedInDjango50Warning\n+\n+        if name is not None:\n+            warnings.warn(\n+                \"The name argument is deprecated as it's unnecessary as of \"\n+                \"Python 3.6.\",\n+                RemovedInDjango50Warning,\n+                stacklevel=2,\n+            )\n         self.real_func = func\n         self.__doc__ = getattr(func, '__doc__')\n \n",
  "test_patch": "diff --git a/tests/utils_tests/test_functional.py b/tests/utils_tests/test_functional.py\n--- a/tests/utils_tests/test_functional.py\n+++ b/tests/utils_tests/test_functional.py\n@@ -1,6 +1,8 @@\n from unittest import mock\n \n from django.test import SimpleTestCase\n+from django.test.utils import ignore_warnings\n+from django.utils.deprecation import RemovedInDjango50Warning\n from django.utils.functional import cached_property, classproperty, lazy\n \n \n@@ -97,12 +99,36 @@ def other_value(self):\n                 \"\"\"Here is the docstring...\"\"\"\n                 return 1, object()\n \n-            other = cached_property(other_value, name='other')\n+            other = cached_property(other_value)\n \n         attrs = ['value', 'other', '__foo__']\n         for attr in attrs:\n             self.assertCachedPropertyWorks(attr, Class)\n \n+    @ignore_warnings(category=RemovedInDjango50Warning)\n+    def test_cached_property_name(self):\n+        class Class:\n+            def other_value(self):\n+                \"\"\"Here is the docstring...\"\"\"\n+                return 1, object()\n+\n+            other = cached_property(other_value, name='other')\n+            other2 = cached_property(other_value, name='different_name')\n+\n+        self.assertCachedPropertyWorks('other', Class)\n+        # An explicit name is ignored.\n+        obj = Class()\n+        obj.other2\n+        self.assertFalse(hasattr(obj, 'different_name'))\n+\n+    def test_cached_property_name_deprecation_warning(self):\n+        def value(self):\n+            return 1\n+\n+        msg = \"The name argument is deprecated as it's unnecessary as of Python 3.6.\"\n+        with self.assertWarnsMessage(RemovedInDjango50Warning, msg):\n+            cached_property(value, name='other_name')\n+\n     def test_cached_property_auto_name(self):\n         \"\"\"\n         cached_property caches its value and behaves like a property\n@@ -119,17 +145,11 @@ def other_value(self):\n                 return 1, object()\n \n             other = cached_property(other_value)\n-            other2 = cached_property(other_value, name='different_name')\n \n         attrs = ['_Class__value', 'other']\n         for attr in attrs:\n             self.assertCachedPropertyWorks(attr, Class)\n \n-        # An explicit name is ignored.\n-        obj = Class()\n-        obj.other2\n-        self.assertFalse(hasattr(obj, 'different_name'))\n-\n     def test_cached_property_reuse_different_names(self):\n         \"\"\"Disallow this case because the decorated function wouldn't be cached.\"\"\"\n         with self.assertRaises(RuntimeError) as ctx:\n",
  "problem_statement": "Deprecate cached_property's name argument\nDescription\n\t\nDjango 2.2 is the last version to support Python 3.5 where cached_property's name argument is required. Following the release of Django 4.0, most apps will drop support for Django 2.2 (and hence Python 3.5), so Django 4.0 can deprecate the name argument without giving warnings that aren't actionable as long as apps want to keep support for Python 3.5.\n",
  "hints_text": "it may be worth deprecating it entirely for a py3 backport https://code.djangoproject.com/ticket/30949#ticket\n​PR\nYou need to ​deprecate it (RemovedInDjango50Warning) rather than simply remove it.",
  "created_at": "2021-12-14T17:00:46Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_cached_property_name_deprecation_warning (utils_tests.test_functional.FunctionalTests)\"]",
  "PASS_TO_PASS": "[\"cached_property caches its value and behaves like a property.\", \"cached_property caches its value and behaves like a property\", \"test_cached_property_name (utils_tests.test_functional.FunctionalTests)\", \"Disallow this case because the decorated function wouldn't be cached.\", \"Reusing a cached_property on different classes under the same name is\", \"test_cached_property_set_name_not_called (utils_tests.test_functional.FunctionalTests)\", \"test_classproperty_getter (utils_tests.test_functional.FunctionalTests)\", \"test_classproperty_override_getter (utils_tests.test_functional.FunctionalTests)\", \"test_lazy (utils_tests.test_functional.FunctionalTests)\", \"test_lazy_add (utils_tests.test_functional.FunctionalTests)\", \"lazy also finds base class methods in the proxy object\", \"lazy finds the correct (overridden) method implementation\", \"test_lazy_bytes_and_str_result_classes (utils_tests.test_functional.FunctionalTests)\", \"test_lazy_class_preparation_caching (utils_tests.test_functional.FunctionalTests)\", \"== and != work correctly for Promises.\", \"test_lazy_object_to_string (utils_tests.test_functional.FunctionalTests)\", \"test_lazy_repr_bytes (utils_tests.test_functional.FunctionalTests)\", \"test_lazy_repr_int (utils_tests.test_functional.FunctionalTests)\", \"test_lazy_repr_text (utils_tests.test_functional.FunctionalTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.720934",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}