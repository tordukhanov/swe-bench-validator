{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13221",
  "base_commit": "d19a5dcb0444146f0e4c8c444f410b290dcd9b41",
  "patch": "diff --git a/sklearn/svm/base.py b/sklearn/svm/base.py\n--- a/sklearn/svm/base.py\n+++ b/sklearn/svm/base.py\n@@ -169,19 +169,19 @@ def fit(self, X, y, sample_weight=None):\n \n         if self.gamma in ('scale', 'auto_deprecated'):\n             if sparse:\n-                # std = sqrt(E[X^2] - E[X]^2)\n-                X_std = np.sqrt((X.multiply(X)).mean() - (X.mean())**2)\n+                # var = E[X^2] - E[X]^2\n+                X_var = (X.multiply(X)).mean() - (X.mean()) ** 2\n             else:\n-                X_std = X.std()\n+                X_var = X.var()\n             if self.gamma == 'scale':\n-                if X_std != 0:\n-                    self._gamma = 1.0 / (X.shape[1] * X_std)\n+                if X_var != 0:\n+                    self._gamma = 1.0 / (X.shape[1] * X_var)\n                 else:\n                     self._gamma = 1.0\n             else:\n                 kernel_uses_gamma = (not callable(self.kernel) and self.kernel\n                                      not in ('linear', 'precomputed'))\n-                if kernel_uses_gamma and not np.isclose(X_std, 1.0):\n+                if kernel_uses_gamma and not np.isclose(X_var, 1.0):\n                     # NOTE: when deprecation ends we need to remove explicitly\n                     # setting `gamma` in examples (also in tests). See\n                     # https://github.com/scikit-learn/scikit-learn/pull/10331\ndiff --git a/sklearn/svm/classes.py b/sklearn/svm/classes.py\n--- a/sklearn/svm/classes.py\n+++ b/sklearn/svm/classes.py\n@@ -463,7 +463,7 @@ class SVC(BaseSVC):\n         Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n \n         Current default is 'auto' which uses 1 / n_features,\n-        if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.std())\n+        if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.var())\n         as value of gamma. The current default of gamma, 'auto', will change\n         to 'scale' in version 0.22. 'auto_deprecated', a deprecated version of\n         'auto' is used as a default indicating that no explicit value of gamma\n@@ -651,7 +651,7 @@ class NuSVC(BaseSVC):\n         Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n \n         Current default is 'auto' which uses 1 / n_features,\n-        if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.std())\n+        if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.var())\n         as value of gamma. The current default of gamma, 'auto', will change\n         to 'scale' in version 0.22. 'auto_deprecated', a deprecated version of\n         'auto' is used as a default indicating that no explicit value of gamma\n@@ -812,7 +812,7 @@ class SVR(BaseLibSVM, RegressorMixin):\n         Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n \n         Current default is 'auto' which uses 1 / n_features,\n-        if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.std())\n+        if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.var())\n         as value of gamma. The current default of gamma, 'auto', will change\n         to 'scale' in version 0.22. 'auto_deprecated', a deprecated version of\n         'auto' is used as a default indicating that no explicit value of gamma\n@@ -948,7 +948,7 @@ class NuSVR(BaseLibSVM, RegressorMixin):\n         Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n \n         Current default is 'auto' which uses 1 / n_features,\n-        if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.std())\n+        if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.var())\n         as value of gamma. The current default of gamma, 'auto', will change\n         to 'scale' in version 0.22. 'auto_deprecated', a deprecated version of\n         'auto' is used as a default indicating that no explicit value of gamma\n@@ -1065,7 +1065,7 @@ class OneClassSVM(BaseLibSVM, OutlierMixin):\n         Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n \n         Current default is 'auto' which uses 1 / n_features,\n-        if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.std())\n+        if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.var())\n         as value of gamma. The current default of gamma, 'auto', will change\n         to 'scale' in version 0.22. 'auto_deprecated', a deprecated version of\n         'auto' is used as a default indicating that no explicit value of gamma\n",
  "test_patch": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1710,19 +1710,23 @@ def test_deprecated_grid_search_iid():\n     depr_message = (\"The default of the `iid` parameter will change from True \"\n                     \"to False in version 0.22\")\n     X, y = make_blobs(n_samples=54, random_state=0, centers=2)\n-    grid = GridSearchCV(SVC(gamma='scale'), param_grid={'C': [1]}, cv=3)\n+    grid = GridSearchCV(SVC(gamma='scale', random_state=0),\n+                        param_grid={'C': [10]}, cv=3)\n     # no warning with equally sized test sets\n     assert_no_warnings(grid.fit, X, y)\n \n-    grid = GridSearchCV(SVC(gamma='scale'), param_grid={'C': [1]}, cv=5)\n+    grid = GridSearchCV(SVC(gamma='scale', random_state=0),\n+                        param_grid={'C': [10]}, cv=5)\n     # warning because 54 % 5 != 0\n     assert_warns_message(DeprecationWarning, depr_message, grid.fit, X, y)\n \n-    grid = GridSearchCV(SVC(gamma='scale'), param_grid={'C': [1]}, cv=2)\n+    grid = GridSearchCV(SVC(gamma='scale', random_state=0),\n+                        param_grid={'C': [10]}, cv=2)\n     # warning because stratification into two classes and 27 % 2 != 0\n     assert_warns_message(DeprecationWarning, depr_message, grid.fit, X, y)\n \n-    grid = GridSearchCV(SVC(gamma='scale'), param_grid={'C': [1]}, cv=KFold(2))\n+    grid = GridSearchCV(SVC(gamma='scale', random_state=0),\n+                        param_grid={'C': [10]}, cv=KFold(2))\n     # no warning because no stratification and 54 % 2 == 0\n     assert_no_warnings(grid.fit, X, y)\n \ndiff --git a/sklearn/svm/tests/test_sparse.py b/sklearn/svm/tests/test_sparse.py\n--- a/sklearn/svm/tests/test_sparse.py\n+++ b/sklearn/svm/tests/test_sparse.py\n@@ -87,9 +87,9 @@ def test_svc():\n     kernels = [\"linear\", \"poly\", \"rbf\", \"sigmoid\"]\n     for dataset in datasets:\n         for kernel in kernels:\n-            clf = svm.SVC(gamma='scale', kernel=kernel, probability=True,\n+            clf = svm.SVC(gamma=1, kernel=kernel, probability=True,\n                           random_state=0, decision_function_shape='ovo')\n-            sp_clf = svm.SVC(gamma='scale', kernel=kernel, probability=True,\n+            sp_clf = svm.SVC(gamma=1, kernel=kernel, probability=True,\n                              random_state=0, decision_function_shape='ovo')\n             check_svm_model_equal(clf, sp_clf, *dataset)\n \n@@ -293,8 +293,8 @@ def test_sparse_oneclasssvm(datasets_index, kernel):\n                 [X_blobs[:80], None, X_blobs[80:]],\n                 [iris.data, None, iris.data]]\n     dataset = datasets[datasets_index]\n-    clf = svm.OneClassSVM(gamma='scale', kernel=kernel)\n-    sp_clf = svm.OneClassSVM(gamma='scale', kernel=kernel)\n+    clf = svm.OneClassSVM(gamma=1, kernel=kernel)\n+    sp_clf = svm.OneClassSVM(gamma=1, kernel=kernel)\n     check_svm_model_equal(clf, sp_clf, *dataset)\n \n \ndiff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -243,11 +243,11 @@ def test_oneclass():\n     clf.fit(X)\n     pred = clf.predict(T)\n \n-    assert_array_equal(pred, [-1, -1, -1])\n+    assert_array_equal(pred, [1, -1, -1])\n     assert_equal(pred.dtype, np.dtype('intp'))\n-    assert_array_almost_equal(clf.intercept_, [-1.117], decimal=3)\n+    assert_array_almost_equal(clf.intercept_, [-1.218], decimal=3)\n     assert_array_almost_equal(clf.dual_coef_,\n-                              [[0.681, 0.139, 0.68, 0.14, 0.68, 0.68]],\n+                              [[0.750, 0.750, 0.750, 0.750]],\n                               decimal=3)\n     assert_raises(AttributeError, lambda: clf.coef_)\n \n@@ -1003,9 +1003,9 @@ def test_gamma_scale():\n \n     clf = svm.SVC(gamma='scale')\n     assert_no_warnings(clf.fit, X, y)\n-    assert_equal(clf._gamma, 2.)\n+    assert_almost_equal(clf._gamma, 4)\n \n-    # X_std ~= 1 shouldn't raise warning, for when\n+    # X_var ~= 1 shouldn't raise warning, for when\n     # gamma is not explicitly set.\n     X, y = [[1, 2], [3, 2 * np.sqrt(6) / 3 + 2]], [0, 1]\n     assert_no_warnings(clf.fit, X, y)\n",
  "problem_statement": "gamma='scale' in SVC\nI believe that setting `gamma='scale'` in `SVC` is not meeting its intended purpose of being invariant to the scale of `X`. Currently, `gamma` is set to `1 / (n_features * X.std())`. However, I believe it should be `1 / (n_features * X.var())`. \r\n\r\nRationale: if you scale `X` by 10 you need to scale `gamma` by 1/100, not 1/10, to achieve the same results. See the definition of the RBF kernel [here](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.rbf_kernel.html): the \"units\" of `gamma` are 1/x^2, not 1/x. \r\n\r\nI also tested this empirically: scaling `X` by 10 and scaling `gamma` by 1/100 gives the same result as the original, whereas scaling `X` by 10 and scaling `gamma` by 1/10 gives a different result. Here is some code:\r\n\r\n```python\r\nimport numpy as np\r\nfrom sklearn.svm import SVC\r\n\r\nX = np.random.rand(100,10)\r\ny = np.random.choice(2,size=100)\r\n\r\nsvm = SVC(gamma=1)\r\nsvm.fit(X,y)\r\nprint(svm.decision_function(X[:5]))\r\n\r\n# scale X by 10, gamma by 1/100\r\nsvm = SVC(gamma=0.01)\r\nsvm.fit(10*X,y)\r\nprint(svm.decision_function(10*X[:5])) # prints same result\r\n\r\n# scale X by 10, gamma by 1/10\r\nsvm = SVC(gamma=0.1)\r\nsvm.fit(10*X,y)\r\nprint(svm.decision_function(10*X[:5])) # prints different result\r\n```\r\n\r\nNote that `gamma='scale'` will become the default setting for `gamma` in version 0.22.\r\n\r\nRelated: #8361, #10331 \n",
  "hints_text": "@amueller proposed std, perhaps in error. Do we need to add another option and make scale disappear?\nYes, my bad (I think). \nI think we can make this a bugfix as this was clearly an error.",
  "created_at": "2019-02-22T11:41:40Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/svm/tests/test_svm.py::test_oneclass\", \"sklearn/svm/tests/test_svm.py::test_gamma_scale\"]",
  "PASS_TO_PASS": "[\"sklearn/model_selection/tests/test_search.py::test_validate_parameter_grid_input[0-TypeError-Parameter\", \"sklearn/model_selection/tests/test_search.py::test_validate_parameter_grid_input[input1-TypeError-Parameter\", \"sklearn/model_selection/tests/test_search.py::test_validate_parameter_grid_input[input2-TypeError-Parameter\", \"sklearn/model_selection/tests/test_search.py::test_parameter_grid\", \"sklearn/model_selection/tests/test_search.py::test_grid_search\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_with_fit_params\", \"sklearn/model_selection/tests/test_search.py::test_random_search_with_fit_params\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_no_score\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_score_method\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_groups\", \"sklearn/model_selection/tests/test_search.py::test_classes__property\", \"sklearn/model_selection/tests/test_search.py::test_trivial_cv_results_attr\", \"sklearn/model_selection/tests/test_search.py::test_no_refit\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_error\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_one_grid_point\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_when_param_grid_includes_range\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_bad_param_grid\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_sparse\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_sparse_scoring\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_precomputed_kernel\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_precomputed_kernel_error_nonsquare\", \"sklearn/model_selection/tests/test_search.py::test_refit\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_invalid_type\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_out_bound\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_multi_metric\", \"sklearn/model_selection/tests/test_search.py::test_gridsearch_nd\", \"sklearn/model_selection/tests/test_search.py::test_X_as_list\", \"sklearn/model_selection/tests/test_search.py::test_y_as_list\", \"sklearn/model_selection/tests/test_search.py::test_pandas_input\", \"sklearn/model_selection/tests/test_search.py::test_unsupervised_grid_search\", \"sklearn/model_selection/tests/test_search.py::test_gridsearch_no_predict\", \"sklearn/model_selection/tests/test_search.py::test_param_sampler\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_cv_results\", \"sklearn/model_selection/tests/test_search.py::test_random_search_cv_results\", \"sklearn/model_selection/tests/test_search.py::test_search_iid_param\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_cv_results_multimetric\", \"sklearn/model_selection/tests/test_search.py::test_random_search_cv_results_multimetric\", \"sklearn/model_selection/tests/test_search.py::test_search_cv_results_rank_tie_breaking\", \"sklearn/model_selection/tests/test_search.py::test_search_cv_results_none_param\", \"sklearn/model_selection/tests/test_search.py::test_search_cv_timing\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_correct_score_results\", \"sklearn/model_selection/tests/test_search.py::test_fit_grid_point\", \"sklearn/model_selection/tests/test_search.py::test_pickle\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_with_multioutput_data\", \"sklearn/model_selection/tests/test_search.py::test_predict_proba_disabled\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_allows_nans\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_failing_classifier\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_failing_classifier_raise\", \"sklearn/model_selection/tests/test_search.py::test_parameters_sampler_replacement\", \"sklearn/model_selection/tests/test_search.py::test_stochastic_gradient_loss_param\", \"sklearn/model_selection/tests/test_search.py::test_search_train_scores_set_to_false\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_cv_splits_consistency\", \"sklearn/model_selection/tests/test_search.py::test_transform_inverse_transform_round_trip\", \"sklearn/model_selection/tests/test_search.py::test_custom_run_search\", \"sklearn/model_selection/tests/test_search.py::test__custom_fit_no_run_search\", \"sklearn/model_selection/tests/test_search.py::test_deprecated_grid_search_iid\", \"sklearn/model_selection/tests/test_search.py::test_empty_cv_iterator_error\", \"sklearn/model_selection/tests/test_search.py::test_random_search_bad_cv\", \"sklearn/svm/tests/test_sparse.py::test_svc\", \"sklearn/svm/tests/test_sparse.py::test_unsorted_indices\", \"sklearn/svm/tests/test_sparse.py::test_svc_with_custom_kernel\", \"sklearn/svm/tests/test_sparse.py::test_svc_iris\", \"sklearn/svm/tests/test_sparse.py::test_sparse_decision_function\", \"sklearn/svm/tests/test_sparse.py::test_error\", \"sklearn/svm/tests/test_sparse.py::test_linearsvc\", \"sklearn/svm/tests/test_sparse.py::test_linearsvc_iris\", \"sklearn/svm/tests/test_sparse.py::test_weight\", \"sklearn/svm/tests/test_sparse.py::test_sample_weights\", \"sklearn/svm/tests/test_sparse.py::test_sparse_liblinear_intercept_handling\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[linear-0]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[linear-1]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[linear-2]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[linear-3]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[poly-0]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[poly-1]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[poly-2]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[poly-3]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[rbf-0]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[rbf-1]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[rbf-2]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[rbf-3]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[sigmoid-0]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[sigmoid-1]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[sigmoid-2]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_oneclasssvm[sigmoid-3]\", \"sklearn/svm/tests/test_sparse.py::test_sparse_realdata\", \"sklearn/svm/tests/test_sparse.py::test_sparse_svc_clone_with_callable_kernel\", \"sklearn/svm/tests/test_sparse.py::test_timeout\", \"sklearn/svm/tests/test_sparse.py::test_consistent_proba\", \"sklearn/svm/tests/test_svm.py::test_libsvm_parameters\", \"sklearn/svm/tests/test_svm.py::test_libsvm_iris\", \"sklearn/svm/tests/test_svm.py::test_precomputed\", \"sklearn/svm/tests/test_svm.py::test_svr\", \"sklearn/svm/tests/test_svm.py::test_linearsvr\", \"sklearn/svm/tests/test_svm.py::test_linearsvr_fit_sampleweight\", \"sklearn/svm/tests/test_svm.py::test_svr_errors\", \"sklearn/svm/tests/test_svm.py::test_oneclass_decision_function\", \"sklearn/svm/tests/test_svm.py::test_oneclass_score_samples\", \"sklearn/svm/tests/test_svm.py::test_tweak_params\", \"sklearn/svm/tests/test_svm.py::test_probability\", \"sklearn/svm/tests/test_svm.py::test_decision_function\", \"sklearn/svm/tests/test_svm.py::test_decision_function_shape\", \"sklearn/svm/tests/test_svm.py::test_svr_predict\", \"sklearn/svm/tests/test_svm.py::test_weight\", \"sklearn/svm/tests/test_svm.py::test_sample_weights\", \"sklearn/svm/tests/test_svm.py::test_auto_weight\", \"sklearn/svm/tests/test_svm.py::test_bad_input\", \"sklearn/svm/tests/test_svm.py::test_unicode_kernel\", \"sklearn/svm/tests/test_svm.py::test_sparse_precomputed\", \"sklearn/svm/tests/test_svm.py::test_linearsvc_parameters\", \"sklearn/svm/tests/test_svm.py::test_linearsvx_loss_penalty_deprecations\", \"sklearn/svm/tests/test_svm.py::test_linear_svx_uppercase_loss_penality_raises_error\", \"sklearn/svm/tests/test_svm.py::test_linearsvc\", \"sklearn/svm/tests/test_svm.py::test_linearsvc_crammer_singer\", \"sklearn/svm/tests/test_svm.py::test_linearsvc_fit_sampleweight\", \"sklearn/svm/tests/test_svm.py::test_crammer_singer_binary\", \"sklearn/svm/tests/test_svm.py::test_linearsvc_iris\", \"sklearn/svm/tests/test_svm.py::test_dense_liblinear_intercept_handling\", \"sklearn/svm/tests/test_svm.py::test_liblinear_set_coef\", \"sklearn/svm/tests/test_svm.py::test_immutable_coef_property\", \"sklearn/svm/tests/test_svm.py::test_linearsvc_verbose\", \"sklearn/svm/tests/test_svm.py::test_svc_clone_with_callable_kernel\", \"sklearn/svm/tests/test_svm.py::test_svc_bad_kernel\", \"sklearn/svm/tests/test_svm.py::test_timeout\", \"sklearn/svm/tests/test_svm.py::test_unfitted\", \"sklearn/svm/tests/test_svm.py::test_consistent_proba\", \"sklearn/svm/tests/test_svm.py::test_linear_svm_convergence_warnings\", \"sklearn/svm/tests/test_svm.py::test_svr_coef_sign\", \"sklearn/svm/tests/test_svm.py::test_linear_svc_intercept_scaling\", \"sklearn/svm/tests/test_svm.py::test_lsvc_intercept_scaling_zero\", \"sklearn/svm/tests/test_svm.py::test_hasattr_predict_proba\", \"sklearn/svm/tests/test_svm.py::test_decision_function_shape_two_class\", \"sklearn/svm/tests/test_svm.py::test_ovr_decision_function\", \"sklearn/svm/tests/test_svm.py::test_gamma_auto\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.990871",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}