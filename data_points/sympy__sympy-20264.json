{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-20264",
  "base_commit": "d5571e8b55ffbb62378ab3f2edda4847d0ef4416",
  "patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -644,6 +644,13 @@ def _print_Pow(self, expr):\n             # special case for 1^(-x), issue 9216\n             if expr.base == 1:\n                 return r\"%s^{%s}\" % (expr.base, expr.exp)\n+            # special case for (1/x)^(-y) and (-1/-x)^(-y), issue 20252\n+            if expr.base.is_Rational and \\\n+                    expr.base.p*expr.base.q == abs(expr.base.q):\n+                if expr.exp == -1:\n+                    return r\"\\frac{1}{\\frac{%s}{%s}}\" % (expr.base.p, expr.base.q)\n+                else:\n+                    return r\"\\frac{1}{(\\frac{%s}{%s})^{%s}}\" % (expr.base.p, expr.base.q, abs(expr.exp))\n             # things like 1/x\n             return self._print_Mul(expr)\n         else:\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -6,7 +6,7 @@\n     Interval, InverseCosineTransform, InverseFourierTransform, Derivative,\n     InverseLaplaceTransform, InverseMellinTransform, InverseSineTransform,\n     Lambda, LaplaceTransform, Limit, Matrix, Max, MellinTransform, Min, Mul,\n-    Order, Piecewise, Poly, ring, field, ZZ, Pow, Product, Range, Rational,\n+    Order, Piecewise, Poly, ring, field, ZZ, Pow, Product, Range, Rational, Integer,\n     RisingFactorial, rootof, RootSum, S, Shi, Si, SineTransform, Subs,\n     Sum, Symbol, ImageSet, Tuple, Ynm, Znm, arg, asin, acsc, asinh, Mod,\n     assoc_laguerre, assoc_legendre, beta, binomial, catalan, ceiling,\n@@ -186,6 +186,10 @@ def test_latex_basic():\n         r\"z_i \\vee \\left(x_i \\wedge y_i\\right)\"\n     assert latex(Implies(x, y), symbol_names={x: \"x_i\", y: \"y_i\"}) == \\\n         r\"x_i \\Rightarrow y_i\"\n+    assert latex(Pow(Rational(1, 3), -1, evaluate=False)) == r\"\\frac{1}{\\frac{1}{3}}\"\n+    assert latex(Pow(Rational(1, 3), -2, evaluate=False)) == r\"\\frac{1}{(\\frac{1}{3})^{2}}\"\n+    assert latex(Pow(Integer(1)/100, -1, evaluate=False)) == r\"\\frac{1}{\\frac{1}{100}}\"\n+\n \n     p = Symbol('p', positive=True)\n     assert latex(exp(-p)*log(p)) == r\"e^{- p} \\log{\\left(p \\right)}\"\n",
  "problem_statement": "RecursionError occured while convert sympy expression to latex when expression like Pow(1/n,-1)\nHello,\r\nThanks for awesome library  :)\r\nI find issue but I can't figure out why the following phenomena occur, so I write an issue.\r\n\r\nI use `sympy 1.62` and i tried to latex function to change sympy expression to latex.\r\nBut RecursionError occured while change  Pow(Rational(1,n), evaluate=False) result to latex.\r\nIt error occured only when (numerator = 1 and denominator=Positive integer bigger than 1) or (numerator = -1 and denominator=Negative integer lower than -1) .\r\nBelow is code of i runned:\r\n\r\n```python\r\nIn [1]: from sympy import *\r\nIn [2]: latex(Pow(Rational(1,2),-1, evaluate=False))\r\n---------------------------------------------------------------------------\r\nRecursionError                            Traceback (most recent call last)\r\n<ipython-input-31-3a386932456f> in <module>\r\n----> 1 latex(Pow(Rational(1,2),-1, evaluate=False))\r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/latex.py in latex(expr, full_prec, min, max, fold_frac_powers, fold_func_brackets, fold_short_frac, inv_trig_style, itex, ln_notation, long_frac_ratio, mat_delim, mat_str, mode, mul_symbol, order, symbol_names, root_notation, mat_symbol_style, imaginary_unit, gothic_re_im, decimal_separator, perm_cyclic, parenthesize_super)\r\n   2803     }\r\n   2804 \r\n-> 2805     return LatexPrinter(settings).doprint(expr)\r\n   2806 \r\n   2807 \r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/latex.py in doprint(self, expr)\r\n    232 \r\n    233     def doprint(self, expr):\r\n--> 234         tex = Printer.doprint(self, expr)\r\n    235 \r\n    236         if self._settings['mode'] == 'plain':\r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/printer.py in doprint(self, expr)\r\n    249     def doprint(self, expr):\r\n    250         \"\"\"Returns printer's representation for expr (as a string)\"\"\"\r\n--> 251         return self._str(self._print(expr))\r\n    252 \r\n    253     def _print(self, expr, **kwargs):\r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/printer.py in _print(self, expr, **kwargs)\r\n    287                 printmethod = '_print_' + cls.__name__\r\n    288                 if hasattr(self, printmethod):\r\n--> 289                     return getattr(self, printmethod)(expr, **kwargs)\r\n    290             # Unknown object, fall back to the emptyPrinter. Checks what type of\r\n    291             # decimal separator to print.\r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/latex.py in _print_Pow(self, expr)\r\n    612                 return r\"%s^{%s}\" % (expr.base, expr.exp)\r\n    613             # things like 1/x\r\n--> 614             return self._print_Mul(expr)\r\n    615         else:\r\n    616             if expr.base.is_Function:\r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/latex.py in _print_Mul(self, expr)\r\n    531             # use the original expression here, since fraction() may have\r\n    532             # altered it when producing numer and denom\r\n--> 533             tex += convert(expr)\r\n    534 \r\n    535         else:\r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/latex.py in convert(expr)\r\n    496         def convert(expr):\r\n    497             if not expr.is_Mul:\r\n--> 498                 return str(self._print(expr))\r\n    499             else:\r\n    500                 _tex = last_term_tex = \"\"\r\n\r\n... last 4 frames repeated, from the frame below ...\r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/printer.py in _print(self, expr, **kwargs)\r\n    287                 printmethod = '_print_' + cls.__name__\r\n    288                 if hasattr(self, printmethod):\r\n--> 289                     return getattr(self, printmethod)(expr, **kwargs)\r\n    290             # Unknown object, fall back to the emptyPrinter. Checks what type of\r\n    291             # decimal separator to print.\r\n\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n\r\nIn [3]: latex(Pow(Rational(1,1),-1, evaluate=False))\r\nOut[3]: '1^{-1}'\r\n\r\nIn [4]: latex(Pow(Rational(1,2.5),-1, evaluate=False))\r\nOut[4]: '\\\\frac{1}{\\\\frac{2}{5}}'\r\n\r\nIn [5]: latex(Pow(Rational(1,-2),-1, evaluate=False))\r\nOut[5]: '\\\\frac{1}{- \\\\frac{1}{2}}'\r\n\r\nIn [6]: latex(Pow(Rational(1,0),-1, evaluate=False))\r\nOut[6]: '\\\\frac{1}{\\\\tilde{\\\\infty}}'\r\n\r\nIn [7]: latex(Pow(Rational(-1,5),-1, evaluate=False))\r\nOut[7]: '\\\\frac{1}{- \\\\frac{1}{5}}'\r\n\r\nIn [8]: latex(Pow(Rational(-1,-5),-1, evaluate=False))\r\n---------------------------------------------------------------------------\r\nRecursionError                            Traceback (most recent call last)\r\n<ipython-input-32-ea66262fffb9> in <module>\r\n----> 1 latex(Pow(Rational(-1,-5),-1, evaluate=False))\r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/latex.py in latex(expr, full_prec, min, max, fold_frac_powers, fold_func_brackets, fold_short_frac, inv_trig_style, itex, ln_notation, long_frac_ratio, mat_delim, mat_str, mode, mul_symbol, order, symbol_names, root_notation, mat_symbol_style, imaginary_unit, gothic_re_im, decimal_separator, perm_cyclic, parenthesize_super)\r\n   2803     }\r\n   2804 \r\n-> 2805     return LatexPrinter(settings).doprint(expr)\r\n   2806 \r\n   2807 \r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/latex.py in doprint(self, expr)\r\n    232 \r\n    233     def doprint(self, expr):\r\n--> 234         tex = Printer.doprint(self, expr)\r\n    235 \r\n    236         if self._settings['mode'] == 'plain':\r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/printer.py in doprint(self, expr)\r\n    249     def doprint(self, expr):\r\n    250         \"\"\"Returns printer's representation for expr (as a string)\"\"\"\r\n--> 251         return self._str(self._print(expr))\r\n    252 \r\n    253     def _print(self, expr, **kwargs):\r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/printer.py in _print(self, expr, **kwargs)\r\n    287                 printmethod = '_print_' + cls.__name__\r\n    288                 if hasattr(self, printmethod):\r\n--> 289                     return getattr(self, printmethod)(expr, **kwargs)\r\n    290             # Unknown object, fall back to the emptyPrinter. Checks what type of\r\n    291             # decimal separator to print.\r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/latex.py in _print_Pow(self, expr)\r\n    612                 return r\"%s^{%s}\" % (expr.base, expr.exp)\r\n    613             # things like 1/x\r\n--> 614             return self._print_Mul(expr)\r\n    615         else:\r\n    616             if expr.base.is_Function:\r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/latex.py in _print_Mul(self, expr)\r\n    531             # use the original expression here, since fraction() may have\r\n    532             # altered it when producing numer and denom\r\n--> 533             tex += convert(expr)\r\n    534 \r\n    535         else:\r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/latex.py in convert(expr)\r\n    496         def convert(expr):\r\n    497             if not expr.is_Mul:\r\n--> 498                 return str(self._print(expr))\r\n    499             else:\r\n    500                 _tex = last_term_tex = \"\"\r\n\r\n... last 4 frames repeated, from the frame below ...\r\n\r\n~/opt/anaconda3/lib/python3.7/site-packages/sympy/printing/printer.py in _print(self, expr, **kwargs)\r\n    287                 printmethod = '_print_' + cls.__name__\r\n    288                 if hasattr(self, printmethod):\r\n--> 289                     return getattr(self, printmethod)(expr, **kwargs)\r\n    290             # Unknown object, fall back to the emptyPrinter. Checks what type of\r\n    291             # decimal separator to print.\r\n\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n```\n",
  "hints_text": "Looks like a similar issue: #9216. See the PR that fixed that case: #15060. \r\n\r\nFor anyone looking to fix this, I suggest adding an `if` statement somewhere here:\r\n\r\nhttps://github.com/sympy/sympy/blob/c094f1bb9b9047eaa4cf98790c1df997f4f489f8/sympy/printing/latex.py#L642-L648\r\n\r\nHopefully it should be a more general check than what is currently there.\nI would like to work on this issue if it is open to work on.\n@Maelstrom6 \r\nThank you for suggesting the part that need to be modified.\r\nFirst, I solved the above issue by adding the code in sympy/sympy/printing/latex.py as below.\r\nHowever I don't know if this is the right way, so I think a fundamental solution is needed.\r\n\r\n**Changed Code**\r\n```python\r\n        elif expr.exp.is_Rational and expr.exp.is_negative and \\\r\n                expr.base.is_commutative:\r\n            # special case for 1^(-x), issue 9216\r\n            if expr.base == 1:\r\n                return r\"%s^{%s}\" % (expr.base, expr.exp)\r\n            \r\n            # to solve this issue\r\n            elif expr.base.is_Rational and expr.exp == -1:\r\n                return r\"\\frac {1} {{%s}}\" % (self._print(expr.base))\r\n\r\n            # things like 1/x\r\n            else:\r\n                return self._print_Mul(expr)\r\n```\r\n\r\n**After change Code**\r\n```python\r\nIn [1]: from sympy import *\r\nIn [2]: latex(Pow(Rational(1,2),-1, evaluate=False))\r\nOut[2]: '\\\\frac {1} {{\\\\frac{1}{2}}}'\r\n\r\nIn [3]: latex(Pow(Rational(1,1),-1, evaluate=False))\r\nOut[3]: '1^{-1}'\r\n\r\nIn [4]: latex(Pow(Rational(1,2.5),-1, evaluate=False))\r\nOut[4]: '\\\\frac{1}{\\\\frac{2}{5}}'\r\n\r\nIn [5]: latex(Pow(Rational(1,-2),-1, evaluate=False))\r\nOut[5]: '\\\\frac{1}{- \\\\frac{1}{2}}'\r\n\r\nIn [6]: latex(Pow(Rational(1,0),-1, evaluate=False))\r\nOut[6]: '\\\\frac{1}{\\\\tilde{\\\\infty}}'\r\n\r\nIn [7]: latex(Pow(Rational(-1,5),-1, evaluate=False))\r\nOut[7]: '\\\\frac{1}{- \\\\frac{1}{5}}'\r\n\r\nIn [8]: latex(Pow(Rational(-1,-5),-1, evaluate=False))\r\nOut[8]: '\\\\frac {1} {{\\\\frac{1}{5}}}'\r\n```\n> I would like to work on this issue if it is open to work on. \n\nI'm sure it's open for anyone. All contributions are welcome. \n\n> However I don't know if this is the right way, so I think a fundamental solution is needed.\n\nI agree. It might cause errors for other numbers as well and we shouldn't to single checks on each of them.\n\nAlso, in latex, your solution would look like it's evaluated when the user chose for it to be unevaluated. So it would rather be better to have `r\"{%s}^{%s}\"`.\n\nI'm not familiar with this part of sympy so it might be better to wait for a more experienced opinion. You could also submit a pull request in order to get better feedback than what I can provide. ",
  "created_at": "2020-10-15T11:19:58Z",
  "version": "1.8",
  "FAIL_TO_PASS": "[\"test_latex_basic\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_latex_builtins\", \"test_latex_SingularityFunction\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_latex_functions\", \"test_function_subclass_different_name\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_indexed\", \"test_latex_derivatives\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_SetExpr\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_FourierSeries\", \"test_latex_FormalPowerSeries\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_universalset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_intersection\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_productset\", \"test_set_operators_parenthesis\", \"test_latex_Complexes\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_latex_log\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_mathieu\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_matrix_with_functions\", \"test_latex_NDimArray\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_noncommutative\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_Poly_order\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_settings\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_PrettyPoly\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_categories\", \"test_Modules\", \"test_QuotientRing\", \"test_Tr\", \"test_Adjoint\", \"test_Transpose\", \"test_Hadamard\", \"test_ElementwiseApplyFunction\", \"test_ZeroMatrix\", \"test_OneMatrix\", \"test_Identity\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_fancyset_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_7180\", \"test_issue_8409\", \"test_issue_8470\", \"test_issue_15439\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_issue_13559\", \"test_issue_13651\", \"test_latex_UnevaluatedExpr\", \"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\", \"test_KroneckerProduct_printing\", \"test_Series_printing\", \"test_TransferFunction_printing\", \"test_Parallel_printing\", \"test_Feedback_printing\", \"test_Quaternion_latex_printing\", \"test_TensorProduct_printing\", \"test_WedgeProduct_printing\", \"test_issue_9216\", \"test_latex_printer_tensor\", \"test_multiline_latex\", \"test_issue_15353\", \"test_trace\", \"test_print_basic\", \"test_MatrixSymbol_bold\", \"test_AppliedPermutation\", \"test_PermutationMatrix\", \"test_imaginary_unit\", \"test_text_re_im\", \"test_latex_diffgeom\", \"test_unit_printing\", \"test_issue_17092\", \"test_latex_decimal_separator\", \"test_Str\", \"test_latex_escape\", \"test_emptyPrinter\"]",
  "environment_setup_commit": "3ac1464b8840d5f8b618a654f9fbf09c452fe969",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.137164",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}