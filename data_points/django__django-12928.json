{
  "repo": "django/django",
  "instance_id": "django__django-12928",
  "base_commit": "859cd7c6b43bf70e2852eda10f635c70feeb397f",
  "patch": "diff --git a/django/template/__init__.py b/django/template/__init__.py\n--- a/django/template/__init__.py\n+++ b/django/template/__init__.py\n@@ -64,5 +64,8 @@\n # Library management\n from .library import Library                                            # NOQA isort:skip\n \n+# Import the .autoreload module to trigger the registrations of signals.\n+from . import autoreload                                                # NOQA isort:skip\n+\n \n __all__ += ('Template', 'Context', 'RequestContext')\ndiff --git a/django/template/autoreload.py b/django/template/autoreload.py\nnew file mode 100644\n--- /dev/null\n+++ b/django/template/autoreload.py\n@@ -0,0 +1,50 @@\n+from django.dispatch import receiver\n+from django.template import engines\n+from django.template.backends.django import DjangoTemplates\n+from django.utils.autoreload import (\n+    autoreload_started, file_changed, is_django_path,\n+)\n+\n+\n+def get_template_directories():\n+    # Iterate through each template backend and find\n+    # any template_loader that has a 'get_dirs' method.\n+    # Collect the directories, filtering out Django templates.\n+    items = set()\n+    for backend in engines.all():\n+        if not isinstance(backend, DjangoTemplates):\n+            continue\n+\n+        items.update(backend.engine.dirs)\n+\n+        for loader in backend.engine.template_loaders:\n+            if not hasattr(loader, 'get_dirs'):\n+                continue\n+            items.update(\n+                directory\n+                for directory in loader.get_dirs()\n+                if not is_django_path(directory)\n+            )\n+    return items\n+\n+\n+def reset_loaders():\n+    for backend in engines.all():\n+        if not isinstance(backend, DjangoTemplates):\n+            continue\n+        for loader in backend.engine.template_loaders:\n+            loader.reset()\n+\n+\n+@receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\n+def watch_for_template_changes(sender, **kwargs):\n+    for directory in get_template_directories():\n+        sender.watch_dir(directory, '**/*')\n+\n+\n+@receiver(file_changed, dispatch_uid='template_loaders_file_changed')\n+def template_changed(sender, file_path, **kwargs):\n+    for template_dir in get_template_directories():\n+        if template_dir in file_path.parents:\n+            reset_loaders()\n+            return True\ndiff --git a/django/template/loaders/cached.py b/django/template/loaders/cached.py\n--- a/django/template/loaders/cached.py\n+++ b/django/template/loaders/cached.py\n@@ -18,6 +18,11 @@ def __init__(self, engine, loaders):\n         self.loaders = engine.get_template_loaders(loaders)\n         super().__init__(engine)\n \n+    def get_dirs(self):\n+        for loader in self.loaders:\n+            if hasattr(loader, \"get_dirs\"):\n+                yield from loader.get_dirs()\n+\n     def get_contents(self, origin):\n         return origin.loader.get_contents(origin)\n \ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -14,6 +14,7 @@\n from types import ModuleType\n from zipimport import zipimporter\n \n+import django\n from django.apps import apps\n from django.core.signals import request_finished\n from django.dispatch import Signal\n@@ -45,6 +46,16 @@\n     pywatchman = None\n \n \n+def is_django_module(module):\n+    \"\"\"Return True if the given module is nested under Django.\"\"\"\n+    return module.__name__.startswith('django.')\n+\n+\n+def is_django_path(path):\n+    \"\"\"Return True if the given file path is nested under Django.\"\"\"\n+    return Path(django.__file__).parent in Path(path).parents\n+\n+\n def check_errors(fn):\n     @functools.wraps(fn)\n     def wrapper(*args, **kwargs):\n@@ -431,8 +442,15 @@ def _get_clock(self, root):\n \n     def _subscribe(self, directory, name, expression):\n         root, rel_path = self._watch_root(directory)\n+        # Only receive notifications of files changing, filtering out other types\n+        # like special files: https://facebook.github.io/watchman/docs/type\n+        only_files_expression = [\n+            'allof',\n+            ['anyof', ['type', 'f'], ['type', 'l']],\n+            expression\n+        ]\n         query = {\n-            'expression': expression,\n+            'expression': only_files_expression,\n             'fields': ['name'],\n             'since': self._get_clock(root),\n             'dedup_results': True,\ndiff --git a/django/utils/translation/reloader.py b/django/utils/translation/reloader.py\n--- a/django/utils/translation/reloader.py\n+++ b/django/utils/translation/reloader.py\n@@ -3,11 +3,7 @@\n from asgiref.local import Local\n \n from django.apps import apps\n-\n-\n-def _is_django_module(module):\n-    \"\"\"Return True if the given module is nested under Django.\"\"\"\n-    return module.__name__.startswith('django.')\n+from django.utils.autoreload import is_django_module\n \n \n def watch_for_translation_changes(sender, **kwargs):\n@@ -19,7 +15,7 @@ def watch_for_translation_changes(sender, **kwargs):\n         directories.extend(\n             Path(config.path) / 'locale'\n             for config in apps.get_app_configs()\n-            if not _is_django_module(config.module)\n+            if not is_django_module(config.module)\n         )\n         directories.extend(Path(p) for p in settings.LOCALE_PATHS)\n         for path in directories:\n",
  "test_patch": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -0,0 +1,92 @@\n+from pathlib import Path\n+from unittest import mock\n+\n+from django.template import autoreload\n+from django.test import SimpleTestCase, override_settings\n+from django.test.utils import require_jinja2\n+\n+ROOT = Path(__file__).parent.absolute()\n+EXTRA_TEMPLATES_DIR = ROOT / \"templates_extra\"\n+\n+\n+@override_settings(\n+    INSTALLED_APPS=['template_tests'],\n+    TEMPLATES=[{\n+        'BACKEND': 'django.template.backends.dummy.TemplateStrings',\n+        'APP_DIRS': True,\n+    }, {\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [EXTRA_TEMPLATES_DIR],\n+        'OPTIONS': {\n+            'context_processors': [\n+                'django.template.context_processors.request',\n+            ],\n+            'loaders': [\n+                'django.template.loaders.filesystem.Loader',\n+                'django.template.loaders.app_directories.Loader',\n+            ]\n+        },\n+    }])\n+class TemplateReloadTests(SimpleTestCase):\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_template_changed(self, mock_reset):\n+        template_path = Path(__file__).parent / 'templates' / 'index.html'\n+        self.assertTrue(autoreload.template_changed(None, template_path))\n+        mock_reset.assert_called_once()\n+\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_non_template_changed(self, mock_reset):\n+        self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n+        mock_reset.assert_not_called()\n+\n+    def test_watch_for_template_changes(self):\n+        mock_reloader = mock.MagicMock()\n+        autoreload.watch_for_template_changes(mock_reloader)\n+        self.assertSequenceEqual(\n+            sorted(mock_reloader.watch_dir.call_args_list),\n+            [\n+                mock.call(ROOT / 'templates', '**/*'),\n+                mock.call(ROOT / 'templates_extra', '**/*')\n+            ]\n+        )\n+\n+    def test_get_template_directories(self):\n+        self.assertSetEqual(\n+            autoreload.get_template_directories(),\n+            {\n+                ROOT / 'templates_extra',\n+                ROOT / 'templates',\n+            }\n+        )\n+\n+    @mock.patch('django.template.loaders.base.Loader.reset')\n+    def test_reset_all_loaders(self, mock_reset):\n+        autoreload.reset_loaders()\n+        self.assertEqual(mock_reset.call_count, 2)\n+\n+\n+@require_jinja2\n+@override_settings(INSTALLED_APPS=['template_tests'])\n+class Jinja2TemplateReloadTests(SimpleTestCase):\n+    def test_watch_for_template_changes(self):\n+        mock_reloader = mock.MagicMock()\n+        autoreload.watch_for_template_changes(mock_reloader)\n+        self.assertSequenceEqual(\n+            sorted(mock_reloader.watch_dir.call_args_list),\n+            [\n+                mock.call(ROOT / 'templates', '**/*'),\n+            ]\n+        )\n+\n+    def test_get_template_directories(self):\n+        self.assertSetEqual(\n+            autoreload.get_template_directories(),\n+            {\n+                ROOT / 'templates',\n+            }\n+        )\n+\n+    @mock.patch('django.template.loaders.base.Loader.reset')\n+    def test_reset_all_loaders(self, mock_reset):\n+        autoreload.reset_loaders()\n+        self.assertEqual(mock_reset.call_count, 0)\ndiff --git a/tests/template_tests/test_loaders.py b/tests/template_tests/test_loaders.py\n--- a/tests/template_tests/test_loaders.py\n+++ b/tests/template_tests/test_loaders.py\n@@ -93,6 +93,10 @@ def test_template_name_lazy_string(self):\n         \"\"\"\n         self.assertEqual(self.engine.template_loaders[0].cache_key(lazystr('template.html'), []), 'template.html')\n \n+    def test_get_dirs(self):\n+        inner_dirs = self.engine.template_loaders[0].loaders[0].get_dirs()\n+        self.assertSequenceEqual(list(self.engine.template_loaders[0].get_dirs()), list(inner_dirs))\n+\n \n class FileSystemLoaderTests(SimpleTestCase):\n \ndiff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -14,6 +14,8 @@\n from subprocess import CompletedProcess\n from unittest import mock, skip, skipIf\n \n+import pytz\n+\n import django.__main__\n from django.apps.registry import Apps\n from django.test import SimpleTestCase\n@@ -201,6 +203,26 @@ def test_raises_runtimeerror(self):\n             autoreload.get_child_arguments()\n \n \n+class TestUtilities(SimpleTestCase):\n+    def test_is_django_module(self):\n+        for module, expected in (\n+            (pytz, False),\n+            (sys, False),\n+            (autoreload, True)\n+        ):\n+            with self.subTest(module=module):\n+                self.assertIs(autoreload.is_django_module(module), expected)\n+\n+    def test_is_django_path(self):\n+        for module, expected in (\n+            (pytz.__file__, False),\n+            (contextlib.__file__, False),\n+            (autoreload.__file__, True)\n+        ):\n+            with self.subTest(module=module):\n+                self.assertIs(autoreload.is_django_path(module), expected)\n+\n+\n class TestCommonRoots(SimpleTestCase):\n     def test_common_roots(self):\n         paths = (\n",
  "problem_statement": "Implement autoreload behaviour for cached template loader\nDescription\n\t\nIt would be nice to be able get the speed benefit of the cached template loader during development, but without the downside of having to restart the server every time you change a template. It turns out it's possible with just a few changes.\nBecause it's not really possible to configure the cached template loader I did have to base this patch on the fix for #25788. Enabling autoreloading for the cached template loader would work like this:\nTEMPLATES = [{\n\t'BACKEND': 'django.template.backends.django.DjangoTemplates',\n\t'DIRS': [os.path.join(BASE_DIR, 'templates')],\n\t'APP_DIRS': True\n\t'OPTIONS': {\n\t\t'cache_templates': True, \n\t\t'autoreload': DEBUG\n\t}\n}]\n",
  "hints_text": "The proposed API of passing template loader specific configuration in 'OPTIONS' doesn't seem like a clean separation of concerns. For example, any third-party template loaders desiring some configuration options aren't able to patch the DjangoTemplates backend similarly. As for me, I don't see a big need to use the cached template loader during local development. How much does this actually improve performance? I'd like to see some confirmation on the DevelopersMailingList from other users that the additional complexity is worthwhile. Thanks!\nI'm proposing that optional template caching becomes first class behaviour of the Django template engine. Using the cached template loader is a good practice in general, so in my opinion it should be trivial to enable/disable it. Having caching and auto reloading options on the Engine is actually on par with the jinja2 engine. Which for example has an auto_reload option (that defaults to settings.DEBUG) (​https://github.com/django/django/blob/master/django/template/backends/jinja2.py#L31). With auto reloading in place Django template caching could even be part of any fresh Django project created with startproject. As it is now I've seen many cases where people either forget to turn on caching in production, or forget to turn off caching during development (which results in lots of head scratching and frustration). Finally, using the Engine to configure the cached template loader is also a lot nice than the current way. The fact that you can configure a template loader by using a nesting of lists was introduced when the cached template loader landed: ​https://github.com/django/django/commit/44b9076bbed3e629230d9b77a8765e4c906036d1#diff-eed563533d29c9e8e6f1273759b6314cR74 It doesn't seem to be documented, and it could probably be deprecated with this patch.\nThanks for the additional explanation. Can you please run your proposal by the DevelopersMailingList so it reaches a wider audience?\nI think this is an interesting idea. I looked into something similar as part of previous template refactoring, although my plan was to have the engine handle caching and deprecate the cached loader. An initial patch is still up here: ​https://github.com/prestontimmons/django/commit/4683300c60033ba0db472c81244f01ff932c6fb3 I found this opens the possibility to potentially confusing cases, though. For instance, if a template is cached for a path, but a newer template is placed on the filesystem in a directory that would otherwise have higher precedence, the cached template always win. This doesn't mean autoreload is a bad idea, but if implemented, it's not a good default for development. I'll second Tim that OPTIONS is really meant for engine configuration, not loader configuration. I'm not sure we want to blur the lines this way.\nI think the issue you mention about template precedence is solvable, how does Jinja2 handle these cases? Jinja2's engine enables auto_reload if DEBUG is true (and a cache is set) so I'm assuming it will be turned on in development in many cases. Since template (origin) invalidation is the responsibility of the loader (in both our implementations) it should (probably?) be possible to implement an is_stale/uptodate function that checks if the template is superseded. Regarding loader configuration in the Engine options. The Jina2 engine passes all it's arguments into an Environment (​http://jinja.pocoo.org/docs/dev/api/#jinja2.Environment) that is used by Jinja2's internals to configure all sorts of things. Django doesn't have the concept of an environment, but the engine is used in a similar way (in fact this commit ​https://github.com/django/django/commit/29a977ab143f549c8849e9f08ca5800830eaaabb#diff-2ec90d8b6d7f44124689729e42876209 specifically mentions that template loaders can look up configuration on the engine. But, this isn't so much about configuring loaders as it is about making template caching a more prominent feature of the Django template engine. That template caching is currently possible by way of a quasi template loader is an implementation detail. I'll try to write up something for the developers mailinglist today to get some more input.\n​django-developers discussion\nAymeric suggests: The proposed patch for auto-reloading doesn’t seem too bad in terms of complexity. Its main drawback is that it add a new auto-reload mechanism, distinct from django.utils.autoreload. I would prefer to trigger the autoreloader on template file changes to make it easier to switch e.g. to watchman in the future.\nWith my work on #27685 this should be easy to do. I've implemented a generic autoreload_started and file_changed signal, and the i18n package uses this to reset it's translation cache when a .mo file changes. We could implement similar logic here to call reset() on the cached loader when a template changes?\nPatch: ​https://github.com/django/django/pull/10870 I implemented an autoreloader hook for this, but I felt that simply not caching templates when DEBUG is True was far simpler and hits the majority use case.\nCan you explain what you mean by the \"majority use case\"? The benefit seems to be that you can use the same TEMPLATES settings in development and production (although #25788 already helps with that). The downside is that you can no longer get the speed benefit of the cached template loader in development.\nBy the majority use case I meant people that simply want to have the same template settings across production and development settings, rather than duplicating pretty much the same configuration. We do loose the speed benefit but we never really had it in the first place as (I believe) very few people used the cached loader in development due to this very issue. That being said, having re-read the comments here I'm not sure if that really is the majority use case or just me (in my experience development is fast enough, but the two slightly different settings is annoying). The autoreloader is flexible enough to subscribe to template changes, but the issue is that it's really not simple to do at the cached template loader level as everything is pretty abstract (and quite rightly so). Also we run into an issue where the loaders are not actually imported until the first template is rendered which means that the initial autoreloader started signal is not correctly registered. I will see if I can find a better implementation, but the import issue is especially annoying.\nI'm not convinced that disabling the cached template loader when debug=True is much improvement and really solves this ticket.\nI want to add that not having some form template caching during development may cause performance issues that only happen during development. This might cause a developer to try to mitigate the perceived slowness by rolling their own form of template caching. A real world example of this happening is this wagtail issue: ​https://github.com/wagtail/wagtail/pull/3077",
  "created_at": "2020-05-17T15:16:39Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_is_django_module (utils_tests.test_autoreload.TestUtilities)\", \"test_is_django_path (utils_tests.test_autoreload.TestUtilities)\", \"test_get_dirs (template_tests.test_loaders.CachedLoaderTests)\", \"test_sys_paths_absolute (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_directories (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_non_existing (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_with_directories (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_get_template_directories (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_non_template_changed (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_reset_all_loaders (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_template_changed (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_watch_for_template_changes (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_get_template_directories (template_tests.test_autoreloader.Jinja2TemplateReloadTests)\", \"test_reset_all_loaders (template_tests.test_autoreloader.Jinja2TemplateReloadTests)\", \"test_watch_for_template_changes (template_tests.test_autoreloader.Jinja2TemplateReloadTests)\", \"test_run_loop_catches_stopiteration (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_run_loop_stop_and_return (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_wait_for_apps_ready_checks_for_exception (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_wait_for_apps_ready_without_exception (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_dir_with_unresolvable_path (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_files_with_recursive_glob (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_with_glob (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_glob (utils_tests.test_autoreload.StatReloaderTests)\", \"test_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_multiple_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_multiple_recursive_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_nested_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_overlapping_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_overlapping_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_ignores_missing_files (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_updates (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_with_duplicates (utils_tests.test_autoreload.StatReloaderTests)\", \"test_tick_does_not_trigger_twice (utils_tests.test_autoreload.StatReloaderTests)\", \"test_check_errors_called (utils_tests.test_autoreload.StartDjangoTests)\", \"test_echo_on_called (utils_tests.test_autoreload.StartDjangoTests)\", \"test_starts_thread_with_args (utils_tests.test_autoreload.StartDjangoTests)\", \"test_watchman_becomes_unavailable (utils_tests.test_autoreload.StartDjangoTests)\", \".pyc and .pyo files are included in the files list.\", \"test_check_errors (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_check_errors_catches_all_exceptions (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_file_added (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_main_module_is_resolved (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_main_module_without_file_is_not_resolved (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_module_without_spec (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_path_with_embedded_null_bytes (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_paths_are_pathlib_instances (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"iter_all_python_module_file() ignores weakref modules.\", \"test_zip_reload (utils_tests.test_autoreload.TestIterModulesAndFiles)\"]",
  "PASS_TO_PASS": "[\"test_common_roots (utils_tests.test_autoreload.TestCommonRoots)\", \"test_no_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_custom_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_exception_with_context (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_manage_py (utils_tests.test_autoreload.RestartWithReloaderTests)\", \"test_python_m_django (utils_tests.test_autoreload.RestartWithReloaderTests)\", \"test_watchman_available (utils_tests.test_autoreload.GetReloaderTests)\", \"test_watchman_unavailable (utils_tests.test_autoreload.GetReloaderTests)\", \"test_get_template (template_tests.test_loaders.AppDirectoriesLoaderTests)\", \"test_not_installed (template_tests.test_loaders.AppDirectoriesLoaderTests)\", \"test_cached_exception_no_traceback (template_tests.test_loaders.CachedLoaderTests)\", \"test_get_template (template_tests.test_loaders.CachedLoaderTests)\", \"test_get_template_missing_debug_off (template_tests.test_loaders.CachedLoaderTests)\", \"test_get_template_missing_debug_on (template_tests.test_loaders.CachedLoaderTests)\", \"test_template_name_lazy_string (template_tests.test_loaders.CachedLoaderTests)\", \"test_template_name_leading_dash_caching (template_tests.test_loaders.CachedLoaderTests)\", \"test_entrypoint_fallback (utils_tests.test_autoreload.TestChildArguments)\", \"test_exe_fallback (utils_tests.test_autoreload.TestChildArguments)\", \"test_raises_runtimeerror (utils_tests.test_autoreload.TestChildArguments)\", \"test_run_as_module (utils_tests.test_autoreload.TestChildArguments)\", \"test_warnoptions (utils_tests.test_autoreload.TestChildArguments)\", \"test_get_template (template_tests.test_loaders.LocmemLoaderTests)\", \"test_bytestring (template_tests.test_loaders.FileSystemLoaderTests)\", \"test_directory_security (template_tests.test_loaders.FileSystemLoaderTests)\", \"test_file_does_not_exist (template_tests.test_loaders.FileSystemLoaderTests)\", \"test_get_template (template_tests.test_loaders.FileSystemLoaderTests)\", \"test_loaders_dirs (template_tests.test_loaders.FileSystemLoaderTests)\", \"An empty dirs list in loaders overrides top level dirs.\", \"test_notafile_error (template_tests.test_loaders.FileSystemLoaderTests)\", \"test_unicode_dir_name (template_tests.test_loaders.FileSystemLoaderTests)\", \"test_unicode_template_name (template_tests.test_loaders.FileSystemLoaderTests)\", \"test_mutates_error_files (utils_tests.test_autoreload.TestCheckErrors)\", \"test_calls_start_django (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_calls_sys_exit (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_swallows_keyboard_interrupt (utils_tests.test_autoreload.RunWithReloaderTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.638668",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}