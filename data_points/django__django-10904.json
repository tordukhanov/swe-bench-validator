{
  "repo": "django/django",
  "instance_id": "django__django-10904",
  "base_commit": "7444f3252757ed4384623e5afd7dcfeef3e0c74e",
  "patch": "diff --git a/django/contrib/auth/password_validation.py b/django/contrib/auth/password_validation.py\n--- a/django/contrib/auth/password_validation.py\n+++ b/django/contrib/auth/password_validation.py\n@@ -173,7 +173,7 @@ def __init__(self, password_list_path=DEFAULT_PASSWORD_LIST_PATH):\n         try:\n             with gzip.open(str(password_list_path)) as f:\n                 common_passwords_lines = f.read().decode().splitlines()\n-        except IOError:\n+        except OSError:\n             with open(str(password_list_path)) as f:\n                 common_passwords_lines = f.readlines()\n \ndiff --git a/django/contrib/gis/gdal/libgdal.py b/django/contrib/gis/gdal/libgdal.py\n--- a/django/contrib/gis/gdal/libgdal.py\n+++ b/django/contrib/gis/gdal/libgdal.py\n@@ -13,8 +13,7 @@\n try:\n     from django.conf import settings\n     lib_path = settings.GDAL_LIBRARY_PATH\n-except (AttributeError, EnvironmentError,\n-        ImportError, ImproperlyConfigured):\n+except (AttributeError, ImportError, ImproperlyConfigured, OSError):\n     lib_path = None\n \n if lib_path:\ndiff --git a/django/contrib/gis/geos/libgeos.py b/django/contrib/gis/geos/libgeos.py\n--- a/django/contrib/gis/geos/libgeos.py\n+++ b/django/contrib/gis/geos/libgeos.py\n@@ -23,8 +23,7 @@ def load_geos():\n     try:\n         from django.conf import settings\n         lib_path = settings.GEOS_LIBRARY_PATH\n-    except (AttributeError, EnvironmentError,\n-            ImportError, ImproperlyConfigured):\n+    except (AttributeError, ImportError, ImproperlyConfigured, OSError):\n         lib_path = None\n \n     # Setting the appropriate names for the GEOS-C library.\ndiff --git a/django/contrib/sessions/backends/file.py b/django/contrib/sessions/backends/file.py\n--- a/django/contrib/sessions/backends/file.py\n+++ b/django/contrib/sessions/backends/file.py\n@@ -94,7 +94,7 @@ def load(self):\n                     session_data = {}\n                     self.delete()\n                     self.create()\n-        except (IOError, SuspiciousOperation):\n+        except (OSError, SuspiciousOperation):\n             self._session_key = None\n         return session_data\n \n@@ -166,7 +166,7 @@ def save(self, must_create=False):\n             finally:\n                 if not renamed:\n                     os.unlink(output_file_name)\n-        except (OSError, IOError, EOFError):\n+        except (EOFError, OSError):\n             pass\n \n     def exists(self, session_key):\ndiff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -93,7 +93,7 @@ def hashed_name(self, name, content=None, filename=None):\n                 raise ValueError(\"The file '%s' could not be found with %r.\" % (filename, self))\n             try:\n                 content = self.open(filename)\n-            except IOError:\n+            except OSError:\n                 # Handle directory paths and fragments\n                 return name\n         try:\n@@ -380,7 +380,7 @@ def read_manifest(self):\n         try:\n             with self.open(self.manifest_name) as manifest:\n                 return manifest.read().decode()\n-        except IOError:\n+        except OSError:\n             return None\n \n     def load_manifest(self):\ndiff --git a/django/core/files/move.py b/django/core/files/move.py\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -35,7 +35,7 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n     If that fails, stream manually from one file to another in pure Python.\n \n     If the destination file exists and ``allow_overwrite`` is ``False``, raise\n-    ``IOError``.\n+    ``FileExistsError``.\n     \"\"\"\n     # There's no reason to move if we don't have to.\n     if _samefile(old_file_name, new_file_name):\n@@ -43,7 +43,7 @@ def file_move_safe(old_file_name, new_file_name, chunk_size=1024 * 64, allow_ove\n \n     try:\n         if not allow_overwrite and os.access(new_file_name, os.F_OK):\n-            raise IOError(\"Destination file %s exists and allow_overwrite is False\" % new_file_name)\n+            raise FileExistsError('Destination file %s exists and allow_overwrite is False.' % new_file_name)\n \n         os.rename(old_file_name, new_file_name)\n         return\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -246,7 +246,7 @@ def _save(self, name, content):\n                 # was created concurrently.\n                 pass\n         if not os.path.isdir(directory):\n-            raise IOError(\"%s exists and is not a directory.\" % directory)\n+            raise FileExistsError('%s exists and is not a directory.' % directory)\n \n         # There's a potential race condition between get_available_name and\n         # saving the file; it's possible that two threads might return the\ndiff --git a/django/core/files/temp.py b/django/core/files/temp.py\n--- a/django/core/files/temp.py\n+++ b/django/core/files/temp.py\n@@ -50,7 +50,7 @@ def close(self):\n                 self.close_called = True\n                 try:\n                     self.file.close()\n-                except (OSError, IOError):\n+                except OSError:\n                     pass\n                 try:\n                     self.unlink(self.name)\ndiff --git a/django/core/mail/backends/smtp.py b/django/core/mail/backends/smtp.py\n--- a/django/core/mail/backends/smtp.py\n+++ b/django/core/mail/backends/smtp.py\n@@ -1,6 +1,5 @@\n \"\"\"SMTP email backend class.\"\"\"\n import smtplib\n-import socket\n import ssl\n import threading\n \n@@ -69,7 +68,7 @@ def open(self):\n             if self.username and self.password:\n                 self.connection.login(self.username, self.password)\n             return True\n-        except (smtplib.SMTPException, socket.error):\n+        except OSError:\n             if not self.fail_silently:\n                 raise\n \ndiff --git a/django/core/management/commands/compilemessages.py b/django/core/management/commands/compilemessages.py\n--- a/django/core/management/commands/compilemessages.py\n+++ b/django/core/management/commands/compilemessages.py\n@@ -19,7 +19,7 @@ def is_writable(path):\n     try:\n         with open(path, 'a'):\n             os.utime(path, None)\n-    except (IOError, OSError):\n+    except OSError:\n         return False\n     return True\n \ndiff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -137,7 +137,7 @@ def inner_run(self, *args, **options):\n             handler = self.get_handler(*args, **options)\n             run(self.addr, int(self.port), handler,\n                 ipv6=self.use_ipv6, threading=threading, server_cls=self.server_cls)\n-        except socket.error as e:\n+        except OSError as e:\n             # Use helpful error messages instead of ugly tracebacks.\n             ERRORS = {\n                 errno.EACCES: \"You don't have permission to access that port.\",\ndiff --git a/django/core/management/templates.py b/django/core/management/templates.py\n--- a/django/core/management/templates.py\n+++ b/django/core/management/templates.py\n@@ -257,7 +257,7 @@ def cleanup_url(url):\n             self.stdout.write(\"Downloading %s\\n\" % display_url)\n         try:\n             the_path, info = urlretrieve(url, path.join(tempdir, filename))\n-        except IOError as e:\n+        except OSError as e:\n             raise CommandError(\"couldn't download URL %s to %s: %s\" %\n                                (url, filename, e))\n \n@@ -312,7 +312,7 @@ def extract(self, filename):\n         try:\n             archive.extract(filename, tempdir)\n             return tempdir\n-        except (archive.ArchiveException, IOError) as e:\n+        except (archive.ArchiveException, OSError) as e:\n             raise CommandError(\"couldn't extract file %s to %s: %s\" %\n                                (filename, tempdir, e))\n \ndiff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -51,8 +51,8 @@ def get_internal_wsgi_application():\n \n \n def is_broken_pipe_error():\n-    exc_type, exc_value = sys.exc_info()[:2]\n-    return issubclass(exc_type, socket.error) and exc_value.args[0] == 32\n+    exc_type, _, _ = sys.exc_info()\n+    return issubclass(exc_type, BrokenPipeError)\n \n \n class WSGIServer(simple_server.WSGIServer):\n@@ -171,7 +171,7 @@ def handle(self):\n             self.handle_one_request()\n         try:\n             self.connection.shutdown(socket.SHUT_WR)\n-        except (socket.error, AttributeError):\n+        except (AttributeError, OSError):\n             pass\n \n     def handle_one_request(self):\ndiff --git a/django/http/request.py b/django/http/request.py\n--- a/django/http/request.py\n+++ b/django/http/request.py\n@@ -22,7 +22,7 @@\n host_validation_re = re.compile(r\"^([a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9\\.:]+\\])(:\\d+)?$\")\n \n \n-class UnreadablePostError(IOError):\n+class UnreadablePostError(OSError):\n     pass\n \n \n@@ -284,7 +284,7 @@ def body(self):\n \n             try:\n                 self._body = self.read()\n-            except IOError as e:\n+            except OSError as e:\n                 raise UnreadablePostError(*e.args) from e\n             self._stream = BytesIO(self._body)\n         return self._body\n@@ -339,14 +339,14 @@ def read(self, *args, **kwargs):\n         self._read_started = True\n         try:\n             return self._stream.read(*args, **kwargs)\n-        except IOError as e:\n+        except OSError as e:\n             raise UnreadablePostError(*e.args) from e\n \n     def readline(self, *args, **kwargs):\n         self._read_started = True\n         try:\n             return self._stream.readline(*args, **kwargs)\n-        except IOError as e:\n+        except OSError as e:\n             raise UnreadablePostError(*e.args) from e\n \n     def __iter__(self):\ndiff --git a/django/http/response.py b/django/http/response.py\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -251,13 +251,13 @@ def close(self):\n         signals.request_finished.send(sender=self._handler_class)\n \n     def write(self, content):\n-        raise IOError(\"This %s instance is not writable\" % self.__class__.__name__)\n+        raise OSError('This %s instance is not writable' % self.__class__.__name__)\n \n     def flush(self):\n         pass\n \n     def tell(self):\n-        raise IOError(\"This %s instance cannot tell its position\" % self.__class__.__name__)\n+        raise OSError('This %s instance cannot tell its position' % self.__class__.__name__)\n \n     # These methods partially implement a stream-like object interface.\n     # See https://docs.python.org/library/io.html#io.IOBase\n@@ -272,7 +272,7 @@ def writable(self):\n         return False\n \n     def writelines(self, lines):\n-        raise IOError(\"This %s instance is not writable\" % self.__class__.__name__)\n+        raise OSError('This %s instance is not writable' % self.__class__.__name__)\n \n \n class HttpResponse(HttpResponseBase):\ndiff --git a/django/middleware/csrf.py b/django/middleware/csrf.py\n--- a/django/middleware/csrf.py\n+++ b/django/middleware/csrf.py\n@@ -293,7 +293,7 @@ def process_view(self, request, callback, callback_args, callback_kwargs):\n             if request.method == \"POST\":\n                 try:\n                     request_csrf_token = request.POST.get('csrfmiddlewaretoken', '')\n-                except IOError:\n+                except OSError:\n                     # Handle a broken connection before we've completed reading\n                     # the POST data. process_view shouldn't raise any\n                     # exceptions, so we'll ignore and serve the user a 403\ndiff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -99,7 +99,7 @@ def __init__(self, language, domain=None, localedirs=None):\n         self._add_local_translations()\n         if self.__language == settings.LANGUAGE_CODE and self.domain == 'django' and self._catalog is None:\n             # default lang should have at least one translation file available.\n-            raise IOError(\"No translation files found for default language %s.\" % settings.LANGUAGE_CODE)\n+            raise OSError('No translation files found for default language %s.' % settings.LANGUAGE_CODE)\n         self._add_fallback(localedirs)\n         if self._catalog is None:\n             # No catalogs found for this language, set an empty catalog.\ndiff --git a/django/views/debug.py b/django/views/debug.py\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -357,7 +357,7 @@ def _get_lines_from_file(self, filename, lineno, context_lines, loader=None, mod\n             try:\n                 with open(filename, 'rb') as fp:\n                     source = fp.read().splitlines()\n-            except (OSError, IOError):\n+            except OSError:\n                 pass\n         if source is None:\n             return None, [], None, []\n",
  "test_patch": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -867,7 +867,7 @@ def test_calendar_show_date_from_input(self):\n         for language_code, language_name in settings.LANGUAGES:\n             try:\n                 catalog = gettext.translation('djangojs', path, [language_code])\n-            except IOError:\n+            except OSError:\n                 continue\n             if month_string in catalog._catalog:\n                 month_name = catalog._catalog[month_string]\ndiff --git a/tests/cache/tests.py b/tests/cache/tests.py\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1448,8 +1448,8 @@ def test_get_ignores_enoent(self):\n         self.assertEqual(cache.get('foo', 'baz'), 'baz')\n \n     def test_get_does_not_ignore_non_filenotfound_exceptions(self):\n-        with mock.patch('builtins.open', side_effect=IOError):\n-            with self.assertRaises(IOError):\n+        with mock.patch('builtins.open', side_effect=OSError):\n+            with self.assertRaises(OSError):\n                 cache.get('foo')\n \n     def test_empty_cache_file_considered_expired(self):\ndiff --git a/tests/csrf_tests/tests.py b/tests/csrf_tests/tests.py\n--- a/tests/csrf_tests/tests.py\n+++ b/tests/csrf_tests/tests.py\n@@ -441,12 +441,12 @@ def test_ensures_csrf_cookie_no_logging(self):\n \n     def test_post_data_read_failure(self):\n         \"\"\"\n-        #20128 -- IOErrors during POST data reading should be caught and\n-        treated as if the POST data wasn't there.\n+        OSErrors during POST data reading are caught and treated as if the\n+        POST data wasn't there (#20128).\n         \"\"\"\n         class CsrfPostRequest(HttpRequest):\n             \"\"\"\n-            HttpRequest that can raise an IOError when accessing POST data\n+            HttpRequest that can raise an OSError when accessing POST data\n             \"\"\"\n             def __init__(self, token, raise_error):\n                 super().__init__()\n@@ -464,7 +464,7 @@ def __init__(self, token, raise_error):\n                 self.raise_error = raise_error\n \n             def _load_post_and_files(self):\n-                raise IOError('error reading input data')\n+                raise OSError('error reading input data')\n \n             def _get_post(self):\n                 if self.raise_error:\ndiff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -482,9 +482,9 @@ def test_file_chunks_error(self):\n         f1 = ContentFile('chunks fails')\n \n         def failing_chunks():\n-            raise IOError\n+            raise OSError\n         f1.chunks = failing_chunks\n-        with self.assertRaises(IOError):\n+        with self.assertRaises(OSError):\n             self.storage.save('error.file', f1)\n \n     def test_delete_no_name(self):\ndiff --git a/tests/file_uploads/tests.py b/tests/file_uploads/tests.py\n--- a/tests/file_uploads/tests.py\n+++ b/tests/file_uploads/tests.py\n@@ -548,16 +548,13 @@ def test_readonly_root(self):\n             self.obj.testfile.save('foo.txt', SimpleUploadedFile('foo.txt', b'x'), save=False)\n \n     def test_not_a_directory(self):\n-        \"\"\"The correct IOError is raised when the upload directory name exists but isn't a directory\"\"\"\n         # Create a file with the upload directory name\n         open(UPLOAD_TO, 'wb').close()\n         self.addCleanup(os.remove, UPLOAD_TO)\n-        with self.assertRaises(IOError) as exc_info:\n+        msg = '%s exists and is not a directory.' % UPLOAD_TO\n+        with self.assertRaisesMessage(FileExistsError, msg):\n             with SimpleUploadedFile('foo.txt', b'x') as file:\n                 self.obj.testfile.save('foo.txt', file, save=False)\n-        # The test needs to be done on a specific string as IOError\n-        # is raised even without the patch (just not early enough)\n-        self.assertEqual(exc_info.exception.args[0], \"%s exists and is not a directory.\" % UPLOAD_TO)\n \n \n class MultiParserTests(SimpleTestCase):\ndiff --git a/tests/files/tests.py b/tests/files/tests.py\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -355,8 +355,9 @@ def test_file_move_overwrite(self):\n         handle_a, self.file_a = tempfile.mkstemp()\n         handle_b, self.file_b = tempfile.mkstemp()\n \n-        # file_move_safe should raise an IOError exception if destination file exists and allow_overwrite is False\n-        with self.assertRaises(IOError):\n+        # file_move_safe() raises OSError if the destination file exists and\n+        # allow_overwrite is False.\n+        with self.assertRaises(FileExistsError):\n             file_move_safe(self.file_a, self.file_b, allow_overwrite=False)\n \n         # should allow it and continue on if allow_overwrite is True\ndiff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1747,13 +1747,10 @@ def patchGettextFind(self):\n         gettext_module.find = lambda *args, **kw: None\n \n     def test_failure_finding_default_mo_files(self):\n-        '''\n-        Ensure IOError is raised if the default language is unparseable.\n-        Refs: #18192\n-        '''\n+        \"\"\"OSError is raised if the default language is unparseable.\"\"\"\n         self.patchGettextFind()\n         trans_real._translations = {}\n-        with self.assertRaises(IOError):\n+        with self.assertRaises(OSError):\n             activate('en')\n \n \ndiff --git a/tests/mail/tests.py b/tests/mail/tests.py\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -4,7 +4,6 @@\n import os\n import shutil\n import smtpd\n-import socket\n import sys\n import tempfile\n import threading\n@@ -1570,7 +1569,7 @@ def test_fail_silently_on_connection_error(self):\n         \"\"\"\n         A socket connection error is silenced with fail_silently=True.\n         \"\"\"\n-        with self.assertRaises(socket.error):\n+        with self.assertRaises(ConnectionError):\n             self.backend.open()\n         self.backend.fail_silently = True\n         self.backend.open()\ndiff --git a/tests/requests/tests.py b/tests/requests/tests.py\n--- a/tests/requests/tests.py\n+++ b/tests/requests/tests.py\n@@ -479,11 +479,11 @@ def test_POST_immutable_for_mutipart(self):\n     def test_POST_connection_error(self):\n         \"\"\"\n         If wsgi.input.read() raises an exception while trying to read() the\n-        POST, the exception should be identifiable (not a generic IOError).\n+        POST, the exception is identifiable (not a generic OSError).\n         \"\"\"\n         class ExplodingBytesIO(BytesIO):\n             def read(self, len=0):\n-                raise IOError(\"kaboom!\")\n+                raise OSError('kaboom!')\n \n         payload = b'name=value'\n         request = WSGIRequest({\n@@ -520,11 +520,11 @@ def test_set_encoding_clears_GET(self):\n     def test_FILES_connection_error(self):\n         \"\"\"\n         If wsgi.input.read() raises an exception while trying to read() the\n-        FILES, the exception should be identifiable (not a generic IOError).\n+        FILES, the exception is identifiable (not a generic OSError).\n         \"\"\"\n         class ExplodingBytesIO(BytesIO):\n             def read(self, len=0):\n-                raise IOError(\"kaboom!\")\n+                raise OSError('kaboom!')\n \n         payload = b'x'\n         request = WSGIRequest({\ndiff --git a/tests/responses/tests.py b/tests/responses/tests.py\n--- a/tests/responses/tests.py\n+++ b/tests/responses/tests.py\n@@ -22,14 +22,14 @@ def test_write(self):\n         r = HttpResponseBase()\n         self.assertIs(r.writable(), False)\n \n-        with self.assertRaisesMessage(IOError, 'This HttpResponseBase instance is not writable'):\n+        with self.assertRaisesMessage(OSError, 'This HttpResponseBase instance is not writable'):\n             r.write('asdf')\n-        with self.assertRaisesMessage(IOError, 'This HttpResponseBase instance is not writable'):\n+        with self.assertRaisesMessage(OSError, 'This HttpResponseBase instance is not writable'):\n             r.writelines(['asdf\\n', 'qwer\\n'])\n \n     def test_tell(self):\n         r = HttpResponseBase()\n-        with self.assertRaisesMessage(IOError, 'This HttpResponseBase instance cannot tell its position'):\n+        with self.assertRaisesMessage(OSError, 'This HttpResponseBase instance cannot tell its position'):\n             r.tell()\n \n     def test_setdefault(self):\ndiff --git a/tests/servers/tests.py b/tests/servers/tests.py\n--- a/tests/servers/tests.py\n+++ b/tests/servers/tests.py\n@@ -194,10 +194,10 @@ def test_port_bind(self):\n         TestCase = type(\"TestCase\", (LiveServerBase,), {})\n         try:\n             TestCase.setUpClass()\n-        except socket.error as e:\n+        except OSError as e:\n             if e.errno == errno.EADDRINUSE:\n                 # We're out of ports, LiveServerTestCase correctly fails with\n-                # a socket error.\n+                # an OSError.\n                 return\n             # Unexpected error.\n             raise\ndiff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -532,7 +532,7 @@ def test_configuration_check(self):\n     def test_invalid_key_backslash(self):\n         # Ensure we don't allow directory-traversal.\n         # This is tested directly on _key_to_file, as load() will swallow\n-        # a SuspiciousOperation in the same way as an IOError - by creating\n+        # a SuspiciousOperation in the same way as an OSError - by creating\n         # a new session, making it unclear whether the slashes were detected.\n         with self.assertRaises(InvalidSessionKey):\n             self.backend()._key_to_file(\"a\\\\b\\\\c\")\ndiff --git a/tests/staticfiles_tests/cases.py b/tests/staticfiles_tests/cases.py\n--- a/tests/staticfiles_tests/cases.py\n+++ b/tests/staticfiles_tests/cases.py\n@@ -23,7 +23,7 @@ def assertFileContains(self, filepath, text):\n         )\n \n     def assertFileNotFound(self, filepath):\n-        with self.assertRaises(IOError):\n+        with self.assertRaises(OSError):\n             self._get_file(filepath)\n \n     def render_template(self, template, **kwargs):\ndiff --git a/tests/template_tests/test_loaders.py b/tests/template_tests/test_loaders.py\n--- a/tests/template_tests/test_loaders.py\n+++ b/tests/template_tests/test_loaders.py\n@@ -191,11 +191,11 @@ def test_permissions_error(self):\n             tmppath = os.path.join(tmpdir, tmpfile.name)\n             os.chmod(tmppath, 0o0222)\n             with self.set_dirs([tmpdir]):\n-                with self.assertRaisesMessage(IOError, 'Permission denied'):\n+                with self.assertRaisesMessage(PermissionError, 'Permission denied'):\n                     self.engine.get_template(tmpfile.name)\n \n     def test_notafile_error(self):\n-        with self.assertRaises(IOError):\n+        with self.assertRaises(IsADirectoryError):\n             self.engine.get_template('first')\n \n \n",
  "problem_statement": "Replace use of OSError aliases with OSError (IOError, EnvironmentError, WindowsError, mmap.error, socket.error, select.error)\nDescription\n\t\nStarting with Python 3.3, EnvironmentError, IOError, WindowsError, socket.error, select.error and mmap.error are aliases of OSError. With this in mind, the Django code base can be cleaned up.\nFor additional details, see the Python 3.3 release notes:\n​https://docs.python.org/3/whatsnew/3.3.html#pep-3151-reworking-the-os-and-io-exception-hierarchy\nYou don’t have to worry anymore about choosing the appropriate exception type between OSError, IOError, EnvironmentError, WindowsError, mmap.error, socket.error or select.error. All these exception types are now only one: OSError. The other names are kept as aliases for compatibility reasons.\nAdditionally, since Python 3.4, SMTPException is subclass of OSError . So exception handles catching both can be simplified to just OSError.\n​https://docs.python.org/3/library/smtplib.html#smtplib.SMTPException\nSubclass of OSError that is the base exception class for all the other exceptions provided by this module.\nChanged in version 3.4: SMTPException became subclass of OSError\n",
  "hints_text": "​https://github.com/django/django/pull/10904\nNow we're targeting Python ≥ 3.6 for Django 3.0 this is a nice clean up.",
  "created_at": "2019-01-27T01:01:52Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_not_a_directory (file_uploads.tests.DirectoryCreationTests)\"]",
  "PASS_TO_PASS": "[\"Nonexistent cache keys return as None/default.\", \"set_many() returns an empty list when all keys are inserted.\", \"test_lazy (i18n.tests.TestModels)\", \"test_safestr (i18n.tests.TestModels)\", \"test_createcachetable_observes_database_router (cache.tests.CreateCacheTableForDBCacheTests)\", \"test_proper_escaping (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_many_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_one_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_without_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"Memory caches that have the TIMEOUT parameter set to `None` in the\", \"Memory caches that have the TIMEOUT parameter set to `None` will set\", \"Caches that have the TIMEOUT parameter undefined in the default\", \"Memory caches that have the TIMEOUT parameter unset will set cache\", \"The default expiration time of a cache key is 5 minutes.\", \"test_per_thread (cache.tests.CacheHandlerTest)\", \"test_same_instance (cache.tests.CacheHandlerTest)\", \"test_head_caches_correctly (cache.tests.CacheHEADTest)\", \"test_head_with_cached_get (cache.tests.CacheHEADTest)\", \"test_cache_key_varies_by_url (cache.tests.CacheUtils)\", \"test_get_cache_key (cache.tests.CacheUtils)\", \"test_get_cache_key_with_query (cache.tests.CacheUtils)\", \"test_learn_cache_key (cache.tests.CacheUtils)\", \"test_patch_cache_control (cache.tests.CacheUtils)\", \"test_patch_vary_headers (cache.tests.CacheUtils)\", \"test_close (cache.tests.CacheClosingTests)\", \"test_cache_key_varies_by_url (cache.tests.PrefixedCacheUtils)\", \"test_get_cache_key (cache.tests.PrefixedCacheUtils)\", \"test_get_cache_key_with_query (cache.tests.PrefixedCacheUtils)\", \"test_learn_cache_key (cache.tests.PrefixedCacheUtils)\", \"test_patch_cache_control (cache.tests.PrefixedCacheUtils)\", \"test_patch_vary_headers (cache.tests.PrefixedCacheUtils)\", \"test_get_filesystem_storage (file_storage.tests.GetStorageClassTests)\", \"test_get_invalid_storage_module (file_storage.tests.GetStorageClassTests)\", \"test_get_nonexistent_storage_class (file_storage.tests.GetStorageClassTests)\", \"test_get_nonexistent_storage_module (file_storage.tests.GetStorageClassTests)\", \"Regression test for #9610.\", \"test_first_character_dot (file_storage.tests.FileStoragePathParsing)\", \"test_get_cache_key (cache.tests.TestWithTemplateResponse)\", \"test_get_cache_key_with_query (cache.tests.TestWithTemplateResponse)\", \"test_patch_vary_headers (cache.tests.TestWithTemplateResponse)\", \"test_CharField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_DateField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_DateTimeField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_EmailField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_FileField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_ForeignKey (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_IntegerField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_TextField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_TimeField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_URLField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_choices_with_radio_fields (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_field_with_choices (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_filtered_many_to_many (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_formfield_overrides (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_formfield_overrides_for_custom_field (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_formfield_overrides_for_datetime_field (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_formfield_overrides_widget_instances (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_inheritance (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"m2m fields help text as it applies to admin app (#9321).\", \"test_many_to_many (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_radio_fields_ForeignKey (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_raw_id_ForeignKey (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_raw_id_many_to_many (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_bad_type_content_length (file_uploads.tests.MultiParserTests)\", \"test_empty_upload_handlers (file_uploads.tests.MultiParserTests)\", \"test_invalid_content_type (file_uploads.tests.MultiParserTests)\", \"test_negative_content_length (file_uploads.tests.MultiParserTests)\", \"test_rfc2231_parsing (file_uploads.tests.MultiParserTests)\", \"test_rfc2231_wrong_title (file_uploads.tests.MultiParserTests)\", \"test_ignores_non_mo_files (i18n.tests.TranslationFileChangedTests)\", \"test_resets_cache_with_mo_files (i18n.tests.TranslationFileChangedTests)\", \"OSError is raised if the default language is unparseable.\", \"test_custom_key_validation (cache.tests.CustomCacheKeyValidationTests)\", \"test_base_request_headers (requests.tests.RequestHeadersTests)\", \"test_wsgi_request_headers (requests.tests.RequestHeadersTests)\", \"test_wsgi_request_headers_get (requests.tests.RequestHeadersTests)\", \"test_wsgi_request_headers_getitem (requests.tests.RequestHeadersTests)\", \"test_fallback_language_code (i18n.tests.TestLanguageInfo)\", \"test_localized_language_info (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code_and_country_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_only_country_code (i18n.tests.TestLanguageInfo)\", \"test_basic (requests.tests.HttpHeadersTests)\", \"test_parse_header_name (requests.tests.HttpHeadersTests)\", \"test_absolute_url (requests.tests.BuildAbsoluteURITests)\", \"test_host_retrieval (requests.tests.BuildAbsoluteURITests)\", \"test_request_path_begins_with_two_slashes (requests.tests.BuildAbsoluteURITests)\", \"test_closed (responses.tests.HttpResponseBaseTests)\", \"test_setdefault (responses.tests.HttpResponseBaseTests)\", \"test_tell (responses.tests.HttpResponseBaseTests)\", \"test_write (responses.tests.HttpResponseBaseTests)\", \"test_7bit (mail.tests.PythonGlobalState)\", \"test_8bit_latin (mail.tests.PythonGlobalState)\", \"test_8bit_non_latin (mail.tests.PythonGlobalState)\", \"test_utf8 (mail.tests.PythonGlobalState)\", \"test_change_status_code (responses.tests.HttpResponseTests)\", \"HttpResponse should parse charset from content_type.\", \"test_generator_cache (responses.tests.HttpResponseTests)\", \"test_invalid_status_code (responses.tests.HttpResponseTests)\", \"test_reason_phrase (responses.tests.HttpResponseTests)\", \"test_repr (responses.tests.HttpResponseTests)\", \"test_repr_no_content_type (responses.tests.HttpResponseTests)\", \"HttpResponse should encode based on charset.\", \"test_status_code (responses.tests.HttpResponseTests)\", \"test_valid_status_code_string (responses.tests.HttpResponseTests)\", \"test_wrap_textiowrapper (responses.tests.HttpResponseTests)\", \"get_host() makes helpful suggestions if a valid-looking host is not in ALLOWED_HOSTS.\", \"test_get_port (requests.tests.HostValidationTests)\", \"test_get_port_with_x_forwarded_port (requests.tests.HostValidationTests)\", \"test_host_validation_in_debug_mode (requests.tests.HostValidationTests)\", \"test_http_get_host (requests.tests.HostValidationTests)\", \"test_http_get_host_with_x_forwarded_host (requests.tests.HostValidationTests)\", \"test_split_domain_port_removes_trailing_dot (requests.tests.HostValidationTests)\", \"test_check_for_langauge (i18n.tests.NonDjangoLanguageTests)\", \"test_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"test_plural_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"test_content_saving (file_storage.tests.ContentFileStorageTestCase)\", \"test_noname_file_default_name (files.tests.NoNameFileTestCase)\", \"test_noname_file_get_size (files.tests.NoNameFileTestCase)\", \"test_open_resets_file_to_start_and_returns_context_manager (files.tests.InMemoryUploadedFileTests)\", \"test_content_file_custom_name (files.tests.ContentFileTestCase)\", \"test_content_file_default_name (files.tests.ContentFileTestCase)\", \"test_content_file_input_type (files.tests.ContentFileTestCase)\", \"test_open_resets_file_to_start_and_returns_context_manager (files.tests.ContentFileTestCase)\", \"ContentFile.size changes after a write().\", \"test_in_memory_spooled_temp (files.tests.SpooledTempTests)\", \"test_written_spooled_temp (files.tests.SpooledTempTests)\", \"The temporary file name has the same suffix as the original file.\", \"test_deconstruction (file_storage.tests.FileSystemStorageTests)\", \"test_lazy_base_url_init (file_storage.tests.FileSystemStorageTests)\", \"test_file_move_copystat_cifs (files.tests.FileMoveSafeTests)\", \"test_file_move_overwrite (files.tests.FileMoveSafeTests)\", \"test_context_manager (files.tests.FileTests)\", \"test_file_iteration (files.tests.FileTests)\", \"test_file_iteration_mac_newlines (files.tests.FileTests)\", \"test_file_iteration_mixed_newlines (files.tests.FileTests)\", \"test_file_iteration_windows_newlines (files.tests.FileTests)\", \"test_file_iteration_with_mac_newline_at_chunk_boundary (files.tests.FileTests)\", \"test_file_iteration_with_text (files.tests.FileTests)\", \"test_file_iteration_with_unix_newline_at_chunk_boundary (files.tests.FileTests)\", \"test_file_iteration_with_windows_newline_at_chunk_boundary (files.tests.FileTests)\", \"test_file_mode (files.tests.FileTests)\", \"test_io_wrapper (files.tests.FileTests)\", \"test_namedtemporaryfile_closes (files.tests.FileTests)\", \"test_open_reopens_closed_file_and_returns_context_manager (files.tests.FileTests)\", \"test_open_resets_opened_file_to_start_and_returns_context_manager (files.tests.FileTests)\", \"test_readable (files.tests.FileTests)\", \"test_seekable (files.tests.FileTests)\", \"test_unicode_file_name (files.tests.FileTests)\", \"test_unicode_uploadedfile_name (files.tests.FileTests)\", \"test_writable (files.tests.FileTests)\", \"test_check_for_language (i18n.tests.CountrySpecificLanguageTests)\", \"test_check_for_language_null (i18n.tests.CountrySpecificLanguageTests)\", \"test_get_language_from_request (i18n.tests.CountrySpecificLanguageTests)\", \"test_get_language_from_request_null (i18n.tests.CountrySpecificLanguageTests)\", \"test_specific_language_codes (i18n.tests.CountrySpecificLanguageTests)\", \"test_file_upload_default_permissions (file_storage.tests.FileStoragePermissions)\", \"test_file_upload_directory_default_permissions (file_storage.tests.FileStoragePermissions)\", \"test_file_upload_directory_permissions (file_storage.tests.FileStoragePermissions)\", \"test_file_upload_permissions (file_storage.tests.FileStoragePermissions)\", \"test_get_template (template_tests.test_loaders.AppDirectoriesLoaderTests)\", \"test_not_installed (template_tests.test_loaders.AppDirectoriesLoaderTests)\", \"test_bytestring (template_tests.test_loaders.FileSystemLoaderTests)\", \"test_directory_security (template_tests.test_loaders.FileSystemLoaderTests)\", \"test_file_does_not_exist (template_tests.test_loaders.FileSystemLoaderTests)\", \"test_get_template (template_tests.test_loaders.FileSystemLoaderTests)\", \"test_loaders_dirs (template_tests.test_loaders.FileSystemLoaderTests)\", \"An empty dirs list in loaders overrides top level dirs.\", \"test_notafile_error (template_tests.test_loaders.FileSystemLoaderTests)\", \"test_unicode_dir_name (template_tests.test_loaders.FileSystemLoaderTests)\", \"test_unicode_template_name (template_tests.test_loaders.FileSystemLoaderTests)\", \"test_date_header_localtime (mail.tests.MailTimeZoneTests)\", \"test_date_header_utc (mail.tests.MailTimeZoneTests)\", \"test_cached_exception_no_traceback (template_tests.test_loaders.CachedLoaderTests)\", \"test_get_template (template_tests.test_loaders.CachedLoaderTests)\", \"test_get_template_missing_debug_off (template_tests.test_loaders.CachedLoaderTests)\", \"test_get_template_missing_debug_on (template_tests.test_loaders.CachedLoaderTests)\", \"test_template_name_lazy_string (template_tests.test_loaders.CachedLoaderTests)\", \"test_template_name_leading_dash_caching (template_tests.test_loaders.CachedLoaderTests)\", \"test_django_fallback (i18n.tests.DjangoFallbackResolutionOrderI18NTests)\", \"test_get_template (template_tests.test_loaders.LocmemLoaderTests)\", \"test_FILES_connection_error (requests.tests.RequestsTests)\", \"test_POST_after_body_read (requests.tests.RequestsTests)\", \"test_POST_after_body_read_and_stream_read (requests.tests.RequestsTests)\", \"test_POST_after_body_read_and_stream_read_multipart (requests.tests.RequestsTests)\", \"test_POST_binary_only (requests.tests.RequestsTests)\", \"test_POST_connection_error (requests.tests.RequestsTests)\", \"test_POST_immutable_for_mutipart (requests.tests.RequestsTests)\", \"test_POST_multipart_with_content_length_zero (requests.tests.RequestsTests)\", \"test_alternate_charset_POST (requests.tests.RequestsTests)\", \"test_body_after_POST_multipart_form_data (requests.tests.RequestsTests)\", \"test_body_after_POST_multipart_related (requests.tests.RequestsTests)\", \"test_get_raw_uri (requests.tests.RequestsTests)\", \"test_httprequest (requests.tests.RequestsTests)\", \"test_httprequest_full_path (requests.tests.RequestsTests)\", \"test_httprequest_full_path_with_query_string_and_fragment (requests.tests.RequestsTests)\", \"test_httprequest_repr (requests.tests.RequestsTests)\", \"test_httprequest_repr_invalid_method_and_path (requests.tests.RequestsTests)\", \"test_limited_stream (requests.tests.RequestsTests)\", \"test_non_ascii_POST (requests.tests.RequestsTests)\", \"test_read_after_value (requests.tests.RequestsTests)\", \"test_read_by_lines (requests.tests.RequestsTests)\", \"test_set_encoding_clears_GET (requests.tests.RequestsTests)\", \"test_set_encoding_clears_POST (requests.tests.RequestsTests)\", \"test_stream (requests.tests.RequestsTests)\", \"test_value_after_read (requests.tests.RequestsTests)\", \"test_wsgirequest (requests.tests.RequestsTests)\", \"test_wsgirequest_path_info (requests.tests.RequestsTests)\", \"test_wsgirequest_path_with_force_script_name_trailing_slash (requests.tests.RequestsTests)\", \"test_wsgirequest_repr (requests.tests.RequestsTests)\", \"test_wsgirequest_script_url_double_slashes (requests.tests.RequestsTests)\", \"test_wsgirequest_with_force_script_name (requests.tests.RequestsTests)\", \"test_wsgirequest_with_script_name (requests.tests.RequestsTests)\", \"test_clear (sessions_tests.tests.CookieSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.CookieSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.CookieSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.CookieSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.CookieSessionTests)\", \"test_cycle (sessions_tests.tests.CookieSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.CookieSessionTests)\", \"test_decode (sessions_tests.tests.CookieSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.CookieSessionTests)\", \"test_default_expiry (sessions_tests.tests.CookieSessionTests)\", \"test_delete (sessions_tests.tests.CookieSessionTests)\", \"test_flush (sessions_tests.tests.CookieSessionTests)\", \"test_get_empty (sessions_tests.tests.CookieSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.CookieSessionTests)\", \"test_has_key (sessions_tests.tests.CookieSessionTests)\", \"test_invalid_key (sessions_tests.tests.CookieSessionTests)\", \"test_items (sessions_tests.tests.CookieSessionTests)\", \"test_keys (sessions_tests.tests.CookieSessionTests)\", \"test_new_session (sessions_tests.tests.CookieSessionTests)\", \"test_pop (sessions_tests.tests.CookieSessionTests)\", \"test_pop_default (sessions_tests.tests.CookieSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.CookieSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.CookieSessionTests)\", \"test_save (sessions_tests.tests.CookieSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.CookieSessionTests)\", \"Falsey values (Such as an empty string) are rejected.\", \"test_session_key_is_read_only (sessions_tests.tests.CookieSessionTests)\", \"Strings shorter than 8 characters are rejected.\", \"Strings of length 8 and up are accepted and stored.\", \"test_setdefault (sessions_tests.tests.CookieSessionTests)\", \"test_store (sessions_tests.tests.CookieSessionTests)\", \"test_unpickling_exception (sessions_tests.tests.CookieSessionTests)\", \"test_update (sessions_tests.tests.CookieSessionTests)\", \"test_values (sessions_tests.tests.CookieSessionTests)\", \"test_bug14894_translation_activate_thread_safety (i18n.tests.TranslationThreadSafetyTests)\", \"test_render (admin_widgets.tests.FilteredSelectMultipleWidgetTest)\", \"test_stacked_render (admin_widgets.tests.FilteredSelectMultipleWidgetTest)\", \"test_attrs (admin_widgets.tests.AdminDateWidgetTest)\", \"test_attrs (admin_widgets.tests.AdminUUIDWidgetTests)\", \"test_sparse_territory_catalog (i18n.tests.TranslationFallbackI18NTests)\", \"test_actual_expiry (sessions_tests.tests.CacheSessionTests)\", \"test_clear (sessions_tests.tests.CacheSessionTests)\", \"test_create_and_save (sessions_tests.tests.CacheSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.CacheSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.CacheSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.CacheSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.CacheSessionTests)\", \"test_cycle (sessions_tests.tests.CacheSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.CacheSessionTests)\", \"test_decode (sessions_tests.tests.CacheSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.CacheSessionTests)\", \"test_default_cache (sessions_tests.tests.CacheSessionTests)\", \"test_default_expiry (sessions_tests.tests.CacheSessionTests)\", \"test_delete (sessions_tests.tests.CacheSessionTests)\", \"test_flush (sessions_tests.tests.CacheSessionTests)\", \"test_get_empty (sessions_tests.tests.CacheSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.CacheSessionTests)\", \"test_has_key (sessions_tests.tests.CacheSessionTests)\", \"test_invalid_key (sessions_tests.tests.CacheSessionTests)\", \"test_items (sessions_tests.tests.CacheSessionTests)\", \"test_keys (sessions_tests.tests.CacheSessionTests)\", \"test_load_overlong_key (sessions_tests.tests.CacheSessionTests)\", \"test_new_session (sessions_tests.tests.CacheSessionTests)\", \"test_non_default_cache (sessions_tests.tests.CacheSessionTests)\", \"test_pop (sessions_tests.tests.CacheSessionTests)\", \"test_pop_default (sessions_tests.tests.CacheSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.CacheSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.CacheSessionTests)\", \"test_save (sessions_tests.tests.CacheSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.CacheSessionTests)\", \"test_session_key_is_read_only (sessions_tests.tests.CacheSessionTests)\", \"test_session_load_does_not_create_record (sessions_tests.tests.CacheSessionTests)\", \"test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CacheSessionTests)\", \"test_setdefault (sessions_tests.tests.CacheSessionTests)\", \"test_store (sessions_tests.tests.CacheSessionTests)\", \"test_update (sessions_tests.tests.CacheSessionTests)\", \"test_values (sessions_tests.tests.CacheSessionTests)\", \"test_attrs (admin_widgets.tests.AdminTimeWidgetTest)\", \"test_custom_valid_name_callable_upload_to (file_storage.tests.FileFieldStorageTests)\", \"test_duplicate_filename (file_storage.tests.FileFieldStorageTests)\", \"test_empty_upload_to (file_storage.tests.FileFieldStorageTests)\", \"test_extended_length_storage (file_storage.tests.FileFieldStorageTests)\", \"test_file_object (file_storage.tests.FileFieldStorageTests)\", \"test_file_truncation (file_storage.tests.FileFieldStorageTests)\", \"test_filefield_default (file_storage.tests.FileFieldStorageTests)\", \"test_filefield_pickling (file_storage.tests.FileFieldStorageTests)\", \"test_filefield_read (file_storage.tests.FileFieldStorageTests)\", \"test_filefield_reopen (file_storage.tests.FileFieldStorageTests)\", \"test_filefield_write (file_storage.tests.FileFieldStorageTests)\", \"test_files (file_storage.tests.FileFieldStorageTests)\", \"test_random_upload_to (file_storage.tests.FileFieldStorageTests)\", \"test_stringio (file_storage.tests.FileFieldStorageTests)\", \"test_empty_session_saved (sessions_tests.tests.SessionMiddlewareTests)\", \"test_flush_empty_without_session_cookie_doesnt_set_cookie (sessions_tests.tests.SessionMiddlewareTests)\", \"test_httponly_session_cookie (sessions_tests.tests.SessionMiddlewareTests)\", \"test_no_httponly_session_cookie (sessions_tests.tests.SessionMiddlewareTests)\", \"test_samesite_session_cookie (sessions_tests.tests.SessionMiddlewareTests)\", \"test_secure_session_cookie (sessions_tests.tests.SessionMiddlewareTests)\", \"test_session_delete_on_end (sessions_tests.tests.SessionMiddlewareTests)\", \"test_session_delete_on_end_with_custom_domain_and_path (sessions_tests.tests.SessionMiddlewareTests)\", \"test_session_save_on_500 (sessions_tests.tests.SessionMiddlewareTests)\", \"test_session_update_error_redirect (sessions_tests.tests.SessionMiddlewareTests)\", \"test_i18n_app_dirs (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_disabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_enabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_local_locale (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_locale_paths (i18n.tests.WatchForTranslationChangesTests)\", \"test_cache_resetting (i18n.tests.MiscTests)\", \"test_english_fallback (i18n.tests.MiscTests)\", \"test_get_language_from_path_null (i18n.tests.MiscTests)\", \"test_get_language_from_path_real (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_null (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_real (i18n.tests.MiscTests)\", \"test_i18n_patterns_returns_list (i18n.tests.MiscTests)\", \"test_parse_language_cookie (i18n.tests.MiscTests)\", \"test_parse_literal_http_header (i18n.tests.MiscTests)\", \"test_parse_spec_http_header (i18n.tests.MiscTests)\", \"test_special_fallback_language (i18n.tests.MiscTests)\", \"test_support_for_deprecated_chinese_language_codes (i18n.tests.MiscTests)\", \"test_locale_paths_override_app_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"test_locale_paths_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"test_render (admin_widgets.tests.AdminURLWidgetTest)\", \"test_render_idn (admin_widgets.tests.AdminURLWidgetTest)\", \"test_render_quoting (admin_widgets.tests.AdminURLWidgetTest)\", \"test_app_translation (i18n.tests.AppResolutionOrderI18NTests)\", \"test_closing_of_filenames (files.tests.DimensionClosingBug)\", \"test_not_closing_of_files (files.tests.DimensionClosingBug)\", \"test_actual_expiry (sessions_tests.tests.FileSessionTests)\", \"test_clear (sessions_tests.tests.FileSessionTests)\", \"test_clearsessions_command (sessions_tests.tests.FileSessionTests)\", \"test_configuration_check (sessions_tests.tests.FileSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.FileSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.FileSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.FileSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.FileSessionTests)\", \"test_cycle (sessions_tests.tests.FileSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.FileSessionTests)\", \"test_decode (sessions_tests.tests.FileSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.FileSessionTests)\", \"test_default_expiry (sessions_tests.tests.FileSessionTests)\", \"test_delete (sessions_tests.tests.FileSessionTests)\", \"test_flush (sessions_tests.tests.FileSessionTests)\", \"test_get_empty (sessions_tests.tests.FileSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.FileSessionTests)\", \"test_has_key (sessions_tests.tests.FileSessionTests)\", \"test_invalid_key (sessions_tests.tests.FileSessionTests)\", \"test_invalid_key_backslash (sessions_tests.tests.FileSessionTests)\", \"test_invalid_key_forwardslash (sessions_tests.tests.FileSessionTests)\", \"test_items (sessions_tests.tests.FileSessionTests)\", \"test_keys (sessions_tests.tests.FileSessionTests)\", \"test_new_session (sessions_tests.tests.FileSessionTests)\", \"test_pop (sessions_tests.tests.FileSessionTests)\", \"test_pop_default (sessions_tests.tests.FileSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.FileSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.FileSessionTests)\", \"test_save (sessions_tests.tests.FileSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.FileSessionTests)\", \"test_session_key_is_read_only (sessions_tests.tests.FileSessionTests)\", \"test_session_load_does_not_create_record (sessions_tests.tests.FileSessionTests)\", \"test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.FileSessionTests)\", \"test_setdefault (sessions_tests.tests.FileSessionTests)\", \"test_store (sessions_tests.tests.FileSessionTests)\", \"test_update (sessions_tests.tests.FileSessionTests)\", \"test_values (sessions_tests.tests.FileSessionTests)\", \"test_close_connection (mail.tests.LocmemBackendTests)\", \"test_empty_admins (mail.tests.LocmemBackendTests)\", \"Test html_message argument to mail_admins\", \"Test html_message argument to mail_managers\", \"Test html_message argument to send_mail\", \"test_idn_send (mail.tests.LocmemBackendTests)\", \"test_lazy_addresses (mail.tests.LocmemBackendTests)\", \"test_locmem_shared_messages (mail.tests.LocmemBackendTests)\", \"test_manager_and_admin_mail_prefix (mail.tests.LocmemBackendTests)\", \"test_message_cc_header (mail.tests.LocmemBackendTests)\", \"test_plaintext_send_mail (mail.tests.LocmemBackendTests)\", \"test_recipient_without_domain (mail.tests.LocmemBackendTests)\", \"test_send (mail.tests.LocmemBackendTests)\", \"test_send_long_lines (mail.tests.LocmemBackendTests)\", \"test_send_many (mail.tests.LocmemBackendTests)\", \"test_send_unicode (mail.tests.LocmemBackendTests)\", \"test_send_verbose_name (mail.tests.LocmemBackendTests)\", \"test_use_as_contextmanager (mail.tests.LocmemBackendTests)\", \"test_validate_multiline_headers (mail.tests.LocmemBackendTests)\", \"test_default_lang_without_prefix (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_no_redirect_on_404 (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_other_lang_with_prefix (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_page_with_dash (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_unprefixed_language_other_than_accept_language (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_bug_19457 (files.tests.InconsistentGetImageDimensionsBug)\", \"test_multiple_calls (files.tests.InconsistentGetImageDimensionsBug)\", \"test_close_connection (mail.tests.ConsoleBackendTests)\", \"test_console_stream_kwarg (mail.tests.ConsoleBackendTests)\", \"test_empty_admins (mail.tests.ConsoleBackendTests)\", \"test_idn_send (mail.tests.ConsoleBackendTests)\", \"test_lazy_addresses (mail.tests.ConsoleBackendTests)\", \"test_manager_and_admin_mail_prefix (mail.tests.ConsoleBackendTests)\", \"test_message_cc_header (mail.tests.ConsoleBackendTests)\", \"test_plaintext_send_mail (mail.tests.ConsoleBackendTests)\", \"test_recipient_without_domain (mail.tests.ConsoleBackendTests)\", \"test_send (mail.tests.ConsoleBackendTests)\", \"test_send_long_lines (mail.tests.ConsoleBackendTests)\", \"test_send_many (mail.tests.ConsoleBackendTests)\", \"test_send_unicode (mail.tests.ConsoleBackendTests)\", \"test_send_verbose_name (mail.tests.ConsoleBackendTests)\", \"test_use_as_contextmanager (mail.tests.ConsoleBackendTests)\", \"test_actual_expiry (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_clear (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_custom_expiry_reset (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_cycle (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_decode (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_default_expiry (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_delete (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_exists_searches_cache_first (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_flush (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_get_empty (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_has_key (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_invalid_key (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_items (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_keys (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_load_overlong_key (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_new_session (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_non_default_cache (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_pop (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_pop_default (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_pop_default_named_argument (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_save (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_session_key_is_read_only (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_session_load_does_not_create_record (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_setdefault (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_store (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_update (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_values (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_language_not_saved_to_session (i18n.tests.LocaleMiddlewareTests)\", \"test_streaming_response (i18n.tests.LocaleMiddlewareTests)\", \"test_m2m_related_model_not_in_admin (admin_widgets.tests.ManyToManyRawIdWidgetTest)\", \"test_render (admin_widgets.tests.ManyToManyRawIdWidgetTest)\", \"test_actual_expiry (sessions_tests.tests.CacheDBSessionTests)\", \"test_clear (sessions_tests.tests.CacheDBSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.CacheDBSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.CacheDBSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.CacheDBSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.CacheDBSessionTests)\", \"test_cycle (sessions_tests.tests.CacheDBSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.CacheDBSessionTests)\", \"test_decode (sessions_tests.tests.CacheDBSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.CacheDBSessionTests)\", \"test_default_expiry (sessions_tests.tests.CacheDBSessionTests)\", \"test_delete (sessions_tests.tests.CacheDBSessionTests)\", \"test_exists_searches_cache_first (sessions_tests.tests.CacheDBSessionTests)\", \"test_flush (sessions_tests.tests.CacheDBSessionTests)\", \"test_get_empty (sessions_tests.tests.CacheDBSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.CacheDBSessionTests)\", \"test_has_key (sessions_tests.tests.CacheDBSessionTests)\", \"test_invalid_key (sessions_tests.tests.CacheDBSessionTests)\", \"test_items (sessions_tests.tests.CacheDBSessionTests)\", \"test_keys (sessions_tests.tests.CacheDBSessionTests)\", \"test_load_overlong_key (sessions_tests.tests.CacheDBSessionTests)\", \"test_new_session (sessions_tests.tests.CacheDBSessionTests)\", \"test_non_default_cache (sessions_tests.tests.CacheDBSessionTests)\", \"test_pop (sessions_tests.tests.CacheDBSessionTests)\", \"test_pop_default (sessions_tests.tests.CacheDBSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.CacheDBSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.CacheDBSessionTests)\", \"test_save (sessions_tests.tests.CacheDBSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.CacheDBSessionTests)\", \"test_session_key_is_read_only (sessions_tests.tests.CacheDBSessionTests)\", \"test_session_load_does_not_create_record (sessions_tests.tests.CacheDBSessionTests)\", \"test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CacheDBSessionTests)\", \"test_setdefault (sessions_tests.tests.CacheDBSessionTests)\", \"test_store (sessions_tests.tests.CacheDBSessionTests)\", \"test_update (sessions_tests.tests.CacheDBSessionTests)\", \"test_values (sessions_tests.tests.CacheDBSessionTests)\", \"test_localization (admin_widgets.tests.AdminSplitDateTimeWidgetTest)\", \"test_render (admin_widgets.tests.AdminSplitDateTimeWidgetTest)\", \"test_close_connection (mail.tests.FileBackendTests)\", \"test_empty_admins (mail.tests.FileBackendTests)\", \"Make sure opening a connection creates a new file\", \"test_idn_send (mail.tests.FileBackendTests)\", \"test_lazy_addresses (mail.tests.FileBackendTests)\", \"test_manager_and_admin_mail_prefix (mail.tests.FileBackendTests)\", \"test_message_cc_header (mail.tests.FileBackendTests)\", \"test_plaintext_send_mail (mail.tests.FileBackendTests)\", \"test_recipient_without_domain (mail.tests.FileBackendTests)\", \"test_send (mail.tests.FileBackendTests)\", \"test_send_long_lines (mail.tests.FileBackendTests)\", \"test_send_many (mail.tests.FileBackendTests)\", \"test_send_unicode (mail.tests.FileBackendTests)\", \"test_send_verbose_name (mail.tests.FileBackendTests)\", \"test_use_as_contextmanager (mail.tests.FileBackendTests)\", \"test_fk_related_model_not_in_admin (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_fk_to_self_model_not_in_admin (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_proper_manager_for_label_lookup (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_relations_to_non_primary_key (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_render (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_custom_widget_render (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_no_can_add_related (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_on_delete_cascade_rel_cant_delete_related (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_select_multiple_widget_cant_change_delete_related (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_widget_delegates_value_omitted_from_data (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_widget_is_hidden (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_widget_is_not_hidden (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_actual_expiry (sessions_tests.tests.DatabaseSessionTests)\", \"test_clear (sessions_tests.tests.DatabaseSessionTests)\", \"test_clearsessions_command (sessions_tests.tests.DatabaseSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.DatabaseSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.DatabaseSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.DatabaseSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.DatabaseSessionTests)\", \"test_cycle (sessions_tests.tests.DatabaseSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.DatabaseSessionTests)\", \"test_decode (sessions_tests.tests.DatabaseSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.DatabaseSessionTests)\", \"test_default_expiry (sessions_tests.tests.DatabaseSessionTests)\", \"test_delete (sessions_tests.tests.DatabaseSessionTests)\", \"test_flush (sessions_tests.tests.DatabaseSessionTests)\", \"test_get_empty (sessions_tests.tests.DatabaseSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.DatabaseSessionTests)\", \"test_has_key (sessions_tests.tests.DatabaseSessionTests)\", \"test_invalid_key (sessions_tests.tests.DatabaseSessionTests)\", \"test_items (sessions_tests.tests.DatabaseSessionTests)\", \"test_keys (sessions_tests.tests.DatabaseSessionTests)\", \"test_new_session (sessions_tests.tests.DatabaseSessionTests)\", \"test_pop (sessions_tests.tests.DatabaseSessionTests)\", \"test_pop_default (sessions_tests.tests.DatabaseSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.DatabaseSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.DatabaseSessionTests)\", \"test_save (sessions_tests.tests.DatabaseSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.DatabaseSessionTests)\", \"test_session_get_decoded (sessions_tests.tests.DatabaseSessionTests)\", \"test_session_key_is_read_only (sessions_tests.tests.DatabaseSessionTests)\", \"test_session_load_does_not_create_record (sessions_tests.tests.DatabaseSessionTests)\", \"test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.DatabaseSessionTests)\", \"Session repr should be the session key.\", \"test_sessionmanager_save (sessions_tests.tests.DatabaseSessionTests)\", \"test_setdefault (sessions_tests.tests.DatabaseSessionTests)\", \"test_store (sessions_tests.tests.DatabaseSessionTests)\", \"test_update (sessions_tests.tests.DatabaseSessionTests)\", \"test_values (sessions_tests.tests.DatabaseSessionTests)\", \"Empty value must stay empty after being translated (#23196).\", \"test_language_bidi (i18n.tests.TranslationTests)\", \"test_language_bidi_null (i18n.tests.TranslationTests)\", \"test_lazy_objects (i18n.tests.TranslationTests)\", \"test_lazy_pickle (i18n.tests.TranslationTests)\", \"test_legacy_aliases (i18n.tests.TranslationTests)\", \"test_maclines (i18n.tests.TranslationTests)\", \"test_ngettext_lazy (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_bool (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_format_style (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_pickle (i18n.tests.TranslationTests)\", \"test_override (i18n.tests.TranslationTests)\", \"test_override_decorator (i18n.tests.TranslationTests)\", \"test_override_exit (i18n.tests.TranslationTests)\", \"test_pgettext (i18n.tests.TranslationTests)\", \"test_plural (i18n.tests.TranslationTests)\", \"test_plural_null (i18n.tests.TranslationTests)\", \"test_safe_status (i18n.tests.TranslationTests)\", \"test_to_language (i18n.tests.TranslationTests)\", \"test_to_locale (i18n.tests.TranslationTests)\", \"test_arbitrary_keyword (mail.tests.MailTests)\", \"test_ascii (mail.tests.MailTests)\", \"test_attach_file (mail.tests.MailTests)\", \"test_attach_non_utf8_text_as_bytes (mail.tests.MailTests)\", \"test_attach_text_as_bytes (mail.tests.MailTests)\", \"test_attach_utf8_text_as_bytes (mail.tests.MailTests)\", \"Regression test for #9367\", \"test_attachments_MIMEText (mail.tests.MailTests)\", \"test_attachments_two_tuple (mail.tests.MailTests)\", \"Test backend argument of mail.get_connection()\", \"Regression test for #7722\", \"test_cc_headers (mail.tests.MailTests)\", \"test_cc_in_headers_only (mail.tests.MailTests)\", \"Test connection argument to send_mail(), et. al.\", \"Test custom backend defined in this suite.\", \"A UTF-8 charset with a custom body encoding is respected.\", \"test_dont_base64_encode (mail.tests.MailTests)\", \"test_dont_base64_encode_message_rfc822 (mail.tests.MailTests)\", \"test_dont_mangle_from_in_body (mail.tests.MailTests)\", \"test_dummy_backend (mail.tests.MailTests)\", \"test_encoding (mail.tests.MailTests)\", \"test_from_header (mail.tests.MailTests)\", \"test_header_injection (mail.tests.MailTests)\", \"test_header_omitted_for_no_to_recipients (mail.tests.MailTests)\", \"test_message_header_overrides (mail.tests.MailTests)\", \"test_multiple_message_call (mail.tests.MailTests)\", \"test_multiple_recipients (mail.tests.MailTests)\", \"Regression test for #14964\", \"test_none_body (mail.tests.MailTests)\", \"test_recipients_as_string (mail.tests.MailTests)\", \"test_recipients_as_tuple (mail.tests.MailTests)\", \"test_recipients_with_empty_strings (mail.tests.MailTests)\", \"test_reply_to (mail.tests.MailTests)\", \"test_reply_to_header (mail.tests.MailTests)\", \"test_reply_to_in_headers_only (mail.tests.MailTests)\", \"test_safe_mime_multipart (mail.tests.MailTests)\", \"test_safe_mime_multipart_with_attachments (mail.tests.MailTests)\", \"test_sanitize_address (mail.tests.MailTests)\", \"test_space_continuation (mail.tests.MailTests)\", \"test_to_header (mail.tests.MailTests)\", \"test_to_in_headers_only (mail.tests.MailTests)\", \"test_unicode_address_header (mail.tests.MailTests)\", \"test_unicode_headers (mail.tests.MailTests)\", \"test_actual_expiry (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_clear (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_clearsessions_command (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_cycle (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_decode (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_default_expiry (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_delete (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_extra_session_field (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_flush (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_get_empty (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_has_key (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_invalid_key (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_items (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_keys (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_new_session (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_pop (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_pop_default (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_save (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_session_get_decoded (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_session_key_is_read_only (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_session_load_does_not_create_record (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_sessionmanager_save (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_setdefault (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_store (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_update (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_values (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_actual_expiry (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_clear (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_clearsessions_command (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_custom_expiry_reset (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_cycle (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_decode (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_default_expiry (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_delete (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_flush (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_get_empty (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_has_key (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_invalid_key (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_items (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_keys (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_new_session (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_pop (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_pop_default (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_pop_default_named_argument (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_save (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_session_get_decoded (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_session_key_is_read_only (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_session_load_does_not_create_record (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_sessionmanager_save (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_setdefault (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_store (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_update (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_values (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_fail_silently_on_connection_error (mail.tests.SMTPBackendStoppedServerTests)\", \"test_server_stopped (mail.tests.SMTPBackendStoppedServerTests)\", \"test_invalid_image (files.tests.GetImageDimensionsTests)\", \"test_valid_image (files.tests.GetImageDimensionsTests)\", \"test_webp (files.tests.GetImageDimensionsTests)\", \"test_cookie_not_reset_on_accepted_request (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_csrf_token_in_header (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_csrf_token_in_header_with_customized_name (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_ensures_csrf_cookie_no_logging (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_ensures_csrf_cookie_with_middleware (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_get_token_for_exempt_view (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_get_token_for_requires_csrf_token_view (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_https_bad_referer (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_https_csrf_trusted_origin_allowed (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_https_csrf_wildcard_trusted_origin_allowed (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_https_good_referer (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_https_good_referer_2 (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_https_good_referer_behind_proxy (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_https_good_referer_matches_cookie_domain (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_https_good_referer_matches_cookie_domain_with_different_port (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_https_malformed_host (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_https_malformed_referer (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_https_reject_insecure_referer (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_no_session_on_request (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_post_data_read_failure (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_process_request_csrf_cookie_and_token (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_process_request_csrf_cookie_no_token (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_process_request_csrf_cookie_no_token_exempt_view (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_process_request_no_csrf_cookie (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_process_response_get_token_not_used (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"The ensure_csrf_cookie() decorator works without middleware.\", \"test_put_and_delete_allowed (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_put_and_delete_rejected (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"The session isn't saved if the CSRF cookie is unchanged.\", \"test_token_node_empty_csrf_cookie (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_token_node_no_csrf_cookie (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_token_node_with_csrf_cookie (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_token_node_with_new_csrf_cookie (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_bare_secret_accepted_and_replaced (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_cookie_not_reset_on_accepted_request (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_csrf_cookie_age (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_csrf_cookie_age_none (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_csrf_cookie_samesite (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_csrf_token_in_header (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_csrf_token_in_header_with_customized_name (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_ensures_csrf_cookie_no_logging (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_ensures_csrf_cookie_no_middleware (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_ensures_csrf_cookie_with_middleware (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_get_token_for_exempt_view (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_get_token_for_requires_csrf_token_view (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_https_bad_referer (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_https_csrf_trusted_origin_allowed (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_https_csrf_wildcard_trusted_origin_allowed (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_https_good_referer (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_https_good_referer_2 (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_https_good_referer_behind_proxy (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_https_good_referer_matches_cookie_domain (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_https_good_referer_matches_cookie_domain_with_different_port (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_https_malformed_host (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_https_malformed_referer (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_https_reject_insecure_referer (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_post_data_read_failure (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_process_request_csrf_cookie_and_token (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_process_request_csrf_cookie_no_token (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_process_request_csrf_cookie_no_token_exempt_view (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_process_request_no_csrf_cookie (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_process_response_get_token_not_used (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_process_view_token_invalid_chars (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_process_view_token_too_long (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_put_and_delete_allowed (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_put_and_delete_rejected (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_token_node_empty_csrf_cookie (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_token_node_no_csrf_cookie (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_token_node_with_csrf_cookie (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_token_node_with_new_csrf_cookie (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_cache_key_i18n_formatting (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_timezone (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_translation (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_translation_accept_language (cache.tests.CacheI18nTest)\", \"test_cache_key_no_i18n (cache.tests.CacheI18nTest)\", \"test_middleware (cache.tests.CacheI18nTest)\", \"test_middleware_doesnt_cache_streaming_response (cache.tests.CacheI18nTest)\", \"test_base_url (file_storage.tests.CustomStorageTests)\", \"test_custom_get_available_name (file_storage.tests.CustomStorageTests)\", \"test_delete_deletes_directories (file_storage.tests.CustomStorageTests)\", \"test_delete_no_name (file_storage.tests.CustomStorageTests)\", \"test_empty_location (file_storage.tests.CustomStorageTests)\", \"test_file_access_options (file_storage.tests.CustomStorageTests)\", \"test_file_chunks_error (file_storage.tests.CustomStorageTests)\", \"test_file_get_accessed_time (file_storage.tests.CustomStorageTests)\", \"test_file_get_accessed_time_timezone (file_storage.tests.CustomStorageTests)\", \"test_file_get_created_time (file_storage.tests.CustomStorageTests)\", \"test_file_get_created_time_timezone (file_storage.tests.CustomStorageTests)\", \"test_file_get_modified_time (file_storage.tests.CustomStorageTests)\", \"test_file_get_modified_time_timezone (file_storage.tests.CustomStorageTests)\", \"test_file_path (file_storage.tests.CustomStorageTests)\", \"test_file_save_with_path (file_storage.tests.CustomStorageTests)\", \"test_file_save_without_name (file_storage.tests.CustomStorageTests)\", \"The storage backend should preserve case of filenames.\", \"test_file_storage_prevents_directory_traversal (file_storage.tests.CustomStorageTests)\", \"test_file_url (file_storage.tests.CustomStorageTests)\", \"test_listdir (file_storage.tests.CustomStorageTests)\", \"test_makedirs_race_handling (file_storage.tests.CustomStorageTests)\", \"test_remove_race_handling (file_storage.tests.CustomStorageTests)\", \"test_save_doesnt_close (file_storage.tests.CustomStorageTests)\", \"test_setting_changed (file_storage.tests.CustomStorageTests)\", \"test_cache_key_i18n_formatting (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_timezone (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_translation (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_translation_accept_language (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_no_i18n (cache.tests.PrefixedCacheI18nTest)\", \"test_middleware (cache.tests.PrefixedCacheI18nTest)\", \"test_middleware_doesnt_cache_streaming_response (cache.tests.PrefixedCacheI18nTest)\", \"test_base_url (file_storage.tests.OverwritingStorageTests)\", \"test_delete_deletes_directories (file_storage.tests.OverwritingStorageTests)\", \"test_delete_no_name (file_storage.tests.OverwritingStorageTests)\", \"test_empty_location (file_storage.tests.OverwritingStorageTests)\", \"test_file_access_options (file_storage.tests.OverwritingStorageTests)\", \"test_file_chunks_error (file_storage.tests.OverwritingStorageTests)\", \"test_file_get_accessed_time (file_storage.tests.OverwritingStorageTests)\", \"test_file_get_accessed_time_timezone (file_storage.tests.OverwritingStorageTests)\", \"test_file_get_created_time (file_storage.tests.OverwritingStorageTests)\", \"test_file_get_created_time_timezone (file_storage.tests.OverwritingStorageTests)\", \"test_file_get_modified_time (file_storage.tests.OverwritingStorageTests)\", \"test_file_get_modified_time_timezone (file_storage.tests.OverwritingStorageTests)\", \"test_file_path (file_storage.tests.OverwritingStorageTests)\", \"test_file_save_with_path (file_storage.tests.OverwritingStorageTests)\", \"test_file_save_without_name (file_storage.tests.OverwritingStorageTests)\", \"test_file_storage_prevents_directory_traversal (file_storage.tests.OverwritingStorageTests)\", \"test_file_url (file_storage.tests.OverwritingStorageTests)\", \"test_listdir (file_storage.tests.OverwritingStorageTests)\", \"test_makedirs_race_handling (file_storage.tests.OverwritingStorageTests)\", \"test_remove_race_handling (file_storage.tests.OverwritingStorageTests)\", \"test_save_doesnt_close (file_storage.tests.OverwritingStorageTests)\", \"Saving to same file name twice overwrites the first file.\", \"test_setting_changed (file_storage.tests.OverwritingStorageTests)\", \"test_base_url (file_storage.tests.FileStorageTests)\", \"test_delete_deletes_directories (file_storage.tests.FileStorageTests)\", \"test_delete_no_name (file_storage.tests.FileStorageTests)\", \"test_empty_location (file_storage.tests.FileStorageTests)\", \"test_file_access_options (file_storage.tests.FileStorageTests)\", \"test_file_chunks_error (file_storage.tests.FileStorageTests)\", \"test_file_get_accessed_time (file_storage.tests.FileStorageTests)\", \"test_file_get_accessed_time_timezone (file_storage.tests.FileStorageTests)\", \"test_file_get_created_time (file_storage.tests.FileStorageTests)\", \"test_file_get_created_time_timezone (file_storage.tests.FileStorageTests)\", \"test_file_get_modified_time (file_storage.tests.FileStorageTests)\", \"test_file_get_modified_time_timezone (file_storage.tests.FileStorageTests)\", \"test_file_path (file_storage.tests.FileStorageTests)\", \"test_file_save_with_path (file_storage.tests.FileStorageTests)\", \"test_file_save_without_name (file_storage.tests.FileStorageTests)\", \"test_file_storage_prevents_directory_traversal (file_storage.tests.FileStorageTests)\", \"test_file_url (file_storage.tests.FileStorageTests)\", \"test_listdir (file_storage.tests.FileStorageTests)\", \"test_makedirs_race_handling (file_storage.tests.FileStorageTests)\", \"test_remove_race_handling (file_storage.tests.FileStorageTests)\", \"test_save_doesnt_close (file_storage.tests.FileStorageTests)\", \"test_setting_changed (file_storage.tests.FileStorageTests)\", \"test_base_url (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_custom_storage_discarding_empty_content (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_delete_deletes_directories (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_delete_no_name (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_empty_location (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_access_options (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_chunks_error (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_get_accessed_time (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_get_accessed_time_timezone (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_get_created_time (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_get_created_time_timezone (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_get_modified_time (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_get_modified_time_timezone (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_path (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_save_with_path (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_save_without_name (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_storage_prevents_directory_traversal (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_url (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_listdir (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_makedirs_race_handling (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_remove_race_handling (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_save_doesnt_close (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_setting_changed (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_csrf_token_on_404_stays_constant (csrf_tests.tests.CsrfInErrorHandlingViewsTests)\", \"test_filter_choices_by_request_user (admin_widgets.tests.AdminFormfieldForDBFieldWithRequestTests)\", \"test_changelist_ForeignKey (admin_widgets.tests.AdminForeignKeyWidgetChangeList)\", \"test_readonly_fields (admin_widgets.tests.AdminFileWidgetTests)\", \"test_render (admin_widgets.tests.AdminFileWidgetTests)\", \"test_render_required (admin_widgets.tests.AdminFileWidgetTests)\", \"test_invalid_target_id (admin_widgets.tests.AdminForeignKeyRawIdWidget)\", \"test_label_and_url_for_value_invalid_uuid (admin_widgets.tests.AdminForeignKeyRawIdWidget)\", \"test_nonexistent_target_id (admin_widgets.tests.AdminForeignKeyRawIdWidget)\", \"test_url_params_from_lookup_dict_any_iterable (admin_widgets.tests.AdminForeignKeyRawIdWidget)\", \"test_url_params_from_lookup_dict_callable (admin_widgets.tests.AdminForeignKeyRawIdWidget)\", \"test_live_server_url_is_class_property (servers.tests.LiveServerAddress)\", \"test_urllib_request_urlopen (file_storage.tests.FileLikeObjectTestCase)\", \"test_base64_upload (file_uploads.tests.FileUploadTests)\", \"test_big_base64_newlines_upload (file_uploads.tests.FileUploadTests)\", \"test_big_base64_upload (file_uploads.tests.FileUploadTests)\", \"test_blank_filenames (file_uploads.tests.FileUploadTests)\", \"test_broken_custom_upload_handler (file_uploads.tests.FileUploadTests)\", \"Uploaded files may have content type parameters available.\", \"test_custom_upload_handler (file_uploads.tests.FileUploadTests)\", \"Uploaded file names should be sanitized before ever reaching the view.\", \"test_empty_multipart_handled_gracefully (file_uploads.tests.FileUploadTests)\", \"test_file_content (file_uploads.tests.FileUploadTests)\", \"test_file_error_blocking (file_uploads.tests.FileUploadTests)\", \"test_filename_case_preservation (file_uploads.tests.FileUploadTests)\", \"File names over 256 characters (dangerous on some platforms) get fixed up.\", \"test_fileupload_getlist (file_uploads.tests.FileUploadTests)\", \"test_fileuploads_closed_at_request_end (file_uploads.tests.FileUploadTests)\", \"test_large_upload (file_uploads.tests.FileUploadTests)\", \"test_no_parsing_triggered_by_fd_closing (file_uploads.tests.FileUploadTests)\", \"test_simple_upload (file_uploads.tests.FileUploadTests)\", \"test_truncated_multipart_handled_gracefully (file_uploads.tests.FileUploadTests)\", \"test_unicode_file_name (file_uploads.tests.FileUploadTests)\", \"test_unicode_file_name_rfc2231 (file_uploads.tests.FileUploadTests)\", \"test_unicode_name_rfc2231 (file_uploads.tests.FileUploadTests)\", \"test_database_writes (servers.tests.LiveServerDatabase)\", \"test_fixtures_loaded (servers.tests.LiveServerDatabase)\", \"test_check_model_instance_from_subview (servers.tests.LiverServerThreadedTests)\", \"test_view_calls_subview (servers.tests.LiverServerThreadedTests)\", \"test_404 (servers.tests.LiveServerViews)\", \"test_closes_connection_without_content_length (servers.tests.LiveServerViews)\", \"test_environ (servers.tests.LiveServerViews)\", \"test_keep_alive_connection_clears_previous_request_data (servers.tests.LiveServerViews)\", \"test_keep_alive_on_connection_with_content_length (servers.tests.LiveServerViews)\", \"test_media_files (servers.tests.LiveServerViews)\", \"test_no_collectstatic_emulation (servers.tests.LiveServerViews)\", \"Launched server serves with HTTP 1.1.\", \"test_static_files (servers.tests.LiveServerViews)\", \"test_view (servers.tests.LiveServerViews)\", \"test_race_condition (file_storage.tests.FileSaveRaceConditionTest)\", \"test_auth_attempted (mail.tests.SMTPBackendTests)\", \"test_close_connection (mail.tests.SMTPBackendTests)\", \"The timeout parameter can be customized.\", \"The connection's timeout value is None by default.\", \"test_email_authentication_override_settings (mail.tests.SMTPBackendTests)\", \"test_email_authentication_use_settings (mail.tests.SMTPBackendTests)\", \"test_email_disabled_authentication (mail.tests.SMTPBackendTests)\", \"#23063 -- RFC-compliant messages are sent over SMTP.\", \"test_email_ssl_attempts_ssl_connection (mail.tests.SMTPBackendTests)\", \"test_email_ssl_certfile_default_disabled (mail.tests.SMTPBackendTests)\", \"test_email_ssl_certfile_override_settings (mail.tests.SMTPBackendTests)\", \"test_email_ssl_certfile_use_settings (mail.tests.SMTPBackendTests)\", \"test_email_ssl_default_disabled (mail.tests.SMTPBackendTests)\", \"test_email_ssl_keyfile_default_disabled (mail.tests.SMTPBackendTests)\", \"test_email_ssl_keyfile_override_settings (mail.tests.SMTPBackendTests)\", \"test_email_ssl_keyfile_use_settings (mail.tests.SMTPBackendTests)\", \"test_email_ssl_override_settings (mail.tests.SMTPBackendTests)\", \"test_email_ssl_use_settings (mail.tests.SMTPBackendTests)\", \"test_email_timeout_override_settings (mail.tests.SMTPBackendTests)\", \"test_email_tls_attempts_starttls (mail.tests.SMTPBackendTests)\", \"test_email_tls_default_disabled (mail.tests.SMTPBackendTests)\", \"test_email_tls_override_settings (mail.tests.SMTPBackendTests)\", \"test_email_tls_use_settings (mail.tests.SMTPBackendTests)\", \"test_empty_admins (mail.tests.SMTPBackendTests)\", \"test_idn_send (mail.tests.SMTPBackendTests)\", \"test_lazy_addresses (mail.tests.SMTPBackendTests)\", \"test_manager_and_admin_mail_prefix (mail.tests.SMTPBackendTests)\", \"test_message_cc_header (mail.tests.SMTPBackendTests)\", \"test_plaintext_send_mail (mail.tests.SMTPBackendTests)\", \"test_recipient_without_domain (mail.tests.SMTPBackendTests)\", \"test_reopen_connection (mail.tests.SMTPBackendTests)\", \"test_send (mail.tests.SMTPBackendTests)\", \"test_send_long_lines (mail.tests.SMTPBackendTests)\", \"test_send_many (mail.tests.SMTPBackendTests)\", \"test_send_messages_after_open_failed (mail.tests.SMTPBackendTests)\", \"test_send_messages_empty_list (mail.tests.SMTPBackendTests)\", \"A message isn't sent if it doesn't have any recipients.\", \"test_send_unicode (mail.tests.SMTPBackendTests)\", \"test_send_verbose_name (mail.tests.SMTPBackendTests)\", \"test_server_login (mail.tests.SMTPBackendTests)\", \"test_server_open (mail.tests.SMTPBackendTests)\", \"test_ssl_tls_mutually_exclusive (mail.tests.SMTPBackendTests)\", \"test_use_as_contextmanager (mail.tests.SMTPBackendTests)\", \"test_port_bind (servers.tests.LiveServerPort)\", \"LiveServerTestCase.port customizes the server's port.\", \"test_admin_javascript_supported_input_formats (i18n.tests.FormattingTests)\", \"test_all_format_strings (i18n.tests.FormattingTests)\", \"test_false_like_locale_formats (i18n.tests.FormattingTests)\", \"test_format_arbitrary_settings (i18n.tests.FormattingTests)\", \"test_get_custom_format (i18n.tests.FormattingTests)\", \"test_get_format_modules_lang (i18n.tests.FormattingTests)\", \"test_get_format_modules_stability (i18n.tests.FormattingTests)\", \"test_iter_format_modules (i18n.tests.FormattingTests)\", \"test_iter_format_modules_stability (i18n.tests.FormattingTests)\", \"test_l10n_disabled (i18n.tests.FormattingTests)\", \"test_l10n_enabled (i18n.tests.FormattingTests)\", \"test_locale_independent (i18n.tests.FormattingTests)\", \"test_localize_templatetag_and_filter (i18n.tests.FormattingTests)\", \"test_localized_as_text_as_hidden_input (i18n.tests.FormattingTests)\", \"test_localized_input (i18n.tests.FormattingTests)\", \"test_localized_input_func (i18n.tests.FormattingTests)\", \"test_sanitize_separators (i18n.tests.FormattingTests)\", \"test_sub_locales (i18n.tests.FormattingTests)\", \"test_304_response_has_http_caching_headers_but_not_cached (cache.tests.CacheMiddlewareTest)\", \"Responses with 'Cache-Control: private' are not cached.\", \"test_constructor (cache.tests.CacheMiddlewareTest)\", \"test_middleware (cache.tests.CacheMiddlewareTest)\", \"test_sensitive_cookie_not_cached (cache.tests.CacheMiddlewareTest)\", \"test_view_decorator (cache.tests.CacheMiddlewareTest)\", \"Add doesn't do anything in dummy cache backend\", \"clear does nothing for the dummy cache backend\", \"All data types are ignored equally by the dummy cache\", \"Dummy cache values can't be decremented\", \"Dummy cache versions can't be decremented\", \"Cache deletion is transparently ignored on the dummy cache backend\", \"delete_many does nothing for the dummy cache backend\", \"test_delete_many_invalid_key (cache.tests.DummyCacheTests)\", \"Expiration has no effect on the dummy cache\", \"get_many returns nothing for the dummy cache backend\", \"test_get_many_invalid_key (cache.tests.DummyCacheTests)\", \"test_get_or_set (cache.tests.DummyCacheTests)\", \"test_get_or_set_callable (cache.tests.DummyCacheTests)\", \"The has_key method doesn't ever return True for the dummy cache backend\", \"The in operator doesn't ever return True for the dummy cache backend\", \"Dummy cache values can't be incremented\", \"Dummy cache versions can't be incremented\", \"Nonexistent keys aren't found in the dummy cache backend\", \"set_many does nothing for the dummy cache backend\", \"test_set_many_invalid_key (cache.tests.DummyCacheTests)\", \"Dummy cache backend ignores cache set calls\", \"Dummy cache can't do touch().\", \"Unicode values are ignored by the dummy cache\", \"test_add (cache.tests.LocMemCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.LocMemCacheTests)\", \"test_binary_string (cache.tests.LocMemCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.LocMemCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_add (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_delete (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_get_set (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_has_key (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.LocMemCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.LocMemCacheTests)\", \"test_clear (cache.tests.LocMemCacheTests)\", \"test_close (cache.tests.LocMemCacheTests)\", \"test_cull (cache.tests.LocMemCacheTests)\", \"test_custom_key_func (cache.tests.LocMemCacheTests)\", \"test_data_types (cache.tests.LocMemCacheTests)\", \"test_decr (cache.tests.LocMemCacheTests)\", \"test_decr_version (cache.tests.LocMemCacheTests)\", \"test_delete (cache.tests.LocMemCacheTests)\", \"test_delete_many (cache.tests.LocMemCacheTests)\", \"test_expiration (cache.tests.LocMemCacheTests)\", \"test_float_timeout (cache.tests.LocMemCacheTests)\", \"test_forever_timeout (cache.tests.LocMemCacheTests)\", \"test_get_many (cache.tests.LocMemCacheTests)\", \"test_get_or_set (cache.tests.LocMemCacheTests)\", \"test_get_or_set_callable (cache.tests.LocMemCacheTests)\", \"test_get_or_set_callable_returning_none (cache.tests.LocMemCacheTests)\", \"test_get_or_set_racing (cache.tests.LocMemCacheTests)\", \"test_get_or_set_version (cache.tests.LocMemCacheTests)\", \"test_has_key (cache.tests.LocMemCacheTests)\", \"test_in (cache.tests.LocMemCacheTests)\", \"test_incr (cache.tests.LocMemCacheTests)\", \"incr/decr does not modify expiry time (matches memcached behavior)\", \"test_incr_version (cache.tests.LocMemCacheTests)\", \"test_invalid_key_characters (cache.tests.LocMemCacheTests)\", \"test_invalid_key_length (cache.tests.LocMemCacheTests)\", \"#20613/#18541 -- Ensures pickling is done outside of the lock.\", \"test_long_timeout (cache.tests.LocMemCacheTests)\", \"get() moves cache keys.\", \"incr() moves cache keys.\", \"set() moves cache keys.\", \"Multiple locmem caches are isolated\", \"test_prefix (cache.tests.LocMemCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.LocMemCacheTests)\", \"test_set_many (cache.tests.LocMemCacheTests)\", \"test_set_many_expiration (cache.tests.LocMemCacheTests)\", \"test_simple (cache.tests.LocMemCacheTests)\", \"test_touch (cache.tests.LocMemCacheTests)\", \"test_unicode (cache.tests.LocMemCacheTests)\", \"test_zero_cull (cache.tests.LocMemCacheTests)\", \"test_zero_timeout (cache.tests.LocMemCacheTests)\", \"test_add (cache.tests.FileBasedCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.FileBasedCacheTests)\", \"test_binary_string (cache.tests.FileBasedCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.FileBasedCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_add (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_delete (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_get_set (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_has_key (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.FileBasedCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.FileBasedCacheTests)\", \"test_clear (cache.tests.FileBasedCacheTests)\", \"test_clear_does_not_remove_cache_dir (cache.tests.FileBasedCacheTests)\", \"test_close (cache.tests.FileBasedCacheTests)\", \"test_creates_cache_dir_if_nonexistent (cache.tests.FileBasedCacheTests)\", \"test_cull (cache.tests.FileBasedCacheTests)\", \"test_custom_key_func (cache.tests.FileBasedCacheTests)\", \"test_data_types (cache.tests.FileBasedCacheTests)\", \"test_decr (cache.tests.FileBasedCacheTests)\", \"test_decr_version (cache.tests.FileBasedCacheTests)\", \"test_delete (cache.tests.FileBasedCacheTests)\", \"test_delete_many (cache.tests.FileBasedCacheTests)\", \"test_empty_cache_file_considered_expired (cache.tests.FileBasedCacheTests)\", \"test_expiration (cache.tests.FileBasedCacheTests)\", \"test_float_timeout (cache.tests.FileBasedCacheTests)\", \"test_forever_timeout (cache.tests.FileBasedCacheTests)\", \"test_get_does_not_ignore_non_filenotfound_exceptions (cache.tests.FileBasedCacheTests)\", \"test_get_ignores_enoent (cache.tests.FileBasedCacheTests)\", \"test_get_many (cache.tests.FileBasedCacheTests)\", \"test_get_or_set (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_callable (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_callable_returning_none (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_racing (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_version (cache.tests.FileBasedCacheTests)\", \"test_has_key (cache.tests.FileBasedCacheTests)\", \"test_ignores_non_cache_files (cache.tests.FileBasedCacheTests)\", \"test_in (cache.tests.FileBasedCacheTests)\", \"test_incr (cache.tests.FileBasedCacheTests)\", \"test_incr_version (cache.tests.FileBasedCacheTests)\", \"test_invalid_key_characters (cache.tests.FileBasedCacheTests)\", \"test_invalid_key_length (cache.tests.FileBasedCacheTests)\", \"test_long_timeout (cache.tests.FileBasedCacheTests)\", \"test_prefix (cache.tests.FileBasedCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.FileBasedCacheTests)\", \"test_set_many (cache.tests.FileBasedCacheTests)\", \"test_set_many_expiration (cache.tests.FileBasedCacheTests)\", \"test_simple (cache.tests.FileBasedCacheTests)\", \"test_touch (cache.tests.FileBasedCacheTests)\", \"test_unicode (cache.tests.FileBasedCacheTests)\", \"test_zero_cull (cache.tests.FileBasedCacheTests)\", \"test_zero_timeout (cache.tests.FileBasedCacheTests)\", \"test_add (cache.tests.DBCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.DBCacheTests)\", \"test_binary_string (cache.tests.DBCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.DBCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheTests)\", \"test_cache_versioning_add (cache.tests.DBCacheTests)\", \"test_cache_versioning_delete (cache.tests.DBCacheTests)\", \"test_cache_versioning_get_set (cache.tests.DBCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.DBCacheTests)\", \"test_cache_versioning_has_key (cache.tests.DBCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.DBCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.DBCacheTests)\", \"test_clear (cache.tests.DBCacheTests)\", \"test_close (cache.tests.DBCacheTests)\", \"test_createcachetable_dry_run_mode (cache.tests.DBCacheTests)\", \"test_createcachetable_with_table_argument (cache.tests.DBCacheTests)\", \"test_cull (cache.tests.DBCacheTests)\", \"test_custom_key_func (cache.tests.DBCacheTests)\", \"test_data_types (cache.tests.DBCacheTests)\", \"test_decr (cache.tests.DBCacheTests)\", \"test_decr_version (cache.tests.DBCacheTests)\", \"test_delete (cache.tests.DBCacheTests)\", \"test_delete_many (cache.tests.DBCacheTests)\", \"test_delete_many_num_queries (cache.tests.DBCacheTests)\", \"test_expiration (cache.tests.DBCacheTests)\", \"test_float_timeout (cache.tests.DBCacheTests)\", \"test_forever_timeout (cache.tests.DBCacheTests)\", \"test_get_many (cache.tests.DBCacheTests)\", \"test_get_many_num_queries (cache.tests.DBCacheTests)\", \"test_get_or_set (cache.tests.DBCacheTests)\", \"test_get_or_set_callable (cache.tests.DBCacheTests)\", \"test_get_or_set_callable_returning_none (cache.tests.DBCacheTests)\", \"test_get_or_set_racing (cache.tests.DBCacheTests)\", \"test_get_or_set_version (cache.tests.DBCacheTests)\", \"test_has_key (cache.tests.DBCacheTests)\", \"test_in (cache.tests.DBCacheTests)\", \"test_incr (cache.tests.DBCacheTests)\", \"test_incr_version (cache.tests.DBCacheTests)\", \"test_invalid_key_characters (cache.tests.DBCacheTests)\", \"test_invalid_key_length (cache.tests.DBCacheTests)\", \"test_long_timeout (cache.tests.DBCacheTests)\", \"test_prefix (cache.tests.DBCacheTests)\", \"test_second_call_doesnt_crash (cache.tests.DBCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.DBCacheTests)\", \"test_set_many (cache.tests.DBCacheTests)\", \"test_set_many_expiration (cache.tests.DBCacheTests)\", \"test_simple (cache.tests.DBCacheTests)\", \"test_touch (cache.tests.DBCacheTests)\", \"test_unicode (cache.tests.DBCacheTests)\", \"test_zero_cull (cache.tests.DBCacheTests)\", \"test_zero_timeout (cache.tests.DBCacheTests)\", \"test_add (cache.tests.DBCacheWithTimeZoneTests)\", \"test_add_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)\", \"test_binary_string (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_read_for_model_instance (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_add (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_delete (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_get_set (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_get_set_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_has_key (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_incr_decr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_write_unpicklable_object (cache.tests.DBCacheWithTimeZoneTests)\", \"test_clear (cache.tests.DBCacheWithTimeZoneTests)\", \"test_close (cache.tests.DBCacheWithTimeZoneTests)\", \"test_createcachetable_dry_run_mode (cache.tests.DBCacheWithTimeZoneTests)\", \"test_createcachetable_with_table_argument (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cull (cache.tests.DBCacheWithTimeZoneTests)\", \"test_custom_key_func (cache.tests.DBCacheWithTimeZoneTests)\", \"test_data_types (cache.tests.DBCacheWithTimeZoneTests)\", \"test_decr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_decr_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)\", \"test_expiration (cache.tests.DBCacheWithTimeZoneTests)\", \"test_float_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_forever_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_callable (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_callable_returning_none (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_racing (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_has_key (cache.tests.DBCacheWithTimeZoneTests)\", \"test_in (cache.tests.DBCacheWithTimeZoneTests)\", \"test_incr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_incr_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_invalid_key_characters (cache.tests.DBCacheWithTimeZoneTests)\", \"test_invalid_key_length (cache.tests.DBCacheWithTimeZoneTests)\", \"test_long_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_prefix (cache.tests.DBCacheWithTimeZoneTests)\", \"test_second_call_doesnt_crash (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_many_expiration (cache.tests.DBCacheWithTimeZoneTests)\", \"test_simple (cache.tests.DBCacheWithTimeZoneTests)\", \"test_touch (cache.tests.DBCacheWithTimeZoneTests)\", \"test_unicode (cache.tests.DBCacheWithTimeZoneTests)\", \"test_zero_cull (cache.tests.DBCacheWithTimeZoneTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.552992",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}