{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13828",
  "base_commit": "f23e92ed4cdc5a952331e597023bd2c9922e6f9d",
  "patch": "diff --git a/sklearn/cluster/affinity_propagation_.py b/sklearn/cluster/affinity_propagation_.py\n--- a/sklearn/cluster/affinity_propagation_.py\n+++ b/sklearn/cluster/affinity_propagation_.py\n@@ -364,7 +364,11 @@ def fit(self, X, y=None):\n         y : Ignored\n \n         \"\"\"\n-        X = check_array(X, accept_sparse='csr')\n+        if self.affinity == \"precomputed\":\n+            accept_sparse = False\n+        else:\n+            accept_sparse = 'csr'\n+        X = check_array(X, accept_sparse=accept_sparse)\n         if self.affinity == \"precomputed\":\n             self.affinity_matrix_ = X\n         elif self.affinity == \"euclidean\":\n",
  "test_patch": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -63,7 +63,8 @@ def test_affinity_propagation():\n     assert_raises(ValueError, affinity_propagation, S, damping=0)\n     af = AffinityPropagation(affinity=\"unknown\")\n     assert_raises(ValueError, af.fit, X)\n-\n+    af_2 = AffinityPropagation(affinity='precomputed')\n+    assert_raises(TypeError, af_2.fit, csr_matrix((3, 3)))\n \n def test_affinity_propagation_predict():\n     # Test AffinityPropagation.predict\n",
  "problem_statement": "sklearn.cluster.AffinityPropagation doesn't support sparse affinity matrix\n<!--\r\nIf your issue is a usage question, submit it here instead:\r\n- StackOverflow with the scikit-learn tag: https://stackoverflow.com/questions/tagged/scikit-learn\r\n- Mailing List: https://mail.python.org/mailman/listinfo/scikit-learn\r\nFor more information, see User Questions: http://scikit-learn.org/stable/support.html#user-questions\r\n-->\r\n\r\n<!-- Instructions For Filing a Bug: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md#filing-bugs -->\r\n\r\n#### Description\r\nsklearn.cluster.AffinityPropagation doesn't support sparse affinity matrix.\r\n<!-- Example: Joblib Error thrown when calling fit on LatentDirichletAllocation with evaluate_every > 0-->\r\nA similar question is at #4051. It focuses on default affinity.\r\n#### Steps/Code to Reproduce\r\n```python\r\nfrom sklearn.cluster import AffinityPropagation\r\nfrom scipy.sparse import csr\r\naffinity_matrix = csr.csr_matrix((3,3))\r\nAffinityPropagation(affinity='precomputed').fit(affinity_matrix)\r\n```\r\n\r\n\r\n#### Expected Results\r\nno error raised since it works for dense matrix.\r\n\r\n#### Actual Results\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"D:\\Miniconda\\lib\\site-packages\\sklearn\\cluster\\affinity_propagation_.py\", line 381, in fit\r\n    copy=self.copy, verbose=self.verbose, return_n_iter=True)\r\n  File \"D:\\Miniconda\\lib\\site-packages\\sklearn\\cluster\\affinity_propagation_.py\", line 115, in affinity_propagation\r\n    preference = np.median(S)\r\n  File \"D:\\Miniconda\\lib\\site-packages\\numpy\\lib\\function_base.py\", line 3336, in median\r\n    overwrite_input=overwrite_input)\r\n  File \"D:\\Miniconda\\lib\\site-packages\\numpy\\lib\\function_base.py\", line 3250, in _ureduce\r\n    r = func(a, **kwargs)\r\n  File \"D:\\Miniconda\\lib\\site-packages\\numpy\\lib\\function_base.py\", line 3395, in _median\r\n    return mean(part[indexer], axis=axis, out=out)\r\n  File \"D:\\Miniconda\\lib\\site-packages\\numpy\\core\\fromnumeric.py\", line 2920, in mean\r\n    out=out, **kwargs)\r\n  File \"D:\\Miniconda\\lib\\site-packages\\numpy\\core\\_methods.py\", line 85, in _mean\r\n    ret = ret.dtype.type(ret / rcount)\r\nValueError: setting an array element with a sequence.\r\n\r\n#### Versions\r\nSystem:\r\n    python: 3.6.7 |Anaconda, Inc.| (default, Oct 28 2018, 19:44:12) [MSC v.1915 64 bit (AMD64)]\r\nexecutable: D:\\Miniconda\\python.exe\r\n   machine: Windows-7-6.1.7601-SP1\r\n\r\nBLAS:\r\n    macros: SCIPY_MKL_H=None, HAVE_CBLAS=None\r\n  lib_dirs: D:/Miniconda\\Library\\lib\r\ncblas_libs: mkl_rt\r\n\r\nPython deps:\r\n       pip: 18.1\r\nsetuptools: 40.6.2\r\n   sklearn: 0.20.1\r\n     numpy: 1.15.4\r\n     scipy: 1.1.0\r\n    Cython: None\r\n    pandas: 0.23.4\r\n\r\n\r\n<!-- Thanks for contributing! -->\r\n\n",
  "hints_text": "Yes, it should be providing a better error message. A pull request doing so\nis welcome.\n\nI don't know affinity propagation well enough to comment on whether we\nshould support a sparse graph as we do with dbscan.. This is applicable\nonly when a sample's nearest neighbours are all that is required to cluster\nthe sample.\n\nFor DBSCAN algorithm, sparse distance matrix is supported.\r\nI will make a pull request to fix the support of sparse affinity matrix of Affinity Propagation.\nIt seems numpy does not support calculate the median value of a sparse matrix:\r\n```python\r\nfrom scipy.sparse import csr\r\na=csr.csr_matrix((3,3))\r\nnp.mean(a)\r\n# 0.0\r\nnp.median(a)\r\n# raise Error similar as above\r\n```\r\nHow to fix this ?\nDBSCAN supports sparse distance matrix because it depends on nearest\nneighborhoods, not on all distances.\n\nI'm not convinced this can be done.\n\nAffinity Propagation extensively use dense matrix operation in its implementation.\r\nI think of two ways to handle such situation.\r\n1. sparse matrix be converted to dense in implementation \r\n2. or disallowed as input when affinity = 'precomputed'\nThe latter. A sparse distance matrix is a representation of a sparsely\nconnected graph. I don't think affinity propagation can be performed on it\n\nraise an error when user provides a sparse matrix as input (when affinity = 'precomputed')?\r\n\nYes please\n",
  "created_at": "2019-05-08T10:22:32Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/cluster/tests/test_affinity_propagation.py::test_affinity_propagation\"]",
  "PASS_TO_PASS": "[\"sklearn/cluster/tests/test_affinity_propagation.py::test_affinity_propagation_predict\", \"sklearn/cluster/tests/test_affinity_propagation.py::test_affinity_propagation_predict_error\", \"sklearn/cluster/tests/test_affinity_propagation.py::test_affinity_propagation_fit_non_convergence\", \"sklearn/cluster/tests/test_affinity_propagation.py::test_affinity_propagation_equal_mutual_similarities\", \"sklearn/cluster/tests/test_affinity_propagation.py::test_affinity_propagation_predict_non_convergence\", \"sklearn/cluster/tests/test_affinity_propagation.py::test_equal_similarities_and_preferences\", \"sklearn/cluster/tests/test_affinity_propagation.py::test_affinity_propagation_convergence_warning_dense_sparse[centers0]\", \"sklearn/cluster/tests/test_affinity_propagation.py::test_affinity_propagation_convergence_warning_dense_sparse[centers1]\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.998872",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}