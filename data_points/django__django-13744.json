{
  "repo": "django/django",
  "instance_id": "django__django-13744",
  "base_commit": "d8dfff2ab0edf7a1ca5255eccf45c447b2f9d57e",
  "patch": "diff --git a/django/core/cache/__init__.py b/django/core/cache/__init__.py\n--- a/django/core/cache/__init__.py\n+++ b/django/core/cache/__init__.py\n@@ -114,9 +114,8 @@ def __eq__(self, other):\n \n \n def close_caches(**kwargs):\n-    # Some caches -- python-memcached in particular -- need to do a cleanup at the\n-    # end of a request cycle. If not implemented in a particular backend\n-    # cache.close is a no-op\n+    # Some caches need to do a cleanup at the end of a request cycle. If not\n+    # implemented in a particular backend cache.close() is a no-op.\n     for cache in caches.all():\n         cache.close()\n \ndiff --git a/django/core/cache/backends/memcached.py b/django/core/cache/backends/memcached.py\n--- a/django/core/cache/backends/memcached.py\n+++ b/django/core/cache/backends/memcached.py\n@@ -3,10 +3,12 @@\n import pickle\n import re\n import time\n+import warnings\n \n from django.core.cache.backends.base import (\n     DEFAULT_TIMEOUT, BaseCache, InvalidCacheKey, memcache_key_warnings,\n )\n+from django.utils.deprecation import RemovedInDjango41Warning\n from django.utils.functional import cached_property\n \n \n@@ -164,6 +166,11 @@ def validate_key(self, key):\n class MemcachedCache(BaseMemcachedCache):\n     \"An implementation of a cache binding using python-memcached\"\n     def __init__(self, server, params):\n+        warnings.warn(\n+            'MemcachedCache is deprecated in favor of PyMemcacheCache and '\n+            'PyLibMCCache.',\n+            RemovedInDjango41Warning, stacklevel=2,\n+        )\n         # python-memcached ≥ 1.45 returns None for a nonexistent key in\n         # incr/decr(), python-memcached < 1.45 raises ValueError.\n         import memcache\n",
  "test_patch": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -11,6 +11,7 @@\n import threading\n import time\n import unittest\n+import warnings\n from pathlib import Path\n from unittest import mock, skipIf\n \n@@ -34,13 +35,14 @@\n from django.template.response import TemplateResponse\n from django.test import (\n     RequestFactory, SimpleTestCase, TestCase, TransactionTestCase,\n-    override_settings,\n+    ignore_warnings, override_settings,\n )\n from django.test.signals import setting_changed\n from django.utils import timezone, translation\n from django.utils.cache import (\n     get_cache_key, learn_cache_key, patch_cache_control, patch_vary_headers,\n )\n+from django.utils.deprecation import RemovedInDjango41Warning\n from django.views.decorators.cache import cache_control, cache_page\n \n from .models import Poll, expensive_calculation\n@@ -1275,7 +1277,6 @@ def test_lru_incr(self):\n for _cache_params in settings.CACHES.values():\n     configured_caches[_cache_params['BACKEND']] = _cache_params\n \n-MemcachedCache_params = configured_caches.get('django.core.cache.backends.memcached.MemcachedCache')\n PyLibMCCache_params = configured_caches.get('django.core.cache.backends.memcached.PyLibMCCache')\n PyMemcacheCache_params = configured_caches.get('django.core.cache.backends.memcached.PyMemcacheCache')\n \n@@ -1348,10 +1349,7 @@ def test_memcached_deletes_key_on_failed_set(self):\n         # By default memcached allows objects up to 1MB. For the cache_db session\n         # backend to always use the current session, memcached needs to delete\n         # the old key if it fails to set.\n-        # pylibmc doesn't seem to have SERVER_MAX_VALUE_LENGTH as far as I can\n-        # tell from a quick check of its source code. This is falling back to\n-        # the default value exposed by python-memcached on my system.\n-        max_value_length = getattr(cache._lib, 'SERVER_MAX_VALUE_LENGTH', 1048576)\n+        max_value_length = 2 ** 20\n \n         cache.set('small_value', 'a')\n         self.assertEqual(cache.get('small_value'), 'a')\n@@ -1360,11 +1358,10 @@ def test_memcached_deletes_key_on_failed_set(self):\n         try:\n             cache.set('small_value', large_value)\n         except Exception:\n-            # Some clients (e.g. pylibmc) raise when the value is too large,\n-            # while others (e.g. python-memcached) intentionally return True\n-            # indicating success. This test is primarily checking that the key\n-            # was deleted, so the return/exception behavior for the set()\n-            # itself is not important.\n+            # Most clients (e.g. pymemcache or pylibmc) raise when the value is\n+            # too large. This test is primarily checking that the key was\n+            # deleted, so the return/exception behavior for the set() itself is\n+            # not important.\n             pass\n         # small_value should be deleted, or set if configured to accept larger values\n         value = cache.get('small_value')\n@@ -1389,6 +1386,11 @@ def fail_set_multi(mapping, *args, **kwargs):\n             self.assertEqual(failing_keys, ['key'])\n \n \n+# RemovedInDjango41Warning.\n+MemcachedCache_params = configured_caches.get('django.core.cache.backends.memcached.MemcachedCache')\n+\n+\n+@ignore_warnings(category=RemovedInDjango41Warning)\n @unittest.skipUnless(MemcachedCache_params, \"MemcachedCache backend not configured\")\n @override_settings(CACHES=caches_setting_for_tests(\n     base=MemcachedCache_params,\n@@ -1420,6 +1422,32 @@ def test_default_used_when_none_is_set(self):\n         self.assertEqual(cache.get('key_default_none', default='default'), 'default')\n \n \n+class MemcachedCacheDeprecationTests(SimpleTestCase):\n+    def test_warning(self):\n+        from django.core.cache.backends.memcached import MemcachedCache\n+\n+        # Remove warnings filter on MemcachedCache deprecation warning, added\n+        # in runtests.py.\n+        warnings.filterwarnings(\n+            'error',\n+            'MemcachedCache is deprecated',\n+            category=RemovedInDjango41Warning,\n+        )\n+        try:\n+            msg = (\n+                'MemcachedCache is deprecated in favor of PyMemcacheCache and '\n+                'PyLibMCCache.'\n+            )\n+            with self.assertRaisesMessage(RemovedInDjango41Warning, msg):\n+                MemcachedCache('127.0.0.1:11211', {})\n+        finally:\n+            warnings.filterwarnings(\n+                'ignore',\n+                'MemcachedCache is deprecated',\n+                category=RemovedInDjango41Warning,\n+            )\n+\n+\n @unittest.skipUnless(PyLibMCCache_params, \"PyLibMCCache backend not configured\")\n @override_settings(CACHES=caches_setting_for_tests(\n     base=PyLibMCCache_params,\ndiff --git a/tests/requirements/py3.txt b/tests/requirements/py3.txt\n--- a/tests/requirements/py3.txt\n+++ b/tests/requirements/py3.txt\n@@ -9,6 +9,7 @@ Pillow >= 6.2.0\n # pylibmc/libmemcached can't be built on Windows.\n pylibmc; sys.platform != 'win32'\n pymemcache >= 3.4.0\n+# RemovedInDjango41Warning.\n python-memcached >= 1.59\n pytz\n pywatchman; sys.platform != 'win32'\ndiff --git a/tests/runtests.py b/tests/runtests.py\n--- a/tests/runtests.py\n+++ b/tests/runtests.py\n@@ -47,6 +47,12 @@\n warnings.simplefilter(\"error\", RuntimeWarning)\n # Ignore known warnings in test dependencies.\n warnings.filterwarnings(\"ignore\", \"'U' mode is deprecated\", DeprecationWarning, module='docutils.io')\n+# RemovedInDjango41Warning: Ignore MemcachedCache deprecation warning.\n+warnings.filterwarnings(\n+    'ignore',\n+    'MemcachedCache is deprecated',\n+    category=RemovedInDjango41Warning,\n+)\n \n RUNTESTS_DIR = os.path.abspath(os.path.dirname(__file__))\n \n",
  "problem_statement": "Deprecate MemcachedCache.\nDescription\n\t\npython-memcached is not maintained anymore (see ​python-memcached#95) and it makes difficulties in fixing some issues (e.g. #29867). Moreover we added a cache backend for pymemcache (#29887) so we have a good builtin alternative.\nI think it's time to deprecate the django.core.cache.backends.memcached.MemcachedCache backend in Django 3.2 and remove it in Django 4.1.\n",
  "hints_text": "​Mailing list discussion\nI'm going to accept this. We can give it a few weeks to see if there's any objections/movement on python-memcached.",
  "created_at": "2020-12-03T08:23:13Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_warning (cache.tests.MemcachedCacheDeprecationTests)\"]",
  "PASS_TO_PASS": "[\"If None is cached, get() returns it instead of the default.\", \"Nonexistent cache keys return as None/default.\", \"set_many() returns an empty list when all keys are inserted.\", \"test_createcachetable_observes_database_router (cache.tests.CreateCacheTableForDBCacheTests)\", \"test_per_thread (cache.tests.CacheHandlerTest)\", \"test_same_instance (cache.tests.CacheHandlerTest)\", \"test_long_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_proper_escaping (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_ints_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_many_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_one_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_unicode_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_without_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"Memory caches that have the TIMEOUT parameter set to `None` in the\", \"Memory caches that have the TIMEOUT parameter set to `None` will set\", \"Caches that have the TIMEOUT parameter undefined in the default\", \"Memory caches that have the TIMEOUT parameter unset will set cache\", \"The default expiration time of a cache key is 5 minutes.\", \"test_cache_key_varies_by_url (cache.tests.PrefixedCacheUtils)\", \"test_get_cache_key (cache.tests.PrefixedCacheUtils)\", \"test_get_cache_key_with_query (cache.tests.PrefixedCacheUtils)\", \"test_learn_cache_key (cache.tests.PrefixedCacheUtils)\", \"test_patch_cache_control (cache.tests.PrefixedCacheUtils)\", \"test_patch_vary_headers (cache.tests.PrefixedCacheUtils)\", \"test_cache_key_varies_by_url (cache.tests.CacheUtils)\", \"test_get_cache_key (cache.tests.CacheUtils)\", \"test_get_cache_key_with_query (cache.tests.CacheUtils)\", \"test_learn_cache_key (cache.tests.CacheUtils)\", \"test_patch_cache_control (cache.tests.CacheUtils)\", \"test_patch_vary_headers (cache.tests.CacheUtils)\", \"test_get_cache_key (cache.tests.TestWithTemplateResponse)\", \"test_get_cache_key_with_query (cache.tests.TestWithTemplateResponse)\", \"test_patch_vary_headers (cache.tests.TestWithTemplateResponse)\", \"test_close (cache.tests.CacheClosingTests)\", \"test_head_caches_correctly (cache.tests.CacheHEADTest)\", \"test_head_with_cached_get (cache.tests.CacheHEADTest)\", \"test_custom_key_validation (cache.tests.CustomCacheKeyValidationTests)\", \"test_cache_key_i18n_timezone (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_translation (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_translation_accept_language (cache.tests.CacheI18nTest)\", \"test_cache_key_no_i18n (cache.tests.CacheI18nTest)\", \"test_middleware (cache.tests.CacheI18nTest)\", \"test_middleware_doesnt_cache_streaming_response (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_timezone (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_translation (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_translation_accept_language (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_no_i18n (cache.tests.PrefixedCacheI18nTest)\", \"test_middleware (cache.tests.PrefixedCacheI18nTest)\", \"test_middleware_doesnt_cache_streaming_response (cache.tests.PrefixedCacheI18nTest)\", \"Add doesn't do anything in dummy cache backend\", \"clear does nothing for the dummy cache backend\", \"All data types are ignored equally by the dummy cache\", \"Dummy cache values can't be decremented\", \"Dummy cache versions can't be decremented\", \"Cache deletion is transparently ignored on the dummy cache backend\", \"delete_many does nothing for the dummy cache backend\", \"test_delete_many_invalid_key (cache.tests.DummyCacheTests)\", \"Expiration has no effect on the dummy cache\", \"get_many returns nothing for the dummy cache backend\", \"test_get_many_invalid_key (cache.tests.DummyCacheTests)\", \"test_get_or_set (cache.tests.DummyCacheTests)\", \"test_get_or_set_callable (cache.tests.DummyCacheTests)\", \"The has_key method doesn't ever return True for the dummy cache backend\", \"The in operator doesn't ever return True for the dummy cache backend\", \"Dummy cache values can't be incremented\", \"Dummy cache versions can't be incremented\", \"Nonexistent keys aren't found in the dummy cache backend\", \"set_many does nothing for the dummy cache backend\", \"test_set_many_invalid_key (cache.tests.DummyCacheTests)\", \"Dummy cache backend ignores cache set calls\", \"Dummy cache can't do touch().\", \"Unicode values are ignored by the dummy cache\", \"test_304_response_has_http_caching_headers_but_not_cached (cache.tests.CacheMiddlewareTest)\", \"test_cache_page_timeout (cache.tests.CacheMiddlewareTest)\", \"Responses with 'Cache-Control: private' are not cached.\", \"test_constructor (cache.tests.CacheMiddlewareTest)\", \"test_fetch_cache_middleware_constructor (cache.tests.CacheMiddlewareTest)\", \"test_middleware (cache.tests.CacheMiddlewareTest)\", \"test_sensitive_cookie_not_cached (cache.tests.CacheMiddlewareTest)\", \"test_update_cache_middleware_constructor (cache.tests.CacheMiddlewareTest)\", \"test_view_decorator (cache.tests.CacheMiddlewareTest)\", \"test_add (cache.tests.LocMemCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.LocMemCacheTests)\", \"test_binary_string (cache.tests.LocMemCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.LocMemCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_add (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_delete (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_get_set (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_has_key (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.LocMemCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.LocMemCacheTests)\", \"test_clear (cache.tests.LocMemCacheTests)\", \"test_close (cache.tests.LocMemCacheTests)\", \"test_cull (cache.tests.LocMemCacheTests)\", \"test_cull_delete_when_store_empty (cache.tests.LocMemCacheTests)\", \"test_custom_key_func (cache.tests.LocMemCacheTests)\", \"test_data_types (cache.tests.LocMemCacheTests)\", \"test_decr (cache.tests.LocMemCacheTests)\", \"test_decr_version (cache.tests.LocMemCacheTests)\", \"test_delete (cache.tests.LocMemCacheTests)\", \"test_delete_many (cache.tests.LocMemCacheTests)\", \"test_delete_nonexistent (cache.tests.LocMemCacheTests)\", \"test_expiration (cache.tests.LocMemCacheTests)\", \"test_float_timeout (cache.tests.LocMemCacheTests)\", \"test_forever_timeout (cache.tests.LocMemCacheTests)\", \"test_get_many (cache.tests.LocMemCacheTests)\", \"test_get_or_set (cache.tests.LocMemCacheTests)\", \"test_get_or_set_callable (cache.tests.LocMemCacheTests)\", \"test_get_or_set_callable_returning_none (cache.tests.LocMemCacheTests)\", \"test_get_or_set_racing (cache.tests.LocMemCacheTests)\", \"test_get_or_set_version (cache.tests.LocMemCacheTests)\", \"test_has_key (cache.tests.LocMemCacheTests)\", \"test_in (cache.tests.LocMemCacheTests)\", \"test_incr (cache.tests.LocMemCacheTests)\", \"incr/decr does not modify expiry time (matches memcached behavior)\", \"test_incr_version (cache.tests.LocMemCacheTests)\", \"test_invalid_key_characters (cache.tests.LocMemCacheTests)\", \"test_invalid_key_length (cache.tests.LocMemCacheTests)\", \"#20613/#18541 -- Ensures pickling is done outside of the lock.\", \"test_long_timeout (cache.tests.LocMemCacheTests)\", \"get() moves cache keys.\", \"incr() moves cache keys.\", \"set() moves cache keys.\", \"Multiple locmem caches are isolated\", \"test_prefix (cache.tests.LocMemCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.LocMemCacheTests)\", \"test_set_many (cache.tests.LocMemCacheTests)\", \"test_set_many_expiration (cache.tests.LocMemCacheTests)\", \"test_simple (cache.tests.LocMemCacheTests)\", \"test_touch (cache.tests.LocMemCacheTests)\", \"test_unicode (cache.tests.LocMemCacheTests)\", \"test_zero_cull (cache.tests.LocMemCacheTests)\", \"test_zero_timeout (cache.tests.LocMemCacheTests)\", \"test_add (cache.tests.FileBasedCachePathLibTests)\", \"test_add_fail_on_pickleerror (cache.tests.FileBasedCachePathLibTests)\", \"test_binary_string (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_dir_permissions (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_read_for_model_instance (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_add (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_delete (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_get_set (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_get_set_many (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_has_key (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_incr_decr (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_write_unpicklable_object (cache.tests.FileBasedCachePathLibTests)\", \"test_clear (cache.tests.FileBasedCachePathLibTests)\", \"test_clear_does_not_remove_cache_dir (cache.tests.FileBasedCachePathLibTests)\", \"test_close (cache.tests.FileBasedCachePathLibTests)\", \"test_creates_cache_dir_if_nonexistent (cache.tests.FileBasedCachePathLibTests)\", \"test_cull (cache.tests.FileBasedCachePathLibTests)\", \"test_cull_delete_when_store_empty (cache.tests.FileBasedCachePathLibTests)\", \"test_custom_key_func (cache.tests.FileBasedCachePathLibTests)\", \"test_data_types (cache.tests.FileBasedCachePathLibTests)\", \"test_decr (cache.tests.FileBasedCachePathLibTests)\", \"test_decr_version (cache.tests.FileBasedCachePathLibTests)\", \"test_delete (cache.tests.FileBasedCachePathLibTests)\", \"test_delete_many (cache.tests.FileBasedCachePathLibTests)\", \"test_delete_nonexistent (cache.tests.FileBasedCachePathLibTests)\", \"test_empty_cache_file_considered_expired (cache.tests.FileBasedCachePathLibTests)\", \"test_expiration (cache.tests.FileBasedCachePathLibTests)\", \"test_float_timeout (cache.tests.FileBasedCachePathLibTests)\", \"test_forever_timeout (cache.tests.FileBasedCachePathLibTests)\", \"test_get_does_not_ignore_non_filenotfound_exceptions (cache.tests.FileBasedCachePathLibTests)\", \"test_get_ignores_enoent (cache.tests.FileBasedCachePathLibTests)\", \"test_get_many (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set_callable (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set_callable_returning_none (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set_racing (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set_version (cache.tests.FileBasedCachePathLibTests)\", \"test_has_key (cache.tests.FileBasedCachePathLibTests)\", \"test_ignores_non_cache_files (cache.tests.FileBasedCachePathLibTests)\", \"test_in (cache.tests.FileBasedCachePathLibTests)\", \"test_incr (cache.tests.FileBasedCachePathLibTests)\", \"test_incr_version (cache.tests.FileBasedCachePathLibTests)\", \"test_invalid_key_characters (cache.tests.FileBasedCachePathLibTests)\", \"test_invalid_key_length (cache.tests.FileBasedCachePathLibTests)\", \"test_long_timeout (cache.tests.FileBasedCachePathLibTests)\", \"test_prefix (cache.tests.FileBasedCachePathLibTests)\", \"test_set_fail_on_pickleerror (cache.tests.FileBasedCachePathLibTests)\", \"test_set_many (cache.tests.FileBasedCachePathLibTests)\", \"test_set_many_expiration (cache.tests.FileBasedCachePathLibTests)\", \"test_simple (cache.tests.FileBasedCachePathLibTests)\", \"test_touch (cache.tests.FileBasedCachePathLibTests)\", \"test_unicode (cache.tests.FileBasedCachePathLibTests)\", \"test_zero_cull (cache.tests.FileBasedCachePathLibTests)\", \"test_zero_timeout (cache.tests.FileBasedCachePathLibTests)\", \"test_add (cache.tests.FileBasedCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.FileBasedCacheTests)\", \"test_binary_string (cache.tests.FileBasedCacheTests)\", \"test_cache_dir_permissions (cache.tests.FileBasedCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.FileBasedCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_add (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_delete (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_get_set (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_has_key (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.FileBasedCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.FileBasedCacheTests)\", \"test_clear (cache.tests.FileBasedCacheTests)\", \"test_clear_does_not_remove_cache_dir (cache.tests.FileBasedCacheTests)\", \"test_close (cache.tests.FileBasedCacheTests)\", \"test_creates_cache_dir_if_nonexistent (cache.tests.FileBasedCacheTests)\", \"test_cull (cache.tests.FileBasedCacheTests)\", \"test_cull_delete_when_store_empty (cache.tests.FileBasedCacheTests)\", \"test_custom_key_func (cache.tests.FileBasedCacheTests)\", \"test_data_types (cache.tests.FileBasedCacheTests)\", \"test_decr (cache.tests.FileBasedCacheTests)\", \"test_decr_version (cache.tests.FileBasedCacheTests)\", \"test_delete (cache.tests.FileBasedCacheTests)\", \"test_delete_many (cache.tests.FileBasedCacheTests)\", \"test_delete_nonexistent (cache.tests.FileBasedCacheTests)\", \"test_empty_cache_file_considered_expired (cache.tests.FileBasedCacheTests)\", \"test_expiration (cache.tests.FileBasedCacheTests)\", \"test_float_timeout (cache.tests.FileBasedCacheTests)\", \"test_forever_timeout (cache.tests.FileBasedCacheTests)\", \"test_get_does_not_ignore_non_filenotfound_exceptions (cache.tests.FileBasedCacheTests)\", \"test_get_ignores_enoent (cache.tests.FileBasedCacheTests)\", \"test_get_many (cache.tests.FileBasedCacheTests)\", \"test_get_or_set (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_callable (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_callable_returning_none (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_racing (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_version (cache.tests.FileBasedCacheTests)\", \"test_has_key (cache.tests.FileBasedCacheTests)\", \"test_ignores_non_cache_files (cache.tests.FileBasedCacheTests)\", \"test_in (cache.tests.FileBasedCacheTests)\", \"test_incr (cache.tests.FileBasedCacheTests)\", \"test_incr_version (cache.tests.FileBasedCacheTests)\", \"test_invalid_key_characters (cache.tests.FileBasedCacheTests)\", \"test_invalid_key_length (cache.tests.FileBasedCacheTests)\", \"test_long_timeout (cache.tests.FileBasedCacheTests)\", \"test_prefix (cache.tests.FileBasedCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.FileBasedCacheTests)\", \"test_set_many (cache.tests.FileBasedCacheTests)\", \"test_set_many_expiration (cache.tests.FileBasedCacheTests)\", \"test_simple (cache.tests.FileBasedCacheTests)\", \"test_touch (cache.tests.FileBasedCacheTests)\", \"test_unicode (cache.tests.FileBasedCacheTests)\", \"test_zero_cull (cache.tests.FileBasedCacheTests)\", \"test_zero_timeout (cache.tests.FileBasedCacheTests)\", \"test_add (cache.tests.DBCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.DBCacheTests)\", \"test_binary_string (cache.tests.DBCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.DBCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheTests)\", \"test_cache_versioning_add (cache.tests.DBCacheTests)\", \"test_cache_versioning_delete (cache.tests.DBCacheTests)\", \"test_cache_versioning_get_set (cache.tests.DBCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.DBCacheTests)\", \"test_cache_versioning_has_key (cache.tests.DBCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.DBCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.DBCacheTests)\", \"test_clear (cache.tests.DBCacheTests)\", \"test_close (cache.tests.DBCacheTests)\", \"test_createcachetable_dry_run_mode (cache.tests.DBCacheTests)\", \"test_createcachetable_with_table_argument (cache.tests.DBCacheTests)\", \"test_cull (cache.tests.DBCacheTests)\", \"test_cull_delete_when_store_empty (cache.tests.DBCacheTests)\", \"test_custom_key_func (cache.tests.DBCacheTests)\", \"test_data_types (cache.tests.DBCacheTests)\", \"test_decr (cache.tests.DBCacheTests)\", \"test_decr_version (cache.tests.DBCacheTests)\", \"test_delete (cache.tests.DBCacheTests)\", \"test_delete_many (cache.tests.DBCacheTests)\", \"test_delete_many_num_queries (cache.tests.DBCacheTests)\", \"test_delete_nonexistent (cache.tests.DBCacheTests)\", \"test_expiration (cache.tests.DBCacheTests)\", \"test_float_timeout (cache.tests.DBCacheTests)\", \"test_forever_timeout (cache.tests.DBCacheTests)\", \"test_get_many (cache.tests.DBCacheTests)\", \"test_get_many_num_queries (cache.tests.DBCacheTests)\", \"test_get_or_set (cache.tests.DBCacheTests)\", \"test_get_or_set_callable (cache.tests.DBCacheTests)\", \"test_get_or_set_callable_returning_none (cache.tests.DBCacheTests)\", \"test_get_or_set_racing (cache.tests.DBCacheTests)\", \"test_get_or_set_version (cache.tests.DBCacheTests)\", \"test_has_key (cache.tests.DBCacheTests)\", \"test_in (cache.tests.DBCacheTests)\", \"test_incr (cache.tests.DBCacheTests)\", \"test_incr_version (cache.tests.DBCacheTests)\", \"test_invalid_key_characters (cache.tests.DBCacheTests)\", \"test_invalid_key_length (cache.tests.DBCacheTests)\", \"test_long_timeout (cache.tests.DBCacheTests)\", \"test_prefix (cache.tests.DBCacheTests)\", \"test_second_call_doesnt_crash (cache.tests.DBCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.DBCacheTests)\", \"test_set_many (cache.tests.DBCacheTests)\", \"test_set_many_expiration (cache.tests.DBCacheTests)\", \"test_simple (cache.tests.DBCacheTests)\", \"test_touch (cache.tests.DBCacheTests)\", \"test_unicode (cache.tests.DBCacheTests)\", \"test_zero_cull (cache.tests.DBCacheTests)\", \"test_zero_timeout (cache.tests.DBCacheTests)\", \"test_add (cache.tests.DBCacheWithTimeZoneTests)\", \"test_add_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)\", \"test_binary_string (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_read_for_model_instance (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_add (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_delete (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_get_set (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_get_set_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_has_key (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_incr_decr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_write_unpicklable_object (cache.tests.DBCacheWithTimeZoneTests)\", \"test_clear (cache.tests.DBCacheWithTimeZoneTests)\", \"test_close (cache.tests.DBCacheWithTimeZoneTests)\", \"test_createcachetable_dry_run_mode (cache.tests.DBCacheWithTimeZoneTests)\", \"test_createcachetable_with_table_argument (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cull (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cull_delete_when_store_empty (cache.tests.DBCacheWithTimeZoneTests)\", \"test_custom_key_func (cache.tests.DBCacheWithTimeZoneTests)\", \"test_data_types (cache.tests.DBCacheWithTimeZoneTests)\", \"test_decr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_decr_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_nonexistent (cache.tests.DBCacheWithTimeZoneTests)\", \"test_expiration (cache.tests.DBCacheWithTimeZoneTests)\", \"test_float_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_forever_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_callable (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_callable_returning_none (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_racing (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_has_key (cache.tests.DBCacheWithTimeZoneTests)\", \"test_in (cache.tests.DBCacheWithTimeZoneTests)\", \"test_incr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_incr_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_invalid_key_characters (cache.tests.DBCacheWithTimeZoneTests)\", \"test_invalid_key_length (cache.tests.DBCacheWithTimeZoneTests)\", \"test_long_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_prefix (cache.tests.DBCacheWithTimeZoneTests)\", \"test_second_call_doesnt_crash (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_many_expiration (cache.tests.DBCacheWithTimeZoneTests)\", \"test_simple (cache.tests.DBCacheWithTimeZoneTests)\", \"test_touch (cache.tests.DBCacheWithTimeZoneTests)\", \"test_unicode (cache.tests.DBCacheWithTimeZoneTests)\", \"test_zero_cull (cache.tests.DBCacheWithTimeZoneTests)\", \"test_zero_timeout (cache.tests.DBCacheWithTimeZoneTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.668510",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}