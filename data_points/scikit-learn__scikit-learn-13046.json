{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13046",
  "base_commit": "fcec951bc9f0003d157604bb9f7003c2c397074a",
  "patch": "diff --git a/sklearn/impute.py b/sklearn/impute.py\n--- a/sklearn/impute.py\n+++ b/sklearn/impute.py\n@@ -533,6 +533,23 @@ def _get_missing_features_info(self, X):\n \n         return imputer_mask, features_with_missing\n \n+    def _validate_input(self, X):\n+        if not is_scalar_nan(self.missing_values):\n+            force_all_finite = True\n+        else:\n+            force_all_finite = \"allow-nan\"\n+        X = check_array(X, accept_sparse=('csc', 'csr'), dtype=None,\n+                        force_all_finite=force_all_finite)\n+        _check_inputs_dtype(X, self.missing_values)\n+        if X.dtype.kind not in (\"i\", \"u\", \"f\", \"O\"):\n+            raise ValueError(\"MissingIndicator does not support data with \"\n+                             \"dtype {0}. Please provide either a numeric array\"\n+                             \" (with a floating point or integer dtype) or \"\n+                             \"categorical data represented either as an array \"\n+                             \"with integer dtype or an array of string values \"\n+                             \"with an object dtype.\".format(X.dtype))\n+        return X\n+\n     def fit(self, X, y=None):\n         \"\"\"Fit the transformer on X.\n \n@@ -547,14 +564,7 @@ def fit(self, X, y=None):\n         self : object\n             Returns self.\n         \"\"\"\n-        if not is_scalar_nan(self.missing_values):\n-            force_all_finite = True\n-        else:\n-            force_all_finite = \"allow-nan\"\n-        X = check_array(X, accept_sparse=('csc', 'csr'),\n-                        force_all_finite=force_all_finite)\n-        _check_inputs_dtype(X, self.missing_values)\n-\n+        X = self._validate_input(X)\n         self._n_features = X.shape[1]\n \n         if self.features not in ('missing-only', 'all'):\n@@ -588,14 +598,7 @@ def transform(self, X):\n \n         \"\"\"\n         check_is_fitted(self, \"features_\")\n-\n-        if not is_scalar_nan(self.missing_values):\n-            force_all_finite = True\n-        else:\n-            force_all_finite = \"allow-nan\"\n-        X = check_array(X, accept_sparse=('csc', 'csr'),\n-                        force_all_finite=force_all_finite)\n-        _check_inputs_dtype(X, self.missing_values)\n+        X = self._validate_input(X)\n \n         if X.shape[1] != self._n_features:\n             raise ValueError(\"X has a different number of features \"\ndiff --git a/sklearn/utils/estimator_checks.py b/sklearn/utils/estimator_checks.py\n--- a/sklearn/utils/estimator_checks.py\n+++ b/sklearn/utils/estimator_checks.py\n@@ -74,10 +74,10 @@\n                 'OrthogonalMatchingPursuit', 'PLSCanonical', 'PLSRegression',\n                 'RANSACRegressor', 'RadiusNeighborsRegressor',\n                 'RandomForestRegressor', 'Ridge', 'RidgeCV']\n-\n ALLOW_NAN = ['Imputer', 'SimpleImputer', 'MissingIndicator',\n              'MaxAbsScaler', 'MinMaxScaler', 'RobustScaler', 'StandardScaler',\n              'PowerTransformer', 'QuantileTransformer']\n+SUPPORT_STRING = ['SimpleImputer', 'MissingIndicator']\n \n \n def _yield_non_meta_checks(name, estimator):\n@@ -625,9 +625,16 @@ def check_dtype_object(name, estimator_orig):\n         if \"Unknown label type\" not in str(e):\n             raise\n \n-    X[0, 0] = {'foo': 'bar'}\n-    msg = \"argument must be a string or a number\"\n-    assert_raises_regex(TypeError, msg, estimator.fit, X, y)\n+    if name not in SUPPORT_STRING:\n+        X[0, 0] = {'foo': 'bar'}\n+        msg = \"argument must be a string or a number\"\n+        assert_raises_regex(TypeError, msg, estimator.fit, X, y)\n+    else:\n+        # Estimators supporting string will not call np.asarray to convert the\n+        # data to numeric and therefore, the error will not be raised.\n+        # Checking for each element dtype in the input array will be costly.\n+        # Refer to #11401 for full discussion.\n+        estimator.fit(X, y)\n \n \n def check_complex_data(name, estimator_orig):\n",
  "test_patch": "diff --git a/sklearn/tests/test_impute.py b/sklearn/tests/test_impute.py\n--- a/sklearn/tests/test_impute.py\n+++ b/sklearn/tests/test_impute.py\n@@ -13,6 +13,7 @@\n from sklearn.impute import MissingIndicator\n from sklearn.impute import SimpleImputer\n from sklearn.pipeline import Pipeline\n+from sklearn.pipeline import make_union\n from sklearn.model_selection import GridSearchCV\n from sklearn import tree\n from sklearn.random_projection import sparse_random_matrix\n@@ -509,7 +510,10 @@ def test_imputation_copy():\n       \"'features' has to be either 'missing-only' or 'all'\"),\n      (np.array([[-1, 1], [1, 2]]), np.array([[-1, 1], [1, 2]]),\n       {'features': 'all', 'sparse': 'random'},\n-      \"'sparse' has to be a boolean or 'auto'\")]\n+      \"'sparse' has to be a boolean or 'auto'\"),\n+     (np.array([['a', 'b'], ['c', 'a']], dtype=str),\n+      np.array([['a', 'b'], ['c', 'a']], dtype=str),\n+      {}, \"MissingIndicator does not support data with dtype\")]\n )\n def test_missing_indicator_error(X_fit, X_trans, params, msg_err):\n     indicator = MissingIndicator(missing_values=-1)\n@@ -614,6 +618,37 @@ def test_missing_indicator_sparse_param(arr_type, missing_values,\n             assert isinstance(X_trans_mask, np.ndarray)\n \n \n+def test_missing_indicator_string():\n+    X = np.array([['a', 'b', 'c'], ['b', 'c', 'a']], dtype=object)\n+    indicator = MissingIndicator(missing_values='a', features='all')\n+    X_trans = indicator.fit_transform(X)\n+    assert_array_equal(X_trans, np.array([[True, False, False],\n+                                          [False, False, True]]))\n+\n+\n+@pytest.mark.parametrize(\n+    \"X, missing_values, X_trans_exp\",\n+    [(np.array([['a', 'b'], ['b', 'a']], dtype=object), 'a',\n+      np.array([['b', 'b', True, False], ['b', 'b', False, True]],\n+               dtype=object)),\n+     (np.array([[np.nan, 1.], [1., np.nan]]), np.nan,\n+      np.array([[1., 1., True, False], [1., 1., False, True]])),\n+     (np.array([[np.nan, 'b'], ['b', np.nan]], dtype=object), np.nan,\n+      np.array([['b', 'b', True, False], ['b', 'b', False, True]],\n+               dtype=object)),\n+     (np.array([[None, 'b'], ['b', None]], dtype=object), None,\n+      np.array([['b', 'b', True, False], ['b', 'b', False, True]],\n+               dtype=object))]\n+)\n+def test_missing_indicator_with_imputer(X, missing_values, X_trans_exp):\n+    trans = make_union(\n+        SimpleImputer(missing_values=missing_values, strategy='most_frequent'),\n+        MissingIndicator(missing_values=missing_values)\n+    )\n+    X_trans = trans.fit_transform(X)\n+    assert_array_equal(X_trans, X_trans_exp)\n+\n+\n @pytest.mark.parametrize(\"imputer_constructor\",\n                          [SimpleImputer])\n @pytest.mark.parametrize(\n",
  "problem_statement": "MissingIndicator failed with non-numeric inputs\n\r\n#### Description\r\n\r\n```sklearn.Imputer.MissingIndicator``` fails with string and object type numpy arrays\r\n\r\n#### String Types\r\n\r\n##### Steps/Code to Reproduce \r\n```python\r\nimport numpy as np\r\nfrom sklearn.impute import MissingIndicator\r\n\r\na = np.array([[c] for c in 'abcdea'], dtype=str)\r\n\r\nMissingIndicator().fit_transform(a)\r\nMissingIndicator(missing_values='a').fit_transform(a)\r\n```\r\n\r\n##### Expected Results\r\n\r\n```\r\n[[False]\r\n [False]\r\n [False]\r\n [False]\r\n [False]\r\n [False]]\r\n[[False]\r\n [False]\r\n [True]\r\n [False]\r\n [False]\r\n [False]]\r\n```\r\n\r\n##### Actual Results\r\n\r\n```\r\nC:\\Users\\snowt\\Python\\scikit-learn\\env\\Scripts\\python.exe C:/Users/snowt/Python/scikit-learn/test.py\r\n[[False]\r\n [False]\r\n [False]\r\n [False]\r\n [False]\r\n [False]]\r\nC:\\Users\\snowt\\Python\\scikit-learn\\sklearn\\utils\\validation.py:558: FutureWarning: Beginning in version 0.22, arrays of bytes/strings will be converted to decimal numbers if dtype='numeric'. It is recommended that you convert the array to a float dtype before using it in scikit-learn, for example by using your_array = your_array.astype(np.float64).\r\n  FutureWarning)\r\nC:\\Users\\snowt\\Python\\scikit-learn\\sklearn\\utils\\validation.py:558: FutureWarning: Beginning in version 0.22, arrays of bytes/strings will be converted to decimal numbers if dtype='numeric'. It is recommended that you convert the array to a float dtype before using it in scikit-learn, for example by using your_array = your_array.astype(np.float64).\r\n  FutureWarning)\r\nC:\\Users\\snowt\\Python\\scikit-learn\\sklearn\\utils\\validation.py:558: FutureWarning: Beginning in version 0.22, arrays of bytes/strings will be converted to decimal numbers if dtype='numeric'. It is recommended that you convert the array to a float dtype before using it in scikit-learn, for example by using your_array = your_array.astype(np.float64).\r\n  FutureWarning)\r\nTraceback (most recent call last):\r\n  File \"C:/Users/snowt/Python/scikit-learn/test.py\", line 7, in <module>\r\n    print(MissingIndicator(missing_values='a').fit_transform(a))\r\n  File \"C:\\Users\\snowt\\Python\\scikit-learn\\sklearn\\impute.py\", line 634, in fit_transform\r\n    return self.fit(X, y).transform(X)\r\n  File \"C:\\Users\\snowt\\Python\\scikit-learn\\sklearn\\impute.py\", line 570, in fit\r\n    if self.features == 'missing-only'\r\n  File \"C:\\Users\\snowt\\Python\\scikit-learn\\sklearn\\impute.py\", line 528, in _get_missing_features_info\r\n    imputer_mask = _get_mask(X, self.missing_values)\r\n  File \"C:\\Users\\snowt\\Python\\scikit-learn\\sklearn\\impute.py\", line 52, in _get_mask\r\n    return np.equal(X, value_to_mask)\r\nTypeError: ufunc 'equal' did not contain a loop with signature matching types dtype('<U1') dtype('<U1') dtype('bool')\r\n\r\nProcess finished with exit code 1\r\n```\r\n\r\n#### Object Types\r\n\r\n##### Steps/Code to Reproduce \r\n```python\r\nimport numpy as np\r\nfrom sklearn.impute import MissingIndicator\r\n\r\na = np.array([[c] for c in 'abcdea'], dtype=object)\r\n\r\nMissingIndicator().fit_transform(a)\r\nMissingIndicator(missing_values='a').fit_transform(a)\r\n```\r\n\r\n##### Expected Results\r\n\r\n```\r\n[[False]\r\n [False]\r\n [False]\r\n [False]\r\n [False]\r\n [False]]\r\n[[False]\r\n [False]\r\n [True]\r\n [False]\r\n [False]\r\n [False]]\r\n```\r\n\r\n##### Actual Results\r\n\r\n```\r\nC:\\Users\\snowt\\Python\\scikit-learn\\env\\Scripts\\python.exe C:/Users/snowt/Python/scikit-learn/test.py\r\nTraceback (most recent call last):\r\n  File \"C:/Users/snowt/Python/scikit-learn/test.py\", line 6, in <module>\r\n    print(MissingIndicator().fit_transform(a))\r\n  File \"C:\\Users\\snowt\\Python\\scikit-learn\\sklearn\\impute.py\", line 634, in fit_transform\r\n    return self.fit(X, y).transform(X)\r\n  File \"C:\\Users\\snowt\\Python\\scikit-learn\\sklearn\\impute.py\", line 555, in fit\r\n    force_all_finite=force_all_finite)\r\n  File \"C:\\Users\\snowt\\Python\\scikit-learn\\sklearn\\utils\\validation.py\", line 522, in check_array\r\n    array = np.asarray(array, dtype=dtype, order=order)\r\n  File \"C:\\Users\\snowt\\Python\\scikit-learn\\env\\lib\\site-packages\\numpy\\core\\numeric.py\", line 538, in asarray\r\n    return array(a, dtype, copy=False, order=order)\r\nValueError: could not convert string to float: 'a'\r\n\r\nProcess finished with exit code 1\r\n```\r\n\r\n#### Versions\r\n\r\n```\r\nSystem:\r\n    python: 3.6.8 (tags/v3.6.8:3c6b436a57, Dec 24 2018, 00:16:47) [MSC v.1916 64\r\n bit (AMD64)]\r\nexecutable: C:\\Users\\snowt\\Python\\scikit-learn\\env\\Scripts\\python.exe\r\n   machine: Windows-10-10.0.17763-SP0\r\n\r\nBLAS:\r\n    macros:\r\n  lib_dirs:\r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 18.1\r\nsetuptools: 40.6.3\r\n   sklearn: 0.21.dev0\r\n     numpy: 1.16.0\r\n     scipy: 1.2.0\r\n    Cython: 0.29.3\r\n    pandas: None\r\n```\r\n\r\n\r\n\n",
  "hints_text": "This may be a problem for #11886 given that SimpleImputer now handles\nnon-numerics\n\nThe issue is that `check_array` convert to `float64` object array. We need to turn `dtype=None` in case of `string` or `object` dtype to avoid the conversion.\n> This may be a problem for #11886 given that SimpleImputer now handles non-numerics\r\n\r\nIt needs to be solved for the PR #12583 then.\nIf someone is going to work on this, I would like to add that for string types the error comes from the ```_get_mask``` function as discussed in #13028. This is in relation to numpy/numpy#5399\n \n I'm not sure that we want to support numpy string. \n                                                                                                                                      \n \n                            \n     \nSent from my phone - sorry to be brief and potential misspell. \n\n \n\n",
  "created_at": "2019-01-26T21:29:52Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/tests/test_impute.py::test_missing_indicator_error[X_fit3-X_trans3-params3-MissingIndicator\", \"sklearn/tests/test_impute.py::test_missing_indicator_string\", \"sklearn/tests/test_impute.py::test_missing_indicator_with_imputer[X0-a-X_trans_exp0]\", \"sklearn/tests/test_impute.py::test_missing_indicator_with_imputer[X2-nan-X_trans_exp2]\", \"sklearn/tests/test_impute.py::test_missing_indicator_with_imputer[X3-None-X_trans_exp3]\"]",
  "PASS_TO_PASS": "[\"sklearn/tests/test_impute.py::test_imputation_shape\", \"sklearn/tests/test_impute.py::test_imputation_error_invalid_strategy[const]\", \"sklearn/tests/test_impute.py::test_imputation_error_invalid_strategy[101]\", \"sklearn/tests/test_impute.py::test_imputation_error_invalid_strategy[None]\", \"sklearn/tests/test_impute.py::test_imputation_deletion_warning[mean]\", \"sklearn/tests/test_impute.py::test_imputation_deletion_warning[median]\", \"sklearn/tests/test_impute.py::test_imputation_deletion_warning[most_frequent]\", \"sklearn/tests/test_impute.py::test_imputation_error_sparse_0[mean]\", \"sklearn/tests/test_impute.py::test_imputation_error_sparse_0[median]\", \"sklearn/tests/test_impute.py::test_imputation_error_sparse_0[most_frequent]\", \"sklearn/tests/test_impute.py::test_imputation_error_sparse_0[constant]\", \"sklearn/tests/test_impute.py::test_imputation_mean_median\", \"sklearn/tests/test_impute.py::test_imputation_median_special_cases\", \"sklearn/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[None-mean]\", \"sklearn/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[None-median]\", \"sklearn/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[object-mean]\", \"sklearn/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[object-median]\", \"sklearn/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[str-mean]\", \"sklearn/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[str-median]\", \"sklearn/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[str-constant]\", \"sklearn/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[str-most_frequent]\", \"sklearn/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[dtype1-constant]\", \"sklearn/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[dtype1-most_frequent]\", \"sklearn/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[dtype2-constant]\", \"sklearn/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[dtype2-most_frequent]\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent_objects[None]\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent_objects[nan]\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent_objects[NAN]\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent_objects[]\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent_objects[0]\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent_pandas[object]\", \"sklearn/tests/test_impute.py::test_imputation_most_frequent_pandas[category]\", \"sklearn/tests/test_impute.py::test_imputation_constant_error_invalid_type[1-0]\", \"sklearn/tests/test_impute.py::test_imputation_constant_error_invalid_type[1.0-nan]\", \"sklearn/tests/test_impute.py::test_imputation_constant_integer\", \"sklearn/tests/test_impute.py::test_imputation_constant_float[csr_matrix]\", \"sklearn/tests/test_impute.py::test_imputation_constant_float[asarray]\", \"sklearn/tests/test_impute.py::test_imputation_constant_object[None]\", \"sklearn/tests/test_impute.py::test_imputation_constant_object[nan]\", \"sklearn/tests/test_impute.py::test_imputation_constant_object[NAN]\", \"sklearn/tests/test_impute.py::test_imputation_constant_object[]\", \"sklearn/tests/test_impute.py::test_imputation_constant_object[0]\", \"sklearn/tests/test_impute.py::test_imputation_constant_pandas[object]\", \"sklearn/tests/test_impute.py::test_imputation_constant_pandas[category]\", \"sklearn/tests/test_impute.py::test_imputation_pipeline_grid_search\", \"sklearn/tests/test_impute.py::test_imputation_copy\", \"sklearn/tests/test_impute.py::test_missing_indicator_error[X_fit0-X_trans0-params0-have\", \"sklearn/tests/test_impute.py::test_missing_indicator_error[X_fit1-X_trans1-params1-'features'\", \"sklearn/tests/test_impute.py::test_missing_indicator_error[X_fit2-X_trans2-params2-'sparse'\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-array-nan-float64]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-array-0-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-array--1-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-csc_matrix-nan-float64]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-csc_matrix-0-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-csc_matrix--1-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-csr_matrix-nan-float64]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-csr_matrix-0-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-csr_matrix--1-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-coo_matrix-nan-float64]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-coo_matrix-0-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-coo_matrix--1-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-lil_matrix-nan-float64]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-lil_matrix-0-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-lil_matrix--1-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-bsr_matrix-nan-float64]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-bsr_matrix-0-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[missing-only-2-features_indices0-bsr_matrix--1-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-array-nan-float64]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-array-0-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-array--1-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-csc_matrix-nan-float64]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-csc_matrix-0-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-csc_matrix--1-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-csr_matrix-nan-float64]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-csr_matrix-0-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-csr_matrix--1-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-coo_matrix-nan-float64]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-coo_matrix-0-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-coo_matrix--1-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-lil_matrix-nan-float64]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-lil_matrix-0-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-lil_matrix--1-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-bsr_matrix-nan-float64]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-bsr_matrix-0-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-bsr_matrix--1-int32]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[array-nan-True]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[array-nan-False]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[array-nan-auto]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[array-0-True]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[array-0-False]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[array-0-auto]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[csc_matrix-nan-True]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[csc_matrix-nan-False]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[csc_matrix-nan-auto]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[csc_matrix-0-True]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[csc_matrix-0-False]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[csc_matrix-0-auto]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[csr_matrix-nan-True]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[csr_matrix-nan-False]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[csr_matrix-nan-auto]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[csr_matrix-0-True]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[csr_matrix-0-False]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[csr_matrix-0-auto]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[coo_matrix-nan-True]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[coo_matrix-nan-False]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[coo_matrix-nan-auto]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[coo_matrix-0-True]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[coo_matrix-0-False]\", \"sklearn/tests/test_impute.py::test_missing_indicator_sparse_param[coo_matrix-0-auto]\", \"sklearn/tests/test_impute.py::test_missing_indicator_with_imputer[X1-nan-X_trans_exp1]\", \"sklearn/tests/test_impute.py::test_inconsistent_dtype_X_missing_values[NaN-nan-Input\", \"sklearn/tests/test_impute.py::test_inconsistent_dtype_X_missing_values[-1--1-types\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.979761",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}