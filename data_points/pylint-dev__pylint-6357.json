{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-6357",
  "base_commit": "cb37ae4fc24a8756a5f965cdc6ab9c472f909ab0",
  "patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -28,7 +28,7 @@\n import sys\n import warnings\n from collections import defaultdict\n-from collections.abc import Generator, Iterable\n+from collections.abc import Callable, Generator, Iterable\n from getopt import getopt\n from io import BufferedIOBase, BufferedReader, BytesIO\n from itertools import chain, groupby\n@@ -366,28 +366,25 @@ def append_stream(\n             readlines = decoding_stream(stream, encoding).readlines\n         else:\n             readlines = stream.readlines  # type: ignore[assignment] # hint parameter is incorrectly typed as non-optional\n+\n         try:\n-            active_lines: list[str] = []\n-            if hasattr(self, \"linter\"):\n-                # Remove those lines that should be ignored because of disables\n-                for index, line in enumerate(readlines()):\n-                    if self.linter._is_one_message_enabled(\"R0801\", index + 1):  # type: ignore[attr-defined]\n-                        active_lines.append(line)\n-            else:\n-                active_lines = readlines()\n-\n-            self.linesets.append(\n-                LineSet(\n-                    streamid,\n-                    active_lines,\n-                    self.namespace.ignore_comments,\n-                    self.namespace.ignore_docstrings,\n-                    self.namespace.ignore_imports,\n-                    self.namespace.ignore_signatures,\n-                )\n-            )\n+            lines = readlines()\n         except UnicodeDecodeError:\n-            pass\n+            lines = []\n+\n+        self.linesets.append(\n+            LineSet(\n+                streamid,\n+                lines,\n+                self.namespace.ignore_comments,\n+                self.namespace.ignore_docstrings,\n+                self.namespace.ignore_imports,\n+                self.namespace.ignore_signatures,\n+                line_enabled_callback=self.linter._is_one_message_enabled  # type: ignore[attr-defined]\n+                if hasattr(self, \"linter\")\n+                else None,\n+            )\n+        )\n \n     def run(self) -> None:\n         \"\"\"Start looking for similarities and display results on stdout.\"\"\"\n@@ -563,6 +560,7 @@ def stripped_lines(\n     ignore_docstrings: bool,\n     ignore_imports: bool,\n     ignore_signatures: bool,\n+    line_enabled_callback: Callable[[str, int], bool] | None = None,\n ) -> list[LineSpecifs]:\n     \"\"\"Return tuples of line/line number/line type with leading/trailing whitespace and any ignored code features removed.\n \n@@ -571,6 +569,7 @@ def stripped_lines(\n     :param ignore_docstrings: if true, any line that is a docstring is removed from the result\n     :param ignore_imports: if true, any line that is an import is removed from the result\n     :param ignore_signatures: if true, any line that is part of a function signature is removed from the result\n+    :param line_enabled_callback: If called with \"R0801\" and a line number, a return value of False will disregard the line\n     :return: the collection of line/line number/line type tuples\n     \"\"\"\n     if ignore_imports or ignore_signatures:\n@@ -622,6 +621,10 @@ def _get_functions(\n     strippedlines = []\n     docstring = None\n     for lineno, line in enumerate(lines, start=1):\n+        if line_enabled_callback is not None and not line_enabled_callback(\n+            \"R0801\", lineno\n+        ):\n+            continue\n         line = line.strip()\n         if ignore_docstrings:\n             if not docstring:\n@@ -668,11 +671,17 @@ def __init__(\n         ignore_docstrings: bool = False,\n         ignore_imports: bool = False,\n         ignore_signatures: bool = False,\n+        line_enabled_callback: Callable[[str, int], bool] | None = None,\n     ) -> None:\n         self.name = name\n         self._real_lines = lines\n         self._stripped_lines = stripped_lines(\n-            lines, ignore_comments, ignore_docstrings, ignore_imports, ignore_signatures\n+            lines,\n+            ignore_comments,\n+            ignore_docstrings,\n+            ignore_imports,\n+            ignore_signatures,\n+            line_enabled_callback=line_enabled_callback,\n         )\n \n     def __str__(self):\n",
  "test_patch": "diff --git a/tests/test_similar.py b/tests/test_similar.py\n--- a/tests/test_similar.py\n+++ b/tests/test_similar.py\n@@ -35,7 +35,13 @@ def _runtest(self, args: list[str], code: int) -> None:\n     @staticmethod\n     def _run_pylint(args: list[str], out: TextIO) -> int:\n         \"\"\"Runs pylint with a patched output.\"\"\"\n-        args = args + [\"--persistent=no\"]\n+        args = args + [\n+            \"--persistent=no\",\n+            \"--enable=astroid-error\",\n+            # Enable functionality that will build another ast\n+            \"--ignore-imports=y\",\n+            \"--ignore-signatures=y\",\n+        ]\n         with _patch_streams(out):\n             with pytest.raises(SystemExit) as cm:\n                 with warnings.catch_warnings():\n@@ -54,8 +60,10 @@ def _test_output(self, args: list[str], expected_output: str) -> None:\n         out = StringIO()\n         self._run_pylint(args, out=out)\n         actual_output = self._clean_paths(out.getvalue())\n+        actual_output_stripped = actual_output.strip()\n         expected_output = self._clean_paths(expected_output)\n-        assert expected_output.strip() in actual_output.strip()\n+        assert expected_output.strip() in actual_output_stripped\n+        assert \"Fatal error\" not in actual_output_stripped\n \n     def test_duplicate_code_raw_strings_all(self) -> None:\n         \"\"\"Test similar lines in 3 similar files.\"\"\"\n",
  "problem_statement": "Crash ``Parsing Python code failed: expected an indented block after function definition``\n### Bug description\n\nWhen parsing the following file:\r\n\r\n<!--\r\n If sharing the code is not an option, please state so,\r\n but providing only the stacktrace would still be helpful.\r\n -->\r\n\r\n```python\r\n#!/usr/bin/python\r\nimport os\r\n\r\ndef bug():\r\n    # pylint:disable=R\r\n    if not os.path.exists('/bug'):\r\n        os.mkdir(\"/bug\")\r\n\r\n```\r\n\r\npylint crashed with a ``AstroidSyntaxError`` and with the following stacktrace:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/evgeni/Devel/katello/katello-client-bootstrap/venv/lib64/python3.10/site-packages/astroid/builder.py\", line 168, in _data_build\r\n    node, parser_module = _parse_string(data, type_comments=True)\r\n  File \"/home/evgeni/Devel/katello/katello-client-bootstrap/venv/lib64/python3.10/site-packages/astroid/builder.py\", line 454, in _parse_string\r\n    parsed = parser_module.parse(data + \"\\n\", type_comments=type_comments)\r\n  File \"/home/evgeni/Devel/katello/katello-client-bootstrap/venv/lib64/python3.10/site-packages/astroid/_ast.py\", line 49, in parse\r\n    return parse_func(string)\r\n  File \"/usr/lib64/python3.10/ast.py\", line 50, in parse\r\n    return compile(source, filename, mode, flags,\r\n  File \"<unknown>\", line 5\r\n    \r\n    ^\r\nIndentationError: expected an indented block after function definition on line 4\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/evgeni/Devel/katello/katello-client-bootstrap/venv/lib64/python3.10/site-packages/pylint/lint/pylinter.py\", line 1111, in _check_files\r\n    self._check_file(get_ast, check_astroid_module, file)\r\n  File \"/home/evgeni/Devel/katello/katello-client-bootstrap/venv/lib64/python3.10/site-packages/pylint/lint/pylinter.py\", line 1146, in _check_file\r\n    check_astroid_module(ast_node)\r\n  File \"/home/evgeni/Devel/katello/katello-client-bootstrap/venv/lib64/python3.10/site-packages/pylint/lint/pylinter.py\", line 1298, in check_astroid_module\r\n    retval = self._check_astroid_module(\r\n  File \"/home/evgeni/Devel/katello/katello-client-bootstrap/venv/lib64/python3.10/site-packages/pylint/lint/pylinter.py\", line 1341, in _check_astroid_module\r\n    checker.process_module(node)\r\n  File \"/home/evgeni/Devel/katello/katello-client-bootstrap/venv/lib64/python3.10/site-packages/pylint/checkers/similar.py\", line 832, in process_module\r\n    self.append_stream(self.linter.current_name, stream, node.file_encoding)  # type: ignore[arg-type]\r\n  File \"/home/evgeni/Devel/katello/katello-client-bootstrap/venv/lib64/python3.10/site-packages/pylint/checkers/similar.py\", line 373, in append_stream\r\n    LineSet(\r\n  File \"/home/evgeni/Devel/katello/katello-client-bootstrap/venv/lib64/python3.10/site-packages/pylint/checkers/similar.py\", line 663, in __init__\r\n    self._stripped_lines = stripped_lines(\r\n  File \"/home/evgeni/Devel/katello/katello-client-bootstrap/venv/lib64/python3.10/site-packages/pylint/checkers/similar.py\", line 566, in stripped_lines\r\n    tree = astroid.parse(\"\".join(lines))\r\n  File \"/home/evgeni/Devel/katello/katello-client-bootstrap/venv/lib64/python3.10/site-packages/astroid/builder.py\", line 281, in parse\r\n    return builder.string_build(code, modname=module_name, path=path)\r\n  File \"/home/evgeni/Devel/katello/katello-client-bootstrap/venv/lib64/python3.10/site-packages/astroid/builder.py\", line 138, in string_build\r\n    module, builder = self._data_build(data, modname, path)\r\n  File \"/home/evgeni/Devel/katello/katello-client-bootstrap/venv/lib64/python3.10/site-packages/astroid/builder.py\", line 170, in _data_build\r\n    raise AstroidSyntaxError(\r\nastroid.exceptions.AstroidSyntaxError: Parsing Python code failed:\r\nexpected an indented block after function definition on line 4 (<unknown>, line 5)\r\n```\r\n\r\nIf I remove the `pylint:disable=R` comment, things work as expected.\r\nIf I call `pylint` without `--ignore-imports=y`, things work as expected.\r\nIf I downgrade `pylint` (and `astroid`) to astroid-2.9.3 pylint-2.12.2, things work as expected.\n\n### Configuration\n\n_No response_\n\n### Command used\n\n```shell\npython -m pylint --ignore-imports=y ./bootstrap.py\n```\n\n\n### Pylint output\n\n```shell\n************* Module bootstrap\r\nbootstrap.py:1:0: F0002: bootstrap.py: Fatal error while checking 'bootstrap.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/evgeni/.cache/pylint/pylint-crash-2022-04-14-09.txt'. (astroid-error)\n```\n\n\n### Expected behavior\n\nno astroid error ;-)\n\n### Pylint version\n\n```shell\n% pylint --version\r\npylint 2.13.5\r\nastroid 2.11.2\r\nPython 3.10.4 (main, Mar 25 2022, 00:00:00) [GCC 11.2.1 20220127 (Red Hat 11.2.1-9)]\n```\n\n\n### OS / Environment\n\nFedora 35\n\n### Additional dependencies\n\nastroid==2.11.2\r\ndill==0.3.4\r\nflake8==4.0.1\r\nisort==4.3.21\r\nlazy-object-proxy==1.7.1\r\nmccabe==0.6.1\r\nplatformdirs==2.5.1\r\npycodestyle==2.8.0\r\npyflakes==2.4.0\r\npylint==2.13.5\r\ntoml==0.10.2\r\ntomli==2.0.1\r\nwrapt==1.13.3\r\n\n",
  "hints_text": "Unfortunately, I cannot reproduce the error. Please make sure the indentation is correct. `AstroidSyntaxError` is usually emitted if the Python AST parsing failed.\nThe syntax is correct (Python can execute the code just fine).\r\n\r\nDid you call pylint with `--ignore-imports=y`?\nfor some reason, `lines` in https://github.com/PyCQA/pylint/blob/85a480427c0f14dba9e26d56286b0a370057e792/pylint/checkers/similar.py#L566-L567 is only `['#!/usr/bin/python\\n', 'import os\\n', '\\n', 'def bug():\\n']` which indeed *is* invalid code.\r\n\r\nIt probably gets swallowed here:\r\nhttps://github.com/PyCQA/pylint/blob/85a480427c0f14dba9e26d56286b0a370057e792/pylint/checkers/similar.py#L368-L369\nI can reproduce this with your specific versions of Pylint & astroid.\r\nIt doesn't occur for:\r\n```\r\npylint 2.14.0-dev0\r\nastroid 2.11.2\r\nPython 3.10.0b2 (v3.10.0b2:317314165a, May 31 2021, 10:02:22) [Clang 12.0.5 (clang-1205.0.22.9)]\r\n```\nRight, upgrading `pylint` to latest git (47e168cf607e2069b103fc466edfe1c6522e2fb2) does fix it.\nI was able to reproduce it now. Like @mbyrnepr2 said, this is already fixed in `main`. In particular #6271 seems to be the PR which resolved it. Tbh though, I'm not quite sure why.\r\n\r\nMaybe you have an idea @DanielNoord? It seems to be related to the `--ignore-imports=y` option.\r\nWould we be able to backport the change?\nNo, sorry! I have no immediate hunch for what could have been the fix (or previous bug)/\r\n\r\nThe only thing I can think of is the commenting of `linter.load_command_line_configuration`. Especially since the `ignore-imports` comes from the CLI. The way `Similar` (of which the options originates) interacts with the configuration parsing is quite intricate because it also has to do it semi-standalone. I worry I might have broken something while working on the transition that wasn't caught by our testsuite.\r\nIt might be worth checking if we can also reproduce this with `ignore-imports` in a configuration file. If not, then we could add a notice about this in the release notes of `2.13.6`.\r\n\r\nSorry guys! I hoped to avoid this! 😓 \n> Sorry guys! I hoped to avoid this!\r\n\r\nDon't worry, as we say in some python packaging circles it's impossible to migrate to argparse without breaking a few eggs.\n@evgeni Have you checked if the problem exists when using a configuration file as well? If not I'd say we can close this issue and (sadly) accept that this might be a bug in `2.13.6` and any other `2.13.x`...\nSame thing with a config:\r\n\r\n```console\r\n% cat pylintrc\r\n[MASTER]\r\nignore-imports=y\r\n\r\n% python -m pylint ./l2.py\r\n************* Module l2\r\nl2.py:1:0: F0002: l2.py: Fatal error while checking 'l2.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/evgeni/.cache/pylint/pylint-crash-2022-04-15-09.txt'. (astroid-error)\r\n```\n😢 \r\n\r\nSorry, I don't really have an easy solution here. Especially since this might have happened somewhere in the middle of the 30+ PRs that were necessary to transition from `optparse` to `argparse`... The only thing I can do is work extra hard to get `2.14` out sooner and have it work again 😄 \n🤗\n\nNo worries, I can just pin to <2.13 for now.\n\nFor the mighty search engines: on Python 3.8 the error reads `SyntaxError: unexpected EOF while parsing`, the rest is identical :)\nBtw, `2.13.0` should work. We didn't touch the configuration handling until after `.0`!\nNope, this is failing for me with\n\n```console\n% python -m pylint --version\npylint 2.13.0\nastroid 2.11.2\nPython 3.10.4 (main, Mar 25 2022, 00:00:00) [GCC 11.2.1 2022012\n7 (Red Hat 11.2.1-9)]\n```\nThen we might have actually fixed a bug we didn't know about by moving to `argparse`...\r\n\r\nI don't know any more 😅 \r\n\r\nI'm going to keep this issue open for visibility and close it as we release `2.14`. Thanks for helping triaging this and sorry for not being able to give a better solution!\nI was curious, so I bisected it. : D\r\n\r\nWe have, unfortunately, two bugs where the second bug silenced the crash aspect of the first one.\r\n\r\nBug 1: 4ca885fd8c35e6781a359cda0e4de2c0910973b6\r\nBlock disables can be used on function defs. So by creating the functionality of block disables for `duplicate-code`, everything under the `def` line is empty, which will crash with `AstroidError` when parsed in `checkers.similar.stripped_lines()`.\r\n\r\nBug 2: 03cfbf3df1d20ba1bfd445c59f18c906e8dd8a62\r\nThis silenced the other bug by just not respecting `ignore-imports=y`. Place a breakpoint before if `if ignore_imports or ignore_signatures:` in `checkers.similar.stripped_lines()` and see that `ignore_imports` is now False. Something to do with SimilarChecker registering options. I'll open a separate issue for that for 2.14. We can leave this issue open for the crash in 2.13.6.\n![escalated](https://i.kym-cdn.com/photos/images/newsfeed/000/353/279/e31.jpg)\n\nOriginally I thought this was my odd codebase that was tripping over pylint and wanted to shrug it off…\n:-) we love testers! second issue extracted into #6350 so we can make sure to do it. thanks for getting in touch!\n@jacobtylerwalls What do you think would the best way to solve this? I was thinking maybe add an `...` to `lines` for every disable we encounter, but then `Similar` might start bugging users about duplicate `...`?\nI'm testing a patch that inserts \": ...\" so that `def a():  # pylint: disable=blah\\n` becomes `def a(): ...  # pylint: disable=blah\\n` etc",
  "created_at": "2022-04-16T13:12:44Z",
  "version": "2.14",
  "FAIL_TO_PASS": "[\"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_line_disable_all\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_scope\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_scope_double\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_scope_function\"]",
  "PASS_TO_PASS": "[\"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_all\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_file\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_file_double\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_line_two\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_line_midle\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_line_end\", \"tests/test_similar.py::TestSimilarCodeChecker::test_ignore_imports\"]",
  "environment_setup_commit": "680edebc686cad664bbed934a490aeafa775f163",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.912484",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}