{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-13364",
  "base_commit": "d11087e1faa1296c8cdac5dfff0e28879534ffcc",
  "patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -146,9 +146,26 @@ def __rmul__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     @call_highest_priority('__rpow__')\n-    def __pow__(self, other):\n+    def _pow(self, other):\n         return Pow(self, other)\n \n+    def __pow__(self, other, mod=None):\n+        if mod is None:\n+            return self._pow(other)\n+        try:\n+            _self, other, mod = as_int(self), as_int(other), as_int(mod)\n+            if other >= 0:\n+                return pow(_self, other, mod)\n+            else:\n+                from sympy.core.numbers import mod_inverse\n+                return mod_inverse(pow(_self, -other, mod), mod)\n+        except ValueError:\n+            power = self._pow(other)\n+            try:\n+                return power%mod\n+            except TypeError:\n+                return NotImplemented\n+\n     @_sympifyit('other', NotImplemented)\n     @call_highest_priority('__pow__')\n     def __rpow__(self, other):\n",
  "test_patch": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -187,6 +187,19 @@ def test_pow3():\n     assert sqrt(2)**3 == sqrt(8)\n \n \n+def test_mod_pow():\n+    for s, t, u, v in [(4, 13, 497, 445), (4, -3, 497, 365),\n+            (3.2, 2.1, 1.9, 0.1031015682350942), (S(3)/2, 5, S(5)/6, S(3)/32)]:\n+        assert pow(S(s), t, u) == v\n+        assert pow(S(s), S(t), u) == v\n+        assert pow(S(s), t, S(u)) == v\n+        assert pow(S(s), S(t), S(u)) == v\n+    assert pow(S(2), S(10000000000), S(3)) == 1\n+    assert pow(x, y, z) == x**y%z\n+    raises(TypeError, lambda: pow(S(4), \"13\", 497))\n+    raises(TypeError, lambda: pow(S(4), 13, \"497\"))\n+\n+\n def test_pow_E():\n     assert 2**(y/log(2)) == S.Exp1**y\n     assert 2**(y/log(2)/3) == S.Exp1**(y/3)\n@@ -1622,6 +1635,7 @@ def test_Mod():\n \n     # modular exponentiation\n     assert Mod(Pow(4, 13, evaluate=False), 497) == Mod(Pow(4, 13), 497)\n+    assert Mod(Pow(2, 10000000000, evaluate=False), 3) == 1\n \n     # Wilson's theorem\n     factorial(18042, evaluate=False) % 18043 == 18042\n",
  "problem_statement": "Ternary pow()\n```\nAccording to http://docs.python.org/release/2.5.2/ref/numeric-types.html , __pow__ should define a third, optional argument to work with ternary pow().  We should do that for at least Integer, though it would be cool to do it for arbitrary expressions (this will require Mod from issue 5589 , and also some care to make sure that it still evaluates efficiently when values are substituted in).  Right now, we get:\n\nIn [1]: pow(S(2), S(3), S(5))\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n\n/Users/aaronmeurer/Documents/python/sympy/sympy/<ipython console> in <module>()\n\nTypeError: __sympifyit_wrapper() takes exactly 2 arguments (3 given)\n```\n\nOriginal issue for #5715: http://code.google.com/p/sympy/issues/detail?id=2616\nOriginal author: https://code.google.com/u/asmeurer@gmail.com/\nReferenced issues: #5589\nOriginal owner: https://code.google.com/u/asmeurer@gmail.com/\n\n",
  "hints_text": "```\nIssue 2728 has been merged into this issue.\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2616#c1\nOriginal author: https://code.google.com/u/101069955704897915480/\n\n```\n**Status:** Valid  \n\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2616#c2\nOriginal author: https://code.google.com/u/asmeurer@gmail.com/\n\n```\nMod has been implemented. So this can be implemented in general on Expr as efficiently on Integer (and probably Rational).  \n\nI'm not clear what happens if a non-int is used in the second or third argument. Can that be defined?\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2616#c3\nOriginal author: https://code.google.com/u/asmeurer@gmail.com/\n\nHere is an implementation that includes support for negative exponents using some help with the <a href=\"http://stackoverflow.com/questions/4798654/modular-multiplicative-inverse-function-in-python\">modular multiplicate inverse</a>.  Perhaps it can help folks in need until something official is ready.  Use as:\n\n```\npower_mod(67, 111, 101)\npower_mod(67, -111, 101)\n```\n\nOf course, pow() would work for small positive integer examples, but when the args are sympy Integers, this will help.  And, pow() can't handle negative exponents while this one does.  This is a copy of what I posted for closed 5827.\n\n```\ndef power_mod(base, exponent, n):\n    base = sympy.Integer(base)\n    exponent = sympy.Integer(exponent)\n    is_neg = exponent < 0\n    if is_neg:\n        exponent = -exponent\n    n = sympy.Integer(n)\n    x = sympy.Integer(1)\n    e = exponent\n    c = sympy.Mod(base, n)\n    vals = [c]\n    x += 1\n    while x <= exponent:\n        c = sympy.Mod(c**2, n)\n        vals.append(c)\n        x *= 2\n\n    x /= 2\n    answer = sympy.Integer(1)\n    while len(vals) > 0:\n        nextv = vals.pop()\n        if x <= e:\n          answer = sympy.Mod(nextv*answer, n)\n          e -= x\n          if e == 0:\n              break\n        x /= 2\n    if is_neg:\n        answer = modinv(answer, n)\n    return answer\n\ndef egcd(a, b):\n    a = sympy.Integer(a)\n    b = sympy.Integer(b)\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n\ndef modinv(a, m):\n    g, x, y = egcd(a, m)\n    if g != 1:\n        raise Exception('modular inverse does not exist')\n    else:\n        return x % m\n```\n\nThis is an old issue and I'm interested in working on it. I'd like to know if there is a reason why it hasn't been fixed yet, any organizational issues that I should be aware of? /cc @asmeurer \n\nI don't think so. I think it should be easy to implement. Call `pow()` if the arguments are numbers, and create the symbolic power mod n otherwise. \n\n@rd13123013 @asmeurer This can be fixed by simply allowing 3 arguments for `__pow__` in `Expr` class. However, it looks as if `_sympifyit`, allows only one argument. `_sympifyit` should be more flexible towards multiple args, I guess. Same is the case with `call_highest_priority`.  \n",
  "created_at": "2017-09-28T14:14:40Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_mod_pow\"]",
  "PASS_TO_PASS": "[\"test_bug1\", \"test_Symbol\", \"test_arit0\", \"test_div\", \"test_pow\", \"test_pow2\", \"test_pow3\", \"test_pow_E\", \"test_pow_issue_3516\", \"test_pow_im\", \"test_real_mul\", \"test_ncmul\", \"test_ncpow\", \"test_powerbug\", \"test_Mul_doesnt_expand_exp\", \"test_Add_Mul_is_integer\", \"test_Add_Mul_is_finite\", \"test_Mul_is_even_odd\", \"test_evenness_in_ternary_integer_product_with_even\", \"test_oddness_in_ternary_integer_product_with_even\", \"test_Mul_is_rational\", \"test_Add_is_rational\", \"test_Add_is_even_odd\", \"test_Mul_is_negative_positive\", \"test_Mul_is_negative_positive_2\", \"test_Mul_is_nonpositive_nonnegative\", \"test_Add_is_negative_positive\", \"test_Add_is_nonpositive_nonnegative\", \"test_Pow_is_integer\", \"test_Pow_is_real\", \"test_Pow_is_finite\", \"test_Pow_is_even_odd\", \"test_Pow_is_negative_positive\", \"test_Pow_is_zero\", \"test_Pow_is_nonpositive_nonnegative\", \"test_Mul_is_imaginary_real\", \"test_Mul_hermitian_antihermitian\", \"test_Add_is_comparable\", \"test_Mul_is_comparable\", \"test_Pow_is_comparable\", \"test_Add_is_positive_2\", \"test_Add_is_irrational\", \"test_issue_3531b\", \"test_bug3\", \"test_suppressed_evaluation\", \"test_Add_as_coeff_mul\", \"test_Pow_as_coeff_mul_doesnt_expand\", \"test_issue_3514\", \"test_make_args\", \"test_issue_5126\", \"test_Rational_as_content_primitive\", \"test_Add_as_content_primitive\", \"test_Mul_as_content_primitive\", \"test_Pow_as_content_primitive\", \"test_issue_5460\", \"test_product_irrational\", \"test_issue_5919\", \"test_Mod\", \"test_Mod_is_integer\", \"test_Mod_is_nonposneg\", \"test_issue_6001\", \"test_polar\", \"test_issue_6040\", \"test_issue_6082\", \"test_issue_6077\", \"test_mul_flatten_oo\", \"test_add_flatten\", \"test_issue_5160_6087_6089_6090\", \"test_float_int\", \"test_issue_6611a\", \"test_denest_add_mul\", \"test_mul_zero_detection\", \"test_Mul_with_zero_infinite\", \"test_issue_8247_8354\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.083179",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}