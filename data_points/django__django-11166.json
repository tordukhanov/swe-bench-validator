{
  "repo": "django/django",
  "instance_id": "django__django-11166",
  "base_commit": "85676979a4845fa9b586ec42d4ddbdb9f28b7cc8",
  "patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -65,7 +65,6 @@ def check_dependencies(**kwargs):\n         ('django.contrib.contenttypes', 401),\n         ('django.contrib.auth', 405),\n         ('django.contrib.messages', 406),\n-        ('django.contrib.sessions', 407),\n     )\n     for app_name, error_code in app_dependencies:\n         if not apps.is_installed(app_name):\n@@ -118,6 +117,12 @@ def check_dependencies(**kwargs):\n             \"be in MIDDLEWARE in order to use the admin application.\",\n             id='admin.E409',\n         ))\n+    if not _contains_subclass('django.contrib.sessions.middleware.SessionMiddleware', settings.MIDDLEWARE):\n+        errors.append(checks.Error(\n+            \"'django.contrib.sessions.middleware.SessionMiddleware' must \"\n+            \"be in MIDDLEWARE in order to use the admin application.\",\n+            id='admin.E410',\n+        ))\n     return errors\n \n \n",
  "test_patch": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -5,6 +5,7 @@\n from django.contrib.auth.middleware import AuthenticationMiddleware\n from django.contrib.contenttypes.admin import GenericStackedInline\n from django.contrib.messages.middleware import MessageMiddleware\n+from django.contrib.sessions.middleware import SessionMiddleware\n from django.core import checks\n from django.test import SimpleTestCase, override_settings\n \n@@ -52,13 +53,16 @@ class ModelBackendSubclass(ModelBackend):\n     pass\n \n \n+class SessionMiddlewareSubclass(SessionMiddleware):\n+    pass\n+\n+\n @override_settings(\n     SILENCED_SYSTEM_CHECKS=['fields.W342'],  # ForeignKey(unique=True)\n     INSTALLED_APPS=[\n         'django.contrib.admin',\n         'django.contrib.auth',\n         'django.contrib.contenttypes',\n-        'django.contrib.sessions',\n         'django.contrib.messages',\n         'admin_checks',\n     ],\n@@ -93,11 +97,6 @@ def test_apps_dependencies(self):\n                 \"to use the admin application.\",\n                 id='admin.E406',\n             ),\n-            checks.Error(\n-                \"'django.contrib.sessions' must be in INSTALLED_APPS in order \"\n-                \"to use the admin application.\",\n-                id='admin.E407',\n-            )\n         ]\n         self.assertEqual(errors, expected)\n \n@@ -201,13 +200,19 @@ def test_middleware_dependencies(self):\n                 \"'django.contrib.messages.middleware.MessageMiddleware' \"\n                 \"must be in MIDDLEWARE in order to use the admin application.\",\n                 id='admin.E409',\n-            )\n+            ),\n+            checks.Error(\n+                \"'django.contrib.sessions.middleware.SessionMiddleware' \"\n+                \"must be in MIDDLEWARE in order to use the admin application.\",\n+                id='admin.E410',\n+            ),\n         ]\n         self.assertEqual(errors, expected)\n \n     @override_settings(MIDDLEWARE=[\n         'admin_checks.tests.AuthenticationMiddlewareSubclass',\n         'admin_checks.tests.MessageMiddlewareSubclass',\n+        'admin_checks.tests.SessionMiddlewareSubclass',\n     ])\n     def test_middleware_subclasses(self):\n         self.assertEqual(admin.checks.check_dependencies(), [])\n@@ -216,6 +221,7 @@ def test_middleware_subclasses(self):\n         'django.contrib.does.not.Exist',\n         'django.contrib.auth.middleware.AuthenticationMiddleware',\n         'django.contrib.messages.middleware.MessageMiddleware',\n+        'django.contrib.sessions.middleware.SessionMiddleware',\n     ])\n     def test_admin_check_ignores_import_error_in_middleware(self):\n         self.assertEqual(admin.checks.check_dependencies(), [])\ndiff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1103,13 +1103,13 @@ def test_complex_app(self):\n                 'django.contrib.auth',\n                 'django.contrib.contenttypes',\n                 'django.contrib.messages',\n-                'django.contrib.sessions',\n             ],\n             sdict={\n                 'DEBUG': True,\n                 'MIDDLEWARE': [\n                     'django.contrib.messages.middleware.MessageMiddleware',\n                     'django.contrib.auth.middleware.AuthenticationMiddleware',\n+                    'django.contrib.sessions.middleware.SessionMiddleware',\n                 ],\n                 'TEMPLATES': [\n                     {\n",
  "problem_statement": "Admin app has too hard a dependency on sessions app\nDescription\n\t\nSince #29695 (371ece2f0682e51f2f796854d3e091827a7cea63), released in 2.2, the admin app checks whether the django.contrib.sessions app is in INSTALLED_APPS.\nSome projects may have opted to use a replacement session management app such as ​https://github.com/QueraTeam/django-qsessions – the admin app claims to be incompatible with such a configuration, even if it actually means \"I'm going to need _some_ session management that works like django.contrib.sessions\".\nMaybe it would be better to get rid of the app check and do what's being done for various middleware in the checks function anyway, e.g. something like\nif not _contains_subclass('django.contrib.sessions.middleware.SessionMiddleware', settings.MIDDLEWARE):\n\terrors.append(checks.Error(\n\t\t\"'django.contrib.sessions.middleware.SessionMiddleware' must \"\n\t\t\"be in MIDDLEWARE in order to use the admin application.\",\n\t\tid='admin.E4XX',\n\t))\n– this would be out-of-the-box compatible with e.g. Qsessions.\nThe obvious workaround is to just re-add django.contrib.sessions back into INSTALLED_APPS which kinda works, but has the mild but unfortunate side effect of forcibly enabling the django.contrib.sessions.models.Session model and migrations, (re-)adding a useless django_session table into the database upon migration.\n",
  "hints_text": "System checks are ​designed to be silenced if not appropriate. I'm inclined to think this just such an edge-case at first glance. But OK, yes, I guess subclasses are as legitimate here as elsewhere, so accepting as a Cleanup/Optimisation.\nI'll work on a PR, then. :)\n​PR",
  "created_at": "2019-04-03T12:25:37Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_admin_check_ignores_import_error_in_middleware (admin_checks.tests.SystemChecksTestCase)\", \"test_apps_dependencies (admin_checks.tests.SystemChecksTestCase)\", \"test_checks_are_performed (admin_checks.tests.SystemChecksTestCase)\", \"test_context_processor_dependencies (admin_checks.tests.SystemChecksTestCase)\", \"test_context_processor_dependencies_model_backend_subclass (admin_checks.tests.SystemChecksTestCase)\", \"test_custom_adminsite (admin_checks.tests.SystemChecksTestCase)\", \"test_middleware_dependencies (admin_checks.tests.SystemChecksTestCase)\", \"test_middleware_subclasses (admin_checks.tests.SystemChecksTestCase)\", \"test_no_template_engines (admin_checks.tests.SystemChecksTestCase)\", \"test_several_templates_backends (admin_checks.tests.SystemChecksTestCase)\", \"manage.py check does not raise an ImportError validating a\"]",
  "PASS_TO_PASS": "[\"test_params_to_runserver (admin_scripts.tests.ManageTestserver)\", \"test_testserver_handle_params (admin_scripts.tests.ManageTestserver)\", \"test_no_database (admin_scripts.tests.ManageRunserver)\", \"test_readonly_database (admin_scripts.tests.ManageRunserver)\", \"test_runner_addrport_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runner_ambiguous (admin_scripts.tests.ManageRunserver)\", \"test_runner_custom_defaults (admin_scripts.tests.ManageRunserver)\", \"test_runner_custom_defaults_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runner_hostname (admin_scripts.tests.ManageRunserver)\", \"test_runner_hostname_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runserver_addrport (admin_scripts.tests.ManageRunserver)\", \"test_migration_warning_multiple_apps (admin_scripts.tests.ManageRunserverMigrationWarning)\", \"test_migration_warning_one_app (admin_scripts.tests.ManageRunserverMigrationWarning)\", \"test_precedence (admin_scripts.tests.Discovery)\", \"test_allows_checks_relying_on_other_modeladmins (admin_checks.tests.SystemChecksTestCase)\", \"test_app_label_in_admin_checks (admin_checks.tests.SystemChecksTestCase)\", \"test_cannot_include_through (admin_checks.tests.SystemChecksTestCase)\", \"test_check_fieldset_sublists_for_duplicates (admin_checks.tests.SystemChecksTestCase)\", \"test_check_sublists_for_duplicates (admin_checks.tests.SystemChecksTestCase)\", \"test_custom_get_form_with_fieldsets (admin_checks.tests.SystemChecksTestCase)\", \"test_custom_modelforms_with_fields_fieldsets (admin_checks.tests.SystemChecksTestCase)\", \"test_editable (admin_checks.tests.SystemChecksTestCase)\", \"test_exclude_duplicate_values (admin_checks.tests.SystemChecksTestCase)\", \"test_exclude_in_inline (admin_checks.tests.SystemChecksTestCase)\", \"test_exclude_inline_model_admin (admin_checks.tests.SystemChecksTestCase)\", \"test_exclude_values (admin_checks.tests.SystemChecksTestCase)\", \"test_explicit_through_override (admin_checks.tests.SystemChecksTestCase)\", \"test_extra (admin_checks.tests.SystemChecksTestCase)\", \"test_field_name_not_in_list_display (admin_checks.tests.SystemChecksTestCase)\", \"test_fieldsets_fields_non_tuple (admin_checks.tests.SystemChecksTestCase)\", \"test_fk_exclusion (admin_checks.tests.SystemChecksTestCase)\", \"test_generic_inline_model_admin_bad_ct_field (admin_checks.tests.SystemChecksTestCase)\", \"test_generic_inline_model_admin_bad_fk_field (admin_checks.tests.SystemChecksTestCase)\", \"test_generic_inline_model_admin_non_generic_model (admin_checks.tests.SystemChecksTestCase)\", \"test_generic_inline_model_admin_non_gfk_ct_field (admin_checks.tests.SystemChecksTestCase)\", \"test_generic_inline_model_admin_non_gfk_fk_field (admin_checks.tests.SystemChecksTestCase)\", \"test_graceful_m2m_fail (admin_checks.tests.SystemChecksTestCase)\", \"test_inline_self_check (admin_checks.tests.SystemChecksTestCase)\", \"test_inline_with_specified (admin_checks.tests.SystemChecksTestCase)\", \"test_list_editable_missing_field (admin_checks.tests.SystemChecksTestCase)\", \"test_list_editable_not_a_list_or_tuple (admin_checks.tests.SystemChecksTestCase)\", \"test_list_filter_works_on_through_field_even_when_apps_not_ready (admin_checks.tests.SystemChecksTestCase)\", \"test_nested_fields (admin_checks.tests.SystemChecksTestCase)\", \"test_nested_fieldsets (admin_checks.tests.SystemChecksTestCase)\", \"test_non_model_fields (admin_checks.tests.SystemChecksTestCase)\", \"test_non_model_first_field (admin_checks.tests.SystemChecksTestCase)\", \"test_nonexistent_field (admin_checks.tests.SystemChecksTestCase)\", \"test_nonexistent_field_on_inline (admin_checks.tests.SystemChecksTestCase)\", \"test_nonfirst_fieldset (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_and_editable (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_dynamic_attribute_on_modeladmin (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_fields_not_list_or_tuple (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_lambda (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_method_on_model (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_on_method (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_on_modeladmin (admin_checks.tests.SystemChecksTestCase)\", \"test_valid_generic_inline_model_admin (admin_checks.tests.SystemChecksTestCase)\", \"test_program_name_in_help (admin_scripts.tests.MainModule)\", \"test_runs_django_admin (admin_scripts.tests.MainModule)\", \"no settings: manage.py builtin commands fail with an error when no settings provided\", \"no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"Regression for #20509\", \"test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts)\", \"test_attribute_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_help (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_import_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"no settings: django-admin builtin commands fail with an error when no settings provided\", \"no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"\\\"\", \"test_no_suggestions (admin_scripts.tests.DjangoAdminSuggestions)\", \"test_suggestions (admin_scripts.tests.DjangoAdminSuggestions)\", \"Options passed before settings are correctly handled.\", \"Options are correctly handled when they are passed before and after\", \"Options passed after settings are correctly handled.\", \"Short options passed after settings are correctly handled.\", \"Short options passed before settings are correctly handled.\", \"default: django-admin builtin commands fail with an error when no settings provided\", \"default: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"default: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"default: django-admin builtin commands succeed if settings are provided in the environment\", \"default: django-admin builtin commands succeed if settings are provided as argument\", \"default: django-admin can't execute user commands if it isn't provided settings\", \"default: django-admin can execute user commands if settings are provided in environment\", \"default: django-admin can execute user commands if settings are provided as argument\", \"fulldefault: django-admin builtin commands fail with an error when no settings provided\", \"fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"fulldefault: django-admin builtin commands succeed if the environment contains settings\", \"fulldefault: django-admin builtin commands succeed if a settings file is provided\", \"fulldefault: django-admin can't execute user commands unless settings are provided\", \"fulldefault: django-admin can execute user commands if settings are provided in environment\", \"fulldefault: django-admin can execute user commands if settings are provided as argument\", \"alternate: django-admin builtin commands fail with an error when no settings provided\", \"alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"alternate: django-admin builtin commands succeed if settings are provided in the environment\", \"alternate: django-admin builtin commands succeed if settings are provided as argument\", \"alternate: django-admin can't execute user commands unless settings are provided\", \"alternate: django-admin can execute user commands if settings are provided in environment\", \"alternate: django-admin can execute user commands if settings are provided as argument\", \"test_importable_name (admin_scripts.tests.StartApp)\", \"test_importable_target_name (admin_scripts.tests.StartApp)\", \"startapp validates that app name is a valid Python identifier.\", \"test_invalid_target_name (admin_scripts.tests.StartApp)\", \"test_overlaying_app (admin_scripts.tests.StartApp)\", \"minimal: django-admin builtin commands fail with an error when no settings provided\", \"minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"minimal: django-admin builtin commands fail if settings are provided in the environment\", \"minimal: django-admin builtin commands fail if settings are provided as argument\", \"minimal: django-admin can't execute user commands unless settings are provided\", \"minimal: django-admin can't execute user commands, even if settings are provided in environment\", \"minimal: django-admin can't execute user commands, even if settings are provided as argument\", \"manage.py check does not raise errors when an app imports a base\", \"manage.py check reports an ImportError if an app's models.py\", \"check reports an error on a nonexistent app in INSTALLED_APPS.\", \"All errors/warnings should be sorted by level and by message.\", \"test_warning_does_not_halt (admin_scripts.tests.ManageCheck)\", \"alternate: manage.py builtin commands fail with an error when no default settings provided\", \"alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"alternate: manage.py builtin commands work if settings are provided in the environment\", \"alternate: manage.py builtin commands work with settings provided as argument\", \"alternate: manage.py can't execute user commands without settings\", \"alternate: manage.py output syntax color can be deactivated with the `--no-color` option\", \"alternate: manage.py can execute user commands if settings are provided in environment\", \"alternate: manage.py can execute user commands if settings are provided as argument\", \"multiple: manage.py builtin commands fail with an error when no settings provided\", \"multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"multiple: manage.py can execute builtin commands if settings are provided in the environment\", \"multiple: manage.py builtin commands succeed if settings are provided as argument\", \"multiple: manage.py can't execute user commands using default settings\", \"multiple: manage.py can execute user commands if settings are provided in environment\", \"multiple: manage.py can execute user commands if settings are provided as argument\", \"directory: django-admin builtin commands fail with an error when no settings provided\", \"directory: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"directory: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"directory: django-admin builtin commands succeed if settings are provided in the environment\", \"directory: django-admin builtin commands succeed if settings are provided as argument\", \"directory: django-admin can't execute user commands unless settings are provided\", \"directory: startapp creates the correct directory\", \"directory: startapp creates the correct directory with a custom template\", \"directory: startapp creates the correct directory with unicode characters\", \"fulldefault: manage.py builtin commands succeed when default settings are appropriate\", \"fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist\", \"fulldefault: manage.py builtin commands succeed if settings are provided in the environment\", \"fulldefault: manage.py builtin commands succeed if settings are provided as argument\", \"fulldefault: manage.py can execute user commands when default settings are appropriate\", \"fulldefault: manage.py can execute user commands when settings are provided in environment\", \"fulldefault: manage.py can execute user commands when settings are provided as argument\", \"minimal: manage.py builtin commands fail with an error when no settings provided\", \"minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"minimal: manage.py builtin commands fail if settings are provided in the environment\", \"minimal: manage.py builtin commands fail if settings are provided as argument\", \"minimal: manage.py can't execute user commands without appropriate settings\", \"minimal: manage.py can't execute user commands, even if settings are provided in environment\", \"minimal: manage.py can't execute user commands, even if settings are provided as argument\", \"default: manage.py builtin commands succeed when default settings are appropriate\", \"default: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"default: manage.py builtin commands succeed if settings file (from argument) doesn't exist\", \"default: manage.py builtin commands succeed if settings are provided in the environment\", \"default: manage.py builtin commands succeed if settings are provided as argument\", \"default: manage.py can execute user commands when default settings are appropriate\", \"default: manage.py can execute user commands when settings are provided in environment\", \"default: manage.py can execute user commands when settings are provided as argument\", \"The all option also shows settings with the default value.\", \"Runs without error and emits settings diff.\", \"test_custom_default (admin_scripts.tests.DiffSettings)\", \"test_dynamic_settings_configured (admin_scripts.tests.DiffSettings)\", \"test_settings_configured (admin_scripts.tests.DiffSettings)\", \"--output=unified emits settings diff in unified mode.\", \"test_unified_all (admin_scripts.tests.DiffSettings)\", \"test_custom_project_destination_missing (admin_scripts.tests.StartProject)\", \"Make sure the startproject management command is able to use a different project template\", \"Make sure template context variables are rendered with proper values\", \"Make sure the startproject management command is able to use a different project template from a tarball\", \"test_custom_project_template_from_tarball_by_url (admin_scripts.tests.StartProject)\", \"Startproject can use a project template from a tarball and create it in a specified location\", \"test_custom_project_template_with_non_ascii_templates (admin_scripts.tests.StartProject)\", \"Make sure the startproject management command is able to render custom files\", \"test_importable_project_name (admin_scripts.tests.StartProject)\", \"Make sure the startproject management command validates a project name\", \"Make sure template context variables are not html escaped\", \"Startproject management command handles project template tar/zip balls from non-canonical urls\", \"Make sure the startproject management command creates a project\", \"Make sure the startproject management command creates a project in a specific directory\", \"Ticket 17475: Template dir passed has a trailing path separator\", \"Make sure passing the wrong kinds of arguments outputs an error and prints usage\", \"User AppCommands can execute when a single app name is provided\", \"User AppCommands raise an error when multiple app names are provided\", \"User AppCommands raise an error when no app name is provided\", \"User AppCommands can execute when some of the provided app names are invalid\", \"User BaseCommands can execute when a label is provided\", \"User BaseCommands can execute when no labels are provided\", \"User BaseCommands can execute with options when a label is provided\", \"User BaseCommands can execute with multiple options when a label is provided\", \"User BaseCommands outputs command usage when wrong option is specified\", \"test_base_run_from_argv (admin_scripts.tests.CommandTypes)\", \"test_color_style (admin_scripts.tests.CommandTypes)\", \"test_command_color (admin_scripts.tests.CommandTypes)\", \"--no-color prevent colorization of the output\", \"test_custom_stderr (admin_scripts.tests.CommandTypes)\", \"test_custom_stdout (admin_scripts.tests.CommandTypes)\", \"test_force_color_command_init (admin_scripts.tests.CommandTypes)\", \"test_force_color_execute (admin_scripts.tests.CommandTypes)\", \"help is handled as a special case\", \"--help is equivalent to help\", \"help --commands shows the list of all available commands\", \"-h is handled as a short form of --help\", \"User LabelCommands can execute when a label is provided\", \"User LabelCommands are executed multiple times if multiple labels are provided\", \"User LabelCommands raise an error if no label is provided\", \"test_no_color_force_color_mutually_exclusive_command_init (admin_scripts.tests.CommandTypes)\", \"test_no_color_force_color_mutually_exclusive_execute (admin_scripts.tests.CommandTypes)\", \"NoArg Commands can be executed\", \"NoArg Commands raise an error if an argument is provided\", \"test_run_from_argv_closes_connections (admin_scripts.tests.CommandTypes)\", \"test_run_from_argv_non_ascii_error (admin_scripts.tests.CommandTypes)\", \"--help can be used on a specific command\", \"version is handled as a special case\", \"--version is equivalent to version\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.562725",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}