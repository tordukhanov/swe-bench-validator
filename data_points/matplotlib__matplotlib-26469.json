{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-26469",
  "base_commit": "67fa29336eda204572536d2cea1bf8a4cb04f6fa",
  "patch": "diff --git a/lib/matplotlib/backends/backend_pdf.py b/lib/matplotlib/backends/backend_pdf.py\n--- a/lib/matplotlib/backends/backend_pdf.py\n+++ b/lib/matplotlib/backends/backend_pdf.py\n@@ -2669,18 +2669,19 @@ class PdfPages:\n     In reality `PdfPages` is a thin wrapper around `PdfFile`, in order to avoid\n     confusion when using `~.pyplot.savefig` and forgetting the format argument.\n     \"\"\"\n-    __slots__ = ('_file', 'keep_empty')\n \n-    def __init__(self, filename, keep_empty=True, metadata=None):\n+    _UNSET = object()\n+\n+    def __init__(self, filename, keep_empty=_UNSET, metadata=None):\n         \"\"\"\n         Create a new PdfPages object.\n \n         Parameters\n         ----------\n         filename : str or path-like or file-like\n-            Plots using `PdfPages.savefig` will be written to a file at this\n-            location. The file is opened at once and any older file with the\n-            same name is overwritten.\n+            Plots using `PdfPages.savefig` will be written to a file at this location.\n+            The file is opened when a figure is saved for the first time (overwriting\n+            any older file with the same name).\n \n         keep_empty : bool, optional\n             If set to False, then empty pdf files will be deleted automatically\n@@ -2696,8 +2697,16 @@ def __init__(self, filename, keep_empty=True, metadata=None):\n             'Trapped'. Values have been predefined for 'Creator', 'Producer'\n             and 'CreationDate'. They can be removed by setting them to `None`.\n         \"\"\"\n-        self._file = PdfFile(filename, metadata=metadata)\n-        self.keep_empty = keep_empty\n+        self._filename = filename\n+        self._metadata = metadata\n+        self._file = None\n+        if keep_empty and keep_empty is not self._UNSET:\n+            _api.warn_deprecated(\"3.8\", message=(\n+                \"Keeping empty pdf files is deprecated since %(since)s and support \"\n+                \"will be removed %(removal)s.\"))\n+        self._keep_empty = keep_empty\n+\n+    keep_empty = _api.deprecate_privatize_attribute(\"3.8\")\n \n     def __enter__(self):\n         return self\n@@ -2705,17 +2714,25 @@ def __enter__(self):\n     def __exit__(self, exc_type, exc_val, exc_tb):\n         self.close()\n \n+    def _ensure_file(self):\n+        if self._file is None:\n+            self._file = PdfFile(self._filename, metadata=self._metadata)  # init.\n+        return self._file\n+\n     def close(self):\n         \"\"\"\n         Finalize this object, making the underlying file a complete\n         PDF file.\n         \"\"\"\n-        self._file.finalize()\n-        self._file.close()\n-        if (self.get_pagecount() == 0 and not self.keep_empty and\n-                not self._file.passed_in_file_object):\n-            os.remove(self._file.fh.name)\n-        self._file = None\n+        if self._file is not None:\n+            self._file.finalize()\n+            self._file.close()\n+            self._file = None\n+        elif self._keep_empty:  # True *or* UNSET.\n+            _api.warn_deprecated(\"3.8\", message=(\n+                \"Keeping empty pdf files is deprecated since %(since)s and support \"\n+                \"will be removed %(removal)s.\"))\n+            PdfFile(self._filename, metadata=self._metadata)  # touch the file.\n \n     def infodict(self):\n         \"\"\"\n@@ -2723,7 +2740,7 @@ def infodict(self):\n         (see PDF reference section 10.2.1 'Document Information\n         Dictionary').\n         \"\"\"\n-        return self._file.infoDict\n+        return self._ensure_file().infoDict\n \n     def savefig(self, figure=None, **kwargs):\n         \"\"\"\n@@ -2750,7 +2767,7 @@ def savefig(self, figure=None, **kwargs):\n \n     def get_pagecount(self):\n         \"\"\"Return the current number of pages in the multipage pdf file.\"\"\"\n-        return len(self._file.pageList)\n+        return len(self._ensure_file().pageList)\n \n     def attach_note(self, text, positionRect=[-100, -100, 0, 0]):\n         \"\"\"\n@@ -2759,7 +2776,7 @@ def attach_note(self, text, positionRect=[-100, -100, 0, 0]):\n         page. It is outside the page per default to make sure it is\n         invisible on printouts.\n         \"\"\"\n-        self._file.newTextnote(text, positionRect)\n+        self._ensure_file().newTextnote(text, positionRect)\n \n \n class FigureCanvasPdf(FigureCanvasBase):\n@@ -2778,7 +2795,7 @@ def print_pdf(self, filename, *,\n         self.figure.dpi = 72  # there are 72 pdf points to an inch\n         width, height = self.figure.get_size_inches()\n         if isinstance(filename, PdfPages):\n-            file = filename._file\n+            file = filename._ensure_file()\n         else:\n             file = PdfFile(filename, metadata=metadata)\n         try:\ndiff --git a/lib/matplotlib/backends/backend_pgf.py b/lib/matplotlib/backends/backend_pgf.py\n--- a/lib/matplotlib/backends/backend_pgf.py\n+++ b/lib/matplotlib/backends/backend_pgf.py\n@@ -14,7 +14,7 @@\n from PIL import Image\n \n import matplotlib as mpl\n-from matplotlib import cbook, font_manager as fm\n+from matplotlib import _api, cbook, font_manager as fm\n from matplotlib.backend_bases import (\n     _Backend, FigureCanvasBase, FigureManagerBase, RendererBase\n )\n@@ -874,16 +874,10 @@ class PdfPages:\n     ...     # When no figure is specified the current figure is saved\n     ...     pdf.savefig()\n     \"\"\"\n-    __slots__ = (\n-        '_output_name',\n-        'keep_empty',\n-        '_n_figures',\n-        '_file',\n-        '_info_dict',\n-        '_metadata',\n-    )\n \n-    def __init__(self, filename, *, keep_empty=True, metadata=None):\n+    _UNSET = object()\n+\n+    def __init__(self, filename, *, keep_empty=_UNSET, metadata=None):\n         \"\"\"\n         Create a new PdfPages object.\n \n@@ -912,11 +906,17 @@ def __init__(self, filename, *, keep_empty=True, metadata=None):\n         \"\"\"\n         self._output_name = filename\n         self._n_figures = 0\n-        self.keep_empty = keep_empty\n+        if keep_empty and keep_empty is not self._UNSET:\n+            _api.warn_deprecated(\"3.8\", message=(\n+                \"Keeping empty pdf files is deprecated since %(since)s and support \"\n+                \"will be removed %(removal)s.\"))\n+        self._keep_empty = keep_empty\n         self._metadata = (metadata or {}).copy()\n         self._info_dict = _create_pdf_info_dict('pgf', self._metadata)\n         self._file = BytesIO()\n \n+    keep_empty = _api.deprecate_privatize_attribute(\"3.8\")\n+\n     def _write_header(self, width_inches, height_inches):\n         pdfinfo = ','.join(\n             _metadata_to_str(k, v) for k, v in self._info_dict.items())\n@@ -946,7 +946,10 @@ def close(self):\n         self._file.write(rb'\\end{document}\\n')\n         if self._n_figures > 0:\n             self._run_latex()\n-        elif self.keep_empty:\n+        elif self._keep_empty:\n+            _api.warn_deprecated(\"3.8\", message=(\n+                \"Keeping empty pdf files is deprecated since %(since)s and support \"\n+                \"will be removed %(removal)s.\"))\n             open(self._output_name, 'wb').close()\n         self._file.close()\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_pdf.py b/lib/matplotlib/tests/test_backend_pdf.py\n--- a/lib/matplotlib/tests/test_backend_pdf.py\n+++ b/lib/matplotlib/tests/test_backend_pdf.py\n@@ -3,7 +3,6 @@\n import io\n import os\n from pathlib import Path\n-from tempfile import NamedTemporaryFile\n \n import numpy as np\n import pytest\n@@ -81,35 +80,44 @@ def test_multipage_properfinalize():\n     assert len(s) < 40000\n \n \n-def test_multipage_keep_empty():\n+def test_multipage_keep_empty(tmp_path):\n+    os.chdir(tmp_path)\n+\n     # test empty pdf files\n-    # test that an empty pdf is left behind with keep_empty=True (default)\n-    with NamedTemporaryFile(delete=False) as tmp:\n-        with PdfPages(tmp) as pdf:\n-            filename = pdf._file.fh.name\n-        assert os.path.exists(filename)\n-    os.remove(filename)\n-    # test if an empty pdf is deleting itself afterwards with keep_empty=False\n-    with PdfPages(filename, keep_empty=False) as pdf:\n+\n+    # an empty pdf is left behind with keep_empty unset\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning), PdfPages(\"a.pdf\") as pdf:\n+        pass\n+    assert os.path.exists(\"a.pdf\")\n+\n+    # an empty pdf is left behind with keep_empty=True\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning), \\\n+            PdfPages(\"b.pdf\", keep_empty=True) as pdf:\n         pass\n-    assert not os.path.exists(filename)\n+    assert os.path.exists(\"b.pdf\")\n+\n+    # an empty pdf deletes itself afterwards with keep_empty=False\n+    with PdfPages(\"c.pdf\", keep_empty=False) as pdf:\n+        pass\n+    assert not os.path.exists(\"c.pdf\")\n+\n     # test pdf files with content, they should never be deleted\n-    fig, ax = plt.subplots()\n-    ax.plot([1, 2, 3])\n-    # test that a non-empty pdf is left behind with keep_empty=True (default)\n-    with NamedTemporaryFile(delete=False) as tmp:\n-        with PdfPages(tmp) as pdf:\n-            filename = pdf._file.fh.name\n-            pdf.savefig()\n-        assert os.path.exists(filename)\n-    os.remove(filename)\n-    # test that a non-empty pdf is left behind with keep_empty=False\n-    with NamedTemporaryFile(delete=False) as tmp:\n-        with PdfPages(tmp, keep_empty=False) as pdf:\n-            filename = pdf._file.fh.name\n-            pdf.savefig()\n-        assert os.path.exists(filename)\n-    os.remove(filename)\n+\n+    # a non-empty pdf is left behind with keep_empty unset\n+    with PdfPages(\"d.pdf\") as pdf:\n+        pdf.savefig(plt.figure())\n+    assert os.path.exists(\"d.pdf\")\n+\n+    # a non-empty pdf is left behind with keep_empty=True\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning), \\\n+            PdfPages(\"e.pdf\", keep_empty=True) as pdf:\n+        pdf.savefig(plt.figure())\n+    assert os.path.exists(\"e.pdf\")\n+\n+    # a non-empty pdf is left behind with keep_empty=False\n+    with PdfPages(\"f.pdf\", keep_empty=False) as pdf:\n+        pdf.savefig(plt.figure())\n+    assert os.path.exists(\"f.pdf\")\n \n \n def test_composite_image():\ndiff --git a/lib/matplotlib/tests/test_backend_pgf.py b/lib/matplotlib/tests/test_backend_pgf.py\n--- a/lib/matplotlib/tests/test_backend_pgf.py\n+++ b/lib/matplotlib/tests/test_backend_pgf.py\n@@ -286,6 +286,47 @@ def test_pdf_pages_metadata_check(monkeypatch, system):\n     }\n \n \n+@needs_pgf_xelatex\n+def test_multipage_keep_empty(tmp_path):\n+    os.chdir(tmp_path)\n+\n+    # test empty pdf files\n+\n+    # an empty pdf is left behind with keep_empty unset\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning), PdfPages(\"a.pdf\") as pdf:\n+        pass\n+    assert os.path.exists(\"a.pdf\")\n+\n+    # an empty pdf is left behind with keep_empty=True\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning), \\\n+            PdfPages(\"b.pdf\", keep_empty=True) as pdf:\n+        pass\n+    assert os.path.exists(\"b.pdf\")\n+\n+    # an empty pdf deletes itself afterwards with keep_empty=False\n+    with PdfPages(\"c.pdf\", keep_empty=False) as pdf:\n+        pass\n+    assert not os.path.exists(\"c.pdf\")\n+\n+    # test pdf files with content, they should never be deleted\n+\n+    # a non-empty pdf is left behind with keep_empty unset\n+    with PdfPages(\"d.pdf\") as pdf:\n+        pdf.savefig(plt.figure())\n+    assert os.path.exists(\"d.pdf\")\n+\n+    # a non-empty pdf is left behind with keep_empty=True\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning), \\\n+            PdfPages(\"e.pdf\", keep_empty=True) as pdf:\n+        pdf.savefig(plt.figure())\n+    assert os.path.exists(\"e.pdf\")\n+\n+    # a non-empty pdf is left behind with keep_empty=False\n+    with PdfPages(\"f.pdf\", keep_empty=False) as pdf:\n+        pdf.savefig(plt.figure())\n+    assert os.path.exists(\"f.pdf\")\n+\n+\n @needs_pgf_xelatex\n def test_tex_restart_after_error():\n     fig = plt.figure()\n",
  "problem_statement": "Change PdfPages to default to keep_empty=False and eventually deprecate keep_empty\nPdfPages has an option, `keep_empty`, that sets whether a PdfPages object with *zero* figures is written to the disk at all or not.  This was introduced in #2453; previously PdfPages behaved as if `keep_empty=True` (and this was left the default to maintain backcompat).\r\n\r\nIn fact, a pdf file with zero pages is simply not a valid pdf document.  See e.g. the pdf standard (https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf) p. 33: \"A PDF document consists of a collection of objects that together describe the appearance of *one or more pages*...\" (emphasis mine).  Or one can simply check that the empty file created by `PdfPages(\"/tmp/foo.pdf\").close()` is indeed deemed invalid (error-on-open) by at least Acrobat, mupdf, and xpdf.\r\n\r\nThus I propose to eventually stop generating such invalid files at all via switching the default value to `keep_empty=False` and eventually killing the kwarg (deprecation strategy TBD, perhaps warn (with a suppress_warning kwarg) if such a file would have been created, yada yada).\r\n\r\n(Apparently multipage support in mplcairo is getting used, and cairo cannot generate zero-page pdfs, so that's how I found out about this...)\n",
  "hints_text": "Sorry to barge in, but this seems related:\r\n\r\n```python\r\nfrom matplotlib import pyplot as plt\r\nfrom matplotlib.backends.backend_pdf import PdfPages\r\n\r\nfig = plt.figure()\r\nplt.plot(range(10))\r\nPdfPages('/tmp/foo.pdf').savefig(fig)\r\n```\r\n…happily & silently generates an invalid PDF file like the one described above. The example given in the [documentation for `PdfPages`](https://matplotlib.org/api/backend_pdf_api.html#matplotlib.backends.backend_pdf.PdfPages) *shows* it being used as a context manager, but does not indicate that it can **only** be used as a context manager; nor is there any warning or exception raised. (I think this is also the cause of #9798.)\r\n\r\nOne solution to my point—but not the original issue—would be to add:\r\n\r\n```python\r\nclass PdfPages(object):\r\n    # ...\r\n\r\n    def __del__(self):\r\n        self.close()\r\n```\r\n\r\nMaybe these could be fixed together.\nThis issue has been marked \"inactive\" because it has been 365 days since the last comment. If this issue is still present in recent Matplotlib releases, or the feature request is still wanted, please leave a comment and this label will be removed. If there are no updates in another 30 days, this issue will be automatically closed, but you are free to re-open or create a new issue if needed. We value issue reports, and this procedure is meant to help us resurface and prioritize issues that have not been addressed yet, not make them disappear.  Thanks for your help!\n@anntzer Do you think this is still worth following up? I‘m inclined to raise instead of doing nothing. („Errors should never pass silently“). - This would also be a simpler deprecation strategy than a suppress_warning kwarg.\nAgreed with following up on this.\r\nOne problem with emitting an exception is how to combine this (if we want to do so) with https://github.com/matplotlib/matplotlib/issues/11771#issuecomment-440301925, or similarly what behavior do we want for\r\n```python\r\npdf = PdfPages(...)\r\n# perhaps print a page, or not\r\n# end of program\r\n```\r\nCurrently this simply leaves an invalid (single-page missing footer if a page was printed, empty and missing footer if no page was printed) pdf file on disk.  The option suggested by @khaeru (call close() on `__del__`) would make the pdf file valid if a page has been printed, but that means that if no page is printed, then we are trying to throw an exception from within `__del__`, which is a bad idea (https://docs.python.org/3/reference/datamodel.html#object.__del__).\r\n\r\nHence I think the options are\r\n- switch to keep_empty=False, always, ultimately removing support for keep_empty=True (this can be done with a normal deprecation that only affects users that actually rely on the keep_empty=True behavior)\r\n- switch the behavior to \"you must use PdfPages as a contextmanager\" (wrapping in an ExitStack if you want to use it across multiple functions), deprecating manual calling of close(); this way the exception gets raised in `__exit__` instead, which is not as bad as `__del__` though still not great (you need a try... except around the entire with block if you want to handle that)\r\n- warn instead of raise for empty files -- also not great, as catching warnings is not fun.\r\n\r\nPerhaps the first option is the practical one.",
  "created_at": "2023-08-08T08:50:37Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_backend_pgf.py::test_multipage_keep_empty\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_backend_pdf.py::test_use14corefonts[pdf]\", \"lib/matplotlib/tests/test_backend_pdf.py::test_embed_fonts[3-DejaVu\", \"lib/matplotlib/tests/test_backend_pdf.py::test_embed_fonts[42-DejaVu\", \"lib/matplotlib/tests/test_backend_pdf.py::test_multipage_pagecount\", \"lib/matplotlib/tests/test_backend_pdf.py::test_multipage_properfinalize\", \"lib/matplotlib/tests/test_backend_pdf.py::test_composite_image\", \"lib/matplotlib/tests/test_backend_pdf.py::test_indexed_image\", \"lib/matplotlib/tests/test_backend_pdf.py::test_savefig_metadata\", \"lib/matplotlib/tests/test_backend_pdf.py::test_invalid_metadata\", \"lib/matplotlib/tests/test_backend_pdf.py::test_multipage_metadata\", \"lib/matplotlib/tests/test_backend_pdf.py::test_text_urls\", \"lib/matplotlib/tests/test_backend_pdf.py::test_text_rotated_urls\", \"lib/matplotlib/tests/test_backend_pdf.py::test_pdfpages_fspath\", \"lib/matplotlib/tests/test_backend_pdf.py::test_hatching_legend[pdf]\", \"lib/matplotlib/tests/test_backend_pdf.py::test_grayscale_alpha[pdf]\", \"lib/matplotlib/tests/test_backend_pdf.py::test_pdf_eps_savefig_when_color_is_none[pdf]\", \"lib/matplotlib/tests/test_backend_pdf.py::test_pdf_eps_savefig_when_color_is_none[eps]\", \"lib/matplotlib/tests/test_backend_pdf.py::test_failing_latex\", \"lib/matplotlib/tests/test_backend_pdf.py::test_empty_rasterized\", \"lib/matplotlib/tests/test_backend_pdf.py::test_kerning[pdf]\", \"lib/matplotlib/tests/test_backend_pdf.py::test_glyphs_subset\", \"lib/matplotlib/tests/test_backend_pgf.py::test_tex_special_chars\", \"lib/matplotlib/tests/test_backend_pgf.py::test_xelatex[pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdflatex[pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pathclip\", \"lib/matplotlib/tests/test_backend_pgf.py::test_mixedmode[pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_bbox_inches\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages[lualatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages[pdflatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages[xelatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages_metadata_check[lualatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages_metadata_check[pdflatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_pdf_pages_metadata_check[xelatex]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_tex_restart_after_error\", \"lib/matplotlib/tests/test_backend_pgf.py::test_bbox_inches_tight\", \"lib/matplotlib/tests/test_backend_pgf.py::test_png_transparency\", \"lib/matplotlib/tests/test_backend_pgf.py::test_unknown_font\", \"lib/matplotlib/tests/test_backend_pgf.py::test_minus_signs_with_tex[pdflatex-pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_minus_signs_with_tex[xelatex-pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_minus_signs_with_tex[lualatex-pdf]\", \"lib/matplotlib/tests/test_backend_pgf.py::test_sketch_params\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.833344",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}