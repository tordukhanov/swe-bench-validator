{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-13173",
  "base_commit": "0ccd0b8aec14b4212d25a3171c5a5b6b5a23c79a",
  "patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -45,7 +45,7 @@\n     GeneratorsError,\n )\n \n-from sympy.utilities import group, sift, public\n+from sympy.utilities import group, sift, public, filldedent\n \n import sympy.polys\n import mpmath\n@@ -56,8 +56,7 @@\n \n from sympy.polys import polyoptions as options\n \n-from sympy.core.compatibility import iterable, range\n-\n+from sympy.core.compatibility import iterable, range, ordered\n \n @public\n class Poly(Expr):\n@@ -4426,6 +4425,12 @@ def degree(f, gen=0):\n             p, _ = poly_from_expr(f.as_expr())\n         if gen not in p.gens:\n             return S.Zero\n+    elif not f.is_Poly and len(f.free_symbols) > 1:\n+        raise TypeError(filldedent('''\n+         A symbolic generator of interest is required for a multivariate\n+         expression like func = %s, e.g. degree(func, gen = %s) instead of\n+         degree(func, gen = %s).\n+        ''' % (f, next(ordered(f.free_symbols)), gen)))\n \n     return Integer(p.degree(gen))\n \n",
  "test_patch": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -1166,10 +1166,10 @@ def test_Poly_degree():\n     assert degree(x*y**2, y) == 2\n     assert degree(x*y**2, z) == 0\n \n-    assert degree(y**2+x**3) == 3\n-    assert degree(y**2+x**3, 1) == 2\n     assert degree(pi) == 1\n \n+    raises(TypeError, lambda: degree(y**2 + x**3))\n+    raises(TypeError, lambda: degree(y**2 + x**3, 1))\n     raises(PolynomialError, lambda: degree(x, 1.1))\n \n     assert degree(Poly(0,x),z) == -oo\n",
  "problem_statement": "degree(multivariate) -> degree of first generator\nWhen giving the degree function a multivariate expression, the default degree returned is for the first generator which is chosen canonically but arbitrarily. When the degree method of Poly is called, this is not so bad because one would/should know what the generators are.  For the case of using the function, however, I believe it allows ambiguity to pass silently by not requiring the generator to be specified.\r\n\r\n```\r\ndegree(x + x**2) -> 2 this is ok, there is no ambiguity\r\n```\r\nHere, the return value depends on the symbols chosen\r\n\r\n```\r\ndegree(a + b**2) -> 1\r\ndegree(b + a**2) -> 2\r\n```\n",
  "hints_text": "",
  "created_at": "2017-08-22T16:57:46Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_Poly_degree\"]",
  "PASS_TO_PASS": "[\"test_Poly_from_dict\", \"test_Poly_from_list\", \"test_Poly_from_poly\", \"test_Poly_from_expr\", \"test_Poly__new__\", \"test_Poly__args\", \"test_Poly__gens\", \"test_Poly_zero\", \"test_Poly_one\", \"test_Poly__unify\", \"test_Poly_free_symbols\", \"test_PurePoly_free_symbols\", \"test_Poly__eq__\", \"test_PurePoly__eq__\", \"test_PurePoly_Poly\", \"test_Poly_get_domain\", \"test_Poly_set_domain\", \"test_Poly_get_modulus\", \"test_Poly_set_modulus\", \"test_Poly_add_ground\", \"test_Poly_sub_ground\", \"test_Poly_mul_ground\", \"test_Poly_quo_ground\", \"test_Poly_exquo_ground\", \"test_Poly_abs\", \"test_Poly_neg\", \"test_Poly_add\", \"test_Poly_sub\", \"test_Poly_mul\", \"test_Poly_sqr\", \"test_Poly_pow\", \"test_Poly_divmod\", \"test_Poly_eq_ne\", \"test_Poly_nonzero\", \"test_Poly_properties\", \"test_Poly_is_irreducible\", \"test_Poly_subs\", \"test_Poly_replace\", \"test_Poly_reorder\", \"test_Poly_ltrim\", \"test_Poly_has_only_gens\", \"test_Poly_to_ring\", \"test_Poly_to_field\", \"test_Poly_to_exact\", \"test_Poly_retract\", \"test_Poly_slice\", \"test_Poly_coeffs\", \"test_Poly_monoms\", \"test_Poly_terms\", \"test_Poly_all_coeffs\", \"test_Poly_all_monoms\", \"test_Poly_all_terms\", \"test_Poly_termwise\", \"test_Poly_length\", \"test_Poly_as_dict\", \"test_Poly_as_expr\", \"test_Poly_lift\", \"test_Poly_deflate\", \"test_Poly_inject\", \"test_Poly_eject\", \"test_Poly_exclude\", \"test_Poly__gen_to_level\", \"test_Poly_degree_list\", \"test_Poly_total_degree\", \"test_Poly_homogenize\", \"test_Poly_homogeneous_order\", \"test_Poly_LC\", \"test_Poly_TC\", \"test_Poly_EC\", \"test_Poly_coeff\", \"test_Poly_nth\", \"test_Poly_LM\", \"test_Poly_LM_custom_order\", \"test_Poly_EM\", \"test_Poly_LT\", \"test_Poly_ET\", \"test_Poly_max_norm\", \"test_Poly_l1_norm\", \"test_Poly_clear_denoms\", \"test_Poly_rat_clear_denoms\", \"test_Poly_integrate\", \"test_Poly_diff\", \"test_issue_9585\", \"test_Poly_eval\", \"test_Poly___call__\", \"test_parallel_poly_from_expr\", \"test_pdiv\", \"test_div\", \"test_gcdex\", \"test_revert\", \"test_subresultants\", \"test_resultant\", \"test_discriminant\", \"test_dispersion\", \"test_gcd_list\", \"test_lcm_list\", \"test_gcd\", \"test_gcd_numbers_vs_polys\", \"test_terms_gcd\", \"test_trunc\", \"test_monic\", \"test_content\", \"test_primitive\", \"test_compose\", \"test_shift\", \"test_transform\", \"test_gff\", \"test_sqf_norm\", \"test_sqf\", \"test_factor_large\", \"test_intervals\", \"test_refine_root\", \"test_count_roots\", \"test_Poly_root\", \"test_real_roots\", \"test_all_roots\", \"test_nroots\", \"test_ground_roots\", \"test_nth_power_roots_poly\", \"test_cancel\", \"test_reduced\", \"test_groebner\", \"test_fglm\", \"test_is_zero_dimensional\", \"test_GroebnerBasis\", \"test_poly\", \"test_keep_coeff\", \"test_noncommutative\", \"test_to_rational_coeffs\", \"test_factor_terms\", \"test_issue_11198\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.080360",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}