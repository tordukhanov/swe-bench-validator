{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-26472",
  "base_commit": "e4905bf8ae7d2f58025442018606f59641daa226",
  "patch": "diff --git a/lib/matplotlib/backend_bases.py b/lib/matplotlib/backend_bases.py\n--- a/lib/matplotlib/backend_bases.py\n+++ b/lib/matplotlib/backend_bases.py\n@@ -45,7 +45,7 @@\n import matplotlib as mpl\n from matplotlib import (\n     _api, backend_tools as tools, cbook, colors, _docstring, text,\n-    _tight_bbox, transforms, widgets, get_backend, is_interactive, rcParams)\n+    _tight_bbox, transforms, widgets, is_interactive, rcParams)\n from matplotlib._pylab_helpers import Gcf\n from matplotlib.backend_managers import ToolManager\n from matplotlib.cbook import _setattr_cm\n@@ -2736,8 +2736,8 @@ def show(self):\n             # thus warrants a warning.\n             return\n         raise NonGuiException(\n-            f\"Matplotlib is currently using {get_backend()}, which is a \"\n-            f\"non-GUI backend, so cannot show the figure.\")\n+            f\"{type(self.canvas).__name__} is non-interactive, and thus cannot be \"\n+            f\"shown\")\n \n     def destroy(self):\n         pass\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -420,11 +420,16 @@ def draw_if_interactive():\n     # Need to keep a global reference to the backend for compatibility reasons.\n     # See https://github.com/matplotlib/matplotlib/issues/6092\n     matplotlib.backends.backend = newbackend  # type: ignore[attr-defined]\n+\n     if not cbook._str_equal(old_backend, newbackend):\n+        if get_fignums():\n+            _api.warn_deprecated(\"3.8\", message=(\n+                \"Auto-close()ing of figures upon backend switching is deprecated since \"\n+                \"%(since)s and will be removed %(removal)s.  To suppress this warning, \"\n+                \"explicitly call plt.close('all') first.\"))\n         close(\"all\")\n \n-    # make sure the repl display hook is installed in case we become\n-    # interactive\n+    # Make sure the repl display hook is installed in case we become interactive.\n     install_repl_displayhook()\n \n \n",
  "test_patch": "diff --git a/lib/matplotlib/testing/conftest.py b/lib/matplotlib/testing/conftest.py\n--- a/lib/matplotlib/testing/conftest.py\n+++ b/lib/matplotlib/testing/conftest.py\n@@ -75,7 +75,9 @@ def mpl_test_settings(request):\n         try:\n             yield\n         finally:\n-            matplotlib.use(prev_backend)\n+            if backend is not None:\n+                plt.close(\"all\")\n+                matplotlib.use(prev_backend)\n \n \n @pytest.fixture\ndiff --git a/lib/matplotlib/tests/test_backend_bases.py b/lib/matplotlib/tests/test_backend_bases.py\n--- a/lib/matplotlib/tests/test_backend_bases.py\n+++ b/lib/matplotlib/tests/test_backend_bases.py\n@@ -85,13 +85,13 @@ def test_non_gui_warning(monkeypatch):\n     with pytest.warns(UserWarning) as rec:\n         plt.show()\n         assert len(rec) == 1\n-        assert ('Matplotlib is currently using pdf, which is a non-GUI backend'\n+        assert ('FigureCanvasPdf is non-interactive, and thus cannot be shown'\n                 in str(rec[0].message))\n \n     with pytest.warns(UserWarning) as rec:\n         plt.gcf().show()\n         assert len(rec) == 1\n-        assert ('Matplotlib is currently using pdf, which is a non-GUI backend'\n+        assert ('FigureCanvasPdf is non-interactive, and thus cannot be shown'\n                 in str(rec[0].message))\n \n \ndiff --git a/lib/matplotlib/tests/test_backends_interactive.py b/lib/matplotlib/tests/test_backends_interactive.py\n--- a/lib/matplotlib/tests/test_backends_interactive.py\n+++ b/lib/matplotlib/tests/test_backends_interactive.py\n@@ -167,6 +167,7 @@ def check_alt_backend(alt_backend):\n             fig = plt.figure()\n             assert (type(fig.canvas).__module__ ==\n                     f\"matplotlib.backends.backend_{alt_backend}\")\n+            plt.close(\"all\")\n \n         if importlib.util.find_spec(\"cairocffi\"):\n             check_alt_backend(backend[:-3] + \"cairo\")\ndiff --git a/lib/matplotlib/tests/test_pyplot.py b/lib/matplotlib/tests/test_pyplot.py\n--- a/lib/matplotlib/tests/test_pyplot.py\n+++ b/lib/matplotlib/tests/test_pyplot.py\n@@ -439,7 +439,8 @@ def test_switch_backend_no_close():\n     assert len(plt.get_fignums()) == 2\n     plt.switch_backend('agg')\n     assert len(plt.get_fignums()) == 2\n-    plt.switch_backend('svg')\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning):\n+        plt.switch_backend('svg')\n     assert len(plt.get_fignums()) == 0\n \n \n",
  "problem_statement": "Switching to inline backend closes GUI windows\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nWhen a plot is made with the `qt5` backend on and then the backend is changed to `inline`, the active plot window(s) are closed. This makes it very difficult to switch cleanly between backends within a notebook. The two mediocre workarounds I can see are:\r\n - always specify the backend before plotting (since you can't automatically \"switch back\")\r\n - use `plt.show(block=True)` and switch back to `inline` after the user is done with the GUI figure. This has the downside of locking the Notebook execution while the figure is live.\r\n\r\n**Code for reproduction**\r\n\r\nThe linked gist shows what I'd like to accomplish which is a context manager that enables matplotlib plotting in a GUI window from within a Notebook that is otherwise using the `inline` backend. Basically I want the notebook to use inline (for a variety of reasons), but I occasionally wish I could interact with the data in a separate figure. \r\nhttps://gist.github.com/flutefreak7/65d824358122360911e2d4c43085007a\r\n\r\nAs a side note, easy switching between `inline` and `notebook`/`widget` backends would also scratch part of this itch, but the interactive notebook backends still don't enable full screen usage or easily throwing a plot on another monitor. `ipyvolume` has full screen figured out, so that seems doable.\r\n\r\nHere's the context manager I wish worked:\r\n```python\r\n# Paste your code here\r\n@contextmanager\r\ndef window(block=False):\r\n    %matplotlib qt5\r\n    plt.ioff()\r\n    yield\r\n    plt.show()\r\n    # The switch back to inline closes the qt5 plot\r\n    plt.ion()\r\n    %matplotlib inline\r\n\r\nwith window():\r\n    plt.plot([1, 3, 2])\r\n```\r\n\r\n**Actual outcome**\r\n\r\nThe outcome of the above code is that a plot window flashes into existence for a split second, then is closed when the `%matplotlib inline` call is processed.\r\n\r\n**Expected outcome**\r\n\r\nIt would be great if plots created with the qt5 backend could stay visible while other plots with the inline backend were also being created.  If use `%gui qt` (to establish a reliable event loop) and create a bunch of Qt windows by other means, they live concurrently with the Notebook as long as the kernel is alive. I'd like matplotlib GUI figures to be able to live on regardless of the current backend.\r\n\r\n**Matplotlib version**\r\n<!--Please specify your platform and versions of the relevant libraries you are using:-->\r\n  * Operating system:\r\n  * Matplotlib version: 3.1.1\r\n  * Matplotlib backend (`print(matplotlib.get_backend())`): `inline` and `qt5agg`\r\n  * Python version: 3.7.3\r\n  * Jupyter version (if applicable):\r\n```\r\njupyter                           1.0.0\r\njupyter-client                    5.3.4\r\njupyter-console                   6.0.0\r\njupyter-contrib-core              0.3.3\r\njupyter-contrib-nbextensions      0.5.1\r\njupyter-core                      4.6.0\r\njupyter-highlight-selected-word   0.2.0\r\njupyter-latex-envs                1.4.6\r\njupyter-nbextensions-configurator 0.4.1\r\njupyterlab                        1.0.5\r\n```\r\n\r\n<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->\r\n<!--If you installed from conda, please specify which channel you used if not the default-->\r\n\r\n\n",
  "hints_text": "I don't really have a good feel for whether what you are asking for is possible or not, but have you tried the `notebook` backend, or the `widgets` backend?  They seem suited to what you want to do.  \nI guess I have a few issues with `notebook` and `widgets`:\r\n - You can't easily switch between `inline` and `notebook`/`widgets`\r\n - Plots made with `notebook`/`widgets` don't have a good static representation in an exported copy of a notebook (like HTML) which I use to share work with non-devs\r\n - Plots made with `widgets` backend don't show up when a notebook is opened but hasn't yet been run (showing \"Error displaying widget: model not found\" instead of showing the plot as it was last generated) - this also affects visibility of plots in notebooks rendered on GitHub, GitLab, nbviewer, etc\r\n - Embedded plots can never use the whole screen or any of my extra monitors - a big part of why my team wants the ability to \"pop-out\" a plot into it's own window is so that it can be expanded to fill a monitor - possibly a different monitor than the one jupyterlab is in.\nJust a note that `notebook` plots certainly have a static html, but agree that `widget` plots don't.\r\n\r\nFair enough about \"pop-out\" plots.  Hopefully someone here can speak to how those work or if there is a workflow that can suit your needs.\r\n\nSee also https://github.com/matplotlib/matplotlib/pull/14471.\r\n\r\nI *think* this should be doable (if the event loops are not compatible we error out anyways, but otherwise I don't see why we can't have e.g. qt5agg and qt5cairo windows coexisting)?  Does simply removing the call to `close(\"all\")` in the implementation of `pyplot.switch_backend` work for you?\r\n\r\nIf that works there's a reasonable way forward with the behavior change (of ultimately not calling `close(\"all\")`: during the transition period, warn if any windows are getting closed and tell the user to call `close(\"all\")` explicitly.",
  "created_at": "2023-08-08T20:53:05Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_backend_bases.py::test_non_gui_warning\", \"lib/matplotlib/tests/test_pyplot.py::test_switch_backend_no_close\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_backend_bases.py::test_uses_per_path\", \"lib/matplotlib/tests/test_backend_bases.py::test_canvas_ctor\", \"lib/matplotlib/tests/test_backend_bases.py::test_get_default_filename\", \"lib/matplotlib/tests/test_backend_bases.py::test_canvas_change\", \"lib/matplotlib/tests/test_backend_bases.py::test_grab_clear\", \"lib/matplotlib/tests/test_backend_bases.py::test_location_event_position[42-24]\", \"lib/matplotlib/tests/test_backend_bases.py::test_location_event_position[None-42]\", \"lib/matplotlib/tests/test_backend_bases.py::test_location_event_position[None-None]\", \"lib/matplotlib/tests/test_backend_bases.py::test_location_event_position[200-100.01]\", \"lib/matplotlib/tests/test_backend_bases.py::test_location_event_position[205.75-2.0]\", \"lib/matplotlib/tests/test_backend_bases.py::test_pick\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_zoom\", \"lib/matplotlib/tests/test_backend_bases.py::test_widgetlock_zoompan\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-1-expected0-vertical-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-1-expected0-vertical-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-1-expected0-horizontal-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-1-expected0-horizontal-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-3-expected1-vertical-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-3-expected1-vertical-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-3-expected1-horizontal-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-3-expected1-horizontal-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-1-expected2-vertical-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-1-expected2-vertical-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-1-expected2-horizontal-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-1-expected2-horizontal-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-3-expected3-vertical-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-3-expected3-vertical-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-3-expected3-horizontal-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-3-expected3-horizontal-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_toolbar_zoompan\", \"lib/matplotlib/tests/test_backend_bases.py::test_toolbar_home_restores_autoscale\", \"lib/matplotlib/tests/test_backend_bases.py::test_draw[svg]\", \"lib/matplotlib/tests/test_backend_bases.py::test_draw[ps]\", \"lib/matplotlib/tests/test_backend_bases.py::test_draw[pdf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_draw[pgf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend0-expectedxlim0-expectedylim0]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend1-expectedxlim1-expectedylim1]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend2-expectedxlim2-expectedylim2]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend3-expectedxlim3-expectedylim3]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend4-expectedxlim4-expectedylim4]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend5-expectedxlim5-expectedylim5]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend6-expectedxlim6-expectedylim6]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend7-expectedxlim7-expectedylim7]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend8-expectedxlim8-expectedylim8]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend9-expectedxlim9-expectedylim9]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend10-expectedxlim10-expectedylim10]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend11-expectedxlim11-expectedylim11]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend12-expectedxlim12-expectedylim12]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend13-expectedxlim13-expectedylim13]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[x-mouseend14-expectedxlim14-expectedylim14]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[y-mouseend15-expectedxlim15-expectedylim15]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[control-mouseend16-expectedxlim16-expectedylim16]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[control-mouseend17-expectedxlim17-expectedylim17]\", \"lib/matplotlib/tests/test_backend_bases.py::test_toolmanager_remove\", \"lib/matplotlib/tests/test_backend_bases.py::test_toolmanager_get_tool\", \"lib/matplotlib/tests/test_backend_bases.py::test_toolmanager_update_keymap\", \"lib/matplotlib/tests/test_backends_interactive.py::test_lazy_auto_backend_selection\", \"lib/matplotlib/tests/test_backends_interactive.py::test_qt_missing\", \"lib/matplotlib/tests/test_backends_interactive.py::test_webagg\", \"lib/matplotlib/tests/test_pyplot.py::test_copy_docstring_and_deprecators\", \"lib/matplotlib/tests/test_pyplot.py::test_pyplot_box\", \"lib/matplotlib/tests/test_pyplot.py::test_stackplot_smoke\", \"lib/matplotlib/tests/test_pyplot.py::test_nrows_error\", \"lib/matplotlib/tests/test_pyplot.py::test_ioff\", \"lib/matplotlib/tests/test_pyplot.py::test_ion\", \"lib/matplotlib/tests/test_pyplot.py::test_nested_ion_ioff\", \"lib/matplotlib/tests/test_pyplot.py::test_close\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_reuse\", \"lib/matplotlib/tests/test_pyplot.py::test_axes_kwargs\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_replace_projection\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_kwarg_collision\", \"lib/matplotlib/tests/test_pyplot.py::test_gca\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_projection_reuse\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_polar_normalization\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_change_projection\", \"lib/matplotlib/tests/test_pyplot.py::test_polar_second_call\", \"lib/matplotlib/tests/test_pyplot.py::test_fallback_position\", \"lib/matplotlib/tests/test_pyplot.py::test_set_current_figure_via_subfigure\", \"lib/matplotlib/tests/test_pyplot.py::test_set_current_axes_on_subfigure\", \"lib/matplotlib/tests/test_pyplot.py::test_pylab_integration\", \"lib/matplotlib/tests/test_pyplot.py::test_doc_pyplot_summary\", \"lib/matplotlib/tests/test_pyplot.py::test_minor_ticks\", \"lib/matplotlib/tests/test_pyplot.py::test_figure_hook\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.833663",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}