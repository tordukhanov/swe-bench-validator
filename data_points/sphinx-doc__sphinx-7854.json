{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7854",
  "base_commit": "66e55a02d125e7b65b211a7cf9b48506195e3bf4",
  "patch": "diff --git a/sphinx/domains/c.py b/sphinx/domains/c.py\n--- a/sphinx/domains/c.py\n+++ b/sphinx/domains/c.py\n@@ -28,7 +28,8 @@\n from sphinx.roles import SphinxRole, XRefRole\n from sphinx.util import logging\n from sphinx.util.cfamily import (\n-    NoOldIdError, ASTBaseBase, verify_description_mode, StringifyTransform,\n+    NoOldIdError, ASTBaseBase, ASTBaseParenExprList,\n+    verify_description_mode, StringifyTransform,\n     BaseParser, DefinitionError, UnsupportedMultiCharacterCharLiteral,\n     identifier_re, anon_identifier_re, integer_literal_re, octal_literal_re,\n     hex_literal_re, binary_literal_re, integers_literal_suffix_re,\n@@ -1053,7 +1054,7 @@ def describe_signature(self, signode: TextElement, mode: str,\n # Initializer\n ################################################################################\n \n-class ASTParenExprList(ASTBase):\n+class ASTParenExprList(ASTBaseParenExprList):\n     def __init__(self, exprs: List[ASTExpression]) -> None:\n         self.exprs = exprs\n \ndiff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -31,7 +31,8 @@\n from sphinx.transforms.post_transforms import ReferencesResolver\n from sphinx.util import logging\n from sphinx.util.cfamily import (\n-    NoOldIdError, ASTBaseBase, ASTAttribute, verify_description_mode, StringifyTransform,\n+    NoOldIdError, ASTBaseBase, ASTAttribute, ASTBaseParenExprList,\n+    verify_description_mode, StringifyTransform,\n     BaseParser, DefinitionError, UnsupportedMultiCharacterCharLiteral,\n     identifier_re, anon_identifier_re, integer_literal_re, octal_literal_re,\n     hex_literal_re, binary_literal_re, integers_literal_suffix_re,\n@@ -2742,7 +2743,7 @@ def describe_signature(self, signode: TextElement, mode: str,\n         signode += nodes.Text('...')\n \n \n-class ASTParenExprList(ASTBase):\n+class ASTParenExprList(ASTBaseParenExprList):\n     def __init__(self, exprs: List[Union[ASTExpression, ASTBracedInitList]]) -> None:\n         self.exprs = exprs\n \ndiff --git a/sphinx/util/cfamily.py b/sphinx/util/cfamily.py\n--- a/sphinx/util/cfamily.py\n+++ b/sphinx/util/cfamily.py\n@@ -12,7 +12,7 @@\n import warnings\n from copy import deepcopy\n from typing import (\n-    Any, Callable, List, Match, Pattern, Tuple, Union\n+    Any, Callable, List, Match, Optional, Pattern, Tuple, Union\n )\n \n from docutils import nodes\n@@ -148,16 +148,14 @@ def describe_signature(self, signode: TextElement) -> None:\n \n \n class ASTGnuAttribute(ASTBaseBase):\n-    def __init__(self, name: str, args: Any) -> None:\n+    def __init__(self, name: str, args: Optional[\"ASTBaseParenExprList\"]) -> None:\n         self.name = name\n         self.args = args\n \n     def _stringify(self, transform: StringifyTransform) -> str:\n         res = [self.name]\n         if self.args:\n-            res.append('(')\n             res.append(transform(self.args))\n-            res.append(')')\n         return ''.join(res)\n \n \n@@ -211,6 +209,11 @@ def describe_signature(self, signode: TextElement) -> None:\n \n ################################################################################\n \n+class ASTBaseParenExprList(ASTBaseBase):\n+    pass\n+\n+\n+################################################################################\n \n class UnsupportedMultiCharacterCharLiteral(Exception):\n     @property\n@@ -415,11 +418,8 @@ def _parse_attribute(self) -> ASTAttribute:\n             while 1:\n                 if self.match(identifier_re):\n                     name = self.matched_text\n-                    self.skip_ws()\n-                    if self.skip_string_and_ws('('):\n-                        self.fail('Parameterized GNU style attribute not yet supported.')\n-                    attrs.append(ASTGnuAttribute(name, None))\n-                    # TODO: parse arguments for the attribute\n+                    exprs = self._parse_paren_expression_list()\n+                    attrs.append(ASTGnuAttribute(name, exprs))\n                 if self.skip_string_and_ws(','):\n                     continue\n                 elif self.skip_string_and_ws(')'):\n@@ -447,3 +447,6 @@ def _parse_attribute(self) -> ASTAttribute:\n             return ASTParenAttribute(id, arg)\n \n         return None\n+\n+    def _parse_paren_expression_list(self) -> ASTBaseParenExprList:\n+        raise NotImplementedError\n",
  "test_patch": "diff --git a/tests/test_domain_c.py b/tests/test_domain_c.py\n--- a/tests/test_domain_c.py\n+++ b/tests/test_domain_c.py\n@@ -469,6 +469,8 @@ def test_attributes():\n     check('member', '__attribute__(()) int f', {1: 'f'})\n     check('member', '__attribute__((a)) int f', {1: 'f'})\n     check('member', '__attribute__((a, b)) int f', {1: 'f'})\n+    check('member', '__attribute__((optimize(3))) int f', {1: 'f'})\n+    check('member', '__attribute__((format(printf, 1, 2))) int f', {1: 'f'})\n     # style: user-defined id\n     check('member', 'id_attr int f', {1: 'f'})\n     # style: user-defined paren\ndiff --git a/tests/test_domain_cpp.py b/tests/test_domain_cpp.py\n--- a/tests/test_domain_cpp.py\n+++ b/tests/test_domain_cpp.py\n@@ -897,6 +897,8 @@ def test_attributes():\n     check('member', '__attribute__(()) int f', {1: 'f__i', 2: '1f'})\n     check('member', '__attribute__((a)) int f', {1: 'f__i', 2: '1f'})\n     check('member', '__attribute__((a, b)) int f', {1: 'f__i', 2: '1f'})\n+    check('member', '__attribute__((optimize(3))) int f', {1: 'f__i', 2: '1f'})\n+    check('member', '__attribute__((format(printf, 1, 2))) int f', {1: 'f__i', 2: '1f'})\n     # style: user-defined id\n     check('member', 'id_attr int f', {1: 'f__i', 2: '1f'})\n     # style: user-defined paren\n",
  "problem_statement": "Support for parameterized GNU style attributes on C++ code.\nHi folks.\r\n\r\nMy C++ codebase uses GNU attributes for code like \r\n\r\n`__attribute__ ((optimize(3))) void readMatrix(void)`\r\n\r\nUnfortunately, it looks like Sphinx doesn't support them. \r\n\r\n```\r\nException occurred:\r\n  File \"/usr/local/lib/python3.7/site-packages/sphinx/domains/cpp.py\", line 6099, in _parse_type\r\n    raise self._make_multi_error(prevErrors, header)\r\nsphinx.util.cfamily.DefinitionError: Error when parsing function declaration.\r\nIf the function has no return type:\r\n  Invalid C++ declaration: Parameterized GNU style attribute not yet supported. [error at 25]\r\n    __attribute__ ((optimize(3))) void readMatrix(void)\r\n    -------------------------^\r\nIf the function has a return type:\r\n  Invalid C++ declaration: Parameterized GNU style attribute not yet supported. [error at 25]\r\n    __attribute__ ((optimize(3))) void readMatrix(void)\r\n    -------------------------^\r\n```\r\n\r\nI'm running Sphinx 3.1.1, though this functionality doesn't appear to have changed in 4.\r\n\r\nI tried to get clever with the custom attribute support you offer, but can't seem to get that to work either.\r\n```\r\ncpp_id_attributes = [\"aligned\",\"packed\",\"weak\",\"always_inline\",\"noinline\",\"no-unroll-loops\",\"__attribute__((optimize(3)))\"]\r\ncpp_paren_attributes = [\"optimize\",\"__aligned__\",\"section\",\"deprecated\"]\r\n```\r\n\r\nIs there a right way to do this? I'd honestly be fine having the attributes stripped entirely for doc generation if there isn't another option.\r\n\r\nEven though I'm bumping up against a sharp edge, I really appreciate Sphinx. Thanks so much for making a useful tool. \n",
  "hints_text": "",
  "created_at": "2020-06-20T08:02:58Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"tests/test_domain_c.py::test_attributes\", \"tests/test_domain_cpp.py::test_attributes\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_c.py::test_expressions\", \"tests/test_domain_c.py::test_type_definitions\", \"tests/test_domain_c.py::test_macro_definitions\", \"tests/test_domain_c.py::test_member_definitions\", \"tests/test_domain_c.py::test_function_definitions\", \"tests/test_domain_c.py::test_nested_name\", \"tests/test_domain_c.py::test_union_definitions\", \"tests/test_domain_c.py::test_enum_definitions\", \"tests/test_domain_c.py::test_anon_definitions\", \"tests/test_domain_c.py::test_initializers\", \"tests/test_domain_c.py::test_build_domain_c\", \"tests/test_domain_c.py::test_build_domain_c_namespace\", \"tests/test_domain_c.py::test_build_domain_c_anon_dup_decl\", \"tests/test_domain_c.py::test_build_domain_c_semicolon\", \"tests/test_domain_c.py::test_cfunction\", \"tests/test_domain_c.py::test_cmember\", \"tests/test_domain_c.py::test_cvar\", \"tests/test_domain_cpp.py::test_fundamental_types\", \"tests/test_domain_cpp.py::test_expressions\", \"tests/test_domain_cpp.py::test_type_definitions\", \"tests/test_domain_cpp.py::test_concept_definitions\", \"tests/test_domain_cpp.py::test_member_definitions\", \"tests/test_domain_cpp.py::test_function_definitions\", \"tests/test_domain_cpp.py::test_operators\", \"tests/test_domain_cpp.py::test_nested_name\", \"tests/test_domain_cpp.py::test_class_definitions\", \"tests/test_domain_cpp.py::test_union_definitions\", \"tests/test_domain_cpp.py::test_enum_definitions\", \"tests/test_domain_cpp.py::test_anon_definitions\", \"tests/test_domain_cpp.py::test_templates\", \"tests/test_domain_cpp.py::test_requires_clauses\", \"tests/test_domain_cpp.py::test_template_args\", \"tests/test_domain_cpp.py::test_initializers\", \"tests/test_domain_cpp.py::test_xref_parsing\", \"tests/test_domain_cpp.py::test_build_domain_cpp_multi_decl_lookup\", \"tests/test_domain_cpp.py::test_build_domain_cpp_warn_template_param_qualified_name\", \"tests/test_domain_cpp.py::test_build_domain_cpp_backslash_ok\", \"tests/test_domain_cpp.py::test_build_domain_cpp_semicolon\", \"tests/test_domain_cpp.py::test_build_domain_cpp_anon_dup_decl\", \"tests/test_domain_cpp.py::test_build_domain_cpp_misuse_of_roles\", \"tests/test_domain_cpp.py::test_build_domain_cpp_with_add_function_parentheses_is_True\", \"tests/test_domain_cpp.py::test_build_domain_cpp_with_add_function_parentheses_is_False\", \"tests/test_domain_cpp.py::test_xref_consistency\"]",
  "environment_setup_commit": "f92fa6443fe6f457ab0c26d41eb229e825fda5e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.047190",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}