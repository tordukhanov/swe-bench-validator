{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-14821",
  "base_commit": "4c8c36d6e67d2a82bdd57d30837490cf59ea7b99",
  "patch": "diff --git a/sympy/printing/octave.py b/sympy/printing/octave.py\n--- a/sympy/printing/octave.py\n+++ b/sympy/printing/octave.py\n@@ -27,15 +27,18 @@\n                    \"asinh\", \"acosh\", \"atanh\", \"acoth\", \"asech\", \"acsch\",\n                    \"erfc\", \"erfi\", \"erf\", \"erfinv\", \"erfcinv\",\n                    \"besseli\", \"besselj\", \"besselk\", \"bessely\",\n-                   \"euler\", \"exp\", \"factorial\", \"floor\", \"fresnelc\",\n-                   \"fresnels\", \"gamma\", \"log\", \"polylog\", \"sign\", \"zeta\"]\n+                   \"bernoulli\", \"beta\", \"euler\", \"exp\", \"factorial\", \"floor\",\n+                   \"fresnelc\", \"fresnels\", \"gamma\", \"harmonic\", \"log\",\n+                   \"polylog\", \"sign\", \"zeta\"]\n \n # These functions have different names (\"Sympy\": \"Octave\"), more\n # generally a mapping to (argument_conditions, octave_function).\n known_fcns_src2 = {\n     \"Abs\": \"abs\",\n-    \"arg\": \"angle\",\n+    \"arg\": \"angle\",  # arg/angle ok in Octave but only angle in Matlab\n     \"ceiling\": \"ceil\",\n+    \"chebyshevu\": \"chebyshevU\",\n+    \"chebyshevt\": \"chebyshevT\",\n     \"Chi\": \"coshint\",\n     \"Ci\": \"cosint\",\n     \"conjugate\": \"conj\",\n@@ -43,12 +46,14 @@\n     \"Heaviside\": \"heaviside\",\n     \"im\": \"imag\",\n     \"laguerre\": \"laguerreL\",\n+    \"LambertW\": \"lambertw\",\n     \"li\": \"logint\",\n     \"loggamma\": \"gammaln\",\n     \"Max\": \"max\",\n     \"Min\": \"min\",\n     \"polygamma\": \"psi\",\n     \"re\": \"real\",\n+    \"RisingFactorial\": \"pochhammer\",\n     \"Shi\": \"sinhint\",\n     \"Si\": \"sinint\",\n }\n@@ -381,8 +386,18 @@ def _print_Idx(self, expr):\n         return self._print(expr.label)\n \n \n+    def _print_KroneckerDelta(self, expr):\n+        prec = PRECEDENCE[\"Pow\"]\n+        return \"double(%s == %s)\" % tuple(self.parenthesize(x, prec)\n+                                          for x in expr.args)\n+\n+\n     def _print_Identity(self, expr):\n-        return \"eye(%s)\" % self._print(expr.shape[0])\n+        shape = expr.shape\n+        if len(shape) == 2 and shape[0] == shape[1]:\n+            shape = [shape[0]]\n+        s = \", \".join(self._print(n) for n in shape)\n+        return \"eye(\" + s + \")\"\n \n \n     def _print_uppergamma(self, expr):\n@@ -441,10 +456,22 @@ def _print_airybiprime(self, expr):\n         return \"airy(3, %s)\" % self._print(expr.args[0])\n \n \n-    def _print_LambertW(self, expr):\n-        # argument order is reversed\n-        args = \", \".join([self._print(x) for x in reversed(expr.args)])\n-        return \"lambertw(\" + args + \")\"\n+    def _print_expint(self, expr):\n+        mu, x = expr.args\n+        if mu != 1:\n+            return self._print_not_supported(expr)\n+        return \"expint(%s)\" % self._print(x)\n+\n+\n+    def _one_or_two_reversed_args(self, expr):\n+        assert len(expr.args) <= 2\n+        return '{name}({args})'.format(\n+            name=self.known_functions[expr.__class__.__name__],\n+            args=\", \".join([self._print(x) for x in reversed(expr.args)])\n+        )\n+\n+\n+    _print_DiracDelta = _print_LambertW = _one_or_two_reversed_args\n \n \n     def _nested_binary_math_func(self, expr):\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_octave.py b/sympy/printing/tests/test_octave.py\n--- a/sympy/printing/tests/test_octave.py\n+++ b/sympy/printing/tests/test_octave.py\n@@ -1,8 +1,15 @@\n from sympy.core import (S, pi, oo, symbols, Function, Rational, Integer,\n                         Tuple, Symbol)\n from sympy.core import EulerGamma, GoldenRatio, Catalan, Lambda, Mul, Pow\n-from sympy.functions import (Piecewise, sqrt, ceiling, exp, sin, cos, LambertW,\n-                             sinc, Max, Min, arg, im, re, zeta)\n+from sympy.functions import (arg, atan2, bernoulli, beta, ceiling, chebyshevu,\n+                             chebyshevt, conjugate, DiracDelta, exp, expint,\n+                             factorial, floor, harmonic, Heaviside, im,\n+                             laguerre, LambertW, log, Max, Min, Piecewise,\n+                             polylog, re, RisingFactorial, sign, sinc, sqrt,\n+                             zeta)\n+from sympy.functions import (sin, cos, tan, cot, sec, csc, asin, acos, acot,\n+                             atan, asec, acsc, sinh, cosh, tanh, coth, csch,\n+                             sech, asinh, acosh, atanh, acoth, asech, acsch)\n from sympy.utilities.pytest import raises\n from sympy.utilities.lambdify import implemented_function\n from sympy.matrices import (eye, Matrix, MatrixSymbol, Identity,\n@@ -10,7 +17,12 @@\n from sympy.functions.special.bessel import (jn, yn, besselj, bessely, besseli,\n                                             besselk, hankel1, hankel2, airyai,\n                                             airybi, airyaiprime, airybiprime)\n-from sympy.functions.special.gamma_functions import (lowergamma, uppergamma)\n+from sympy.functions.special.gamma_functions import (gamma, lowergamma,\n+                                                     uppergamma, loggamma,\n+                                                     polygamma)\n+from sympy.functions.special.error_functions import (Chi, Ci, erf, erfc, erfi,\n+                                                     erfcinv, erfinv, fresnelc,\n+                                                     fresnels, li, Shi, Si)\n from sympy.utilities.pytest import XFAIL\n from sympy.core.compatibility import range\n \n@@ -36,11 +48,44 @@ def test_Rational():\n \n def test_Function():\n     assert mcode(sin(x) ** cos(x)) == \"sin(x).^cos(x)\"\n+    assert mcode(sign(x)) == \"sign(x)\"\n+    assert mcode(exp(x)) == \"exp(x)\"\n+    assert mcode(log(x)) == \"log(x)\"\n+    assert mcode(factorial(x)) == \"factorial(x)\"\n+    assert mcode(floor(x)) == \"floor(x)\"\n+    assert mcode(atan2(y, x)) == \"atan2(y, x)\"\n+    assert mcode(beta(x, y)) == 'beta(x, y)'\n+    assert mcode(polylog(x, y)) == 'polylog(x, y)'\n+    assert mcode(harmonic(x)) == 'harmonic(x)'\n+    assert mcode(bernoulli(x)) == \"bernoulli(x)\"\n+    assert mcode(bernoulli(x, y)) == \"bernoulli(x, y)\"\n+\n+\n+def test_Function_change_name():\n     assert mcode(abs(x)) == \"abs(x)\"\n     assert mcode(ceiling(x)) == \"ceil(x)\"\n     assert mcode(arg(x)) == \"angle(x)\"\n     assert mcode(im(x)) == \"imag(x)\"\n     assert mcode(re(x)) == \"real(x)\"\n+    assert mcode(conjugate(x)) == \"conj(x)\"\n+    assert mcode(chebyshevt(y, x)) == \"chebyshevT(y, x)\"\n+    assert mcode(chebyshevu(y, x)) == \"chebyshevU(y, x)\"\n+    assert mcode(laguerre(x, y)) == \"laguerreL(x, y)\"\n+    assert mcode(Chi(x)) == \"coshint(x)\"\n+    assert mcode(Shi(x)) ==  \"sinhint(x)\"\n+    assert mcode(Ci(x)) == \"cosint(x)\"\n+    assert mcode(Si(x)) ==  \"sinint(x)\"\n+    assert mcode(li(x)) ==  \"logint(x)\"\n+    assert mcode(loggamma(x)) ==  \"gammaln(x)\"\n+    assert mcode(polygamma(x, y)) == \"psi(x, y)\"\n+    assert mcode(RisingFactorial(x, y)) == \"pochhammer(x, y)\"\n+    assert mcode(DiracDelta(x)) == \"dirac(x)\"\n+    assert mcode(DiracDelta(x, 3)) == \"dirac(3, x)\"\n+    assert mcode(Heaviside(x)) == \"heaviside(x)\"\n+    assert mcode(Heaviside(x, y)) == \"heaviside(x, y)\"\n+\n+\n+def test_minmax():\n     assert mcode(Max(x, y) + Min(x, y)) == \"max(x, y) + min(x, y)\"\n     assert mcode(Max(x, y, z)) == \"max(x, max(y, z))\"\n     assert mcode(Min(x, y, z)) == \"min(x, min(y, z))\"\n@@ -150,6 +195,13 @@ def test_boolean():\n     assert mcode((x | y) & z) == \"z & (x | y)\"\n \n \n+def test_KroneckerDelta():\n+    from sympy.functions import KroneckerDelta\n+    assert mcode(KroneckerDelta(x, y)) == \"double(x == y)\"\n+    assert mcode(KroneckerDelta(x, y + 1)) == \"double(x == (y + 1))\"\n+    assert mcode(KroneckerDelta(2**x, y)) == \"double((2.^x) == y)\"\n+\n+\n def test_Matrices():\n     assert mcode(Matrix(1, 1, [10])) == \"10\"\n     A = Matrix([[1, sin(x/2), abs(x)],\n@@ -322,6 +374,20 @@ def test_octave_not_supported():\n     )\n \n \n+def test_octave_expint():\n+    assert mcode(expint(1, x)) == \"expint(x)\"\n+    assert mcode(expint(2, x)) == (\n+        \"% Not supported in Octave:\\n\"\n+        \"% expint\\n\"\n+        \"expint(2, x)\"\n+    )\n+    assert mcode(expint(y, x)) == (\n+        \"% Not supported in Octave:\\n\"\n+        \"% expint\\n\"\n+        \"expint(y, x)\"\n+    )\n+\n+\n def test_trick_indent_with_end_else_words():\n     # words starting with \"end\" or \"else\" do not confuse the indenter\n     t1 = S('endless');\n@@ -369,10 +435,19 @@ def test_sinc():\n     assert mcode(sinc(pi*(x + 3))) == 'sinc(x + 3)'\n \n \n+def test_trigfun():\n+    for f in (sin, cos, tan, cot, sec, csc, asin, acos, acot, atan, asec, acsc,\n+              sinh, cosh, tanh, coth, csch, sech, asinh, acosh, atanh, acoth,\n+              asech, acsch):\n+        assert octave_code(f(x) == f.__name__ + '(x)')\n+\n+\n def test_specfun():\n     n = Symbol('n')\n     for f in [besselj, bessely, besseli, besselk]:\n         assert octave_code(f(n, x)) == f.__name__ + '(n, x)'\n+    for f in (erfc, erfi, erf, erfinv, erfcinv, fresnelc, fresnels, gamma):\n+        assert octave_code(f(x)) == f.__name__ + '(x)'\n     assert octave_code(hankel1(n, x)) == 'besselh(n, 1, x)'\n     assert octave_code(hankel2(n, x)) == 'besselh(n, 2, x)'\n     assert octave_code(airyai(x)) == 'airy(0, x)'\n",
  "problem_statement": "octave/matlab codegen wrong for two argument zeta\n`octave_code(zeta(x,n))` should give `zeta(n, x)`.\r\n\r\nSee: https://www.mathworks.com/help/symbolic/zeta.html\n",
  "hints_text": "",
  "created_at": "2018-06-22T05:51:23Z",
  "version": "1.2",
  "FAIL_TO_PASS": "[\"test_Function\", \"test_Function_change_name\", \"test_KroneckerDelta\", \"test_octave_expint\"]",
  "PASS_TO_PASS": "[\"test_Integer\", \"test_Rational\", \"test_minmax\", \"test_Pow\", \"test_basic_ops\", \"test_1_over_x_and_sqrt\", \"test_mix_number_mult_symbols\", \"test_mix_number_pow_symbols\", \"test_imag\", \"test_constants\", \"test_constants_other\", \"test_boolean\", \"test_Matrices\", \"test_vector_entries_hadamard\", \"test_MatrixSymbol\", \"test_special_matrices\", \"test_containers\", \"test_octave_noninline\", \"test_octave_piecewise\", \"test_octave_piecewise_times_const\", \"test_octave_matrix_assign_to\", \"test_octave_matrix_assign_to_more\", \"test_octave_matrix_1x1\", \"test_octave_matrix_elements\", \"test_octave_boolean\", \"test_octave_not_supported\", \"test_trick_indent_with_end_else_words\", \"test_haramard\", \"test_sparse\", \"test_sinc\", \"test_trigfun\", \"test_specfun\", \"test_MatrixElement_printing\"]",
  "environment_setup_commit": "e53e809176de9aa0fb62e85689f8cdb669d4cacb",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.095777",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}