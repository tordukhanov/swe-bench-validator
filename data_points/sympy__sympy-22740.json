{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-22740",
  "base_commit": "44588dbb8c7ab833a8acb0cad94e395db82685e5",
  "patch": "diff --git a/sympy/printing/numpy.py b/sympy/printing/numpy.py\n--- a/sympy/printing/numpy.py\n+++ b/sympy/printing/numpy.py\n@@ -149,8 +149,15 @@ def _print_DiagonalMatrix(self, expr):\n \n     def _print_Piecewise(self, expr):\n         \"Piecewise function printer\"\n+        from sympy.logic.boolalg import ITE, simplify_logic\n+        def print_cond(cond):\n+            \"\"\" Problem having an ITE in the cond. \"\"\"\n+            if cond.has(ITE):\n+                return self._print(simplify_logic(cond))\n+            else:\n+                return self._print(cond)\n         exprs = '[{}]'.format(','.join(self._print(arg.expr) for arg in expr.args))\n-        conds = '[{}]'.format(','.join(self._print(arg.cond) for arg in expr.args))\n+        conds = '[{}]'.format(','.join(print_cond(arg.cond) for arg in expr.args))\n         # If [default_value, True] is a (expr, cond) sequence in a Piecewise object\n         #     it will behave the same as passing the 'default' kwarg to select()\n         #     *as long as* it is the last element in expr.args.\n@@ -301,6 +308,14 @@ def _print_PermuteDims(self, expr):\n     def _print_ArrayAdd(self, expr):\n         return self._expand_fold_binary_op(self._module + '.add', expr.args)\n \n+    def _print_NDimArray(self, expr):\n+        if len(expr.shape) == 1:\n+            return self._module + '.array(' + self._print(expr.args[0]) + ')'\n+        if len(expr.shape) == 2:\n+            return self._print(expr.tomatrix())\n+        # Should be possible to extend to more dimensions\n+        return CodePrinter._print_not_supported(self, expr)\n+\n     _print_lowergamma = CodePrinter._print_not_supported\n     _print_uppergamma = CodePrinter._print_not_supported\n     _print_fresnelc = CodePrinter._print_not_supported\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -14,6 +14,7 @@\n from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.codegen.numpy_nodes import logaddexp, logaddexp2\n from sympy.codegen.cfunctions import log1p, expm1, hypot, log10, exp2, log2, Sqrt\n+from sympy.tensor.array import Array\n from sympy.tensor.array.expressions.array_expressions import ArrayTensorProduct, ArrayAdd, \\\n     PermuteDims, ArrayDiagonal\n from sympy.printing.numpy import NumPyPrinter, SciPyPrinter, _numpy_known_constants, \\\n@@ -322,6 +323,10 @@ def test_issue_17006():\n     N = MatrixSymbol(\"M\", n, n)\n     raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n \n+def test_numpy_array():\n+    assert NumPyPrinter().doprint(Array(((1, 2), (3, 5)))) == 'numpy.array([[1, 2], [3, 5]])'\n+    assert NumPyPrinter().doprint(Array((1, 2))) == 'numpy.array((1, 2))'\n+\n def test_numpy_known_funcs_consts():\n     assert _numpy_known_constants['NaN'] == 'numpy.nan'\n     assert _numpy_known_constants['EulerGamma'] == 'numpy.euler_gamma'\ndiff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -20,11 +20,13 @@\n from sympy.functions.elementary.trigonometric import (acos, cos, sin, sinc, tan)\n from sympy.functions.special.bessel import (besseli, besselj, besselk, bessely)\n from sympy.functions.special.beta_functions import (beta, betainc, betainc_regularized)\n+from sympy.functions.special.delta_functions import (Heaviside)\n from sympy.functions.special.error_functions import (erf, erfc, fresnelc, fresnels)\n from sympy.functions.special.gamma_functions import (digamma, gamma, loggamma)\n from sympy.integrals.integrals import Integral\n from sympy.logic.boolalg import (And, false, ITE, Not, Or, true)\n from sympy.matrices.expressions.dotproduct import DotProduct\n+from sympy.tensor.array import derive_by_array, Array\n from sympy.tensor.indexed import IndexedBase\n from sympy.utilities.lambdify import lambdify\n from sympy.core.expr import UnevaluatedExpr\n@@ -1321,6 +1323,39 @@ def test_issue_16536():\n     assert abs(uppergamma(1, 3) - F(1, 3)) <= 1e-10\n \n \n+def test_issue_22726():\n+    if not numpy:\n+        skip(\"numpy not installed\")\n+\n+    x1, x2 = symbols('x1 x2')\n+    f = Max(S.Zero, Min(x1, x2))\n+    g = derive_by_array(f, (x1, x2))\n+    G = lambdify((x1, x2), g, modules='numpy')\n+    point = {x1: 1, x2: 2}\n+    assert (abs(g.subs(point) - G(*point.values())) <= 1e-10).all()\n+\n+\n+def test_issue_22739():\n+    if not numpy:\n+        skip(\"numpy not installed\")\n+\n+    x1, x2 = symbols('x1 x2')\n+    f = Heaviside(Min(x1, x2))\n+    F = lambdify((x1, x2), f, modules='numpy')\n+    point = {x1: 1, x2: 2}\n+    assert abs(f.subs(point) - F(*point.values())) <= 1e-10\n+\n+\n+def test_issue_19764():\n+    if not numpy:\n+        skip(\"numpy not installed\")\n+\n+    expr = Array([x, x**2])\n+    f = lambdify(x, expr, 'numpy')\n+\n+    assert f(1).__class__ == numpy.ndarray\n+\n+\n def test_fresnel_integrals_scipy():\n     if not scipy:\n         skip(\"scipy not installed\")\n",
  "problem_statement": "lambdifying Heaviside(Min(x, y)) not working\nWhen the original issue in #22726, the following becomes a problem\r\n```\r\nfrom sympy import *\r\nx, y = symbols('x y')\r\nf = Heaviside(Min(x, y))\r\ng = lambdify((x, y), f, 'numpy')\r\ng(1, 2)\r\n```\r\n\r\nleads to\r\n\r\n```\r\nTraceback (most recent call last):\r\n\r\n  File \"C:\\Users\\Oscar\\AppData\\Local\\Temp/ipykernel_19836/3722236380.py\", line 5, in <module>\r\n    g(1, 2)\r\n\r\n  File \"<lambdifygenerated-11>\", line 2, in _lambdifygenerated\r\n    return select([select([less_equal(x, y),True], [less(x, 0),less(y, 0)], default=nan),select([less_equal(x, y),True], [equal(x, 0),equal(y, 0)], default=nan),select([less_equal(x, y),True], [greater(x, 0),greater(y, 0)], default=nan)], [0,1/2,1], default=nan)\r\n\r\n  File \"<__array_function__ internals>\", line 5, in select\r\n\r\n  File \"C:\\Users\\Oscar\\miniconda3\\lib\\site-packages\\numpy\\lib\\function_base.py\", line 700, in select\r\n    raise TypeError(\r\n\r\nTypeError: invalid entry 0 in condlist: should be boolean ndarray\r\n```\r\nSeems like there is a problem having/generating select inside of select.\r\n\r\n```\r\nf = Heaviside(Min(x, y)).rewrite(Piecewise)\r\n```\r\nleads to \r\n```\r\nPiecewise((0, ITE(x <= y, x < 0, y < 0)), (1/2, ITE(x <= y, Eq(x, 0), Eq(y, 0))), (1, ITE(x <= y, x > 0, y > 0)))\r\n```\r\nwhich causes a similar error\r\n\r\n```\r\nf = Heaviside(Min(x, y)).rewrite(Piecewise).simplify()\r\n```\r\ngets rid of the `ITE` in the Piecewise and works.\r\n```\r\nPiecewise((0, ((x <= y) & (x < 0)) | ((x > y) & (y < 0))), (1/2, (Eq(x, 0) & (x <= y)) | (Eq(y, 0) & (x > y))), (1, ((x <= y) & (x > 0)) | ((x > y) & (y > 0))))\r\n```\r\n\r\nHence, it probably makes sense to try to detect the ITE in the Piecewise and if so, rewrite it as And and/or simplify/simplify_logic.\r\n\r\nRelated to #22486\r\n\r\nWhile writing this issue, I figured out the solution. Will keep this to not have to explain in the PR why I did what I did...\r\n\n",
  "hints_text": "",
  "created_at": "2021-12-21T19:45:34Z",
  "version": "1.10",
  "FAIL_TO_PASS": "[\"test_numpy_array\"]",
  "PASS_TO_PASS": "[\"test_numpy_piecewise_regression\", \"test_numpy_logaddexp\", \"test_numpy_known_funcs_consts\", \"test_scipy_known_funcs_consts\", \"test_numpy_print_methods\", \"test_no_args\", \"test_single_arg\", \"test_list_args\", \"test_nested_args\", \"test_str_args\", \"test_own_namespace_1\", \"test_own_namespace_2\", \"test_own_module\", \"test_bad_args\", \"test_atoms\", \"test_sympy_lambda\", \"test_math_lambda\", \"test_mpmath_lambda\", \"test_number_precision\", \"test_mpmath_precision\", \"test_math_transl\", \"test_mpmath_transl\", \"test_empty_modules\", \"test_exponentiation\", \"test_sqrt\", \"test_trig\", \"test_integral\", \"test_double_integral\", \"test_vector_simple\", \"test_vector_discontinuous\", \"test_trig_symbolic\", \"test_trig_float\", \"test_docs\", \"test_math\", \"test_sin\", \"test_matrix\", \"test_issue9474\", \"test_sym_single_arg\", \"test_sym_list_args\", \"test_sym_integral\", \"test_namespace_order\", \"test_namespace_type\", \"test_imps\", \"test_imps_errors\", \"test_imps_wrong_args\", \"test_lambdify_imps\", \"test_dummification\", \"test_curly_matrix_symbol\", \"test_python_keywords\", \"test_lambdify_docstring\", \"test_special_printers\", \"test_true_false\", \"test_issue_2790\", \"test_issue_12092\", \"test_issue_14911\", \"test_ITE\", \"test_Min_Max\", \"test_issue_12173\", \"test_sinc_mpmath\", \"test_lambdify_dummy_arg\", \"test_lambdify_mixed_symbol_dummy_args\", \"test_lambdify_inspect\", \"test_issue_14941\", \"test_lambdify_Derivative_arg_issue_16468\", \"test_imag_real\", \"test_single_e\", \"test_beta_math\"]",
  "environment_setup_commit": "fd40404e72921b9e52a5f9582246e4a6cd96c431",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.150478",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}