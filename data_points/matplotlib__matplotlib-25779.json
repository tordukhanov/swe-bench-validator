{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25779",
  "base_commit": "06305a2f5dc589888697b3b909859103b8259153",
  "patch": "diff --git a/galleries/examples/shapes_and_collections/ellipse_arrow.py b/galleries/examples/shapes_and_collections/ellipse_arrow.py\nnew file mode 100644\n--- /dev/null\n+++ b/galleries/examples/shapes_and_collections/ellipse_arrow.py\n@@ -0,0 +1,53 @@\n+\"\"\"\n+===================================\n+Ellipse with orientation arrow demo\n+===================================\n+\n+This demo shows how to draw an ellipse with\n+an orientation arrow (clockwise or counterclockwise).\n+Compare this to the :doc:`Ellipse collection example\n+</gallery/shapes_and_collections/ellipse_collection>`.\n+\"\"\"\n+\n+import matplotlib.pyplot as plt\n+\n+from matplotlib.markers import MarkerStyle\n+from matplotlib.patches import Ellipse\n+from matplotlib.transforms import Affine2D\n+\n+# Create a figure and axis\n+fig, ax = plt.subplots(subplot_kw={\"aspect\": \"equal\"})\n+\n+ellipse = Ellipse(\n+    xy=(2, 4),\n+    width=30,\n+    height=20,\n+    angle=35,\n+    facecolor=\"none\",\n+    edgecolor=\"b\"\n+)\n+ax.add_patch(ellipse)\n+\n+# Plot an arrow marker at the end point of minor axis\n+vertices = ellipse.get_co_vertices()\n+t = Affine2D().rotate_deg(ellipse.angle)\n+ax.plot(\n+    vertices[0][0],\n+    vertices[0][1],\n+    color=\"b\",\n+    marker=MarkerStyle(\">\", \"full\", t),\n+    markersize=10\n+)\n+# Note: To reverse the orientation arrow, switch the marker type from > to <.\n+\n+plt.show()\n+\n+# %%\n+#\n+# .. admonition:: References\n+#\n+#    The use of the following functions, methods, classes and modules is shown\n+#    in this example:\n+#\n+#    - `matplotlib.patches`\n+#    - `matplotlib.patches.Ellipse`\ndiff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py\n--- a/lib/matplotlib/patches.py\n+++ b/lib/matplotlib/patches.py\n@@ -1654,6 +1654,37 @@ def get_corners(self):\n         return self.get_patch_transform().transform(\n             [(-1, -1), (1, -1), (1, 1), (-1, 1)])\n \n+    def _calculate_length_between_points(self, x0, y0, x1, y1):\n+        return np.sqrt((x1 - x0)**2 + (y1 - y0)**2)\n+\n+    def get_vertices(self):\n+        \"\"\"\n+        Return the vertices coordinates of the ellipse.\n+\n+        The definition can be found `here <https://en.wikipedia.org/wiki/Ellipse>`_\n+\n+        .. versionadded:: 3.8\n+        \"\"\"\n+        if self.width < self.height:\n+            ret = self.get_patch_transform().transform([(0, 1), (0, -1)])\n+        else:\n+            ret = self.get_patch_transform().transform([(1, 0), (-1, 0)])\n+        return [tuple(x) for x in ret]\n+\n+    def get_co_vertices(self):\n+        \"\"\"\n+        Return the co-vertices coordinates of the ellipse.\n+\n+        The definition can be found `here <https://en.wikipedia.org/wiki/Ellipse>`_\n+\n+        .. versionadded:: 3.8\n+        \"\"\"\n+        if self.width < self.height:\n+            ret = self.get_patch_transform().transform([(1, 0), (-1, 0)])\n+        else:\n+            ret = self.get_patch_transform().transform([(0, 1), (0, -1)])\n+        return [tuple(x) for x in ret]\n+\n \n class Annulus(Patch):\n     \"\"\"\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -104,6 +104,57 @@ def test_corner_center():\n     assert_almost_equal(ellipse.get_corners(), corners_rot)\n \n \n+def test_ellipse_vertices():\n+    # expect 0 for 0 ellipse width, height\n+    ellipse = Ellipse(xy=(0, 0), width=0, height=0, angle=0)\n+    assert_almost_equal(\n+        ellipse.get_vertices(),\n+        [(0.0, 0.0), (0.0, 0.0)],\n+    )\n+    assert_almost_equal(\n+        ellipse.get_co_vertices(),\n+        [(0.0, 0.0), (0.0, 0.0)],\n+    )\n+\n+    ellipse = Ellipse(xy=(0, 0), width=2, height=1, angle=30)\n+    assert_almost_equal(\n+        ellipse.get_vertices(),\n+        [\n+            (\n+                ellipse.center[0] + ellipse.width / 4 * np.sqrt(3),\n+                ellipse.center[1] + ellipse.width / 4,\n+            ),\n+            (\n+                ellipse.center[0] - ellipse.width / 4 * np.sqrt(3),\n+                ellipse.center[1] - ellipse.width / 4,\n+            ),\n+        ],\n+    )\n+    assert_almost_equal(\n+        ellipse.get_co_vertices(),\n+        [\n+            (\n+                ellipse.center[0] - ellipse.height / 4,\n+                ellipse.center[1] + ellipse.height / 4 * np.sqrt(3),\n+            ),\n+            (\n+                ellipse.center[0] + ellipse.height / 4,\n+                ellipse.center[1] - ellipse.height / 4 * np.sqrt(3),\n+            ),\n+        ],\n+    )\n+    v1, v2 = np.array(ellipse.get_vertices())\n+    np.testing.assert_almost_equal((v1 + v2) / 2, ellipse.center)\n+    v1, v2 = np.array(ellipse.get_co_vertices())\n+    np.testing.assert_almost_equal((v1 + v2) / 2, ellipse.center)\n+\n+    ellipse = Ellipse(xy=(2.252, -10.859), width=2.265, height=1.98, angle=68.78)\n+    v1, v2 = np.array(ellipse.get_vertices())\n+    np.testing.assert_almost_equal((v1 + v2) / 2, ellipse.center)\n+    v1, v2 = np.array(ellipse.get_co_vertices())\n+    np.testing.assert_almost_equal((v1 + v2) / 2, ellipse.center)\n+\n+\n def test_rotate_rect():\n     loc = np.asarray([1.0, 2.0])\n     width = 2\n",
  "problem_statement": "Plot ellipse with arrow showing rotation\n### Problem\n\nI'm trying to plot an [ellipse](https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Ellipse.html#matplotlib.patches.Ellipse) together with an arrow showing a rotation clockwise or counterclockwise as it is shown in that image.\r\n\r\n![image](https://user-images.githubusercontent.com/17592823/225585208-9a9d31b2-b728-4634-83f2-babfcd15d8cf.png)\r\n\r\nThat can ben implement by another optional argument? \r\n\r\n\n\n### Proposed solution\n\n_No response_\nPlot ellipse with arrow showing rotation\n### Problem\n\nI'm trying to plot an [ellipse](https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Ellipse.html#matplotlib.patches.Ellipse) together with an arrow showing a rotation clockwise or counterclockwise as it is shown in that image.\r\n\r\n![image](https://user-images.githubusercontent.com/17592823/225585208-9a9d31b2-b728-4634-83f2-babfcd15d8cf.png)\r\n\r\nThat can ben implement by another optional argument? \r\n\r\n\n\n### Proposed solution\n\n_No response_\n",
  "hints_text": "I don't think we would add this to a low level patch like ellipse.  It's certainly possible to get the effect you want with an annotation arrow and a basic ellipses. If you need help with that discourse.Matplotlib.org is a good place to ask. \nI agree that this is probably too specific to put into the core library, but I would be open to a PR adding that as an example or tutorial (I think there is a way to build up that figure step-by-step that would fit in the divio \"tutorial\" definition). \nHere is an example I created. \r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nfig, ax = plt.subplots(1, 1, subplot_kw={\"aspect\": \"equal\"})\r\n\r\nax.axvline(c=\"grey\", lw=1)\r\nax.axhline(c=\"grey\", lw=1)\r\n\r\nxVec = 0.5+0.5j\r\nyVec = 0.2+0.5j\r\n\r\nsampling = 101\r\nn = np.linspace(0, sampling, sampling)\r\n\r\nx = np.real(xVec * np.exp(1j * 2 * np.pi * n / sampling))\r\ny = np.real(yVec * np.exp(1j * 2 * np.pi * n / sampling))\r\nax.plot(x, y)\r\n\r\ndx = x[-1] - x[-2]\r\ndy = y[-1] - y[-2]\r\nax.arrow(x=x[-1], y=y[-1], dx=dx, dy=dy, head_width=0.05)\r\n\r\nax.grid()\r\nax.set_xlim((-1, 1))\r\nax.set_ylim((-1, 1))\r\nplt.show()\r\n```\r\n\nI don't think we would add this to a low level patch like ellipse.  It's certainly possible to get the effect you want with an annotation arrow and a basic ellipses. If you need help with that discourse.Matplotlib.org is a good place to ask. \nI agree that this is probably too specific to put into the core library, but I would be open to a PR adding that as an example or tutorial (I think there is a way to build up that figure step-by-step that would fit in the divio \"tutorial\" definition). \nHere is an example I created. \r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nfig, ax = plt.subplots(1, 1, subplot_kw={\"aspect\": \"equal\"})\r\n\r\nax.axvline(c=\"grey\", lw=1)\r\nax.axhline(c=\"grey\", lw=1)\r\n\r\nxVec = 0.5+0.5j\r\nyVec = 0.2+0.5j\r\n\r\nsampling = 101\r\nn = np.linspace(0, sampling, sampling)\r\n\r\nx = np.real(xVec * np.exp(1j * 2 * np.pi * n / sampling))\r\ny = np.real(yVec * np.exp(1j * 2 * np.pi * n / sampling))\r\nax.plot(x, y)\r\n\r\ndx = x[-1] - x[-2]\r\ndy = y[-1] - y[-2]\r\nax.arrow(x=x[-1], y=y[-1], dx=dx, dy=dy, head_width=0.05)\r\n\r\nax.grid()\r\nax.set_xlim((-1, 1))\r\nax.set_ylim((-1, 1))\r\nplt.show()\r\n```\r\n",
  "created_at": "2023-04-27T11:44:41Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_patches.py::test_ellipse_vertices\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_patches.py::test_Polygon_close\", \"lib/matplotlib/tests/test_patches.py::test_corner_center\", \"lib/matplotlib/tests/test_patches.py::test_rotate_rect\", \"lib/matplotlib/tests/test_patches.py::test_rotate_rect_draw[png]\", \"lib/matplotlib/tests/test_patches.py::test_dash_offset_patch_draw[png]\", \"lib/matplotlib/tests/test_patches.py::test_negative_rect\", \"lib/matplotlib/tests/test_patches.py::test_clip_to_bbox[png]\", \"lib/matplotlib/tests/test_patches.py::test_clip_to_bbox[pdf]\", \"lib/matplotlib/tests/test_patches.py::test_patch_alpha_coloring[png]\", \"lib/matplotlib/tests/test_patches.py::test_patch_alpha_coloring[pdf]\", \"lib/matplotlib/tests/test_patches.py::test_patch_alpha_override[png]\", \"lib/matplotlib/tests/test_patches.py::test_patch_alpha_override[pdf]\", \"lib/matplotlib/tests/test_patches.py::test_patch_color_none\", \"lib/matplotlib/tests/test_patches.py::test_patch_custom_linestyle[png]\", \"lib/matplotlib/tests/test_patches.py::test_patch_custom_linestyle[pdf]\", \"lib/matplotlib/tests/test_patches.py::test_patch_linestyle_accents\", \"lib/matplotlib/tests/test_patches.py::test_patch_linestyle_none[png]\", \"lib/matplotlib/tests/test_patches.py::test_wedge_movement\", \"lib/matplotlib/tests/test_patches.py::test_wedge_range[png]\", \"lib/matplotlib/tests/test_patches.py::test_wedge_range[pdf]\", \"lib/matplotlib/tests/test_patches.py::test_patch_str\", \"lib/matplotlib/tests/test_patches.py::test_multi_color_hatch[png]\", \"lib/matplotlib/tests/test_patches.py::test_multi_color_hatch[pdf]\", \"lib/matplotlib/tests/test_patches.py::test_units_rectangle[png]\", \"lib/matplotlib/tests/test_patches.py::test_connection_patch[png]\", \"lib/matplotlib/tests/test_patches.py::test_connection_patch_fig[png]\", \"lib/matplotlib/tests/test_patches.py::test_datetime_rectangle\", \"lib/matplotlib/tests/test_patches.py::test_datetime_datetime_fails\", \"lib/matplotlib/tests/test_patches.py::test_contains_point\", \"lib/matplotlib/tests/test_patches.py::test_contains_points\", \"lib/matplotlib/tests/test_patches.py::test_shadow[png]\", \"lib/matplotlib/tests/test_patches.py::test_fancyarrow_units\", \"lib/matplotlib/tests/test_patches.py::test_fancyarrow_setdata\", \"lib/matplotlib/tests/test_patches.py::test_fancyarrow_shape_error\", \"lib/matplotlib/tests/test_patches.py::test_boxstyle_errors[foo-Unknown\", \"lib/matplotlib/tests/test_patches.py::test_boxstyle_errors[Round,foo-Incorrect\", \"lib/matplotlib/tests/test_patches.py::test_annulus[png]\", \"lib/matplotlib/tests/test_patches.py::test_annulus_setters[png]\", \"lib/matplotlib/tests/test_patches.py::test_annulus_setters2[png]\", \"lib/matplotlib/tests/test_patches.py::test_degenerate_polygon\", \"lib/matplotlib/tests/test_patches.py::test_color_override_warning[edgecolor]\", \"lib/matplotlib/tests/test_patches.py::test_color_override_warning[facecolor]\", \"lib/matplotlib/tests/test_patches.py::test_empty_verts\", \"lib/matplotlib/tests/test_patches.py::test_default_antialiased\", \"lib/matplotlib/tests/test_patches.py::test_default_linestyle\", \"lib/matplotlib/tests/test_patches.py::test_default_capstyle\", \"lib/matplotlib/tests/test_patches.py::test_default_joinstyle\", \"lib/matplotlib/tests/test_patches.py::test_autoscale_arc[png]\", \"lib/matplotlib/tests/test_patches.py::test_arc_in_collection[png]\", \"lib/matplotlib/tests/test_patches.py::test_arc_in_collection[pdf]\", \"lib/matplotlib/tests/test_patches.py::test_arc_in_collection[eps]\", \"lib/matplotlib/tests/test_patches.py::test_modifying_arc[png]\", \"lib/matplotlib/tests/test_patches.py::test_modifying_arc[pdf]\", \"lib/matplotlib/tests/test_patches.py::test_modifying_arc[eps]\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.825410",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}