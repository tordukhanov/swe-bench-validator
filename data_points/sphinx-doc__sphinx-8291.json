{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8291",
  "base_commit": "c941b9cb14aefc132d6e3691085ce9704c1356e6",
  "patch": "diff --git a/doc/usage/extensions/example_google.py b/doc/usage/extensions/example_google.py\n--- a/doc/usage/extensions/example_google.py\n+++ b/doc/usage/extensions/example_google.py\n@@ -294,3 +294,21 @@ def _private(self):\n \n     def _private_without_docstring(self):\n         pass\n+\n+class ExamplePEP526Class:\n+    \"\"\"The summary line for a class docstring should fit on one line.\n+\n+    If the class has public attributes, they may be documented here\n+    in an ``Attributes`` section and follow the same formatting as a\n+    function's ``Args`` section. If ``napoleon_attr_annotations``\n+    is True, types can be specified in the class body using ``PEP 526``\n+    annotations.\n+\n+    Attributes:\n+        attr1: Description of `attr1`.\n+        attr2: Description of `attr2`.\n+\n+    \"\"\"\n+\n+    attr1: str\n+    attr2: int\n\\ No newline at end of file\ndiff --git a/sphinx/ext/napoleon/__init__.py b/sphinx/ext/napoleon/__init__.py\n--- a/sphinx/ext/napoleon/__init__.py\n+++ b/sphinx/ext/napoleon/__init__.py\n@@ -44,6 +44,7 @@ class Config:\n         napoleon_preprocess_types = False\n         napoleon_type_aliases = None\n         napoleon_custom_sections = None\n+        napoleon_attr_annotations = True\n \n     .. _Google style:\n        https://google.github.io/styleguide/pyguide.html\n@@ -257,6 +258,9 @@ def __unicode__(self):\n         section. If the entry is a tuple/list/indexed container, the first entry\n         is the name of the section, the second is the section key to emulate.\n \n+    napoleon_attr_annotations : :obj:`bool` (Defaults to True)\n+        Use the type annotations of class attributes that are documented in the docstring\n+        but do not have a type in the docstring.\n \n     \"\"\"\n     _config_values = {\n@@ -274,7 +278,8 @@ def __unicode__(self):\n         'napoleon_use_keyword': (True, 'env'),\n         'napoleon_preprocess_types': (False, 'env'),\n         'napoleon_type_aliases': (None, 'env'),\n-        'napoleon_custom_sections': (None, 'env')\n+        'napoleon_custom_sections': (None, 'env'),\n+        'napoleon_attr_annotations': (True, 'env'),\n     }\n \n     def __init__(self, **settings: Any) -> None:\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -21,6 +21,8 @@\n from sphinx.ext.napoleon.iterators import modify_iter\n from sphinx.locale import _, __\n from sphinx.util import logging\n+from sphinx.util.inspect import stringify_annotation\n+from sphinx.util.typing import get_type_hints\n \n if False:\n     # For type annotation\n@@ -600,6 +602,8 @@ def _parse_attribute_docstring(self) -> List[str]:\n     def _parse_attributes_section(self, section: str) -> List[str]:\n         lines = []\n         for _name, _type, _desc in self._consume_fields():\n+            if not _type:\n+                _type = self._lookup_annotation(_name)\n             if self._config.napoleon_use_ivar:\n                 _name = self._qualify_name(_name, self._obj)\n                 field = ':ivar %s: ' % _name\n@@ -804,6 +808,21 @@ def _strip_empty(self, lines: List[str]) -> List[str]:\n                 lines = lines[start:end + 1]\n         return lines\n \n+    def _lookup_annotation(self, _name: str) -> str:\n+        if self._config.napoleon_attr_annotations:\n+            if self._what in (\"module\", \"class\", \"exception\") and self._obj:\n+                # cache the class annotations\n+                if not hasattr(self, \"_annotations\"):\n+                    localns = getattr(self._config, \"autodoc_type_aliases\", {})\n+                    localns.update(getattr(\n+                                   self._config, \"napoleon_type_aliases\", {}\n+                                   ) or {})\n+                    self._annotations = get_type_hints(self._obj, None, localns)\n+                if _name in self._annotations:\n+                    return stringify_annotation(self._annotations[_name])\n+        # No annotation found\n+        return \"\"\n+\n \n def _recombine_set_tokens(tokens: List[str]) -> List[str]:\n     token_queue = collections.deque(tokens)\n@@ -1108,6 +1127,9 @@ def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n         _name, _type = _name.strip(), _type.strip()\n         _name = self._escape_args_and_kwargs(_name)\n \n+        if parse_type and not _type:\n+            _type = self._lookup_annotation(_name)\n+\n         if prefer_type and not _type:\n             _type, _name = _name, _type\n \ndiff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -66,7 +66,7 @@ def get_type_hints(obj: Any, globalns: Dict = None, localns: Dict = None) -> Dic\n     from sphinx.util.inspect import safe_getattr  # lazy loading\n \n     try:\n-        return typing.get_type_hints(obj, None, localns)\n+        return typing.get_type_hints(obj, globalns, localns)\n     except NameError:\n         # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n         return safe_getattr(obj, '__annotations__', {})\n",
  "test_patch": "diff --git a/tests/ext_napoleon_pep526_data_google.py b/tests/ext_napoleon_pep526_data_google.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/ext_napoleon_pep526_data_google.py\n@@ -0,0 +1,18 @@\n+\"\"\"\n+Test module for napoleon PEP 526 compatiblity with google style\n+\"\"\"\n+\n+module_level_var: int = 99\n+\"\"\"This is an example module level variable\"\"\"\n+\n+\n+class PEP526GoogleClass:\n+    \"\"\"Sample class with PEP 526 annotations and google docstring\n+\n+    Attributes:\n+        attr1: Attr1 description.\n+        attr2: Attr2 description.\n+    \"\"\"\n+\n+    attr1: int\n+    attr2: str\ndiff --git a/tests/ext_napoleon_pep526_data_numpy.py b/tests/ext_napoleon_pep526_data_numpy.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/ext_napoleon_pep526_data_numpy.py\n@@ -0,0 +1,22 @@\n+\"\"\"\n+Test module for napoleon PEP 526 compatiblity with numpy style\n+\"\"\"\n+\n+module_level_var: int = 99\n+\"\"\"This is an example module level variable\"\"\"\n+\n+\n+class PEP526NumpyClass:\n+    \"\"\"\n+    Sample class with PEP 526 annotations and numpy docstring\n+\n+    Attributes\n+    ----------\n+    attr1:\n+        Attr1 description\n+\n+    attr2:\n+        Attr2 description\n+    \"\"\"\n+    attr1: int\n+    attr2: str\ndiff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -10,6 +10,7 @@\n \"\"\"\n \n import re\n+import sys\n from collections import namedtuple\n from contextlib import contextmanager\n from inspect import cleandoc\n@@ -23,6 +24,10 @@\n                                            _convert_numpy_type_spec, _recombine_set_tokens,\n                                            _token_type, _tokenize_type_spec)\n \n+if sys.version_info >= (3, 6):\n+    from .ext_napoleon_pep526_data_google import PEP526GoogleClass\n+    from .ext_napoleon_pep526_data_numpy import PEP526NumpyClass\n+\n \n class NamedtupleSubclass(namedtuple('NamedtupleSubclass', ('attr1', 'attr2'))):\n     \"\"\"Sample namedtuple subclass\n@@ -1092,6 +1097,31 @@ def test_keywords_with_types(self):\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_pep526_annotations(self):\n+        if sys.version_info >= (3, 6):\n+            # Test class attributes annotations\n+            config = Config(\n+                napoleon_attr_annotations=True\n+            )\n+            actual = str(GoogleDocstring(cleandoc(PEP526GoogleClass.__doc__), config, app=None, what=\"class\",\n+                                         obj=PEP526GoogleClass))\n+            expected = \"\"\"\\\n+Sample class with PEP 526 annotations and google docstring\n+\n+.. attribute:: attr1\n+\n+   Attr1 description.\n+\n+   :type: int\n+\n+.. attribute:: attr2\n+\n+   Attr2 description.\n+\n+   :type: str\n+\"\"\"\n+            self.assertEqual(expected, actual)\n+\n \n class NumpyDocstringTest(BaseDocstringTest):\n     docstrings = [(\n@@ -2402,3 +2432,29 @@ def test_escape_args_and_kwargs(self, name, expected):\n         actual = numpy_docstring._escape_args_and_kwargs(name)\n \n         assert actual == expected\n+\n+    def test_pep526_annotations(self):\n+        if sys.version_info >= (3, 6):\n+            # test class attributes annotations\n+            config = Config(\n+                napoleon_attr_annotations=True\n+            )\n+            actual = str(NumpyDocstring(cleandoc(PEP526NumpyClass.__doc__), config, app=None, what=\"class\",\n+                                        obj=PEP526NumpyClass))\n+            expected = \"\"\"\\\n+Sample class with PEP 526 annotations and numpy docstring\n+\n+.. attribute:: attr1\n+\n+   Attr1 description\n+\n+   :type: int\n+\n+.. attribute:: attr2\n+\n+   Attr2 description\n+\n+   :type: str\n+\"\"\"\n+            print(actual)\n+            assert expected == actual\n",
  "problem_statement": "[Napoleon] Retrieve type of attributes from type hints when using google-style\nFollowing [google style guide for classes](https://github.com/google/styleguide/blob/gh-pages/pyguide.md#384-classes), I added an `Attributes:` section my classes docstring. As I have [PEP 526](https://www.python.org/dev/peps/pep-0526/) annotations (because I use `attrs`), I did not add types in the docstring., as per the style guide.\r\n\r\nWhen generating the documentation with `.. automodule::` from `autodoc`, with `napoleon`, the attributes are not typed. I tried using the `:undoc-members:` flag of `automodule`, but this resulted in duplicated attributes: one with the explanation, the other with the type-hint.\r\n\r\nWhile it is possible to not use type hints with `attrs` and replace `attr.s(auto_attribs=True)` by `attr.ib()`, this is not an option for e.g. [`dataclasses`](https://docs.python.org/3/library/dataclasses.html). I also tried `napoleon_use_ivar=True`, which silenced sphinx's warnings but still resulted in two definition of the attribute in the documentation.\r\n\r\nIt would be nice if `napoleon` (or `autodoc`) extracted the type hint of the class, or merged the attributes when using `:undoc-members:`. That would avoid duplicated types definitions in either the code or the doc. Currently, either the code has an annotation and a type in the docstring, or the generated documentation has two entry for each attribute.\r\n\r\nThis might be related to #7582  and #4074 .\r\n\r\n**Additional info**\r\n- sphinx version `3.2.1`\r\n- [`conf.py`](https://github.com/QuentinSoubeyran/pheres/blob/dev/docs/conf.py)\r\n- [code being autodocumented](https://github.com/QuentinSoubeyran/pheres/blob/dev/src/pheres/exceptions.py)\n",
  "hints_text": "",
  "created_at": "2020-10-05T12:40:14Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_pep526_annotations\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_pep526_annotations\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_napoleon_docstring.py::NamedtupleSubclassTest::test_attributes_docstring\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline_no_type\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline_ref_in_type\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_attributes_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_code_block_in_returns_section\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_colon_in_return_type\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_custom_generic_sections\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_docstrings\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_keywords_with_types\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_kwargs_in_arguments\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_list_in_parameter_description\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_noindex\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_parameters_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_raises_types\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_section_header_formatting\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_sphinx_admonitions\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_xrefs_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_colon_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_convert_numpy_type_spec\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_docstrings\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_list_in_parameter_description\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_multiple_parameters\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameter_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameters_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameters_without_class_reference\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_raises_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_recombine_set_tokens\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_recombine_set_tokens_invalid\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_return_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_section_header_underline_length\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_see_also_refs\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_sphinx_admonitions\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_token_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_tokenize_type_spec\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_type_preprocessor\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_underscore_in_attribute\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_underscore_in_attribute_strip_signature_backslash\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_xrefs_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_yield_types\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[x,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*args,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*x,\"]",
  "environment_setup_commit": "3f560cd67239f75840cc7a439ab54d8509c855f6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.053915",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}