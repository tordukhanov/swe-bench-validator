{
  "repo": "psf/requests",
  "instance_id": "psf__requests-1657",
  "base_commit": "43477edc91a8f49de1e9d96117f9cc6d087e71d9",
  "patch": "diff --git a/requests/sessions.py b/requests/sessions.py\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -65,6 +65,22 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     return merged_setting\n \n \n+def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n+    \"\"\"\n+    Properly merges both requests and session hooks.\n+\n+    This is necessary because when request_hooks == {'response': []}, the\n+    merge breaks Session hooks entirely.\n+    \"\"\"\n+    if session_hooks is None or session_hooks.get('response') == []:\n+        return request_hooks\n+\n+    if request_hooks is None or request_hooks.get('response') == []:\n+        return session_hooks\n+\n+    return merge_setting(request_hooks, session_hooks, dict_class)\n+\n+\n class SessionRedirectMixin(object):\n     def resolve_redirects(self, resp, req, stream=False, timeout=None,\n                           verify=True, cert=None, proxies=None):\n@@ -261,7 +277,7 @@ def prepare_request(self, request):\n             params=merge_setting(request.params, self.params),\n             auth=merge_setting(auth, self.auth),\n             cookies=merged_cookies,\n-            hooks=merge_setting(request.hooks, self.hooks),\n+            hooks=merge_hooks(request.hooks, self.hooks),\n         )\n         return p\n \n",
  "test_patch": "diff --git a/test_requests.py b/test_requests.py\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -449,6 +449,25 @@ def hook(resp, **kwargs):\n \n         requests.Request('GET', HTTPBIN, hooks={'response': hook})\n \n+    def test_session_hooks_are_used_with_no_request_hooks(self):\n+        hook = lambda x, *args, **kwargs: x\n+        s = requests.Session()\n+        s.hooks['response'].append(hook)\n+        r = requests.Request('GET', HTTPBIN)\n+        prep = s.prepare_request(r)\n+        assert prep.hooks['response'] != []\n+        assert prep.hooks['response'] == [hook]\n+\n+    def test_session_hooks_are_overriden_by_request_hooks(self):\n+        hook1 = lambda x, *args, **kwargs: x\n+        hook2 = lambda x, *args, **kwargs: x\n+        assert hook1 is not hook2\n+        s = requests.Session()\n+        s.hooks['response'].append(hook2)\n+        r = requests.Request('GET', HTTPBIN, hooks={'response': [hook1]})\n+        prep = s.prepare_request(r)\n+        assert prep.hooks['response'] == [hook1]\n+\n     def test_prepared_request_hook(self):\n         def hook(resp, **kwargs):\n             resp.hook_working = True\n",
  "problem_statement": "Session hooks broken\nRequest hooks are being [merged](https://github.com/kennethreitz/requests/blob/master/requests/sessions.py#L264) with session hooks; since both hook dicts have a list as the value, one simply overwrites the other.\n\n",
  "hints_text": "Great spot, thanks! We should improve our merging logic here.\n\nI might take a crack at this in an hour or so\n\nHm. This has always been the behaviour of how per-request hooks work with session hooks but it isn't exactly intuitive. My concern is whether people are relying on this behaviour since the logic in `merge_setting` hasn't really changed in over a year (at least).\n\nI have to wonder if this did the same thing on older versions of requests or if I'm just remembering incorrectly. Either way, the simplest solution would be to not try to special case this inside of `merge_setting` but to use a different function, e.g., `merge_hooks` (or more generally `merge_lists`) to create a merged list of both.\n\nThe simplest way to avoid duplication is: `set(session_setting).merge(request_setting)`.\n\nStill I'm not 100% certain this is the expected behaviour and I don't have the time to test it right now. I'll take a peak later tonight.\n\nLet me clarify: session hooks are completely ignored (in version 2.0.0) regardless of whether any per-request hooks were set. They used to work in Requests 1.2.3.\n\nAh that's a big help.\n",
  "created_at": "2013-10-08T00:23:48Z",
  "version": "2.0",
  "FAIL_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_prepared_from_session\", \"test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie\", \"test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks\"]",
  "PASS_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET\", \"test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET\", \"test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE\", \"test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES\", \"test_requests.py::RequestsTestCase::test_DIGEST_HTTP_200_OK_GET\", \"test_requests.py::RequestsTestCase::test_DIGEST_STREAM\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT\", \"test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET\", \"test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES\", \"test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA\", \"test_requests.py::RequestsTestCase::test_basic_building\", \"test_requests.py::RequestsTestCase::test_basicauth_with_netrc\", \"test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files\", \"test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests\", \"test_requests.py::RequestsTestCase::test_cookie_parameters\", \"test_requests.py::RequestsTestCase::test_cookie_persists_via_api\", \"test_requests.py::RequestsTestCase::test_cookie_quote_wrapped\", \"test_requests.py::RequestsTestCase::test_cookie_removed_on_expire\", \"test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect\", \"test_requests.py::RequestsTestCase::test_custom_content_type\", \"test_requests.py::RequestsTestCase::test_decompress_gzip\", \"test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post\", \"test_requests.py::RequestsTestCase::test_entry_points\", \"test_requests.py::RequestsTestCase::test_fixes_1329\", \"test_requests.py::RequestsTestCase::test_generic_cookiejar_works\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url\", \"test_requests.py::RequestsTestCase::test_header_keys_are_native\", \"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\", \"test_requests.py::RequestsTestCase::test_hook_receives_request_arguments\", \"test_requests.py::RequestsTestCase::test_http_error\", \"test_requests.py::RequestsTestCase::test_invalid_url\", \"test_requests.py::RequestsTestCase::test_links\", \"test_requests.py::RequestsTestCase::test_long_authinfo_in_url\", \"test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable\", \"test_requests.py::RequestsTestCase::test_no_content_length\", \"test_requests.py::RequestsTestCase::test_params_are_added_before_fragment\", \"test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive\", \"test_requests.py::RequestsTestCase::test_path_is_not_double_encoded\", \"test_requests.py::RequestsTestCase::test_prepared_request_hook\", \"test_requests.py::RequestsTestCase::test_request_ok_set\", \"test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden\", \"test_requests.py::RequestsTestCase::test_response_is_iterable\", \"test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks\", \"test_requests.py::RequestsTestCase::test_session_pickling\", \"test_requests.py::RequestsTestCase::test_set_cookie_on_301\", \"test_requests.py::RequestsTestCase::test_status_raising\", \"test_requests.py::RequestsTestCase::test_time_elapsed_blank\", \"test_requests.py::RequestsTestCase::test_transport_adapter_ordering\", \"test_requests.py::RequestsTestCase::test_unicode_get\", \"test_requests.py::RequestsTestCase::test_unicode_header_name\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames\", \"test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect\", \"test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param\", \"test_requests.py::RequestsTestCase::test_user_agent_transfers\", \"test_requests.py::TestContentEncodingDetection::test_html4_pragma\", \"test_requests.py::TestContentEncodingDetection::test_html_charset\", \"test_requests.py::TestContentEncodingDetection::test_none\", \"test_requests.py::TestContentEncodingDetection::test_precedence\", \"test_requests.py::TestContentEncodingDetection::test_xhtml_pragma\", \"test_requests.py::TestContentEncodingDetection::test_xml\", \"test_requests.py::TestCaseInsensitiveDict::test_contains\", \"test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"test_requests.py::TestCaseInsensitiveDict::test_equality\", \"test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"test_requests.py::TestCaseInsensitiveDict::test_get\", \"test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"test_requests.py::TestCaseInsensitiveDict::test_iter\", \"test_requests.py::TestCaseInsensitiveDict::test_iterable_init\", \"test_requests.py::TestCaseInsensitiveDict::test_kwargs_init\", \"test_requests.py::TestCaseInsensitiveDict::test_len\", \"test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"test_requests.py::TestCaseInsensitiveDict::test_mapping_init\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"test_requests.py::TestCaseInsensitiveDict::test_update\", \"test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\"]",
  "environment_setup_commit": "4bceb312f1b99d36a25f2985b5606e98b6f0d8cd",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.848062",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}