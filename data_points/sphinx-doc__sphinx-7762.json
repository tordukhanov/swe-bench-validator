{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7762",
  "base_commit": "c063c9c0fe383a20da613448d1f606b9635773b9",
  "patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -16,7 +16,7 @@\n from html.parser import HTMLParser\n from os import path\n from typing import Any, Dict, List, Set, Tuple\n-from urllib.parse import unquote\n+from urllib.parse import unquote, urlparse\n \n from docutils import nodes\n from docutils.nodes import Node\n@@ -36,6 +36,11 @@\n logger = logging.getLogger(__name__)\n \n \n+DEFAULT_REQUEST_HEADERS = {\n+    'Accept': 'text/html,application/xhtml+xml;q=0.9,*/*;q=0.8',\n+}\n+\n+\n class AnchorCheckParser(HTMLParser):\n     \"\"\"Specialized HTML parser that looks for a specific anchor.\"\"\"\n \n@@ -107,13 +112,25 @@ def init(self) -> None:\n     def check_thread(self) -> None:\n         kwargs = {\n             'allow_redirects': True,\n-            'headers': {\n-                'Accept': 'text/html,application/xhtml+xml;q=0.9,*/*;q=0.8',\n-            },\n-        }\n+        }  # type: Dict\n         if self.app.config.linkcheck_timeout:\n             kwargs['timeout'] = self.app.config.linkcheck_timeout\n \n+        def get_request_headers() -> Dict:\n+            url = urlparse(uri)\n+            candidates = [\"%s://%s\" % (url.scheme, url.netloc),\n+                          \"%s://%s/\" % (url.scheme, url.netloc),\n+                          uri,\n+                          \"*\"]\n+\n+            for u in candidates:\n+                if u in self.config.linkcheck_request_headers:\n+                    headers = dict(DEFAULT_REQUEST_HEADERS)\n+                    headers.update(self.config.linkcheck_request_headers[u])\n+                    return headers\n+\n+            return {}\n+\n         def check_uri() -> Tuple[str, str, int]:\n             # split off anchor\n             if '#' in uri:\n@@ -139,6 +156,9 @@ def check_uri() -> Tuple[str, str, int]:\n             else:\n                 auth_info = None\n \n+            # update request headers for the URL\n+            kwargs['headers'] = get_request_headers()\n+\n             try:\n                 if anchor and self.app.config.linkcheck_anchors:\n                     # Read the whole document and see if #anchor exists\n@@ -337,6 +357,7 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n \n     app.add_config_value('linkcheck_ignore', [], None)\n     app.add_config_value('linkcheck_auth', [], None)\n+    app.add_config_value('linkcheck_request_headers', {}, None)\n     app.add_config_value('linkcheck_retries', 1, None)\n     app.add_config_value('linkcheck_timeout', None, None, [int])\n     app.add_config_value('linkcheck_workers', 5, None)\n",
  "test_patch": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -124,3 +124,36 @@ def test_auth(app, status, warning):\n                 assert c_kwargs['auth'] == 'authinfo2'\n             else:\n                 assert not c_kwargs['auth']\n+\n+\n+@pytest.mark.sphinx(\n+    'linkcheck', testroot='linkcheck', freshenv=True,\n+    confoverrides={'linkcheck_request_headers': {\n+        \"https://localhost:7777/\": {\n+            \"Accept\": \"text/html\",\n+        },\n+        \"http://www.sphinx-doc.org\": {  # no slash at the end\n+            \"Accept\": \"application/json\",\n+        },\n+        \"*\": {\n+            \"X-Secret\": \"open sesami\",\n+        }\n+    }})\n+def test_linkcheck_request_headers(app, status, warning):\n+    mock_req = mock.MagicMock()\n+    mock_req.return_value = 'fake-response'\n+\n+    with mock.patch.multiple('requests', get=mock_req, head=mock_req):\n+        app.builder.build_all()\n+        for args, kwargs in mock_req.call_args_list:\n+            url = args[0]\n+            headers = kwargs.get('headers', {})\n+            if \"https://localhost:7777\" in url:\n+                assert headers[\"Accept\"] == \"text/html\"\n+            elif 'http://www.sphinx-doc.org' in url:\n+                assert headers[\"Accept\"] == \"application/json\"\n+            elif 'https://www.google.com' in url:\n+                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+                assert headers[\"X-Secret\"] == \"open sesami\"\n+            else:\n+                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n",
  "problem_statement": "Add support for custom HTTP headers @ linkcheck\n**Is your feature request related to a problem? Please describe.**\r\n\r\nCurrently, `Accept` HTTP header is hardcoded: https://github.com/sphinx-doc/sphinx/blob/dbefc9865d8c2c4006ed52475d1bff865358cd00/sphinx/builders/linkcheck.py#L111. And when I hit servers that require custom headers, the only option is to add those URLs to the ignore list which is what I'd like to avoid.\r\n\r\n**Describe the solution you'd like**\r\n\r\nMake HTTP headers configurable.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nAdding the affected URL to `linkcheck_ignore`\r\n\r\n**Additional context**\r\n\r\nWe have a GitHub Actions badge in README which then gets embedded into Sphinx docs. Running `linkcheck` used to work but now it doesn't. After some debugging I discovered that if the HTTP query doesn't have `Accept:` HTTP header, it works. But the header that Sphinx injects causes GitHub's server to respond with `HTTP/1.1 406 Not Acceptable`.\r\nInterestingly, if you open this URL in a browser, it works: https://github.com/cherrypy/cheroot/workflows/Test%20suite/badge.svg. Google Chrome sends the following header: `Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9`.\r\n\r\n```console\r\n$ curl --head -H 'User-Agent: Sphinx/2.4.3 requests/2.23.0 python/3.7.4' https://github.com/cherrypy/cheroot/workflows/Test%20suite/badge.svg\r\nHTTP/1.1 200 OK\r\ndate: Tue, 03 Mar 2020 18:53:13 GMT\r\ncontent-type: image/svg+xml; charset=utf-8\r\nserver: GitHub.com\r\nstatus: 200 OK\r\nvary: X-PJAX, Accept-Encoding, Accept, X-Requested-With\r\ncache-control: max-age=300, private\r\netag: W/\"6e6be7ee648f0c6c3c74f436c281da7e\"\r\nstrict-transport-security: max-age=31536000; includeSubdomains; preload\r\nx-frame-options: deny\r\nx-content-type-options: nosniff\r\nx-xss-protection: 1; mode=block\r\nexpect-ct: max-age=2592000, report-uri=\"https://api.github.com/_private/browser/errors\"\r\ncontent-security-policy: default-src 'none'; base-uri 'self'; block-all-mixed-content; connect-src 'self' uploads.github.com www.githubstatus.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com wss://live.github.com; font-src github.githubassets.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: github.githubassets.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; manifest-src 'self'; media-src 'none'; script-src github.githubassets.com; style-src 'unsafe-inline' github.githubassets.com\r\nAge: 0\r\nSet-Cookie: _gh_sess=p238CMtx5HWH1dro34Ug5297UE6yfWFIdIXjOC%2Fz6c0KFat8kP6FKO%2BpnLDFOrOop4N%2FjA%2FnKLDavWjC6VVQYoPNNbqh%2B4N41map9mUfvFhhx8HMW19Du1h5fn9g2Tv4TZcNSJfwfFV465Xzxq9t213ud1LEQEukuzbcIFn1hNy%2FBbmJ%2BF0MjS6eZk%2BPVQ2kLNdrtaBz%2BJ6RFTwhyu7nrxXLbgh08T2mBKLI8BREu3%2Fh1f7S%2FJ%2BIaQFq5mFItrQ140%2BSDmMgWF7tGKuZqDnHYw%3D%3D--YFLr0%2B3yKMbqGo%2Ff--P2WJDemx1goxFvxleo%2FnsQ%3D%3D; Path=/; HttpOnly; Secure\r\nSet-Cookie: _octo=GH1.1.1438747173.1583261593; Path=/; Domain=github.com; Expires=Wed, 03 Mar 2021 18:53:13 GMT; Secure\r\nSet-Cookie: logged_in=no; Path=/; Domain=github.com; Expires=Wed, 03 Mar 2021 18:53:13 GMT; HttpOnly; Secure\r\nAccept-Ranges: bytes\r\nContent-Length: 2211\r\nX-GitHub-Request-Id: 1C24:16DCA:5FBDEC6:880AF26:5E5EA799\r\n```\r\n```console\r\n$ curl --head -H 'Accept: text/html,application/xhtml+xml;q=0.9,*/*;q=0.8' -H 'User-Agent: Sphinx/2.4.3 requests/2.23.0 python/3.7.4' https://github.com/cherrypy/cheroot/workflows/Test%20suite/badge.svg\r\nHTTP/1.1 406 Not Acceptable\r\ndate: Tue, 03 Mar 2020 18:53:49 GMT\r\ncontent-type: text/html\r\nserver: GitHub.com\r\nstatus: 406 Not Acceptable\r\nvary: X-PJAX, Accept-Encoding, Accept, X-Requested-With\r\ncache-control: no-cache\r\nstrict-transport-security: max-age=31536000; includeSubdomains; preload\r\nx-frame-options: deny\r\nx-content-type-options: nosniff\r\nx-xss-protection: 1; mode=block\r\nexpect-ct: max-age=2592000, report-uri=\"https://api.github.com/_private/browser/errors\"\r\ncontent-security-policy: default-src 'none'; base-uri 'self'; block-all-mixed-content; connect-src 'self' uploads.github.com www.githubstatus.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com wss://live.github.com; font-src github.githubassets.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; frame-src render.githubusercontent.com; img-src 'self' data: github.githubassets.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; manifest-src 'self'; media-src 'none'; script-src github.githubassets.com; style-src 'unsafe-inline' github.githubassets.com\r\nAge: 0\r\nSet-Cookie: _gh_sess=cq2fhZutOVFanPybUxb%2F5FN5FRD9j%2FKOq2N5WN83m30t6Xnu8y1Zgcc4kBIw0MiYid9VOJTComfgw5O4jAWg91GLK0peYu9XfNKn2bPmd7GDmjYwak2QE%2FvElg%2BVs8yuL8lMOdtZSxAfQdObkQHyPM9KCs%2FXj7qofetrUASScJ2v%2BBdIw%2BUDANHDp%2FoH0ckbWIY4ouHQD%2BAy1KG00IMLjyRJ%2Fgr0V57JhemCUNk0pqscP7vFagUR%2BicETzEd2%2B%2Fy45pkpTTiwqds%2BFyoPoxn1g%3D%3D--Po2%2Boh3TsKnH2dDk--uLvCvDG7SDRtQP9jQ5%2B3Pw%3D%3D; Path=/; HttpOnly; Secure\r\nSet-Cookie: _octo=GH1.1.1102872677.1583261629; Path=/; Domain=github.com; Expires=Wed, 03 Mar 2021 18:53:49 GMT; Secure\r\nSet-Cookie: logged_in=no; Path=/; Domain=github.com; Expires=Wed, 03 Mar 2021 18:53:49 GMT; HttpOnly; Secure\r\nContent-Length: 0\r\nX-GitHub-Request-Id: 1E08:1FAA7:4596C76:6318A3E:5E5EA7BD\r\n```\n",
  "hints_text": "Confirmed. It seems better not to send `Accept:` header to GitHub. On the other hand, some server requires the header (see #5140). So it would be better to allow to customize it via code or configuration.\r\n\r\nJust an idea, `linkcheck_request_header` might be helpful for such case:\r\n```\r\nlinkcheck_request_header = {\r\n    '*': {'Accept': 'text/html,application/xhtml+xml;q=0.9,*/*;q=0.8',}\r\n    'https://github.com': {},\r\n    ...\r\n}\r\n```\n@tk0miya this looks like a good idea.\nOops, I've overlooked to work for this issue on the 3.0 release... I just set the milestone for this issue now.",
  "created_at": "2020-05-31T16:39:12Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\"]",
  "PASS_TO_PASS": "[\"tests/test_build_linkcheck.py::test_defaults\", \"tests/test_build_linkcheck.py::test_defaults_json\", \"tests/test_build_linkcheck.py::test_anchors_ignored\", \"tests/test_build_linkcheck.py::test_auth\"]",
  "environment_setup_commit": "5afc77ee27fc01c57165ab260d3a76751f9ddb35",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.046716",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}