{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-11400",
  "base_commit": "8dcb12a6cf500e8738d6729ab954a261758f49ca",
  "patch": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -231,6 +231,20 @@ def _print_Symbol(self, expr):\n         else:\n             return name\n \n+    def _print_Relational(self, expr):\n+        lhs_code = self._print(expr.lhs)\n+        rhs_code = self._print(expr.rhs)\n+        op = expr.rel_op\n+        return (\"{0} {1} {2}\").format(lhs_code, op, rhs_code)\n+\n+    def _print_sinc(self, expr):\n+        from sympy.functions.elementary.trigonometric import sin\n+        from sympy.core.relational import Ne\n+        from sympy.functions import Piecewise\n+        _piecewise = Piecewise(\n+            (sin(expr.args[0]) / expr.args[0], Ne(expr.args[0], 0)), (1, True))\n+        return self._print(_piecewise)\n+\n     def _print_AugmentedAssignment(self, expr):\n         lhs_code = self._print(expr.lhs)\n         op = expr.rel_op\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_ccode.py b/sympy/printing/tests/test_ccode.py\n--- a/sympy/printing/tests/test_ccode.py\n+++ b/sympy/printing/tests/test_ccode.py\n@@ -120,6 +120,16 @@ def test_ccode_boolean():\n     assert ccode((x | y) & z) == \"z && (x || y)\"\n \n \n+def test_ccode_Relational():\n+    from sympy import Eq, Ne, Le, Lt, Gt, Ge\n+    assert ccode(Eq(x, y)) == \"x == y\"\n+    assert ccode(Ne(x, y)) == \"x != y\"\n+    assert ccode(Le(x, y)) == \"x <= y\"\n+    assert ccode(Lt(x, y)) == \"x < y\"\n+    assert ccode(Gt(x, y)) == \"x > y\"\n+    assert ccode(Ge(x, y)) == \"x >= y\"\n+\n+\n def test_ccode_Piecewise():\n     expr = Piecewise((x, x < 1), (x**2, True))\n     assert ccode(expr) == (\n@@ -162,6 +172,18 @@ def test_ccode_Piecewise():\n     raises(ValueError, lambda: ccode(expr))\n \n \n+def test_ccode_sinc():\n+    from sympy import sinc\n+    expr = sinc(x)\n+    assert ccode(expr) == (\n+            \"((x != 0) ? (\\n\"\n+            \"   sin(x)/x\\n\"\n+            \")\\n\"\n+            \": (\\n\"\n+            \"   1\\n\"\n+            \"))\")\n+\n+\n def test_ccode_Piecewise_deep():\n     p = ccode(2*Piecewise((x, x < 1), (x + 1, x < 2), (x**2, True)))\n     assert p == (\n",
  "problem_statement": "ccode(sinc(x)) doesn't work\n```\nIn [30]: ccode(sinc(x))\nOut[30]: '// Not supported in C:\\n// sinc\\nsinc(x)'\n```\n\nI don't think `math.h` has `sinc`, but it could print\n\n```\nIn [38]: ccode(Piecewise((sin(theta)/theta, Ne(theta, 0)), (1, True)))\nOut[38]: '((Ne(theta, 0)) ? (\\n   sin(theta)/theta\\n)\\n: (\\n   1\\n))'\n```\n\n",
  "hints_text": "@asmeurer I would like to fix this issue. Should I work upon  the codegen.py file ? If there's something else tell me how to start ?\n\nThe relevant file is sympy/printing/ccode.py\n\n@asmeurer I am new here. I would like to work on this issue. Please tell me how to start?\n\nSince there are two people asking, maybe one person can try #11286 which is very similar, maybe even easier.\n",
  "created_at": "2016-07-15T21:40:49Z",
  "version": "1.0",
  "FAIL_TO_PASS": "[\"test_ccode_Relational\", \"test_ccode_sinc\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_ccode_sqrt\", \"test_ccode_Pow\", \"test_ccode_constants_mathh\", \"test_ccode_constants_other\", \"test_ccode_Rational\", \"test_ccode_Integer\", \"test_ccode_functions\", \"test_ccode_inline_function\", \"test_ccode_exceptions\", \"test_ccode_user_functions\", \"test_ccode_boolean\", \"test_ccode_Piecewise\", \"test_ccode_Piecewise_deep\", \"test_ccode_ITE\", \"test_ccode_settings\", \"test_ccode_Indexed\", \"test_ccode_Indexed_without_looking_for_contraction\", \"test_ccode_loops_matrix_vector\", \"test_dummy_loops\", \"test_ccode_loops_add\", \"test_ccode_loops_multiple_contractions\", \"test_ccode_loops_addfactor\", \"test_ccode_loops_multiple_terms\", \"test_dereference_printing\", \"test_Matrix_printing\", \"test_ccode_reserved_words\", \"test_ccode_sign\", \"test_ccode_Assignment\"]",
  "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.072033",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}