{
  "repo": "django/django",
  "instance_id": "django__django-13665",
  "base_commit": "c9e85443211715993d7b27af2bf772380e26f6de",
  "patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -122,7 +122,7 @@ def get_objects():\n                             model._meta.can_migrate(self.connection) and\n                             router.allow_migrate_model(self.connection.alias, model)\n                         ):\n-                            queryset = model._default_manager.using(\n+                            queryset = model._base_manager.using(\n                                 self.connection.alias,\n                             ).order_by(model._meta.pk.name)\n                             yield from queryset.iterator()\n",
  "test_patch": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,4 +1,5 @@\n import copy\n+import datetime\n from unittest import mock\n \n from django.db import DEFAULT_DB_ALIAS, connection, connections\n@@ -10,6 +11,7 @@\n \n from ..models import (\n     CircularA, CircularB, Object, ObjectReference, ObjectSelfReference,\n+    SchoolClass,\n )\n \n \n@@ -175,3 +177,14 @@ def test_circular_reference_with_natural_key(self):\n         obj_b = CircularB.objects.get()\n         self.assertEqual(obj_a.obj, obj_b)\n         self.assertEqual(obj_b.obj, obj_a)\n+\n+    def test_serialize_db_to_string_base_manager(self):\n+        SchoolClass.objects.create(year=1000, last_updated=datetime.datetime.now())\n+        with mock.patch('django.db.migrations.loader.MigrationLoader') as loader:\n+            # serialize_db_to_string() serializes only migrated apps, so mark\n+            # the backends app as migrated.\n+            loader_instance = loader.return_value\n+            loader_instance.migrated_apps = {'backends'}\n+            data = connection.creation.serialize_db_to_string()\n+        self.assertIn('\"model\": \"backends.schoolclass\"', data)\n+        self.assertIn('\"year\": 1000', data)\ndiff --git a/tests/backends/models.py b/tests/backends/models.py\n--- a/tests/backends/models.py\n+++ b/tests/backends/models.py\n@@ -21,11 +21,18 @@ def __str__(self):\n         return '%s %s' % (self.first_name, self.last_name)\n \n \n+class SchoolClassManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().exclude(year=1000)\n+\n+\n class SchoolClass(models.Model):\n     year = models.PositiveIntegerField()\n     day = models.CharField(max_length=9, blank=True)\n     last_updated = models.DateTimeField()\n \n+    objects = SchoolClassManager()\n+\n \n class VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ(models.Model):\n     primary_key_is_quite_long_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = models.AutoField(primary_key=True)\n",
  "problem_statement": "Dabase creation backend should use base_manager to serialize database\nDescription\n\t\nmodels.py\nclass Service(Model):\n\tobjects = CustomManagerThatFillterOutSomeRecords()\nclass CustomManagerThatFillterOutSomeRecords(Manager):\n\tdef get_queryset(self):\n\t\treturn super().get_queryset().exclude(pk=1)\ntests.py\nclass TestService(TransactionTestCase):\n\tserialized_rollback = True\n\tdef test_something(self):\n\t\tpass\nAssume we have a migration that creates few records of Service.\nfrom django.core.management import call_command\nfrom django.db import migrations\ndef load_fixtures(*_, **__):\n\tcall_command('loaddata', 'services.json')\nclass Migration(migrations.Migration):\n\tdependencies = []\n\toperations = [\n\t\tmigrations.RunPython(\n\t\t\tload_fixtures,\n\t\t\tmigrations.RunPython.noop,\n\t\t)\n\t]\nThen TestService will fail as serialize_db_to_string by default use _default_manager that is CustomManagerThatFillterOutSomeRecords.\nHere is proposed fix: ​https://github.com/django/django/pull/13150\n",
  "hints_text": "That makes sense. You'll need to add regression tests to your PR in [django/db/backends/base/creation.py ​https://github.com/django/django/blob/4d9cd89acbb944e10b9000092069ba8e3a855957/django/db/backends/base/creation.py] by defining a default manager that exclude rows django/db/backends/models.py, creating one such row, and ensure it's part of the string returned by serialize_db_to_string.",
  "created_at": "2020-11-10T22:28:34Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_serialize_db_to_string_base_manager (backends.base.test_creation.TestDeserializeDbFromString)\"]",
  "PASS_TO_PASS": "[\"test_custom_test_name (backends.base.test_creation.TestDbSignatureTests)\", \"test_custom_test_name_with_test_prefix (backends.base.test_creation.TestDbSignatureTests)\", \"test_default_name (backends.base.test_creation.TestDbSignatureTests)\", \"test_circular_reference (backends.base.test_creation.TestDeserializeDbFromString)\", \"test_circular_reference_with_natural_key (backends.base.test_creation.TestDeserializeDbFromString)\", \"test_self_reference (backends.base.test_creation.TestDeserializeDbFromString)\", \"test_migrate_test_setting_true (backends.base.test_creation.TestDbCreationTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.665771",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}