{
  "repo": "django/django",
  "instance_id": "django__django-12132",
  "base_commit": "3930ec1bf275d17f1c36cd38b38114177b1d1565",
  "patch": "diff --git a/django/http/request.py b/django/http/request.py\n--- a/django/http/request.py\n+++ b/django/http/request.py\n@@ -108,7 +108,7 @@ def get_host(self):\n         # Allow variants of localhost if ALLOWED_HOSTS is empty and DEBUG=True.\n         allowed_hosts = settings.ALLOWED_HOSTS\n         if settings.DEBUG and not allowed_hosts:\n-            allowed_hosts = ['localhost', '127.0.0.1', '[::1]']\n+            allowed_hosts = ['.localhost', '127.0.0.1', '[::1]']\n \n         domain, port = split_domain_port(host)\n         if domain and validate_host(domain, allowed_hosts):\n",
  "test_patch": "diff --git a/tests/requests/tests.py b/tests/requests/tests.py\n--- a/tests/requests/tests.py\n+++ b/tests/requests/tests.py\n@@ -758,7 +758,7 @@ def test_host_validation_in_debug_mode(self):\n         If ALLOWED_HOSTS is empty and DEBUG is True, variants of localhost are\n         allowed.\n         \"\"\"\n-        valid_hosts = ['localhost', '127.0.0.1', '[::1]']\n+        valid_hosts = ['localhost', 'subdomain.localhost', '127.0.0.1', '[::1]']\n         for host in valid_hosts:\n             request = HttpRequest()\n             request.META = {'HTTP_HOST': host}\n",
  "problem_statement": "Add subdomains of localhost to ALLOWED_HOSTS in DEBUG mode\nDescription\n\t \n\t\t(last modified by thenewguy)\n\t \nIt would minimize configuration for new projects if ALLOWED_HOSTS += .localhost? when DEBUG=True\nChrome resolves *.localhost to localhost without modifying any host files or DNS\nReferencing the project this way makes it easy to test subdomains -> static.localhost, uploads.localhost, www.localhost, etc\n---\nUpdated\n---\nConversation on developer mailing list resulted in decision to reopen and accept ticket. The conversation turned up that this behavior is spec compliant per ​https://tools.ietf.org/html/rfc6761#section-6.3\n",
  "hints_text": "Interesting. Currently we have, in HttpRequest.get_host(): # Allow variants of localhost if ALLOWED_HOSTS is empty and DEBUG=True. allowed_hosts = settings.ALLOWED_HOSTS if settings.DEBUG and not allowed_hosts: allowed_hosts = ['localhost', '127.0.0.1', '[::1]'] Can I ask you to post to the DevelopersMailingList to canvas opinion? Assuming no blockers are raised it seems reasonable enough... (Reopen if accepted there.)\nFor reference, the conversation chain has been started: ​https://groups.google.com/forum/#!topic/django-developers/xcoAF9Gm_dI",
  "created_at": "2019-11-24T02:18:03Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_host_validation_in_debug_mode (requests.tests.HostValidationTests)\"]",
  "PASS_TO_PASS": "[\"test_absolute_url (requests.tests.BuildAbsoluteURITests)\", \"test_host_retrieval (requests.tests.BuildAbsoluteURITests)\", \"test_request_path_begins_with_two_slashes (requests.tests.BuildAbsoluteURITests)\", \"test_basic (requests.tests.HttpHeadersTests)\", \"test_parse_header_name (requests.tests.HttpHeadersTests)\", \"test_base_request_headers (requests.tests.RequestHeadersTests)\", \"test_wsgi_request_headers (requests.tests.RequestHeadersTests)\", \"test_wsgi_request_headers_get (requests.tests.RequestHeadersTests)\", \"test_wsgi_request_headers_getitem (requests.tests.RequestHeadersTests)\", \"get_host() makes helpful suggestions if a valid-looking host is not in ALLOWED_HOSTS.\", \"test_get_port (requests.tests.HostValidationTests)\", \"test_get_port_with_x_forwarded_port (requests.tests.HostValidationTests)\", \"test_http_get_host (requests.tests.HostValidationTests)\", \"test_http_get_host_with_x_forwarded_host (requests.tests.HostValidationTests)\", \"test_split_domain_port_removes_trailing_dot (requests.tests.HostValidationTests)\", \"test_FILES_connection_error (requests.tests.RequestsTests)\", \"test_POST_after_body_read (requests.tests.RequestsTests)\", \"test_POST_after_body_read_and_stream_read (requests.tests.RequestsTests)\", \"test_POST_after_body_read_and_stream_read_multipart (requests.tests.RequestsTests)\", \"test_POST_binary_only (requests.tests.RequestsTests)\", \"test_POST_connection_error (requests.tests.RequestsTests)\", \"test_POST_immutable_for_multipart (requests.tests.RequestsTests)\", \"test_POST_multipart_with_content_length_zero (requests.tests.RequestsTests)\", \"test_alternate_charset_POST (requests.tests.RequestsTests)\", \"test_body_after_POST_multipart_form_data (requests.tests.RequestsTests)\", \"test_body_after_POST_multipart_related (requests.tests.RequestsTests)\", \"test_get_raw_uri (requests.tests.RequestsTests)\", \"test_httprequest (requests.tests.RequestsTests)\", \"test_httprequest_full_path (requests.tests.RequestsTests)\", \"test_httprequest_full_path_with_query_string_and_fragment (requests.tests.RequestsTests)\", \"test_httprequest_repr (requests.tests.RequestsTests)\", \"test_httprequest_repr_invalid_method_and_path (requests.tests.RequestsTests)\", \"test_limited_stream (requests.tests.RequestsTests)\", \"test_multipart_non_ascii_content_type (requests.tests.RequestsTests)\", \"test_multipart_without_boundary (requests.tests.RequestsTests)\", \"test_non_ascii_POST (requests.tests.RequestsTests)\", \"test_read_after_value (requests.tests.RequestsTests)\", \"test_read_by_lines (requests.tests.RequestsTests)\", \"test_set_encoding_clears_GET (requests.tests.RequestsTests)\", \"test_set_encoding_clears_POST (requests.tests.RequestsTests)\", \"test_stream (requests.tests.RequestsTests)\", \"test_value_after_read (requests.tests.RequestsTests)\", \"test_wsgirequest (requests.tests.RequestsTests)\", \"test_wsgirequest_path_info (requests.tests.RequestsTests)\", \"test_wsgirequest_path_with_force_script_name_trailing_slash (requests.tests.RequestsTests)\", \"test_wsgirequest_repr (requests.tests.RequestsTests)\", \"test_wsgirequest_script_url_double_slashes (requests.tests.RequestsTests)\", \"test_wsgirequest_with_force_script_name (requests.tests.RequestsTests)\", \"test_wsgirequest_with_script_name (requests.tests.RequestsTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.615470",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}