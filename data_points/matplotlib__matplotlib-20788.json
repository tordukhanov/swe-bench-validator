{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-20788",
  "base_commit": "89645b86300a82ea769a80929d61a14afea13759",
  "patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -427,7 +427,9 @@ def __init__(self, ax, mappable=None, *, cmap=None,\n                 extend = norm.extend\n             else:\n                 extend = 'neither'\n-        self.alpha = alpha\n+        self.alpha = None\n+        # Call set_alpha to handle array-like alphas properly\n+        self.set_alpha(alpha)\n         self.cmap = cmap\n         self.norm = norm\n         self.values = values\n@@ -934,8 +936,13 @@ def set_label(self, label, *, loc=None, **kwargs):\n         self.stale = True\n \n     def set_alpha(self, alpha):\n-        \"\"\"Set the transparency between 0 (transparent) and 1 (opaque).\"\"\"\n-        self.alpha = alpha\n+        \"\"\"\n+        Set the transparency between 0 (transparent) and 1 (opaque).\n+\n+        If an array is provided, *alpha* will be set to None to use the\n+        transparency values associated with the colormap.\n+        \"\"\"\n+        self.alpha = None if isinstance(alpha, np.ndarray) else alpha\n \n     def _set_scale(self, scale, **kwargs):\n         \"\"\"\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -604,6 +604,18 @@ def test_mappable_no_alpha():\n     plt.draw()\n \n \n+def test_mappable_2d_alpha():\n+    fig, ax = plt.subplots()\n+    x = np.arange(1, 5).reshape(2, 2)/4\n+    pc = ax.pcolormesh(x, alpha=x)\n+    cb = fig.colorbar(pc, ax=ax)\n+    # The colorbar's alpha should be None and the mappable should still have\n+    # the original alpha array\n+    assert cb.alpha is None\n+    assert pc.get_alpha() is x\n+    fig.draw_no_output()\n+\n+\n def test_colorbar_label():\n     \"\"\"\n     Test the label parameter. It should just be mapped to the xlabel/ylabel of\n",
  "problem_statement": "[Bug]: Colorbar creation from pcolormesh with cell specific alpha values\n### Bug summary\r\n\r\nWhen I try to take advantage of the new ability to set cell specific alpha values in pcolormesh -\r\n \r\nhttps://matplotlib.org/stable/users/whats_new.html#transparency-alpha-can-be-set-as-an-array-in-collections\r\n\r\nand then use the resulting QuadMesh object to create a colorbar it generates an error detailed below.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nfrom numpy import arange, ones_like, newaxis, linspace\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.pyplot import figure, close\r\nfrom seaborn import heatmap\r\n\r\nx = arange(5, dtype=float)\r\ny = arange(5, dtype=float)\r\n# z and zalpha for demo pcolormesh\r\nz = x[1:, newaxis] + y[newaxis, 1:]\r\n\r\n\r\nzalpha = ones_like(z)\r\nzalpha[::2, ::2] = 0.3  # alternate patches are partly transparent\r\n\r\n\r\nfig = figure(figsize=(11, 7), dpi=300, frameon=True, tight_layout=True)\r\nfig_ax = fig.add_subplot(111)\r\n\r\n\r\nmesh = fig_ax.pcolormesh(x, y, z, alpha=zalpha)\r\nfig.colorbar(mesh)\r\n\r\nfig.savefig('foo.png')\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\nSingularity> python3 scratch.py \r\nTraceback (most recent call last):\r\n  File \"scratch.py\", line 28, in <module>\r\n    fig.savefig('foo.png')\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/figure.py\", line 3005, in savefig\r\n    self.canvas.print_figure(fname, **kwargs)\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/backend_bases.py\", line 2255, in print_figure\r\n    result = print_method(\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/backend_bases.py\", line 1669, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py\", line 508, in print_png\r\n    FigureCanvasAgg.draw(self)\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py\", line 406, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer, *args, **kwargs)\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/figure.py\", line 2780, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer, *args, **kwargs)\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/_api/deprecation.py\", line 431, in wrapper\r\n    return func(*inner_args, **inner_kwargs)\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py\", line 2921, in draw\r\n    mimage._draw_list_compositing_images(renderer, self, artists)\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer, *args, **kwargs)\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/collections.py\", line 2101, in draw\r\n    self.update_scalarmappable()\r\n  File \"/home/kz245/.local/lib/python3.8/site-packages/matplotlib/collections.py\", line 916, in update_scalarmappable\r\n    raise ValueError(\r\nValueError: Data array shape, (256,) is incompatible with alpha array shape, (4, 4). This can occur with the deprecated behavior of the \"flat\" shading option, in which a row and/or column of the data array is dropped.\r\n```\r\n\r\n\r\n### Expected outcome\r\n\r\nA heat-map with a color bar beside it.\r\n\r\n### Operating system\r\n\r\nUbuntu inside singularity container\r\n\r\n### Matplotlib Version\r\n\r\n3.4.2\r\n\r\n### Matplotlib Backend\r\n\r\nagg\r\n\r\n### Python version\r\n\r\n3.8.5\r\n\r\n### Jupyter version\r\n\r\nnot used\r\n\r\n### Other libraries\r\n\r\nnone\r\n\r\n### Installation\r\n\r\npip\r\n\r\n### Conda channel\r\n\r\n_No response_\n",
  "hints_text": "xref: #19843, but from a different collection object.\nColorbars do a 1d mapping.  This is a 2d mapping.  What do we want the colorbar to look like?\nThe use case I have in mind is using the color to encode the estimated value and the alpha to encode pvlaue so the colorbar can just display the colors as it would have before.  ",
  "created_at": "2021-08-04T01:43:27Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_colorbar.py::test_mappable_2d_alpha\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_shape[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_length[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_positioning[png-True]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_positioning[png-False]\", \"lib/matplotlib/tests/test_colorbar.py::test_gridspec_make_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_scatter[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure[no\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure[with\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbarbase\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_closed_patch[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_minorticks_on_off\", \"lib/matplotlib/tests/test_colorbar.py::test_cbar_minorticks_for_rc_xyminortickvisible\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_autoticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_autotickslog\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_get_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[both]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[min]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[max]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_powernorm_extension\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_axes_kw\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_log_minortick_labels\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_renorm\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_format\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_scale_reset\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_get_ticks_2\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_inverted_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_mappable_no_alpha\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_label\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim0]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim1]\", \"lib/matplotlib/tests/test_colorbar.py::test_anchored_cbar_position_using_specgrid\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_change_lim_scale[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_axes_handles_same_functions[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_inset_colorbar_layout\", \"lib/matplotlib/tests/test_colorbar.py::test_twoslope_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_cb_whose_mappable_has_no_figure[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_aspects\"]",
  "environment_setup_commit": "f93c0a3dcb82feed0262d758626c90d4002685f3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.790881",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}