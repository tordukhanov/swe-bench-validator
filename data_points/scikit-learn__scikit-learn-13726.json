{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13726",
  "base_commit": "22b0eabfd04fa554768568a8b309fae8115102ce",
  "patch": "diff --git a/sklearn/cluster/spectral.py b/sklearn/cluster/spectral.py\n--- a/sklearn/cluster/spectral.py\n+++ b/sklearn/cluster/spectral.py\n@@ -307,6 +307,9 @@ class SpectralClustering(BaseEstimator, ClusterMixin):\n         to be installed. It can be faster on very large, sparse problems,\n         but may also lead to instabilities.\n \n+    n_components : integer, optional, default=n_clusters\n+        Number of eigen vectors to use for the spectral embedding\n+\n     random_state : int, RandomState instance or None (default)\n         A pseudo random number generator used for the initialization of the\n         lobpcg eigen vectors decomposition when ``eigen_solver='amg'`` and by\n@@ -387,8 +390,8 @@ class SpectralClustering(BaseEstimator, ClusterMixin):\n     >>> clustering # doctest: +NORMALIZE_WHITESPACE\n     SpectralClustering(affinity='rbf', assign_labels='discretize', coef0=1,\n               degree=3, eigen_solver=None, eigen_tol=0.0, gamma=1.0,\n-              kernel_params=None, n_clusters=2, n_init=10, n_jobs=None,\n-              n_neighbors=10, random_state=0)\n+              kernel_params=None, n_clusters=2, n_components=None, n_init=10,\n+              n_jobs=None, n_neighbors=10, random_state=0)\n \n     Notes\n     -----\n@@ -425,12 +428,13 @@ class SpectralClustering(BaseEstimator, ClusterMixin):\n       https://www1.icsi.berkeley.edu/~stellayu/publication/doc/2003kwayICCV.pdf\n     \"\"\"\n \n-    def __init__(self, n_clusters=8, eigen_solver=None, random_state=None,\n-                 n_init=10, gamma=1., affinity='rbf', n_neighbors=10,\n-                 eigen_tol=0.0, assign_labels='kmeans', degree=3, coef0=1,\n-                 kernel_params=None, n_jobs=None):\n+    def __init__(self, n_clusters=8, eigen_solver=None, n_components=None,\n+                 random_state=None, n_init=10, gamma=1., affinity='rbf',\n+                 n_neighbors=10, eigen_tol=0.0, assign_labels='kmeans',\n+                 degree=3, coef0=1, kernel_params=None, n_jobs=None):\n         self.n_clusters = n_clusters\n         self.eigen_solver = eigen_solver\n+        self.n_components = n_components\n         self.random_state = random_state\n         self.n_init = n_init\n         self.gamma = gamma\n@@ -486,6 +490,7 @@ def fit(self, X, y=None):\n         random_state = check_random_state(self.random_state)\n         self.labels_ = spectral_clustering(self.affinity_matrix_,\n                                            n_clusters=self.n_clusters,\n+                                           n_components=self.n_components,\n                                            eigen_solver=self.eigen_solver,\n                                            random_state=random_state,\n                                            n_init=self.n_init,\n",
  "test_patch": "diff --git a/sklearn/cluster/tests/test_spectral.py b/sklearn/cluster/tests/test_spectral.py\n--- a/sklearn/cluster/tests/test_spectral.py\n+++ b/sklearn/cluster/tests/test_spectral.py\n@@ -107,8 +107,7 @@ def test_affinities():\n     # a dataset that yields a stable eigen decomposition both when built\n     # on OSX and Linux\n     X, y = make_blobs(n_samples=20, random_state=0,\n-                      centers=[[1, 1], [-1, -1]], cluster_std=0.01\n-                     )\n+                      centers=[[1, 1], [-1, -1]], cluster_std=0.01)\n     # nearest neighbors affinity\n     sp = SpectralClustering(n_clusters=2, affinity='nearest_neighbors',\n                             random_state=0)\n@@ -204,3 +203,23 @@ def test_spectral_clustering_with_arpack_amg_solvers():\n         assert_raises(\n             ValueError, spectral_clustering,\n             graph, n_clusters=2, eigen_solver='amg', random_state=0)\n+\n+\n+def test_n_components():\n+    # Test that after adding n_components, result is different and\n+    # n_components = n_clusters by default\n+    X, y = make_blobs(n_samples=20, random_state=0,\n+                      centers=[[1, 1], [-1, -1]], cluster_std=0.01)\n+    sp = SpectralClustering(n_clusters=2, random_state=0)\n+    labels = sp.fit(X).labels_\n+    # set n_components = n_cluster and test if result is the same\n+    labels_same_ncomp = SpectralClustering(n_clusters=2, n_components=2,\n+                                           random_state=0).fit(X).labels_\n+    # test that n_components=n_clusters by default\n+    assert_array_equal(labels, labels_same_ncomp)\n+\n+    # test that n_components affect result\n+    # n_clusters=8 by default, and set n_components=2\n+    labels_diff_ncomp = SpectralClustering(n_components=2,\n+                                           random_state=0).fit(X).labels_\n+    assert not np.array_equal(labels, labels_diff_ncomp)\n",
  "problem_statement": "n_components kwarg missing in SpectralClustering\nThe `n_components` kwarg defined in the `spectral_clustering` function allow the user to choose how many eigenvalues/eigenvectors should be used in the classification.\r\nHowever this kwarg cannot be accessed/modified when using `SpectralClustering` class, and is set to default (`n_components` = `nb_clusters`). Since the `SpectralClustering` class calls the spectral_clustering function, I guess the user should be able to access this kwarg ?\n",
  "hints_text": "I don't know the history of this. Maybe someone wants to go digging to find out whether this was a reasoned choice by the developers\nI looked at the code, and obviously `n_components` is not a instance variable of the `SpectralClustering` class, and when an instance of `SpectralClustering` class calls fit, `n_components` is not passed into `spectral_clustering` method. So should the fix of this problem be adding a `n_components` instance variable to the `SpectralClustering` class? Or is there any other concern for not doing so? @adrinjalali\r\n\r\nIf adding a `n_components` instance variable is a reasonable fix, I would like to work on this. Thanks",
  "created_at": "2019-04-25T19:27:07Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/cluster/tests/test_spectral.py::test_n_components\"]",
  "PASS_TO_PASS": "[\"sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-arpack]\", \"sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-lobpcg]\", \"sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-arpack]\", \"sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-lobpcg]\", \"sklearn/cluster/tests/test_spectral.py::test_spectral_unknown_mode\", \"sklearn/cluster/tests/test_spectral.py::test_spectral_unknown_assign_labels\", \"sklearn/cluster/tests/test_spectral.py::test_spectral_clustering_sparse\", \"sklearn/cluster/tests/test_spectral.py::test_affinities\", \"sklearn/cluster/tests/test_spectral.py::test_discretize[50]\", \"sklearn/cluster/tests/test_spectral.py::test_discretize[100]\", \"sklearn/cluster/tests/test_spectral.py::test_discretize[150]\", \"sklearn/cluster/tests/test_spectral.py::test_discretize[500]\", \"sklearn/cluster/tests/test_spectral.py::test_spectral_clustering_with_arpack_amg_solvers\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.998392",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}