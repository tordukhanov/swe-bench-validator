{
  "repo": "django/django",
  "instance_id": "django__django-16952",
  "base_commit": "d6e9ec40145b9edc65e8d0c65bd3f4ef8a7a27bb",
  "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1775,6 +1775,21 @@ def _check_field_name_clashes(cls):\n                 if f not in used_fields:\n                     used_fields[f.name] = f\n \n+        # Check that parent links in diamond-shaped MTI models don't clash.\n+        for parent_link in cls._meta.parents.values():\n+            if not parent_link:\n+                continue\n+            clash = used_fields.get(parent_link.name) or None\n+            if clash:\n+                errors.append(\n+                    checks.Error(\n+                        f\"The field '{parent_link.name}' clashes with the field \"\n+                        f\"'{clash.name}' from model '{clash.model._meta}'.\",\n+                        obj=cls,\n+                        id=\"models.E006\",\n+                    )\n+                )\n+\n         for f in cls._meta.local_fields:\n             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None\n             # Note that we may detect clash between user-defined non-unique\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -864,7 +864,7 @@ def _get_fields(\n         reverse=True,\n         include_parents=True,\n         include_hidden=False,\n-        seen_models=None,\n+        topmost_call=True,\n     ):\n         \"\"\"\n         Internal helper function to return fields of the model.\n@@ -885,13 +885,6 @@ def _get_fields(\n         # implementation and to provide a fast way for Django's internals to\n         # access specific subsets of fields.\n \n-        # We must keep track of which models we have already seen. Otherwise we\n-        # could include the same field multiple times from different models.\n-        topmost_call = seen_models is None\n-        if topmost_call:\n-            seen_models = set()\n-        seen_models.add(self.model)\n-\n         # Creates a cache key composed of all arguments\n         cache_key = (forward, reverse, include_parents, include_hidden, topmost_call)\n \n@@ -906,12 +899,11 @@ def _get_fields(\n         # Recursively call _get_fields() on each parent, with the same\n         # options provided in this call.\n         if include_parents is not False:\n+            # In diamond inheritance it is possible that we see the same model\n+            # from two different routes. In that case, avoid adding fields from\n+            # the same parent again.\n+            parent_fields = set()\n             for parent in self.parents:\n-                # In diamond inheritance it is possible that we see the same\n-                # model from two different routes. In that case, avoid adding\n-                # fields from the same parent again.\n-                if parent in seen_models:\n-                    continue\n                 if (\n                     parent._meta.concrete_model != self.concrete_model\n                     and include_parents == PROXY_PARENTS\n@@ -922,13 +914,15 @@ def _get_fields(\n                     reverse=reverse,\n                     include_parents=include_parents,\n                     include_hidden=include_hidden,\n-                    seen_models=seen_models,\n+                    topmost_call=False,\n                 ):\n                     if (\n                         not getattr(obj, \"parent_link\", False)\n                         or obj.model == self.concrete_model\n-                    ):\n+                    ) and obj not in parent_fields:\n                         fields.append(obj)\n+                        parent_fields.add(obj)\n+\n         if reverse and not self.proxy:\n             # Tree is computed once and cached until the app cache is expired.\n             # It is composed of a list of fields pointing to the current model\n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1070,6 +1070,31 @@ class GrandChild(Child):\n             ],\n         )\n \n+    def test_diamond_mti_common_parent(self):\n+        class GrandParent(models.Model):\n+            pass\n+\n+        class Parent(GrandParent):\n+            pass\n+\n+        class Child(Parent):\n+            pass\n+\n+        class MTICommonParentModel(Child, GrandParent):\n+            pass\n+\n+        self.assertEqual(\n+            MTICommonParentModel.check(),\n+            [\n+                Error(\n+                    \"The field 'grandparent_ptr' clashes with the field \"\n+                    \"'grandparent_ptr' from model 'invalid_models_tests.parent'.\",\n+                    obj=MTICommonParentModel,\n+                    id=\"models.E006\",\n+                )\n+            ],\n+        )\n+\n     def test_id_clash(self):\n         class Target(models.Model):\n             pass\ndiff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -106,6 +106,12 @@ class ItalianRestaurant(Restaurant):\n     serves_gnocchi = models.BooleanField(default=False)\n \n \n+class ItalianRestaurantCommonParent(ItalianRestaurant, Place):\n+    place_ptr_two = models.OneToOneField(\n+        Place, on_delete=models.CASCADE, parent_link=True\n+    )\n+\n+\n class Supplier(Place):\n     customers = models.ManyToManyField(Restaurant, related_name=\"provider\")\n \ndiff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -15,6 +15,7 @@\n     GrandChild,\n     GrandParent,\n     ItalianRestaurant,\n+    ItalianRestaurantCommonParent,\n     MixinModel,\n     Parent,\n     ParkingLot,\n@@ -158,6 +159,28 @@ def test_create_diamond_mti_default_pk(self):\n         with self.assertNumQueries(4):\n             common_child.save()\n \n+    def test_create_diamond_mti_common_parent(self):\n+        with self.assertNumQueries(4):\n+            italian_restaurant_child = ItalianRestaurantCommonParent.objects.create(\n+                name=\"Ristorante Miron\",\n+                address=\"1234 W. Ash\",\n+            )\n+\n+        self.assertEqual(\n+            italian_restaurant_child.italianrestaurant_ptr.place_ptr,\n+            italian_restaurant_child.place_ptr_two,\n+        )\n+        self.assertEqual(\n+            italian_restaurant_child.italianrestaurant_ptr.restaurant_ptr,\n+            italian_restaurant_child.restaurant_ptr,\n+        )\n+        self.assertEqual(\n+            italian_restaurant_child.restaurant_ptr.place_ptr,\n+            italian_restaurant_child.place_ptr_two,\n+        )\n+        self.assertEqual(italian_restaurant_child.name, \"Ristorante Miron\")\n+        self.assertEqual(italian_restaurant_child.address, \"1234 W. Ash\")\n+\n     def test_update_parent_filtering(self):\n         \"\"\"\n         Updating a field of a model subclass doesn't issue an UPDATE\n",
  "problem_statement": "Creating objects with nested MTI crashes.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nChecking ​PR I noticed that creating objects with more complicated multi-table inheritance crashes. For example:\ntests/model_inheritance/models.py\ndiff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex dc0e238f7e..d75df0d533 100644\n\t\t\t\t\t\n\t\t\t\t\t a\n\t\t\t\t \n\t\t\t\t\t\n\t\t\t\t\t b\n\t\t\t\t \n class ItalianRestaurant(Restaurant): \n106106    serves_gnocchi = models.BooleanField(default=False)\n107107\n108108\n 109class ItalianRestaurantManyParents(ItalianRestaurant, Place):\n 110    pass\n 111\n 112\n109113class Supplier(Place):\n110114    customers = models.ManyToManyField(Restaurant, related_name=\"provider\")\n111115\ntests/model_inheritance/tests.py\ndiff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 4542e6c3cc..838d35b9d6 100644\n\t\t\t\t\t\n\t\t\t\t\t a\n\t\t\t\t \n\t\t\t\t\t\n\t\t\t\t\t b\n\t\t\t\t \n from .models import ( \n1414    GrandChild,\n1515    GrandParent,\n1616    ItalianRestaurant,\n 17    ItalianRestaurantManyParents,\n1718    MixinModel,\n1819    Parent,\n1920    ParkingLot,\n…\n…\n class ModelInheritanceTests(TestCase): \n149150        # accidentally found).\n150151        self.assertSequenceEqual(s.titles.all(), [])\n151152\n 153    def test_create_diamond_mti_common_parents(self):\n 154        with self.assertNumQueries(4):\n 155            ItalianRestaurantManyParents.objects.create(\n 156                name=\"Ristorante Miron\",\n 157                address=\"1234 W. Ash\",\n 158            )\n 159\n152160    def test_update_parent_filtering(self):\n153161        \"\"\"\n154162        Updating a field of a model subclass doesn't issue an UPDATE\ncrashes with:\n File \"/django/tests/model_inheritance/tests.py\", line 155, in test_create_diamond_mti_common_parents\n\tItalianRestaurantManyParents.objects.create(\n File \"/django/django/db/models/manager.py\", line 87, in manager_method\n\treturn getattr(self.get_queryset(), name)(*args, **kwargs)\n File \"/django/django/db/models/query.py\", line 650, in create\n\tobj.save(force_insert=True, using=self.db)\n File \"/django/django/db/models/base.py\", line 814, in save\n\tself.save_base(\n File \"/django/django/db/models/base.py\", line 876, in save_base\n\tparent_inserted = self._save_parents(cls, using, update_fields)\n File \"/django/django/db/models/base.py\", line 928, in _save_parents\n\tsetattr(self, field.attname, self._get_pk_val(parent._meta))\nAttributeError: 'OneToOneField' object has no attribute 'attname'\n",
  "hints_text": "​PR\n​Separate PR\nAssertions fail.\nOpened a ​google group discussion\nPossible MTI Scenarios with two bases in Django Example Model: class CommonChild(FirstParent, SecondParent): pass Case 1 -- FirstParent and Secondparent are does not have a common ancestor This scenario shows no regression Case 2 -- FirstParent and Secondparent have a common ancestor This scenario shows regression only with primary key with default, as mentioned in #33414 Case 3 -- FirstParent is the ancestor of SecondParent This shows the following TypeError. (I think this is the expected scenario) TypeError: Cannot create a consistent method resolution order (MRO) for bases FirstParent, Secondparent Case 4 -- Secondparent is the ancestor of FirstParent(Case mentioned here) I tried to print ItalianRestaurantManyParents._meta.get_fields() , it contained all the fields of the Place model twice, that means we are having conflicts passing all the checks here. As the fields in ItalianRestaurantManyParents is already a superset of all the fields of Place I don't think it makes any real world use case scenario for allowing such this kind of MTI scenario. Possible solution 1 : would be to put a check and show a similar kind of error like case 3. Possible solution 2 : would be to let the child eat the parent during initialization of the model, like the following. (This seems to be passing all the tests, just have one problem. When the user defines a custom OneToOneField pointer to the SecondParent) class ModelBase(type): \"\"\"Metaclass for all models.\"\"\" def __new__(cls, name, bases, attrs, **kwargs): super_new = super().__new__ # Also ensure initialization is only performed for subclasses of Model # (excluding Model class itself). parents = [b for b in bases if isinstance(b, ModelBase)] for parent in parents: if any( issubclass(other_parent, parent) for other_parent in parents if not other_parent == parent ): parents.remove(parent) if not parents: return super_new(cls, name, bases, attrs)\nUpdated the PR with possible solution 2 on comment\nIt feels like ItalianRestaurantManyParents should not be allowed to be defined in the first place since place_ptr conflicts. For example the following model cannot be defined tests/model_inheritance/models.py diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py index dc0e238f7e..9b25ac4b8a 100644 a b class Supplier(Place): 110110 customers = models.ManyToManyField(Restaurant, related_name=\"provider\") 111111 112112 113class Foo(Supplier, Restaurant): 114 pass 115 113116class CustomSupplier(Supplier): 114117 pass 115118 model_inheritance.Bob: (models.E005) The field 'place_ptr' from parent model 'model_inheritance.supplier' clashes with the field 'place_ptr' from parent model 'model_inheritance.restaurant'. I would expect a similar crash when defining ItalianRestaurantManyParents about a conflicting place_ptr. Once the model is appropriately defined to avoid the conflicting parent link the creation succeeds with an extra query tests/model_inheritance/models.py diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py index dc0e238f7e..c303a97d04 100644 a b class ItalianRestaurant(Restaurant): 106106 serves_gnocchi = models.BooleanField(default=False) 107107 108108 109class ItalianRestaurantManyParents(ItalianRestaurant, Place): 110 place_two_ptr = models.OneToOneField( 111 Place, on_delete=models.CASCADE, parent_link=True 112 ) 113 114 109115class Supplier(Place): 110116 customers = models.ManyToManyField(Restaurant, related_name=\"provider\") 111117 tests/model_inheritance/tests.py diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py index 4542e6c3cc..0ed9d2f14e 100644 a b 2525 Supplier, 2626 Title, 2727 Worker, 28 ItalianRestaurantManyParents, 2829) 2930 3031 … … def test_custompk_m2m(self): 149150 # accidentally found). 150151 self.assertSequenceEqual(s.titles.all(), []) 151152 153 def test_create_diamond_mti_common_parents(self): 154 with self.assertNumQueries(5): 155 ItalianRestaurantManyParents.objects.create( 156 name=\"Ristorante Miron\", 157 address=\"1234 W. Ash\", 158 ) 159 152160 def test_update_parent_filtering(self): 153161 \"\"\" 154162 Updating a field of a model subclass doesn't issue an UPDATE 1. INSERT INTO \"model_inheritance_place\" (\"name\", \"address\") VALUES ('', '') RETURNING \"model_inheritance_place\".\"id\" 2. INSERT INTO \"my_restaurant\" (\"place_ptr_id\", \"rating\", \"serves_hot_dogs\", \"serves_pizza\", \"chef_id\") VALUES (1, NULL, 0, 0, NULL) 3. INSERT INTO \"model_inheritance_italianrestaurant\" (\"restaurant_ptr_id\", \"serves_gnocchi\") VALUES (1, 0) 4. UPDATE \"model_inheritance_place\" SET \"name\" = '', \"address\" = '' WHERE \"model_inheritance_place\".\"id\" = 1 5. INSERT INTO \"model_inheritance_italianrestaurantmanyparents\" (\"italianrestaurant_ptr_id\", \"place_two_ptr_id\") VALUES (1, 1)\nReplying to Simon Charette: It feels like ItalianRestaurantManyParents should not be allowed to be defined in the first place since place_ptr conflicts. Agreed\nReplying to Simon Charette: 1. INSERT INTO \"model_inheritance_place\" (\"name\", \"address\") VALUES ('', '') RETURNING \"model_inheritance_place\".\"id\" The values are empty strings in the query 1, So I don't think this gives the expected results. The name and address should have their respective values instead of empty strings. It feels like ItalianRestaurantManyParents should not be allowed to be defined in the first place since place_ptr conflicts. Along with the field place_ptr , the following fields, i.e all the fields of Place model seems to be <django.db.models.fields.AutoField: id>, <django.db.models.fields.CharField: name>, <django.db.models.fields.CharField: address> present twice without any conflicts or errors. So I think it would make sense if we disallow the case-4 according to comment:8\nThe values are empty strings in the query 1, So I don't think this gives the expected results. The name and address should have their respective values instead of empty strings. Right I missed that. So no more crash but wrong behaviour. Along with the field place_ptr , the following fields, i.e all the fields of Place model seems to be <django.db.models.fields.AutoField: id>, <django.db.models.fields.CharField: name>, <django.db.models.fields.CharField: address> present twice without any conflicts or errors. So I think it would make sense if we disallow the case-4 according to comment:8 I'm not sure I understand why this is the case. When ItalianRestaurantManyParents(ItalianRestaurant, Place) is defined it requires creating two parent links, italianrestaurant_ptr -> ItalianRestaurant and place_ptr -> Place. The only attribute conflict should be between ItalianRestaurantManyParents.place_ptr and Restaurant.place_ptr in this case, all the other fields are only defined once on the Place model and nowhere else.\nI tried to do the following: class ItalianRestaurantManyParents(ItalianRestaurant, Place): place_ptr = models.OneToOneField( Place, on_delete=models.CASCADE, parent_link=True ) This is producing the expected conflict of the place_ptr field on checks.\nThe empty string insertions are due to a bug in Options._get_fields due to how its caching strategy doesn't take seen_models into accounts even if it can greatly influence the value stashed in the cache. Because of that fields inherited from Place are present twice in ItalianRestaurantManyParents.meta.fields which breaks Model.__init__ class ItalianRestaurantManyParents(ItalianRestaurant, Place): place_two_ptr = models.OneToOneField( Place, on_delete=models.CASCADE, parent_link=True ) >>> ItalianRestaurantManyParents._meta.fields (<django.db.models.fields.AutoField: id>, <django.db.models.fields.CharField: name>, <django.db.models.fields.CharField: address>, <django.db.models.fields.related.OneToOneField: place_ptr>, <django.db.models.fields.IntegerField: rating>, <django.db.models.fields.BooleanField: serves_hot_dogs>, <django.db.models.fields.BooleanField: serves_pizza>, <django.db.models.fields.related.ForeignKey: chef>, <django.db.models.fields.related.OneToOneField: restaurant_ptr>, <django.db.models.fields.BooleanField: serves_gnocchi>, <django.db.models.fields.AutoField: id>, # dupe, already inherited from Place <django.db.models.fields.CharField: name>, # dupe, already inherited from Place <django.db.models.fields.CharField: address>, # dupe, already inherited from Place <django.db.models.fields.related.OneToOneField: italianrestaurant_ptr>, <django.db.models.fields.related.OneToOneField: place_two_ptr>) But if you clear the options cache >>> ItalianRestaurantManyParents._meta._expire_cache() >>> ItalianRestaurant._meta._expire_cache() >>> Restaurant._meta._expire_cache() >>> Rating._meta._expire_cache() >>> Place._meta._expire_cache() >>> ItalianRestaurantManyParents._meta.fields (<django.db.models.fields.AutoField: id>, <django.db.models.fields.CharField: name>, <django.db.models.fields.CharField: address>, <django.db.models.fields.related.OneToOneField: place_ptr>, <django.db.models.fields.IntegerField: rating>, <django.db.models.fields.BooleanField: serves_hot_dogs>, <django.db.models.fields.BooleanField: serves_pizza>, <django.db.models.fields.related.ForeignKey: chef>, <django.db.models.fields.related.OneToOneField: restaurant_ptr>, <django.db.models.fields.BooleanField: serves_gnocchi>, <django.db.models.fields.related.OneToOneField: italianrestaurant_ptr>, <django.db.models.fields.related.OneToOneField: place_two_ptr>) Things are right again! My initial attempt at solving the issue django/db/models/options.py diff --git a/django/db/models/options.py b/django/db/models/options.py index 00735e0de1..2f46df992e 100644 a b def _get_fields( 864864 reverse=True, 865865 include_parents=True, 866866 include_hidden=False, 867 seen_models=None, 867 topmost_call=True, 868868 ): 869869 \"\"\" 870870 Internal helper function to return fields of the model. … … def _get_fields( 885885 # implementation and to provide a fast way for Django's internals to 886886 # access specific subsets of fields. 887887 888 # We must keep track of which models we have already seen. Otherwise we 889 # could include the same field multiple times from different models. 890 topmost_call = seen_models is None 891 if topmost_call: 892 seen_models = set() 893 seen_models.add(self.model) 894 895888 # Creates a cache key composed of all arguments 896889 cache_key = (forward, reverse, include_parents, include_hidden, topmost_call) 897890 … … def _get_fields( 906899 # Recursively call _get_fields() on each parent, with the same 907900 # options provided in this call. 908901 if include_parents is not False: 902 # In diamond inheritance it is possible that we see the same 903 # field from two different routes. In that case, avoid adding 904 # fields from the same parent again. 905 parent_fields = set() 909906 for parent in self.parents: 910 # In diamond inheritance it is possible that we see the same 911 # model from two different routes. In that case, avoid adding 912 # fields from the same parent again. 913 if parent in seen_models: 914 continue 915907 if ( 916908 parent._meta.concrete_model != self.concrete_model 917909 and include_parents == PROXY_PARENTS … … def _get_fields( 922914 reverse=reverse, 923915 include_parents=include_parents, 924916 include_hidden=include_hidden, 925 seen_models=seen_models, 917 topmost_call=False, 926918 ): 927919 if ( 928920 not getattr(obj, \"parent_link\", False) 929921 or obj.model == self.concrete_model 930 ): 922 ) and obj not in parent_fields: 931923 fields.append(obj) 924 parent_fields.add(obj) 932925 if reverse and not self.proxy: 933926 # Tree is computed once and cached until the app cache is expired. 934927 # It is composed of a list of fields pointing to the current model So in order to address I issue I think a plan would be Wait for #33414 to be merged as it affects the number of queries performed on creation Adjust the system check that detects field collisions to catch the case in the initial report (first commit) Merge the changes to Options._get_fields with the test added by Mariusz with the small adjustment to the model mentioned in comment:10 to make sure it passes the system check added adjusted in 2 (second commit) Does that make sense to you?\nHas for me.",
  "created_at": "2023-06-07T04:38:25Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_diamond_mti_common_parent (invalid_models_tests.test_models.ShadowingFieldsTests.test_diamond_mti_common_parent)\", \"test_create_diamond_mti_common_parent (model_inheritance.tests.ModelInheritanceTests.test_create_diamond_mti_common_parent)\"]",
  "PASS_TO_PASS": "[\"test_multiple_autofields (invalid_models_tests.test_models.MultipleAutoFieldsTests.test_multiple_autofields)\", \"test_unique (model_inheritance.tests.InheritanceUniqueTests.test_unique)\", \"test_unique_together (model_inheritance.tests.InheritanceUniqueTests.test_unique_together)\", \"test_abstract_fk_related_name (model_inheritance.tests.InheritanceSameModelNameTests.test_abstract_fk_related_name)\", \"test_db_table_comment (invalid_models_tests.test_models.DbTableCommentTests.test_db_table_comment)\", \"test_db_table_comment_required_db_features (invalid_models_tests.test_models.DbTableCommentTests.test_db_table_comment_required_db_features)\", \"test_check_jsonfield (invalid_models_tests.test_models.JSONFieldTests.test_check_jsonfield)\", \"test_check_jsonfield_required_db_features (invalid_models_tests.test_models.JSONFieldTests.test_check_jsonfield_required_db_features)\", \"test_ordering_pointing_to_json_field_value (invalid_models_tests.test_models.JSONFieldTests.test_ordering_pointing_to_json_field_value)\", \"test_db_column_clash (invalid_models_tests.test_models.FieldNamesTests.test_db_column_clash)\", \"test_ending_with_underscore (invalid_models_tests.test_models.FieldNamesTests.test_ending_with_underscore)\", \"test_including_separator (invalid_models_tests.test_models.FieldNamesTests.test_including_separator)\", \"test_pk (invalid_models_tests.test_models.FieldNamesTests.test_pk)\", \"test_list_containing_non_iterable (invalid_models_tests.test_models.IndexTogetherTests.test_list_containing_non_iterable)\", \"test_non_iterable (invalid_models_tests.test_models.IndexTogetherTests.test_non_iterable)\", \"test_non_list (invalid_models_tests.test_models.IndexTogetherTests.test_non_list)\", \"test_pointing_to_fk (invalid_models_tests.test_models.IndexTogetherTests.test_pointing_to_fk)\", \"test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexTogetherTests.test_pointing_to_m2m_field)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.IndexTogetherTests.test_pointing_to_missing_field)\", \"test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexTogetherTests.test_pointing_to_non_local_field)\", \"test_list_containing_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests.test_list_containing_non_iterable)\", \"test_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests.test_non_iterable)\", \"test_non_list (invalid_models_tests.test_models.UniqueTogetherTests.test_non_list)\", \"test_pointing_to_fk (invalid_models_tests.test_models.UniqueTogetherTests.test_pointing_to_fk)\", \"test_pointing_to_m2m (invalid_models_tests.test_models.UniqueTogetherTests.test_pointing_to_m2m)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.UniqueTogetherTests.test_pointing_to_missing_field)\", \"test_valid_model (invalid_models_tests.test_models.UniqueTogetherTests.test_valid_model)\", \"test_field_name_clash_with_child_accessor (invalid_models_tests.test_models.ShadowingFieldsTests.test_field_name_clash_with_child_accessor)\", \"test_field_name_clash_with_m2m_through (invalid_models_tests.test_models.ShadowingFieldsTests.test_field_name_clash_with_m2m_through)\", \"test_id_clash (invalid_models_tests.test_models.ShadowingFieldsTests.test_id_clash)\", \"test_inheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests.test_inheritance_clash)\", \"test_multigeneration_inheritance (invalid_models_tests.test_models.ShadowingFieldsTests.test_multigeneration_inheritance)\", \"test_multiinheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests.test_multiinheritance_clash)\", \"test_func_index (invalid_models_tests.test_models.IndexesTests.test_func_index)\", \"test_func_index_complex_expression_custom_lookup (invalid_models_tests.test_models.IndexesTests.test_func_index_complex_expression_custom_lookup)\", \"test_func_index_pointing_to_fk (invalid_models_tests.test_models.IndexesTests.test_func_index_pointing_to_fk)\", \"test_func_index_pointing_to_m2m_field (invalid_models_tests.test_models.IndexesTests.test_func_index_pointing_to_m2m_field)\", \"test_func_index_pointing_to_missing_field (invalid_models_tests.test_models.IndexesTests.test_func_index_pointing_to_missing_field)\", \"test_func_index_pointing_to_missing_field_nested (invalid_models_tests.test_models.IndexesTests.test_func_index_pointing_to_missing_field_nested)\", \"test_func_index_pointing_to_non_local_field (invalid_models_tests.test_models.IndexesTests.test_func_index_pointing_to_non_local_field)\", \"test_func_index_required_db_features (invalid_models_tests.test_models.IndexesTests.test_func_index_required_db_features)\", \"test_index_with_condition (invalid_models_tests.test_models.IndexesTests.test_index_with_condition)\", \"test_index_with_condition_required_db_features (invalid_models_tests.test_models.IndexesTests.test_index_with_condition_required_db_features)\", \"test_index_with_include (invalid_models_tests.test_models.IndexesTests.test_index_with_include)\", \"test_index_with_include_required_db_features (invalid_models_tests.test_models.IndexesTests.test_index_with_include_required_db_features)\", \"test_max_name_length (invalid_models_tests.test_models.IndexesTests.test_max_name_length)\", \"test_name_constraints (invalid_models_tests.test_models.IndexesTests.test_name_constraints)\", \"test_pointing_to_fk (invalid_models_tests.test_models.IndexesTests.test_pointing_to_fk)\", \"test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexesTests.test_pointing_to_m2m_field)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.IndexesTests.test_pointing_to_missing_field)\", \"test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexesTests.test_pointing_to_non_local_field)\", \"test_exclude_inherited_on_null (model_inheritance.tests.ModelInheritanceDataTests.test_exclude_inherited_on_null)\", \"test_filter_inherited_model (model_inheritance.tests.ModelInheritanceDataTests.test_filter_inherited_model)\", \"test_filter_inherited_on_null (model_inheritance.tests.ModelInheritanceDataTests.test_filter_inherited_on_null)\", \"test_filter_on_parent_returns_object_of_parent_type (model_inheritance.tests.ModelInheritanceDataTests.test_filter_on_parent_returns_object_of_parent_type)\", \"test_inherited_does_not_exist_exception (model_inheritance.tests.ModelInheritanceDataTests.test_inherited_does_not_exist_exception)\", \"test_inherited_multiple_objects_returned_exception (model_inheritance.tests.ModelInheritanceDataTests.test_inherited_multiple_objects_returned_exception)\", \"test_parent_cache_reuse (model_inheritance.tests.ModelInheritanceDataTests.test_parent_cache_reuse)\", \"test_parent_child_one_to_one_link (model_inheritance.tests.ModelInheritanceDataTests.test_parent_child_one_to_one_link)\", \"test_parent_child_one_to_one_link_on_nonrelated_objects (model_inheritance.tests.ModelInheritanceDataTests.test_parent_child_one_to_one_link_on_nonrelated_objects)\", \"test_parent_fields_available_for_filtering_in_child_model (model_inheritance.tests.ModelInheritanceDataTests.test_parent_fields_available_for_filtering_in_child_model)\", \"test_related_objects_for_inherited_models (model_inheritance.tests.ModelInheritanceDataTests.test_related_objects_for_inherited_models)\", \"#23370 - Should be able to defer child fields when using\", \"test_select_related_works_on_parent_model_fields (model_inheritance.tests.ModelInheritanceDataTests.test_select_related_works_on_parent_model_fields)\", \"test_update_inherited_model (model_inheritance.tests.ModelInheritanceDataTests.test_update_inherited_model)\", \"Update queries do not generate unnecessary queries (#18304).\", \"test_update_works_on_parent_and_child_models_at_once (model_inheritance.tests.ModelInheritanceDataTests.test_update_works_on_parent_and_child_models_at_once)\", \"test_values_works_on_parent_model_fields (model_inheritance.tests.ModelInheritanceDataTests.test_values_works_on_parent_model_fields)\", \"test_abstract (model_inheritance.tests.ModelInheritanceTests.test_abstract)\", \"test_abstract_parent_link (model_inheritance.tests.ModelInheritanceTests.test_abstract_parent_link)\", \"Creating a child with non-abstract parents only issues INSERTs.\", \"test_create_copy_with_inherited_m2m (model_inheritance.tests.ModelInheritanceTests.test_create_copy_with_inherited_m2m)\", \"test_create_diamond_mti_default_pk (model_inheritance.tests.ModelInheritanceTests.test_create_diamond_mti_default_pk)\", \"test_custompk_m2m (model_inheritance.tests.ModelInheritanceTests.test_custompk_m2m)\", \"test_eq (model_inheritance.tests.ModelInheritanceTests.test_eq)\", \"test_inherited_ordering_pk_desc (model_inheritance.tests.ModelInheritanceTests.test_inherited_ordering_pk_desc)\", \"test_init_subclass (model_inheritance.tests.ModelInheritanceTests.test_init_subclass)\", \"test_meta_fields_and_ordering (model_inheritance.tests.ModelInheritanceTests.test_meta_fields_and_ordering)\", \"test_mixin_init (model_inheritance.tests.ModelInheritanceTests.test_mixin_init)\", \"test_model_with_distinct_accessors (model_inheritance.tests.ModelInheritanceTests.test_model_with_distinct_accessors)\", \"test_model_with_distinct_related_query_name (model_inheritance.tests.ModelInheritanceTests.test_model_with_distinct_related_query_name)\", \"test_queryset_class_getitem (model_inheritance.tests.ModelInheritanceTests.test_queryset_class_getitem)\", \"test_reverse_relation_for_different_hierarchy_tree (model_inheritance.tests.ModelInheritanceTests.test_reverse_relation_for_different_hierarchy_tree)\", \"test_set_name (model_inheritance.tests.ModelInheritanceTests.test_set_name)\", \"test_shadow_parent_attribute_with_field (model_inheritance.tests.ModelInheritanceTests.test_shadow_parent_attribute_with_field)\", \"test_shadow_parent_method_with_field (model_inheritance.tests.ModelInheritanceTests.test_shadow_parent_method_with_field)\", \"test_shadow_parent_property_with_field (model_inheritance.tests.ModelInheritanceTests.test_shadow_parent_property_with_field)\", \"Updating a field of a model subclass doesn't issue an UPDATE\", \"test_check_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_fk)\", \"test_check_constraint_pointing_to_joined_fields (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_joined_fields)\", \"test_check_constraint_pointing_to_joined_fields_complex_check (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_joined_fields_complex_check)\", \"test_check_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_m2m_field)\", \"test_check_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_missing_field)\", \"test_check_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_non_local_field)\", \"test_check_constraint_pointing_to_pk (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_pk)\", \"test_check_constraint_pointing_to_reverse_fk (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_reverse_fk)\", \"test_check_constraint_pointing_to_reverse_o2o (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_reverse_o2o)\", \"test_check_constraint_raw_sql_check (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_raw_sql_check)\", \"test_check_constraints (invalid_models_tests.test_models.ConstraintsTests.test_check_constraints)\", \"test_check_constraints_required_db_features (invalid_models_tests.test_models.ConstraintsTests.test_check_constraints_required_db_features)\", \"test_deferrable_unique_constraint (invalid_models_tests.test_models.ConstraintsTests.test_deferrable_unique_constraint)\", \"test_deferrable_unique_constraint_required_db_features (invalid_models_tests.test_models.ConstraintsTests.test_deferrable_unique_constraint_required_db_features)\", \"test_func_unique_constraint (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint)\", \"test_func_unique_constraint_expression_custom_lookup (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint_expression_custom_lookup)\", \"test_func_unique_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint_pointing_to_fk)\", \"test_func_unique_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint_pointing_to_m2m_field)\", \"test_func_unique_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint_pointing_to_missing_field)\", \"test_func_unique_constraint_pointing_to_missing_field_nested (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint_pointing_to_missing_field_nested)\", \"test_func_unique_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint_pointing_to_non_local_field)\", \"test_func_unique_constraint_required_db_features (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint_required_db_features)\", \"test_unique_constraint_condition_pointing_to_joined_fields (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_condition_pointing_to_joined_fields)\", \"test_unique_constraint_condition_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_condition_pointing_to_missing_field)\", \"test_unique_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_fk)\", \"test_unique_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_m2m_field)\", \"test_unique_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_missing_field)\", \"test_unique_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_non_local_field)\", \"test_unique_constraint_pointing_to_reverse_o2o (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_reverse_o2o)\", \"test_unique_constraint_with_condition (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_with_condition)\", \"test_unique_constraint_with_condition_required_db_features (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_with_condition_required_db_features)\", \"test_unique_constraint_with_include (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_with_include)\", \"test_unique_constraint_with_include_required_db_features (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_with_include_required_db_features)\", \"test_just_order_with_respect_to_no_errors (invalid_models_tests.test_models.OtherModelTests.test_just_order_with_respect_to_no_errors)\", \"test_just_ordering_no_errors (invalid_models_tests.test_models.OtherModelTests.test_just_ordering_no_errors)\", \"test_lazy_reference_checks (invalid_models_tests.test_models.OtherModelTests.test_lazy_reference_checks)\", \"test_m2m_autogenerated_table_name_clash (invalid_models_tests.test_models.OtherModelTests.test_m2m_autogenerated_table_name_clash)\", \"test_m2m_autogenerated_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests.test_m2m_autogenerated_table_name_clash_database_routers_installed)\", \"test_m2m_field_table_name_clash (invalid_models_tests.test_models.OtherModelTests.test_m2m_field_table_name_clash)\", \"test_m2m_field_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests.test_m2m_field_table_name_clash_database_routers_installed)\", \"test_m2m_table_name_clash (invalid_models_tests.test_models.OtherModelTests.test_m2m_table_name_clash)\", \"test_m2m_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests.test_m2m_table_name_clash_database_routers_installed)\", \"test_m2m_to_concrete_and_proxy_allowed (invalid_models_tests.test_models.OtherModelTests.test_m2m_to_concrete_and_proxy_allowed)\", \"test_m2m_unmanaged_shadow_models_not_checked (invalid_models_tests.test_models.OtherModelTests.test_m2m_unmanaged_shadow_models_not_checked)\", \"test_name_beginning_with_underscore (invalid_models_tests.test_models.OtherModelTests.test_name_beginning_with_underscore)\", \"test_name_contains_double_underscores (invalid_models_tests.test_models.OtherModelTests.test_name_contains_double_underscores)\", \"test_name_ending_with_underscore (invalid_models_tests.test_models.OtherModelTests.test_name_ending_with_underscore)\", \"test_non_valid (invalid_models_tests.test_models.OtherModelTests.test_non_valid)\", \"test_onetoone_with_explicit_parent_link_parent_model (invalid_models_tests.test_models.OtherModelTests.test_onetoone_with_explicit_parent_link_parent_model)\", \"test_onetoone_with_parent_model (invalid_models_tests.test_models.OtherModelTests.test_onetoone_with_parent_model)\", \"test_ordering_allows_registered_lookups (invalid_models_tests.test_models.OtherModelTests.test_ordering_allows_registered_lookups)\", \"test_ordering_non_iterable (invalid_models_tests.test_models.OtherModelTests.test_ordering_non_iterable)\", \"test_ordering_pointing_multiple_times_to_model_fields (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_multiple_times_to_model_fields)\", \"test_ordering_pointing_to_foreignkey_field (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_foreignkey_field)\", \"test_ordering_pointing_to_lookup_not_transform (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_lookup_not_transform)\", \"test_ordering_pointing_to_missing_field (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_missing_field)\", \"test_ordering_pointing_to_missing_foreignkey_field (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_missing_foreignkey_field)\", \"test_ordering_pointing_to_missing_related_field (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_missing_related_field)\", \"test_ordering_pointing_to_missing_related_model_field (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_missing_related_model_field)\", \"test_ordering_pointing_to_non_related_field (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_non_related_field)\", \"test_ordering_pointing_to_related_model_pk (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_related_model_pk)\", \"test_ordering_pointing_to_two_related_model_field (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_two_related_model_field)\", \"test_ordering_with_order_with_respect_to (invalid_models_tests.test_models.OtherModelTests.test_ordering_with_order_with_respect_to)\", \"test_property_and_related_field_accessor_clash (invalid_models_tests.test_models.OtherModelTests.test_property_and_related_field_accessor_clash)\", \"test_single_primary_key (invalid_models_tests.test_models.OtherModelTests.test_single_primary_key)\", \"test_swappable_missing_app (invalid_models_tests.test_models.OtherModelTests.test_swappable_missing_app)\", \"test_swappable_missing_app_name (invalid_models_tests.test_models.OtherModelTests.test_swappable_missing_app_name)\", \"test_two_m2m_through_same_model_with_different_through_fields (invalid_models_tests.test_models.OtherModelTests.test_two_m2m_through_same_model_with_different_through_fields)\", \"test_two_m2m_through_same_relationship (invalid_models_tests.test_models.OtherModelTests.test_two_m2m_through_same_relationship)\", \"test_unique_primary_key (invalid_models_tests.test_models.OtherModelTests.test_unique_primary_key)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.776658",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}