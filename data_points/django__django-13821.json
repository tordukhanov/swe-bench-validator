{
  "repo": "django/django",
  "instance_id": "django__django-13821",
  "base_commit": "e64c1d8055a3e476122633da141f16b50f0c4a2d",
  "patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -64,8 +64,10 @@ def list_aggregate(function):\n \n \n def check_sqlite_version():\n-    if Database.sqlite_version_info < (3, 8, 3):\n-        raise ImproperlyConfigured('SQLite 3.8.3 or later is required (found %s).' % Database.sqlite_version)\n+    if Database.sqlite_version_info < (3, 9, 0):\n+        raise ImproperlyConfigured(\n+            'SQLite 3.9.0 or later is required (found %s).' % Database.sqlite_version\n+        )\n \n \n check_sqlite_version()\n",
  "test_patch": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -30,9 +30,9 @@ class Tests(TestCase):\n     longMessage = True\n \n     def test_check_sqlite_version(self):\n-        msg = 'SQLite 3.8.3 or later is required (found 3.8.2).'\n-        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 2)), \\\n-                mock.patch.object(dbapi2, 'sqlite_version', '3.8.2'), \\\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n",
  "problem_statement": "Drop support for SQLite < 3.9.0\nDescription\n\t \n\t\t(last modified by Tim Graham)\n\t \nIndexes on expressions (see #26167) and the SQLITE_ENABLE_JSON1 compile-time option are supported on â€‹SQLite 3.9.0+.\nUbuntu Xenial ships with SQLite 3.11.0 (which will still by supported by Django) and will EOL in April 2021. Debian Jessie ships with 3.8.7 and was EOL June 30, 2020.\nSQLite 3.9.0 was released in October 2015. SQLite version support seems like a similar situation as GEOS libraries which we generally support about 5 years after released.\n",
  "hints_text": "",
  "created_at": "2020-12-29T15:16:10Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_check_sqlite_version (backends.sqlite.tests.Tests)\"]",
  "PASS_TO_PASS": "[\"test_parameter_escaping (backends.sqlite.tests.EscapingChecksDebug)\", \"test_parameter_escaping (backends.sqlite.tests.EscapingChecks)\", \"test_no_interpolation (backends.sqlite.tests.LastExecutedQueryTest)\", \"test_parameter_quoting (backends.sqlite.tests.LastExecutedQueryTest)\", \"Raise NotSupportedError when aggregating on date/time fields.\", \"test_distinct_aggregation (backends.sqlite.tests.Tests)\", \"test_distinct_aggregation_multiple_args_no_distinct (backends.sqlite.tests.Tests)\", \"A named in-memory db should be allowed where supported.\", \"test_pathlib_name (backends.sqlite.tests.Tests)\", \"test_regexp_function (backends.sqlite.tests.Tests)\", \"test_database_sharing_in_threads (backends.sqlite.tests.ThreadSharing)\", \"test_autoincrement (backends.sqlite.tests.SchemaTests)\", \"test_constraint_checks_disabled_atomic_allowed (backends.sqlite.tests.SchemaTests)\", \"test_disable_constraint_checking_failure_disallowed (backends.sqlite.tests.SchemaTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.671820",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}