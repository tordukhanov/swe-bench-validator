{
  "repo": "psf/requests",
  "instance_id": "psf__requests-1733",
  "base_commit": "a123f8351dc9f7ddfb06c5fafb25fedf6d119ff1",
  "patch": "diff --git a/requests/models.py b/requests/models.py\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -489,6 +489,19 @@ class Response(object):\n     server's response to an HTTP request.\n     \"\"\"\n \n+    __attrs__ = [\n+        '_content',\n+        'status_code',\n+        'headers',\n+        'url',\n+        'history',\n+        'encoding',\n+        'reason',\n+        'cookies',\n+        'elapsed',\n+        'request',\n+    ]\n+\n     def __init__(self):\n         super(Response, self).__init__()\n \n@@ -528,6 +541,24 @@ def __init__(self):\n         #: and the arrival of the response (as a timedelta)\n         self.elapsed = datetime.timedelta(0)\n \n+    def __getstate__(self):\n+        # Consume everything; accessing the content attribute makes\n+        # sure the content has been fully read.\n+        if not self._content_consumed:\n+            self.content\n+\n+        return dict(\n+            (attr, getattr(self, attr, None))\n+            for attr in self.__attrs__\n+        )\n+\n+    def __setstate__(self, state):\n+        for name, value in state.items():\n+            setattr(self, name, value)\n+\n+        # pickled objects do not have .raw\n+        setattr(self, '_content_consumed', True)\n+\n     def __repr__(self):\n         return '<Response [%s]>' % (self.status_code)\n \n",
  "test_patch": "diff --git a/test_requests.py b/test_requests.py\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -433,7 +433,7 @@ def test_unicode_multipart_post_fieldnames(self):\n         prep = r.prepare()\n         assert b'name=\"stuff\"' in prep.body\n         assert b'name=\"b\\'stuff\\'\"' not in prep.body\n-    \n+\n     def test_unicode_method_name(self):\n         files = {'file': open('test_requests.py', 'rb')}\n         r = requests.request(method=u'POST', url=httpbin('post'), files=files)\n@@ -547,6 +547,18 @@ def read_mock(amt, decode_content=None):\n         assert next(iter(r))\n         io.close()\n \n+    def test_request_and_response_are_pickleable(self):\n+        r = requests.get(httpbin('get'))\n+\n+        # verify we can pickle the original request\n+        assert pickle.loads(pickle.dumps(r.request))\n+\n+        # verify we can pickle the response and that we have access to\n+        # the original request.\n+        pr = pickle.loads(pickle.dumps(r))\n+        assert r.request.url == pr.request.url\n+        assert r.request.headers == pr.request.headers\n+\n     def test_get_auth_from_url(self):\n         url = 'http://user:pass@complex.url.com/path?query=yes'\n         assert ('user', 'pass') == requests.utils.get_auth_from_url(url)\n",
  "problem_statement": "allow Response class to be pickled\n```\nPython 2.7.4 (default, Apr 19 2013, 18:32:33) \n[GCC 4.7.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pickle, requests\n>>> pickle.dumps(requests.get('http://example.org'))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python2.7/pickle.py\", line 1374, in dumps\n    Pickler(file, protocol).dump(obj)\n  File \"/usr/lib/python2.7/pickle.py\", line 224, in dump\n    self.save(obj)\n  File \"/usr/lib/python2.7/pickle.py\", line 331, in save\n    self.save_reduce(obj=obj, *rv)\n  File \"/usr/lib/python2.7/pickle.py\", line 419, in save_reduce\n    save(state)\n  File \"/usr/lib/python2.7/pickle.py\", line 286, in save\n    f(self, obj) # Call unbound method with explicit self\n  File \"/usr/lib/python2.7/pickle.py\", line 649, in save_dict\n    self._batch_setitems(obj.iteritems())\n  File \"/usr/lib/python2.7/pickle.py\", line 663, in _batch_setitems\n    save(v)\n  File \"/usr/lib/python2.7/pickle.py\", line 331, in save\n    self.save_reduce(obj=obj, *rv)\n  File \"/usr/lib/python2.7/pickle.py\", line 419, in save_reduce\n    save(state)\n  File \"/usr/lib/python2.7/pickle.py\", line 286, in save\n    f(self, obj) # Call unbound method with explicit self\n  File \"/usr/lib/python2.7/pickle.py\", line 649, in save_dict\n    self._batch_setitems(obj.iteritems())\n  File \"/usr/lib/python2.7/pickle.py\", line 663, in _batch_setitems\n    save(v)\n  File \"/usr/lib/python2.7/pickle.py\", line 331, in save\n    self.save_reduce(obj=obj, *rv)\n  File \"/usr/lib/python2.7/pickle.py\", line 419, in save_reduce\n    save(state)\n  File \"/usr/lib/python2.7/pickle.py\", line 286, in save\n    f(self, obj) # Call unbound method with explicit self\n  File \"/usr/lib/python2.7/pickle.py\", line 649, in save_dict\n    self._batch_setitems(obj.iteritems())\n  File \"/usr/lib/python2.7/pickle.py\", line 663, in _batch_setitems\n    save(v)\n  File \"/usr/lib/python2.7/pickle.py\", line 286, in save\n    f(self, obj) # Call unbound method with explicit self\n  File \"/usr/lib/python2.7/pickle.py\", line 725, in save_inst\n    save(stuff)\n  File \"/usr/lib/python2.7/pickle.py\", line 286, in save\n    f(self, obj) # Call unbound method with explicit self\n  File \"/usr/lib/python2.7/pickle.py\", line 649, in save_dict\n    self._batch_setitems(obj.iteritems())\n  File \"/usr/lib/python2.7/pickle.py\", line 663, in _batch_setitems\n    save(v)\n  File \"/usr/lib/python2.7/pickle.py\", line 286, in save\n    f(self, obj) # Call unbound method with explicit self\n  File \"/usr/lib/python2.7/pickle.py\", line 600, in save_list\n    self._batch_appends(iter(obj))\n  File \"/usr/lib/python2.7/pickle.py\", line 615, in _batch_appends\n    save(x)\n  File \"/usr/lib/python2.7/pickle.py\", line 286, in save\n    f(self, obj) # Call unbound method with explicit self\n  File \"/usr/lib/python2.7/pickle.py\", line 725, in save_inst\n    save(stuff)\n  File \"/usr/lib/python2.7/pickle.py\", line 286, in save\n    f(self, obj) # Call unbound method with explicit self\n  File \"/usr/lib/python2.7/pickle.py\", line 649, in save_dict\n    self._batch_setitems(obj.iteritems())\n  File \"/usr/lib/python2.7/pickle.py\", line 663, in _batch_setitems\n    save(v)\n  File \"/usr/lib/python2.7/pickle.py\", line 306, in save\n    rv = reduce(self.proto)\n  File \"/usr/lib/python2.7/copy_reg.py\", line 77, in _reduce_ex\n    raise TypeError(\"a class that defines __slots__ without \"\nTypeError: a class that defines __slots__ without defining __getstate__ cannot be pickled\n```\n\n",
  "hints_text": "Out of interest, what's the use case for this?\n\nI want to use requests with the multiprocessing module and it uses pickle as the serialization method.\n\nI may be able to produce a patch if you give me some directions.\n\nIf you want to take a crack at a patch @git2samus, take a look at the Session class. That's picklable and has all the info there. If you would rather one of us do it, I can start to tackle it in half an hour.\n\nYou can't pickle the Response as it contains a link to the connection pool. If you aren't reusing connections you might consider the following:\n\n```\nr = requests.get('http://example.org')\nr.connection.close()\npickle.dumps(r)\n```\n\nhttps://github.com/tanelikaivola/requests/commit/229cca8ef0f8a6703cbdce901c0731cacef2b27e is how I solved it.. Just remove the raw-attribute from the __getstate__.\n\nhttps://github.com/tanelikaivola/requests/commit/a5360defdc3f91f4178e2aa1d7136a39a06b2a54 is an alternate way of doing it (which mimics the code style of https://github.com/kennethreitz/requests/commit/590ce29743d6c8d68f3885a949a93fdb68f4d142).\n\nAny update on this? I just ran into the same issue trying to cache Responses for testing purposes.\n\nI ended up with something like this:\n\n``` python\nr = requests.get('http://example.org')\nr.raw = None\npickle.dumps(r)\n```\n\nThis would be a big help for caching via [Cache Control](https://github.com/ionrock/cachecontrol). At the moment, it is very difficult to cache a response outside of memory because it is difficult to rebuild the object hierarchy.\n\nI did look into caching the raw response and using it to rebuild the response from scratch when a cache is hit, but that would have taken some pretty serious monkey patching of httplib and urllib3.\n\nThe patches by @tanelikaivola seem like they would world without too much trouble.\n\n@ionrock why not do something like [Betamax](https://github.com/sigmavirus24/betamax) instead of trying to use pickle?\n\n@sigmavirus24 Thanks for pointing out [Betamax](https://github.com/sigmavirus24/betamax)! I'd argue the serialize/deserialize_response functions would be a great addition to the Response object. If the goal is to avoid pickle, this seems like a great option. Sometimes pickle is a good option though, so I still believe it is worthwhile to add the functionality. I've tested the patch @tanelikaivola and they work well. What else would need to be done to potentially get them merged? Obviously some tests would be helpful. I'd also be happy to see about adding the serialize/deserialize code from Betamax if that would be alright with @sigmavirus24. \n\nLet me know if there is a good way to proceed. I'd be happy to put the code together. \n\n@sigmavirus24 thanks again for the Betamax suggestion. I will be switching [Cache Control](https://github.com/ionrock/cachecontrol) to use that methodology.\n\nI'm :-1: for adding the serialize/deserialize code from Betamax to requests. For one, I don't believe it takes care of all of the information that could be serialized. As it is Betamax only serializes what it needs to so that it can maintain compatibility with VCR's cassette format. If other people want it in requests proper, we could do that, but I'm not sure it works very well without the rest of betamax.\n\n@sigmavirus24 Fair enough. I'm most definitely not the expert on everything that a Response object, so I'm happy to take your word for it. When I looked at what a response object contained it was semi-complex as it was a wrapper around a urllib3 HTTPResponse, which is in turn a wrapper around a httplib response, which assumes the content comes directly from a socket (not a file like object). \n\nWith that being the case, it seems to make sense to support pickling of Response object. Again, I'm happy to write some tests for @tanelikaivola's patches if there is a consensus. Otherwise, I'd like to understand where it falls short. At the very least I'd like to try and fix it for myself. \n\nThanks for the discussion!\n\nPersonally I prefer https://github.com/tanelikaivola/requests/commit/a5360defdc3f91f4178e2aa1d7136a39a06b2a54 so if you want to add tests around that, that would be a great start.\n",
  "created_at": "2013-11-09T22:49:23Z",
  "version": "2.0",
  "FAIL_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_cookie_persists_via_api\", \"test_requests.py::RequestsTestCase::test_cookie_removed_on_expire\", \"test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable\", \"test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable\", \"test_requests.py::RequestsTestCase::test_unicode_method_name\"]",
  "PASS_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET\", \"test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE\", \"test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES\", \"test_requests.py::RequestsTestCase::test_DIGEST_STREAM\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD\", \"test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET\", \"test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES\", \"test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA\", \"test_requests.py::RequestsTestCase::test_autoset_header_values_are_native\", \"test_requests.py::RequestsTestCase::test_basic_building\", \"test_requests.py::RequestsTestCase::test_basicauth_with_netrc\", \"test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files\", \"test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests\", \"test_requests.py::RequestsTestCase::test_cookie_parameters\", \"test_requests.py::RequestsTestCase::test_cookie_quote_wrapped\", \"test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect\", \"test_requests.py::RequestsTestCase::test_custom_content_type\", \"test_requests.py::RequestsTestCase::test_decompress_gzip\", \"test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post\", \"test_requests.py::RequestsTestCase::test_entry_points\", \"test_requests.py::RequestsTestCase::test_fixes_1329\", \"test_requests.py::RequestsTestCase::test_generic_cookiejar_works\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url\", \"test_requests.py::RequestsTestCase::test_header_keys_are_native\", \"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\", \"test_requests.py::RequestsTestCase::test_hook_receives_request_arguments\", \"test_requests.py::RequestsTestCase::test_http_error\", \"test_requests.py::RequestsTestCase::test_invalid_url\", \"test_requests.py::RequestsTestCase::test_links\", \"test_requests.py::RequestsTestCase::test_long_authinfo_in_url\", \"test_requests.py::RequestsTestCase::test_no_content_length\", \"test_requests.py::RequestsTestCase::test_params_are_added_before_fragment\", \"test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive\", \"test_requests.py::RequestsTestCase::test_path_is_not_double_encoded\", \"test_requests.py::RequestsTestCase::test_prepared_request_hook\", \"test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie\", \"test_requests.py::RequestsTestCase::test_request_ok_set\", \"test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden\", \"test_requests.py::RequestsTestCase::test_response_is_iterable\", \"test_requests.py::RequestsTestCase::test_session_pickling\", \"test_requests.py::RequestsTestCase::test_set_cookie_on_301\", \"test_requests.py::RequestsTestCase::test_status_raising\", \"test_requests.py::RequestsTestCase::test_time_elapsed_blank\", \"test_requests.py::RequestsTestCase::test_transport_adapter_ordering\", \"test_requests.py::RequestsTestCase::test_unicode_get\", \"test_requests.py::RequestsTestCase::test_unicode_header_name\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames\", \"test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect\", \"test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param\", \"test_requests.py::RequestsTestCase::test_user_agent_transfers\", \"test_requests.py::TestContentEncodingDetection::test_html4_pragma\", \"test_requests.py::TestContentEncodingDetection::test_html_charset\", \"test_requests.py::TestContentEncodingDetection::test_none\", \"test_requests.py::TestContentEncodingDetection::test_precedence\", \"test_requests.py::TestContentEncodingDetection::test_xhtml_pragma\", \"test_requests.py::TestContentEncodingDetection::test_xml\", \"test_requests.py::TestCaseInsensitiveDict::test_contains\", \"test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"test_requests.py::TestCaseInsensitiveDict::test_equality\", \"test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"test_requests.py::TestCaseInsensitiveDict::test_get\", \"test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"test_requests.py::TestCaseInsensitiveDict::test_iter\", \"test_requests.py::TestCaseInsensitiveDict::test_iterable_init\", \"test_requests.py::TestCaseInsensitiveDict::test_kwargs_init\", \"test_requests.py::TestCaseInsensitiveDict::test_len\", \"test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"test_requests.py::TestCaseInsensitiveDict::test_mapping_init\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"test_requests.py::TestCaseInsensitiveDict::test_update\", \"test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\", \"test_requests.py::UtilsTestCase::test_super_len_io_streams\"]",
  "environment_setup_commit": "4bceb312f1b99d36a25f2985b5606e98b6f0d8cd",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.849990",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}