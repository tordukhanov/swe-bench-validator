{
  "repo": "django/django",
  "instance_id": "django__django-14878",
  "base_commit": "d446f8ba0820c8a4a923614611ae53582d38bc8e",
  "patch": "diff --git a/django/db/backends/sqlite3/introspection.py b/django/db/backends/sqlite3/introspection.py\n--- a/django/db/backends/sqlite3/introspection.py\n+++ b/django/db/backends/sqlite3/introspection.py\n@@ -201,25 +201,12 @@ def get_key_columns(self, cursor, table_name):\n \n     def get_primary_key_column(self, cursor, table_name):\n         \"\"\"Return the column name of the primary key for the given table.\"\"\"\n-        # Don't use PRAGMA because that causes issues with some transactions\n         cursor.execute(\n-            \"SELECT sql, type FROM sqlite_master \"\n-            \"WHERE tbl_name = %s AND type IN ('table', 'view')\",\n-            [table_name]\n+            'PRAGMA table_info(%s)' % self.connection.ops.quote_name(table_name)\n         )\n-        row = cursor.fetchone()\n-        if row is None:\n-            raise ValueError(\"Table %s does not exist\" % table_name)\n-        create_sql, table_type = row\n-        if table_type == 'view':\n-            # Views don't have a primary key.\n-            return None\n-        fields_sql = create_sql[create_sql.index('(') + 1:create_sql.rindex(')')]\n-        for field_desc in fields_sql.split(','):\n-            field_desc = field_desc.strip()\n-            m = re.match(r'(?:(?:[\"`\\[])(.*)(?:[\"`\\]])|(\\w+)).*PRIMARY KEY.*', field_desc)\n-            if m:\n-                return m[1] if m[1] else m[2]\n+        for _, name, *_, pk in cursor.fetchall():\n+            if pk:\n+                return name\n         return None\n \n     def _get_foreign_key_constraints(self, cursor, table_name):\n",
  "test_patch": "diff --git a/tests/backends/sqlite/test_introspection.py b/tests/backends/sqlite/test_introspection.py\n--- a/tests/backends/sqlite/test_introspection.py\n+++ b/tests/backends/sqlite/test_introspection.py\n@@ -28,6 +28,25 @@ def test_get_primary_key_column(self):\n                     finally:\n                         cursor.execute('DROP TABLE test_primary')\n \n+    def test_get_primary_key_column_pk_constraint(self):\n+        sql = \"\"\"\n+            CREATE TABLE test_primary(\n+                id INTEGER NOT NULL,\n+                created DATE,\n+                PRIMARY KEY(id)\n+            )\n+        \"\"\"\n+        with connection.cursor() as cursor:\n+            try:\n+                cursor.execute(sql)\n+                field = connection.introspection.get_primary_key_column(\n+                    cursor,\n+                    'test_primary',\n+                )\n+                self.assertEqual(field, 'id')\n+            finally:\n+                cursor.execute('DROP TABLE test_primary')\n+\n \n @unittest.skipUnless(connection.vendor == 'sqlite', 'SQLite tests')\n class ParsingTests(TestCase):\n",
  "problem_statement": "Primary key constraints aren't detected on SQLite.\nDescription\n\t \n\t\t(last modified by jgr88)\n\t \nWhile creating models with \"inspectdb\" i discovered, that there are currently some issues with SQLite3 Databases.\nPrimaryKeys ain't detected properly\nDatatype double ain't detected properly\nDatatype unsigned int ain't detected properly\nReproduce these issues by creating a SQLite3 Database:\nCREATE TABLE \"test\" ( pId INTEGER NOT NULL, doubleField DOUBLE NOT NULL, uInt UNSIGNED INTEGER NOT NULL, PRIMARY KEY(pId) ) \nI added a pullrequest:\n​https://github.com/django/django/pull/14293\n",
  "hints_text": "Replying to jgr88: While creating models with \"inspectdb\" i discovered, that there are currently some issues with SQLite3 Databases. PrimaryKeys ain't detected properly Datatype double ain't detected properly Datatype unsigned int ain't detected properly Reproduce these issues by creating a SQLite3 Database: CREATE TABLE \"test\" ( pId INTEGER NOT NULL, doubleField DOUBLE NOT NULL, uInt UNSIGNED INTEGER NOT NULL, PRIMARY KEY(pId) ) I added a pullrequest: ​https://github.com/django/django/pull/14293 Update: I added ​https://github.com/django/django/pull/14297 since i messed up the first one\nOK, this seems a reasonable proposal to me. Generated model: class Test(models.Model): pid = models.AutoField(db_column='pId') # Field name made lowercase. doublefield = models.TextField(db_column='doubleField') # Field name made lowercase. This field type is a guess. uint = models.TextField(db_column='uInt') # Field name made lowercase. This field type is a guess. class Meta: managed = False db_table = 'test'\nI'm fine with fixing detection of primary key, but I think we should not add datatypes that are not used by Django itself. I also don't see a reason to add only DOUBLE. SQLite uses complicated rules to determine a datatype affinity based on its name (see ​Determination Of Column Affinity which have a lot of caveats, e.g. CHARINT is mapped to INT, POINT is mapped to INT, STRING is mapped to NUMERIC. I would prefer to warn users about datatypes that are not used by Django instead of mapping some/all of them.\n​PR",
  "created_at": "2021-09-21T17:27:03Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_get_primary_key_column_pk_constraint (backends.sqlite.test_introspection.IntrospectionTests)\"]",
  "PASS_TO_PASS": "[\"Get the primary key column regardless of whether or not it has\", \"test_check_and_unique_column (backends.sqlite.test_introspection.ParsingTests)\", \"test_check_column (backends.sqlite.test_introspection.ParsingTests)\", \"test_check_column_with_operators_and_functions (backends.sqlite.test_introspection.ParsingTests)\", \"test_check_constraint (backends.sqlite.test_introspection.ParsingTests)\", \"test_unique_column (backends.sqlite.test_introspection.ParsingTests)\", \"test_unique_constraint (backends.sqlite.test_introspection.ParsingTests)\", \"test_unique_constraint_multicolumn (backends.sqlite.test_introspection.ParsingTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.706164",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}