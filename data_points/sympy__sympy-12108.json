{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-12108",
  "base_commit": "5813bdbae2c5c62cb23541d082a812c070f66468",
  "patch": "diff --git a/sympy/assumptions/ask_generated.py b/sympy/assumptions/ask_generated.py\n--- a/sympy/assumptions/ask_generated.py\n+++ b/sympy/assumptions/ask_generated.py\n@@ -14,75 +14,75 @@\n @cacheit\n def get_known_facts_cnf():\n     return And(\n-        Or(Q.invertible, Q.singular),\n-        Or(Not(Q.rational), Q.algebraic),\n-        Or(Not(Q.imaginary), Q.antihermitian),\n-        Or(Not(Q.algebraic), Q.complex),\n-        Or(Not(Q.imaginary), Q.complex),\n-        Or(Not(Q.real), Q.complex),\n-        Or(Not(Q.transcendental), Q.complex),\n-        Or(Not(Q.real_elements), Q.complex_elements),\n-        Or(Not(Q.zero), Q.even),\n-        Or(Not(Q.infinite), Q.extended_real),\n-        Or(Not(Q.real), Q.extended_real),\n-        Or(Not(Q.invertible), Q.fullrank),\n-        Or(Not(Q.real), Q.hermitian),\n-        Or(Not(Q.even), Q.integer),\n-        Or(Not(Q.odd), Q.integer),\n-        Or(Not(Q.prime), Q.integer),\n-        Or(Not(Q.positive_definite), Q.invertible),\n-        Or(Not(Q.unitary), Q.invertible),\n-        Or(Not(Q.diagonal), Q.lower_triangular),\n-        Or(Not(Q.positive), Q.nonnegative),\n-        Or(Not(Q.zero), Q.nonnegative),\n-        Or(Not(Q.negative), Q.nonpositive),\n-        Or(Not(Q.zero), Q.nonpositive),\n-        Or(Not(Q.negative), Q.nonzero),\n-        Or(Not(Q.positive), Q.nonzero),\n-        Or(Not(Q.diagonal), Q.normal),\n-        Or(Not(Q.unitary), Q.normal),\n-        Or(Not(Q.prime), Q.positive),\n-        Or(Not(Q.orthogonal), Q.positive_definite),\n-        Or(Not(Q.integer), Q.rational),\n-        Or(Not(Q.irrational), Q.real),\n-        Or(Not(Q.negative), Q.real),\n-        Or(Not(Q.positive), Q.real),\n-        Or(Not(Q.rational), Q.real),\n-        Or(Not(Q.zero), Q.real),\n-        Or(Not(Q.integer_elements), Q.real_elements),\n-        Or(Not(Q.invertible), Q.square),\n-        Or(Not(Q.normal), Q.square),\n-        Or(Not(Q.symmetric), Q.square),\n-        Or(Not(Q.diagonal), Q.symmetric),\n-        Or(Not(Q.lower_triangular), Q.triangular),\n-        Or(Not(Q.unit_triangular), Q.triangular),\n-        Or(Not(Q.upper_triangular), Q.triangular),\n-        Or(Not(Q.orthogonal), Q.unitary),\n-        Or(Not(Q.diagonal), Q.upper_triangular),\n-        Or(Not(Q.algebraic), Not(Q.transcendental)),\n-        Or(Not(Q.antihermitian), Not(Q.hermitian)),\n-        Or(Not(Q.composite), Not(Q.prime)),\n-        Or(Not(Q.even), Not(Q.odd)),\n-        Or(Not(Q.finite), Not(Q.infinite)),\n-        Or(Not(Q.imaginary), Not(Q.real)),\n-        Or(Not(Q.invertible), Not(Q.singular)),\n-        Or(Not(Q.irrational), Not(Q.rational)),\n-        Or(Not(Q.negative), Not(Q.positive)),\n-        Or(Not(Q.negative), Not(Q.zero)),\n-        Or(Not(Q.positive), Not(Q.zero)),\n-        Or(Not(Q.complex), Q.algebraic, Q.transcendental),\n-        Or(Not(Q.integer), Q.even, Q.odd),\n-        Or(Not(Q.extended_real), Q.infinite, Q.real),\n-        Or(Not(Q.real), Q.irrational, Q.rational),\n-        Or(Not(Q.triangular), Q.lower_triangular, Q.upper_triangular),\n-        Or(Not(Q.nonzero), Q.negative, Q.positive),\n-        Or(Not(Q.nonpositive), Q.negative, Q.zero),\n-        Or(Not(Q.nonnegative), Q.positive, Q.zero),\n-        Or(Not(Q.lower_triangular), Not(Q.upper_triangular), Q.diagonal),\n-        Or(Not(Q.fullrank), Not(Q.square), Q.invertible),\n-        Or(Not(Q.real), Not(Q.unitary), Q.orthogonal),\n-        Or(Not(Q.real), Q.negative, Q.positive, Q.zero),\n-        Or(Not(Q.integer), Not(Q.positive), Q.composite, Q.prime)\n+        Q.invertible | Q.singular,\n+        Q.algebraic | ~Q.rational,\n+        Q.antihermitian | ~Q.imaginary,\n+        Q.complex | ~Q.algebraic,\n+        Q.complex | ~Q.imaginary,\n+        Q.complex | ~Q.real,\n+        Q.complex | ~Q.transcendental,\n+        Q.complex_elements | ~Q.real_elements,\n+        Q.even | ~Q.zero,\n+        Q.extended_real | ~Q.infinite,\n+        Q.extended_real | ~Q.real,\n+        Q.fullrank | ~Q.invertible,\n+        Q.hermitian | ~Q.real,\n+        Q.integer | ~Q.even,\n+        Q.integer | ~Q.odd,\n+        Q.integer | ~Q.prime,\n+        Q.invertible | ~Q.positive_definite,\n+        Q.invertible | ~Q.unitary,\n+        Q.lower_triangular | ~Q.diagonal,\n+        Q.nonnegative | ~Q.positive,\n+        Q.nonnegative | ~Q.zero,\n+        Q.nonpositive | ~Q.negative,\n+        Q.nonpositive | ~Q.zero,\n+        Q.nonzero | ~Q.negative,\n+        Q.nonzero | ~Q.positive,\n+        Q.normal | ~Q.diagonal,\n+        Q.normal | ~Q.unitary,\n+        Q.positive | ~Q.prime,\n+        Q.positive_definite | ~Q.orthogonal,\n+        Q.rational | ~Q.integer,\n+        Q.real | ~Q.irrational,\n+        Q.real | ~Q.negative,\n+        Q.real | ~Q.positive,\n+        Q.real | ~Q.rational,\n+        Q.real | ~Q.zero,\n+        Q.real_elements | ~Q.integer_elements,\n+        Q.square | ~Q.invertible,\n+        Q.square | ~Q.normal,\n+        Q.square | ~Q.symmetric,\n+        Q.symmetric | ~Q.diagonal,\n+        Q.triangular | ~Q.lower_triangular,\n+        Q.triangular | ~Q.unit_triangular,\n+        Q.triangular | ~Q.upper_triangular,\n+        Q.unitary | ~Q.orthogonal,\n+        Q.upper_triangular | ~Q.diagonal,\n+        ~Q.algebraic | ~Q.transcendental,\n+        ~Q.antihermitian | ~Q.hermitian,\n+        ~Q.composite | ~Q.prime,\n+        ~Q.even | ~Q.odd,\n+        ~Q.finite | ~Q.infinite,\n+        ~Q.imaginary | ~Q.real,\n+        ~Q.invertible | ~Q.singular,\n+        ~Q.irrational | ~Q.rational,\n+        ~Q.negative | ~Q.positive,\n+        ~Q.negative | ~Q.zero,\n+        ~Q.positive | ~Q.zero,\n+        Q.algebraic | Q.transcendental | ~Q.complex,\n+        Q.even | Q.odd | ~Q.integer,\n+        Q.infinite | Q.real | ~Q.extended_real,\n+        Q.irrational | Q.rational | ~Q.real,\n+        Q.lower_triangular | Q.upper_triangular | ~Q.triangular,\n+        Q.negative | Q.positive | ~Q.nonzero,\n+        Q.negative | Q.zero | ~Q.nonpositive,\n+        Q.positive | Q.zero | ~Q.nonnegative,\n+        Q.diagonal | ~Q.lower_triangular | ~Q.upper_triangular,\n+        Q.invertible | ~Q.fullrank | ~Q.square,\n+        Q.orthogonal | ~Q.real | ~Q.unitary,\n+        Q.negative | Q.positive | Q.zero | ~Q.real,\n+        Q.composite | Q.prime | ~Q.integer | ~Q.positive\n     )\n \n # -{ Known facts in compressed sets }-\ndiff --git a/sympy/assumptions/sathandlers.py b/sympy/assumptions/sathandlers.py\n--- a/sympy/assumptions/sathandlers.py\n+++ b/sympy/assumptions/sathandlers.py\n@@ -96,9 +96,9 @@ class AllArgs(UnevaluatedOnFree):\n     >>> x, y = symbols('x y')\n     >>> a = AllArgs(Q.positive | Q.negative)\n     >>> a\n-    AllArgs(Or(Q.negative, Q.positive))\n+    AllArgs(Q.negative | Q.positive)\n     >>> a.rcall(x*y)\n-    And(Or(Q.negative(x), Q.positive(x)), Or(Q.negative(y), Q.positive(y)))\n+    (Q.negative(x) | Q.positive(x)) & (Q.negative(y) | Q.positive(y))\n     \"\"\"\n \n     def apply(self):\n@@ -123,9 +123,9 @@ class AnyArgs(UnevaluatedOnFree):\n     >>> x, y = symbols('x y')\n     >>> a = AnyArgs(Q.positive & Q.negative)\n     >>> a\n-    AnyArgs(And(Q.negative, Q.positive))\n+    AnyArgs(Q.negative & Q.positive)\n     >>> a.rcall(x*y)\n-    Or(And(Q.negative(x), Q.positive(x)), And(Q.negative(y), Q.positive(y)))\n+    (Q.negative(x) & Q.positive(x)) | (Q.negative(y) & Q.positive(y))\n     \"\"\"\n \n     def apply(self):\n@@ -153,7 +153,7 @@ class ExactlyOneArg(UnevaluatedOnFree):\n     >>> a\n     ExactlyOneArg(Q.positive)\n     >>> a.rcall(x*y)\n-    Or(And(Not(Q.positive(x)), Q.positive(y)), And(Not(Q.positive(y)), Q.positive(x)))\n+    (Q.positive(x) & ~Q.positive(y)) | (Q.positive(y) & ~Q.positive(x))\n     \"\"\"\n     def apply(self):\n         expr = self.expr\ndiff --git a/sympy/concrete/delta.py b/sympy/concrete/delta.py\n--- a/sympy/concrete/delta.py\n+++ b/sympy/concrete/delta.py\n@@ -276,7 +276,7 @@ def deltasummation(f, limit, no_piecewise=False):\n     >>> deltasummation(KroneckerDelta(i, k), (k, 0, oo))\n     Piecewise((1, 0 <= i), (0, True))\n     >>> deltasummation(KroneckerDelta(i, k), (k, 1, 3))\n-    Piecewise((1, And(1 <= i, i <= 3)), (0, True))\n+    Piecewise((1, (1 <= i) & (i <= 3)), (0, True))\n     >>> deltasummation(k*KroneckerDelta(i, j)*KroneckerDelta(j, k), (k, -oo, oo))\n     j*KroneckerDelta(i, j)\n     >>> deltasummation(j*KroneckerDelta(i, j), (j, -oo, oo))\ndiff --git a/sympy/core/relational.py b/sympy/core/relational.py\n--- a/sympy/core/relational.py\n+++ b/sympy/core/relational.py\n@@ -669,7 +669,7 @@ class GreaterThan(_Greater):\n     >>> type( e )\n     And\n     >>> e\n-    And(x < y, y < z)\n+    (x < y) & (y < z)\n \n     Note that this is different than chaining an equality directly via use of\n     parenthesis (this is currently an open bug in SymPy [2]_):\ndiff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -145,7 +145,7 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n     >>> _clash1\n     {'C': C, 'E': E, 'I': I, 'N': N, 'O': O, 'Q': Q, 'S': S}\n     >>> sympify('I & Q', _clash1)\n-    And(I, Q)\n+    I & Q\n \n     Strict\n     ------\ndiff --git a/sympy/functions/special/bsplines.py b/sympy/functions/special/bsplines.py\n--- a/sympy/functions/special/bsplines.py\n+++ b/sympy/functions/special/bsplines.py\n@@ -43,7 +43,7 @@ def bspline_basis(d, knots, n, x, close=True):\n         >>> d = 0\n         >>> knots = range(5)\n         >>> bspline_basis(d, knots, 0, x)\n-        Piecewise((1, And(x <= 1, x >= 0)), (0, True))\n+        Piecewise((1, (x >= 0) & (x <= 1)), (0, True))\n \n     For a given ``(d, knots)`` there are ``len(knots)-d-1`` B-splines defined, that\n     are indexed by ``n`` (starting at 0).\n@@ -51,10 +51,13 @@ def bspline_basis(d, knots, n, x, close=True):\n     Here is an example of a cubic B-spline:\n \n         >>> bspline_basis(3, range(5), 0, x)\n-        Piecewise((x**3/6, And(x < 1, x >= 0)),\n-                  (-x**3/2 + 2*x**2 - 2*x + 2/3, And(x < 2, x >= 1)),\n-                  (x**3/2 - 4*x**2 + 10*x - 22/3, And(x < 3, x >= 2)),\n-                  (-x**3/6 + 2*x**2 - 8*x + 32/3, And(x <= 4, x >= 3)),\n+        Piecewise((x**3/6, (x >= 0) & (x < 1)),\n+                  (-x**3/2 + 2*x**2 - 2*x + 2/3,\n+                  (x >= 1) & (x < 2)),\n+                  (x**3/2 - 4*x**2 + 10*x - 22/3,\n+                  (x >= 2) & (x < 3)),\n+                  (-x**3/6 + 2*x**2 - 8*x + 32/3,\n+                  (x >= 3) & (x <= 4)),\n                   (0, True))\n \n     By repeating knot points, you can introduce discontinuities in the\n@@ -63,7 +66,7 @@ def bspline_basis(d, knots, n, x, close=True):\n         >>> d = 1\n         >>> knots = [0,0,2,3,4]\n         >>> bspline_basis(d, knots, 0, x)\n-        Piecewise((-x/2 + 1, And(x <= 2, x >= 0)), (0, True))\n+        Piecewise((-x/2 + 1, (x >= 0) & (x <= 2)), (0, True))\n \n     It is quite time consuming to construct and evaluate B-splines. If you\n     need to evaluate a B-splines many times, it is best to lambdify them\n@@ -138,14 +141,14 @@ def bspline_basis_set(d, knots, x):\n     >>> knots = range(5)\n     >>> splines = bspline_basis_set(d, knots, x)\n     >>> splines\n-    [Piecewise((x**2/2, And(x < 1, x >= 0)),\n-               (-x**2 + 3*x - 3/2, And(x < 2, x >= 1)),\n-               (x**2/2 - 3*x + 9/2, And(x <= 3, x >= 2)),\n+    [Piecewise((x**2/2, (x >= 0) & (x < 1)),\n+               (-x**2 + 3*x - 3/2, (x >= 1) & (x < 2)),\n+               (x**2/2 - 3*x + 9/2, (x >= 2) & (x <= 3)),\n                (0, True)),\n-     Piecewise((x**2/2 - x + 1/2, And(x < 2, x >= 1)),\n-               (-x**2 + 5*x - 11/2, And(x < 3, x >= 2)),\n-               (x**2/2 - 4*x + 8, And(x <= 4, x >= 3)),\n-               (0, True))]\n+    Piecewise((x**2/2 - x + 1/2, (x >= 1) & (x < 2)),\n+              (-x**2 + 5*x - 11/2, (x >= 2) & (x < 3)),\n+              (x**2/2 - 4*x + 8, (x >= 3) & (x <= 4)),\n+              (0, True))]\n \n     See Also\n     ========\ndiff --git a/sympy/integrals/meijerint.py b/sympy/integrals/meijerint.py\n--- a/sympy/integrals/meijerint.py\n+++ b/sympy/integrals/meijerint.py\n@@ -587,7 +587,7 @@ def _condsimp(cond):\n     >>> from sympy import Or, Eq, unbranched_argument as arg, And\n     >>> from sympy.abc import x, y, z\n     >>> simp(Or(x < y, z, Eq(x, y)))\n-    Or(x <= y, z)\n+    z | (x <= y)\n     >>> simp(Or(x <= y, And(x < y, z)))\n     x <= y\n     \"\"\"\ndiff --git a/sympy/logic/boolalg.py b/sympy/logic/boolalg.py\n--- a/sympy/logic/boolalg.py\n+++ b/sympy/logic/boolalg.py\n@@ -319,7 +319,7 @@ class And(LatticeOp, BooleanFunction):\n     >>> from sympy.abc import x, y\n     >>> from sympy.logic.boolalg import And\n     >>> x & y\n-    And(x, y)\n+    x & y\n \n     Notes\n     =====\n@@ -392,7 +392,7 @@ class Or(LatticeOp, BooleanFunction):\n     >>> from sympy.abc import x, y\n     >>> from sympy.logic.boolalg import Or\n     >>> x | y\n-    Or(x, y)\n+    x | y\n \n     Notes\n     =====\n@@ -471,11 +471,11 @@ class Not(BooleanFunction):\n     >>> Not(Or(True, False))\n     False\n     >>> Not(And(And(True, x), Or(x, False)))\n-    Not(x)\n+    ~x\n     >>> ~x\n-    Not(x)\n+    ~x\n     >>> Not(And(Or(A, B), Or(~A, ~B)))\n-    Not(And(Or(A, B), Or(Not(A), Not(B))))\n+    ~((A | B) & (~A | ~B))\n \n     Notes\n     =====\n@@ -698,7 +698,7 @@ class Nand(BooleanFunction):\n     >>> Nand(True, True)\n     False\n     >>> Nand(x, y)\n-    Not(And(x, y))\n+    ~(x & y)\n \n     \"\"\"\n     @classmethod\n@@ -732,7 +732,7 @@ class Nor(BooleanFunction):\n     >>> Nor(False, False)\n     True\n     >>> Nor(x, y)\n-    Not(Or(x, y))\n+    ~(x | y)\n \n     \"\"\"\n     @classmethod\n@@ -963,7 +963,7 @@ def conjuncts(expr):\n     >>> conjuncts(A & B)\n     frozenset({A, B})\n     >>> conjuncts(A | B)\n-    frozenset({Or(A, B)})\n+    frozenset({A | B})\n \n     \"\"\"\n     return And.make_args(expr)\n@@ -980,7 +980,7 @@ def disjuncts(expr):\n     >>> disjuncts(A | B)\n     frozenset({A, B})\n     >>> disjuncts(A & B)\n-    frozenset({And(A, B)})\n+    frozenset({A & B})\n \n     \"\"\"\n     return Or.make_args(expr)\n@@ -997,7 +997,7 @@ def distribute_and_over_or(expr):\n     >>> from sympy.logic.boolalg import distribute_and_over_or, And, Or, Not\n     >>> from sympy.abc import A, B, C\n     >>> distribute_and_over_or(Or(A, And(Not(B), Not(C))))\n-    And(Or(A, Not(B)), Or(A, Not(C)))\n+    (A | ~B) & (A | ~C)\n     \"\"\"\n     return _distribute((expr, And, Or))\n \n@@ -1015,7 +1015,7 @@ def distribute_or_over_and(expr):\n     >>> from sympy.logic.boolalg import distribute_or_over_and, And, Or, Not\n     >>> from sympy.abc import A, B, C\n     >>> distribute_or_over_and(And(Or(Not(A), B), C))\n-    Or(And(B, C), And(C, Not(A)))\n+    (B & C) | (C & ~A)\n     \"\"\"\n     return _distribute((expr, Or, And))\n \n@@ -1054,9 +1054,9 @@ def to_nnf(expr, simplify=True):\n     >>> from sympy.abc import A, B, C, D\n     >>> from sympy.logic.boolalg import Not, Equivalent, to_nnf\n     >>> to_nnf(Not((~A & ~B) | (C & D)))\n-    And(Or(A, B), Or(Not(C), Not(D)))\n+    (A | B) & (~C | ~D)\n     >>> to_nnf(Equivalent(A >> B, B >> A))\n-    And(Or(A, And(A, Not(B)), Not(B)), Or(And(B, Not(A)), B, Not(A)))\n+    (A | ~B | (A & ~B)) & (B | ~A | (B & ~A))\n     \"\"\"\n     if is_nnf(expr, simplify):\n         return expr\n@@ -1075,9 +1075,9 @@ def to_cnf(expr, simplify=False):\n     >>> from sympy.logic.boolalg import to_cnf\n     >>> from sympy.abc import A, B, D\n     >>> to_cnf(~(A | B) | D)\n-    And(Or(D, Not(A)), Or(D, Not(B)))\n+    (D | ~A) & (D | ~B)\n     >>> to_cnf((A | B) & (A | ~A), True)\n-    Or(A, B)\n+    A | B\n \n     \"\"\"\n     expr = sympify(expr)\n@@ -1107,9 +1107,9 @@ def to_dnf(expr, simplify=False):\n     >>> from sympy.logic.boolalg import to_dnf\n     >>> from sympy.abc import A, B, C\n     >>> to_dnf(B & (A | C))\n-    Or(And(A, B), And(B, C))\n+    (A & B) | (B & C)\n     >>> to_dnf((A & B) | (A & ~B) | (B & C) | (~B & C), True)\n-    Or(A, C)\n+    A | C\n \n     \"\"\"\n     expr = sympify(expr)\n@@ -1277,11 +1277,11 @@ def eliminate_implications(expr):\n          eliminate_implications\n     >>> from sympy.abc import A, B, C\n     >>> eliminate_implications(Implies(A, B))\n-    Or(B, Not(A))\n+    B | ~A\n     >>> eliminate_implications(Equivalent(A, B))\n-    And(Or(A, Not(B)), Or(B, Not(A)))\n+    (A | ~B) & (B | ~A)\n     >>> eliminate_implications(Equivalent(A, B, C))\n-    And(Or(A, Not(C)), Or(B, Not(A)), Or(C, Not(B)))\n+    (A | ~C) & (B | ~A) & (C | ~B)\n     \"\"\"\n     return to_nnf(expr)\n \n@@ -1590,7 +1590,7 @@ def SOPform(variables, minterms, dontcares=None):\n     ...             [0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 1, 1]]\n     >>> dontcares = [[0, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 1]]\n     >>> SOPform([w, x, y, z], minterms, dontcares)\n-    Or(And(Not(w), z), And(y, z))\n+    (y & z) | (z & ~w)\n \n     References\n     ==========\n@@ -1642,7 +1642,7 @@ def POSform(variables, minterms, dontcares=None):\n     ...             [1, 0, 1, 1], [1, 1, 1, 1]]\n     >>> dontcares = [[0, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 1]]\n     >>> POSform([w, x, y, z], minterms, dontcares)\n-    And(Or(Not(w), y), z)\n+    z & (y | ~w)\n \n     References\n     ==========\n@@ -1711,12 +1711,12 @@ def simplify_logic(expr, form=None, deep=True):\n     >>> from sympy import S\n     >>> b = (~x & ~y & ~z) | ( ~x & ~y & z)\n     >>> simplify_logic(b)\n-    And(Not(x), Not(y))\n+    ~x & ~y\n \n     >>> S(b)\n-    Or(And(Not(x), Not(y), Not(z)), And(Not(x), Not(y), z))\n+    (z & ~x & ~y) | (~x & ~y & ~z)\n     >>> simplify_logic(_)\n-    And(Not(x), Not(y))\n+    ~x & ~y\n \n     \"\"\"\n \n@@ -1805,7 +1805,7 @@ def bool_map(bool1, bool2):\n     >>> function1 = SOPform([x, z, y],[[1, 0, 1], [0, 0, 1]])\n     >>> function2 = SOPform([a, b, c],[[1, 0, 1], [1, 0, 0]])\n     >>> bool_map(function1, function2)\n-    (And(Not(z), y), {y: a, z: b})\n+    (y & ~z, {y: a, z: b})\n \n     The results are not necessarily unique, but they are canonical. Here,\n     ``(w, z)`` could be ``(a, d)`` or ``(d, a)``:\n@@ -1813,10 +1813,10 @@ def bool_map(bool1, bool2):\n     >>> eq =  Or(And(Not(y), w), And(Not(y), z), And(x, y))\n     >>> eq2 = Or(And(Not(c), a), And(Not(c), d), And(b, c))\n     >>> bool_map(eq, eq2)\n-    (Or(And(Not(y), w), And(Not(y), z), And(x, y)), {w: a, x: b, y: c, z: d})\n+    ((x & y) | (w & ~y) | (z & ~y), {w: a, x: b, y: c, z: d})\n     >>> eq = And(Xor(a, b), c, And(c,d))\n     >>> bool_map(eq, eq.subs(c, x))\n-    (And(Or(Not(a), Not(b)), Or(a, b), c, d), {a: a, b: b, c: d, d: x})\n+    (c & d & (a | b) & (~a | ~b), {a: a, b: b, c: d, d: x})\n \n     \"\"\"\n \ndiff --git a/sympy/logic/inference.py b/sympy/logic/inference.py\n--- a/sympy/logic/inference.py\n+++ b/sympy/logic/inference.py\n@@ -249,11 +249,11 @@ def tell(self, sentence):\n \n         >>> l.tell(x | y)\n         >>> l.clauses\n-        [Or(x, y)]\n+        [x | y]\n \n         >>> l.tell(y)\n         >>> l.clauses\n-        [y, Or(x, y)]\n+        [y, x | y]\n         \"\"\"\n         for c in conjuncts(to_cnf(sentence)):\n             self.clauses_.add(c)\n@@ -289,7 +289,7 @@ def retract(self, sentence):\n \n         >>> l.tell(x | y)\n         >>> l.clauses\n-        [Or(x, y)]\n+        [x | y]\n \n         >>> l.retract(x | y)\n         >>> l.clauses\ndiff --git a/sympy/logic/utilities/dimacs.py b/sympy/logic/utilities/dimacs.py\n--- a/sympy/logic/utilities/dimacs.py\n+++ b/sympy/logic/utilities/dimacs.py\n@@ -21,11 +21,11 @@ def load(s):\n     >>> load('1')\n     cnf_1\n     >>> load('1 2')\n-    Or(cnf_1, cnf_2)\n+    cnf_1 | cnf_2\n     >>> load('1 \\\\n 2')\n-    And(cnf_1, cnf_2)\n+    cnf_1 & cnf_2\n     >>> load('1 2 \\\\n 3')\n-    And(Or(cnf_1, cnf_2), cnf_3)\n+    cnf_3 & (cnf_1 | cnf_2)\n     \"\"\"\n     clauses = []\n \ndiff --git a/sympy/plotting/experimental_lambdify.py b/sympy/plotting/experimental_lambdify.py\n--- a/sympy/plotting/experimental_lambdify.py\n+++ b/sympy/plotting/experimental_lambdify.py\n@@ -271,6 +271,9 @@ def __init__(self, args, expr, print_lambda=False, use_evalf=False,\n         self.dict_str = self.get_dict_str()\n         self.dict_fun = self.get_dict_fun()\n         exprstr = str(expr)\n+        # the & and | operators don't work on tuples, see discussion #12108\n+        exprstr = exprstr.replace(\" & \",\" and \").replace(\" | \",\" or \")\n+\n         newexpr = self.tree2str_translate(self.str2tree(exprstr))\n \n         # Constructing the namespaces\ndiff --git a/sympy/printing/precedence.py b/sympy/printing/precedence.py\n--- a/sympy/printing/precedence.py\n+++ b/sympy/printing/precedence.py\n@@ -16,7 +16,9 @@\n     \"Pow\": 60,\n     \"Func\": 70,\n     \"Not\": 100,\n-    \"Atom\": 1000\n+    \"Atom\": 1000,\n+    \"BitwiseOr\": 36,\n+    \"BitwiseAnd\": 38\n }\n \n # A dictionary assigning precedence values to certain classes. These values are\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -74,13 +74,14 @@ def _print_BooleanTrue(self, expr):\n     def _print_BooleanFalse(self, expr):\n         return \"False\"\n \n+    def _print_Not(self, expr):\n+        return '~%s' %(self.parenthesize(expr.args[0],PRECEDENCE[\"Not\"]))\n+\n     def _print_And(self, expr):\n-        return '%s(%s)' % (expr.func, ', '.join(sorted(self._print(a) for a in\n-            expr.args)))\n+        return self.stringify(expr.args, \" & \", PRECEDENCE[\"BitwiseAnd\"])\n \n     def _print_Or(self, expr):\n-        return '%s(%s)' % (expr.func, ', '.join(sorted(self._print(a) for a in\n-            expr.args)))\n+        return self.stringify(expr.args, \" | \", PRECEDENCE[\"BitwiseOr\"])\n \n     def _print_AppliedPredicate(self, expr):\n         return '%s(%s)' % (expr.func, expr.arg)\ndiff --git a/sympy/solvers/inequalities.py b/sympy/solvers/inequalities.py\n--- a/sympy/solvers/inequalities.py\n+++ b/sympy/solvers/inequalities.py\n@@ -208,9 +208,9 @@ def reduce_rational_inequalities(exprs, gen, relational=True):\n     Eq(x, 0)\n \n     >>> reduce_rational_inequalities([[x + 2 > 0]], x)\n-    And(-2 < x, x < oo)\n+    (-2 < x) & (x < oo)\n     >>> reduce_rational_inequalities([[(x + 2, \">\")]], x)\n-    And(-2 < x, x < oo)\n+    (-2 < x) & (x < oo)\n     >>> reduce_rational_inequalities([[x + 2]], x)\n     Eq(x, -2)\n     \"\"\"\n@@ -282,10 +282,10 @@ def reduce_abs_inequality(expr, rel, gen):\n     >>> x = Symbol('x', real=True)\n \n     >>> reduce_abs_inequality(Abs(x - 5) - 3, '<', x)\n-    And(2 < x, x < 8)\n+    (2 < x) & (x < 8)\n \n     >>> reduce_abs_inequality(Abs(x + 2)*3 - 13, '<', x)\n-    And(-19/3 < x, x < 7/3)\n+    (-19/3 < x) & (x < 7/3)\n \n     See Also\n     ========\n@@ -365,10 +365,10 @@ def reduce_abs_inequalities(exprs, gen):\n \n     >>> reduce_abs_inequalities([(Abs(3*x - 5) - 7, '<'),\n     ... (Abs(x + 25) - 13, '>')], x)\n-    And(-2/3 < x, Or(And(-12 < x, x < oo), And(-oo < x, x < -38)), x < 4)\n+    (-2/3 < x) & (x < 4) & (((-oo < x) & (x < -38)) | ((-12 < x) & (x < oo)))\n \n     >>> reduce_abs_inequalities([(Abs(x - 4) + Abs(3*x - 5) - 7, '<')], x)\n-    And(1/2 < x, x < 4)\n+    (1/2 < x) & (x < 4)\n \n     See Also\n     ========\n@@ -421,7 +421,7 @@ def solve_univariate_inequality(expr, gen, relational=True, domain=S.Reals):\n     >>> x = Symbol('x')\n \n     >>> solve_univariate_inequality(x**2 >= 4, x)\n-    Or(And(-oo < x, x <= -2), And(2 <= x, x < oo))\n+    ((2 <= x) & (x < oo)) | ((x <= -2) & (-oo < x))\n \n     >>> solve_univariate_inequality(x**2 >= 4, x, relational=False)\n     (-oo, -2] U [2, oo)\n@@ -648,7 +648,7 @@ def reduce_inequalities(inequalities, symbols=[]):\n     >>> from sympy.solvers.inequalities import reduce_inequalities\n \n     >>> reduce_inequalities(0 <= x + 3, [])\n-    And(-3 <= x, x < oo)\n+    (-3 <= x) & (x < oo)\n \n     >>> reduce_inequalities(0 <= x + y*2 - 1, [x])\n     x >= -2*y + 1\ndiff --git a/sympy/solvers/solvers.py b/sympy/solvers/solvers.py\n--- a/sympy/solvers/solvers.py\n+++ b/sympy/solvers/solvers.py\n@@ -450,7 +450,7 @@ def solve(f, *symbols, **flags):\n     * boolean or univariate Relational\n \n         >>> solve(x < 3)\n-        And(-oo < x, x < 3)\n+        (-oo < x) & (x < 3)\n \n     * to always get a list of solution mappings, use flag dict=True\n \ndiff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -2392,7 +2392,7 @@ def Uniform(name, left, right):\n     >>> X = Uniform(\"x\", a, b)\n \n     >>> density(X)(z)\n-    Piecewise((1/(-a + b), And(a <= z, z <= b)), (0, True))\n+    Piecewise((1/(-a + b), (a <= z) & (z <= b)), (0, True))\n \n     >>> cdf(X)(z)  # doctest: +SKIP\n     -a/(-a + b) + z/(-a + b)\ndiff --git a/sympy/stats/rv.py b/sympy/stats/rv.py\n--- a/sympy/stats/rv.py\n+++ b/sympy/stats/rv.py\n@@ -782,13 +782,13 @@ def where(condition, given_condition=None, **kwargs):\n     >>> X = Normal('x', 0, 1)\n \n     >>> where(X**2<1)\n-    Domain: And(-1 < x, x < 1)\n+    Domain: (-1 < x) & (x < 1)\n \n     >>> where(X**2<1).set\n     (-1, 1)\n \n     >>> where(And(D1<=D2 , D2<3))\n-    Domain: Or(And(Eq(a, 1), Eq(b, 1)), And(Eq(a, 1), Eq(b, 2)), And(Eq(a, 2), Eq(b, 2)))    \"\"\"\n+    Domain: ((Eq(a, 1)) & (Eq(b, 1))) | ((Eq(a, 1)) & (Eq(b, 2))) | ((Eq(a, 2)) & (Eq(b, 2)))    \"\"\"\n     if given_condition is not None:  # If there is a condition\n         # Recompute on new conditional expr\n         return where(given(condition, given_condition, **kwargs), **kwargs)\n",
  "test_patch": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -481,12 +481,12 @@ def test_issue_6540_6552():\n \n \n def test_issue_6046():\n-    assert str(S(\"Q & C\", locals=_clash1)) == 'And(C, Q)'\n+    assert str(S(\"Q & C\", locals=_clash1)) == 'C & Q'\n     assert str(S('pi(x)', locals=_clash2)) == 'pi(x)'\n     assert str(S('pi(C, Q)', locals=_clash)) == 'pi(C, Q)'\n     locals = {}\n     exec_(\"from sympy.abc import Q, C\", locals)\n-    assert str(S('C&Q', locals)) == 'And(C, Q)'\n+    assert str(S('C&Q', locals)) == 'C & Q'\n \n \n def test_issue_8821_highprec_from_str():\ndiff --git a/sympy/matrices/expressions/tests/test_matrix_exprs.py b/sympy/matrices/expressions/tests/test_matrix_exprs.py\n--- a/sympy/matrices/expressions/tests/test_matrix_exprs.py\n+++ b/sympy/matrices/expressions/tests/test_matrix_exprs.py\n@@ -273,7 +273,7 @@ def test_matrixelement_diff():\n     assert w[k, p].diff(w[k, p]) == 1\n     assert w[k, p].diff(w[0, 0]) == KroneckerDelta(0, k)*KroneckerDelta(0, p)\n     assert str(dexpr) == \"Sum(KroneckerDelta(_k, p)*D[k, _k], (_k, 0, n - 1))\"\n-    assert str(dexpr.doit()) == 'Piecewise((D[k, p], And(0 <= p, p <= n - 1)), (0, True))'\n+    assert str(dexpr.doit()) == 'Piecewise((D[k, p], (0 <= p) & (p <= n - 1)), (0, True))'\n \n \n def test_MatrixElement_with_values():\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -666,14 +666,14 @@ def test_settings():\n def test_RandomDomain():\n     from sympy.stats import Normal, Die, Exponential, pspace, where\n     X = Normal('x1', 0, 1)\n-    assert str(where(X > 0)) == \"Domain: And(0 < x1, x1 < oo)\"\n+    assert str(where(X > 0)) == \"Domain: (0 < x1) & (x1 < oo)\"\n \n     D = Die('d1', 6)\n-    assert str(where(D > 4)) == \"Domain: Or(Eq(d1, 5), Eq(d1, 6))\"\n+    assert str(where(D > 4)) == \"Domain: (Eq(d1, 5)) | (Eq(d1, 6))\"\n \n     A = Exponential('a', 1)\n     B = Exponential('b', 1)\n-    assert str(pspace(Tuple(A, B)).domain) == \"Domain: And(0 <= a, 0 <= b, a < oo, b < oo)\"\n+    assert str(pspace(Tuple(A, B)).domain) == \"Domain: (0 <= a) & (0 <= b) & (a < oo) & (b < oo)\"\n \n \n def test_FiniteSet():\n",
  "problem_statement": "str printing of logic expressions should use operators\nCurrently:\n\n```\nIn [5]: print(And(Not(x), Or(y, z)))\nAnd(Not(x), Or(y, z))\n```\n\nBut it would be better for the str printer (and non-Unicode pretty printer) to use `~`, `&`, and `|`, like `~x & (y | z)`. \n\nThis should be easy to fix, although you need to make sure the parenthesization is correct. \n\n",
  "hints_text": "I am working on it. Any tips are welcome :)\n\nI found that ccode function can perform similar function. \n\n```\nsympy.printing.ccode(Or(A, B))\nA || B \n```\n\nSo, this issue can be resolved quickly. Thanks\n\nccode uses C operators, but the str printer should use Python operators (single `|` instead of `||`). Also, ccode will print all subexpressions as C code, which may not be desired. \n\nHi, I'm a new contributor interested in working on this issue. I think that I should be able to fix it, and I've read through the previous pull request and understand why that approach did not work.\n\nhi @aheyman11 , you can go ahead if you have fix for the bug.\n\nThanks @parsoyaarihant, working on it now.\n\n@asmeurer  @parsoyaarihant \r\nIs this still open ? Can i work on this ? Kindly help me getting started,i am new here\nI want to work on this.  Kindly let me know if this is still open? ",
  "created_at": "2017-01-28T12:45:07Z",
  "version": "1.0",
  "FAIL_TO_PASS": "[\"test_issue_6046\", \"test_matrixelement_diff\", \"test_RandomDomain\"]",
  "PASS_TO_PASS": "[\"test_issue_3538\", \"test_sympify1\", \"test_sympify_Fraction\", \"test_sympify_gmpy\", \"test_sympify_mpmath\", \"test_sympify2\", \"test_sympify3\", \"test_sympify_keywords\", \"test_sympify_float\", \"test_sympify_bool\", \"test_sympyify_iterables\", \"test_sympify4\", \"test_sympify_text\", \"test_sympify_function\", \"test_sympify_poly\", \"test_sympify_factorial\", \"test_sage\", \"test_issue_3595\", \"test_lambda\", \"test_lambda_raises\", \"test_sympify_raises\", \"test__sympify\", \"test_sympifyit\", \"test_int_float\", \"test_issue_4133\", \"test_issue_3982\", \"test_S_sympify\", \"test_issue_4788\", \"test_issue_4798_None\", \"test_issue_3218\", \"test_issue_4988_builtins\", \"test_geometry\", \"test_kernS\", \"test_issue_6540_6552\", \"test_issue_8821_highprec_from_str\", \"test_Range\", \"test_sympify_set\", \"test_shape\", \"test_matexpr\", \"test_subs\", \"test_ZeroMatrix\", \"test_ZeroMatrix_doit\", \"test_Identity\", \"test_Identity_doit\", \"test_addition\", \"test_multiplication\", \"test_MatPow\", \"test_MatrixSymbol\", \"test_dense_conversion\", \"test_free_symbols\", \"test_zero_matmul\", \"test_matadd_simplify\", \"test_matmul_simplify\", \"test_invariants\", \"test_indexing\", \"test_single_indexing\", \"test_MatrixElement_commutative\", \"test_MatrixSymbol_determinant\", \"test_MatrixElement_diff\", \"test_MatrixElement_doit\", \"test_identity_powers\", \"test_Zero_power\", \"test_printmethod\", \"test_Abs\", \"test_Catalan\", \"test_ComplexInfinity\", \"test_Derivative\", \"test_dict\", \"test_Dict\", \"test_Dummy\", \"test_EulerGamma\", \"test_Exp\", \"test_factorial\", \"test_Function\", \"test_Geometry\", \"test_GoldenRatio\", \"test_ImaginaryUnit\", \"test_Infinity\", \"test_Integer\", \"test_Integral\", \"test_Interval\", \"test_AccumBounds\", \"test_Lambda\", \"test_Limit\", \"test_list\", \"test_Matrix_str\", \"test_NaN\", \"test_NegativeInfinity\", \"test_Order\", \"test_Permutation_Cycle\", \"test_Pi\", \"test_Poly\", \"test_PolyRing\", \"test_FracField\", \"test_PolyElement\", \"test_FracElement\", \"test_Pow\", \"test_Rational\", \"test_Float\", \"test_Relational\", \"test_CRootOf\", \"test_RootSum\", \"test_GroebnerBasis\", \"test_set\", \"test_SparseMatrix\", \"test_Sum\", \"test_Symbol\", \"test_tuple\", \"test_Unit\", \"test_wild_str\", \"test_zeta\", \"test_issue_3101\", \"test_issue_3103\", \"test_issue_4021\", \"test_sstrrepr\", \"test_infinity\", \"test_full_prec\", \"test_noncommutative\", \"test_empty_printer\", \"test_settings\", \"test_FiniteSet\", \"test_PrettyPoly\", \"test_categories\", \"test_Tr\", \"test_issue_6387\", \"test_MatMul_MatAdd\", \"test_MatrixSlice\", \"test_true_false\", \"test_Equivalent\", \"test_Xor\", \"test_Complement\", \"test_SymmetricDifference\"]",
  "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.075218",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}