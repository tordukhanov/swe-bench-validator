{
  "repo": "django/django",
  "instance_id": "django__django-16070",
  "base_commit": "649b28eab6765cd6b2b40c779a18ecafc99b43d7",
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1001,12 +1001,14 @@ def find_ordering_name(\n \n         # If we get to this point and the field is a relation to another model,\n         # append the default ordering for that model unless it is the pk\n-        # shortcut or the attribute name of the field that is specified.\n+        # shortcut or the attribute name of the field that is specified or\n+        # there are transforms to process.\n         if (\n             field.is_relation\n             and opts.ordering\n             and getattr(field, \"attname\", None) != pieces[-1]\n             and name != \"pk\"\n+            and not getattr(transform_function, \"has_transforms\", False)\n         ):\n             # Firstly, avoid infinite loops.\n             already_seen = already_seen or set()\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1819,6 +1819,7 @@ def transform(field, alias, *, name, previous):\n             final_transformer = functools.partial(\n                 transform, name=name, previous=final_transformer\n             )\n+            final_transformer.has_transforms = True\n         # Then, add the path to the query's joins. Note that we can't trim\n         # joins at this stage - we will need the information about join type\n         # of the trimmed joins.\n",
  "test_patch": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,6 +1,7 @@\n from datetime import datetime\n from operator import attrgetter\n \n+from django.core.exceptions import FieldError\n from django.db.models import (\n     CharField,\n     Count,\n@@ -91,6 +92,18 @@ def test_default_ordering_override(self):\n             attrgetter(\"headline\"),\n         )\n \n+    def test_default_ordering_override_unknown_field(self):\n+        \"\"\"\n+        Attempts to override default ordering on related models with an unknown\n+        field should result in an error.\n+        \"\"\"\n+        msg = (\n+            \"Cannot resolve keyword 'unknown_field' into field. Choices are: \"\n+            \"article, author, editor, editor_id, id, name\"\n+        )\n+        with self.assertRaisesMessage(FieldError, msg):\n+            list(Article.objects.order_by(\"author__unknown_field\"))\n+\n     def test_order_by_override(self):\n         \"\"\"\n         Only the last order_by has any effect (since they each override any\ndiff --git a/tests/queries/models.py b/tests/queries/models.py\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -68,6 +68,9 @@ def __str__(self):\n class DateTimePK(models.Model):\n     date = models.DateTimeField(primary_key=True, default=datetime.datetime.now)\n \n+    class Meta:\n+        ordering = [\"date\"]\n+\n \n class ExtraInfo(models.Model):\n     info = models.CharField(max_length=100)\n",
  "problem_statement": "QuerySet.order_by() silently skips non-existing fields on related fields with Meta.ordering.\nDescription\n\t\nCompare the following desirable behavior:\n>>> SomeModel.objects.all().order_by(\"non_existing_field\")\nTraceback (most recent call last):\n File \"<console>\", line 1, in <module>\n File \"......lib/python3.10/site-packages/django/db/models/query.py\", line 1149, in order_by\n\tobj.query.add_ordering(*field_names)\n File \"......lib/python3.10/site-packages/django/db/models/sql/query.py\", line 2016, in add_ordering\n\tself.names_to_path(item.split(LOOKUP_SEP), self.model._meta)\n File \"......lib/python3.10/site-packages/django/db/models/sql/query.py\", line 1562, in names_to_path\n\traise FieldError(\"Cannot resolve keyword '%s' into field. \"\ndjango.core.exceptions.FieldError: Cannot resolve keyword 'non_existing_field' into field. Choices are: [redacted]\nwith the following undesirable behavior:\n>>> SomeModel.objects.all().order_by(\"some_foreign_key__non_existing_field\")\n<QuerySet .... [ i.e. shows some results ]\n",
  "hints_text": "Tenatively accepted, I'm not sure it's worth the additional complexity (similar to the #29408, see 440505cb2cadbe1a5b9fba246bcde6c04f51d07e).\nfwiw I can't reproduce the issue on 4.1.1 ðŸ¤” â€¦ Here's what I tried (full tracebacks omitted for brevity): class Parent(Model): ... class Child(Model): parent = ForeignKey(Parent, on_delete=CASCADE) Child.objects.all().order_by('asdf') FieldError: Cannot resolve keyword 'asdf' into field. Choices are: id, parent, parent_id Child.objects.all().order_by('parent__id') <QuerySet []> Child.objects.all().order_by('parent__asdf') FieldError: Unsupported lookup 'asdf' for BigAutoField or join on the field not permitted, perhaps you meant df? During handling of the above exception, another exception occurred: FieldError: Cannot resolve keyword 'asdf' into field. Choices are: child, id\nGood catch, this only happens when an explicit ordering is defined on the Parent's Meta: from django.db import models class Parent(models.Model): class Meta: ordering = [\"id\"] class Child(models.Model): parent = models.ForeignKey(Parent, on_delete=models.CASCADE) Reproducable up to Django 4.1.1\nfelixx this looks like an issue with overriding the foreign model's ordering. If I repeat the test with Klaas' models and print the query it reveals it still attempts to use parent.id: class Parent(Model): class Meta: ordering = [\"id\"] class Child(Model): parent = ForeignKey(Parent, on_delete=CASCADE) print(Child.objects.all().order_by('parent__asdf').query) SELECT \"sample_child\".\"id\", \"sample_child\".\"parent_id\" FROM \"sample_child\" INNER JOIN \"sample_parent\" ON (\"sample_child\".\"parent_id\" = \"sample_parent\".\"id\") ORDER BY \"sample_parent\".\"id\" ASC Edit: (I guess the question is whether Django should raise an error or continue onto ordering)",
  "created_at": "2022-09-17T16:01:21Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"Attempts to override default ordering on related models with an unknown\"]",
  "PASS_TO_PASS": "[\"By default, Article.objects.all() orders by pub_date descending, then\", \"F expressions can be used in Meta.ordering.\", \"test_default_ordering_does_not_affect_group_by (ordering.tests.OrderingTests)\", \"Override ordering with order_by, which is in the same format as the\", \"Ordering can be based on fields included from an 'extra' clause\", \"If the extra clause uses an SQL keyword for a name, it will be\", \"test_extra_ordering_with_table_name (ordering.tests.OrderingTests)\", \"test_no_reordering_after_slicing (ordering.tests.OrderingTests)\", \"test_order_by_constant_value (ordering.tests.OrderingTests)\", \"test_order_by_f_expression (ordering.tests.OrderingTests)\", \"A column may only be included once (the first occurrence) so we check\", \"ordering by a foreign key by its attribute name prevents the query\", \"test_order_by_grandparent_fk_with_expression_in_default_ordering (ordering.tests.OrderingTests)\", \"test_order_by_nulls_first (ordering.tests.OrderingTests)\", \"test_order_by_nulls_first_and_last (ordering.tests.OrderingTests)\", \"test_order_by_nulls_last (ordering.tests.OrderingTests)\", \"Only the last order_by has any effect (since they each override any\", \"test_order_by_parent_fk_with_expression_in_default_ordering (ordering.tests.OrderingTests)\", \"'pk' works as an ordering option in Meta.\", \"test_order_by_ptr_field_with_default_ordering_by_expression (ordering.tests.OrderingTests)\", \"test_order_by_self_referential_fk (ordering.tests.OrderingTests)\", \"test_orders_nulls_first_on_filtered_subquery (ordering.tests.OrderingTests)\", \"Use '?' to order randomly.\", \"An ordering referencing a model with an ordering referencing a model\", \"test_reverse_meta_ordering_pure (ordering.tests.OrderingTests)\", \"test_reverse_ordering_pure (ordering.tests.OrderingTests)\", \"Ordering can be reversed using the reverse() method on a queryset.\", \"Use the 'stop' part of slicing notation to limit the results.\", \"Use the 'stop' and 'start' parts of slicing notation to offset the\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.746814",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}