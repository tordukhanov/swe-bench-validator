{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13017",
  "base_commit": "db17f3e2221fb6cec256d2d3501e259c5d5db934",
  "patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -628,14 +628,11 @@ def _get_column_indices(X, key):\n     \"\"\"\n     n_columns = X.shape[1]\n \n-    if _check_key_type(key, int):\n-        if isinstance(key, int):\n-            return [key]\n-        elif isinstance(key, slice):\n-            return list(range(n_columns)[key])\n-        else:\n-            return list(key)\n-\n+    if (_check_key_type(key, int)\n+            or hasattr(key, 'dtype') and np.issubdtype(key.dtype, np.bool_)):\n+        # Convert key into positive indexes\n+        idx = np.arange(n_columns)[key]\n+        return np.atleast_1d(idx).tolist()\n     elif _check_key_type(key, str):\n         try:\n             all_columns = list(X.columns)\n@@ -658,10 +655,6 @@ def _get_column_indices(X, key):\n             columns = list(key)\n \n         return [all_columns.index(col) for col in columns]\n-\n-    elif hasattr(key, 'dtype') and np.issubdtype(key.dtype, np.bool_):\n-        # boolean mask\n-        return list(np.arange(n_columns)[key])\n     else:\n         raise ValueError(\"No valid specification of the columns. Only a \"\n                          \"scalar, list or slice of all integers or all \"\n",
  "test_patch": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -1019,3 +1019,15 @@ def func(X):\n     assert_array_equal(ct.fit(X_df).transform(X_df), X_res_first)\n     assert callable(ct.transformers[0][2])\n     assert ct.transformers_[0][2] == ['first']\n+\n+\n+def test_column_transformer_negative_column_indexes():\n+    X = np.random.randn(2, 2)\n+    X_categories = np.array([[1], [2]])\n+    X = np.concatenate([X, X_categories], axis=1)\n+\n+    ohe = OneHotEncoder(categories='auto')\n+\n+    tf_1 = ColumnTransformer([('ohe', ohe, [-1])], remainder='passthrough')\n+    tf_2 = ColumnTransformer([('ohe', ohe,  [2])], remainder='passthrough')\n+    assert_array_equal(tf_1.fit_transform(X), tf_2.fit_transform(X))\n",
  "problem_statement": "ColumnTransformer behavior for negative column indexes\n<!--\r\nIf your issue is a usage question, submit it here instead:\r\n- StackOverflow with the scikit-learn tag: https://stackoverflow.com/questions/tagged/scikit-learn\r\n- Mailing List: https://mail.python.org/mailman/listinfo/scikit-learn\r\nFor more information, see User Questions: http://scikit-learn.org/stable/support.html#user-questions\r\n-->\r\n\r\n<!-- Instructions For Filing a Bug: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md#filing-bugs -->\r\n\r\n#### Description\r\nThe behavior of `ColumnTransformer` when negative integers are passed as column indexes is not clear.\r\n\r\n#### Steps/Code to Reproduce\r\n\r\n```python\r\nimport numpy as np\r\nfrom sklearn.compose import ColumnTransformer\r\nfrom sklearn.preprocessing import OneHotEncoder\r\n\r\nX = np.random.randn(2, 2)\r\nX_categories = np.array([[1], [2]])\r\nX = np.concatenate([X, X_categories], axis=1)\r\n\r\nprint('---- With negative index ----')\r\nohe = OneHotEncoder(categories='auto')\r\ntf_1 = ColumnTransformer([('ohe', ohe, [-1])], remainder='passthrough')\r\nprint(tf_1.fit_transform(X))\r\n\r\nprint('---- With positive index ----')\r\ntf_2 = ColumnTransformer([('ohe', ohe, [2])], remainder='passthrough')\r\nprint(tf_2.fit_transform(X))\r\n```\r\n\r\n#### Expected Results\r\nThe first transformer `tf_1` should either raise an error or give the same result as the second transformer `tf_2`\r\n\r\n#### Actual Results\r\n```python-tb\r\n---- With negative index ----\r\n[[ 1.          0.          0.10600662 -0.46707426  1.        ]\r\n [ 0.          1.         -1.33177629  2.29186299  2.        ]]\r\n---- With positive index ----\r\n[[ 1.          0.          0.10600662 -0.46707426]\r\n [ 0.          1.         -1.33177629  2.29186299]]\r\n```\n",
  "hints_text": "I think we should allow negative indices, if only because we are supporting\nvarious other numpy indexing syntaxes and users would expect it. Current\nbehaviour doesn't look so good!\n\nCan I work on this? My initial thought process is to look at the `ColumnTransformer` class and see how column names are being parsed. The `ColumnTransformer` is located inside `sklearn/compose/_column_transformer.py`. I'd like to give this a look and hack into what's happening. This seems easy for a first timer like me. \nI'm uncertain quite how easy it is. after you've familiarised yourself with the code a little, please add a test to sklearn/compose/tests/test_column_transformer.py asserting the desired behaviour, as proposed by @albertcthomas. Submit a PR. Then go ahead and try to fix it.\nIt is the validation of the remainder that is going wrong:\r\n\r\n```\r\nIn [15]: tf_1._remainder                                                                                                                                                                                            \r\nOut[15]: ('remainder', 'passthrough', [0, 1, 2])   <--- wrong\r\n\r\nIn [16]: tf_2._remainder                                                                                                                                                                                            \r\nOut[16]: ('remainder', 'passthrough', [0, 1])\r\n```\r\n\r\nThis is because the set operation here to get `remaining_idx` does not work with negative indices:\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/354c8c3bc3e36c69021713da66e7fa2f6cb07756/sklearn/compose/_column_transformer.py#L298-L304\r\n\r\nMaybe we should convert the negative indices to positive ones in `_get_column_indices` ?\nYes, that sounds like the right solution.\n\nthanks @jorisvandenbossche for investigating the issue.",
  "created_at": "2019-01-19T15:51:13Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_negative_column_indexes\"]",
  "PASS_TO_PASS": "[\"sklearn/compose/tests/test_column_transformer.py::test_column_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_dataframe\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[list-pandas]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[list-numpy]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[bool-pandas]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[bool-numpy]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_array\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_list\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_stacking\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_mixed_cols_sparse\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_threshold\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_error_msg_1D\", \"sklearn/compose/tests/test_column_transformer.py::test_2D_transformer_output\", \"sklearn/compose/tests/test_column_transformer.py::test_2D_transformer_output_pandas\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_columns[drop]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_columns[passthrough]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_pandas\", \"sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_kwargs\", \"sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_set_params\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_named_estimators\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_cloning\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_feature_names\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_special_strings\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key0]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key1]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key2]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key3]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key0]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key1]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key2]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key3]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[pd-index]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key5]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key6]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key7]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key8]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key0]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key1]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key2]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key3]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_remaining_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_drops_all_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_drop_all_sparse_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_set_params_with_remainder\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_estimators\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_estimators_set_params\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_callable_specifier\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.979585",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}