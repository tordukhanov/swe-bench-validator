{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-10581",
  "base_commit": "b27e285ea39450550fc8c81f308a91a660c03a56",
  "patch": "diff --git a/sklearn/linear_model/coordinate_descent.py b/sklearn/linear_model/coordinate_descent.py\n--- a/sklearn/linear_model/coordinate_descent.py\n+++ b/sklearn/linear_model/coordinate_descent.py\n@@ -700,19 +700,23 @@ def fit(self, X, y, check_input=True):\n             raise ValueError('precompute should be one of True, False or'\n                              ' array-like. Got %r' % self.precompute)\n \n+        # Remember if X is copied\n+        X_copied = False\n         # We expect X and y to be float64 or float32 Fortran ordered arrays\n         # when bypassing checks\n         if check_input:\n+            X_copied = self.copy_X and self.fit_intercept\n             X, y = check_X_y(X, y, accept_sparse='csc',\n                              order='F', dtype=[np.float64, np.float32],\n-                             copy=self.copy_X and self.fit_intercept,\n-                             multi_output=True, y_numeric=True)\n+                             copy=X_copied, multi_output=True, y_numeric=True)\n             y = check_array(y, order='F', copy=False, dtype=X.dtype.type,\n                             ensure_2d=False)\n \n+        # Ensure copying happens only once, don't do it again if done above\n+        should_copy = self.copy_X and not X_copied\n         X, y, X_offset, y_offset, X_scale, precompute, Xy = \\\n             _pre_fit(X, y, None, self.precompute, self.normalize,\n-                     self.fit_intercept, copy=False)\n+                     self.fit_intercept, copy=should_copy)\n         if y.ndim == 1:\n             y = y[:, np.newaxis]\n         if Xy is not None and Xy.ndim == 1:\n",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_coordinate_descent.py b/sklearn/linear_model/tests/test_coordinate_descent.py\n--- a/sklearn/linear_model/tests/test_coordinate_descent.py\n+++ b/sklearn/linear_model/tests/test_coordinate_descent.py\n@@ -3,6 +3,7 @@\n # License: BSD 3 clause\n \n import numpy as np\n+import pytest\n from scipy import interpolate, sparse\n from copy import deepcopy\n \n@@ -669,6 +670,30 @@ def test_check_input_false():\n     assert_raises(ValueError, clf.fit, X, y, check_input=False)\n \n \n+@pytest.mark.parametrize(\"check_input\", [True, False])\n+def test_enet_copy_X_True(check_input):\n+    X, y, _, _ = build_dataset()\n+    X = X.copy(order='F')\n+\n+    original_X = X.copy()\n+    enet = ElasticNet(copy_X=True)\n+    enet.fit(X, y, check_input=check_input)\n+\n+    assert_array_equal(original_X, X)\n+\n+\n+def test_enet_copy_X_False_check_input_False():\n+    X, y, _, _ = build_dataset()\n+    X = X.copy(order='F')\n+\n+    original_X = X.copy()\n+    enet = ElasticNet(copy_X=False)\n+    enet.fit(X, y, check_input=False)\n+\n+    # No copying, X is overwritten\n+    assert_true(np.any(np.not_equal(original_X, X)))\n+\n+\n def test_overrided_gram_matrix():\n     X, y, _, _ = build_dataset(n_samples=20, n_features=10)\n     Gram = X.T.dot(X)\n",
  "problem_statement": "ElasticNet overwrites X even with copy_X=True\nThe `fit` function of an `ElasticNet`, called with `check_input=False`, overwrites X, even when `copy_X=True`:\r\n```python\r\nimport numpy as np\r\nfrom sklearn.linear_model import ElasticNet\r\n\r\n\r\nrng = np.random.RandomState(0)\r\nn_samples, n_features = 20, 2\r\nX = rng.randn(n_samples, n_features).copy(order='F')\r\nbeta = rng.randn(n_features)\r\ny = 2 + np.dot(X, beta) + rng.randn(n_samples)\r\n\r\nX_copy = X.copy()\r\nenet = ElasticNet(fit_intercept=True, normalize=False, copy_X=True)\r\nenet.fit(X, y, check_input=False)\r\n\r\nprint(\"X unchanged = \", np.all(X == X_copy))\r\n```\nElasticNet overwrites X even with copy_X=True\nThe `fit` function of an `ElasticNet`, called with `check_input=False`, overwrites X, even when `copy_X=True`:\r\n```python\r\nimport numpy as np\r\nfrom sklearn.linear_model import ElasticNet\r\n\r\n\r\nrng = np.random.RandomState(0)\r\nn_samples, n_features = 20, 2\r\nX = rng.randn(n_samples, n_features).copy(order='F')\r\nbeta = rng.randn(n_features)\r\ny = 2 + np.dot(X, beta) + rng.randn(n_samples)\r\n\r\nX_copy = X.copy()\r\nenet = ElasticNet(fit_intercept=True, normalize=False, copy_X=True)\r\nenet.fit(X, y, check_input=False)\r\n\r\nprint(\"X unchanged = \", np.all(X == X_copy))\r\n```\n[MRG] FIX #10540 ElasticNet overwrites X even with copy_X=True\nMade changes as suggested by @gxyd.\r\nplease review and suggest changes @jnothman @gxyd \n",
  "hints_text": "I think this will be easy to fix. The culprit is this line https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/linear_model/coordinate_descent.py#L715 which passes `copy=False`, instead of `copy=self.copy_X`. That'll probably fix the issue.\r\n\r\nThanks for reporting it.\nThanks for the diagnosis, @gxyd!\n@jnothman, @gxyd: May I work on this?\ngo ahead\n\nThanks. On it!!\nproblem comes from this old PR:\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/pull/5133\r\n\r\nbasically we should now remove the \"check_input=True\" fit param from the objects now that we have the context manager to avoid slow checks.\r\n\r\nsee http://scikit-learn.org/stable/modules/generated/sklearn.config_context.html\nI don't think the diagnosis is correct. The problem is that if you pass check_input=True, you bypass the check_input call that is meant to make the copy of X\nThanks for the additional clarifications @agramfort . Could you please  help reviewing [the PR](https://github.com/scikit-learn/scikit-learn/pull/10581)?\nI think this will be easy to fix. The culprit is this line https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/linear_model/coordinate_descent.py#L715 which passes `copy=False`, instead of `copy=self.copy_X`. That'll probably fix the issue.\r\n\r\nThanks for reporting it.\nThanks for the diagnosis, @gxyd!\n@jnothman, @gxyd: May I work on this?\ngo ahead\n\nThanks. On it!!\nproblem comes from this old PR:\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/pull/5133\r\n\r\nbasically we should now remove the \"check_input=True\" fit param from the objects now that we have the context manager to avoid slow checks.\r\n\r\nsee http://scikit-learn.org/stable/modules/generated/sklearn.config_context.html\nI don't think the diagnosis is correct. The problem is that if you pass check_input=True, you bypass the check_input call that is meant to make the copy of X\nThanks for the additional clarifications @agramfort . Could you please  help reviewing [the PR](https://github.com/scikit-learn/scikit-learn/pull/10581)?\nyou need to add a non-regression test case that fails without this patch\nand shows that we do not modify the data when told to copy.\n",
  "created_at": "2018-02-03T15:23:17Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_copy_X_True[False]\"]",
  "PASS_TO_PASS": "[\"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_zero\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_toy\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_toy\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_cv_with_some_model_selection\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_cv_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_path_return_models_vs_new_return_gives_same_coefficients\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_path_parameters\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_alpha_warning\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_cv_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_uniform_targets\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multi_task_lasso_and_enet\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_readonly_data\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multi_task_lasso_readonly_data\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_multitarget\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multioutput_enetcv_error\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multitask_enet_and_lasso_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_1d_multioutput_enet_and_multitask_enet_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_1d_multioutput_lasso_and_multitask_lasso_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_sparse_input_dtype_enet_and_lassocv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_precompute_invalid_argument\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_random_descent\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_sparse_dense_descent_paths\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_check_input_false\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_copy_X_True[True]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_copy_X_False_check_input_False\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_overrided_gram_matrix\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_non_float_y\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_float_precision\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_l1_ratio\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.953370",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}