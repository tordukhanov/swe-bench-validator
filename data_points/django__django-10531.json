{
  "repo": "django/django",
  "instance_id": "django__django-10531",
  "base_commit": "1564e42ad397021093585147875a21dae1a3b3fc",
  "patch": "diff --git a/django/contrib/admin/models.py b/django/contrib/admin/models.py\n--- a/django/contrib/admin/models.py\n+++ b/django/contrib/admin/models.py\n@@ -114,7 +114,7 @@ def get_change_message(self):\n \n                 elif 'changed' in sub_message:\n                     sub_message['changed']['fields'] = get_text_list(\n-                        sub_message['changed']['fields'], gettext('and')\n+                        [gettext(field_name) for field_name in sub_message['changed']['fields']], gettext('and')\n                     )\n                     if 'name' in sub_message['changed']:\n                         sub_message['changed']['name'] = gettext(sub_message['changed']['name'])\ndiff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -489,12 +489,21 @@ def construct_change_message(form, formsets, add):\n     Translations are deactivated so that strings are stored untranslated.\n     Translation happens later on LogEntry access.\n     \"\"\"\n+    # Evaluating `form.changed_data` prior to disabling translations is required\n+    # to avoid fields affected by localization from being included incorrectly,\n+    # e.g. where date formats differ such as MM/DD/YYYY vs DD/MM/YYYY.\n+    changed_data = form.changed_data\n+    with translation_override(None):\n+        # Deactivate translations while fetching verbose_name for form\n+        # field labels and using `field_name`, if verbose_name is not provided.\n+        # Translations will happen later on LogEntry access.\n+        changed_field_labels = _get_changed_field_labels_from_form(form, changed_data)\n+\n     change_message = []\n     if add:\n         change_message.append({'added': {}})\n     elif form.changed_data:\n-        change_message.append({'changed': {'fields': form.changed_data}})\n-\n+        change_message.append({'changed': {'fields': changed_field_labels}})\n     if formsets:\n         with translation_override(None):\n             for formset in formsets:\n@@ -510,7 +519,7 @@ def construct_change_message(form, formsets, add):\n                         'changed': {\n                             'name': str(changed_object._meta.verbose_name),\n                             'object': str(changed_object),\n-                            'fields': changed_fields,\n+                            'fields': _get_changed_field_labels_from_form(formset.forms[0], changed_fields),\n                         }\n                     })\n                 for deleted_object in formset.deleted_objects:\n@@ -521,3 +530,14 @@ def construct_change_message(form, formsets, add):\n                         }\n                     })\n     return change_message\n+\n+\n+def _get_changed_field_labels_from_form(form, changed_data):\n+    changed_field_labels = []\n+    for field_name in changed_data:\n+        try:\n+            verbose_field_name = form.fields[field_name].label or field_name\n+        except KeyError:\n+            verbose_field_name = field_name\n+        changed_field_labels.append(str(verbose_field_name))\n+    return changed_field_labels\n",
  "test_patch": "diff --git a/tests/admin_utils/admin.py b/tests/admin_utils/admin.py\n--- a/tests/admin_utils/admin.py\n+++ b/tests/admin_utils/admin.py\n@@ -1,11 +1,30 @@\n+from django import forms\n from django.contrib import admin\n \n from .models import Article, ArticleProxy, Site\n \n \n+class ArticleAdminForm(forms.ModelForm):\n+    nolabel_form_field = forms.BooleanField(required=False)\n+\n+    class Meta:\n+        model = Article\n+        fields = ['title']\n+\n+    @property\n+    def changed_data(self):\n+        data = super().changed_data\n+        if data:\n+            # Add arbitrary name to changed_data to test\n+            # change message construction.\n+            return data + ['not_a_form_field']\n+        return data\n+\n+\n class ArticleInline(admin.TabularInline):\n     model = Article\n     fields = ['title']\n+    form = ArticleAdminForm\n \n \n class SiteAdmin(admin.ModelAdmin):\ndiff --git a/tests/admin_utils/test_logentry.py b/tests/admin_utils/test_logentry.py\n--- a/tests/admin_utils/test_logentry.py\n+++ b/tests/admin_utils/test_logentry.py\n@@ -53,9 +53,9 @@ def test_logentry_change_message(self):\n         response = self.client.post(change_url, post_data)\n         self.assertRedirects(response, reverse('admin:admin_utils_article_changelist'))\n         logentry = LogEntry.objects.filter(content_type__model__iexact='article').latest('id')\n-        self.assertEqual(logentry.get_change_message(), 'Changed title and hist.')\n+        self.assertEqual(logentry.get_change_message(), 'Changed Title and History.')\n         with translation.override('fr'):\n-            self.assertEqual(logentry.get_change_message(), 'Modification de title et hist.')\n+            self.assertEqual(logentry.get_change_message(), 'Modification de Title et Historique.')\n \n         add_url = reverse('admin:admin_utils_article_add')\n         post_data['title'] = 'New'\n@@ -85,7 +85,7 @@ def test_logentry_change_message_localized_datetime_input(self):\n             response = self.client.post(change_url, post_data)\n             self.assertRedirects(response, reverse('admin:admin_utils_article_changelist'))\n         logentry = LogEntry.objects.filter(content_type__model__iexact='article').latest('id')\n-        self.assertEqual(logentry.get_change_message(), 'Changed title and hist.')\n+        self.assertEqual(logentry.get_change_message(), 'Changed Title and History.')\n \n     def test_logentry_change_message_formsets(self):\n         \"\"\"\n@@ -123,23 +123,25 @@ def test_logentry_change_message_formsets(self):\n         self.assertEqual(\n             json.loads(logentry.change_message),\n             [\n-                {\"changed\": {\"fields\": [\"domain\"]}},\n+                {\"changed\": {\"fields\": [\"Domain\"]}},\n                 {\"added\": {\"object\": \"Added article\", \"name\": \"article\"}},\n-                {\"changed\": {\"fields\": [\"title\"], \"object\": \"Changed Title\", \"name\": \"article\"}},\n+                {\"changed\": {\"fields\": [\"Title\", \"not_a_form_field\"], \"object\": \"Changed Title\", \"name\": \"article\"}},\n                 {\"deleted\": {\"object\": \"Title second article\", \"name\": \"article\"}},\n             ]\n         )\n         self.assertEqual(\n             logentry.get_change_message(),\n-            'Changed domain. Added article \"Added article\". '\n-            'Changed title for article \"Changed Title\". Deleted article \"Title second article\".'\n+            'Changed Domain. Added article \"Added article\". '\n+            'Changed Title and not_a_form_field for article \"Changed Title\". '\n+            'Deleted article \"Title second article\".'\n         )\n \n         with translation.override('fr'):\n             self.assertEqual(\n                 logentry.get_change_message(),\n-                \"Modification de domain. Ajout de article « Added article ». \"\n-                \"Modification de title pour l'objet article « Changed Title ». \"\n+                \"Modification de Domain. Ajout de article « Added article ». \"\n+                \"Modification de Title et not_a_form_field pour l'objet \"\n+                \"article « Changed Title ». \"\n                 \"Suppression de article « Title second article ».\"\n             )\n \ndiff --git a/tests/admin_views/admin.py b/tests/admin_views/admin.py\n--- a/tests/admin_views/admin.py\n+++ b/tests/admin_views/admin.py\n@@ -893,8 +893,27 @@ class CityInlineAdmin(admin.TabularInline):\n     view_on_site = False\n \n \n+class StateAdminForm(forms.ModelForm):\n+    nolabel_form_field = forms.BooleanField(required=False)\n+\n+    class Meta:\n+        model = State\n+        fields = '__all__'\n+        labels = {\"name\": \"State name (from form's Meta.labels)\"}\n+\n+    @property\n+    def changed_data(self):\n+        data = super().changed_data\n+        if data:\n+            # Add arbitrary name to changed_data to test\n+            # change message construction.\n+            return data + ['not_a_form_field']\n+        return data\n+\n+\n class StateAdmin(admin.ModelAdmin):\n     inlines = [CityInlineAdmin]\n+    form = StateAdminForm\n \n \n class RestaurantInlineAdmin(admin.TabularInline):\ndiff --git a/tests/admin_views/models.py b/tests/admin_views/models.py\n--- a/tests/admin_views/models.py\n+++ b/tests/admin_views/models.py\n@@ -864,12 +864,12 @@ class EmptyModelMixin(models.Model):\n \n \n class State(models.Model):\n-    name = models.CharField(max_length=100)\n+    name = models.CharField(max_length=100, verbose_name='State verbose_name')\n \n \n class City(models.Model):\n     state = models.ForeignKey(State, models.CASCADE)\n-    name = models.CharField(max_length=100)\n+    name = models.CharField(max_length=100, verbose_name='City verbose_name')\n \n     def get_absolute_url(self):\n         return '/dummy/%s/' % self.pk\ndiff --git a/tests/admin_views/test_history_view.py b/tests/admin_views/test_history_view.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/admin_views/test_history_view.py\n@@ -0,0 +1,45 @@\n+from django.contrib.admin.models import LogEntry\n+from django.contrib.auth.models import User\n+from django.test import TestCase, override_settings\n+from django.urls import reverse\n+\n+from .models import City, State\n+\n+\n+@override_settings(ROOT_URLCONF='admin_views.urls')\n+class AdminHistoryViewTests(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+\n+    def setUp(self):\n+        self.client.force_login(self.superuser)\n+\n+    def test_changed_message_uses_form_lables(self):\n+        \"\"\"\n+        Admin's model history change messages use form labels instead of\n+        field names.\n+        \"\"\"\n+        state = State.objects.create(name='My State Name')\n+        city = City.objects.create(name='My City Name', state=state)\n+        change_dict = {\n+            'name': 'My State Name 2',\n+            'nolabel_form_field': True,\n+            'city_set-0-name': 'My City name 2',\n+            'city_set-0-id': city.pk,\n+            'city_set-TOTAL_FORMS': '3',\n+            'city_set-INITIAL_FORMS': '1',\n+            'city_set-MAX_NUM_FORMS': '0',\n+        }\n+        state_change_url = reverse('admin:admin_views_state_change', args=(state.pk,))\n+        self.client.post(state_change_url, change_dict)\n+        logentry = LogEntry.objects.filter(content_type__model__iexact='state').latest('id')\n+        self.assertEqual(\n+            logentry.get_change_message(),\n+            'Changed State name (from form\\'s Meta.labels), '\n+            'nolabel_form_field and not_a_form_field. '\n+            'Changed City verbose_name for city \"%s\".' % city\n+        )\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -900,7 +900,7 @@ def test_change_view_logs_m2m_field_changes(self):\n         self.assertRedirects(response, reverse('admin:admin_views_readablepizza_changelist'))\n         pizza_ctype = ContentType.objects.get_for_model(ReadablePizza, for_concrete_model=False)\n         log = LogEntry.objects.filter(content_type=pizza_ctype, object_id=pizza.pk).first()\n-        self.assertEqual(log.get_change_message(), 'Changed toppings.')\n+        self.assertEqual(log.get_change_message(), 'Changed Toppings.')\n \n     def test_allows_attributeerror_to_bubble_up(self):\n         \"\"\"\ndiff --git a/tests/auth_tests/test_views.py b/tests/auth_tests/test_views.py\n--- a/tests/auth_tests/test_views.py\n+++ b/tests/auth_tests/test_views.py\n@@ -1173,7 +1173,7 @@ def test_user_change_email(self):\n         )\n         self.assertRedirects(response, reverse('auth_test_admin:auth_user_changelist'))\n         row = LogEntry.objects.latest('id')\n-        self.assertEqual(row.get_change_message(), 'Changed email.')\n+        self.assertEqual(row.get_change_message(), 'Changed Email address.')\n \n     def test_user_not_change(self):\n         response = self.client.post(\n",
  "problem_statement": "Models history doesn't use verbose names\nDescription\n\t\nThe history for a model object (within the admin section) should show human-readable messages, favoring verbose names over field names. However, this is not currently the case. For example, consider a model with the following class variable:\npub_date = models.DateTimeField(\"date published\")\nChanging the publication date for an object of that model, will display \"Changed pub_date.\" in its admin history, rather than \"Change date published.\" as one would expect (as older versions of Django did).\n",
  "hints_text": "Initial patch, probably needs tests.\nUpdated patch to apply to current trunk and added a test for the history view.\nMarking as DDN until an answer to ticket:14358#comment:3 is provided.\nThe objection was \"for debug purposes, it would be more useful to have the field names, as they are necessarily unique, untranslated, etc.\" In my opinion: uniqueness is a weak argument: if you have two fields with the same name, you're just asking for trouble; translation isn't an issue at all: in doubt, just switch the website to the default language of your codebase.\n#14358 is a duplicate and has patches too.\nPatch will need to be updated to apply cleanly.\nA Github pull request (​#4496) has been opened for this ticket.\nI am thinking it might be best to try to address #21113 first (allow messages to be translated to the current language rather than displaying the language that was active for editing) since this ticket would require a new implementation for that one.\nLeft comments for improvement on the PR.\nI think it's better to work with the form labels than fields' verbose name, I think It's actually a more natural flow and more consistent if the label is different then the verbose name. (That's the idea behind the field label option, right?!) My Approach would be to gather the changed fields' labels, then send it to get_text_list ​https://github.com/django/django/blob/master/django/contrib/admin/options.py#L925-L936 translated_changed_fields = [form.fields[f].label for f in form.changed_data] change_message.append(_('Changed %s.') % get_text_list(translated_changed_fields, _('and'))) #again for formset for changed_object, changed_fields in formset.changed_objects: translated_changed_fields = [formset.forms[0].fields[f].label for f in changed_fields] #using formset.forms[0] looks ugly i agree , couldn't find better ways But hey , it's a changed formset , index [0] is there ! change_message.append(_('Changed %(list)s for %(name)s \"%(object)s\".') % {'list': get_text_list(translated_changed_fields, _('and')), #... Created a duplicate 24990 Regards;\nIt seems to me that the verbose name is a safer choice to account for the fact that you might have several different editing forms each with a different label.\nIMHO, that depend on the intended audience of the changed message in the history. If it's the developer then verbose_name are the way to go. If it's the site 'content' administrator, this is what i think is the case, then labels are more of expected behavior; and in that case the \"maybe different\" verbose name can be confused as a bug. \"I edited the field \"More info\", why does it show me that i edited 'description' which is not even present on the form ?\" :) Kind regards;\nI see that this pull request didn't get merged. I can go for it with the form label resolution.\nAfter further consideration, I think that approach is okay.\nPR created ​#5169\nI left some comments for improvement on the pull request. Don't forget to uncheck \"Patch needs improvement\" on this ticket after you update it so it appears in the review queue, thanks!\nSome ​discussion on the mailing list confirmed my feeling that we should fix #21113 first.\nI'm trying to modify the current patch and apply it cleanly to the current master branch.\n​PR\nComments left on the PR.\nI've addressed the reviews. Can you please take another pass?\nReview comments have been addressed. Patch looks good to go. (Will just leave time for Claude to follow up if he wants to.)\nAddressed Claude's review on the patch and it is ready for a review again and possibly check-in.\nThere were just a couple more comments on the ticket. Sanyam, please uncheck Patch needs improvement when you've had a look at those. (Thanks for the great effort!)\nHey Carlton, I've addressed the last nit-picks in the patch. Thank you for your patience!\nHello, Can you please have a look at the recent updates on this patch? Please let me know if any more changes are needed. Thanks!\n(The patch is in the review queue, no need to add a comment asking for a review. I was on vacation last week and am catching up on things.)\nPR looks not far off after several reviews. Once comments are addressed it would be good if previous reviewers could give one more look to make sure we don't miss anything.",
  "created_at": "2018-10-19T00:29:39Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_logentry_change_message (admin_utils.test_logentry.LogEntryTests)\", \"test_logentry_change_message_formsets (admin_utils.test_logentry.LogEntryTests)\", \"test_logentry_change_message_localized_datetime_input (admin_utils.test_logentry.LogEntryTests)\", \"test_changed_message_uses_form_lables (admin_views.test_history_view.AdminHistoryViewTests)\", \"test_user_change_email (auth_tests.test_views.ChangelistTests)\", \"Changes to ManyToManyFields are included in the object's history.\"]",
  "PASS_TO_PASS": "[\"Named URLs should be reversible\", \"test_redirect_to_login_with_lazy (auth_tests.test_views.RedirectToLoginTests)\", \"test_redirect_to_login_with_lazy_and_unicode (auth_tests.test_views.RedirectToLoginTests)\", \"test_https_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_lazy_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_login_url_with_querystring (auth_tests.test_views.LoginURLSettings)\", \"test_named_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_remote_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_remote_login_url_with_next_querystring (auth_tests.test_views.LoginURLSettings)\", \"test_standard_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_default_logout_then_login (auth_tests.test_views.LogoutThenLoginTests)\", \"test_logout_then_login_with_custom_login (auth_tests.test_views.LogoutThenLoginTests)\", \"test_success_url_allowed_hosts_safe_host (auth_tests.test_views.LoginSuccessURLAllowedHostsTest)\", \"test_success_url_allowed_hosts_same_host (auth_tests.test_views.LoginSuccessURLAllowedHostsTest)\", \"test_success_url_allowed_hosts_unsafe_host (auth_tests.test_views.LoginSuccessURLAllowedHostsTest)\", \"test_custom (auth_tests.test_views.LoginRedirectUrlTest)\", \"test_default (auth_tests.test_views.LoginRedirectUrlTest)\", \"test_named (auth_tests.test_views.LoginRedirectUrlTest)\", \"test_remote (auth_tests.test_views.LoginRedirectUrlTest)\", \"test_confirm_valid_custom_user (auth_tests.test_views.CustomUserPasswordResetTest)\", \"A uidb64 that decodes to a non-UUID doesn't crash.\", \"test_confirm_valid_custom_user (auth_tests.test_views.UUIDUserPasswordResetTest)\", \"test_password_change_done_fails (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_done_succeeds (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_fails_with_invalid_old_password (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_fails_with_mismatched_passwords (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_redirect_custom (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_redirect_custom_named (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_redirect_default (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_succeeds (auth_tests.test_views.ChangePasswordTest)\", \"test_current_site_in_context_after_login (auth_tests.test_views.LoginTest)\", \"test_login_csrf_rotate (auth_tests.test_views.LoginTest)\", \"test_login_form_contains_request (auth_tests.test_views.LoginTest)\", \"test_login_session_without_hash_session_key (auth_tests.test_views.LoginTest)\", \"test_security_check (auth_tests.test_views.LoginTest)\", \"test_security_check_https (auth_tests.test_views.LoginTest)\", \"test_session_key_flushed_on_login (auth_tests.test_views.LoginTest)\", \"test_session_key_flushed_on_login_after_password_change (auth_tests.test_views.LoginTest)\", \"test_user_password_change_updates_session (auth_tests.test_views.SessionAuthenticationTests)\", \"Stay on the login page by default.\", \"If not logged in, stay on the same page.\", \"test_permission_required_logged_in (auth_tests.test_views.LoginRedirectAuthenticatedUser)\", \"test_permission_required_not_logged_in (auth_tests.test_views.LoginRedirectAuthenticatedUser)\", \"If logged in, go to default redirected URL.\", \"test_redirect_loop (auth_tests.test_views.LoginRedirectAuthenticatedUser)\", \"If next is specified as a GET parameter, go there.\", \"If logged in, go to custom redirected URL.\", \"test_confirm_complete (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_custom_reset_url_token (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_custom_reset_url_token_link_redirects_to_set_password_page (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_different_passwords (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_display_user_from_form (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_invalid (auth_tests.test_views.PasswordResetTest)\", \"A POST with an invalid token is rejected.\", \"test_confirm_invalid_post (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_invalid_user (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_link_redirects_to_set_password_page (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_login_post_reset (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_login_post_reset_already_logged_in (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_login_post_reset_custom_backend (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_overflow_user (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_redirect_custom (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_redirect_custom_named (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_redirect_default (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_valid (auth_tests.test_views.PasswordResetTest)\", \"Email is sent if a valid email address is provided for password reset\", \"Email is sent if a valid email address is provided for password reset when a custom from_email is provided.\", \"If the provided email is not registered, don't raise any error but\", \"test_extra_email_context (auth_tests.test_views.PasswordResetTest)\", \"test_html_mail_template (auth_tests.test_views.PasswordResetTest)\", \"test_invalid_link_if_going_directly_to_the_final_reset_password_url (auth_tests.test_views.PasswordResetTest)\", \"Poisoned HTTP_HOST headers can't be used for reset emails\", \"Poisoned HTTP_HOST headers can't be used for reset emails on admin views\", \"test_reset_custom_redirect (auth_tests.test_views.PasswordResetTest)\", \"test_reset_custom_redirect_named (auth_tests.test_views.PasswordResetTest)\", \"test_reset_redirect_default (auth_tests.test_views.PasswordResetTest)\", \"test_14377 (auth_tests.test_views.LogoutTest)\", \"Logout without next_page option renders the default template\", \"test_logout_doesnt_cache (auth_tests.test_views.LogoutTest)\", \"Language is preserved after logout.\", \"test_logout_redirect_url_named_setting (auth_tests.test_views.LogoutTest)\", \"test_logout_redirect_url_setting (auth_tests.test_views.LogoutTest)\", \"Logout with custom query string redirects to specified resource\", \"Logout resolves names or URLs passed as next_page.\", \"Logout with next_page option given redirects to specified resource\", \"test_logout_with_overridden_redirect_url (auth_tests.test_views.LogoutTest)\", \"test_logout_with_post (auth_tests.test_views.LogoutTest)\", \"Logout with query string redirects to specified resource\", \"test_security_check (auth_tests.test_views.LogoutTest)\", \"test_security_check_https (auth_tests.test_views.LogoutTest)\", \"test_success_url_allowed_hosts_safe_host (auth_tests.test_views.LogoutTest)\", \"test_success_url_allowed_hosts_same_host (auth_tests.test_views.LogoutTest)\", \"test_success_url_allowed_hosts_unsafe_host (auth_tests.test_views.LogoutTest)\", \"test_action_flag_choices (admin_utils.test_logentry.LogEntryTests)\", \"test_log_action (admin_utils.test_logentry.LogEntryTests)\", \"LogEntry.change_message was a string before Django 1.10.\", \"test_logentry_get_admin_url (admin_utils.test_logentry.LogEntryTests)\", \"test_logentry_get_edited_object (admin_utils.test_logentry.LogEntryTests)\", \"test_logentry_repr (admin_utils.test_logentry.LogEntryTests)\", \"test_logentry_save (admin_utils.test_logentry.LogEntryTests)\", \"test_logentry_unicode (admin_utils.test_logentry.LogEntryTests)\", \"test_proxy_model_content_type_is_used_for_log_entries (admin_utils.test_logentry.LogEntryTests)\", \"test_recentactions_without_content_type (admin_utils.test_logentry.LogEntryTests)\", \"test_admin_password_change (auth_tests.test_views.UUIDUserTests)\", \"Admin index views don't break when user's ModelAdmin removes standard urls\", \"test_lang_name_present (admin_views.tests.ValidXHTMLTests)\", \"test_explicitly_provided_pk (admin_views.tests.GetFormsetsWithInlinesArgumentTest)\", \"test_implicitly_generated_pk (admin_views.tests.GetFormsetsWithInlinesArgumentTest)\", \"test_custom_changelist (admin_views.tests.TestCustomChangeList)\", \"test_changelist_disallows_password_lookups (auth_tests.test_views.ChangelistTests)\", \"test_password_change_bad_url (auth_tests.test_views.ChangelistTests)\", \"test_user_change_different_user_password (auth_tests.test_views.ChangelistTests)\", \"test_user_change_password (auth_tests.test_views.ChangelistTests)\", \"test_user_change_password_passes_user_to_has_change_permission (auth_tests.test_views.ChangelistTests)\", \"test_user_not_change (auth_tests.test_views.ChangelistTests)\", \"test_view_user_password_is_readonly (auth_tests.test_views.ChangelistTests)\", \"test_GET_parent_add (admin_views.tests.TestInlineNotEditable)\", \"test_change_form_URL_has_correct_value (admin_views.tests.AdminViewFormUrlTest)\", \"test_initial_data_can_be_overridden (admin_views.tests.AdminViewFormUrlTest)\", \"test_should_be_able_to_edit_related_objects_on_add_view (admin_views.tests.AdminCustomSaveRelatedTests)\", \"test_should_be_able_to_edit_related_objects_on_change_view (admin_views.tests.AdminCustomSaveRelatedTests)\", \"test_should_be_able_to_edit_related_objects_on_changelist_view (admin_views.tests.AdminCustomSaveRelatedTests)\", \"test_custom_admin_site_app_index_view_and_template (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_index_view_and_template (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_login_form (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_login_template (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_logout_template (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_password_change_done_template (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_password_change_template (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_password_change_with_extra_context (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_view (admin_views.tests.CustomModelAdminTest)\", \"test_pwd_change_custom_template (admin_views.tests.CustomModelAdminTest)\", \"test_save_as_continue_false (admin_views.tests.SaveAsTests)\", \"'save as' creates a new person\", \"test_save_as_new_with_inlines_with_validation_errors (admin_views.tests.SaveAsTests)\", \"test_save_as_new_with_validation_errors (admin_views.tests.SaveAsTests)\", \"test_save_as_new_with_validation_errors_with_inlines (admin_views.tests.SaveAsTests)\", \"Object history button link should work and contain the pk value quoted.\", \"Link to the changeform of the object in changelist should use reverse() and be quoted -- #18072\", \"The link from the delete confirmation page referring back to the changeform of the object should be quoted\", \"Retrieving the object using urlencoded form of primary key should work\", \"test_get_history_view (admin_views.tests.AdminViewStringPrimaryKeyTest)\", \"The link from the recent actions list referring to the changeform of the object should be quoted\", \"As soon as an object is added using \\\"Save and continue editing\\\"\", \"'View on site should' work properly with char fields\", \"A model with a primary key that ends with add or is `add` should be visible\", \"A model with a primary key that ends with delete should be visible\", \"A model with a primary key that ends with history should be visible\", \"test_add_view_form_and_formsets_run_validation (admin_views.tests.AdminViewOnSiteTests)\", \"The right link is displayed if view_on_site is a callable\", \"test_change_view_form_and_formsets_run_validation (admin_views.tests.AdminViewOnSiteTests)\", \"The view_on_site value is either a boolean or a callable\", \"The 'View on site' button is not displayed if view_on_site is False\", \"None is returned if model doesn't have get_absolute_url\", \"The default behavior is followed if view_on_site is True\", \"test_form_has_multipart_enctype (admin_views.tests.AdminInlineFileUploadTest)\", \"test_inline_file_upload_edit_validation_error_post (admin_views.tests.AdminInlineFileUploadTest)\", \"test_unicode_delete (admin_views.tests.AdminViewUnicodeTest)\", \"test_unicode_edit (admin_views.tests.AdminViewUnicodeTest)\", \"test_all_fields_hidden (admin_views.tests.TestLabelVisibility)\", \"test_all_fields_visible (admin_views.tests.TestLabelVisibility)\", \"test_mixin (admin_views.tests.TestLabelVisibility)\", \"test_secure_view_shows_login_if_not_logged_in (admin_views.tests.SecureViewTests)\", \"test_staff_member_required_decorator_works_with_argument (admin_views.tests.SecureViewTests)\", \"test_client_logout_url_can_be_used_to_login (admin_views.tests.AdminViewLogoutTests)\", \"test_logout (admin_views.tests.AdminViewLogoutTests)\", \"test_generic_content_object_in_list_display (admin_views.tests.TestGenericRelations)\", \"test_cyclic (admin_views.tests.AdminViewDeletedObjectsTest)\", \"The delete view uses ModelAdmin.get_deleted_objects().\", \"test_generic_relations (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_generic_relations_with_related_query_name (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_inheritance (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_multiple_fkeys_to_same_instance (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_multiple_fkeys_to_same_model (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_nesting (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_not_registered (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_perms_needed (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_post_delete_protected (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_protected (admin_views.tests.AdminViewDeletedObjectsTest)\", \"Test for ticket 2445 changes to admin.\", \"test_change_password_template (admin_views.tests.AdminCustomTemplateTests)\", \"test_custom_model_admin_templates (admin_views.tests.AdminCustomTemplateTests)\", \"test_extended_bodyclass_change_list (admin_views.tests.AdminCustomTemplateTests)\", \"test_extended_bodyclass_template_change_form (admin_views.tests.AdminCustomTemplateTests)\", \"test_extended_bodyclass_template_delete_confirmation (admin_views.tests.AdminCustomTemplateTests)\", \"test_extended_bodyclass_template_delete_selected_confirmation (admin_views.tests.AdminCustomTemplateTests)\", \"test_extended_bodyclass_template_index (admin_views.tests.AdminCustomTemplateTests)\", \"test_extended_bodyclass_template_login (admin_views.tests.AdminCustomTemplateTests)\", \"test_filter_with_custom_template (admin_views.tests.AdminCustomTemplateTests)\", \"test_beginning_matches (admin_views.tests.AdminSearchTest)\", \"test_exact_matches (admin_views.tests.AdminSearchTest)\", \"test_no_total_count (admin_views.tests.AdminSearchTest)\", \"test_pluggable_search (admin_views.tests.AdminSearchTest)\", \"test_reset_link (admin_views.tests.AdminSearchTest)\", \"A search that mentions sibling models\", \"test_with_fk_to_field (admin_views.tests.AdminSearchTest)\", \"test_js_minified_only_if_debug_is_false (admin_views.tests.AdminJavaScriptTest)\", \"The 'View on site' button is displayed if view_on_site is True\", \"test_add (admin_views.tests.AdminViewProxyModelPermissionsTests)\", \"test_change (admin_views.tests.AdminViewProxyModelPermissionsTests)\", \"test_delete (admin_views.tests.AdminViewProxyModelPermissionsTests)\", \"test_view (admin_views.tests.AdminViewProxyModelPermissionsTests)\", \"test_message_debug (admin_views.tests.AdminUserMessageTest)\", \"test_message_error (admin_views.tests.AdminUserMessageTest)\", \"test_message_extra_tags (admin_views.tests.AdminUserMessageTest)\", \"test_message_info (admin_views.tests.AdminUserMessageTest)\", \"test_message_success (admin_views.tests.AdminUserMessageTest)\", \"test_message_warning (admin_views.tests.AdminUserMessageTest)\", \"test_group_permission_performance (admin_views.tests.GroupAdminTest)\", \"test_save_button (admin_views.tests.GroupAdminTest)\", \"Check the never-cache status of the JavaScript i18n view\", \"Check the never-cache status of the main index\", \"Check the never-cache status of an application index\", \"Check the never-cache status of login views\", \"Check the never-cache status of logout view\", \"Check the never-cache status of a model add page\", \"Check the never-cache status of a model delete page\", \"Check the never-cache status of a model history page\", \"Check the never-cache status of a model index\", \"Check the never-cache status of a model edit page\", \"Check the never-cache status of the password change view\", \"Check the never-cache status of the password change done view\", \"test_prepopulated_maxlength_localized (admin_views.tests.PrePopulatedTest)\", \"test_prepopulated_off (admin_views.tests.PrePopulatedTest)\", \"test_prepopulated_on (admin_views.tests.PrePopulatedTest)\", \"test_view_only_add_form (admin_views.tests.PrePopulatedTest)\", \"test_view_only_change_form (admin_views.tests.PrePopulatedTest)\", \"test_inline (admin_views.tests.AdminInheritedInlinesTest)\", \"test_add_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)\", \"test_assert_url_equal (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)\", \"test_change_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)\", \"test_changelist_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)\", \"test_delete_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)\", \"test_url_prefix (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)\", \"Regression test for 14880\", \"Regression test for 20182\", \"test_list_display_method_same_name_as_reverse_accessor (admin_views.tests.RawIdFieldsTest)\", \"test_app_model_in_app_index_body_class (admin_views.tests.CSSTest)\", \"test_app_model_in_delete_confirmation_body_class (admin_views.tests.CSSTest)\", \"test_app_model_in_delete_selected_confirmation_body_class (admin_views.tests.CSSTest)\", \"test_app_model_in_form_body_class (admin_views.tests.CSSTest)\", \"test_app_model_in_list_body_class (admin_views.tests.CSSTest)\", \"test_changelist_field_classes (admin_views.tests.CSSTest)\", \"test_field_prefix_css_classes (admin_views.tests.CSSTest)\", \"test_index_css_classes (admin_views.tests.CSSTest)\", \"test_empty (admin_views.tests.DateHierarchyTests)\", \"test_multiple_years (admin_views.tests.DateHierarchyTests)\", \"test_related_field (admin_views.tests.DateHierarchyTests)\", \"test_single (admin_views.tests.DateHierarchyTests)\", \"test_within_month (admin_views.tests.DateHierarchyTests)\", \"test_within_year (admin_views.tests.DateHierarchyTests)\", \"test_change_form_renders_correct_null_choice_value (admin_views.tests.ReadonlyTest)\", \"test_correct_autoescaping (admin_views.tests.ReadonlyTest)\", \"test_label_suffix_translated (admin_views.tests.ReadonlyTest)\", \"test_readonly_field_overrides (admin_views.tests.ReadonlyTest)\", \"test_readonly_get (admin_views.tests.ReadonlyTest)\", \"Regression test for #13004\", \"test_readonly_manytomany_backwards_ref (admin_views.tests.ReadonlyTest)\", \"test_readonly_manytomany_forwards_ref (admin_views.tests.ReadonlyTest)\", \"test_readonly_onetoone_backwards_ref (admin_views.tests.ReadonlyTest)\", \"test_readonly_post (admin_views.tests.ReadonlyTest)\", \"test_readonly_text_field (admin_views.tests.ReadonlyTest)\", \"test_user_password_change_limited_queryset (admin_views.tests.ReadonlyTest)\", \"test_changelist_input_html (admin_views.tests.AdminViewListEditable)\", \"test_custom_pk (admin_views.tests.AdminViewListEditable)\", \"test_inheritance (admin_views.tests.AdminViewListEditable)\", \"test_inheritance_2 (admin_views.tests.AdminViewListEditable)\", \"test_list_editable_action_choices (admin_views.tests.AdminViewListEditable)\", \"test_list_editable_action_submit (admin_views.tests.AdminViewListEditable)\", \"test_list_editable_ordering (admin_views.tests.AdminViewListEditable)\", \"test_list_editable_pagination (admin_views.tests.AdminViewListEditable)\", \"test_list_editable_popup (admin_views.tests.AdminViewListEditable)\", \"test_non_field_errors (admin_views.tests.AdminViewListEditable)\", \"test_non_form_errors (admin_views.tests.AdminViewListEditable)\", \"test_non_form_errors_is_errorlist (admin_views.tests.AdminViewListEditable)\", \"test_pk_hidden_fields (admin_views.tests.AdminViewListEditable)\", \"Similarly as test_pk_hidden_fields, but when the hidden pk fields are\", \"test_post_messages (admin_views.tests.AdminViewListEditable)\", \"test_post_submission (admin_views.tests.AdminViewListEditable)\", \"test_add_model_modeladmin_defer_qs (admin_views.tests.AdminCustomQuerysetTest)\", \"test_add_model_modeladmin_only_qs (admin_views.tests.AdminCustomQuerysetTest)\", \"test_change_view (admin_views.tests.AdminCustomQuerysetTest)\", \"test_changelist_view (admin_views.tests.AdminCustomQuerysetTest)\", \"test_changelist_view_count_queries (admin_views.tests.AdminCustomQuerysetTest)\", \"test_edit_model_modeladmin_defer_qs (admin_views.tests.AdminCustomQuerysetTest)\", \"test_edit_model_modeladmin_only_qs (admin_views.tests.AdminCustomQuerysetTest)\", \"test_history_view_custom_qs (admin_views.tests.AdminCustomQuerysetTest)\", \"test_filters (admin_views.tests.AdminDocsTest)\", \"test_tags (admin_views.tests.AdminDocsTest)\", \"test_add_view (admin_views.tests.AdminKeepChangeListFiltersTests)\", \"test_assert_url_equal (admin_views.tests.AdminKeepChangeListFiltersTests)\", \"test_change_view (admin_views.tests.AdminKeepChangeListFiltersTests)\", \"test_changelist_view (admin_views.tests.AdminKeepChangeListFiltersTests)\", \"test_delete_view (admin_views.tests.AdminKeepChangeListFiltersTests)\", \"test_url_prefix (admin_views.tests.AdminKeepChangeListFiltersTests)\", \"test_form_url_present_in_context (admin_views.tests.UserAdminTest)\", \"test_password_mismatch (admin_views.tests.UserAdminTest)\", \"test_save_add_another_button (admin_views.tests.UserAdminTest)\", \"test_save_button (admin_views.tests.UserAdminTest)\", \"test_save_continue_editing_button (admin_views.tests.UserAdminTest)\", \"User addition through a FK popup should return the appropriate JavaScript response.\", \"User change through a FK popup should return the appropriate JavaScript response.\", \"User deletion through a FK popup should return the appropriate JavaScript response.\", \"test_user_permission_performance (admin_views.tests.UserAdminTest)\", \"A model with a character PK can be saved as inlines. Regression for #10992\", \"A model with an explicit autofield primary key can be saved as inlines. Regression for #8093\", \"An inherited model can be saved as inlines. Regression for #11042\", \"A model with an integer PK can be saved as inlines. Regression for #10992\", \"test_ordered_inline (admin_views.tests.AdminInlineTests)\", \"A simple model can be saved as inlines\", \"test_simple_inline_permissions (admin_views.tests.AdminInlineTests)\", \"test_L10N_deactivated (admin_views.tests.AdminViewBasicTest)\", \"test_add_with_GET_args (admin_views.tests.AdminViewBasicTest)\", \"test_adminsite_display_site_url (admin_views.tests.AdminViewBasicTest)\", \"test_allowed_filtering_15103 (admin_views.tests.AdminViewBasicTest)\", \"test_allows_attributeerror_to_bubble_up (admin_views.tests.AdminViewBasicTest)\", \"test_basic_add_GET (admin_views.tests.AdminViewBasicTest)\", \"test_basic_add_POST (admin_views.tests.AdminViewBasicTest)\", \"test_basic_edit_GET (admin_views.tests.AdminViewBasicTest)\", \"test_basic_edit_GET_old_url_redirect (admin_views.tests.AdminViewBasicTest)\", \"test_basic_edit_GET_string_PK (admin_views.tests.AdminViewBasicTest)\", \"test_basic_edit_POST (admin_views.tests.AdminViewBasicTest)\", \"test_basic_inheritance_GET_string_PK (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_column_field_classes (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_null_boolean_display (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_callable (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_callable_query_expression (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_callable_query_expression_reverse (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_model (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_model_admin (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_model_admin_reverse (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_model_meta (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_multiple (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_override_model_admin (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_preserve_queryset_ordering (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_property (admin_views.tests.AdminViewBasicTest)\", \"test_change_view_with_show_delete_extra_context (admin_views.tests.AdminViewBasicTest)\", \"test_changelist_with_no_change_url (admin_views.tests.AdminViewBasicTest)\", \"test_date_hierarchy_timezone_dst (admin_views.tests.AdminViewBasicTest)\", \"test_disallowed_filtering (admin_views.tests.AdminViewBasicTest)\", \"test_disallowed_to_field (admin_views.tests.AdminViewBasicTest)\", \"test_edit_save_as (admin_views.tests.AdminViewBasicTest)\", \"test_edit_save_as_delete_inline (admin_views.tests.AdminViewBasicTest)\", \"test_get_sortable_by_columns_subset (admin_views.tests.AdminViewBasicTest)\", \"test_get_sortable_by_no_column (admin_views.tests.AdminViewBasicTest)\", \"Joins shouldn't be performed for <FK>_id fields in list display.\", \"Joins shouldn't be performed for <O2O>_id fields in list display.\", \"test_hide_change_password (admin_views.tests.AdminViewBasicTest)\", \"test_i18n_language_non_english_default (admin_views.tests.AdminViewBasicTest)\", \"test_i18n_language_non_english_fallback (admin_views.tests.AdminViewBasicTest)\", \"Ensure incorrect lookup parameters are handled gracefully.\", \"test_invalid_appindex_url (admin_views.tests.AdminViewBasicTest)\", \"Ensure is_null is handled correctly.\", \"test_jsi18n_with_context (admin_views.tests.AdminViewBasicTest)\", \"Ensure admin changelist filters do not contain objects excluded via limit_choices_to.\", \"test_logout_and_password_change_URLs (admin_views.tests.AdminViewBasicTest)\", \"test_multiple_sort_same_field (admin_views.tests.AdminViewBasicTest)\", \"test_named_group_field_choices_change_list (admin_views.tests.AdminViewBasicTest)\", \"test_named_group_field_choices_filter (admin_views.tests.AdminViewBasicTest)\", \"test_popup_add_POST (admin_views.tests.AdminViewBasicTest)\", \"test_popup_dismiss_related (admin_views.tests.AdminViewBasicTest)\", \"test_relation_spanning_filters (admin_views.tests.AdminViewBasicTest)\", \"test_resolve_admin_views (admin_views.tests.AdminViewBasicTest)\", \"test_sort_indicators_admin_order (admin_views.tests.AdminViewBasicTest)\", \"test_sortable_by_columns_subset (admin_views.tests.AdminViewBasicTest)\", \"test_sortable_by_no_column (admin_views.tests.AdminViewBasicTest)\", \"test_trailing_slash_required (admin_views.tests.AdminViewBasicTest)\", \"Test add view restricts access and actually adds items.\", \"User with add permission to a section but view-only for inlines.\", \"test_app_list_permissions (admin_views.tests.AdminViewPermissionsTest)\", \"Change view should restrict access and allow users to edit items.\", \"A POST redirects to changelist without modifications.\", \"test_change_view_save_as_new (admin_views.tests.AdminViewPermissionsTest)\", \"User has view and add permissions on the inline model.\", \"User has view and delete permissions on the inline model.\", \"test_change_view_with_view_only_inlines (admin_views.tests.AdminViewPermissionsTest)\", \"test_change_view_without_object_change_permission (admin_views.tests.AdminViewPermissionsTest)\", \"test_conditionally_show_add_section_link (admin_views.tests.AdminViewPermissionsTest)\", \"test_conditionally_show_change_section_link (admin_views.tests.AdminViewPermissionsTest)\", \"test_conditionally_show_delete_section_link (admin_views.tests.AdminViewPermissionsTest)\", \"Delete view should restrict access and actually delete items.\", \"test_delete_view_nonexistent_obj (admin_views.tests.AdminViewPermissionsTest)\", \"test_delete_view_with_no_default_permissions (admin_views.tests.AdminViewPermissionsTest)\", \"test_disabled_permissions_when_logged_in (admin_views.tests.AdminViewPermissionsTest)\", \"test_disabled_staff_permissions_when_logged_in (admin_views.tests.AdminViewPermissionsTest)\", \"Regression test for #19327\", \"test_has_module_permission (admin_views.tests.AdminViewPermissionsTest)\", \"History view should restrict access.\", \"test_history_view_bad_url (admin_views.tests.AdminViewPermissionsTest)\", \"test_login (admin_views.tests.AdminViewPermissionsTest)\", \"test_login_has_permission (admin_views.tests.AdminViewPermissionsTest)\", \"test_login_page_notice_for_non_staff_users (admin_views.tests.AdminViewPermissionsTest)\", \"test_login_redirect_for_direct_get (admin_views.tests.AdminViewPermissionsTest)\", \"test_login_successfully_redirects_to_original_URL (admin_views.tests.AdminViewPermissionsTest)\", \"test_overriding_has_module_permission (admin_views.tests.AdminViewPermissionsTest)\", \"test_post_save_message_no_forbidden_links_visible (admin_views.tests.AdminViewPermissionsTest)\", \"test_shortcut_view_only_available_to_staff (admin_views.tests.AdminViewPermissionsTest)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.551257",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}