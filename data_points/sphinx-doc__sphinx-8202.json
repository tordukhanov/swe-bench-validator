{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8202",
  "base_commit": "3c017dcdee6b9f4b7f5e46b3b0ba2cebced4d4dc",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -535,6 +535,11 @@ def process_doc(self, docstrings: List[List[str]]) -> Iterator[str]:\n                 self.env.app.emit('autodoc-process-docstring',\n                                   self.objtype, self.fullname, self.object,\n                                   self.options, docstringlines)\n+\n+                if docstringlines and docstringlines[-1] != '':\n+                    # append a blank line to the end of the docstring\n+                    docstringlines.append('')\n+\n             yield from docstringlines\n \n     def get_sourcename(self) -> str:\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_events.py b/tests/test_ext_autodoc_events.py\n--- a/tests/test_ext_autodoc_events.py\n+++ b/tests/test_ext_autodoc_events.py\n@@ -28,7 +28,8 @@ def on_process_docstring(app, what, name, obj, options, lines):\n         '.. py:function:: func()',\n         '   :module: target.process_docstring',\n         '',\n-        '   my docstring'\n+        '   my docstring',\n+        '',\n     ]\n \n \n",
  "problem_statement": "Problems with doc comments using Generic class and extending it\n**Describe the bug**\r\n\r\nThis is a very specific bug (I think), when we have a `Generic` class with doc comment for an attribute and I extend it. If the child class has the `__init__` method (using typed parameters) and I try to reassign the attribute from `Generic` class I got the following error:\r\n```text\r\nWARNING: :1: (WARNING/2) Field list ends without a blank line; unexpected unindent.\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\n$ git clone git@github.com:dry-python/returns.git\r\n$ cd returns\r\n$ poetry install\r\n$ cd docs\r\n$ poetry run make html\r\n```\r\n\r\nCode example:\r\n\r\n* Python script\r\n```python\r\nfrom typing import (\r\n    ClassVar,\r\n    Type,\r\n    TypeVar,\r\n    Generic,\r\n)\r\n\r\n_ValueType = TypeVar('_ValueType')\r\n\r\n\r\nclass MyGeneric(Generic[_ValueType]):\r\n    #: Doc comment example.\r\n    some_type: ClassVar[Type['MyGenericChild']]\r\n\r\n\r\nclass MyGenericChild(MyGeneric[_ValueType]):\r\n    def __init__(self, inner_value: _ValueType) -> None:\r\n        pass\r\n\r\n\r\nMyGeneric.some_type = MyGenericChild\r\n```\r\n\r\n* rst\r\n```rst\r\n.. test:\r\n\r\nTest\r\n====\r\n\r\n.. automodule:: lib.test\r\n   :members:\r\n```\r\n\r\nIf you try to modify something in the script maybe the error will not appear, it's a very specific corner case!\r\n\r\n**Expected behavior**\r\n\r\nThe warning should not appear!\r\n\r\n**Your project**\r\n\r\n[returns](https://github.com/dry-python/returns)\r\n\r\n**Environment info**\r\n- OS: Linux 5.7.9-1-MANJARO\r\n- Python version: 3.8.3\r\n- Sphinx version: 3.1.1\r\n- Sphinx extensions: \r\n```text\r\nsphinx.ext.autodoc\r\nsphinx.ext.doctest\r\nsphinx.ext.todo\r\nsphinx.ext.coverage\r\nsphinx.ext.viewcode\r\nsphinx.ext.autosummary\r\nsphinx.ext.napoleon\r\nm2r\r\nsphinx_autodoc_typehints\r\nsphinxcontrib.mermaid\r\nhoverxref.extension\r\n```\r\n\r\n---\r\n\r\nrelated issue https://github.com/dry-python/returns/issues/568\n",
  "hints_text": "I passed `-vv` option to the Makefile and confirm what happened in the build. As a result, the following reST code is generated during the build:\r\n```\r\n.. py:attribute:: ReaderFutureResult\r\n   :module: returns.context.requires_context_future_result\r\n\r\n   Sometimes `RequiresContextFutureResult` is too long to type.\r\n\r\n   :param inner_value:\r\n   :type inner_value: :py:data:`~typing.Callable`\\[\\[\\-_EnvType], :py:class:`~returns.future.FutureResult`\\[\\+_ValueType, \\+_ErrorType]]\r\n   alias of :class:`returns.context.requires_context_future_result.RequiresContextFutureResult`\r\n```\r\n\r\nSurely, additional blank line is needed just after the field list. I guess this field list is generated by sphinx_autodoc_typehints extension. Actually, no warnings are shown when I disabled it. I think this is not a bug of Sphinx itself.\nThanks for your answer!! I'll open an issue on `sphinx_autodoc_typehints`, seems the bug is there.\nAfter read `sphinx_autodoc_typehints` code I think the problem is here with `autodoc`! All of the problems is because that last line contains:\r\n```text\r\nalias of :class:`returns.context.requires_context_future_result.RequiresContextFutureResult`\r\n```\r\n\r\nSo, that line isn't generated by _sphinx_autodoc_typehints_. `autodoc` is inserting that line without any validation.\nWe can verify if the last line contains something before inserting a new one!\nautodoc expects the extensions to return docstring ends with a blank line (silently). But I noticed it can be adjusted from our side. And I think no silent rule is needed for this case. Okay, I'll fix this on next release.",
  "created_at": "2020-09-12T09:37:31Z",
  "version": "3.3",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_events.py::test_process_docstring\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_events.py::test_cut_lines\", \"tests/test_ext_autodoc_events.py::test_between\", \"tests/test_ext_autodoc_events.py::test_between_exclude\"]",
  "environment_setup_commit": "3b85187ffa3401e88582073c23188c147857a8a3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.052251",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}