{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15685",
  "base_commit": "9ac430347eb80809a1dd89bbf5dad7ca593bbe63",
  "patch": "diff --git a/sympy/physics/units/definitions.py b/sympy/physics/units/definitions.py\n--- a/sympy/physics/units/definitions.py\n+++ b/sympy/physics/units/definitions.py\n@@ -50,22 +50,13 @@\n meter.set_dimension(length)\n meter.set_scale_factor(One)\n \n-# gram; used to define its prefixed units\n-g = gram = grams = Quantity(\"gram\", abbrev=\"g\")\n-gram.set_dimension(mass)\n-gram.set_scale_factor(One)\n-\n-# NOTE: the `kilogram` has scale factor 1000. In SI, kg is a base unit, but\n-# nonetheless we are trying to be compatible with the `kilo` prefix. In a\n-# similar manner, people using CGS or gaussian units could argue that the\n-# `centimeter` rather than `meter` is the fundamental unit for length, but the\n-# scale factor of `centimeter` will be kept as 1/100 to be compatible with the\n-# `centi` prefix.  The current state of the code assumes SI unit dimensions, in\n+# NOTE: the `kilogram` has scale factor of 1 in SI.\n+# The current state of the code assumes SI unit dimensions, in\n # the future this module will be modified in order to be unit system-neutral\n # (that is, support all kinds of unit systems).\n kg = kilogram = kilograms = Quantity(\"kilogram\", abbrev=\"kg\")\n kilogram.set_dimension(mass)\n-kilogram.set_scale_factor(kilo*gram)\n+kilogram.set_scale_factor(One)\n \n s = second = seconds = Quantity(\"second\", abbrev=\"s\")\n second.set_dimension(time)\n@@ -87,6 +78,9 @@\n candela.set_dimension(luminous_intensity)\n candela.set_scale_factor(One)\n \n+g = gram = grams = Quantity(\"gram\", abbrev=\"g\")\n+gram.set_dimension(mass)\n+gram.set_scale_factor(kilogram/kilo)\n \n mg = milligram = milligrams = Quantity(\"milligram\", abbrev=\"mg\")\n milligram.set_dimension(mass)\n",
  "test_patch": "diff --git a/sympy/physics/units/tests/test_unitsystem.py b/sympy/physics/units/tests/test_unitsystem.py\n--- a/sympy/physics/units/tests/test_unitsystem.py\n+++ b/sympy/physics/units/tests/test_unitsystem.py\n@@ -53,7 +53,7 @@ def test_print_unit_base():\n \n     mksa = UnitSystem((m, kg, s, A), (Js,))\n     with warns_deprecated_sympy():\n-        assert mksa.print_unit_base(Js) == m**2*kg*s**-1/1000\n+        assert mksa.print_unit_base(Js) == m**2*kg*s**-1\n \n \n def test_extend():\n",
  "problem_statement": "Make .scale_factor private in the units module\n* sympy version: 1.3\r\n* Python version: 3.6.6\r\n* Operating System: Win10\r\n\r\n### Description\r\n\r\nDividing a Quantity with dimension voltage by a Quantity with dimension current yields ohm/1000 when I expected ohm. In the SI system, 1 V/ 1 A = 1 Î©.\r\n\r\n### What I Did\r\n\r\n```\r\n>>> from sympy.physics.units import Quantity, voltage, current, ohm, convert_to\r\n>>> vs = Quantity('vs')\r\n>>> vs.set_dimension(voltage)\r\n>>> vs_i = Quantity('vs_i')\r\n>>> vs_i.set_dimension(current)\r\n>>> convert_to(vs/vs_i, ohm)\r\nohm/1000\r\n```\r\n\r\n### Further discussion\r\nThe problem is related to the kilogram workaround and the property `scale_factor`. The default scale_factor for a Quantity is 1.\r\n```\r\n>>> vs.scale_factor\r\n1.0\r\n```\r\n\r\nThe docstring for `scale_factor' states:\r\n\r\n> Overall magnitude of the quantity as compared to the canonical units.\r\n\r\nBut, the scale factor for ohm is 1000.\r\n```\r\n>>> ohm.scale_factor\r\n1000\r\n\r\nThis value of 1000 conflicts with the definition. `scale_factor` is a user facing property and should be consistent with the unit system definition, in this case the SI. The kilogram workaround should be an internal implementation factor and not exposed to the user.\n",
  "hints_text": "@asmeurer I want to work on this issue, can you please help? I am understanding the issue but not sure how to fix it.\nI would like to work on this issue.\nYou are not setting the scale factors of the quantities you define.",
  "created_at": "2018-12-23T07:13:37Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_print_unit_base\"]",
  "PASS_TO_PASS": "[\"test_definition\", \"test_error_definition\", \"test_str_repr\", \"test_extend\", \"test_dim\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.103673",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}