{
  "repo": "django/django",
  "instance_id": "django__django-11559",
  "base_commit": "8c5f9906c56ac72fc4f13218dd90bdf9bc8a248b",
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -722,6 +722,8 @@ def find_ordering_name(self, name, opts, alias=None, default_order='ASC',\n \n             results = []\n             for item in opts.ordering:\n+                if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n+                    item = item.desc() if descending else item.asc()\n                 if isinstance(item, OrderBy):\n                     results.append((item, False))\n                     continue\n",
  "test_patch": "diff --git a/tests/ordering/models.py b/tests/ordering/models.py\n--- a/tests/ordering/models.py\n+++ b/tests/ordering/models.py\n@@ -33,7 +33,7 @@ class Article(models.Model):\n     class Meta:\n         ordering = (\n             '-pub_date',\n-            'headline',\n+            models.F('headline'),\n             models.F('author__name').asc(),\n             OrderBy(models.F('second_author__name')),\n         )\ndiff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -485,7 +485,7 @@ def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n     def test_deprecated_values_annotate(self):\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n-            \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n+            \".order_by('-pub_date', F(headline), OrderBy(F(author__name), \"\n             \"descending=False), OrderBy(F(second_author__name), \"\n             \"descending=False)) to retain the current query.\"\n         )\n",
  "problem_statement": "order_by() a parent model crash when Meta.ordering contains expressions.\nDescription\n\t \n\t\t(last modified by Jonny Fuller)\n\t \nHi friends,\nDuring testing I discovered a strange bug when using a query expression for ordering during multi-table inheritance. You can find the full write up as well as reproducible test repository ​https://github.com/JonnyWaffles/djangoordermetabug. The bug occurs because the field is an OrderBy object, not a string, during get_order_dir. The linked stacktrace should make the issue obvious, but what I don't understand is why it only fails during test db setup, not during repl or script use. I wish I could help more and come up with a real solution. Hopefully, this is enough for someone wiser to find the culprit.\n",
  "hints_text": "Thanks for the report. I attached a regression test. Reproduced at c498f088c584ec3aff97409fdc11b39b28240de9.\nRegression test.\nI *think* I'm getting a similar (or same) error when adding lowercased ordering to a model via meta: class Recipe(models.Model): # ... class Meta: ordering = (Lower('name'),) This works fine in normal views (listing out recipes for instance), but in the admin, I get the following error: 'Lower' object is not subscriptable which also comes via get_order_dir()\nYes that's the same issue, thanks for another scenario to reproduce it.\n​https://github.com/django/django/pull/11489\n​PR\nIn 8c5f9906: Fixed #30557 -- Fixed crash of ordering by ptr fields when Meta.ordering contains expressions.",
  "created_at": "2019-07-11T11:18:03Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_order_by_ptr_field_with_default_ordering_by_expression (ordering.tests.OrderingTests)\"]",
  "PASS_TO_PASS": "[\"test_default_ordering (ordering.tests.OrderingTests)\", \"F expressions can be used in Meta.ordering.\", \"test_default_ordering_override (ordering.tests.OrderingTests)\", \"test_deprecated_values_annotate (ordering.tests.OrderingTests)\", \"test_extra_ordering (ordering.tests.OrderingTests)\", \"test_extra_ordering_quoting (ordering.tests.OrderingTests)\", \"test_extra_ordering_with_table_name (ordering.tests.OrderingTests)\", \"test_no_reordering_after_slicing (ordering.tests.OrderingTests)\", \"test_order_by_constant_value (ordering.tests.OrderingTests)\", \"test_order_by_constant_value_without_output_field (ordering.tests.OrderingTests)\", \"test_order_by_f_expression (ordering.tests.OrderingTests)\", \"test_order_by_f_expression_duplicates (ordering.tests.OrderingTests)\", \"test_order_by_fk_attname (ordering.tests.OrderingTests)\", \"test_order_by_nulls_first (ordering.tests.OrderingTests)\", \"test_order_by_nulls_first_and_last (ordering.tests.OrderingTests)\", \"test_order_by_nulls_last (ordering.tests.OrderingTests)\", \"test_order_by_override (ordering.tests.OrderingTests)\", \"test_order_by_pk (ordering.tests.OrderingTests)\", \"test_orders_nulls_first_on_filtered_subquery (ordering.tests.OrderingTests)\", \"test_random_ordering (ordering.tests.OrderingTests)\", \"test_related_ordering_duplicate_table_reference (ordering.tests.OrderingTests)\", \"test_reverse_meta_ordering_pure (ordering.tests.OrderingTests)\", \"test_reverse_ordering_pure (ordering.tests.OrderingTests)\", \"test_reversed_ordering (ordering.tests.OrderingTests)\", \"test_stop_slicing (ordering.tests.OrderingTests)\", \"test_stop_start_slicing (ordering.tests.OrderingTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.576798",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}