{
  "repo": "mwaskom/seaborn",
  "instance_id": "mwaskom__seaborn-2576",
  "base_commit": "430c1bf1fcc690f0431e6fc87b481b7b43776594",
  "patch": "diff --git a/seaborn/regression.py b/seaborn/regression.py\n--- a/seaborn/regression.py\n+++ b/seaborn/regression.py\n@@ -419,7 +419,8 @@ def lineplot(self, ax, kws):\n \n         # Draw the regression line and confidence interval\n         line, = ax.plot(grid, yhat, **kws)\n-        line.sticky_edges.x[:] = edges  # Prevent mpl from adding margin\n+        if not self.truncate:\n+            line.sticky_edges.x[:] = edges  # Prevent mpl from adding margin\n         if err_bands is not None:\n             ax.fill_between(grid, *err_bands, facecolor=fill_color, alpha=.15)\n \n@@ -562,13 +563,13 @@ def lmplot(\n     data=None,\n     hue=None, col=None, row=None,  # TODO move before data once * is enforced\n     palette=None, col_wrap=None, height=5, aspect=1, markers=\"o\",\n-    sharex=True, sharey=True, hue_order=None, col_order=None, row_order=None,\n-    legend=True, legend_out=True, x_estimator=None, x_bins=None,\n+    sharex=None, sharey=None, hue_order=None, col_order=None, row_order=None,\n+    legend=True, legend_out=None, x_estimator=None, x_bins=None,\n     x_ci=\"ci\", scatter=True, fit_reg=True, ci=95, n_boot=1000,\n     units=None, seed=None, order=1, logistic=False, lowess=False,\n     robust=False, logx=False, x_partial=None, y_partial=None,\n     truncate=True, x_jitter=None, y_jitter=None, scatter_kws=None,\n-    line_kws=None, size=None\n+    line_kws=None, facet_kws=None, size=None,\n ):\n \n     # Handle deprecations\n@@ -578,6 +579,22 @@ def lmplot(\n                \"please update your code.\")\n         warnings.warn(msg, UserWarning)\n \n+    if facet_kws is None:\n+        facet_kws = {}\n+\n+    def facet_kw_deprecation(key, val):\n+        msg = (\n+            f\"{key} is deprecated from the `lmplot` function signature. \"\n+            \"Please update your code to pass it using `facet_kws`.\"\n+        )\n+        if val is not None:\n+            warnings.warn(msg, UserWarning)\n+            facet_kws[key] = val\n+\n+    facet_kw_deprecation(\"sharex\", sharex)\n+    facet_kw_deprecation(\"sharey\", sharey)\n+    facet_kw_deprecation(\"legend_out\", legend_out)\n+\n     if data is None:\n         raise TypeError(\"Missing required keyword argument `data`.\")\n \n@@ -592,7 +609,7 @@ def lmplot(\n         palette=palette,\n         row_order=row_order, col_order=col_order, hue_order=hue_order,\n         height=height, aspect=aspect, col_wrap=col_wrap,\n-        sharex=sharex, sharey=sharey, legend_out=legend_out\n+        **facet_kws,\n     )\n \n     # Add the markers here as FacetGrid has figured out how many levels of the\n@@ -608,12 +625,12 @@ def lmplot(\n                           \"for each level of the hue variable\"))\n     facets.hue_kws = {\"marker\": markers}\n \n-    # Hack to set the x limits properly, which needs to happen here\n-    # because the extent of the regression estimate is determined\n-    # by the limits of the plot\n-    if sharex:\n-        for ax in facets.axes.flat:\n-            ax.scatter(data[x], np.ones(len(data)) * data[y].mean()).remove()\n+    def update_datalim(data, x, y, ax, **kws):\n+        xys = data[[x, y]].to_numpy().astype(float)\n+        ax.update_datalim(xys, updatey=False)\n+        ax.autoscale_view(scaley=False)\n+\n+    facets.map_dataframe(update_datalim, x=x, y=y)\n \n     # Draw the regression plot on each facet\n     regplot_kws = dict(\n@@ -625,8 +642,6 @@ def lmplot(\n         scatter_kws=scatter_kws, line_kws=line_kws,\n     )\n     facets.map_dataframe(regplot, x=x, y=y, **regplot_kws)\n-\n-    # TODO this will need to change when we relax string requirement\n     facets.set_axis_labels(x, y)\n \n     # Add a legend\n@@ -671,6 +686,10 @@ def lmplot(\n         Markers for the scatterplot. If a list, each marker in the list will be\n         used for each level of the ``hue`` variable.\n     {share_xy}\n+\n+        .. deprecated:: 0.12.0\n+            Pass using the `facet_kws` dictionary.\n+\n     {{hue,col,row}}_order : lists, optional\n         Order for the levels of the faceting variables. By default, this will\n         be the order that the levels appear in ``data`` or, if the variables\n@@ -678,6 +697,10 @@ def lmplot(\n     legend : bool, optional\n         If ``True`` and there is a ``hue`` variable, add a legend.\n     {legend_out}\n+\n+        .. deprecated:: 0.12.0\n+            Pass using the `facet_kws` dictionary.\n+\n     {x_estimator}\n     {x_bins}\n     {x_ci}\n@@ -696,6 +719,8 @@ def lmplot(\n     {truncate}\n     {xy_jitter}\n     {scatter_line_kws}\n+    facet_kws : dict\n+        Dictionary of keyword arguments for :class:`FacetGrid`.\n \n     See Also\n     --------\n",
  "test_patch": "diff --git a/seaborn/tests/test_regression.py b/seaborn/tests/test_regression.py\n--- a/seaborn/tests/test_regression.py\n+++ b/seaborn/tests/test_regression.py\n@@ -1,3 +1,4 @@\n+from distutils.version import LooseVersion\n import numpy as np\n import matplotlib as mpl\n import matplotlib.pyplot as plt\n@@ -596,6 +597,44 @@ def test_lmplot_scatter_kws(self):\n         npt.assert_array_equal(red, red_scatter.get_facecolors()[0, :3])\n         npt.assert_array_equal(blue, blue_scatter.get_facecolors()[0, :3])\n \n+    @pytest.mark.skipif(LooseVersion(mpl.__version__) < \"3.4\",\n+                        reason=\"MPL bug #15967\")\n+    @pytest.mark.parametrize(\"sharex\", [True, False])\n+    def test_lmplot_facet_truncate(self, sharex):\n+\n+        g = lm.lmplot(\n+            data=self.df, x=\"x\", y=\"y\", hue=\"g\", col=\"h\",\n+            truncate=False, facet_kws=dict(sharex=sharex),\n+        )\n+\n+        for ax in g.axes.flat:\n+            for line in ax.lines:\n+                xdata = line.get_xdata()\n+                assert ax.get_xlim() == tuple(xdata[[0, -1]])\n+\n+    def test_lmplot_sharey(self):\n+\n+        df = pd.DataFrame(dict(\n+            x=[0, 1, 2, 0, 1, 2],\n+            y=[1, -1, 0, -100, 200, 0],\n+            z=[\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"],\n+        ))\n+\n+        with pytest.warns(UserWarning):\n+            g = lm.lmplot(data=df, x=\"x\", y=\"y\", col=\"z\", sharey=False)\n+        ax1, ax2 = g.axes.flat\n+        assert ax1.get_ylim()[0] > ax2.get_ylim()[0]\n+        assert ax1.get_ylim()[1] < ax2.get_ylim()[1]\n+\n+    def test_lmplot_facet_kws(self):\n+\n+        xlim = -4, 20\n+        g = lm.lmplot(\n+            data=self.df, x=\"x\", y=\"y\", col=\"h\", facet_kws={\"xlim\": xlim}\n+        )\n+        for ax in g.axes.flat:\n+            assert ax.get_xlim() == xlim\n+\n     def test_residplot(self):\n \n         x, y = self.df.x, self.df.y\n",
  "problem_statement": " lmplot(sharey=False) not working\nThe following code behaves as if `sharey=True`.\r\n(edit: actually, it does not behave the same, but it is still not rescaling the plots individually the way it should)\r\n\r\n```\r\ndf=pd.DataFrame({'x':[1,2,3,1,2,3], 'y':[4,5,2,400,500,200], 't':[1,1,1,2,2,2]}) \r\nsns.lmplot(data=df, x='x', y='y', col='t', sharey=False);\r\n```\r\n\r\nIf you do this, it suddenly works:\r\n```\r\nsns.lmplot(data=df, x='x', y='y', col='t', sharex=False, sharey=False);\r\n```\r\n\r\n\r\nVersions of seaborn and matplotlib:\r\n```\r\nsns.__version__ \r\n'0.11.1'\r\n\r\nmatplotlib.__version__\r\n'3.3.1'\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/35338267/111419598-2525a900-86c0-11eb-9f22-8f0afb2f5007.png)\r\n\r\n\n lmplot(sharey=False) not working\nThe following code behaves as if `sharey=True`.\r\n(edit: actually, it does not behave the same, but it is still not rescaling the plots individually the way it should)\r\n\r\n```\r\ndf=pd.DataFrame({'x':[1,2,3,1,2,3], 'y':[4,5,2,400,500,200], 't':[1,1,1,2,2,2]}) \r\nsns.lmplot(data=df, x='x', y='y', col='t', sharey=False);\r\n```\r\n\r\nIf you do this, it suddenly works:\r\n```\r\nsns.lmplot(data=df, x='x', y='y', col='t', sharex=False, sharey=False);\r\n```\r\n\r\n\r\nVersions of seaborn and matplotlib:\r\n```\r\nsns.__version__ \r\n'0.11.1'\r\n\r\nmatplotlib.__version__\r\n'3.3.1'\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/35338267/111419598-2525a900-86c0-11eb-9f22-8f0afb2f5007.png)\r\n\r\n\nAllow xlim as parameter for lmplot\nSeaborn versions: latest dev version and 0.11.1\r\n\r\n`lmplot` doesn't seem to accept the `xlim=` parameter, although FacetGrid does.\r\n\r\nUse case: when `truncate=False`, the regression lines are extrapolated until they touch the current xlims.  If one afterwards want to extend these xlims, the regression lines are floating again.  A workaround is either to call FacetGrid and regplot separately, or to set very wide xmargins via the rcParams.\r\n\r\nExample code.\r\n```\r\nimport seaborn as sns\r\nimport matplotlib as mpl\r\n\r\ntips = sns.load_dataset('tips')\r\n# mpl.rcParams['axes.xmargin'] = 0.5  # set very wide margins: 50% of the actual range\r\ng = sns.lmplot(x=\"total_bill\", y=\"tip\", col=\"smoker\", data=tips, truncate=False, xlim=(0, 80))\r\n# mpl.rcParams['axes.xmargin'] = 0.05 # set the margins back to the default\r\ng.set(xlim=(0, 80))\r\n```\r\n\r\n\r\n\n",
  "hints_text": "Worth noting: the y axes are not shared in the \"wrong\" plot, however the y axis autoscaling is off.\r\n\r\nMy suspicion is that this line is the culprit: https://github.com/mwaskom/seaborn/blob/master/seaborn/regression.py#L611-L616\n\"the y axes are not shared in the \"wrong\" plot\"\r\n\r\nYou are right, the scales aren't actually identical. I didn't notice that.\nIt's fortunate as it makes the workaround (setting the ylim explicitly) a lot easier to accomplish than \"unsharing\" the axes, which is pretty difficult in matplotlib IIRC.\nWorth noting: the y axes are not shared in the \"wrong\" plot, however the y axis autoscaling is off.\r\n\r\nMy suspicion is that this line is the culprit: https://github.com/mwaskom/seaborn/blob/master/seaborn/regression.py#L611-L616\n\"the y axes are not shared in the \"wrong\" plot\"\r\n\r\nYou are right, the scales aren't actually identical. I didn't notice that.\nIt's fortunate as it makes the workaround (setting the ylim explicitly) a lot easier to accomplish than \"unsharing\" the axes, which is pretty difficult in matplotlib IIRC.\nWhat should really happen is that `lmplot` should accept a `facet_kws` dictionary that it passes to `FacetGrid` to set it up. Also then some of the parameters of lmplot that are passed directly should be deprecated with the instruction that they should be packaged in `facet_kws` (not all of them, but less-often-used ones).\r\n\r\nUnfortunately I have not been especially consistent across the figure-level functions with which `FacetGrid` parameters do or do not end up i the figure-level function signature. This would probably be good to standardize, but that might involve a lot of annoying deprecation.",
  "created_at": "2021-05-06T18:35:25Z",
  "version": "0.12",
  "FAIL_TO_PASS": "[\"seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_facet_truncate[True]\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_facet_truncate[False]\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_facet_kws\"]",
  "PASS_TO_PASS": "[\"seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_frame\", \"seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_series\", \"seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_array\", \"seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_lists\", \"seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_mix\", \"seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_bad\", \"seaborn/tests/test_regression.py::TestLinearPlotter::test_dropna\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_variables_from_frame\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_variables_from_series\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_variables_from_mix\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_variables_must_be_1d\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_dropna\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_singleton[x0-y0]\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_singleton[x1-y1]\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_singleton[x2-y2]\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_ci\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_regress_logx\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_regress_bootstrap_seed\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_numeric_bins\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_provided_bins\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_bin_results\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_scatter_data\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_estimate_data\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_estimate_cis\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_estimate_units\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_partial\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_regression_options\", \"seaborn/tests/test_regression.py::TestRegressionPlotter::test_regression_limits\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_regplot_basic\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_regplot_selective\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_regplot_scatter_kws_alpha\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_regplot_binned\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_no_data\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_basic\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_hue\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_markers\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_marker_linewidths\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_facets\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_hue_col_nolegend\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_scatter_kws\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_sharey\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_residplot\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_three_point_colors\", \"seaborn/tests/test_regression.py::TestRegressionPlots::test_regplot_xlim\"]",
  "environment_setup_commit": "d25872b0fc99dbf7e666a91f59bd4ed125186aa1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.834893",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}