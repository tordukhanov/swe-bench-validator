{
  "repo": "django/django",
  "instance_id": "django__django-13413",
  "base_commit": "fed257ddff449e1bf1ce06d9a7fddb148290a6ac",
  "patch": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -244,10 +244,12 @@ def expected_parameters(self):\n         return [self.lookup_kwarg, self.lookup_kwarg2]\n \n     def choices(self, changelist):\n+        field_choices = dict(self.field.flatchoices)\n         for lookup, title in (\n-                (None, _('All')),\n-                ('1', _('Yes')),\n-                ('0', _('No'))):\n+            (None, _('All')),\n+            ('1', field_choices.get(True, _('Yes'))),\n+            ('0', field_choices.get(False, _('No'))),\n+        ):\n             yield {\n                 'selected': self.lookup_val == lookup and not self.lookup_val2,\n                 'query_string': changelist.get_query_string({self.lookup_kwarg: lookup}, [self.lookup_kwarg2]),\n@@ -257,7 +259,7 @@ def choices(self, changelist):\n             yield {\n                 'selected': self.lookup_val2 == 'True',\n                 'query_string': changelist.get_query_string({self.lookup_kwarg2: 'True'}, [self.lookup_kwarg]),\n-                'display': _('Unknown'),\n+                'display': field_choices.get(None, _('Unknown')),\n             }\n \n \n",
  "test_patch": "diff --git a/tests/admin_filters/models.py b/tests/admin_filters/models.py\n--- a/tests/admin_filters/models.py\n+++ b/tests/admin_filters/models.py\n@@ -31,6 +31,11 @@ class Book(models.Model):\n     is_best_seller = models.BooleanField(default=0, null=True)\n     is_best_seller2 = models.NullBooleanField(default=0)\n     date_registered = models.DateField(null=True)\n+    availability = models.BooleanField(choices=(\n+        (False, 'Paid'),\n+        (True, 'Free'),\n+        (None, 'Obscure'),\n+    ), null=True)\n     # This field name is intentionally 2 characters long (#16080).\n     no = models.IntegerField(verbose_name='number', blank=True, null=True)\n \ndiff --git a/tests/admin_filters/tests.py b/tests/admin_filters/tests.py\n--- a/tests/admin_filters/tests.py\n+++ b/tests/admin_filters/tests.py\n@@ -140,7 +140,7 @@ class CustomUserAdmin(UserAdmin):\n \n \n class BookAdmin(ModelAdmin):\n-    list_filter = ('year', 'author', 'contributors', 'is_best_seller', 'date_registered', 'no')\n+    list_filter = ('year', 'author', 'contributors', 'is_best_seller', 'date_registered', 'no', 'availability')\n     ordering = ('-id',)\n \n \n@@ -156,6 +156,7 @@ class BookAdminWithTupleBooleanFilter(BookAdmin):\n         ('is_best_seller', BooleanFieldListFilter),\n         'date_registered',\n         'no',\n+        ('availability', BooleanFieldListFilter),\n     )\n \n \n@@ -288,22 +289,22 @@ def setUpTestData(cls):\n         cls.djangonaut_book = Book.objects.create(\n             title='Djangonaut: an art of living', year=2009,\n             author=cls.alfred, is_best_seller=True, date_registered=cls.today,\n-            is_best_seller2=True,\n+            is_best_seller2=True, availability=True,\n         )\n         cls.bio_book = Book.objects.create(\n             title='Django: a biography', year=1999, author=cls.alfred,\n             is_best_seller=False, no=207,\n-            is_best_seller2=False,\n+            is_best_seller2=False, availability=False,\n         )\n         cls.django_book = Book.objects.create(\n             title='The Django Book', year=None, author=cls.bob,\n             is_best_seller=None, date_registered=cls.today, no=103,\n-            is_best_seller2=None,\n+            is_best_seller2=None, availability=True,\n         )\n         cls.guitar_book = Book.objects.create(\n             title='Guitar for dummies', year=2002, is_best_seller=True,\n             date_registered=cls.one_week_ago,\n-            is_best_seller2=True,\n+            is_best_seller2=True, availability=None,\n         )\n         cls.guitar_book.contributors.set([cls.bob, cls.lisa])\n \n@@ -956,6 +957,63 @@ def verify_booleanfieldlistfilter(self, modeladmin):\n         self.assertIs(choice['selected'], True)\n         self.assertEqual(choice['query_string'], '?is_best_seller__isnull=True')\n \n+    def test_booleanfieldlistfilter_choices(self):\n+        modeladmin = BookAdmin(Book, site)\n+        self.verify_booleanfieldlistfilter_choices(modeladmin)\n+\n+    def test_booleanfieldlistfilter_tuple_choices(self):\n+        modeladmin = BookAdminWithTupleBooleanFilter(Book, site)\n+        self.verify_booleanfieldlistfilter_choices(modeladmin)\n+\n+    def verify_booleanfieldlistfilter_choices(self, modeladmin):\n+        # False.\n+        request = self.request_factory.get('/', {'availability__exact': 0})\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        queryset = changelist.get_queryset(request)\n+        self.assertEqual(list(queryset), [self.bio_book])\n+        filterspec = changelist.get_filters(request)[0][6]\n+        self.assertEqual(filterspec.title, 'availability')\n+        choice = select_by(filterspec.choices(changelist), 'display', 'Paid')\n+        self.assertIs(choice['selected'], True)\n+        self.assertEqual(choice['query_string'], '?availability__exact=0')\n+        # True.\n+        request = self.request_factory.get('/', {'availability__exact': 1})\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        queryset = changelist.get_queryset(request)\n+        self.assertEqual(list(queryset), [self.django_book, self.djangonaut_book])\n+        filterspec = changelist.get_filters(request)[0][6]\n+        self.assertEqual(filterspec.title, 'availability')\n+        choice = select_by(filterspec.choices(changelist), 'display', 'Free')\n+        self.assertIs(choice['selected'], True)\n+        self.assertEqual(choice['query_string'], '?availability__exact=1')\n+        # None.\n+        request = self.request_factory.get('/', {'availability__isnull': 'True'})\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        queryset = changelist.get_queryset(request)\n+        self.assertEqual(list(queryset), [self.guitar_book])\n+        filterspec = changelist.get_filters(request)[0][6]\n+        self.assertEqual(filterspec.title, 'availability')\n+        choice = select_by(filterspec.choices(changelist), 'display', 'Obscure')\n+        self.assertIs(choice['selected'], True)\n+        self.assertEqual(choice['query_string'], '?availability__isnull=True')\n+        # All.\n+        request = self.request_factory.get('/')\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        queryset = changelist.get_queryset(request)\n+        self.assertEqual(\n+            list(queryset),\n+            [self.guitar_book, self.django_book, self.bio_book, self.djangonaut_book],\n+        )\n+        filterspec = changelist.get_filters(request)[0][6]\n+        self.assertEqual(filterspec.title, 'availability')\n+        choice = select_by(filterspec.choices(changelist), 'display', 'All')\n+        self.assertIs(choice['selected'], True)\n+        self.assertEqual(choice['query_string'], '?')\n+\n     def test_booleanfieldlistfilter_nullbooleanfield(self):\n         modeladmin = BookAdmin2(Book, site)\n \n@@ -1212,7 +1270,7 @@ def test_two_characters_long_field(self):\n         queryset = changelist.get_queryset(request)\n         self.assertEqual(list(queryset), [self.bio_book])\n \n-        filterspec = changelist.get_filters(request)[0][-1]\n+        filterspec = changelist.get_filters(request)[0][5]\n         self.assertEqual(filterspec.title, 'number')\n         choices = list(filterspec.choices(changelist))\n         self.assertIs(choices[2]['selected'], True)\n",
  "problem_statement": "BooleanFieldListFilter doesn't respect field choices.\nDescription\n\t\nIf I have such construction:\n# models.py\nclass BoolTest(models.Model):\n\tBOUGHT_CHOICES = (\n\t\t(False, 'Pending'),\n\t\t(True, 'Bought')\n\t)\n\tbought = models.BooleanField(\n\t\tverbose_name=\"Fancy Boolean\",\n\t\tdefault=False,\n\t\tchoices=BOUGHT_CHOICES)\n# admin.py\nclass BoolTestAdmin(admin.ModelAdmin):\n\tlist_filter = ('bought',)\n\t\nadmin.site.register(BoolTest, BoolTestAdmin)\nThe boolean Filter text is not modified to fit choices param\nExample (in FR):\nFILTRE\nPar Fancy Boolean\nTout\nOui\nNon\nShould be :\nFILTRE\nPar Fancy Boolean\nTout\nBought\nPending\n",
  "hints_text": "Thanks, we could probably use field.flatchoices, e.g. diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py index 3e02cd89d7..9fdf038085 100644 --- a/django/contrib/admin/filters.py +++ b/django/contrib/admin/filters.py @@ -244,10 +244,7 @@ class BooleanFieldListFilter(FieldListFilter): return [self.lookup_kwarg, self.lookup_kwarg2] def choices(self, changelist): - for lookup, title in ( - (None, _('All')), - ('1', _('Yes')), - ('0', _('No'))): + for lookup, title in ((None, _('All')), *self.field.flatchoices): yield { 'selected': self.lookup_val == lookup and not self.lookup_val2, 'query_string': changelist.get_query_string({self.lookup_kwarg: lookup}, [self.lookup_kwarg2]),\nâ€‹PR\nMay i work on this issue?",
  "created_at": "2020-09-13T13:05:54Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_booleanfieldlistfilter_choices (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter_tuple_choices (admin_filters.tests.ListFiltersTests)\"]",
  "PASS_TO_PASS": "[\"test_allvaluesfieldlistfilter (admin_filters.tests.ListFiltersTests)\", \"test_allvaluesfieldlistfilter_custom_qs (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter_nullbooleanfield (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter_tuple (admin_filters.tests.ListFiltersTests)\", \"test_choicesfieldlistfilter_has_none_choice (admin_filters.tests.ListFiltersTests)\", \"test_datefieldlistfilter (admin_filters.tests.ListFiltersTests)\", \"test_datefieldlistfilter_with_time_zone_support (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter_choices (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter_invalid_lookup_parameters (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter_non_empty_field (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter_reverse_relationships (admin_filters.tests.ListFiltersTests)\", \"Filtering by an invalid value.\", \"test_fieldlistfilter_underscorelookup_tuple (admin_filters.tests.ListFiltersTests)\", \"test_filter_with_failing_queryset (admin_filters.tests.ListFiltersTests)\", \"test_fk_with_to_field (admin_filters.tests.ListFiltersTests)\", \"test_list_filter_queryset_filtered_by_default (admin_filters.tests.ListFiltersTests)\", \"test_listfilter_genericrelation (admin_filters.tests.ListFiltersTests)\", \"test_listfilter_without_title (admin_filters.tests.ListFiltersTests)\", \"test_lookup_with_dynamic_value (admin_filters.tests.ListFiltersTests)\", \"test_lookup_with_non_string_value (admin_filters.tests.ListFiltersTests)\", \"test_lookup_with_non_string_value_underscored (admin_filters.tests.ListFiltersTests)\", \"test_parameter_ends_with__in__or__isnull (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_foreignkey (admin_filters.tests.ListFiltersTests)\", \"RelatedFieldListFilter ordering respects Model.ordering.\", \"RelatedFieldListFilter ordering respects ModelAdmin.ordering.\", \"test_relatedfieldlistfilter_foreignkey_ordering_reverse (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_manytomany (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_reverse_relationships (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_reverse_relationships_default_ordering (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_foreignkey (admin_filters.tests.ListFiltersTests)\", \"RelatedOnlyFieldListFilter ordering respects Meta.ordering.\", \"RelatedOnlyFieldListFilter ordering respects ModelAdmin.ordering.\", \"test_relatedonlyfieldlistfilter_foreignkey_reverse_relationships (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_manytomany (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_manytomany_reverse_relationships (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_underscorelookup_foreignkey (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter_with_none_returning_lookups (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter_with_queryset_based_lookups (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter_without_parameter (admin_filters.tests.ListFiltersTests)\", \"test_two_characters_long_field (admin_filters.tests.ListFiltersTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.657272",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}