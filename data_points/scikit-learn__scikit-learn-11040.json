{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-11040",
  "base_commit": "96a02f3934952d486589dddd3f00b40d5a5ab5f2",
  "patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -258,6 +258,12 @@ def _fit(self, X):\n                     \"Expected n_neighbors > 0. Got %d\" %\n                     self.n_neighbors\n                 )\n+            else:\n+                if not np.issubdtype(type(self.n_neighbors), np.integer):\n+                    raise TypeError(\n+                        \"n_neighbors does not take %s value, \"\n+                        \"enter integer value\" %\n+                        type(self.n_neighbors))\n \n         return self\n \n@@ -327,6 +333,17 @@ class from an array representing our data set and ask who's\n \n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        elif n_neighbors <= 0:\n+            raise ValueError(\n+                \"Expected n_neighbors > 0. Got %d\" %\n+                n_neighbors\n+            )\n+        else:\n+            if not np.issubdtype(type(n_neighbors), np.integer):\n+                raise TypeError(\n+                    \"n_neighbors does not take %s value, \"\n+                    \"enter integer value\" %\n+                    type(n_neighbors))\n \n         if X is not None:\n             query_is_train = False\n",
  "test_patch": "diff --git a/sklearn/neighbors/tests/test_neighbors.py b/sklearn/neighbors/tests/test_neighbors.py\n--- a/sklearn/neighbors/tests/test_neighbors.py\n+++ b/sklearn/neighbors/tests/test_neighbors.py\n@@ -18,6 +18,7 @@\n from sklearn.utils.testing import assert_greater\n from sklearn.utils.testing import assert_in\n from sklearn.utils.testing import assert_raises\n+from sklearn.utils.testing import assert_raises_regex\n from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import assert_warns_message\n@@ -108,6 +109,21 @@ def test_unsupervised_inputs():\n         assert_array_almost_equal(ind1, ind2)\n \n \n+def test_n_neighbors_datatype():\n+    # Test to check whether n_neighbors is integer\n+    X = [[1, 1], [1, 1], [1, 1]]\n+    expected_msg = \"n_neighbors does not take .*float.* \" \\\n+                   \"value, enter integer value\"\n+    msg = \"Expected n_neighbors > 0. Got -3\"\n+\n+    neighbors_ = neighbors.NearestNeighbors(n_neighbors=3.)\n+    assert_raises_regex(TypeError, expected_msg, neighbors_.fit, X)\n+    assert_raises_regex(ValueError, msg,\n+                        neighbors_.kneighbors, X=X, n_neighbors=-3)\n+    assert_raises_regex(TypeError, expected_msg,\n+                        neighbors_.kneighbors, X=X, n_neighbors=3.)\n+\n+\n def test_precomputed(random_state=42):\n     \"\"\"Tests unsupervised NearestNeighbors with a distance matrix.\"\"\"\n     # Note: smaller samples may result in spurious test success\n",
  "problem_statement": "Missing parameter validation in Neighbors estimator for float n_neighbors\n```python\r\nfrom sklearn.neighbors import NearestNeighbors\r\nfrom sklearn.datasets import make_blobs\r\nX, y = make_blobs()\r\nneighbors = NearestNeighbors(n_neighbors=3.)\r\nneighbors.fit(X)\r\nneighbors.kneighbors(X)\r\n```\r\n```\r\n~/checkout/scikit-learn/sklearn/neighbors/binary_tree.pxi in sklearn.neighbors.kd_tree.NeighborsHeap.__init__()\r\n\r\nTypeError: 'float' object cannot be interpreted as an integer\r\n```\r\nThis should be caught earlier and a more helpful error message should be raised (or we could be lenient and cast to integer, but I think a better error might be better).\r\n\r\nWe need to make sure that \r\n```python\r\nneighbors.kneighbors(X, n_neighbors=3.)\r\n```\r\nalso works.\n",
  "hints_text": "Hello, I would like to take this as my first issue. \r\nThank you.\n@amueller \r\nI added a simple check for float inputs for  n_neighbors in order to throw ValueError if that's the case.\n@urvang96 Did say he was working on it first @Alfo5123  ..\r\n\r\n@amueller I think there is a lot of other estimators and Python functions in general where dtype isn't explicitely checked and wrong dtype just raises an exception later on.\r\n\r\nTake for instance,\r\n```py\r\nimport numpy as np\r\n\r\nx = np.array([1])\r\nnp.sum(x, axis=1.)\r\n```\r\nwhich produces,\r\n```py\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"lib/python3.6/site-packages/numpy/core/fromnumeric.py\", line 1882, in sum\r\n    out=out, **kwargs)\r\n  File \"lib/python3.6/site-packages/numpy/core/_methods.py\", line 32, in _sum\r\n    return umr_sum(a, axis, dtype, out, keepdims)\r\nTypeError: 'float' object cannot be interpreted as an integer\r\n```\r\nso pretty much the same exception as in the original post, with no indications of what is wrong exactly. Here it's straightforward because we only provided one parameter, but the same is true for more complex constructions. \r\n\r\nSo I'm not sure that starting to enforce int/float dtype of parameters, estimator by estimator is a solution here. In general don't think there is a need to do more parameter validation than what is done e.g. in numpy or pandas. If we want to do it, some generic type validation based on annotaitons (e.g. https://github.com/agronholm/typeguard) might be easier but also require more maintenance time and probably harder to implement while Python 2.7 is supported. \r\n\r\npandas also doesn't enforce it explicitely BTW,\r\n```python\r\npd.DataFrame([{'a': 1, 'b': 2}]).sum(axis=0.)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"lib/python3.6/site-packages/pandas/core/generic.py\", line 7295, in stat_func\r\n    numeric_only=numeric_only, min_count=min_count)\r\n  File \"lib/python3.6/site-packages/pandas/core/frame.py\", line 5695, in _reduce\r\n    axis = self._get_axis_number(axis)\r\n  File \"lib/python3.6/site-packages/pandas/core/generic.py\", line 357, in _get_axis_number\r\n    .format(axis, type(self)))\r\nValueError: No axis named 0.0 for object type <class 'pandas.core.frame.DataFrame'>\r\n```\n@Alfo5123 I claimed the issue first and I was working on it. This is not how the community works.\n@urvang96 Yes, I understand, my bad. Sorry for the inconvenient.  I won't continue on it. \n@Alfo5123  Thank You. Are to going to close the existing PR?",
  "created_at": "2018-04-28T07:18:33Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/neighbors/tests/test_neighbors.py::test_n_neighbors_datatype\"]",
  "PASS_TO_PASS": "[\"sklearn/neighbors/tests/test_neighbors.py::test_unsupervised_kneighbors\", \"sklearn/neighbors/tests/test_neighbors.py::test_unsupervised_inputs\", \"sklearn/neighbors/tests/test_neighbors.py::test_precomputed\", \"sklearn/neighbors/tests/test_neighbors.py::test_precomputed_cross_validation\", \"sklearn/neighbors/tests/test_neighbors.py::test_unsupervised_radius_neighbors\", \"sklearn/neighbors/tests/test_neighbors.py::test_kneighbors_classifier\", \"sklearn/neighbors/tests/test_neighbors.py::test_kneighbors_classifier_float_labels\", \"sklearn/neighbors/tests/test_neighbors.py::test_kneighbors_classifier_predict_proba\", \"sklearn/neighbors/tests/test_neighbors.py::test_radius_neighbors_classifier\", \"sklearn/neighbors/tests/test_neighbors.py::test_radius_neighbors_classifier_when_no_neighbors\", \"sklearn/neighbors/tests/test_neighbors.py::test_radius_neighbors_classifier_outlier_labeling\", \"sklearn/neighbors/tests/test_neighbors.py::test_radius_neighbors_classifier_zero_distance\", \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_regressors_zero_distance\", \"sklearn/neighbors/tests/test_neighbors.py::test_radius_neighbors_boundary_handling\", \"sklearn/neighbors/tests/test_neighbors.py::test_RadiusNeighborsClassifier_multioutput\", \"sklearn/neighbors/tests/test_neighbors.py::test_kneighbors_classifier_sparse\", \"sklearn/neighbors/tests/test_neighbors.py::test_KNeighborsClassifier_multioutput\", \"sklearn/neighbors/tests/test_neighbors.py::test_kneighbors_regressor\", \"sklearn/neighbors/tests/test_neighbors.py::test_KNeighborsRegressor_multioutput_uniform_weight\", \"sklearn/neighbors/tests/test_neighbors.py::test_kneighbors_regressor_multioutput\", \"sklearn/neighbors/tests/test_neighbors.py::test_radius_neighbors_regressor\", \"sklearn/neighbors/tests/test_neighbors.py::test_RadiusNeighborsRegressor_multioutput_with_uniform_weight\", \"sklearn/neighbors/tests/test_neighbors.py::test_RadiusNeighborsRegressor_multioutput\", \"sklearn/neighbors/tests/test_neighbors.py::test_kneighbors_regressor_sparse\", \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_iris\", \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\", \"sklearn/neighbors/tests/test_neighbors.py::test_kneighbors_graph\", \"sklearn/neighbors/tests/test_neighbors.py::test_kneighbors_graph_sparse\", \"sklearn/neighbors/tests/test_neighbors.py::test_radius_neighbors_graph\", \"sklearn/neighbors/tests/test_neighbors.py::test_radius_neighbors_graph_sparse\", \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_badargs\", \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_metrics\", \"sklearn/neighbors/tests/test_neighbors.py::test_callable_metric\", \"sklearn/neighbors/tests/test_neighbors.py::test_valid_brute_metric_for_auto_algorithm\", \"sklearn/neighbors/tests/test_neighbors.py::test_metric_params_interface\", \"sklearn/neighbors/tests/test_neighbors.py::test_predict_sparse_ball_kd_tree\", \"sklearn/neighbors/tests/test_neighbors.py::test_non_euclidean_kneighbors\", \"sklearn/neighbors/tests/test_neighbors.py::test_k_and_radius_neighbors_train_is_not_query\", \"sklearn/neighbors/tests/test_neighbors.py::test_k_and_radius_neighbors_X_None\", \"sklearn/neighbors/tests/test_neighbors.py::test_k_and_radius_neighbors_duplicates\", \"sklearn/neighbors/tests/test_neighbors.py::test_include_self_neighbors_graph\", \"sklearn/neighbors/tests/test_neighbors.py::test_dtype_convert\", \"sklearn/neighbors/tests/test_neighbors.py::test_sparse_metric_callable\", \"sklearn/neighbors/tests/test_neighbors.py::test_pairwise_boolean_distance\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.957070",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}