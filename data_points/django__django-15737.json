{
  "repo": "django/django",
  "instance_id": "django__django-15737",
  "base_commit": "f1e0fc645bb0b2c15d1510c9a8501743297dec9d",
  "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1100,9 +1100,9 @@ def _prepare_related_fields_for_save(self, operation_name, fields=None):\n                         \"related object '%s'.\" % (operation_name, field.name)\n                     )\n                 elif getattr(self, field.attname) in field.empty_values:\n-                    # Use pk from related object if it has been saved after\n-                    # an assignment.\n-                    setattr(self, field.attname, obj.pk)\n+                    # Set related object if it has been saved after an\n+                    # assignment.\n+                    setattr(self, field.name, obj)\n                 # If the relationship's pk/to_field was changed, clear the\n                 # cached relationship.\n                 if getattr(obj, field.target_field.attname) != getattr(\n",
  "test_patch": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -654,6 +654,16 @@ def test_fk_assignment_and_related_object_cache(self):\n         self.assertIsNot(c.parent, p)\n         self.assertEqual(c.parent, p)\n \n+    def test_save_parent_after_assign(self):\n+        category = Category(name=\"cats\")\n+        record = Record(category=category)\n+        category.save()\n+        record.save()\n+        category.name = \"dogs\"\n+        with self.assertNumQueries(0):\n+            self.assertEqual(category.id, record.category_id)\n+            self.assertEqual(category.name, record.category.name)\n+\n     def test_save_nullable_fk_after_parent(self):\n         parent = Parent()\n         child = ChildNullableParent(parent=parent)\n",
  "problem_statement": "Avoid unnecessary clear of cached reference\nDescription\n\t \n\t\t(last modified by Barry Johnson)\n\t \nConsider this case of ORM models \"Parent\" and \"Child\", where Child has a foreign key reference to Parent (and the database can return generated IDs following insert operations):\nparent = Parent(name='parent_object')\nchild = Child(parent=parent)\nparent.save()\nchild.save()\nprint(child.parent.name)\nThe print statement will cause an unnecessary lazy read of the parent object.\nIn the application where this behavior was first observed, the application was creating thousands of parent and child objects using bulk_create(). The subsequent lazy reads occurred when creating log entries to record the action, and added thousands of unwanted SELECT queries.\nClosed ticket #29497 solved a problem with potential data loss in this situation by essentially executing child.parent_id = child.parent.pk while preparing the child object to be saved. However, when the child's ForeignKeyDeferredAttrbute \"parent_id\" changes value from None to the parent's ID, the child's internal cache containing the reference to \"parent\" is cleared. The subsequent reference to child.parent then must do a lazy read and reload parent from the database.\nA workaround to avoid this lazy read is to explicitly update both the \"parent_id\" and \"parent\" cache entry by adding this non-intuitive statement:\nchild.parent = child.parent\nafter executing parent.save()\nBut it appears that a simple change could avoid clearing the cache in this narrow case.\nWithin Model._prepare_related_fields_for_save(), replace\nsetattr(self, field.attname, obj.pk)\nwith\nsetattr(self, field.name, obj)\nThis suggested code has -not- been tested.\nThis change would set the associated \"parent_id\" attribute while ensuring that the currently referenced object remains referenced.\n",
  "hints_text": "Hi Barry. Thanks for the report. For me, this is just how things are expected to work, so I'm going to say wontfix. I'm happy if you want to take it to the DevelopersMailingList for a wider discussion, but (in general) I'm suspicious of a \"simple change\" adjusting a long-standing behaviour like this… (Perhaps there's a case to be made on the mailing list though.) To address the example, my first thought is that you should be saving parent before creating child: parent = Parent(name='parent_object') parent.save() child = Child(parent=parent) ... My second is that, you have parent, so print the name from there: print(parent.name) I appreciate you've no-doubt reduced this in order to show the issue more clearly than in a real example, but I'd suspect those thoughts would go back to the more realistic case. However, as I say, the DevelopersMailingList is a better venue to pursue this kind of thing. Thanks.\n​Follow up discussion on the mailing list. Reopening based on the discussion there.\nChanged the suggested correction based on the discussion within the mailing list.\nReplying to Barry Johnson: Changed the suggested correction based on the discussion within the mailing list. Would you like to prepare a patch?",
  "created_at": "2022-05-27T12:16:42Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_save_parent_after_assign (many_to_one.tests.ManyToOneTests)\"]",
  "PASS_TO_PASS": "[\"test_add (many_to_one.tests.ManyToOneTests)\", \"test_add_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_add_remove_set_by_pk_raises (many_to_one.tests.ManyToOneTests)\", \"test_add_then_remove_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_assign (many_to_one.tests.ManyToOneTests)\", \"test_assign_fk_id_none (many_to_one.tests.ManyToOneTests)\", \"test_assign_fk_id_value (many_to_one.tests.ManyToOneTests)\", \"test_cached_foreign_key_with_to_field_not_cleared_by_save (many_to_one.tests.ManyToOneTests)\", \"Model.save() invalidates stale ForeignKey relations after a primary key\", \"test_clear_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_create (many_to_one.tests.ManyToOneTests)\", \"test_create_relation_with_gettext_lazy (many_to_one.tests.ManyToOneTests)\", \"test_deepcopy_and_circular_references (many_to_one.tests.ManyToOneTests)\", \"test_delete (many_to_one.tests.ManyToOneTests)\", \"test_explicit_fk (many_to_one.tests.ManyToOneTests)\", \"test_fk_assignment_and_related_object_cache (many_to_one.tests.ManyToOneTests)\", \"test_fk_instantiation_outside_model (many_to_one.tests.ManyToOneTests)\", \"test_fk_to_bigautofield (many_to_one.tests.ManyToOneTests)\", \"test_fk_to_smallautofield (many_to_one.tests.ManyToOneTests)\", \"test_get (many_to_one.tests.ManyToOneTests)\", \"test_hasattr_related_object (many_to_one.tests.ManyToOneTests)\", \"test_manager_class_caching (many_to_one.tests.ManyToOneTests)\", \"test_multiple_foreignkeys (many_to_one.tests.ManyToOneTests)\", \"test_related_object (many_to_one.tests.ManyToOneTests)\", \"test_relation_unsaved (many_to_one.tests.ManyToOneTests)\", \"test_remove_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_reverse_assignment_deprecation (many_to_one.tests.ManyToOneTests)\", \"test_reverse_foreign_key_instance_to_field_caching (many_to_one.tests.ManyToOneTests)\", \"test_reverse_selects (many_to_one.tests.ManyToOneTests)\", \"test_save_fk_after_parent_with_non_numeric_pk_set_on_child (many_to_one.tests.ManyToOneTests)\", \"test_save_nullable_fk_after_parent (many_to_one.tests.ManyToOneTests)\", \"test_save_nullable_fk_after_parent_with_to_field (many_to_one.tests.ManyToOneTests)\", \"test_select_related (many_to_one.tests.ManyToOneTests)\", \"test_selects (many_to_one.tests.ManyToOneTests)\", \"test_set (many_to_one.tests.ManyToOneTests)\", \"test_set_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_values_list_exception (many_to_one.tests.ManyToOneTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.739284",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}