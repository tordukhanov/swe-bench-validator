{
  "repo": "django/django",
  "instance_id": "django__django-15560",
  "base_commit": "ae506181f7fb9d9e74f4935686540bef29b60255",
  "patch": "diff --git a/django/contrib/auth/management/commands/createsuperuser.py b/django/contrib/auth/management/commands/createsuperuser.py\n--- a/django/contrib/auth/management/commands/createsuperuser.py\n+++ b/django/contrib/auth/management/commands/createsuperuser.py\n@@ -11,6 +11,7 @@\n from django.core import exceptions\n from django.core.management.base import BaseCommand, CommandError\n from django.db import DEFAULT_DB_ALIAS\n+from django.utils.functional import cached_property\n from django.utils.text import capfirst\n \n \n@@ -277,9 +278,21 @@ def _get_input_message(self, field, default=None):\n             else \"\",\n         )\n \n+    @cached_property\n+    def username_is_unique(self):\n+        if self.username_field.unique:\n+            return True\n+        for unique_constraint in self.UserModel._meta.total_unique_constraints:\n+            if (\n+                len(unique_constraint.fields) == 1\n+                and unique_constraint.fields[0] == self.username_field.name\n+            ):\n+                return True\n+        return False\n+\n     def _validate_username(self, username, verbose_field_name, database):\n         \"\"\"Validate username. If invalid, return a string error message.\"\"\"\n-        if self.username_field.unique:\n+        if self.username_is_unique:\n             try:\n                 self.UserModel._default_manager.db_manager(database).get_by_natural_key(\n                     username\n",
  "test_patch": "diff --git a/tests/auth_tests/models/__init__.py b/tests/auth_tests/models/__init__.py\n--- a/tests/auth_tests/models/__init__.py\n+++ b/tests/auth_tests/models/__init__.py\n@@ -11,6 +11,7 @@\n from .with_integer_username import IntegerUsernameUser\n from .with_last_login_attr import UserWithDisabledLastLoginField\n from .with_many_to_many import CustomUserWithM2M, CustomUserWithM2MThrough, Organization\n+from .with_unique_constraint import CustomUserWithUniqueConstraint\n \n __all__ = (\n     \"CustomEmailField\",\n@@ -20,6 +21,7 @@\n     \"CustomUserWithFK\",\n     \"CustomUserWithM2M\",\n     \"CustomUserWithM2MThrough\",\n+    \"CustomUserWithUniqueConstraint\",\n     \"CustomUserWithoutIsActiveField\",\n     \"Email\",\n     \"ExtensionUser\",\ndiff --git a/tests/auth_tests/models/with_unique_constraint.py b/tests/auth_tests/models/with_unique_constraint.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/auth_tests/models/with_unique_constraint.py\n@@ -0,0 +1,22 @@\n+from django.contrib.auth.models import AbstractBaseUser, BaseUserManager\n+from django.db import models\n+\n+\n+class CustomUserWithUniqueConstraintManager(BaseUserManager):\n+    def create_superuser(self, username, password):\n+        user = self.model(username=username)\n+        user.set_password(password)\n+        user.save(using=self._db)\n+        return user\n+\n+\n+class CustomUserWithUniqueConstraint(AbstractBaseUser):\n+    username = models.CharField(max_length=150)\n+\n+    objects = CustomUserWithUniqueConstraintManager()\n+    USERNAME_FIELD = \"username\"\n+\n+    class Meta:\n+        constraints = [\n+            models.UniqueConstraint(fields=[\"username\"], name=\"unique_custom_username\"),\n+        ]\ndiff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -23,6 +23,7 @@\n     CustomUserNonUniqueUsername,\n     CustomUserWithFK,\n     CustomUserWithM2M,\n+    CustomUserWithUniqueConstraint,\n     Email,\n     Organization,\n     UserProxy,\n@@ -1065,6 +1066,41 @@ def test(self):\n \n         test(self)\n \n+    @override_settings(AUTH_USER_MODEL=\"auth_tests.CustomUserWithUniqueConstraint\")\n+    def test_existing_username_meta_unique_constraint(self):\n+        \"\"\"\n+        Creation fails if the username already exists and a custom user model\n+        has UniqueConstraint.\n+        \"\"\"\n+        user = CustomUserWithUniqueConstraint.objects.create(username=\"janet\")\n+        new_io = StringIO()\n+        entered_passwords = [\"password\", \"password\"]\n+        # Enter the existing username first and then a new one.\n+        entered_usernames = [user.username, \"joe\"]\n+\n+        def return_passwords():\n+            return entered_passwords.pop(0)\n+\n+        def return_usernames():\n+            return entered_usernames.pop(0)\n+\n+        @mock_inputs({\"password\": return_passwords, \"username\": return_usernames})\n+        def test(self):\n+            call_command(\n+                \"createsuperuser\",\n+                interactive=True,\n+                stdin=MockTTY(),\n+                stdout=new_io,\n+                stderr=new_io,\n+            )\n+            self.assertEqual(\n+                new_io.getvalue().strip(),\n+                \"Error: That username is already taken.\\n\"\n+                \"Superuser created successfully.\",\n+            )\n+\n+        test(self)\n+\n     def test_existing_username_non_interactive(self):\n         \"\"\"Creation fails if the username already exists.\"\"\"\n         User.objects.create(username=\"janet\")\n",
  "problem_statement": "createsuperuser does not validate usernames that use a UniqueConstraint.\nDescription\n\t\nWith a custom User model that uses a UniqueConstraint instead of unique=True, the manage.py createsuperuser command does not validate usernames at all.\nclass CustomUser(AbstractBaseUser):\n\tcustom_username = models.CharField(max_length=255)\n\tUSERNAME_FIELD = 'custom_username'\n\tclass Meta:\n\t\tconstraints = [\n\t\t\tmodels.UniqueConstraint(fields=['custom_username'], name='unique_usernames'),\n\t\t]\nRunning manage.py createsuperuser to create a user with a username that already exists then results in an IntegrityError:\nIntegrityError: duplicate key value violates unique constraint \"unique_usernames\"\nDETAIL: Key (custom_username)=(foo) already exists.\n",
  "hints_text": "Thanks for this report. It's ​documented that \"The field must be unique (i.e., have unique=True set in its definition)\", however I agree that we could improve this, e.g.: django/contrib/auth/management/commands/createsuperuser.py diff --git a/django/contrib/auth/management/commands/createsuperuser.py b/django/contrib/auth/management/commands/createsuperuser.py index 5fffa55a22..0b8c72e866 100644 a b from django.contrib.auth.password_validation import validate_password 1111from django.core import exceptions 1212from django.core.management.base import BaseCommand, CommandError 1313from django.db import DEFAULT_DB_ALIAS 14from django.utils.functional import cached_property 1415from django.utils.text import capfirst 1516 1617 … … class Command(BaseCommand): 277278 else \"\", 278279 ) 279280 281 @cached_property 282 def username_is_unique(self): 283 if self.username_field.unique: 284 return True 285 for unique_constraint in self.UserModel._meta.total_unique_constraints: 286 if len(unique_constraint.fields) == 1 and self.username_field.name == unique_constraint.fields[0]: 287 return True 288 return False 289 280290 def _validate_username(self, username, verbose_field_name, database): 281291 \"\"\"Validate username. If invalid, return a string error message.\"\"\" 282 if self.username_field.unique: 292 if self.username_is_unique: 283293 try: 284294 self.UserModel._default_manager.db_manager(database).get_by_natural_key( 285295 username Would you like to prepare a patch? (a regression test is also required.)\nDone: ​PR Should I update the documentation as well?",
  "created_at": "2022-03-31T12:37:13Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"Creation fails if the username already exists and a custom user model\"]",
  "PASS_TO_PASS": "[\"test_actual_implementation (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_existing (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_i18n (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_simple (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_with_database (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"changepassword --database should operate on the specified DB.\", \"test_input_not_found (auth_tests.test_management.MockInputTests)\", \"`post_migrate` handler ordering isn't guaranteed. Simulate a case\", \"test_default_permissions (auth_tests.test_management.CreatePermissionsTests)\", \"A proxy model's permissions use its own content type rather than the\", \"#24075 - Permissions shouldn't be created or deleted if the ContentType\", \"test_createsuperuser_command_suggested_username_with_database_option (auth_tests.test_management.MultiDBCreatesuperuserTestCase)\", \"createsuperuser --database should operate on the specified DB.\", \"test_get_pass (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"test_get_pass_no_input (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"test_nonexistent_username (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"A CommandError should be raised if the user enters in passwords which\", \"The system username is used if --username isn't provided.\", \"Executing the changepassword management command should change joe's password\", \"#21627 -- Executing the changepassword management command should allow\", \"A CommandError should be thrown by handle() if the user enters in\", \"Check the operation of the createsuperuser management command\", \"Creation fails if --username is blank.\", \"test_blank_username_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"createsuperuser uses a default username when one isn't provided.\", \"test_email_in_username (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_environment_variable_m2m_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_environment_variable_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"Creation fails if the username already exists.\", \"call_command() gets username='janet' and interactive=True.\", \"test_fields_with_fk (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_fk_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_fk_via_option_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m_and_through (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m_interactive_blank (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_ignore_environment_variable_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_ignore_environment_variable_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"Creation fails if the username fails validation.\", \"test_keyboard_interrupt (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_no_email_argument (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_non_ascii_verbose_name (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"You can pass a stdin object as an option and it should be\", \"Creation should fail if the password fails validation.\", \"Password validation can be bypassed by entering 'y' at the prompt.\", \"If the command is not called from a TTY, it should be skipped and a\", \"A superuser can be created when a custom user model is in use\", \"A Custom superuser won't be created when a required field isn't provided\", \"test_swappable_user_username_non_unique (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_usermodel_without_password (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_usermodel_without_password_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_fk (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_fk_environment_variable (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_fk_via_option_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_password_against_required_fields (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_password_against_required_fields_via_option (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_password_against_username (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"Creation should fail if the user enters blank passwords.\", \"Creation should fail if the user enters mismatched passwords.\", \"test_verbosity_zero (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.733601",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}