{
  "repo": "django/django",
  "instance_id": "django__django-15744",
  "base_commit": "292f372768836e2aebc713064c5139e8067eebcb",
  "patch": "diff --git a/django/core/handlers/asgi.py b/django/core/handlers/asgi.py\n--- a/django/core/handlers/asgi.py\n+++ b/django/core/handlers/asgi.py\n@@ -171,14 +171,14 @@ async def handle(self, scope, receive, send):\n             )\n             # Get the request and check for basic issues.\n             request, error_response = self.create_request(scope, body_file)\n+            if request is None:\n+                await self.send_response(error_response, send)\n+                return\n+            # Get the response, using the async mode of BaseHandler.\n+            response = await self.get_response_async(request)\n+            response._handler_class = self.__class__\n         finally:\n             body_file.close()\n-        if request is None:\n-            await self.send_response(error_response, send)\n-            return\n-        # Get the response, using the async mode of BaseHandler.\n-        response = await self.get_response_async(request)\n-        response._handler_class = self.__class__\n         # Increase chunk size on file responses (ASGI servers handles low-level\n         # chunking).\n         if isinstance(response, FileResponse):\n",
  "test_patch": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -163,6 +163,18 @@ async def test_headers(self):\n         self.assertEqual(response_body[\"type\"], \"http.response.body\")\n         self.assertEqual(response_body[\"body\"], b\"From Scotland,Wales\")\n \n+    async def test_post_body(self):\n+        application = get_asgi_application()\n+        scope = self.async_request_factory._base_scope(method=\"POST\", path=\"/post/\")\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({\"type\": \"http.request\", \"body\": b\"Echo!\"})\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start[\"type\"], \"http.response.start\")\n+        self.assertEqual(response_start[\"status\"], 200)\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body[\"type\"], \"http.response.body\")\n+        self.assertEqual(response_body[\"body\"], b\"Echo!\")\n+\n     async def test_get_query_string(self):\n         application = get_asgi_application()\n         for query_string in (b\"name=Andrew\", \"name=Andrew\"):\ndiff --git a/tests/asgi/urls.py b/tests/asgi/urls.py\n--- a/tests/asgi/urls.py\n+++ b/tests/asgi/urls.py\n@@ -2,6 +2,7 @@\n \n from django.http import FileResponse, HttpResponse\n from django.urls import path\n+from django.views.decorators.csrf import csrf_exempt\n \n \n def hello(request):\n@@ -23,6 +24,11 @@ def sync_waiter(request):\n     return hello(request)\n \n \n+@csrf_exempt\n+def post_echo(request):\n+    return HttpResponse(request.body)\n+\n+\n sync_waiter.active_threads = set()\n sync_waiter.lock = threading.Lock()\n sync_waiter.barrier = threading.Barrier(2)\n@@ -35,5 +41,6 @@ def sync_waiter(request):\n     path(\"\", hello),\n     path(\"file/\", lambda x: FileResponse(open(test_filename, \"rb\"))),\n     path(\"meta/\", hello_meta),\n+    path(\"post/\", post_echo),\n     path(\"wait/\", sync_waiter),\n ]\n",
  "problem_statement": "Request body is closed prematurely by the ASGI handler\nDescription\n\t\nThe following PR â€‹https://github.com/django/django/pull/15675/ introduces I/O operation on closed file., due to closing the ASGI request body before getting the response, e.g. accessing request.body in a view.\n",
  "hints_text": "",
  "created_at": "2022-05-30T20:49:39Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_post_body (asgi.tests.ASGITest)\"]",
  "PASS_TO_PASS": "[\"test_concurrent_async_uses_multiple_thread_pools (asgi.tests.ASGITest)\", \"test_disconnect (asgi.tests.ASGITest)\", \"Makes sure that FileResponse works over ASGI.\", \"get_asgi_application() returns a functioning ASGI callable.\", \"test_get_query_string (asgi.tests.ASGITest)\", \"test_headers (asgi.tests.ASGITest)\", \"test_non_unicode_query_string (asgi.tests.ASGITest)\", \"test_request_lifecycle_signals_dispatched_with_thread_sensitive (asgi.tests.ASGITest)\", \"test_static_file_response (asgi.tests.ASGITest)\", \"test_wrong_connection_type (asgi.tests.ASGITest)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.739910",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}