{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13157",
  "base_commit": "85440978f517118e78dc15f84e397d50d14c8097",
  "patch": "diff --git a/sklearn/base.py b/sklearn/base.py\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -359,10 +359,32 @@ def score(self, X, y, sample_weight=None):\n         -------\n         score : float\n             R^2 of self.predict(X) wrt. y.\n+\n+        Notes\n+        -----\n+        The R2 score used when calling ``score`` on a regressor will use\n+        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n+        with `metrics.r2_score`. This will influence the ``score`` method of\n+        all the multioutput regressors (except for\n+        `multioutput.MultiOutputRegressor`). To use the new default, please\n+        either call `metrics.r2_score` directly or make a custom scorer with\n+        `metric.make_scorer`.\n         \"\"\"\n \n         from .metrics import r2_score\n-        return r2_score(y, self.predict(X), sample_weight=sample_weight,\n+        from .metrics.regression import _check_reg_targets\n+        y_pred = self.predict(X)\n+        # XXX: Remove the check in 0.23\n+        y_type, _, _, _ = _check_reg_targets(y, y_pred, None)\n+        if y_type == 'continuous-multioutput':\n+            warnings.warn(\"The default value of multioutput (not exposed in \"\n+                          \"score method) will change from 'variance_weighted' \"\n+                          \"to 'uniform_average' in 0.23 to keep consistent \"\n+                          \"with 'metrics.r2_score'. To use the new default, \"\n+                          \"please either call 'metrics.r2_score' directly or \"\n+                          \"make a custom scorer with 'metric.make_scorer'.\",\n+                          FutureWarning)\n+        return r2_score(y, y_pred, sample_weight=sample_weight,\n                         multioutput='variance_weighted')\n \n \ndiff --git a/sklearn/linear_model/coordinate_descent.py b/sklearn/linear_model/coordinate_descent.py\n--- a/sklearn/linear_model/coordinate_descent.py\n+++ b/sklearn/linear_model/coordinate_descent.py\n@@ -2247,9 +2247,10 @@ class MultiTaskLassoCV(LinearModelCV, RegressorMixin):\n     --------\n     >>> from sklearn.linear_model import MultiTaskLassoCV\n     >>> from sklearn.datasets import make_regression\n+    >>> from sklearn.metrics import r2_score\n     >>> X, y = make_regression(n_targets=2, noise=4, random_state=0)\n     >>> reg = MultiTaskLassoCV(cv=5, random_state=0).fit(X, y)\n-    >>> reg.score(X, y) # doctest: +ELLIPSIS\n+    >>> r2_score(y, reg.predict(X)) # doctest: +ELLIPSIS\n     0.9994...\n     >>> reg.alpha_\n     0.5713...\ndiff --git a/sklearn/multioutput.py b/sklearn/multioutput.py\n--- a/sklearn/multioutput.py\n+++ b/sklearn/multioutput.py\n@@ -256,6 +256,7 @@ def partial_fit(self, X, y, sample_weight=None):\n         super().partial_fit(\n             X, y, sample_weight=sample_weight)\n \n+    # XXX Remove this method in 0.23\n     def score(self, X, y, sample_weight=None):\n         \"\"\"Returns the coefficient of determination R^2 of the prediction.\n \n",
  "test_patch": "diff --git a/sklearn/cross_decomposition/tests/test_pls.py b/sklearn/cross_decomposition/tests/test_pls.py\n--- a/sklearn/cross_decomposition/tests/test_pls.py\n+++ b/sklearn/cross_decomposition/tests/test_pls.py\n@@ -1,3 +1,4 @@\n+import pytest\n import numpy as np\n from numpy.testing import assert_approx_equal\n \n@@ -377,6 +378,7 @@ def test_pls_errors():\n                              clf.fit, X, Y)\n \n \n+@pytest.mark.filterwarnings('ignore: The default value of multioutput')  # 0.23\n def test_pls_scaling():\n     # sanity check for scale=True\n     n_samples = 1000\ndiff --git a/sklearn/linear_model/tests/test_coordinate_descent.py b/sklearn/linear_model/tests/test_coordinate_descent.py\n--- a/sklearn/linear_model/tests/test_coordinate_descent.py\n+++ b/sklearn/linear_model/tests/test_coordinate_descent.py\n@@ -232,6 +232,7 @@ def test_lasso_path_return_models_vs_new_return_gives_same_coefficients():\n \n \n @pytest.mark.filterwarnings('ignore: The default value of cv')  # 0.22\n+@pytest.mark.filterwarnings('ignore: The default value of multioutput')  # 0.23\n def test_enet_path():\n     # We use a large number of samples and of informative features so that\n     # the l1_ratio selected is more toward ridge than lasso\ndiff --git a/sklearn/linear_model/tests/test_ransac.py b/sklearn/linear_model/tests/test_ransac.py\n--- a/sklearn/linear_model/tests/test_ransac.py\n+++ b/sklearn/linear_model/tests/test_ransac.py\n@@ -1,3 +1,4 @@\n+import pytest\n import numpy as np\n from scipy import sparse\n \n@@ -333,6 +334,7 @@ def test_ransac_min_n_samples():\n     assert_raises(ValueError, ransac_estimator7.fit, X, y)\n \n \n+@pytest.mark.filterwarnings('ignore: The default value of multioutput')  # 0.23\n def test_ransac_multi_dimensional_targets():\n \n     base_estimator = LinearRegression()\n@@ -353,6 +355,7 @@ def test_ransac_multi_dimensional_targets():\n     assert_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)\n \n \n+@pytest.mark.filterwarnings('ignore: The default value of multioutput')  # 0.23\n def test_ransac_residual_loss():\n     loss_multi1 = lambda y_true, y_pred: np.sum(np.abs(y_true - y_pred), axis=1)\n     loss_multi2 = lambda y_true, y_pred: np.sum((y_true - y_pred) ** 2, axis=1)\ndiff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -490,6 +490,7 @@ def check_dense_sparse(test_func):\n \n @pytest.mark.filterwarnings('ignore: The default of the `iid`')  # 0.22\n @pytest.mark.filterwarnings('ignore: The default value of cv')  # 0.22\n+@pytest.mark.filterwarnings('ignore: The default value of multioutput')  # 0.23\n @pytest.mark.parametrize(\n         'test_func',\n         (_test_ridge_loo, _test_ridge_cv, _test_ridge_cv_normalize,\ndiff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1313,6 +1313,7 @@ def test_pickle():\n \n @pytest.mark.filterwarnings('ignore: The default of the `iid`')  # 0.22\n @pytest.mark.filterwarnings('ignore: The default value of n_split')  # 0.22\n+@pytest.mark.filterwarnings('ignore: The default value of multioutput')  # 0.23\n def test_grid_search_with_multioutput_data():\n     # Test search with multi-output estimator\n \ndiff --git a/sklearn/neural_network/tests/test_mlp.py b/sklearn/neural_network/tests/test_mlp.py\n--- a/sklearn/neural_network/tests/test_mlp.py\n+++ b/sklearn/neural_network/tests/test_mlp.py\n@@ -5,6 +5,7 @@\n # Author: Issam H. Laradji\n # License: BSD 3 clause\n \n+import pytest\n import sys\n import warnings\n \n@@ -308,6 +309,7 @@ def test_multilabel_classification():\n     assert_greater(mlp.score(X, y), 0.9)\n \n \n+@pytest.mark.filterwarnings('ignore: The default value of multioutput')  # 0.23\n def test_multioutput_regression():\n     # Test that multi-output regression works as expected\n     X, y = make_regression(n_samples=200, n_targets=5)\ndiff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -486,3 +486,23 @@ def test_tag_inheritance():\n     diamond_tag_est = DiamondOverwriteTag()\n     with pytest.raises(TypeError, match=\"Inconsistent values for tag\"):\n         diamond_tag_est._get_tags()\n+\n+\n+# XXX: Remove in 0.23\n+def test_regressormixin_score_multioutput():\n+    from sklearn.linear_model import LinearRegression\n+    # no warnings when y_type is continuous\n+    X = [[1], [2], [3]]\n+    y = [1, 2, 3]\n+    reg = LinearRegression().fit(X, y)\n+    assert_no_warnings(reg.score, X, y)\n+    # warn when y_type is continuous-multioutput\n+    y = [[1, 2], [2, 3], [3, 4]]\n+    reg = LinearRegression().fit(X, y)\n+    msg = (\"The default value of multioutput (not exposed in \"\n+           \"score method) will change from 'variance_weighted' \"\n+           \"to 'uniform_average' in 0.23 to keep consistent \"\n+           \"with 'metrics.r2_score'. To use the new default, \"\n+           \"please either call 'metrics.r2_score' directly or \"\n+           \"make a custom scorer with 'metric.make_scorer'.\")\n+    assert_warns_message(FutureWarning, msg, reg.score, X, y)\ndiff --git a/sklearn/tests/test_dummy.py b/sklearn/tests/test_dummy.py\n--- a/sklearn/tests/test_dummy.py\n+++ b/sklearn/tests/test_dummy.py\n@@ -675,6 +675,7 @@ def test_dummy_regressor_return_std():\n     assert_array_equal(y_pred_list[1], y_std_expected)\n \n \n+@pytest.mark.filterwarnings('ignore: The default value of multioutput')  # 0.23\n @pytest.mark.parametrize(\"y,y_test\", [\n     ([1, 1, 1, 2], [1.25] * 4),\n     (np.array([[2, 2],\n",
  "problem_statement": "Different r2_score multioutput default in r2_score and base.RegressorMixin\nWe've changed multioutput default in r2_score to \"uniform_average\" in 0.19, but in base.RegressorMixin, we still use ``multioutput='variance_weighted'`` (#5143).\r\nAlso see the strange things below:\r\nhttps://github.com/scikit-learn/scikit-learn/blob/4603e481e9ac67eaf906ae5936263b675ba9bc9c/sklearn/multioutput.py#L283-L286\n",
  "hints_text": "Should we be deprecating and changing the `multioutput` used in RegressorMixin? How do we allow the user to select the new approach in a deprecation period?\n@agramfort @ogrisel can you explain the rational behind this?\r\nIt looks to me like the behavior before the PR was exactly what we wanted an the PR broke the deprecation which requires us to do another deprecation cycle?\nI vote +1 to deprecat and change the multioutput used in RegressorMixin. It seems misleading that r2_score and RegressorMixin have different defaults.\r\nBut yes, the deprecation is not easy. Maybe we can just warn and change the behavior after 2 versions.\nAnd can someone tell me the difference between these two multioutput choices (e..g, why do you prefer uniform_average)? Seems that the deprecation is introduced in https://github.com/scikit-learn/scikit-learn/commit/1b1e10c3251bda9240f115123f6c17c8fde50e35 and I can't find relevant discussions.",
  "created_at": "2019-02-13T12:55:30Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/tests/test_base.py::test_regressormixin_score_multioutput\"]",
  "PASS_TO_PASS": "[\"sklearn/cross_decomposition/tests/test_pls.py::test_pls\", \"sklearn/cross_decomposition/tests/test_pls.py::test_convergence_fail\", \"sklearn/cross_decomposition/tests/test_pls.py::test_PLSSVD\", \"sklearn/cross_decomposition/tests/test_pls.py::test_univariate_pls_regression\", \"sklearn/cross_decomposition/tests/test_pls.py::test_predict_transform_copy\", \"sklearn/cross_decomposition/tests/test_pls.py::test_pls_errors\", \"sklearn/cross_decomposition/tests/test_pls.py::test_pls_scaling\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_zero\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_toy\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_toy\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_cv_with_some_model_selection\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_cv_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_path_return_models_vs_new_return_gives_same_coefficients\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_path_parameters\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_alpha_warning\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_cv_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_uniform_targets\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multi_task_lasso_and_enet\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_readonly_data\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multi_task_lasso_readonly_data\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_multitarget\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multioutput_enetcv_error\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multitask_enet_and_lasso_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_1d_multioutput_enet_and_multitask_enet_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_1d_multioutput_lasso_and_multitask_lasso_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_sparse_input_dtype_enet_and_lassocv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_precompute_invalid_argument\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_random_descent\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_sparse_dense_descent_paths\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_check_input_false\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_copy_X_True[True]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_copy_X_True[False]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_copy_X_False_check_input_False\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_overrided_gram_matrix\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_non_float_y[ElasticNet]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_non_float_y[Lasso]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_float_precision\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_l1_ratio\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_coef_shape_not_zero\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_coordinate_descent[Lasso-1-kwargs0]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_coordinate_descent[Lasso-1-kwargs1]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_coordinate_descent[MultiTaskLasso-2-kwargs2]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_coordinate_descent[MultiTaskLasso-2-kwargs3]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_convergence_warnings\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_sparse_input_convergence_warning\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_inliers_outliers\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_is_data_valid\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_is_model_valid\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_max_trials\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_stop_n_inliers\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_stop_score\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_score\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_predict\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_resid_thresh_no_inliers\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_no_valid_data\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_no_valid_model\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_exceed_max_skips\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_warn_exceed_max_skips\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_sparse_coo\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_sparse_csr\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_sparse_csc\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_min_n_samples\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_multi_dimensional_targets\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_residual_loss\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_default_residual_threshold\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_dynamic_max_trials\", \"sklearn/linear_model/tests/test_ransac.py::test_ransac_fit_sample_weight\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge[svd]\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge[sparse_cg]\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge[cholesky]\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge[lsqr]\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge[sag]\", \"sklearn/linear_model/tests/test_ridge.py::test_primal_dual_relationship\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge_singular\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge_regression_sample_weights\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge_regression_convergence_fail\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge_sample_weights\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge_shapes\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge_intercept\", \"sklearn/linear_model/tests/test_ridge.py::test_toy_ridge_object\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge_vs_lstsq\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge_individual_penalties\", \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_loo]\", \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\", \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv_normalize]\", \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_diabetes]\", \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_multi_ridge_diabetes]\", \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_classifiers]\", \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_tolerance]\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge_cv_sparse_svd\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge_sparse_svd\", \"sklearn/linear_model/tests/test_ridge.py::test_class_weights\", \"sklearn/linear_model/tests/test_ridge.py::test_class_weight_vs_sample_weight[RidgeClassifier]\", \"sklearn/linear_model/tests/test_ridge.py::test_class_weight_vs_sample_weight[RidgeClassifierCV]\", \"sklearn/linear_model/tests/test_ridge.py::test_class_weights_cv\", \"sklearn/linear_model/tests/test_ridge.py::test_ridgecv_store_cv_values\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge_classifier_cv_store_cv_values\", \"sklearn/linear_model/tests/test_ridge.py::test_ridgecv_sample_weight\", \"sklearn/linear_model/tests/test_ridge.py::test_raises_value_error_if_sample_weights_greater_than_1d\", \"sklearn/linear_model/tests/test_ridge.py::test_sparse_design_with_sample_weights\", \"sklearn/linear_model/tests/test_ridge.py::test_ridgecv_int_alphas\", \"sklearn/linear_model/tests/test_ridge.py::test_ridgecv_negative_alphas\", \"sklearn/linear_model/tests/test_ridge.py::test_raises_value_error_if_solver_not_supported\", \"sklearn/linear_model/tests/test_ridge.py::test_sparse_cg_max_iter\", \"sklearn/linear_model/tests/test_ridge.py::test_n_iter\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge_fit_intercept_sparse\", \"sklearn/linear_model/tests/test_ridge.py::test_errors_and_values_helper\", \"sklearn/linear_model/tests/test_ridge.py::test_errors_and_values_svd_helper\", \"sklearn/linear_model/tests/test_ridge.py::test_ridge_classifier_no_support_multilabel\", \"sklearn/linear_model/tests/test_ridge.py::test_dtype_match\", \"sklearn/linear_model/tests/test_ridge.py::test_dtype_match_cholesky\", \"sklearn/model_selection/tests/test_search.py::test_validate_parameter_grid_input[0-TypeError-Parameter\", \"sklearn/model_selection/tests/test_search.py::test_validate_parameter_grid_input[input1-TypeError-Parameter\", \"sklearn/model_selection/tests/test_search.py::test_validate_parameter_grid_input[input2-TypeError-Parameter\", \"sklearn/model_selection/tests/test_search.py::test_parameter_grid\", \"sklearn/model_selection/tests/test_search.py::test_grid_search\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_with_fit_params\", \"sklearn/model_selection/tests/test_search.py::test_random_search_with_fit_params\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_no_score\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_score_method\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_groups\", \"sklearn/model_selection/tests/test_search.py::test_classes__property\", \"sklearn/model_selection/tests/test_search.py::test_trivial_cv_results_attr\", \"sklearn/model_selection/tests/test_search.py::test_no_refit\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_error\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_one_grid_point\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_when_param_grid_includes_range\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_bad_param_grid\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_sparse\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_sparse_scoring\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_precomputed_kernel\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_precomputed_kernel_error_nonsquare\", \"sklearn/model_selection/tests/test_search.py::test_refit\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_invalid_type\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_out_bound[RandomizedSearchCV--1]\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_out_bound[RandomizedSearchCV-2]\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_out_bound[GridSearchCV--1]\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_out_bound[GridSearchCV-2]\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_multi_metric\", \"sklearn/model_selection/tests/test_search.py::test_gridsearch_nd\", \"sklearn/model_selection/tests/test_search.py::test_X_as_list\", \"sklearn/model_selection/tests/test_search.py::test_y_as_list\", \"sklearn/model_selection/tests/test_search.py::test_pandas_input\", \"sklearn/model_selection/tests/test_search.py::test_unsupervised_grid_search\", \"sklearn/model_selection/tests/test_search.py::test_gridsearch_no_predict\", \"sklearn/model_selection/tests/test_search.py::test_param_sampler\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_cv_results\", \"sklearn/model_selection/tests/test_search.py::test_random_search_cv_results\", \"sklearn/model_selection/tests/test_search.py::test_search_iid_param\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_cv_results_multimetric\", \"sklearn/model_selection/tests/test_search.py::test_random_search_cv_results_multimetric\", \"sklearn/model_selection/tests/test_search.py::test_search_cv_results_rank_tie_breaking\", \"sklearn/model_selection/tests/test_search.py::test_search_cv_results_none_param\", \"sklearn/model_selection/tests/test_search.py::test_search_cv_timing\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_correct_score_results\", \"sklearn/model_selection/tests/test_search.py::test_fit_grid_point\", \"sklearn/model_selection/tests/test_search.py::test_pickle\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_with_multioutput_data\", \"sklearn/model_selection/tests/test_search.py::test_predict_proba_disabled\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_allows_nans\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_failing_classifier\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_failing_classifier_raise\", \"sklearn/model_selection/tests/test_search.py::test_parameters_sampler_replacement\", \"sklearn/model_selection/tests/test_search.py::test_stochastic_gradient_loss_param\", \"sklearn/model_selection/tests/test_search.py::test_search_train_scores_set_to_false\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_cv_splits_consistency\", \"sklearn/model_selection/tests/test_search.py::test_transform_inverse_transform_round_trip\", \"sklearn/model_selection/tests/test_search.py::test_custom_run_search\", \"sklearn/model_selection/tests/test_search.py::test__custom_fit_no_run_search\", \"sklearn/model_selection/tests/test_search.py::test_deprecated_grid_search_iid\", \"sklearn/model_selection/tests/test_search.py::test_empty_cv_iterator_error\", \"sklearn/model_selection/tests/test_search.py::test_random_search_bad_cv\", \"sklearn/neural_network/tests/test_mlp.py::test_alpha\", \"sklearn/neural_network/tests/test_mlp.py::test_fit\", \"sklearn/neural_network/tests/test_mlp.py::test_gradient\", \"sklearn/neural_network/tests/test_mlp.py::test_lbfgs_classification\", \"sklearn/neural_network/tests/test_mlp.py::test_lbfgs_regression\", \"sklearn/neural_network/tests/test_mlp.py::test_learning_rate_warmstart\", \"sklearn/neural_network/tests/test_mlp.py::test_multilabel_classification\", \"sklearn/neural_network/tests/test_mlp.py::test_multioutput_regression\", \"sklearn/neural_network/tests/test_mlp.py::test_partial_fit_classes_error\", \"sklearn/neural_network/tests/test_mlp.py::test_partial_fit_classification\", \"sklearn/neural_network/tests/test_mlp.py::test_partial_fit_unseen_classes\", \"sklearn/neural_network/tests/test_mlp.py::test_partial_fit_regression\", \"sklearn/neural_network/tests/test_mlp.py::test_partial_fit_errors\", \"sklearn/neural_network/tests/test_mlp.py::test_params_errors\", \"sklearn/neural_network/tests/test_mlp.py::test_predict_proba_binary\", \"sklearn/neural_network/tests/test_mlp.py::test_predict_proba_multiclass\", \"sklearn/neural_network/tests/test_mlp.py::test_predict_proba_multilabel\", \"sklearn/neural_network/tests/test_mlp.py::test_shuffle\", \"sklearn/neural_network/tests/test_mlp.py::test_sparse_matrices\", \"sklearn/neural_network/tests/test_mlp.py::test_tolerance\", \"sklearn/neural_network/tests/test_mlp.py::test_verbose_sgd\", \"sklearn/neural_network/tests/test_mlp.py::test_early_stopping\", \"sklearn/neural_network/tests/test_mlp.py::test_adaptive_learning_rate\", \"sklearn/neural_network/tests/test_mlp.py::test_warm_start\", \"sklearn/neural_network/tests/test_mlp.py::test_n_iter_no_change\", \"sklearn/neural_network/tests/test_mlp.py::test_n_iter_no_change_inf\", \"sklearn/tests/test_base.py::test_clone\", \"sklearn/tests/test_base.py::test_clone_2\", \"sklearn/tests/test_base.py::test_clone_buggy\", \"sklearn/tests/test_base.py::test_clone_empty_array\", \"sklearn/tests/test_base.py::test_clone_nan\", \"sklearn/tests/test_base.py::test_clone_sparse_matrices\", \"sklearn/tests/test_base.py::test_clone_estimator_types\", \"sklearn/tests/test_base.py::test_repr\", \"sklearn/tests/test_base.py::test_str\", \"sklearn/tests/test_base.py::test_get_params\", \"sklearn/tests/test_base.py::test_is_classifier\", \"sklearn/tests/test_base.py::test_set_params\", \"sklearn/tests/test_base.py::test_set_params_passes_all_parameters\", \"sklearn/tests/test_base.py::test_set_params_updates_valid_params\", \"sklearn/tests/test_base.py::test_score_sample_weight\", \"sklearn/tests/test_base.py::test_clone_pandas_dataframe\", \"sklearn/tests/test_base.py::test_pickle_version_warning_is_not_raised_with_matching_version\", \"sklearn/tests/test_base.py::test_pickle_version_warning_is_issued_upon_different_version\", \"sklearn/tests/test_base.py::test_pickle_version_warning_is_issued_when_no_version_info_in_pickle\", \"sklearn/tests/test_base.py::test_pickle_version_no_warning_is_issued_with_non_sklearn_estimator\", \"sklearn/tests/test_base.py::test_pickling_when_getstate_is_overwritten_by_mixin\", \"sklearn/tests/test_base.py::test_pickling_when_getstate_is_overwritten_by_mixin_outside_of_sklearn\", \"sklearn/tests/test_base.py::test_pickling_works_when_getstate_is_overwritten_in_the_child_class\", \"sklearn/tests/test_base.py::test_tag_inheritance\", \"sklearn/tests/test_dummy.py::test_most_frequent_and_prior_strategy\", \"sklearn/tests/test_dummy.py::test_most_frequent_and_prior_strategy_multioutput\", \"sklearn/tests/test_dummy.py::test_stratified_strategy\", \"sklearn/tests/test_dummy.py::test_stratified_strategy_multioutput\", \"sklearn/tests/test_dummy.py::test_uniform_strategy\", \"sklearn/tests/test_dummy.py::test_uniform_strategy_multioutput\", \"sklearn/tests/test_dummy.py::test_string_labels\", \"sklearn/tests/test_dummy.py::test_classifier_score_with_None[y0-y_test0]\", \"sklearn/tests/test_dummy.py::test_classifier_score_with_None[y1-y_test1]\", \"sklearn/tests/test_dummy.py::test_classifier_prediction_independent_of_X[stratified]\", \"sklearn/tests/test_dummy.py::test_classifier_prediction_independent_of_X[most_frequent]\", \"sklearn/tests/test_dummy.py::test_classifier_prediction_independent_of_X[prior]\", \"sklearn/tests/test_dummy.py::test_classifier_prediction_independent_of_X[uniform]\", \"sklearn/tests/test_dummy.py::test_classifier_prediction_independent_of_X[constant]\", \"sklearn/tests/test_dummy.py::test_classifier_exceptions\", \"sklearn/tests/test_dummy.py::test_mean_strategy_regressor\", \"sklearn/tests/test_dummy.py::test_mean_strategy_multioutput_regressor\", \"sklearn/tests/test_dummy.py::test_regressor_exceptions\", \"sklearn/tests/test_dummy.py::test_median_strategy_regressor\", \"sklearn/tests/test_dummy.py::test_median_strategy_multioutput_regressor\", \"sklearn/tests/test_dummy.py::test_quantile_strategy_regressor\", \"sklearn/tests/test_dummy.py::test_quantile_strategy_multioutput_regressor\", \"sklearn/tests/test_dummy.py::test_quantile_invalid\", \"sklearn/tests/test_dummy.py::test_quantile_strategy_empty_train\", \"sklearn/tests/test_dummy.py::test_constant_strategy_regressor\", \"sklearn/tests/test_dummy.py::test_constant_strategy_multioutput_regressor\", \"sklearn/tests/test_dummy.py::test_y_mean_attribute_regressor\", \"sklearn/tests/test_dummy.py::test_unknown_strategey_regressor\", \"sklearn/tests/test_dummy.py::test_constants_not_specified_regressor\", \"sklearn/tests/test_dummy.py::test_constant_size_multioutput_regressor\", \"sklearn/tests/test_dummy.py::test_constant_strategy\", \"sklearn/tests/test_dummy.py::test_constant_strategy_multioutput\", \"sklearn/tests/test_dummy.py::test_constant_strategy_exceptions\", \"sklearn/tests/test_dummy.py::test_classification_sample_weight\", \"sklearn/tests/test_dummy.py::test_constant_strategy_sparse_target\", \"sklearn/tests/test_dummy.py::test_uniform_strategy_sparse_target_warning\", \"sklearn/tests/test_dummy.py::test_stratified_strategy_sparse_target\", \"sklearn/tests/test_dummy.py::test_most_frequent_and_prior_strategy_sparse_target\", \"sklearn/tests/test_dummy.py::test_dummy_regressor_sample_weight\", \"sklearn/tests/test_dummy.py::test_dummy_regressor_on_3D_array\", \"sklearn/tests/test_dummy.py::test_dummy_classifier_on_3D_array\", \"sklearn/tests/test_dummy.py::test_dummy_regressor_return_std\", \"sklearn/tests/test_dummy.py::test_regressor_score_with_None[y0-y_test0]\", \"sklearn/tests/test_dummy.py::test_regressor_score_with_None[y1-y_test1]\", \"sklearn/tests/test_dummy.py::test_regressor_prediction_independent_of_X[mean]\", \"sklearn/tests/test_dummy.py::test_regressor_prediction_independent_of_X[median]\", \"sklearn/tests/test_dummy.py::test_regressor_prediction_independent_of_X[quantile]\", \"sklearn/tests/test_dummy.py::test_regressor_prediction_independent_of_X[constant]\", \"sklearn/tests/test_dummy.py::test_dtype_of_classifier_probas[stratified]\", \"sklearn/tests/test_dummy.py::test_dtype_of_classifier_probas[most_frequent]\", \"sklearn/tests/test_dummy.py::test_dtype_of_classifier_probas[prior]\", \"sklearn/tests/test_dummy.py::test_dtype_of_classifier_probas[uniform]\", \"sklearn/tests/test_dummy.py::test_dtype_of_classifier_probas[constant]\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.990149",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}