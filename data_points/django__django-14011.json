{
  "repo": "django/django",
  "instance_id": "django__django-14011",
  "base_commit": "e4430f22c8e3d29ce5d9d0263fba57121938d06d",
  "patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -16,6 +16,7 @@\n from django.core.exceptions import ImproperlyConfigured\n from django.core.handlers.wsgi import LimitedStream\n from django.core.wsgi import get_wsgi_application\n+from django.db import connections\n from django.utils.module_loading import import_string\n \n __all__ = ('WSGIServer', 'WSGIRequestHandler')\n@@ -81,6 +82,28 @@ class ThreadedWSGIServer(socketserver.ThreadingMixIn, WSGIServer):\n     \"\"\"A threaded version of the WSGIServer\"\"\"\n     daemon_threads = True\n \n+    def __init__(self, *args, connections_override=None, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.connections_override = connections_override\n+\n+    # socketserver.ThreadingMixIn.process_request() passes this method as\n+    # the target to a new Thread object.\n+    def process_request_thread(self, request, client_address):\n+        if self.connections_override:\n+            # Override this thread's database connections with the ones\n+            # provided by the parent thread.\n+            for alias, conn in self.connections_override.items():\n+                connections[alias] = conn\n+        super().process_request_thread(request, client_address)\n+\n+    def _close_connections(self):\n+        # Used for mocking in tests.\n+        connections.close_all()\n+\n+    def close_request(self, request):\n+        self._close_connections()\n+        super().close_request(request)\n+\n \n class ServerHandler(simple_server.ServerHandler):\n     http_version = '1.1'\ndiff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py\n--- a/django/db/backends/sqlite3/features.py\n+++ b/django/db/backends/sqlite3/features.py\n@@ -83,6 +83,7 @@ def django_test_skips(self):\n                 \"the sqlite backend's close() method is a no-op when using an \"\n                 \"in-memory database\": {\n                     'servers.test_liveserverthread.LiveServerThreadTest.test_closes_connections',\n+                    'servers.tests.LiveServerTestCloseConnectionTest.test_closes_connections',\n                 },\n             })\n         return skips\n",
  "test_patch": "diff --git a/django/test/testcases.py b/django/test/testcases.py\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1513,11 +1513,12 @@ def run(self):\n         finally:\n             connections.close_all()\n \n-    def _create_server(self):\n+    def _create_server(self, connections_override=None):\n         return self.server_class(\n             (self.host, self.port),\n             QuietWSGIRequestHandler,\n             allow_reuse_address=False,\n+            connections_override=connections_override,\n         )\n \n     def terminate(self):\n@@ -1553,21 +1554,28 @@ def allowed_host(cls):\n         return cls.host\n \n     @classmethod\n-    def setUpClass(cls):\n-        super().setUpClass()\n+    def _make_connections_override(cls):\n         connections_override = {}\n         for conn in connections.all():\n             # If using in-memory sqlite databases, pass the connections to\n             # the server thread.\n             if conn.vendor == 'sqlite' and conn.is_in_memory_db():\n-                # Explicitly enable thread-shareability for this connection\n-                conn.inc_thread_sharing()\n                 connections_override[conn.alias] = conn\n+        return connections_override\n \n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n         cls._live_server_modified_settings = modify_settings(\n             ALLOWED_HOSTS={'append': cls.allowed_host},\n         )\n         cls._live_server_modified_settings.enable()\n+\n+        connections_override = cls._make_connections_override()\n+        for conn in connections_override.values():\n+            # Explicitly enable thread-shareability for this connection.\n+            conn.inc_thread_sharing()\n+\n         cls.server_thread = cls._create_server_thread(connections_override)\n         cls.server_thread.daemon = True\n         cls.server_thread.start()\n@@ -1593,7 +1601,7 @@ def _create_server_thread(cls, connections_override):\n     def _tearDownClassInternal(cls):\n         # Terminate the live server's thread.\n         cls.server_thread.terminate()\n-        # Restore sqlite in-memory database connections' non-shareability.\n+        # Restore shared connections' non-shareability.\n         for conn in cls.server_thread.connections_override.values():\n             conn.dec_thread_sharing()\n \ndiff --git a/tests/servers/tests.py b/tests/servers/tests.py\n--- a/tests/servers/tests.py\n+++ b/tests/servers/tests.py\n@@ -4,13 +4,15 @@\n import errno\n import os\n import socket\n+import threading\n from http.client import HTTPConnection\n from urllib.error import HTTPError\n from urllib.parse import urlencode\n from urllib.request import urlopen\n \n from django.conf import settings\n-from django.core.servers.basehttp import WSGIServer\n+from django.core.servers.basehttp import ThreadedWSGIServer, WSGIServer\n+from django.db import DEFAULT_DB_ALIAS, connections\n from django.test import LiveServerTestCase, override_settings\n from django.test.testcases import LiveServerThread, QuietWSGIRequestHandler\n \n@@ -40,6 +42,71 @@ def urlopen(self, url):\n         return urlopen(self.live_server_url + url)\n \n \n+class CloseConnectionTestServer(ThreadedWSGIServer):\n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        # This event is set right after the first time a request closes its\n+        # database connections.\n+        self._connections_closed = threading.Event()\n+\n+    def _close_connections(self):\n+        super()._close_connections()\n+        self._connections_closed.set()\n+\n+\n+class CloseConnectionTestLiveServerThread(LiveServerThread):\n+\n+    server_class = CloseConnectionTestServer\n+\n+    def _create_server(self, connections_override=None):\n+        return super()._create_server(connections_override=self.connections_override)\n+\n+\n+class LiveServerTestCloseConnectionTest(LiveServerBase):\n+\n+    server_thread_class = CloseConnectionTestLiveServerThread\n+\n+    @classmethod\n+    def _make_connections_override(cls):\n+        conn = connections[DEFAULT_DB_ALIAS]\n+        cls.conn = conn\n+        cls.old_conn_max_age = conn.settings_dict['CONN_MAX_AGE']\n+        # Set the connection's CONN_MAX_AGE to None to simulate the\n+        # CONN_MAX_AGE setting being set to None on the server. This prevents\n+        # Django from closing the connection and allows testing that\n+        # ThreadedWSGIServer closes connections.\n+        conn.settings_dict['CONN_MAX_AGE'] = None\n+        # Pass a database connection through to the server to check it is being\n+        # closed by ThreadedWSGIServer.\n+        return {DEFAULT_DB_ALIAS: conn}\n+\n+    @classmethod\n+    def tearDownConnectionTest(cls):\n+        cls.conn.settings_dict['CONN_MAX_AGE'] = cls.old_conn_max_age\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        cls.tearDownConnectionTest()\n+        super().tearDownClass()\n+\n+    def test_closes_connections(self):\n+        # The server's request thread sets this event after closing\n+        # its database connections.\n+        closed_event = self.server_thread.httpd._connections_closed\n+        conn = self.conn\n+        # Open a connection to the database.\n+        conn.connect()\n+        self.assertIsNotNone(conn.connection)\n+        with self.urlopen('/model_view/') as f:\n+            # The server can access the database.\n+            self.assertEqual(f.read().splitlines(), [b'jane', b'robert'])\n+        # Wait for the server's request thread to close the connection.\n+        # A timeout of 0.1 seconds should be more than enough. If the wait\n+        # times out, the assertion after should fail.\n+        closed_event.wait(timeout=0.1)\n+        self.assertIsNone(conn.connection)\n+\n+\n class FailingLiveServerThread(LiveServerThread):\n     def _create_server(self):\n         raise RuntimeError('Error creating server.')\n",
  "problem_statement": "LiveServerTestCase's ThreadedWSGIServer doesn't close database connections after each thread\nDescription\n\t\nIn Django 2.2.17, I'm seeing the reappearance of #22414 after it was fixed in 1.11. #22414 is the issue where the following error will occur at the conclusion of a test run when destroy_test_db() is called:\nOperationalError: database \"test_myapp\" is being accessed by other users\nThis error happens when not all of the database connections are closed. In my case today, I'm seeing this when running a single test that is a LiveServerTestCase. I see it in approximately half of my test runs, so it's not wholly deterministic (it's a race condition).\nThere weren't a whole lot of changes in the LiveServerTestCase-related code between 1.11 and 2.2, so I looked at them individually.\nIssue #20238 added threading support to LiveServerTestCase. One of the changes it made ​was changing LiveServerThread to use ThreadedWSGIServer instead of WSGIServer. LiveServerThread is used by LiveServerTestCase.\nWhen I tried modifying LiveServerThread to use the old WSGIServer, I could no longer reproduce the above error. My changes were as follows:\nclass NonThreadedLiveServerThread(LiveServerThread):\n\tdef _create_server(self):\n\t\treturn WSGIServer((self.host, self.port), QuietWSGIRequestHandler, allow_reuse_address=False)\nclass MyTest(LiveServerTestCase):\n\tserver_thread_class = NonThreadedLiveServerThread\nThe CPython docs ​describe ThreadingMixIn as defining an attribute \"which indicates whether or not the server should wait for thread termination.\"\nConsistent with what I described above, Aymeric said the following on ticket #20238, seeming to foreshadow issues like this one:\nmore threading will certainly create more race conditions on shutdown, especially when it comes to the database connections — it's taken months to eliminate most from LiveServerTestCase, and I'm sure there are still some left,\n",
  "hints_text": "I wonder if this issue is because ThreadingMixIn creates a new thread for each request, but those threads don't close their database connections at their conclusion, e.g. like LiveServerThread does. Here is the code in CPython for ThreadingMixIn's process_request() and server_close(): ​https://github.com/python/cpython/blob/v3.9.1/Lib/socketserver.py#L656-L674 And here is the code for Django's LiveServerThread.run(), which does close its connections (which was the change made for #22414): ​https://github.com/django/django/blob/3f8979e37b6c498101d09a583ccc521d7f2879e5/django/test/testcases.py#L1460-L1484 (I wonder if it's also a problem that ThreadingMixIn doesn't implement the same thread-sharing logic that LiveServerThread does, which is needed for SQLite.)\nHere is some more info I've collected. For each request, Django's ThreadedWSGIServer calls its process_request() method, which lives in CPython's ThreadingMixIn. In this method, ThreadingMixIn creates a new thread with target=self.process_request_thread. The ThreadingMixIn.process_request_thread() method looks like this: def process_request_thread(self, request, client_address): \"\"\"Same as in BaseServer but as a thread. In addition, exception handling is done here. \"\"\" try: self.finish_request(request, client_address) except Exception: self.handle_error(request, client_address) finally: self.shutdown_request(request) The shutdown_request() method has its implementation inside CPython's socketserver.TCPServer. That method looks like this (close_request() is also included here): def shutdown_request(self, request): \"\"\"Called to shutdown and close an individual request.\"\"\" try: #explicitly shutdown. socket.close() merely releases #the socket and waits for GC to perform the actual close. request.shutdown(socket.SHUT_WR) except OSError: pass #some platforms may raise ENOTCONN here self.close_request(request) def close_request(self, request): \"\"\"Called to clean up an individual request.\"\"\" request.close() Thus, if we wanted, database connections could perhaps be closed inside close_request(). This could be done by adding a suitable implementation to ThreadedWSGIServer, thus overriding socketserver.TCPServer.close_request() . The thread-sharing needed for SQLite could probably also be handled by adding suitable method overrides to ThreadedWSGIServer. By the way, since LiveServerThread currently creates its server with a hard-coded class like this: def _create_server(self): return ThreadedWSGIServer((self.host, self.port), QuietWSGIRequestHandler, allow_reuse_address=False) it would be easier for users if it instead got the class from a class attribute, e.g. def _create_server(self): return self.http_server_class((self.host, self.port), QuietWSGIRequestHandler, allow_reuse_address=False) That would let people patch ThreadedWSGIServer more easily, if needed. This is similar to how LiveServerTestCase has a server_thread_class class attribute currently set to LiveServerThread (with the attribute added in #26976).\nI haven't reproduced myself but accepting on the basis on the very detailed analysis.\nFYI, I see that the lack of the SQLite thread-sharing logic I mentioned above has previously been reported here: #29062 (but without a root cause analysis / proposed fix). I will let that issue know my findings here.\nIt looks like this issue's fix might be as simple as adding the following method to Django's ThreadedWSGIServer (code: ​https://github.com/django/django/blob/50a5f8840fa564dcefdb1fa5c58f06fcd472ee70/django/core/servers/basehttp.py#L80-L82) (it seems to be fixing it for me): from django.db import connections def close_request(self, request): \"\"\"Called to clean up an individual request.\"\"\" connections.close_all() super().close_request(request) CPython's socketserver module documentation confirms the method is meant to be overridden: ​https://github.com/python/cpython/blob/v3.9.1/Lib/socketserver.py#L165-L175\nI just filed ​PR #14002 to let people customize the ThreadedWSGIServer used by LiveServerThread more easily. This is what I suggested above at the end of this comment. This will make it easier for people e.g. to implement workarounds whenever issues like the current one are found with the server used by LiveServerThread. (This is not the first time that the server used needed to be altered.)\nIn 91c243f8: Refs #32416 -- Added LiveServerThread.server_class to ease subclassing.\nI posted a PR for this: ​https://github.com/django/django/pull/14011",
  "created_at": "2021-02-15T06:15:21Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_live_server_url_is_class_property (servers.tests.LiveServerAddress)\", \"Data written to the database by a view can be read.\", \"Fixtures are properly loaded and visible to the live server thread.\", \"test_check_model_instance_from_subview (servers.tests.LiveServerThreadedTests)\", \"test_view_calls_subview (servers.tests.LiveServerThreadedTests)\", \"test_404 (servers.tests.LiveServerViews)\", \"A HTTP 1.1 server is supposed to support keep-alive. Since our\", \"test_environ (servers.tests.LiveServerViews)\", \"test_keep_alive_connection_clears_previous_request_data (servers.tests.LiveServerViews)\", \"See `test_closes_connection_without_content_length` for details. This\", \"test_media_files (servers.tests.LiveServerViews)\", \"LiveServerTestCase reports a 404 status code when HTTP client\", \"Launched server serves with HTTP 1.1.\", \"test_static_files (servers.tests.LiveServerViews)\", \"test_view (servers.tests.LiveServerViews)\", \"Each LiveServerTestCase binds to a unique port or fails to start a\", \"LiveServerTestCase.port customizes the server's port.\"]",
  "PASS_TO_PASS": "[\"test_set_up_class (servers.tests.LiveServerTestCaseSetupTest)\", \"Contrast to\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.675756",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}