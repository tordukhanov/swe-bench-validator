{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13087",
  "base_commit": "a73260db9c0b63d582ef4a7f3c696b68058c1c43",
  "patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -519,7 +519,8 @@ def predict(self, T):\n         return expit(-(self.a_ * T + self.b_))\n \n \n-def calibration_curve(y_true, y_prob, normalize=False, n_bins=5):\n+def calibration_curve(y_true, y_prob, normalize=False, n_bins=5,\n+                      strategy='uniform'):\n     \"\"\"Compute true and predicted probabilities for a calibration curve.\n \n      The method assumes the inputs come from a binary classifier.\n@@ -546,6 +547,14 @@ def calibration_curve(y_true, y_prob, normalize=False, n_bins=5):\n         points (i.e. without corresponding values in y_prob) will not be\n         returned, thus there may be fewer than n_bins in the return value.\n \n+    strategy : {'uniform', 'quantile'}, (default='uniform')\n+        Strategy used to define the widths of the bins.\n+\n+        uniform\n+            All bins have identical widths.\n+        quantile\n+            All bins have the same number of points.\n+\n     Returns\n     -------\n     prob_true : array, shape (n_bins,) or smaller\n@@ -572,7 +581,16 @@ def calibration_curve(y_true, y_prob, normalize=False, n_bins=5):\n \n     y_true = _check_binary_probabilistic_predictions(y_true, y_prob)\n \n-    bins = np.linspace(0., 1. + 1e-8, n_bins + 1)\n+    if strategy == 'quantile':  # Determine bin edges by distribution of data\n+        quantiles = np.linspace(0, 1, n_bins + 1)\n+        bins = np.percentile(y_prob, quantiles * 100)\n+        bins[-1] = bins[-1] + 1e-8\n+    elif strategy == 'uniform':\n+        bins = np.linspace(0., 1. + 1e-8, n_bins + 1)\n+    else:\n+        raise ValueError(\"Invalid entry to 'strategy' input. Strategy \"\n+                         \"must be either 'quantile' or 'uniform'.\")\n+\n     binids = np.digitize(y_prob, bins) - 1\n \n     bin_sums = np.bincount(binids, weights=y_prob, minlength=len(bins))\n",
  "test_patch": "diff --git a/sklearn/tests/test_calibration.py b/sklearn/tests/test_calibration.py\n--- a/sklearn/tests/test_calibration.py\n+++ b/sklearn/tests/test_calibration.py\n@@ -259,6 +259,21 @@ def test_calibration_curve():\n     assert_raises(ValueError, calibration_curve, [1.1], [-0.1],\n                   normalize=False)\n \n+    # test that quantiles work as expected\n+    y_true2 = np.array([0, 0, 0, 0, 1, 1])\n+    y_pred2 = np.array([0., 0.1, 0.2, 0.5, 0.9, 1.])\n+    prob_true_quantile, prob_pred_quantile = calibration_curve(\n+        y_true2, y_pred2, n_bins=2, strategy='quantile')\n+\n+    assert len(prob_true_quantile) == len(prob_pred_quantile)\n+    assert len(prob_true_quantile) == 2\n+    assert_almost_equal(prob_true_quantile, [0, 2 / 3])\n+    assert_almost_equal(prob_pred_quantile, [0.1, 0.8])\n+\n+    # Check that error is raised when invalid strategy is selected\n+    assert_raises(ValueError, calibration_curve, y_true2, y_pred2,\n+                  strategy='percentile')\n+\n \n def test_calibration_nan_imputer():\n     \"\"\"Test that calibration can accept nan\"\"\"\n",
  "problem_statement": "Feature request: support for arbitrary bin spacing in calibration.calibration_curve\n#### Description\r\nI was using [`sklearn.calibration.calibration_curve`](https://scikit-learn.org/stable/modules/generated/sklearn.calibration.calibration_curve.html), and it currently accepts an `n_bins` parameter to specify the number of bins to evenly partition the probability space between 0 and 1.\r\n\r\nHowever, I am using this in combination with a gradient boosting model in which the probabilities are very uncalibrated, and most of the predictions are close to 0. When I use the calibrated classifier, the result is very noisy because there are many data points in some bins and few, if any, in others (see example below).\r\n\r\nIn the code below, I made a work-around to do what I want and show a plot of my output (in semilog space because of the skewed distribution). I haven't contributed to a large open-source project before, but if there's agreement this would be a useful feature, I would be happy to try to draft up a PR.\r\n\r\n#### My work-around\r\n```python\r\nimport numpy as np\r\n\r\ndef my_calibration_curve(y_true, y_prob, my_bins):\r\n    prob_true = []\r\n    prob_pred = []\r\n    for i in range(len(my_bins) - 1):\r\n        idx_use = np.logical_and(y_prob < my_bins[i+1], y_prob >= my_bins[i])\r\n        prob_true.append(y_true[idx_use].mean())\r\n        prob_pred.append(y_pred[idx_use].mean())\r\n    return prob_true, prob_pred\r\n\r\n# example bins:\r\n# my_bins = np.concatenate([[0], np.logspace(-3, 0, 10)])\r\n```\r\n\r\n#### Results comparison\r\nNotice the large disparity in results between the different bins chosen. For this reason, I think the user should be able to choose the bin edges, as in numpy's or matplotlib's [histogram](https://docs.scipy.org/doc/numpy/reference/generated/numpy.histogram.html) functions.\r\n\r\n![image](https://user-images.githubusercontent.com/7298871/52183657-d1e18c80-27be-11e9-9c84-011c043e0978.png)\r\n\r\n\r\n#### Versions\r\n\r\n```\r\nDarwin-18.0.0-x86_64-i386-64bit\r\nPython 3.6.4 |Anaconda custom (x86_64)| (default, Jan 16 2018, 12:04:33) \r\n[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]\r\nNumPy 1.15.1\r\nSciPy 1.1.0\r\nScikit-Learn 0.19.1\r\n```\r\n\n",
  "hints_text": "It actually sounds like the problem is not the number of bins, but that\nbins should be constructed to reflect the distribution, rather than the\nrange, of the input. I think we should still use n_bins as the primary\nparameter, but allow those bins to be quantile based, providing a strategy\noption for discretisation (\nhttps://scikit-learn.org/stable/auto_examples/preprocessing/plot_discretization_strategies.html\n).\n\nMy only question is whether this is still true to the meaning of\n\"calibration curve\" / \"reliability curve\"\n\nQuantile bins seem a good default here...\n\nYup, quantile bins would have my desired effect. I just thought it would be nice to allow more flexibility by allowing a `bins` parameter, but I suppose it's not necessary.\r\n\r\nI think this still satisfies \"calibration curve.\" I don't see any reason that a \"calibration\" needs to have evenly-spaced bins. Often it's natural to do things in a log-spaced manner.\nI'm happy to see a pr for quantiles here\nSweet. I'll plan to do work on it next weekend",
  "created_at": "2019-02-04T08:08:07Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/tests/test_calibration.py::test_calibration_curve\"]",
  "PASS_TO_PASS": "[\"sklearn/tests/test_calibration.py::test_calibration\", \"sklearn/tests/test_calibration.py::test_sample_weight\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass\", \"sklearn/tests/test_calibration.py::test_calibration_prefit\", \"sklearn/tests/test_calibration.py::test_sigmoid_calibration\", \"sklearn/tests/test_calibration.py::test_calibration_nan_imputer\", \"sklearn/tests/test_calibration.py::test_calibration_prob_sum\", \"sklearn/tests/test_calibration.py::test_calibration_less_classes\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.979996",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}