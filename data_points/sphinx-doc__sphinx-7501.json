{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7501",
  "base_commit": "50d2d289e150cb429de15770bdd48a723de8c45d",
  "patch": "diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -789,6 +789,8 @@ def resolve_xref(self, env: \"BuildEnvironment\", fromdocname: str, builder: \"Buil\n                           RemovedInSphinx40Warning)\n             domain = env.get_domain('citation')\n             return domain.resolve_xref(env, fromdocname, builder, typ, target, node, contnode)\n+        elif typ == 'term':\n+            resolver = self._resolve_term_xref\n         else:\n             resolver = self._resolve_obj_xref\n \n@@ -923,6 +925,28 @@ def _resolve_option_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n         return make_refnode(builder, fromdocname, docname,\n                             labelid, contnode)\n \n+    def _resolve_term_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n+                           builder: \"Builder\", typ: str, target: str,\n+                           node: pending_xref, contnode: Element) -> Element:\n+        result = self._resolve_obj_xref(env, fromdocname, builder, typ,\n+                                        target, node, contnode)\n+        if result:\n+            return result\n+        else:\n+            for objtype, term in self.objects:\n+                if objtype == 'term' and term.lower() == target.lower():\n+                    docname, labelid = self.objects[objtype, term]\n+                    logger.warning(__('term %s not found in case sensitive match.'\n+                                      'made a reference to %s instead.'),\n+                                   target, term, location=node, type='ref', subtype='term')\n+                    break\n+            else:\n+                docname, labelid = '', ''\n+            if not docname:\n+                return None\n+            return make_refnode(builder, fromdocname, docname,\n+                                labelid, contnode)\n+\n     def _resolve_obj_xref(self, env: \"BuildEnvironment\", fromdocname: str,\n                           builder: \"Builder\", typ: str, target: str,\n                           node: pending_xref, contnode: Element) -> Element:\n",
  "test_patch": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -141,12 +141,23 @@ def test_glossary(app):\n                 [nodes.definition, nodes.paragraph, \"description\"])\n \n     # index\n-    objects = list(app.env.get_domain(\"std\").get_objects())\n+    domain = app.env.get_domain(\"std\")\n+    objects = list(domain.get_objects())\n     assert (\"term1\", \"term1\", \"term\", \"index\", \"term-term1\", -1) in objects\n     assert (\"TERM2\", \"TERM2\", \"term\", \"index\", \"term-TERM2\", -1) in objects\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n+    # term reference (case sensitive)\n+    refnode = domain.resolve_xref(app.env, 'index', app.builder, 'term', 'term1',\n+                                  pending_xref(), nodes.paragraph())\n+    assert_node(refnode, nodes.reference, refid=\"term-term1\")\n+\n+    # term reference (case insensitive)\n+    refnode = domain.resolve_xref(app.env, 'index', app.builder, 'term', 'term2',\n+                                  pending_xref(), nodes.paragraph())\n+    assert_node(refnode, nodes.reference, refid=\"term-TERM2\")\n+\n \n def test_glossary_warning(app, status, warning):\n     # empty line between terms\n",
  "problem_statement": "glossary duplicate term with a different case\n**Describe the bug**\r\n```\r\nWarning, treated as error:\r\ndoc/glossary.rst:243:duplicate term description of mysql, other instance in glossary\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n[.travis.yml#L168](https://github.com/phpmyadmin/phpmyadmin/blob/f7cc383674b7099190771b1db510c62bfbbf89a7/.travis.yml#L168)\r\n```\r\n$ git clone --depth 1 https://github.com/phpmyadmin/phpmyadmin.git\r\n$ cd doc\r\n$ pip install 'Sphinx'\r\n$ make html\r\n```\r\n\r\n**Expected behavior**\r\nMySQL != mysql term right ?\r\n\r\n**Your project**\r\nhttps://github.com/phpmyadmin/phpmyadmin/blame/master/doc/glossary.rst#L234\r\n\r\n\r\n**Environment info**\r\n- OS: Unix\r\n- Python version: 3.6\r\n- Sphinx version: 3.0.0\r\n\r\n**Additional context**\r\nDid occur some hours ago, maybe you just released the version\r\n\r\n- https://travis-ci.org/github/williamdes/phpmyadmintest/jobs/671352365#L328\r\n\r\n\n",
  "hints_text": "Sorry for the inconvenience. Indeed, this must be a bug. I'll take a look this later.\nThank you for fixing it, let me know when a release it done so I can restart my builds\n@williamdes  Please follow #7453. I'll work for release maybe tomorrow.\nThank you :rocket: \r\nFrom the PR I could see linked, did you add a test case for what I sent ?\r\n\r\n```\r\nMySQL\r\n   blablabla\r\n\r\nmysql\r\n   blablabla duplicate in lowercase\r\n\r\n```\nNo. The reason of this problem is that sphinx makes the keywords downcase on storing to the internal database. So it's okay only to confirm the stored keyword is not downcased.\nOkay, I understand\nSo is this change on purpose?\r\n\r\nI mean, do we have to change the casing of all terms on all our projects testing site with `-W`, or e.g. travis will fail?\nNo, the change was not intended. And it was fixed at 3.0.1.\nFor a project of mine, it doesn't look fixed.\r\n\r\nSee these 2 travis-builds of 2 successive commits, then only difference being the casing of the terms [has been equalized](https://github.com/ankostis/wltp/compare/865cf5dd1eba...f742e9424702).\r\n\r\n- [terms with different casing](https://travis-ci.org/github/ankostis/wltp/jobs/676281731): \r\n- [terms casing all equal](https://travis-ci.org/github/ankostis/wltp/jobs/676292063)\r\n\r\nYou maych check the pip-list to verify that sphinx-3.0.1 it is, indeed.\nI only had to fix references to the glossary but not the glossary itself\r\nhttps://github.com/phpmyadmin/phpmyadmin/commit/41c1e360d4c162a28e8c6f0949f47aaf467cb2cd\nSeems a bit crap to introduce a breaking change on a point release. This breaks resolving terms in a case insensitive fashion.\nOkay, I understand what you're saying. It is also not an intended change. Now they become case-sensitive. But they should keep working. I'll work for it soon.",
  "created_at": "2020-04-18T09:28:50Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"tests/test_domain_std.py::test_glossary\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_std.py::test_process_doc_handle_figure_caption\", \"tests/test_domain_std.py::test_process_doc_handle_table_title\", \"tests/test_domain_std.py::test_get_full_qualified_name\", \"tests/test_domain_std.py::test_glossary_warning\", \"tests/test_domain_std.py::test_glossary_comment\", \"tests/test_domain_std.py::test_glossary_comment2\", \"tests/test_domain_std.py::test_glossary_sorted\", \"tests/test_domain_std.py::test_glossary_alphanumeric\", \"tests/test_domain_std.py::test_glossary_conflicted_labels\", \"tests/test_domain_std.py::test_cmdoption\", \"tests/test_domain_std.py::test_multiple_cmdoptions\", \"tests/test_domain_std.py::test_disabled_docref\"]",
  "environment_setup_commit": "50d2d289e150cb429de15770bdd48a723de8c45d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.041432",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}