{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-16906",
  "base_commit": "5158ecf2cb5b926f0f6421aab7b0279280305554",
  "patch": "diff --git a/sympy/matrices/expressions/hadamard.py b/sympy/matrices/expressions/hadamard.py\n--- a/sympy/matrices/expressions/hadamard.py\n+++ b/sympy/matrices/expressions/hadamard.py\n@@ -174,7 +174,7 @@ def canonicalize(x):\n \n     >>> X = HadamardProduct(A, OneMatrix(2, 2))\n     >>> X\n-    A.*OneMatrix(2, 2)\n+    A.*1\n     >>> canonicalize(X)\n     A\n \ndiff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1408,10 +1408,6 @@ def _print_Symbol(self, expr, style='plain'):\n \n     _print_RandomSymbol = _print_Symbol\n \n-    def _print_MatrixSymbol(self, expr):\n-        return self._print_Symbol(expr,\n-                                  style=self._settings['mat_symbol_style'])\n-\n     def _deal_with_super_sub(self, string):\n         if '{' in string:\n             return string\n@@ -1594,14 +1590,21 @@ def _print_MatPow(self, expr):\n         else:\n             return \"%s^{%s}\" % (self._print(base), self._print(exp))\n \n+    def _print_MatrixSymbol(self, expr):\n+        return self._print_Symbol(expr, style=self._settings[\n+            'mat_symbol_style'])\n+\n     def _print_ZeroMatrix(self, Z):\n-        return r\"\\mathbb{0}\"\n+        return r\"\\mathbb{0}\" if self._settings[\n+            'mat_symbol_style'] == 'plain' else r\"\\mathbf{0}\"\n \n     def _print_OneMatrix(self, O):\n-        return r\"\\mathbb{1}\"\n+        return r\"\\mathbb{1}\" if self._settings[\n+            'mat_symbol_style'] == 'plain' else r\"\\mathbf{1}\"\n \n     def _print_Identity(self, I):\n-        return r\"\\mathbb{I}\"\n+        return r\"\\mathbb{I}\" if self._settings[\n+            'mat_symbol_style'] == 'plain' else r\"\\mathbf{I}\"\n \n     def _print_NDimArray(self, expr):\n \ndiff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -1684,6 +1684,11 @@ def _print_ZeroMatrix(self, Z):\n         x.appendChild(self.dom.createTextNode('&#x1D7D8'))\n         return x\n \n+    def _print_OneMatrix(self, Z):\n+        x = self.dom.createElement('mn')\n+        x.appendChild(self.dom.createTextNode('&#x1D7D9'))\n+        return x\n+\n     def _print_Identity(self, I):\n         x = self.dom.createElement('mi')\n         x.appendChild(self.dom.createTextNode('&#x1D540;'))\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -845,6 +845,24 @@ def _print_MatMul(self, expr):\n \n         return prettyForm.__mul__(*args)\n \n+    def _print_Identity(self, expr):\n+        if self._use_unicode:\n+            return prettyForm(u'\\N{MATHEMATICAL DOUBLE-STRUCK CAPITAL I}')\n+        else:\n+            return prettyForm('I')\n+\n+    def _print_ZeroMatrix(self, expr):\n+        if self._use_unicode:\n+            return prettyForm(u'\\N{MATHEMATICAL DOUBLE-STRUCK DIGIT ZERO}')\n+        else:\n+            return prettyForm('0')\n+\n+    def _print_OneMatrix(self, expr):\n+        if self._use_unicode:\n+            return prettyForm(u'\\N{MATHEMATICAL DOUBLE-STRUCK DIGIT ONE}')\n+        else:\n+            return prettyForm('1')\n+\n     def _print_DotProduct(self, expr):\n         args = list(expr.args)\n \ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -723,6 +723,9 @@ def _print_Identity(self, expr):\n     def _print_ZeroMatrix(self, expr):\n         return \"0\"\n \n+    def _print_OneMatrix(self, expr):\n+        return \"1\"\n+\n     def _print_Predicate(self, expr):\n         return \"Q.%s\" % expr.name\n \n",
  "test_patch": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6691,3 +6691,13 @@ def test_imaginary_unit():\n \n     raises(TypeError, lambda: pretty(I, imaginary_unit=I))\n     raises(ValueError, lambda: pretty(I, imaginary_unit=\"kkk\"))\n+\n+\n+def test_str_special_matrices():\n+    from sympy.matrices import Identity, ZeroMatrix, OneMatrix\n+    assert pretty(Identity(4)) == 'I'\n+    assert upretty(Identity(4)) == u'ùïÄ'\n+    assert pretty(ZeroMatrix(2, 2)) == '0'\n+    assert upretty(ZeroMatrix(2, 2)) == u'ùüò'\n+    assert pretty(OneMatrix(2, 2)) == '1'\n+    assert upretty(OneMatrix(2, 2)) == u'ùüô'\ndiff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1630,17 +1630,20 @@ def test_ElementwiseApplyFunction():\n \n def test_ZeroMatrix():\n     from sympy import ZeroMatrix\n-    assert latex(ZeroMatrix(1, 1)) == r\"\\mathbb{0}\"\n+    assert latex(ZeroMatrix(1, 1), mat_symbol_style='plain') == r\"\\mathbb{0}\"\n+    assert latex(ZeroMatrix(1, 1), mat_symbol_style='bold') == r\"\\mathbf{0}\"\n \n \n def test_OneMatrix():\n     from sympy import OneMatrix\n-    assert latex(OneMatrix(3, 4)) == r\"\\mathbb{1}\"\n+    assert latex(OneMatrix(3, 4), mat_symbol_style='plain') == r\"\\mathbb{1}\"\n+    assert latex(OneMatrix(3, 4), mat_symbol_style='bold') == r\"\\mathbf{1}\"\n \n \n def test_Identity():\n     from sympy import Identity\n-    assert latex(Identity(1)) == r\"\\mathbb{I}\"\n+    assert latex(Identity(1), mat_symbol_style='plain') == r\"\\mathbb{I}\"\n+    assert latex(Identity(1), mat_symbol_style='bold') == r\"\\mathbf{I}\"\n \n \n def test_boolean_args_order():\ndiff --git a/sympy/printing/tests/test_mathml.py b/sympy/printing/tests/test_mathml.py\n--- a/sympy/printing/tests/test_mathml.py\n+++ b/sympy/printing/tests/test_mathml.py\n@@ -1731,6 +1731,7 @@ def test_mathml_matrix_functions():\n \n \n def test_mathml_special_matrices():\n-    from sympy.matrices import Identity, ZeroMatrix\n+    from sympy.matrices import Identity, ZeroMatrix, OneMatrix\n     assert mathml(Identity(4), printer='presentation') == '<mi>&#x1D540;</mi>'\n     assert mathml(ZeroMatrix(2, 2), printer='presentation') == '<mn>&#x1D7D8</mn>'\n+    assert mathml(OneMatrix(2, 2), printer='presentation') == '<mn>&#x1D7D9</mn>'\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -811,8 +811,16 @@ def test_Subs_printing():\n     assert str(Subs(x, (x,), (1,))) == 'Subs(x, x, 1)'\n     assert str(Subs(x + y, (x, y), (1, 2))) == 'Subs(x + y, (x, y), (1, 2))'\n \n+\n def test_issue_15716():\n     x = Symbol('x')\n     e = -3**x*exp(-3)*log(3**x*exp(-3)/factorial(x))/factorial(x)\n     assert str(Integral(e, (x, -oo, oo)).doit()) ==  '-(Integral(-3*3**x/factorial(x), (x, -oo, oo))' \\\n     ' + Integral(3**x*log(3**x/factorial(x))/factorial(x), (x, -oo, oo)))*exp(-3)'\n+\n+\n+def test_str_special_matrices():\n+    from sympy.matrices import Identity, ZeroMatrix, OneMatrix\n+    assert str(Identity(4)) == 'I'\n+    assert str(ZeroMatrix(2, 2)) == '0'\n+    assert str(OneMatrix(2, 2)) == '1'\n",
  "problem_statement": "Added OneMatrix str, pretty, and MathML presentation printing\n<!-- Your title above should be a short description of what\r\nwas changed. Do not include the issue number in the title. -->\r\n\r\n#### References to other Issues or PRs\r\n<!-- If this pull request fixes an issue, write \"Fixes #NNNN\" in that exact\r\nformat, e.g. \"Fixes #1234\". See\r\nhttps://github.com/blog/1506-closing-issues-via-pull-requests . Please also\r\nwrite a comment on that issue linking back to this pull request once it is\r\nopen. -->\r\nFollow up to #16692\r\n\r\n#### Brief description of what is fixed or changed\r\nAdded printing of `OneMatrix` to str, pretty and MathML presentation printers\r\nAlso improved unicode pretty printing of ZeroMatrix and Identity to use unicode double struck characters.\r\n\r\nBefore:\r\n<img width=\"373\" alt=\"beforezeroone\" src=\"https://user-images.githubusercontent.com/8114497/56459244-1ed20980-6391-11e9-81fa-1a7618691c47.PNG\">\r\n\r\nAfter:\r\n<img width=\"249\" alt=\"afterzeroone\" src=\"https://user-images.githubusercontent.com/8114497/56459247-28f40800-6391-11e9-9f98-fe99377c6447.PNG\">\r\n\r\n(Not clear why the LaTeX renders as it does, it is a correct LaTeX expression...)\r\n\r\n#### Other comments\r\n\r\n\r\n#### Release Notes\r\n\r\n<!-- Write the release notes for this release below. See\r\nhttps://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information\r\non how to write release notes. The bot will check your release notes\r\nautomatically to see if they are formatted correctly. -->\r\n\r\n<!-- BEGIN RELEASE NOTES -->\r\n* printing\r\n    * Added printing of OneMatrix to str, pretty, and MathML presentation printers.\r\n<!-- END RELEASE NOTES -->\r\n\n",
  "hints_text": "",
  "created_at": "2019-05-27T07:18:35Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_ZeroMatrix\", \"test_OneMatrix\", \"test_Identity\"]",
  "PASS_TO_PASS": "[\"test_pretty_ascii_str\", \"test_pretty_unicode_str\", \"test_upretty_greek\", \"test_upretty_multiindex\", \"test_upretty_sub_super\", \"test_upretty_subs_missing_in_24\", \"test_missing_in_2X_issue_9047\", \"test_upretty_modifiers\", \"test_pretty_Cycle\", \"test_pretty_basic\", \"test_negative_fractions\", \"test_issue_5524\", \"test_pretty_ordering\", \"test_EulerGamma\", \"test_GoldenRatio\", \"test_pretty_relational\", \"test_Assignment\", \"test_AugmentedAssignment\", \"test_issue_7117\", \"test_pretty_rational\", \"test_pretty_functions\", \"test_pretty_sqrt\", \"test_pretty_sqrt_char_knob\", \"test_pretty_sqrt_longsymbol_no_sqrt_char\", \"test_pretty_KroneckerDelta\", \"test_pretty_product\", \"test_pretty_lambda\", \"test_pretty_order\", \"test_pretty_derivatives\", \"test_pretty_integrals\", \"test_pretty_matrix\", \"test_pretty_ndim_arrays\", \"test_tensor_TensorProduct\", \"test_diffgeom_print_WedgeProduct\", \"test_Adjoint\", \"test_pretty_Trace_issue_9044\", \"test_MatrixExpressions\", \"test_pretty_dotproduct\", \"test_pretty_piecewise\", \"test_pretty_ITE\", \"test_pretty_seq\", \"test_any_object_in_sequence\", \"test_print_builtin_set\", \"test_pretty_sets\", \"test_pretty_SetExpr\", \"test_pretty_ImageSet\", \"test_pretty_ConditionSet\", \"test_pretty_ComplexRegion\", \"test_pretty_Union_issue_10414\", \"test_pretty_Intersection_issue_10414\", \"test_ProductSet_paranthesis\", \"test_ProductSet_prod_char_issue_10413\", \"test_pretty_sequences\", \"test_pretty_FourierSeries\", \"test_pretty_FormalPowerSeries\", \"test_pretty_limits\", \"test_pretty_ComplexRootOf\", \"test_pretty_RootSum\", \"test_GroebnerBasis\", \"test_pretty_UniversalSet\", \"test_pretty_Boolean\", \"test_pretty_Domain\", \"test_pretty_prec\", \"test_pprint\", \"test_pretty_class\", \"test_pretty_no_wrap_line\", \"test_settings\", \"test_pretty_sum\", \"test_units\", \"test_pretty_Subs\", \"test_gammas\", \"test_beta\", \"test_function_subclass_different_name\", \"test_SingularityFunction\", \"test_deltas\", \"test_hyper\", \"test_meijerg\", \"test_noncommutative\", \"test_pretty_special_functions\", \"test_pretty_geometry\", \"test_expint\", \"test_elliptic_functions\", \"test_RandomDomain\", \"test_PrettyPoly\", \"test_issue_6285\", \"test_issue_6359\", \"test_issue_6739\", \"test_complicated_symbol_unchanged\", \"test_categories\", \"test_PrettyModules\", \"test_QuotientRing\", \"test_Homomorphism\", \"test_Tr\", \"test_pretty_Add\", \"test_issue_7179\", \"test_issue_7180\", \"test_pretty_Complement\", \"test_pretty_SymmetricDifference\", \"test_pretty_Contains\", \"test_issue_4335\", \"test_issue_6324\", \"test_issue_7927\", \"test_issue_6134\", \"test_issue_9877\", \"test_issue_13651\", \"test_pretty_primenu\", \"test_pretty_primeomega\", \"test_pretty_Mod\", \"test_issue_11801\", \"test_pretty_UnevaluatedExpr\", \"test_issue_10472\", \"test_MatrixElement_printing\", \"test_issue_12675\", \"test_MatrixSymbol_printing\", \"test_degree_printing\", \"test_vector_expr_pretty_printing\", \"test_pretty_print_tensor_expr\", \"test_pretty_print_tensor_partial_deriv\", \"test_issue_15560\", \"test_print_lerchphi\", \"test_issue_15583\", \"test_matrixSymbolBold\", \"test_center_accent\", \"test_imaginary_unit\", \"test_printmethod\", \"test_latex_basic\", \"test_latex_builtins\", \"test_latex_SingularityFunction\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_latex_functions\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_indexed\", \"test_latex_derivatives\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_SetExpr\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_FourierSeries\", \"test_latex_FormalPowerSeries\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_universalset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_intersection\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_Complexes\", \"test_latex_productset\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_latex_log\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_matrix_with_functions\", \"test_latex_NDimArray\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_Poly_order\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_Modules\", \"test_Transpose\", \"test_Hadamard\", \"test_ElementwiseApplyFunction\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_8409\", \"test_issue_15439\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_latex_UnevaluatedExpr\", \"test_KroneckerProduct_printing\", \"test_Quaternion_latex_printing\", \"test_TensorProduct_printing\", \"test_WedgeProduct_printing\", \"test_issue_14041\", \"test_issue_9216\", \"test_latex_printer_tensor\", \"test_multiline_latex\", \"test_issue_15353\", \"test_trace\", \"test_print_basic\", \"test_MatrixSymbol_bold\", \"test_text_re_im\", \"test_DiffGeomMethods\", \"test_mathml_printer\", \"test_content_printmethod\", \"test_content_mathml_core\", \"test_content_mathml_functions\", \"test_content_mathml_limits\", \"test_content_mathml_integrals\", \"test_content_mathml_matrices\", \"test_content_mathml_sums\", \"test_content_mathml_tuples\", \"test_content_mathml_add\", \"test_content_mathml_Rational\", \"test_content_mathml_constants\", \"test_content_mathml_trig\", \"test_content_mathml_relational\", \"test_content_symbol\", \"test_content_mathml_greek\", \"test_content_mathml_order\", \"test_content_settings\", \"test_presentation_printmethod\", \"test_presentation_mathml_core\", \"test_presentation_mathml_functions\", \"test_print_derivative\", \"test_presentation_mathml_limits\", \"test_presentation_mathml_integrals\", \"test_presentation_mathml_matrices\", \"test_presentation_mathml_sums\", \"test_presentation_mathml_add\", \"test_presentation_mathml_Rational\", \"test_presentation_mathml_constants\", \"test_presentation_mathml_trig\", \"test_presentation_mathml_relational\", \"test_presentation_symbol\", \"test_presentation_mathml_greek\", \"test_presentation_mathml_order\", \"test_print_tuples\", \"test_print_re_im\", \"test_presentation_settings\", \"test_toprettyxml_hooking\", \"test_print_domains\", \"test_print_expression_with_minus\", \"test_print_AssocOp\", \"test_ln_notation_print\", \"test_mul_symbol_print\", \"test_print_polylog\", \"test_print_EmptySet\", \"test_print_UniversalSet\", \"test_print_logic\", \"test_root_notation_print\", \"test_fold_frac_powers_print\", \"test_fold_short_frac_print\", \"test_print_factorials\", \"test_print_Lambda\", \"test_print_conjugate\", \"test_print_Float\", \"test_print_different_functions\", \"test_mathml_builtins\", \"test_print_exp\", \"test_print_MinMax\", \"test_mathml_presentation_numbers\", \"test_print_matrix_symbol\", \"test_print_hadamard\", \"test_print_random_symbol\", \"test_print_IndexedBase\", \"test_print_Indexed\", \"test_print_Vector\", \"test_print_elliptic_f\", \"test_print_elliptic_e\", \"test_print_elliptic_pi\", \"test_print_Ei\", \"test_print_expint\", \"test_print_jacobi\", \"test_print_gegenbauer\", \"test_print_chebyshevt\", \"test_print_chebyshevu\", \"test_print_legendre\", \"test_print_assoc_legendre\", \"test_print_laguerre\", \"test_print_assoc_laguerre\", \"test_print_hermite\", \"test_mathml_matrix_functions\", \"test_Abs\", \"test_Add\", \"test_Catalan\", \"test_ComplexInfinity\", \"test_Derivative\", \"test_dict\", \"test_Dict\", \"test_Dummy\", \"test_Exp\", \"test_factorial\", \"test_Function\", \"test_Geometry\", \"test_TribonacciConstant\", \"test_ImaginaryUnit\", \"test_Infinity\", \"test_Integer\", \"test_Integral\", \"test_Interval\", \"test_AccumBounds\", \"test_Lambda\", \"test_Limit\", \"test_list\", \"test_Matrix_str\", \"test_NaN\", \"test_NegativeInfinity\", \"test_Order\", \"test_Permutation_Cycle\", \"test_Pi\", \"test_Poly\", \"test_PolyRing\", \"test_FracField\", \"test_PolyElement\", \"test_FracElement\", \"test_sqrt\", \"test_Rational\", \"test_Float\", \"test_Relational\", \"test_CRootOf\", \"test_RootSum\", \"test_set\", \"test_SparseMatrix\", \"test_Sum\", \"test_Symbol\", \"test_tuple\", \"test_Quaternion_str_printer\", \"test_Quantity_str\", \"test_wild_str\", \"test_zeta\", \"test_issue_3101\", \"test_issue_3103\", \"test_issue_4021\", \"test_sstrrepr\", \"test_infinity\", \"test_full_prec\", \"test_empty_printer\", \"test_FiniteSet\", \"test_UniversalSet\", \"test_issue_6387\", \"test_MatMul_MatAdd\", \"test_MatrixSlice\", \"test_true_false\", \"test_Equivalent\", \"test_Xor\", \"test_Complement\", \"test_SymmetricDifference\", \"test_UnevaluatedExpr\", \"test_Subs_printing\", \"test_issue_15716\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.111250",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}