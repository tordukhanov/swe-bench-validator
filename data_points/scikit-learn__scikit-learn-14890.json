{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-14890",
  "base_commit": "14f5302b7000e9096de93beef37dcdb08f55f128",
  "patch": "diff --git a/sklearn/compose/_target.py b/sklearn/compose/_target.py\n--- a/sklearn/compose/_target.py\n+++ b/sklearn/compose/_target.py\n@@ -148,7 +148,7 @@ def _fit_transformer(self, y):\n                               \" you are sure you want to proceed regardless\"\n                               \", set 'check_inverse=False'\", UserWarning)\n \n-    def fit(self, X, y, sample_weight=None):\n+    def fit(self, X, y, **fit_params):\n         \"\"\"Fit the model according to the given training data.\n \n         Parameters\n@@ -160,9 +160,10 @@ def fit(self, X, y, sample_weight=None):\n         y : array-like, shape (n_samples,)\n             Target values.\n \n-        sample_weight : array-like, shape (n_samples,) optional\n-            Array of weights that are assigned to individual samples.\n-            If not provided, then each sample is given unit weight.\n+        **fit_params : dict of string -> object\n+            Parameters passed to the ``fit`` method of the underlying\n+            regressor.\n+\n \n         Returns\n         -------\n@@ -197,10 +198,7 @@ def fit(self, X, y, sample_weight=None):\n         else:\n             self.regressor_ = clone(self.regressor)\n \n-        if sample_weight is None:\n-            self.regressor_.fit(X, y_trans)\n-        else:\n-            self.regressor_.fit(X, y_trans, sample_weight=sample_weight)\n+        self.regressor_.fit(X, y_trans, **fit_params)\n \n         return self\n \n",
  "test_patch": "diff --git a/sklearn/compose/tests/test_target.py b/sklearn/compose/tests/test_target.py\n--- a/sklearn/compose/tests/test_target.py\n+++ b/sklearn/compose/tests/test_target.py\n@@ -14,6 +14,8 @@\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler\n \n+from sklearn.pipeline import Pipeline\n+\n from sklearn.linear_model import LinearRegression, Lasso\n \n from sklearn import datasets\n@@ -294,3 +296,39 @@ def test_transform_target_regressor_count_fit(check_inverse):\n     )\n     ttr.fit(X, y)\n     assert ttr.transformer_.fit_counter == 1\n+\n+\n+class DummyRegressorWithExtraFitParams(DummyRegressor):\n+    def fit(self, X, y, sample_weight=None, check_input=True):\n+        # on the test below we force this to false, we make sure this is\n+        # actually passed to the regressor\n+        assert not check_input\n+        return super().fit(X, y, sample_weight)\n+\n+\n+def test_transform_target_regressor_pass_fit_parameters():\n+    X, y = friedman\n+    regr = TransformedTargetRegressor(\n+        regressor=DummyRegressorWithExtraFitParams(),\n+        transformer=DummyTransformer()\n+    )\n+\n+    regr.fit(X, y, check_input=False)\n+    assert regr.transformer_.fit_counter == 1\n+\n+\n+def test_transform_target_regressor_route_pipeline():\n+    X, y = friedman\n+\n+    regr = TransformedTargetRegressor(\n+        regressor=DummyRegressorWithExtraFitParams(),\n+        transformer=DummyTransformer()\n+    )\n+    estimators = [\n+        ('normalize', StandardScaler()), ('est', regr)\n+    ]\n+\n+    pip = Pipeline(estimators)\n+    pip.fit(X, y, **{'est__check_input': False})\n+\n+    assert regr.transformer_.fit_counter == 1\n",
  "problem_statement": "Fitting TransformedTargetRegressor with sample_weight in Pipeline\n#### Description\r\n\r\nCan't fit a `TransformedTargetRegressor` using `sample_weight`. May be link to #10945 ?\r\n\r\n#### Steps/Code to Reproduce\r\n\r\nExample:\r\n```python\r\nimport pandas as pd\r\nimport numpy as np\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.preprocessing import RobustScaler, OneHotEncoder\r\nfrom sklearn.compose import TransformedTargetRegressor, ColumnTransformer, make_column_transformer\r\nfrom sklearn.ensemble import RandomForestRegressor\r\nfrom sklearn.datasets import make_regression\r\n\r\n# Create dataset\r\nX, y = make_regression(n_samples=10000, noise=100, n_features=10, random_state=2019)\r\ny = np.exp((y + abs(y.min())) / 200)\r\nw = np.random.randn(len(X))\r\ncat_list = ['AA', 'BB', 'CC', 'DD']\r\ncat = np.random.choice(cat_list, len(X), p=[0.3, 0.2, 0.2, 0.3])\r\n\r\ndf = pd.DataFrame(X, columns=[\"col_\" + str(i) for i in range(1, 11)])\r\ndf['sample_weight'] = w\r\ndf['my_caterogy'] = cat\r\ndf.head()\r\n```\r\n![image](https://user-images.githubusercontent.com/8374843/53635914-e169bf00-3c1e-11e9-8d91-e8f474de860c.png)\r\n\r\n```python\r\nuse_col = [col for col in df.columns if col not in ['sample_weight']]\r\n\r\n\r\nnumerical_features = df[use_col].dtypes == 'float'\r\ncategorical_features = ~numerical_features\r\n\r\ncategorical_transformer = Pipeline(steps=[\r\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\r\n\r\npreprocess = make_column_transformer(\r\n                                    (RobustScaler(), numerical_features),\r\n                                    (OneHotEncoder(sparse=False), categorical_features)\r\n)\r\n\r\nrf = RandomForestRegressor(n_estimators=20)\r\n\r\nclf = Pipeline(steps=[\r\n                      ('preprocess', preprocess),\r\n                      ('model', rf)\r\n])\r\n\r\nclf_trans = TransformedTargetRegressor(regressor=clf,\r\n                                        func=np.log1p,\r\n                                        inverse_func=np.expm1)\r\n\r\n# Work\r\nclf_trans.fit(df[use_col], y)\r\n\r\n# Fail\r\nclf_trans.fit(df[use_col], y, sample_weight=df['sample_weight'])\r\n```\r\n\r\n#### Expected Results\r\nFitting with `sample_weight`\r\n\r\n#### Actual Results\r\n```python\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-7-366d815659ba> in <module>()\r\n----> 1 clf_trans.fit(df[use_col], y, sample_weight=df['sample_weight'])\r\n\r\n~/anaconda3/envs/test_env/lib/python3.5/site-packages/sklearn/compose/_target.py in fit(self, X, y, sample_weight)\r\n    194             self.regressor_.fit(X, y_trans)\r\n    195         else:\r\n--> 196             self.regressor_.fit(X, y_trans, sample_weight=sample_weight)\r\n    197 \r\n    198         return self\r\n\r\n~/anaconda3/envs/test_env/lib/python3.5/site-packages/sklearn/pipeline.py in fit(self, X, y, **fit_params)\r\n    263             This estimator\r\n    264         \"\"\"\r\n--> 265         Xt, fit_params = self._fit(X, y, **fit_params)\r\n    266         if self._final_estimator is not None:\r\n    267             self._final_estimator.fit(Xt, y, **fit_params)\r\n\r\n~/anaconda3/envs/test_env/lib/python3.5/site-packages/sklearn/pipeline.py in _fit(self, X, y, **fit_params)\r\n    200                                 if step is not None)\r\n    201         for pname, pval in six.iteritems(fit_params):\r\n--> 202             step, param = pname.split('__', 1)\r\n    203             fit_params_steps[step][param] = pval\r\n    204         Xt = X\r\n\r\nValueError: not enough values to unpack (expected 2, got 1)\r\n```\r\n\r\n#### Versions\r\n```python\r\nimport sklearn; sklearn.show_versions()\r\nSystem:\r\n   machine: Linux-4.4.0-127-generic-x86_64-with-debian-stretch-sid\r\nexecutable: /home/gillesa/anaconda3/envs/test_env/bin/python\r\n    python: 3.5.6 |Anaconda, Inc.| (default, Aug 26 2018, 21:41:56)  [GCC 7.3.0]\r\n\r\nBLAS:\r\ncblas_libs: cblas\r\n  lib_dirs: \r\n    macros: \r\n\r\nPython deps:\r\n   sklearn: 0.20.2\r\n    pandas: 0.24.1\r\n       pip: 19.0.1\r\nsetuptools: 40.2.0\r\n     numpy: 1.16.1\r\n    Cython: None\r\n     scipy: 1.2.0\r\n```\r\n\r\n<!-- Thanks for contributing! -->\r\n\n",
  "hints_text": "This has nothing to do with TransformedTargetRegressor. Pipeline requires\nyou to pass model__sample_weight, not just sample_weight... But the error\nmessage is terrible! We should improve it.\n\nThank you for your prompt reply @jnothman \r\n\r\n### Second try : \r\n```python\r\nclf_trans.fit(X_train[use_col], y_train,\r\n              model__sample_weight=X_train['weight']\r\n             )\r\n\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-25-aa3242bb1603> in <module>()\r\n----> 1 clf_trans.fit(df[use_col], y, model__sample_weight=df['sample_weight'])\r\n\r\nTypeError: fit() got an unexpected keyword argument 'model__sample_weight'\r\n```\r\n\r\nDid i miss something or anything ?\r\n\r\nBy the way I used this kind of pipeline typo (don't know how to call it) in `GridSearchCV` and it work's well !\r\n\r\n```python\r\nfrom sklearn.model_selection import GridSearchCV\r\n\r\nparam_grid = { \r\n    'regressor__model__n_estimators': [20, 50, 100, 200]\r\n}\r\n\r\nGDCV = GridSearchCV(estimator=clf_trans, param_grid=param_grid, cv=5,\r\n                    n_jobs=-1, scoring='neg_mean_absolute_error',\r\n                    return_train_score=True, verbose=True)\r\nGDCV.fit(X[use_col], y)\r\n```\r\n\r\nPs : Fill free to rename title if it can help community\nYou're right. we don't yet seem to properly support fit parameters in TransformedTargetRegressor. And perhaps we should...\n> This has nothing to do with TransformedTargetRegressor. Pipeline requires you to pass model__sample_weight, not just sample_weight... But the error message is terrible! We should improve it.\r\n\r\nThat's true but what @armgilles asked in the first example was the sample_weight, a parameter that it's passed in the fit call. From my knowledge, specifying model__sample_weight just sets internal attributes of the model step in the pipeline but doesn't modify any parameters passed to the fit method\r\n\r\nShould we implement both parameters, meaning the parameter of the model (like we do in GridSearchCV) and parameter of the fit (eg. sample_weight, i don't know if there are more that could be passed in fit call) ?\nNo, the comment *is* about fit parameters. TransformedTargetRegressor\ncurrently accepts sample_weight, but to support pipelines it needs to\nsupport **fit_params\n\nCool, I'll give it a try then\nI am having the same problem here using the `Pipeline` along with `CatBoostRegressor`. The only hacky way I found so far to accomplish this is to do something like:\r\n```\r\npipeline.named_steps['reg'].regressor.set_params(**fit_params)\r\n# Or alternatively \r\npipeline.set_params({\"reg_regressor_param\": value})\r\n```\r\nAnd then call \r\n```\r\npipeline.fit(X, y)\r\n```\r\n\r\nWhere `reg` is the step containing the `TransformedTargetRegressor`. is there a cleaner way? \nThat's not about a fit parameter like sample_weight at all. For that you\nshould be able to set_params directly from the TransformedTargetRegressor\ninstance. Call its get_params to find the right key.\n\n@jnothman thanks for your response . Please let me know if I am doing something wrong. From what I understand there are 3 issues here:\r\n\r\n\r\n1.  `TransformedTargetRegressor` fit only passes sample_weight to the underlying regressor. Which you can argue that's what is has to do. Other estimators, (not sklearn based but compatible). might  support receiving other  prams in the `fit` method. \r\n\r\n2. `TransformedTargetRegressor` only support sample_weight as a parameter and d[oes not support passing arbitrary parameters](https://github.com/scikit-learn/scikit-learn/blob/1495f69242646d239d89a5713982946b8ffcf9d9/sklearn/compose/_target.py#L200-L205) to the underlying `regressor` fit method as `Pipeline` does (i.e. using `<component>__<parameter>` convention ). \r\n\r\n3. Now, when using a Pipeline  and I want to pass a parameter to the regressor inside a `TransformedTargetRegressor` at fit time this fails. \r\n\r\nSome examples:\r\n\r\n```python\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.compose import TransformedTargetRegressor\r\nfrom catboost import CatBoostRegressor \r\nimport numpy as np\r\n\r\ntr_regressor = TransformedTargetRegressor(\r\n            CatBoostRegressor(),\r\n             func=np.log, inverse_func=np.exp\r\n)\r\n\r\npipeline = Pipeline(steps=[\r\n              ('reg', tr_regressor)\r\n])\r\n\r\nX = np.arange(4).reshape(-1, 1)\r\ny = np.exp(2 * X).ravel()\r\n\r\npipeline.fit(X, y, reg__regressor__verbose=False)\r\n---\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n     17 y = np.exp(2 * X).ravel()\r\n     18 \r\n---> 19 pipeline.fit(X, y, reg__regressor__verbose=False)\r\n\r\n~/development/order_prediction/ord_pred_env/lib/python3.6/site-packages/sklearn/pipeline.py in fit(self, X, y, **fit_params)\r\n    354                                  self._log_message(len(self.steps) - 1)):\r\n    355             if self._final_estimator != 'passthrough':\r\n--> 356                 self._final_estimator.fit(Xt, y, **fit_params)\r\n    357         return self\r\n    358 \r\n\r\nTypeError: fit() got an unexpected keyword argument 'regressor__verbose'\r\n```\r\n\r\nThis also fails:\r\n\r\n```python\r\npipeline.named_steps['reg'].fit(X, y, regressor__verbose=False)\r\n\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-19-fd09c06db732> in <module>\r\n----> 1 pipeline.named_steps['reg'].fit(X, y, regressor__verbose=False)\r\n\r\nTypeError: fit() got an unexpected keyword argument 'regressor__verbose'\r\n```\r\n\r\nThis actually works:\r\n\r\n```python\r\npipeline.named_steps['reg'].regressor.fit(X, y, verbose=False)\r\n```\r\nAnd this will also work:\r\n```python\r\npipeline.set_params(**{'reg__regressor__verbose': False})\r\npipeline.fit(X, y)\r\n```\r\n\r\nSo I have a question:\r\n\r\nShouldn't `TransformedTargetRegressor` `fit` method support `**fit_params` as the `Pipeline`does? i.e. passing parameters to the underlying regressor via the `<component>__<parameter>` syntax? \r\n\r\nMaybe I missing something or  expecting something from the API I should not be expecting here. Thanks in advance for the help :). \r\n\r\n\r\n\r\n\nI think the discussion started from the opposite way around: using a `Pipeline `as the `regressor `parameter of the `TransformedTargetRegressor`. The problem is the same: you cannot pass fit parameters to the underlying regressor apart from the `sample_weight`.\r\n\nAnother question is if there are cases where you would want to pass fit parameters to the transformer too because the current fit logic calls fit for the transformer too.\n>  The problem is the same: you cannot pass fit parameters to the\nunderlying regressor apart from the sample_weight.\n\nYes, let's fix this and assume all fit params should be passed to the\nregressor.\n\n> Another question is if there are cases where you would want to pass fit\nparameters to the transformer too because the current fit logic calls fit\nfor the transformer too.\n\nWe'll deal with this in the world where\nhttps://github.com/scikit-learn/enhancement_proposals/pull/16 eventually\ngets completed, approved, merged and implemented!!\n\nPull request welcome.\n\ni will start working ",
  "created_at": "2019-09-05T13:19:06Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/compose/tests/test_target.py::test_transform_target_regressor_pass_fit_parameters\", \"sklearn/compose/tests/test_target.py::test_transform_target_regressor_route_pipeline\"]",
  "PASS_TO_PASS": "[\"sklearn/compose/tests/test_target.py::test_transform_target_regressor_error\", \"sklearn/compose/tests/test_target.py::test_transform_target_regressor_invertible\", \"sklearn/compose/tests/test_target.py::test_transform_target_regressor_functions\", \"sklearn/compose/tests/test_target.py::test_transform_target_regressor_functions_multioutput\", \"sklearn/compose/tests/test_target.py::test_transform_target_regressor_1d_transformer[X0-y0]\", \"sklearn/compose/tests/test_target.py::test_transform_target_regressor_1d_transformer[X1-y1]\", \"sklearn/compose/tests/test_target.py::test_transform_target_regressor_2d_transformer[X0-y0]\", \"sklearn/compose/tests/test_target.py::test_transform_target_regressor_2d_transformer[X1-y1]\", \"sklearn/compose/tests/test_target.py::test_transform_target_regressor_2d_transformer_multioutput\", \"sklearn/compose/tests/test_target.py::test_transform_target_regressor_multi_to_single\", \"sklearn/compose/tests/test_target.py::test_transform_target_regressor_ensure_y_array\", \"sklearn/compose/tests/test_target.py::test_transform_target_regressor_count_fit[False]\", \"sklearn/compose/tests/test_target.py::test_transform_target_regressor_count_fit[True]\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.008856",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}