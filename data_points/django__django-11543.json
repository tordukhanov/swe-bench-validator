{
  "repo": "django/django",
  "instance_id": "django__django-11543",
  "base_commit": "00d4e6f8b587dcea147c51ece253dc54c461a11d",
  "patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -101,6 +101,9 @@ def cleanup_headers(self):\n         # connection.\n         if 'Content-Length' not in self.headers:\n             self.headers['Connection'] = 'close'\n+        # Persistent connections require threading server.\n+        elif not isinstance(self.request_handler.server, socketserver.ThreadingMixIn):\n+            self.headers['Connection'] = 'close'\n         # Mark the connection for closing if it's set as such above or if the\n         # application sent the header.\n         if self.headers.get('Connection') == 'close':\n",
  "test_patch": "diff --git a/tests/servers/tests.py b/tests/servers/tests.py\n--- a/tests/servers/tests.py\n+++ b/tests/servers/tests.py\n@@ -9,7 +9,9 @@\n from urllib.parse import urlencode\n from urllib.request import urlopen\n \n+from django.core.servers.basehttp import WSGIServer\n from django.test import LiveServerTestCase, override_settings\n+from django.test.testcases import LiveServerThread, QuietWSGIRequestHandler\n \n from .models import Person\n \n@@ -50,6 +52,15 @@ def test_live_server_url_is_class_property(self):\n         self.assertEqual(self.live_server_url_test[0], self.live_server_url)\n \n \n+class LiveServerSingleThread(LiveServerThread):\n+    def _create_server(self):\n+        return WSGIServer((self.host, self.port), QuietWSGIRequestHandler, allow_reuse_address=False)\n+\n+\n+class SingleThreadLiveServerTestCase(LiveServerTestCase):\n+    server_thread_class = LiveServerSingleThread\n+\n+\n class LiveServerViews(LiveServerBase):\n     def test_protocol(self):\n         \"\"\"Launched server serves with HTTP 1.1.\"\"\"\n@@ -162,6 +173,32 @@ def test_environ(self):\n             self.assertIn(b\"QUERY_STRING: 'q=%D1%82%D0%B5%D1%81%D1%82'\", f.read())\n \n \n+@override_settings(ROOT_URLCONF='servers.urls')\n+class SingleTreadLiveServerViews(SingleThreadLiveServerTestCase):\n+    available_apps = ['servers']\n+\n+    def test_closes_connection_with_content_length(self):\n+        \"\"\"\n+        Contrast to\n+        LiveServerViews.test_keep_alive_on_connection_with_content_length().\n+        Persistent connections require threading server.\n+        \"\"\"\n+        conn = HTTPConnection(\n+            SingleTreadLiveServerViews.server_thread.host,\n+            SingleTreadLiveServerViews.server_thread.port,\n+            timeout=1,\n+        )\n+        try:\n+            conn.request('GET', '/example_view/', headers={'Connection': 'keep-alive'})\n+            response = conn.getresponse()\n+            self.assertTrue(response.will_close)\n+            self.assertEqual(response.read(), b'example view')\n+            self.assertEqual(response.status, 200)\n+            self.assertEqual(response.getheader('Connection'), 'close')\n+        finally:\n+            conn.close()\n+\n+\n class LiveServerDatabase(LiveServerBase):\n \n     def test_fixtures_loaded(self):\n",
  "problem_statement": "runserver fails to close connection if --nothreading specified.\nDescription\n\t \n\t\t(last modified by Carlton Gibson)\n\t \nClient: Chrome 75.0.3770.100/Firefox 67.0.4 on macOS 10.14.5.\nServer: macOS 10.14.5., Python 3.7.3, Django 2.2.3\nRunning runserver with the --nothreading option may stop responding.\nThis is because Web browser uses multiple connection, and all of them has Connection: keep-alive header by default.\nWhen the first request is finished, wsgi server continue to read the socket first request used because the connection is keep-alive.\nSo, the second connection is kept waiting without accepted by wsgi server, until the fist connection is closed. But the first connection will not be closed by browser for very long time.\n",
  "hints_text": "",
  "created_at": "2019-07-06T16:28:41Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_closes_connection_with_content_length (servers.tests.SingleTreadLiveServerViews)\"]",
  "PASS_TO_PASS": "[\"test_live_server_url_is_class_property (servers.tests.LiveServerAddress)\", \"test_database_writes (servers.tests.LiveServerDatabase)\", \"test_fixtures_loaded (servers.tests.LiveServerDatabase)\", \"test_check_model_instance_from_subview (servers.tests.LiverServerThreadedTests)\", \"test_view_calls_subview (servers.tests.LiverServerThreadedTests)\", \"test_404 (servers.tests.LiveServerViews)\", \"test_closes_connection_without_content_length (servers.tests.LiveServerViews)\", \"test_environ (servers.tests.LiveServerViews)\", \"test_keep_alive_connection_clears_previous_request_data (servers.tests.LiveServerViews)\", \"test_keep_alive_on_connection_with_content_length (servers.tests.LiveServerViews)\", \"test_media_files (servers.tests.LiveServerViews)\", \"test_no_collectstatic_emulation (servers.tests.LiveServerViews)\", \"Launched server serves with HTTP 1.1.\", \"test_static_files (servers.tests.LiveServerViews)\", \"test_view (servers.tests.LiveServerViews)\", \"test_port_bind (servers.tests.LiveServerPort)\", \"LiveServerTestCase.port customizes the server's port.\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.575736",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}