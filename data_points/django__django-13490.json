{
  "repo": "django/django",
  "instance_id": "django__django-13490",
  "base_commit": "c32d8f33d8e988a376e44997b8f3606d821f305e",
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -416,6 +416,11 @@ def get(self, *args, **kwargs):\n         Perform the query and return a single object matching the given\n         keyword arguments.\n         \"\"\"\n+        if self.query.combinator and (args or kwargs):\n+            raise NotSupportedError(\n+                'Calling QuerySet.get(...) with filters after %s() is not '\n+                'supported.' % self.query.combinator\n+            )\n         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)\n         if self.query.can_filter() and not self.query.distinct_fields:\n             clone = clone.order_by()\n",
  "test_patch": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -227,6 +227,22 @@ def test_count_intersection(self):\n         qs2 = Number.objects.filter(num__lte=5)\n         self.assertEqual(qs1.intersection(qs2).count(), 1)\n \n+    def test_get_union(self):\n+        qs = Number.objects.filter(num=2)\n+        self.assertEqual(qs.union(qs).get().num, 2)\n+\n+    @skipUnlessDBFeature('supports_select_difference')\n+    def test_get_difference(self):\n+        qs1 = Number.objects.all()\n+        qs2 = Number.objects.exclude(num=2)\n+        self.assertEqual(qs1.difference(qs2).get().num, 2)\n+\n+    @skipUnlessDBFeature('supports_select_intersection')\n+    def test_get_intersection(self):\n+        qs1 = Number.objects.all()\n+        qs2 = Number.objects.filter(num=2)\n+        self.assertEqual(qs1.intersection(qs2).get().num, 2)\n+\n     @skipUnlessDBFeature('supports_slicing_ordering_in_compound')\n     def test_ordering_subqueries(self):\n         qs1 = Number.objects.order_by('num')[:2]\n@@ -325,3 +341,16 @@ def test_unsupported_operations_on_combined_qs(self):\n                         msg % (operation, combinator),\n                     ):\n                         getattr(getattr(qs, combinator)(qs), operation)()\n+\n+    def test_get_with_filters_unsupported_on_combined_qs(self):\n+        qs = Number.objects.all()\n+        msg = 'Calling QuerySet.get(...) with filters after %s() is not supported.'\n+        combinators = ['union']\n+        if connection.features.supports_select_difference:\n+            combinators.append('difference')\n+        if connection.features.supports_select_intersection:\n+            combinators.append('intersection')\n+        for combinator in combinators:\n+            with self.subTest(combinator=combinator):\n+                with self.assertRaisesMessage(NotSupportedError, msg % combinator):\n+                    getattr(qs, combinator)(qs).get(num=2)\n",
  "problem_statement": "Raise a descriptive error on get() with filters operation following QuerySet.union(), intersection(), and difference().\nDescription\n\t\nThe QuerySet resulting from q1.difference(q2) does not allow to retrieve one specific object of that resulting QuerySet.\nMinimal example:\nmodels.py\nfrom django.db import models\nclass Test(models.Model):\n\tname = models.CharField(max_length=30)\npython manage.py shell\n>>> from test.models import Test\n>>> qs1 = Test.objects.all()\n>>> qs1\n<QuerySet [<Test: Test object (1)>, <Test: Test object (2)>, <Test: Test object (3)>]>\n>>> qs2 = Test.objects.filter(id=1)\n>>> qs2\n<QuerySet [<Test: Test object (1)>]>\n>>> qs3 = qs1.difference(qs2)\n>>> qs3\n<QuerySet [<Test: Test object (2)>, <Test: Test object (3)>]>\n>>> qs3.get(id=2)\nTraceback (most recent call last):\n File \"<console>\", line 1, in <module>\n File \"/lib/python3.8/site-packages/django/db/models/query.py\", line 433, in get\n\traise self.model.MultipleObjectsReturned(\ntest.models.Test.MultipleObjectsReturned: get() returned more than one Test -- it returned 2!\nDjango version: 3.1.2\nPython version: 3.8.5\nOS: Arch Linux\nI also experienced this in the regular request/view-context, with other Django versions (2.2) and other python versions (3.7).\nSorry if this is the expected behavior, a known bug or if I missed something which changes the behavior only on my system.\nIf you need more information, I'll be happy to assist.\n",
  "hints_text": "get() with filters is unsupported, see ​documentation: In addition, only LIMIT, OFFSET, COUNT(*), ORDER BY, and specifying columns (i.e. slicing, count(), order_by(), and values()/values_list()) are allowed on the resulting QuerySet. but I agree that we should raise a descriptive error for get(...) (see related #27995, #31148).\n​PR",
  "created_at": "2020-10-04T21:16:50Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_get_with_filters_unsupported_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
  "PASS_TO_PASS": "[\"test_combining_multiple_models (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_limits (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_by_same_type (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_raises_on_non_selected_column (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_alias (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression_and_alias (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_qs_with_subcompound_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_distinct (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_none (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_extra_and_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_two_annotated_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_on_annotated_and_unannotated (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_operations_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_ordering_slicing_raises_db_error (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.659268",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}