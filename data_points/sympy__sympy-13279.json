{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-13279",
  "base_commit": "613373e31790f06b7324dd5ef887198538204bcc",
  "patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -144,7 +144,8 @@ def flatten(cls, seq):\n                 continue\n \n             elif isinstance(o, MatrixExpr):\n-                coeff = o.__add__(coeff)\n+                # can't add 0 to Matrix so make sure coeff is not 0\n+                coeff = o.__add__(coeff) if coeff else o\n                 continue\n \n             elif o is S.ComplexInfinity:\ndiff --git a/sympy/core/mul.py b/sympy/core/mul.py\n--- a/sympy/core/mul.py\n+++ b/sympy/core/mul.py\n@@ -174,6 +174,7 @@ def flatten(cls, seq):\n         \"\"\"\n \n         from sympy.calculus.util import AccumBounds\n+        from sympy.matrices.expressions import MatrixExpr\n         rv = None\n         if len(seq) == 2:\n             a, b = seq\n@@ -271,6 +272,10 @@ def flatten(cls, seq):\n                 coeff = o.__mul__(coeff)\n                 continue\n \n+            elif isinstance(o, MatrixExpr):\n+                coeff = o.__mul__(coeff)\n+                continue\n+\n             elif o is S.ComplexInfinity:\n                 if not coeff:\n                     # 0 * zoo = NaN\n",
  "test_patch": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,8 +1,10 @@\n from __future__ import division\n-from sympy import (Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n-        abc, Integer, Eq, symbols, Add, I, Float, log, Rational, Lambda, atan2,\n-        cse, cot, tan, S, Tuple, Basic, Dict, Piecewise, oo, Mul,\n-        factor, nsimplify, zoo, Subs, RootOf, AccumBounds)\n+from sympy import (\n+    Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n+    Integer, Eq, symbols, Add, I, Float, log, Rational,\n+    Lambda, atan2, cse, cot, tan, S, Tuple, Basic, Dict,\n+    Piecewise, oo, Mul, factor, nsimplify, zoo, Subs, RootOf,\n+    AccumBounds, Matrix, zeros)\n from sympy.core.basic import _aresame\n from sympy.utilities.pytest import XFAIL\n from sympy.abc import x, y, z\n@@ -20,6 +22,14 @@ def test_subs():\n     assert e == Rational(6)\n \n \n+def test_subs_Matrix():\n+    z = zeros(2)\n+    assert (x*y).subs({x:z, y:0}) == z\n+    assert (x*y).subs({y:z, x:0}) == 0\n+    assert (x*y).subs({y:z, x:0}, simultaneous=True) == z\n+    assert (x + y).subs({x: z, y: z}) == z\n+\n+\n def test_subs_AccumBounds():\n     e = x\n     e = e.subs(x, AccumBounds(1, 3))\n@@ -155,7 +165,6 @@ def test_deriv_sub_bug3():\n \n def test_equality_subs1():\n     f = Function('f')\n-    x = abc.x\n     eq = Eq(f(x)**2, x)\n     res = Eq(Integer(16), x)\n     assert eq.subs(f(x), 4) == res\n@@ -163,7 +172,6 @@ def test_equality_subs1():\n \n def test_equality_subs2():\n     f = Function('f')\n-    x = abc.x\n     eq = Eq(f(x)**2, 16)\n     assert bool(eq.subs(f(x), 3)) is False\n     assert bool(eq.subs(f(x), 4)) is True\n@@ -486,6 +494,7 @@ def test_derivative_subs():\n     assert cse(Derivative(f(x, y), x) +\n                Derivative(f(x, y), y))[1][0].has(Derivative)\n \n+\n def test_derivative_subs2():\n     x, y, z = symbols('x y z')\n     f_func, g_func = symbols('f g', cls=Function)\n@@ -516,6 +525,7 @@ def test_derivative_subs3():\n     assert Derivative(dex, x).subs(dex, exp(x)) == dex\n     assert dex.subs(exp(x), dex) == Derivative(exp(x), x, x)\n \n+\n def test_issue_5284():\n     A, B = symbols('A B', commutative=False)\n     assert (x*A).subs(x**2*A, B) == x*A\n@@ -620,7 +630,6 @@ def test_issue_6158():\n \n \n def test_Function_subs():\n-    from sympy.abc import x, y\n     f, g, h, i = symbols('f g h i', cls=Function)\n     p = Piecewise((g(f(x, y)), x < -1), (g(x), x <= 1))\n     assert p.subs(g, h) == Piecewise((h(f(x, y)), x < -1), (h(x), x <= 1))\n@@ -724,15 +733,13 @@ def test_issue_5217():\n \n \n def test_issue_10829():\n-    from sympy.abc import x, y\n-\n     assert (4**x).subs(2**x, y) == y**2\n     assert (9**x).subs(3**x, y) == y**2\n \n+\n def test_pow_eval_subs_no_cache():\n     # Tests pull request 9376 is working\n     from sympy.core.cache import clear_cache\n-    from sympy.abc import x, y\n \n     s = 1/sqrt(x**2)\n     # This bug only appeared when the cache was turned off.\n@@ -755,7 +762,6 @@ def test_RootOf_issue_10092():\n \n def test_issue_8886():\n     from sympy.physics.mechanics import ReferenceFrame as R\n-    from sympy.abc import x\n     # if something can't be sympified we assume that it\n     # doesn't play well with SymPy and disallow the\n     # substitution\n",
  "problem_statement": "TypeErrors encountered when doing subs with Matrices\n```\r\n>>> Mul(zeros(2), y, evaluate=False).subs(y, 0)\r\n0  # instead of zeros(2)\r\n>>> (x + y).subs({x: zeros(2), y: zeros(2)})\r\nTraceback (most recent call last):\r\n...\r\nTypeError: cannot add <class 'sympy.matrices.immutable.ImmutableDenseMatrix'> and <class 'sympy.core.numbers.Zero'>\r\n```\r\n\r\nAs reported at [StackOverflow](https://stackoverflow.com/questions/46097382/substituting-matrix-for-a-scalar-in-sympy)\n",
  "hints_text": "",
  "created_at": "2017-09-08T16:54:04Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_subs_Matrix\"]",
  "PASS_TO_PASS": "[\"test_subs\", \"test_subs_AccumBounds\", \"test_trigonometric\", \"test_powers\", \"test_logexppow\", \"test_bug\", \"test_subbug1\", \"test_subbug2\", \"test_dict_set\", \"test_dict_ambigous\", \"test_deriv_sub_bug3\", \"test_equality_subs1\", \"test_equality_subs2\", \"test_issue_3742\", \"test_subs_dict1\", \"test_mul\", \"test_subs_simple\", \"test_subs_constants\", \"test_subs_commutative\", \"test_subs_noncommutative\", \"test_subs_basic_funcs\", \"test_subs_wild\", \"test_subs_mixed\", \"test_division\", \"test_add\", \"test_subs_issue_4009\", \"test_functions_subs\", \"test_derivative_subs\", \"test_derivative_subs2\", \"test_derivative_subs3\", \"test_issue_5284\", \"test_subs_iter\", \"test_subs_dict\", \"test_no_arith_subs_on_floats\", \"test_issue_5651\", \"test_issue_6075\", \"test_issue_6079\", \"test_issue_4680\", \"test_issue_6158\", \"test_Function_subs\", \"test_simultaneous_subs\", \"test_issue_6419_6421\", \"test_issue_6559\", \"test_issue_5261\", \"test_issue_6923\", \"test_2arg_hack\", \"test_noncommutative_subs\", \"test_issue_2877\", \"test_issue_5910\", \"test_issue_5217\", \"test_issue_10829\", \"test_pow_eval_subs_no_cache\", \"test_RootOf_issue_10092\", \"test_issue_8886\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.082182",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}