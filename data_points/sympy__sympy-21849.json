{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-21849",
  "base_commit": "f57d98d8e54169678e8bba7805f0f71546c11e75",
  "patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -2422,11 +2422,15 @@ def _print_DMF(self, p):\n     def _print_Object(self, object):\n         return self._print(Symbol(object.name))\n \n-    def _print_LambertW(self, expr):\n+    def _print_LambertW(self, expr, exp=None):\n+        arg0 = self._print(expr.args[0])\n+        exp = r\"^{%s}\" % (exp,) if exp is not None else \"\"\n         if len(expr.args) == 1:\n-            return r\"W\\left(%s\\right)\" % self._print(expr.args[0])\n-        return r\"W_{%s}\\left(%s\\right)\" % \\\n-            (self._print(expr.args[1]), self._print(expr.args[0]))\n+            result = r\"W%s\\left(%s\\right)\" % (exp, arg0)\n+        else:\n+            arg1 = self._print(expr.args[1])\n+            result = \"W{0}_{{{1}}}\\\\left({2}\\\\right)\".format(exp, arg1, arg0)\n+        return result\n \n     def _print_Morphism(self, morphism):\n         domain = self._print(morphism.domain)\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -594,6 +594,10 @@ def test_latex_functions():\n     assert latex(LambertW(n)) == r'W\\left(n\\right)'\n     assert latex(LambertW(n, -1)) == r'W_{-1}\\left(n\\right)'\n     assert latex(LambertW(n, k)) == r'W_{k}\\left(n\\right)'\n+    assert latex(LambertW(n) * LambertW(n)) == r\"W^{2}\\left(n\\right)\"\n+    assert latex(Pow(LambertW(n), 2)) == r\"W^{2}\\left(n\\right)\"\n+    assert latex(LambertW(n)**k) == r\"W^{k}\\left(n\\right)\"\n+    assert latex(LambertW(n, k)**p) == r\"W^{p}_{k}\\left(n\\right)\"\n \n     assert latex(Mod(x, 7)) == r'x\\bmod{7}'\n     assert latex(Mod(x + 1, 7)) == r'\\left(x + 1\\right)\\bmod{7}'\n",
  "problem_statement": "LambertW displaying in jupyter lab\nWhen using JupyterLab and trying to raise LambertW function to some power (for example multiplying with itself) then it raises error when trying to display it. Same thing happens if I use sp.Pow() method as well. \r\n\r\nFor example sp.Pow(sp.LambertW(2), 2) causes the error as well.\r\n\r\n\r\n```Python\r\nIn [1]: import sympy as sp\r\n\r\nIn [2]: function = sp.LambertW(2) * sp.LambertW(2)\r\n\r\nIn [3]: function\r\n\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n~\\miniconda3\\lib\\site-packages\\IPython\\core\\formatters.py in __call__(self, obj)\r\n    343             method = get_real_method(obj, self.print_method)\r\n    344             if method is not None:\r\n--> 345                 return method()\r\n    346             return None\r\n    347         else:\r\n\r\n~\\miniconda3\\lib\\site-packages\\sympy\\core\\_print_helpers.py in _repr_latex_(self)\r\n     62         \"\"\"\r\n     63         from sympy.printing.latex import latex\r\n---> 64         s = latex(self, mode='plain')\r\n     65         return \"$\\\\displaystyle %s$\" % s\r\n\r\n~\\miniconda3\\lib\\site-packages\\sympy\\printing\\printer.py in __call__(self, *args, **kwargs)\r\n    371 \r\n    372     def __call__(self, *args, **kwargs):\r\n--> 373         return self.__wrapped__(*args, **kwargs)\r\n    374 \r\n    375     @property\r\n\r\n~\\miniconda3\\lib\\site-packages\\sympy\\printing\\latex.py in latex(expr, **settings)\r\n   2946 \r\n   2947     \"\"\"\r\n-> 2948     return LatexPrinter(settings).doprint(expr)\r\n   2949 \r\n   2950 \r\n\r\n~\\miniconda3\\lib\\site-packages\\sympy\\printing\\latex.py in doprint(self, expr)\r\n    252 \r\n    253     def doprint(self, expr):\r\n--> 254         tex = Printer.doprint(self, expr)\r\n    255 \r\n    256         if self._settings['mode'] == 'plain':\r\n\r\n~\\miniconda3\\lib\\site-packages\\sympy\\printing\\printer.py in doprint(self, expr)\r\n    289     def doprint(self, expr):\r\n    290         \"\"\"Returns printer's representation for expr (as a string)\"\"\"\r\n--> 291         return self._str(self._print(expr))\r\n    292 \r\n    293     def _print(self, expr, **kwargs):\r\n\r\n~\\miniconda3\\lib\\site-packages\\sympy\\printing\\printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\n~\\miniconda3\\lib\\site-packages\\sympy\\printing\\latex.py in _print_Pow(self, expr)\r\n    649         else:\r\n    650             if expr.base.is_Function:\r\n--> 651                 return self._print(expr.base, exp=self._print(expr.exp))\r\n    652             else:\r\n    653                 tex = r\"%s^{%s}\"\r\n\r\n~\\miniconda3\\lib\\site-packages\\sympy\\printing\\printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\nTypeError: _print_LambertW() got an unexpected keyword argument 'exp'\r\n```\n",
  "hints_text": "This can be fixed with something like:\r\n```diff\r\ndiff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\r\nindex debc81ca8d..5bf0cff782 100644\r\n--- a/sympy/printing/latex.py\r\n+++ b/sympy/printing/latex.py\r\n@@ -2422,11 +2422,15 @@ def _print_DMF(self, p):\r\n     def _print_Object(self, object):\r\n         return self._print(Symbol(object.name))\r\n \r\n-    def _print_LambertW(self, expr):\r\n+    def _print_LambertW(self, expr, exp=None):\r\n+        arg0 = self._print(expr.args[0])\r\n+        exp = r'^{%s}' % (exp,) if exp is not None else ''\r\n         if len(expr.args) == 1:\r\n-            return r\"W\\left(%s\\right)\" % self._print(expr.args[0])\r\n-        return r\"W_{%s}\\left(%s\\right)\" % \\\r\n-            (self._print(expr.args[1]), self._print(expr.args[0]))\r\n+            result = r\"W%s\\left(%s\\right)\" % (exp, arg0)\r\n+        else:\r\n+            arg1 = self._print(expr.args[1])\r\n+            result = r\"W_{%s}%s\\left(%s\\right)\" % (exp, arg0, arg1)\r\n+        return result\r\n \r\n     def _print_Morphism(self, morphism):\r\n         domain = self._print(morphism.domain)\r\n```\nHi Can I get to solve this problem I am a new contributor. Can you guide me for the same.\n\r\n> This can be fixed with something like:\r\n\r\nI have made the changes suggested by @oscarbenjamin. Is there anything else that needs to be done? \r\n",
  "created_at": "2021-08-10T20:07:44Z",
  "version": "1.9",
  "FAIL_TO_PASS": "[\"test_latex_functions\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_latex_basic\", \"test_latex_builtins\", \"test_latex_SingularityFunction\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_function_subclass_different_name\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_indexed\", \"test_latex_derivatives\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_SetExpr\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_FourierSeries\", \"test_latex_FormalPowerSeries\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_universalset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_intersection\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_productset\", \"test_set_operators_parenthesis\", \"test_latex_Complexes\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_latex_log\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_mathieu\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_matrix_with_functions\", \"test_latex_NDimArray\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_noncommutative\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_Poly_order\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_settings\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_PrettyPoly\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_categories\", \"test_Modules\", \"test_QuotientRing\", \"test_Tr\", \"test_Adjoint\", \"test_Transpose\", \"test_Hadamard\", \"test_ElementwiseApplyFunction\", \"test_ZeroMatrix\", \"test_OneMatrix\", \"test_Identity\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_fancyset_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_7180\", \"test_issue_8409\", \"test_issue_8470\", \"test_issue_15439\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_issue_13559\", \"test_issue_13651\", \"test_latex_UnevaluatedExpr\", \"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\", \"test_KroneckerProduct_printing\", \"test_Series_printing\", \"test_TransferFunction_printing\", \"test_Parallel_printing\", \"test_TransferFunctionMatrix_printing\", \"test_Feedback_printing\", \"test_Quaternion_latex_printing\", \"test_TensorProduct_printing\", \"test_WedgeProduct_printing\", \"test_issue_9216\", \"test_latex_printer_tensor\", \"test_multiline_latex\", \"test_issue_15353\", \"test_trace\", \"test_print_basic\", \"test_MatrixSymbol_bold\", \"test_AppliedPermutation\", \"test_PermutationMatrix\", \"test_imaginary_unit\", \"test_text_re_im\", \"test_latex_diffgeom\", \"test_unit_printing\", \"test_issue_17092\", \"test_latex_decimal_separator\", \"test_Str\", \"test_latex_escape\", \"test_emptyPrinter\", \"test_global_settings\", \"test_pickleable\"]",
  "environment_setup_commit": "f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.147064",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}