{
  "repo": "psf/requests",
  "instance_id": "psf__requests-3738",
  "base_commit": "ca15d4808734c86801c8f3d80c9152c35a163dc3",
  "patch": "diff --git a/requests/models.py b/requests/models.py\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -347,9 +347,9 @@ def prepare_url(self, url, params):\n         url = url.lstrip()\n \n         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n-        # `data`, `http+unix` etc to work around exceptions from `url_parse`,\n-        # which handles RFC 3986 only.\n-        if ':' in url and not url.lower().startswith(('http://', 'https://')):\n+        # `data` etc to work around exceptions from `url_parse`, which\n+        # handles RFC 3986 only.\n+        if ':' in url and not url.lower().startswith('http'):\n             self.url = url\n             return\n \n",
  "test_patch": "diff --git a/tests/test_requests.py b/tests/test_requests.py\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -2177,18 +2177,72 @@ def test_preparing_bad_url(self, url):\n             r.prepare()\n \n     @pytest.mark.parametrize(\n-        'protocol, url',\n+        'input, expected',\n         (\n-            (\"http+unix://\", b\"http+unix://%2Fvar%2Frun%2Fsocket/path\"),\n-            (\"http+unix://\", u\"http+unix://%2Fvar%2Frun%2Fsocket/path\"),\n-            (\"mailto\", b\"mailto:user@example.org\"),\n-            (\"mailto\", u\"mailto:user@example.org\"),\n-            (\"data\", b\"data:SSDimaUgUHl0aG9uIQ==\"),\n+            (\n+                b\"http+unix://%2Fvar%2Frun%2Fsocket/path\",\n+                u\"http+unix://%2fvar%2frun%2fsocket/path\",\n+            ),\n+            (\n+                u\"http+unix://%2Fvar%2Frun%2Fsocket/path\",\n+                u\"http+unix://%2fvar%2frun%2fsocket/path\",\n+            ),\n+            (\n+                b\"mailto:user@example.org\",\n+                u\"mailto:user@example.org\",\n+            ),\n+            (\n+                u\"mailto:user@example.org\",\n+                u\"mailto:user@example.org\",\n+            ),\n+            (\n+                b\"data:SSDimaUgUHl0aG9uIQ==\",\n+                u\"data:SSDimaUgUHl0aG9uIQ==\",\n+            )\n         )\n     )\n-    def test_url_passthrough(self, protocol, url):\n-        session = requests.Session()\n-        session.mount(protocol, HTTPAdapter())\n-        p = requests.Request('GET', url=url)\n-        p.prepare()\n-        assert p.url == url\n+    def test_url_mutation(self, input, expected):\n+        \"\"\"\n+        This test validates that we correctly exclude some URLs from\n+        preparation, and that we handle others. Specifically, it tests that\n+        any URL whose scheme doesn't begin with \"http\" is left alone, and\n+        those whose scheme *does* begin with \"http\" are mutated.\n+        \"\"\"\n+        r = requests.Request('GET', url=input)\n+        p = r.prepare()\n+        assert p.url == expected\n+\n+    @pytest.mark.parametrize(\n+        'input, params, expected',\n+        (\n+            (\n+                b\"http+unix://%2Fvar%2Frun%2Fsocket/path\",\n+                {\"key\": \"value\"},\n+                u\"http+unix://%2fvar%2frun%2fsocket/path?key=value\",\n+            ),\n+            (\n+                u\"http+unix://%2Fvar%2Frun%2Fsocket/path\",\n+                {\"key\": \"value\"},\n+                u\"http+unix://%2fvar%2frun%2fsocket/path?key=value\",\n+            ),\n+            (\n+                b\"mailto:user@example.org\",\n+                {\"key\": \"value\"},\n+                u\"mailto:user@example.org\",\n+            ),\n+            (\n+                u\"mailto:user@example.org\",\n+                {\"key\": \"value\"},\n+                u\"mailto:user@example.org\",\n+            ),\n+        )\n+    )\n+    def test_parameters_for_nonstandard_schemes(self, input, params, expected):\n+        \"\"\"\n+        Setting paramters for nonstandard schemes is allowed if those schemes\n+        begin with \"http\", and is forbidden otherwise.\n+        \"\"\"\n+        r = requests.Request('GET', url=input, params=params)\n+        p = r.prepare()\n+        assert p.url == expected\n+\n",
  "problem_statement": "Requests v2.12.2 does not add parameters to URLs with schemes it does not understand.\nFollows from #3734.\r\n\r\nWhen we patched to ignore all unrecognised schemes instead of just those that didn't begin `http`, we stopped handling parameters for those URLs. This may break some more benign uses such as `http+unix`, which wanted to add parameters to their URLs.\r\n\r\nWhile this is inline with our intended policies (we do not understand URLs that have schemes we don't know anything about), this, along with the IDNA behaviour in v2.12.{0,1} will probably have broken a whole bunch of people using these non-standard URL schemes.\r\n\r\nWe should consider whether Session objects should have a registry of places to look for URL preparation based on scheme. This will allow people to opt-in to the HTTP-like processing of URLs, as well as to register their own.\n",
  "hints_text": "I should note that we have had this conversation with the docker-py folks before: see #1879.\r\n\r\nUltimately, there is a problem with how much people want us to understand URLs for non-standard HTTP schemes. People would like us to understand them enough to add query parameters, but not so much that we look for a hostname to internationalize.\r\n\r\nI am as conflicted as I was three years ago.",
  "created_at": "2016-11-30T21:22:10Z",
  "version": "2.12",
  "FAIL_TO_PASS": "[\"tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path-http+unix://%2fvar%2frun%2fsocket/path0]\", \"tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path-http+unix://%2fvar%2frun%2fsocket/path1]\", \"tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params0-http+unix://%2fvar%2frun%2fsocket/path?key=value]\", \"tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params1-http+unix://%2fvar%2frun%2fsocket/path?key=value]\"]",
  "PASS_TO_PASS": "[\"tests/test_requests.py::TestRequests::test_entry_points\", \"tests/test_requests.py::TestRequests::test_invalid_url[MissingSchema-hiwpefhipowhefopw]\", \"tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost:3128]\", \"tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost.localdomain:3128/]\", \"tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-10.122.1.1:3128/]\", \"tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://]\", \"tests/test_requests.py::TestRequests::test_basic_building\", \"tests/test_requests.py::TestRequests::test_path_is_not_double_encoded\", \"tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]\", \"tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&a=b#fragment]\", \"tests/test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default\", \"tests/test_requests.py::TestRequests::test_params_bytes_are_encoded\", \"tests/test_requests.py::TestRequests::test_binary_put\", \"tests/test_requests.py::TestRequests::test_whitespaces_are_removed_from_url\", \"tests/test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]\", \"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\", \"tests/test_requests.py::TestRequests::test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]\", \"tests/test_requests.py::TestRequests::test_proxy_error\", \"tests/test_requests.py::TestRequests::test_non_prepared_request_error\", \"tests/test_requests.py::TestRequests::test_prepare_request_with_bytestring_url\", \"tests/test_requests.py::TestRequests::test_links\", \"tests/test_requests.py::TestRequests::test_cookie_parameters\", \"tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_len\", \"tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_items\", \"tests/test_requests.py::TestRequests::test_cookie_as_dict_keys\", \"tests/test_requests.py::TestRequests::test_cookie_as_dict_values\", \"tests/test_requests.py::TestRequests::test_cookie_as_dict_items\", \"tests/test_requests.py::TestRequests::test_cookie_duplicate_names_different_domains\", \"tests/test_requests.py::TestRequests::test_cookie_duplicate_names_raises_cookie_conflict_error\", \"tests/test_requests.py::TestRequests::test_empty_response_has_content_none\", \"tests/test_requests.py::TestRequests::test_response_is_iterable\", \"tests/test_requests.py::TestRequests::test_response_decode_unicode\", \"tests/test_requests.py::TestRequests::test_response_reason_unicode\", \"tests/test_requests.py::TestRequests::test_response_reason_unicode_fallback\", \"tests/test_requests.py::TestRequests::test_response_chunk_size_type\", \"tests/test_requests.py::TestRequests::test_http_error\", \"tests/test_requests.py::TestRequests::test_transport_adapter_ordering\", \"tests/test_requests.py::TestRequests::test_long_authinfo_in_url\", \"tests/test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs\", \"tests/test_requests.py::TestRequests::test_prepare_body_position_non_stream\", \"tests/test_requests.py::TestRequests::test_rewind_body\", \"tests/test_requests.py::TestRequests::test_rewind_partially_read_body\", \"tests/test_requests.py::TestRequests::test_rewind_body_no_seek\", \"tests/test_requests.py::TestRequests::test_rewind_body_failed_seek\", \"tests/test_requests.py::TestRequests::test_rewind_body_failed_tell\", \"tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[test-test-Basic\", \"tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[\\\\xd0\\\\xb8\\\\xd0\\\\xbc\\\\xd1\\\\x8f-\\\\xd0\\\\xbf\\\\xd0\\\\xb0\\\\xd1\\\\x80\\\\xd0\\\\xbe\\\\xd0\\\\xbb\\\\xd1\\\\x8c-Basic\", \"tests/test_requests.py::TestRequests::test_response_without_release_conn\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid0]\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid1]\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid2]\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_len\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_contains\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_get\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_update\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_iter\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_equality\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_copy\", \"tests/test_requests.py::TestMorselToCookieExpires::test_expires_valid_str\", \"tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[100-TypeError]\", \"tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[woops-ValueError]\", \"tests/test_requests.py::TestMorselToCookieExpires::test_expires_none\", \"tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int\", \"tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str\", \"tests/test_requests.py::TestTimeout::test_connect_timeout\", \"tests/test_requests.py::TestTimeout::test_total_timeout_connect\", \"tests/test_requests.py::test_json_encodes_as_bytes\", \"tests/test_requests.py::test_proxy_env_vars_override_default[http_proxy-http://example.com-socks5://proxy.com:9876]\", \"tests/test_requests.py::test_proxy_env_vars_override_default[https_proxy-https://example.com-socks5://proxy.com:9876]\", \"tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-http://example.com-socks5://proxy.com:9876]\", \"tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-https://example.com-socks5://proxy.com:9876]\", \"tests/test_requests.py::test_data_argument_accepts_tuples[data0]\", \"tests/test_requests.py::test_data_argument_accepts_tuples[data1]\", \"tests/test_requests.py::test_data_argument_accepts_tuples[data2]\", \"tests/test_requests.py::test_prepared_copy[None]\", \"tests/test_requests.py::test_prepared_copy[kwargs1]\", \"tests/test_requests.py::test_prepared_copy[kwargs2]\", \"tests/test_requests.py::test_prepared_copy[kwargs3]\", \"tests/test_requests.py::test_vendor_aliases\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://google.com-http://google.com/]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\\\u30b8\\\\u30a7\\\\u30fc\\\\u30d4\\\\u30fc\\\\u30cb\\\\u30c3\\\\u30af.jp-http://xn--hckqz9bzb1cyrb.jp/]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/0]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\\\xe3\\\\x82\\\\xb8\\\\xe3\\\\x82\\\\xa7\\\\xe3\\\\x83\\\\xbc\\\\xe3\\\\x83\\\\x94\\\\xe3\\\\x83\\\\xbc\\\\xe3\\\\x83\\\\x8b\\\\xe3\\\\x83\\\\x83\\\\xe3\\\\x82\\\\xaf.jp-http://xn--hckqz9bzb1cyrb.jp/]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\\\xdfe.de/stra\\\\xdfe-http://xn--strae-oqa.de/stra%C3%9Fe]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\\\xc3\\\\x9fe.de/stra\\\\xc3\\\\x9fe-http://xn--strae-oqa.de/stra%C3%9Fe]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\\\xf6nigsg\\\\xe4\\\\xdfchen.de/stra\\\\xdfe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\\\xc3\\\\xb6nigsg\\\\xc3\\\\xa4\\\\xc3\\\\x9fchen.de/stra\\\\xc3\\\\x9fe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/1]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/0]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/1]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com0]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*0]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com1]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*1]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://\\\\u2603.net/]\", \"tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org0]\", \"tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org1]\", \"tests/test_requests.py::TestPreparingURLs::test_url_mutation[data:SSDimaUgUHl0aG9uIQ==-data:SSDimaUgUHl0aG9uIQ==]\", \"tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params2-mailto:user@example.org]\", \"tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params3-mailto:user@example.org]\"]",
  "environment_setup_commit": "ca15d4808734c86801c8f3d80c9152c35a163dc3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.863189",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}