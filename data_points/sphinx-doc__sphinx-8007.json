{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8007",
  "base_commit": "9175da437ed84e43b00ed4c28ccfe629260d3c13",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1213,7 +1213,8 @@ def format_args(self, **kwargs: Any) -> str:\n \n         try:\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n-            sig = inspect.signature(self.object, follow_wrapped=True)\n+            sig = inspect.signature(self.object, follow_wrapped=True,\n+                                    type_aliases=self.env.config.autodoc_type_aliases)\n             args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n@@ -1262,7 +1263,9 @@ def format_signature(self, **kwargs: Any) -> str:\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n-                overload = evaluate_signature(overload, __globals__)\n+                overload = evaluate_signature(overload, __globals__,\n+                                              self.env.config.autodoc_type_aliases)\n+\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n@@ -1271,7 +1274,7 @@ def format_signature(self, **kwargs: Any) -> str:\n     def annotate_to_first_argument(self, func: Callable, typ: Type) -> None:\n         \"\"\"Annotate type hint to the first argument of function if needed.\"\"\"\n         try:\n-            sig = inspect.signature(func)\n+            sig = inspect.signature(func, type_aliases=self.env.config.autodoc_type_aliases)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n                            self.fullname, exc)\n@@ -1392,7 +1395,8 @@ def get_user_defined_function_or_method(obj: Any, attr: str) -> Any:\n         if call is not None:\n             self.env.app.emit('autodoc-before-process-signature', call, True)\n             try:\n-                sig = inspect.signature(call, bound_method=True)\n+                sig = inspect.signature(call, bound_method=True,\n+                                        type_aliases=self.env.config.autodoc_type_aliases)\n                 return type(self.object), '__call__', sig\n             except ValueError:\n                 pass\n@@ -1407,7 +1411,8 @@ def get_user_defined_function_or_method(obj: Any, attr: str) -> Any:\n         if new is not None:\n             self.env.app.emit('autodoc-before-process-signature', new, True)\n             try:\n-                sig = inspect.signature(new, bound_method=True)\n+                sig = inspect.signature(new, bound_method=True,\n+                                        type_aliases=self.env.config.autodoc_type_aliases)\n                 return self.object, '__new__', sig\n             except ValueError:\n                 pass\n@@ -1417,7 +1422,8 @@ def get_user_defined_function_or_method(obj: Any, attr: str) -> Any:\n         if init is not None:\n             self.env.app.emit('autodoc-before-process-signature', init, True)\n             try:\n-                sig = inspect.signature(init, bound_method=True)\n+                sig = inspect.signature(init, bound_method=True,\n+                                        type_aliases=self.env.config.autodoc_type_aliases)\n                 return self.object, '__init__', sig\n             except ValueError:\n                 pass\n@@ -1428,7 +1434,8 @@ def get_user_defined_function_or_method(obj: Any, attr: str) -> Any:\n         # the signature from, so just pass the object itself to our hook.\n         self.env.app.emit('autodoc-before-process-signature', self.object, False)\n         try:\n-            sig = inspect.signature(self.object, bound_method=False)\n+            sig = inspect.signature(self.object, bound_method=False,\n+                                    type_aliases=self.env.config.autodoc_type_aliases)\n             return None, None, sig\n         except ValueError:\n             pass\n@@ -1475,7 +1482,8 @@ def format_signature(self, **kwargs: Any) -> str:\n             method = safe_getattr(self._signature_class, self._signature_method_name, None)\n             __globals__ = safe_getattr(method, '__globals__', {})\n             for overload in self.analyzer.overloads.get(qualname):\n-                overload = evaluate_signature(overload, __globals__)\n+                overload = evaluate_signature(overload, __globals__,\n+                                              self.env.config.autodoc_type_aliases)\n \n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:],\n@@ -1820,11 +1828,13 @@ def format_args(self, **kwargs: Any) -> str:\n             else:\n                 if inspect.isstaticmethod(self.object, cls=self.parent, name=self.object_name):\n                     self.env.app.emit('autodoc-before-process-signature', self.object, False)\n-                    sig = inspect.signature(self.object, bound_method=False)\n+                    sig = inspect.signature(self.object, bound_method=False,\n+                                            type_aliases=self.env.config.autodoc_type_aliases)\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                     sig = inspect.signature(self.object, bound_method=True,\n-                                            follow_wrapped=True)\n+                                            follow_wrapped=True,\n+                                            type_aliases=self.env.config.autodoc_type_aliases)\n                 args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n@@ -1884,7 +1894,9 @@ def format_signature(self, **kwargs: Any) -> str:\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n-                overload = evaluate_signature(overload, __globals__)\n+                overload = evaluate_signature(overload, __globals__,\n+                                              self.env.config.autodoc_type_aliases)\n+\n                 if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                               name=self.object_name):\n                     parameters = list(overload.parameters.values())\n@@ -1897,7 +1909,7 @@ def format_signature(self, **kwargs: Any) -> str:\n     def annotate_to_first_argument(self, func: Callable, typ: Type) -> None:\n         \"\"\"Annotate type hint to the first argument of function if needed.\"\"\"\n         try:\n-            sig = inspect.signature(func)\n+            sig = inspect.signature(func, type_aliases=self.env.config.autodoc_type_aliases)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n                            self.fullname, exc)\n@@ -2237,6 +2249,7 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n     app.add_config_value('autodoc_mock_imports', [], True)\n     app.add_config_value('autodoc_typehints', \"signature\", True,\n                          ENUM(\"signature\", \"description\", \"none\"))\n+    app.add_config_value('autodoc_type_aliases', {}, True)\n     app.add_config_value('autodoc_warningiserror', True, True)\n     app.add_config_value('autodoc_inherit_docstrings', True, True)\n     app.add_event('autodoc-before-process-signature')\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -439,8 +439,8 @@ def _should_unwrap(subject: Callable) -> bool:\n     return False\n \n \n-def signature(subject: Callable, bound_method: bool = False, follow_wrapped: bool = False\n-              ) -> inspect.Signature:\n+def signature(subject: Callable, bound_method: bool = False, follow_wrapped: bool = False,\n+              type_aliases: Dict = {}) -> inspect.Signature:\n     \"\"\"Return a Signature object for the given *subject*.\n \n     :param bound_method: Specify *subject* is a bound method or not\n@@ -470,7 +470,7 @@ def signature(subject: Callable, bound_method: bool = False, follow_wrapped: boo\n \n     try:\n         # Update unresolved annotations using ``get_type_hints()``.\n-        annotations = typing.get_type_hints(subject)\n+        annotations = typing.get_type_hints(subject, None, type_aliases)\n         for i, param in enumerate(parameters):\n             if isinstance(param.annotation, str) and param.name in annotations:\n                 parameters[i] = param.replace(annotation=annotations[param.name])\ndiff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -63,7 +63,11 @@ def is_system_TypeVar(typ: Any) -> bool:\n def stringify(annotation: Any) -> str:\n     \"\"\"Stringify type annotation object.\"\"\"\n     if isinstance(annotation, str):\n-        return annotation\n+        if annotation.startswith(\"'\") and annotation.endswith(\"'\"):\n+            # might be a double Forward-ref'ed type.  Go unquoting.\n+            return annotation[1:-2]\n+        else:\n+            return annotation\n     elif isinstance(annotation, TypeVar):  # type: ignore\n         return annotation.__name__\n     elif not annotation:\n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -0,0 +1,25 @@\n+from __future__ import annotations\n+from typing import overload\n+\n+\n+myint = int\n+\n+\n+def sum(x: myint, y: myint) -> myint:\n+    \"\"\"docstring\"\"\"\n+    return x + y\n+\n+\n+@overload\n+def mult(x: myint, y: myint) -> myint:\n+    ...\n+\n+\n+@overload\n+def mult(x: float, y: float) -> float:\n+    ...\n+\n+\n+def mult(x, y):\n+    \"\"\"docstring\"\"\"\n+    return x, y\ndiff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -642,6 +642,54 @@ def test_autodoc_typehints_description_for_invalid_node(app):\n     restructuredtext.parse(app, text)  # raises no error\n \n \n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc')\n+def test_autodoc_type_aliases(app):\n+    # default\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'module', 'target.annotations', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.annotations',\n+        '',\n+        '',\n+        '.. py:function:: mult(x: int, y: int) -> int',\n+        '                 mult(x: float, y: float) -> float',\n+        '   :module: target.annotations',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:function:: sum(x: int, y: int) -> int',\n+        '   :module: target.annotations',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n+    # define aliases\n+    app.config.autodoc_type_aliases = {'myint': 'myint'}\n+    actual = do_autodoc(app, 'module', 'target.annotations', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.annotations',\n+        '',\n+        '',\n+        '.. py:function:: mult(x: myint, y: myint) -> myint',\n+        '                 mult(x: float, y: float) -> float',\n+        '   :module: target.annotations',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:function:: sum(x: myint, y: myint) -> myint',\n+        '   :module: target.annotations',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_autodoc_default_options(app):\n     # no settings\n",
  "problem_statement": "Option for not unfolding aliases\nWould it be possible to add an option for autodoc not to unfold user-defined type aliases? \r\nFor example, if I introduce a type synonym Position = int and then define a method with argument pos: Position then I would like to see this typing in the documentation and not pos: int. For me, unfolding the alias is loosing information on how the program is built, something a documentation should not do, unless required by the author.\r\n\n",
  "hints_text": "How did you define the type? If you're using [type aliases](https://mypy.readthedocs.io/en/latest/kinds_of_types.html#type-aliases), it does not define a new type as mypy docs says:\r\n\r\n>A type alias does not create a new type. It’s just a shorthand notation for another type – it’s equivalent to the target type except for generic aliases.\r\n\r\nI think it is hard to control from Sphinx side.\n> How did you define the type? If you're using type aliases \n> <https://mypy.readthedocs.io/en/latest/kinds_of_types.html#type-aliases>, \n> it does not define a new type as mypy docs says:\n>\n>     A type alias does not create a new type. It’s just a shorthand\n>     notation for another type – it’s equivalent to the target type\n>     except for generic aliases.\n>\n> I think it is hard to control from Sphinx side.\n>\nThank you for your quick and kind answer. I can see now why Sphinx \nbehaves like that.\n\nAlthough, it is really disappointing. I believe that you agree with me. \nGiving types to parameters serves documenting the code. Type aliases \nmake this part of documentation clearer. Until they get automatically \nprocessed in order for the documentation to look nice...\n\n\n\n\nIt would be very nice if realized. Do you have good idea to do that? As my understanding, new static source code analyzer is needed to do that. Please let me know good libraries for that.\nSorry for responding so late. \r\n\r\nI think that the problem comes from relying on the full import mechanism of Python instead of on just its parsing phase. \r\nThere are libraries, such as ast or typed_ast, that build an abstract syntax tree of a script. This tree can further be processed to typeset the script it nicely. Such approach is used, for example, by the 'build' formatter. \r\nI did an experiment. Its data and results are quoted below. I defined type aliases in two files, a.py and b.py. The a.py script was then subject to parsing by a ast_test.py script. Apparently, the parsing did not unfold the type aliases, they remained just plain identifiers.\r\n\r\nWhat do you think?\r\nRyszard\r\n\r\n##### a.py: #####\r\n\r\nfrom typing import Tuple\r\nfrom b import T\r\n\r\nU = Tuple[int, int]\r\n\r\ndef f(a: U) -> T:\r\n    \"\"\"A doc string.\"\"\"\r\n    return a\r\n\r\n\r\n##### b.py: #####\r\n\r\nfrom typing import Tuple\r\n\r\nT = Tuple[int, int]\r\n\r\n\r\n##### ast_test.py: #####\r\n\r\nfrom typed_ast import ast3\r\nimport astpretty\r\n\r\ndef main():\r\n    source = open(\"a.py\", \"r\") \r\n    tree = ast3.parse(source.read())\r\n    for i in range(len(tree.body)):\r\n        astpretty.pprint(tree.body[i])\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n\r\n##### Result of 'python3 ast_test.py': #####\r\n\r\nImportFrom(\r\n    lineno=1,\r\n    col_offset=0,\r\n    module='typing',\r\n    names=[alias(name='Tuple', asname=None)],\r\n    level=0,\r\n)\r\nImportFrom(\r\n    lineno=2,\r\n    col_offset=0,\r\n    module='b',\r\n    names=[alias(name='T', asname=None)],\r\n    level=0,\r\n)\r\nAssign(\r\n    lineno=4,\r\n    col_offset=0,\r\n    targets=[Name(lineno=4, col_offset=0, id='U', ctx=Store())],\r\n    value=Subscript(\r\n        lineno=4,\r\n        col_offset=4,\r\n        value=Name(lineno=4, col_offset=4, id='Tuple', ctx=Load()),\r\n        slice=Index(\r\n            value=Tuple(\r\n                lineno=4,\r\n                col_offset=10,\r\n                elts=[\r\n                    Name(lineno=4, col_offset=10, id='int', ctx=Load()),\r\n                    Name(lineno=4, col_offset=15, id='int', ctx=Load()),\r\n                ],\r\n                ctx=Load(),\r\n            ),\r\n        ),\r\n        ctx=Load(),\r\n    ),\r\n    type_comment=None,\r\n)\r\nFunctionDef(\r\n    lineno=6,\r\n    col_offset=0,\r\n    name='f',\r\n    args=arguments(\r\n        args=[\r\n            arg(\r\n                lineno=6,\r\n                col_offset=6,\r\n                arg='a',\r\n                annotation=Name(lineno=6, col_offset=9, id='U', ctx=Load()),\r\n                type_comment=None,\r\n            ),\r\n        ],\r\n        vararg=None,\r\n        kwonlyargs=[],\r\n        kw_defaults=[],\r\n        kwarg=None,\r\n        defaults=[],\r\n    ),\r\n    body=[\r\n        Expr(\r\n            lineno=7,\r\n            col_offset=4,\r\n            value=Str(lineno=7, col_offset=4, s='A doc string.', kind=''),\r\n        ),\r\n        Return(\r\n            lineno=8,\r\n            col_offset=4,\r\n            value=Name(lineno=8, col_offset=11, id='a', ctx=Load()),\r\n        ),\r\n    ],\r\n    decorator_list=[],\r\n    returns=Name(lineno=6, col_offset=15, id='T', ctx=Load()),\r\n    type_comment=None,\r\n)\r\n\r\n\nThis is doable with zero alterations to the Sphinx codebase. All you need is the `annotations` future-import (introduced in [PEP 563](https://www.python.org/dev/peps/pep-0563/) and available in Python >=3.7) and a monkey-patched `typing.get_type_hints`:\r\n\r\n```python\r\nimport typing\r\ntyping.get_type_hints = lambda obj, *unused: obj\r\n```\r\n\r\nSphinx uses `typing.get_type_hints` to [resolve](https://github.com/sphinx-doc/sphinx/blob/7d3ad79392c4fc1ee9ad162b7cc107f391549b58/sphinx/util/inspect.py#L357) string annotations, so the future-import alone is not sufficient. Making this behavior configurable will allow to avoid monkey-patching.\nWhen trying:\r\n\r\n```\r\nfrom __future__ import annotations\r\nimport typing\r\ntyping.get_type_hints = lambda obj, *unused: obj\r\n```\r\n\r\nsphinx_autodocs_typehints fails with \r\n`AttributeError: '_SpecialForm' object has no attribute 'items'`\r\n\r\nThat may not be directly related to Sphinx ",
  "created_at": "2020-07-26T17:21:43Z",
  "version": "3.3",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autodoc_type_aliases\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autoclass_content_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_both\", \"tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings\", \"tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both\", \"tests/test_ext_autodoc_configs.py::test_mocked_module_imports\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values\"]",
  "environment_setup_commit": "3b85187ffa3401e88582073c23188c147857a8a3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.049693",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}