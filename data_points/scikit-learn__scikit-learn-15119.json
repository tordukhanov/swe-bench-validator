{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-15119",
  "base_commit": "4ca6ee4a5068f60fde2a70ed6e9f15bdfc2ce396",
  "patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -876,7 +876,7 @@ def get_feature_names(self):\n                                   trans.get_feature_names()])\n         return feature_names\n \n-    def fit(self, X, y=None):\n+    def fit(self, X, y=None, **fit_params):\n         \"\"\"Fit all transformers using X.\n \n         Parameters\n@@ -892,7 +892,7 @@ def fit(self, X, y=None):\n         self : FeatureUnion\n             This estimator\n         \"\"\"\n-        transformers = self._parallel_func(X, y, {}, _fit_one)\n+        transformers = self._parallel_func(X, y, fit_params, _fit_one)\n         if not transformers:\n             # All transformers are None\n             return self\n",
  "test_patch": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -21,7 +21,7 @@\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_no_warnings\n \n-from sklearn.base import clone, BaseEstimator\n+from sklearn.base import clone, BaseEstimator, TransformerMixin\n from sklearn.pipeline import Pipeline, FeatureUnion, make_pipeline, make_union\n from sklearn.svm import SVC\n from sklearn.neighbors import LocalOutlierFactor\n@@ -35,6 +35,7 @@\n from sklearn.preprocessing import StandardScaler\n from sklearn.feature_extraction.text import CountVectorizer\n \n+iris = load_iris()\n \n JUNK_FOOD_DOCS = (\n     \"the pizza pizza beer copyright\",\n@@ -240,7 +241,6 @@ def test_pipeline_init_tuple():\n \n def test_pipeline_methods_anova():\n     # Test the various methods of the pipeline (anova).\n-    iris = load_iris()\n     X = iris.data\n     y = iris.target\n     # Test with Anova + LogisticRegression\n@@ -319,7 +319,6 @@ def test_pipeline_raise_set_params_error():\n \n def test_pipeline_methods_pca_svm():\n     # Test the various methods of the pipeline (pca + svm).\n-    iris = load_iris()\n     X = iris.data\n     y = iris.target\n     # Test with PCA + SVC\n@@ -334,7 +333,6 @@ def test_pipeline_methods_pca_svm():\n \n \n def test_pipeline_score_samples_pca_lof():\n-    iris = load_iris()\n     X = iris.data\n     # Test that the score_samples method is implemented on a pipeline.\n     # Test that the score_samples method on pipeline yields same results as\n@@ -365,7 +363,6 @@ def test_score_samples_on_pipeline_without_score_samples():\n \n def test_pipeline_methods_preprocessing_svm():\n     # Test the various methods of the pipeline (preprocessing + svm).\n-    iris = load_iris()\n     X = iris.data\n     y = iris.target\n     n_samples = X.shape[0]\n@@ -398,7 +395,6 @@ def test_fit_predict_on_pipeline():\n     # test that the fit_predict method is implemented on a pipeline\n     # test that the fit_predict on pipeline yields same results as applying\n     # transform and clustering steps separately\n-    iris = load_iris()\n     scaler = StandardScaler()\n     km = KMeans(random_state=0)\n     # As pipeline doesn't clone estimators on construction,\n@@ -456,7 +452,6 @@ def test_predict_with_predict_params():\n \n def test_feature_union():\n     # basic sanity check for feature union\n-    iris = load_iris()\n     X = iris.data\n     X -= X.mean(axis=0)\n     y = iris.target\n@@ -530,7 +525,6 @@ def test_make_union_kwargs():\n def test_pipeline_transform():\n     # Test whether pipeline works with a transformer at the end.\n     # Also test pipeline.transform and pipeline.inverse_transform\n-    iris = load_iris()\n     X = iris.data\n     pca = PCA(n_components=2, svd_solver='full')\n     pipeline = Pipeline([('pca', pca)])\n@@ -549,7 +543,6 @@ def test_pipeline_transform():\n \n def test_pipeline_fit_transform():\n     # Test whether pipeline works with a transformer missing fit_transform\n-    iris = load_iris()\n     X = iris.data\n     y = iris.target\n     transf = Transf()\n@@ -771,7 +764,6 @@ def test_make_pipeline():\n \n def test_feature_union_weights():\n     # test feature union with transformer weights\n-    iris = load_iris()\n     X = iris.data\n     y = iris.target\n     pca = PCA(n_components=2, svd_solver='randomized', random_state=0)\n@@ -865,7 +857,6 @@ def test_feature_union_feature_names():\n \n \n def test_classes_property():\n-    iris = load_iris()\n     X = iris.data\n     y = iris.target\n \n@@ -987,7 +978,6 @@ def test_set_params_nested_pipeline():\n def test_pipeline_wrong_memory():\n     # Test that an error is raised when memory is not a string or a Memory\n     # instance\n-    iris = load_iris()\n     X = iris.data\n     y = iris.target\n     # Define memory as an integer\n@@ -1022,7 +1012,6 @@ def test_pipeline_with_cache_attribute():\n \n \n def test_pipeline_memory():\n-    iris = load_iris()\n     X = iris.data\n     y = iris.target\n     cachedir = mkdtemp()\n@@ -1161,3 +1150,26 @@ def test_verbose(est, method, pattern, capsys):\n     est.set_params(verbose=True)\n     func(X, y)\n     assert re.match(pattern, capsys.readouterr().out)\n+\n+\n+def test_feature_union_fit_params():\n+    # Regression test for issue: #15117\n+    class Dummy(TransformerMixin, BaseEstimator):\n+        def fit(self, X, y=None, **fit_params):\n+            if fit_params != {'a': 0}:\n+                raise ValueError\n+            return self\n+\n+        def transform(self, X, y=None):\n+            return X\n+\n+    X, y = iris.data, iris.target\n+    t = FeatureUnion([('dummy0', Dummy()), ('dummy1', Dummy())])\n+    with pytest.raises(ValueError):\n+        t.fit(X, y)\n+\n+    with pytest.raises(ValueError):\n+        t.fit_transform(X, y)\n+\n+    t.fit(X, y, a=0)\n+    t.fit_transform(X, y, a=0)\n",
  "problem_statement": "Inconsistent fit + transform and fit_transform for FeatureUnion\nIs there a reason why the `FeatureUnion` method signature `fit_transform` accepts `fit_args` but neither `fit` nor `transform` do? It seems to go against the pattern that `fit_transform()` is the same as calling `fit().transform()`?\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/1495f69242646d239d89a5713982946b8ffcf9d9/sklearn/pipeline.py#L895\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/1495f69242646d239d89a5713982946b8ffcf9d9/sklearn/pipeline.py#L871\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/1495f69242646d239d89a5713982946b8ffcf9d9/sklearn/pipeline.py#L944\r\n\r\nI see there's been discussion on supporting  `fit_args` but it's not clear if this is resolved. My case is I'm trying to migrage code I wrote a while back where I used a Pipeline and each of my transformers adds columns to a dataframe, to a FeatureUnion where each transform only returns the new columns. One of my transforms takes a third data set in addition to X and y which is used as the transform. I guess as a workaround I'll make it a param of the transform rather than a fit_arg.\n",
  "hints_text": "",
  "created_at": "2019-10-02T11:43:19Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/tests/test_pipeline.py::test_feature_union_fit_params\"]",
  "PASS_TO_PASS": "[\"sklearn/tests/test_pipeline.py::test_pipeline_init\", \"sklearn/tests/test_pipeline.py::test_pipeline_init_tuple\", \"sklearn/tests/test_pipeline.py::test_pipeline_methods_anova\", \"sklearn/tests/test_pipeline.py::test_pipeline_fit_params\", \"sklearn/tests/test_pipeline.py::test_pipeline_sample_weight_supported\", \"sklearn/tests/test_pipeline.py::test_pipeline_sample_weight_unsupported\", \"sklearn/tests/test_pipeline.py::test_pipeline_raise_set_params_error\", \"sklearn/tests/test_pipeline.py::test_pipeline_methods_pca_svm\", \"sklearn/tests/test_pipeline.py::test_pipeline_score_samples_pca_lof\", \"sklearn/tests/test_pipeline.py::test_score_samples_on_pipeline_without_score_samples\", \"sklearn/tests/test_pipeline.py::test_pipeline_methods_preprocessing_svm\", \"sklearn/tests/test_pipeline.py::test_fit_predict_on_pipeline\", \"sklearn/tests/test_pipeline.py::test_fit_predict_on_pipeline_without_fit_predict\", \"sklearn/tests/test_pipeline.py::test_fit_predict_with_intermediate_fit_params\", \"sklearn/tests/test_pipeline.py::test_predict_with_predict_params\", \"sklearn/tests/test_pipeline.py::test_feature_union\", \"sklearn/tests/test_pipeline.py::test_make_union\", \"sklearn/tests/test_pipeline.py::test_make_union_kwargs\", \"sklearn/tests/test_pipeline.py::test_pipeline_transform\", \"sklearn/tests/test_pipeline.py::test_pipeline_fit_transform\", \"sklearn/tests/test_pipeline.py::test_pipeline_slice\", \"sklearn/tests/test_pipeline.py::test_pipeline_index\", \"sklearn/tests/test_pipeline.py::test_set_pipeline_steps\", \"sklearn/tests/test_pipeline.py::test_pipeline_named_steps\", \"sklearn/tests/test_pipeline.py::test_pipeline_correctly_adjusts_steps[None]\", \"sklearn/tests/test_pipeline.py::test_pipeline_correctly_adjusts_steps[passthrough]\", \"sklearn/tests/test_pipeline.py::test_set_pipeline_step_passthrough[None]\", \"sklearn/tests/test_pipeline.py::test_set_pipeline_step_passthrough[passthrough]\", \"sklearn/tests/test_pipeline.py::test_pipeline_ducktyping\", \"sklearn/tests/test_pipeline.py::test_make_pipeline\", \"sklearn/tests/test_pipeline.py::test_feature_union_weights\", \"sklearn/tests/test_pipeline.py::test_feature_union_parallel\", \"sklearn/tests/test_pipeline.py::test_feature_union_feature_names\", \"sklearn/tests/test_pipeline.py::test_classes_property\", \"sklearn/tests/test_pipeline.py::test_set_feature_union_steps\", \"sklearn/tests/test_pipeline.py::test_set_feature_union_step_drop[drop]\", \"sklearn/tests/test_pipeline.py::test_set_feature_union_step_drop[None]\", \"sklearn/tests/test_pipeline.py::test_step_name_validation\", \"sklearn/tests/test_pipeline.py::test_set_params_nested_pipeline\", \"sklearn/tests/test_pipeline.py::test_pipeline_wrong_memory\", \"sklearn/tests/test_pipeline.py::test_pipeline_with_cache_attribute\", \"sklearn/tests/test_pipeline.py::test_pipeline_memory\", \"sklearn/tests/test_pipeline.py::test_make_pipeline_memory\", \"sklearn/tests/test_pipeline.py::test_pipeline_param_error\", \"sklearn/tests/test_pipeline.py::test_verbose[est0-\\\\\\\\[Pipeline\\\\\\\\].*\\\\\\\\(step\", \"sklearn/tests/test_pipeline.py::test_verbose[est1-\\\\\\\\[Pipeline\\\\\\\\].*\\\\\\\\(step\", \"sklearn/tests/test_pipeline.py::test_verbose[est2-\\\\\\\\[Pipeline\\\\\\\\].*\\\\\\\\(step\", \"sklearn/tests/test_pipeline.py::test_verbose[est3-\\\\\\\\[Pipeline\\\\\\\\].*\\\\\\\\(step\", \"sklearn/tests/test_pipeline.py::test_verbose[est4-\\\\\\\\[Pipeline\\\\\\\\].*\\\\\\\\(step\", \"sklearn/tests/test_pipeline.py::test_verbose[est5-\\\\\\\\[Pipeline\\\\\\\\].*\\\\\\\\(step\", \"sklearn/tests/test_pipeline.py::test_verbose[est6-\\\\\\\\[Pipeline\\\\\\\\].*\\\\\\\\(step\", \"sklearn/tests/test_pipeline.py::test_verbose[est7-\\\\\\\\[Pipeline\\\\\\\\].*\\\\\\\\(step\", \"sklearn/tests/test_pipeline.py::test_verbose[est8-\\\\\\\\[Pipeline\\\\\\\\].*\\\\\\\\(step\", \"sklearn/tests/test_pipeline.py::test_verbose[est9-\\\\\\\\[Pipeline\\\\\\\\].*\\\\\\\\(step\", \"sklearn/tests/test_pipeline.py::test_verbose[est10-\\\\\\\\[Pipeline\\\\\\\\].*\\\\\\\\(step\", \"sklearn/tests/test_pipeline.py::test_verbose[est11-\\\\\\\\[Pipeline\\\\\\\\].*\\\\\\\\(step\", \"sklearn/tests/test_pipeline.py::test_verbose[est12-\\\\\\\\[FeatureUnion\\\\\\\\].*\\\\\\\\(step\", \"sklearn/tests/test_pipeline.py::test_verbose[est13-\\\\\\\\[FeatureUnion\\\\\\\\].*\\\\\\\\(step\", \"sklearn/tests/test_pipeline.py::test_verbose[est14-\\\\\\\\[FeatureUnion\\\\\\\\].*\\\\\\\\(step\", \"sklearn/tests/test_pipeline.py::test_verbose[est15-\\\\\\\\[FeatureUnion\\\\\\\\].*\\\\\\\\(step\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.012002",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}