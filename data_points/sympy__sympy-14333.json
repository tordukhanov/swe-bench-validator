{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-14333",
  "base_commit": "3f935daa5634c765345bf99df9d85b3d31def1ec",
  "patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -440,9 +440,9 @@ def igcdex(a, b):\n \n def mod_inverse(a, m):\n     \"\"\"\n-    Return the number c such that, ( a * c ) % m == 1 where\n-    c has the same sign as a. If no such value exists, a\n-    ValueError is raised.\n+    Return the number c such that, (a * c) = 1 (mod m)\n+    where c has the same sign as m. If no such value exists,\n+    a ValueError is raised.\n \n     Examples\n     ========\n@@ -453,13 +453,13 @@ def mod_inverse(a, m):\n     Suppose we wish to find multiplicative inverse x of\n     3 modulo 11. This is the same as finding x such\n     that 3 * x = 1 (mod 11). One value of x that satisfies\n-    this congruence is 4. Because 3 * 4 = 12 and 12 = 1 mod(11).\n+    this congruence is 4. Because 3 * 4 = 12 and 12 = 1 (mod 11).\n     This is the value return by mod_inverse:\n \n     >>> mod_inverse(3, 11)\n     4\n     >>> mod_inverse(-3, 11)\n-    -4\n+    7\n \n     When there is a common factor between the numerators of\n     ``a`` and ``m`` the inverse does not exist:\n@@ -480,12 +480,10 @@ def mod_inverse(a, m):\n     c = None\n     try:\n         a, m = as_int(a), as_int(m)\n-        if m > 1:\n+        if m != 1 and m != -1:\n             x, y, g = igcdex(a, m)\n             if g == 1:\n                 c = x % m\n-            if a < 0:\n-                c -= m\n     except ValueError:\n         a, m = sympify(a), sympify(m)\n         if not (a.is_number and m.is_number):\n",
  "test_patch": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -1709,7 +1709,10 @@ def test_mod_inverse():\n     assert mod_inverse(5823991, 3299) == 1442\n     assert mod_inverse(123, 44) == 39\n     assert mod_inverse(2, 5) == 3\n-    assert mod_inverse(-2, 5) == -3\n+    assert mod_inverse(-2, 5) == 2\n+    assert mod_inverse(2, -5) == -2\n+    assert mod_inverse(-2, -5) == -3\n+    assert mod_inverse(-3, -7) == -5\n     x = Symbol('x')\n     assert S(2).invert(x) == S.Half\n     raises(TypeError, lambda: mod_inverse(2, x))\n",
  "problem_statement": "Modular inverse for negative modulo and sign resolve\nSymPy assigns `mod_inverse(a,m)` the same sign as `a`.\r\nMathematically, `mod m` has range `[0,m)` for `m>0` , `(m,0]` for `m<0`.\r\n\r\nThe former sign assignment is used in C/C++/Java built-in modulo operator as `-2%5` returns `-2`.\r\nThe latter sign assignment is used in Python's built-in modulo operator as `-2%5` returns `3`.\r\n\r\n```python\r\n>> mod_inverse(2,5)\r\n3\r\n\r\n>> mod_inverse(-2,5)\r\n-3\r\n```\r\n\r\nSymPy does not find modular inverses for negative modulo (because of the `m>1` check).\r\n```\r\n>> mod_inverse(2,-5)\r\n>> mod_inverse(-2,-5)\r\n```\r\n\r\nMoreover, as checked from WA (uses the same sign as `m` rule)\r\n[mod_inverse(-2,+5) = 2](http://www.wolframalpha.com/input/?i=modular+inverse+of+-2+modulo+5)\r\n[mod_inverse(+2,-5) = -2](http://www.wolframalpha.com/input/?i=modular+inverse+of+2+modulo+-5)\r\n[mod_inverse(-2,-5) = -3](http://www.wolframalpha.com/input/?i=modular+inverse+of+-2+modulo+-5)\n",
  "hints_text": "",
  "created_at": "2018-02-25T13:35:25Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_mod_inverse\"]",
  "PASS_TO_PASS": "[\"test_integers_cache\", \"test_seterr\", \"test_mod\", \"test_divmod\", \"test_igcd\", \"test_igcd_lehmer\", \"test_igcd2\", \"test_ilcm\", \"test_igcdex\", \"test_Integer_new\", \"test_Rational_new\", \"test_Number_new\", \"test_Rational_cmp\", \"test_Float\", \"test_float_mpf\", \"test_Float_RealElement\", \"test_Float_default_to_highprec_from_str\", \"test_Float_eval\", \"test_Float_issue_2107\", \"test_issue_14289\", \"test_Float_from_tuple\", \"test_Infinity\", \"test_Infinity_2\", \"test_Mul_Infinity_Zero\", \"test_Div_By_Zero\", \"test_Infinity_inequations\", \"test_NaN\", \"test_special_numbers\", \"test_powers\", \"test_integer_nthroot_overflow\", \"test_integer_log\", \"test_isqrt\", \"test_powers_Integer\", \"test_powers_Rational\", \"test_powers_Float\", \"test_abs1\", \"test_accept_int\", \"test_dont_accept_str\", \"test_int\", \"test_long\", \"test_real_bug\", \"test_bug_sqrt\", \"test_pi_Pi\", \"test_no_len\", \"test_issue_3321\", \"test_issue_3692\", \"test_issue_3423\", \"test_issue_3449\", \"test_issue_13890\", \"test_Integer_factors\", \"test_Rational_factors\", \"test_issue_4107\", \"test_IntegerInteger\", \"test_Rational_gcd_lcm_cofactors\", \"test_Float_gcd_lcm_cofactors\", \"test_issue_4611\", \"test_conversion_to_mpmath\", \"test_relational\", \"test_Integer_as_index\", \"test_Rational_int\", \"test_zoo\", \"test_issue_4122\", \"test_GoldenRatio_expand\", \"test_as_content_primitive\", \"test_hashing_sympy_integers\", \"test_issue_4172\", \"test_Catalan_EulerGamma_prec\", \"test_Float_eq\", \"test_int_NumberSymbols\", \"test_issue_6640\", \"test_issue_6349\", \"test_mpf_norm\", \"test_latex\", \"test_issue_7742\", \"test_simplify_AlgebraicNumber\", \"test_Float_idempotence\", \"test_comp\", \"test_issue_9491\", \"test_issue_10063\", \"test_issue_10020\", \"test_invert_numbers\", \"test_golden_ratio_rewrite_as_sqrt\", \"test_comparisons_with_unknown_type\", \"test_NumberSymbol_comparison\", \"test_Integer_precision\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.093730",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}