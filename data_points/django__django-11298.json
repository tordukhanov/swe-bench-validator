{
  "repo": "django/django",
  "instance_id": "django__django-11298",
  "base_commit": "a9179ab032cda80801e7f67ef20db5ee60989f21",
  "patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1234,18 +1234,6 @@ def _check_relationship_model(self, from_model=None, **kwargs):\n                 to_model_name = to_model._meta.object_name\n             relationship_model_name = self.remote_field.through._meta.object_name\n             self_referential = from_model == to_model\n-\n-            # Check symmetrical attribute.\n-            if (self_referential and self.remote_field.symmetrical and\n-                    not self.remote_field.through._meta.auto_created):\n-                errors.append(\n-                    checks.Error(\n-                        'Many-to-many fields with intermediate tables must not be symmetrical.',\n-                        obj=self,\n-                        id='fields.E332',\n-                    )\n-                )\n-\n             # Count foreign keys in intermediate model\n             if self_referential:\n                 seen_self = sum(\ndiff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -938,11 +938,14 @@ def add(self, *objs, through_defaults=None):\n                     through_defaults=through_defaults,\n                 )\n                 # If this is a symmetrical m2m relation to self, add the mirror\n-                # entry in the m2m table. `through_defaults` aren't used here\n-                # because of the system check error fields.E332: Many-to-many\n-                # fields with intermediate tables must not be symmetrical.\n+                # entry in the m2m table.\n                 if self.symmetrical:\n-                    self._add_items(self.target_field_name, self.source_field_name, *objs)\n+                    self._add_items(\n+                        self.target_field_name,\n+                        self.source_field_name,\n+                        *objs,\n+                        through_defaults=through_defaults,\n+                    )\n         add.alters_data = True\n \n         def remove(self, *objs):\n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -260,24 +260,6 @@ class Group(models.Model):\n         field = Group._meta.get_field('members')\n         self.assertEqual(field.check(from_model=Group), [])\n \n-    def test_symmetrical_self_referential_field(self):\n-        class Person(models.Model):\n-            # Implicit symmetrical=False.\n-            friends = models.ManyToManyField('self', through=\"Relationship\")\n-\n-        class Relationship(models.Model):\n-            first = models.ForeignKey(Person, models.CASCADE, related_name=\"rel_from_set\")\n-            second = models.ForeignKey(Person, models.CASCADE, related_name=\"rel_to_set\")\n-\n-        field = Person._meta.get_field('friends')\n-        self.assertEqual(field.check(from_model=Person), [\n-            Error(\n-                'Many-to-many fields with intermediate tables must not be symmetrical.',\n-                obj=field,\n-                id='fields.E332',\n-            ),\n-        ])\n-\n     def test_too_many_foreign_keys_in_self_referential_model(self):\n         class Person(models.Model):\n             friends = models.ManyToManyField('self', through=\"InvalidRelationship\", symmetrical=False)\n@@ -301,52 +283,6 @@ class InvalidRelationship(models.Model):\n             ),\n         ])\n \n-    def test_symmetric_self_reference_with_intermediate_table(self):\n-        class Person(models.Model):\n-            # Explicit symmetrical=True.\n-            friends = models.ManyToManyField('self', through=\"Relationship\", symmetrical=True)\n-\n-        class Relationship(models.Model):\n-            first = models.ForeignKey(Person, models.CASCADE, related_name=\"rel_from_set\")\n-            second = models.ForeignKey(Person, models.CASCADE, related_name=\"rel_to_set\")\n-\n-        field = Person._meta.get_field('friends')\n-        self.assertEqual(field.check(from_model=Person), [\n-            Error(\n-                'Many-to-many fields with intermediate tables must not be symmetrical.',\n-                obj=field,\n-                id='fields.E332',\n-            ),\n-        ])\n-\n-    def test_symmetric_self_reference_with_intermediate_table_and_through_fields(self):\n-        \"\"\"\n-        Using through_fields in a m2m with an intermediate model shouldn't\n-        mask its incompatibility with symmetry.\n-        \"\"\"\n-        class Person(models.Model):\n-            # Explicit symmetrical=True.\n-            friends = models.ManyToManyField(\n-                'self',\n-                symmetrical=True,\n-                through=\"Relationship\",\n-                through_fields=('first', 'second'),\n-            )\n-\n-        class Relationship(models.Model):\n-            first = models.ForeignKey(Person, models.CASCADE, related_name=\"rel_from_set\")\n-            second = models.ForeignKey(Person, models.CASCADE, related_name=\"rel_to_set\")\n-            referee = models.ForeignKey(Person, models.CASCADE, related_name=\"referred\")\n-\n-        field = Person._meta.get_field('friends')\n-        self.assertEqual(field.check(from_model=Person), [\n-            Error(\n-                'Many-to-many fields with intermediate tables must not be symmetrical.',\n-                obj=field,\n-                id='fields.E332',\n-            ),\n-        ])\n-\n     def test_foreign_key_to_abstract_model(self):\n         class AbstractModel(models.Model):\n             class Meta:\ndiff --git a/tests/m2m_recursive/models.py b/tests/m2m_recursive/models.py\n--- a/tests/m2m_recursive/models.py\n+++ b/tests/m2m_recursive/models.py\n@@ -22,7 +22,14 @@\n class Person(models.Model):\n     name = models.CharField(max_length=20)\n     friends = models.ManyToManyField('self')\n+    colleagues = models.ManyToManyField('self', symmetrical=True, through='Colleague')\n     idols = models.ManyToManyField('self', symmetrical=False, related_name='stalkers')\n \n     def __str__(self):\n         return self.name\n+\n+\n+class Colleague(models.Model):\n+    first = models.ForeignKey(Person, models.CASCADE)\n+    second = models.ForeignKey(Person, models.CASCADE, related_name='+')\n+    first_meet = models.DateField()\ndiff --git a/tests/m2m_recursive/tests.py b/tests/m2m_recursive/tests.py\n--- a/tests/m2m_recursive/tests.py\n+++ b/tests/m2m_recursive/tests.py\n@@ -1,3 +1,5 @@\n+import datetime\n+\n from django.test import TestCase\n \n from .models import Person\n@@ -59,3 +61,59 @@ def test_recursive_m2m_related_to_self(self):\n         self.a.idols.add(self.a)\n         self.assertSequenceEqual(self.a.idols.all(), [self.a])\n         self.assertSequenceEqual(self.a.stalkers.all(), [self.a])\n+\n+\n+class RecursiveSymmetricalM2MThroughTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.a, cls.b, cls.c, cls.d = [\n+            Person.objects.create(name=name)\n+            for name in ['Anne', 'Bill', 'Chuck', 'David']\n+        ]\n+        cls.a.colleagues.add(cls.b, cls.c, through_defaults={\n+            'first_meet': datetime.date(2013, 1, 5),\n+        })\n+        # Add m2m for Anne and Chuck in reverse direction.\n+        cls.d.colleagues.add(cls.a, cls.c, through_defaults={\n+            'first_meet': datetime.date(2015, 6, 15),\n+        })\n+\n+    def test_recursive_m2m_all(self):\n+        for person, colleagues in (\n+            (self.a, [self.b, self.c, self.d]),\n+            (self.b, [self.a]),\n+            (self.c, [self.a, self.d]),\n+            (self.d, [self.a, self.c]),\n+        ):\n+            with self.subTest(person=person):\n+                self.assertSequenceEqual(person.colleagues.all(), colleagues)\n+\n+    def test_recursive_m2m_reverse_add(self):\n+        # Add m2m for Anne in reverse direction.\n+        self.b.colleagues.add(self.a, through_defaults={\n+            'first_meet': datetime.date(2013, 1, 5),\n+        })\n+        self.assertSequenceEqual(self.a.colleagues.all(), [self.b, self.c, self.d])\n+        self.assertSequenceEqual(self.b.colleagues.all(), [self.a])\n+\n+    def test_recursive_m2m_remove(self):\n+        self.b.colleagues.remove(self.a)\n+        self.assertSequenceEqual(self.a.colleagues.all(), [self.c, self.d])\n+        self.assertSequenceEqual(self.b.colleagues.all(), [])\n+\n+    def test_recursive_m2m_clear(self):\n+        # Clear m2m for Anne.\n+        self.a.colleagues.clear()\n+        self.assertSequenceEqual(self.a.friends.all(), [])\n+        # Reverse m2m relationships is removed.\n+        self.assertSequenceEqual(self.c.colleagues.all(), [self.d])\n+        self.assertSequenceEqual(self.d.colleagues.all(), [self.c])\n+\n+    def test_recursive_m2m_set(self):\n+        # Set new relationships for Chuck.\n+        self.c.colleagues.set([self.b, self.d], through_defaults={\n+            'first_meet': datetime.date(2013, 1, 5),\n+        })\n+        self.assertSequenceEqual(self.c.colleagues.order_by('name'), [self.b, self.d])\n+        # Reverse m2m relationships is removed.\n+        self.assertSequenceEqual(self.a.colleagues.order_by('name'), [self.b, self.d])\ndiff --git a/tests/m2m_through/models.py b/tests/m2m_through/models.py\n--- a/tests/m2m_through/models.py\n+++ b/tests/m2m_through/models.py\n@@ -72,6 +72,7 @@ class TestNoDefaultsOrNulls(models.Model):\n class PersonSelfRefM2M(models.Model):\n     name = models.CharField(max_length=5)\n     friends = models.ManyToManyField('self', through=\"Friendship\", symmetrical=False)\n+    sym_friends = models.ManyToManyField('self', through='SymmetricalFriendship', symmetrical=True)\n \n     def __str__(self):\n         return self.name\n@@ -83,6 +84,12 @@ class Friendship(models.Model):\n     date_friended = models.DateTimeField()\n \n \n+class SymmetricalFriendship(models.Model):\n+    first = models.ForeignKey(PersonSelfRefM2M, models.CASCADE)\n+    second = models.ForeignKey(PersonSelfRefM2M, models.CASCADE, related_name='+')\n+    date_friended = models.DateField()\n+\n+\n # Custom through link fields\n class Event(models.Model):\n     title = models.CharField(max_length=50)\ndiff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,4 +1,4 @@\n-from datetime import datetime\n+from datetime import date, datetime\n from operator import attrgetter\n \n from django.db import IntegrityError\n@@ -7,7 +7,7 @@\n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n-    Relationship,\n+    Relationship, SymmetricalFriendship,\n )\n \n \n@@ -401,7 +401,7 @@ def test_self_referential_non_symmetrical_clear_first_side(self):\n             attrgetter(\"name\")\n         )\n \n-    def test_self_referential_symmetrical(self):\n+    def test_self_referential_non_symmetrical_both(self):\n         tony = PersonSelfRefM2M.objects.create(name=\"Tony\")\n         chris = PersonSelfRefM2M.objects.create(name=\"Chris\")\n         Friendship.objects.create(\n@@ -439,6 +439,71 @@ def test_through_fields_self_referential(self):\n             attrgetter('name')\n         )\n \n+    def test_self_referential_symmetrical(self):\n+        tony = PersonSelfRefM2M.objects.create(name='Tony')\n+        chris = PersonSelfRefM2M.objects.create(name='Chris')\n+        SymmetricalFriendship.objects.create(\n+            first=tony, second=chris, date_friended=date.today(),\n+        )\n+        self.assertSequenceEqual(tony.sym_friends.all(), [chris])\n+        # Manually created symmetrical m2m relation doesn't add mirror entry\n+        # automatically.\n+        self.assertSequenceEqual(chris.sym_friends.all(), [])\n+        SymmetricalFriendship.objects.create(\n+            first=chris, second=tony, date_friended=date.today()\n+        )\n+        self.assertSequenceEqual(chris.sym_friends.all(), [tony])\n+\n+    def test_add_on_symmetrical_m2m_with_intermediate_model(self):\n+        tony = PersonSelfRefM2M.objects.create(name='Tony')\n+        chris = PersonSelfRefM2M.objects.create(name='Chris')\n+        date_friended = date(2017, 1, 3)\n+        tony.sym_friends.add(chris, through_defaults={'date_friended': date_friended})\n+        self.assertSequenceEqual(tony.sym_friends.all(), [chris])\n+        self.assertSequenceEqual(chris.sym_friends.all(), [tony])\n+        friendship = tony.symmetricalfriendship_set.get()\n+        self.assertEqual(friendship.date_friended, date_friended)\n+\n+    def test_set_on_symmetrical_m2m_with_intermediate_model(self):\n+        tony = PersonSelfRefM2M.objects.create(name='Tony')\n+        chris = PersonSelfRefM2M.objects.create(name='Chris')\n+        anne = PersonSelfRefM2M.objects.create(name='Anne')\n+        kate = PersonSelfRefM2M.objects.create(name='Kate')\n+        date_friended_add = date(2013, 1, 5)\n+        date_friended_set = date.today()\n+        tony.sym_friends.add(\n+            anne, chris,\n+            through_defaults={'date_friended': date_friended_add},\n+        )\n+        tony.sym_friends.set(\n+            [anne, kate],\n+            through_defaults={'date_friended': date_friended_set},\n+        )\n+        self.assertSequenceEqual(tony.sym_friends.all(), [anne, kate])\n+        self.assertSequenceEqual(anne.sym_friends.all(), [tony])\n+        self.assertSequenceEqual(kate.sym_friends.all(), [tony])\n+        self.assertEqual(\n+            kate.symmetricalfriendship_set.get().date_friended,\n+            date_friended_set,\n+        )\n+        # Date is preserved.\n+        self.assertEqual(\n+            anne.symmetricalfriendship_set.get().date_friended,\n+            date_friended_add,\n+        )\n+        # Recreate relationship.\n+        tony.sym_friends.set(\n+            [anne],\n+            clear=True,\n+            through_defaults={'date_friended': date_friended_set},\n+        )\n+        self.assertSequenceEqual(tony.sym_friends.all(), [anne])\n+        self.assertSequenceEqual(anne.sym_friends.all(), [tony])\n+        self.assertEqual(\n+            anne.symmetricalfriendship_set.get().date_friended,\n+            date_friended_set,\n+        )\n+\n \n class M2mThroughToFieldsTests(TestCase):\n     @classmethod\n",
  "problem_statement": "Allow ManyToManyField using a intermediary table to be defined as symmetrical.\nDescription\n\t\nThanks to the work made by Collin Anderson in #9475 I think we can remove the check \n\"fields.E332 Many-to-many fields with intermediate tables must not be symmetrical.\" with a little adjustment.\nThis change was discussed in the django-dev mailing list ​https://groups.google.com/forum/#!topic/django-developers/BuT0-Uq8pyc.\nThis would let have \nclass Person(models.Model):\n\tname = models.CharField(max_length=20)\n\tfriends = models.ManyToManyField('self', through='Friendship')\nclass Friendship(models.Model):\n\tfirst = models.ForeignKey(Person, models.CASCADE, related_name=\"+\")\n\tsecond = models.ForeignKey(Person, models.CASCADE)\n\tfriendship_date = models.DateTimeField()\nand just do something like\njoe.friends.add(anna, through_defaults={'friendship_date': date.datetime(...)})\nwhere currently we would have to do\njoe.friends.add(anna, through_defaults={'friendship_date': date.datetime(...)})\nanna.friends.add(joe, through_defaults={'friendship_date': date.datetime(...)})\n",
  "hints_text": "",
  "created_at": "2019-04-28T09:13:45Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_accessor_clash (invalid_models_tests.test_relative_fields.SelfReferentialFKClashTests)\", \"test_clash_under_explicit_related_name (invalid_models_tests.test_relative_fields.SelfReferentialFKClashTests)\", \"test_reverse_query_name_clash (invalid_models_tests.test_relative_fields.SelfReferentialFKClashTests)\", \"test_complex_clash (invalid_models_tests.test_relative_fields.ComplexClashTests)\", \"test_choices (m2m_through.tests.M2mThroughToFieldsTests)\", \"test_retrieval (m2m_through.tests.M2mThroughToFieldsTests)\", \"test_accessor_clash (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_clash_between_accessors (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_clash_under_explicit_related_name (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_reverse_query_name_clash (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_valid_model (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_explicit_field_names (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_intersection_foreign_object (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_invalid_field (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_invalid_order (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_m2m_field_argument_validation (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_superset_foreign_object (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_fk_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_fk_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_fk_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_m2m_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_m2m_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_m2m_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_recursive_m2m_add_in_both_directions (m2m_recursive.tests.RecursiveM2MTests)\", \"test_recursive_m2m_add_via_related_name (m2m_recursive.tests.RecursiveM2MTests)\", \"test_recursive_m2m_all (m2m_recursive.tests.RecursiveM2MTests)\", \"test_recursive_m2m_clear (m2m_recursive.tests.RecursiveM2MTests)\", \"test_recursive_m2m_related_to_self (m2m_recursive.tests.RecursiveM2MTests)\", \"test_recursive_m2m_remove (m2m_recursive.tests.RecursiveM2MTests)\", \"test_recursive_m2m_reverse_add (m2m_recursive.tests.RecursiveM2MTests)\", \"test_recursive_m2m_all (m2m_recursive.tests.RecursiveSymmetricalM2MThroughTests)\", \"test_recursive_m2m_clear (m2m_recursive.tests.RecursiveSymmetricalM2MThroughTests)\", \"test_recursive_m2m_remove (m2m_recursive.tests.RecursiveSymmetricalM2MThroughTests)\", \"test_recursive_m2m_reverse_add (m2m_recursive.tests.RecursiveSymmetricalM2MThroughTests)\", \"test_recursive_m2m_set (m2m_recursive.tests.RecursiveSymmetricalM2MThroughTests)\", \"test_clash_between_accessors (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"Ref #22047.\", \"test_no_clash_for_hidden_related_name (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_add_on_symmetrical_m2m_with_intermediate_model (m2m_through.tests.M2mThroughReferentialTests)\", \"test_self_referential_empty_qs (m2m_through.tests.M2mThroughReferentialTests)\", \"test_self_referential_non_symmetrical_both (m2m_through.tests.M2mThroughReferentialTests)\", \"test_self_referential_non_symmetrical_clear_first_side (m2m_through.tests.M2mThroughReferentialTests)\", \"test_self_referential_non_symmetrical_first_side (m2m_through.tests.M2mThroughReferentialTests)\", \"test_self_referential_non_symmetrical_second_side (m2m_through.tests.M2mThroughReferentialTests)\", \"test_self_referential_symmetrical (m2m_through.tests.M2mThroughReferentialTests)\", \"test_set_on_symmetrical_m2m_with_intermediate_model (m2m_through.tests.M2mThroughReferentialTests)\", \"test_through_fields_self_referential (m2m_through.tests.M2mThroughReferentialTests)\", \"test_ambiguous_relationship_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_abstract_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_isolate_apps_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_missing_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_non_unique_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_non_unique_field_under_explicit_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_object_to_non_unique_fields (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_invalid_related_query_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_m2m_to_abstract_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_through_isolate_apps_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_to_isolate_apps_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_to_missing_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_with_limit_choices_auto_created_no_warning (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_with_useless_options (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_missing_relationship_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_missing_relationship_model_on_model_check (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_not_swapped_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_nullable_primary_key (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_on_delete_set_default_without_default_value (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_on_delete_set_null_on_non_nullable_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_referencing_to_swapped_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_related_field_has_invalid_related_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_related_field_has_valid_related_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_relationship_model_missing_foreign_key (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_relationship_model_with_foreign_key_to_wrong_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_to_fields_exist (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_to_fields_not_checked_if_related_model_doesnt_exist (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_too_many_foreign_keys_in_self_referential_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_unique_m2m (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_valid_foreign_key_without_accessor (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_add_on_m2m_with_intermediate_model (m2m_through.tests.M2mThroughTests)\", \"test_add_on_m2m_with_intermediate_model_value_required (m2m_through.tests.M2mThroughTests)\", \"test_add_on_m2m_with_intermediate_model_value_required_fails (m2m_through.tests.M2mThroughTests)\", \"test_add_on_reverse_m2m_with_intermediate_model (m2m_through.tests.M2mThroughTests)\", \"test_clear_on_reverse_removes_all_the_m2m_relationships (m2m_through.tests.M2mThroughTests)\", \"test_clear_removes_all_the_m2m_relationships (m2m_through.tests.M2mThroughTests)\", \"test_create_on_m2m_with_intermediate_model (m2m_through.tests.M2mThroughTests)\", \"test_create_on_m2m_with_intermediate_model_value_required (m2m_through.tests.M2mThroughTests)\", \"test_create_on_m2m_with_intermediate_model_value_required_fails (m2m_through.tests.M2mThroughTests)\", \"test_create_on_reverse_m2m_with_intermediate_model (m2m_through.tests.M2mThroughTests)\", \"test_custom_related_name_doesnt_conflict_with_fky_related_name (m2m_through.tests.M2mThroughTests)\", \"test_custom_related_name_forward_empty_qs (m2m_through.tests.M2mThroughTests)\", \"test_custom_related_name_forward_non_empty_qs (m2m_through.tests.M2mThroughTests)\", \"test_custom_related_name_reverse_empty_qs (m2m_through.tests.M2mThroughTests)\", \"test_custom_related_name_reverse_non_empty_qs (m2m_through.tests.M2mThroughTests)\", \"test_filter_on_intermediate_model (m2m_through.tests.M2mThroughTests)\", \"test_get_on_intermediate_model (m2m_through.tests.M2mThroughTests)\", \"test_get_or_create_on_m2m_with_intermediate_model_value_required (m2m_through.tests.M2mThroughTests)\", \"test_get_or_create_on_m2m_with_intermediate_model_value_required_fails (m2m_through.tests.M2mThroughTests)\", \"test_order_by_relational_field_through_model (m2m_through.tests.M2mThroughTests)\", \"test_query_first_model_by_intermediate_model_attribute (m2m_through.tests.M2mThroughTests)\", \"test_query_model_by_attribute_name_of_related_model (m2m_through.tests.M2mThroughTests)\", \"test_query_model_by_custom_related_name (m2m_through.tests.M2mThroughTests)\", \"test_query_model_by_intermediate_can_return_non_unique_queryset (m2m_through.tests.M2mThroughTests)\", \"test_query_model_by_related_model_name (m2m_through.tests.M2mThroughTests)\", \"test_query_second_model_by_intermediate_model_attribute (m2m_through.tests.M2mThroughTests)\", \"test_remove_on_m2m_with_intermediate_model (m2m_through.tests.M2mThroughTests)\", \"test_remove_on_m2m_with_intermediate_model_multiple (m2m_through.tests.M2mThroughTests)\", \"test_remove_on_reverse_m2m_with_intermediate_model (m2m_through.tests.M2mThroughTests)\", \"test_retrieve_intermediate_items (m2m_through.tests.M2mThroughTests)\", \"test_retrieve_reverse_intermediate_items (m2m_through.tests.M2mThroughTests)\", \"test_set_on_m2m_with_intermediate_model (m2m_through.tests.M2mThroughTests)\", \"test_set_on_m2m_with_intermediate_model_value_required (m2m_through.tests.M2mThroughTests)\", \"test_set_on_m2m_with_intermediate_model_value_required_fails (m2m_through.tests.M2mThroughTests)\", \"test_set_on_reverse_m2m_with_intermediate_model (m2m_through.tests.M2mThroughTests)\", \"test_through_fields (m2m_through.tests.M2mThroughTests)\", \"test_update_or_create_on_m2m_with_intermediate_model_value_required (m2m_through.tests.M2mThroughTests)\", \"test_update_or_create_on_m2m_with_intermediate_model_value_required_fails (m2m_through.tests.M2mThroughTests)\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.568348",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}