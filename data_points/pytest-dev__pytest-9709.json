{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-9709",
  "base_commit": "0c80a1c836616b0206a4af2fe72001ff797a5f8f",
  "patch": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -1,5 +1,6 @@\n import math\n import pprint\n+from collections.abc import Collection\n from collections.abc import Sized\n from decimal import Decimal\n from numbers import Complex\n@@ -8,7 +9,6 @@\n from typing import Callable\n from typing import cast\n from typing import Generic\n-from typing import Iterable\n from typing import List\n from typing import Mapping\n from typing import Optional\n@@ -306,12 +306,12 @@ def _check_type(self) -> None:\n                 raise TypeError(msg.format(key, value, pprint.pformat(self.expected)))\n \n \n-class ApproxSequencelike(ApproxBase):\n+class ApproxSequenceLike(ApproxBase):\n     \"\"\"Perform approximate comparisons where the expected value is a sequence of numbers.\"\"\"\n \n     def __repr__(self) -> str:\n         seq_type = type(self.expected)\n-        if seq_type not in (tuple, list, set):\n+        if seq_type not in (tuple, list):\n             seq_type = list\n         return \"approx({!r})\".format(\n             seq_type(self._approx_scalar(x) for x in self.expected)\n@@ -515,7 +515,7 @@ class ApproxDecimal(ApproxScalar):\n \n \n def approx(expected, rel=None, abs=None, nan_ok: bool = False) -> ApproxBase:\n-    \"\"\"Assert that two numbers (or two sets of numbers) are equal to each other\n+    \"\"\"Assert that two numbers (or two ordered sequences of numbers) are equal to each other\n     within some tolerance.\n \n     Due to the :std:doc:`tutorial/floatingpoint`, numbers that we\n@@ -547,16 +547,11 @@ def approx(expected, rel=None, abs=None, nan_ok: bool = False) -> ApproxBase:\n         >>> 0.1 + 0.2 == approx(0.3)\n         True\n \n-    The same syntax also works for sequences of numbers::\n+    The same syntax also works for ordered sequences of numbers::\n \n         >>> (0.1 + 0.2, 0.2 + 0.4) == approx((0.3, 0.6))\n         True\n \n-    Dictionary *values*::\n-\n-        >>> {'a': 0.1 + 0.2, 'b': 0.2 + 0.4} == approx({'a': 0.3, 'b': 0.6})\n-        True\n-\n     ``numpy`` arrays::\n \n         >>> import numpy as np                                                          # doctest: +SKIP\n@@ -569,6 +564,20 @@ def approx(expected, rel=None, abs=None, nan_ok: bool = False) -> ApproxBase:\n         >>> np.array([0.1, 0.2]) + np.array([0.2, 0.1]) == approx(0.3) # doctest: +SKIP\n         True\n \n+    Only ordered sequences are supported, because ``approx`` needs\n+    to infer the relative position of the sequences without ambiguity. This means\n+    ``sets`` and other unordered sequences are not supported.\n+\n+    Finally, dictionary *values* can also be compared::\n+\n+        >>> {'a': 0.1 + 0.2, 'b': 0.2 + 0.4} == approx({'a': 0.3, 'b': 0.6})\n+        True\n+\n+    The comparision will be true if both mappings have the same keys and their\n+    respective values match the expected tolerances.\n+\n+    **Tolerances**\n+\n     By default, ``approx`` considers numbers within a relative tolerance of\n     ``1e-6`` (i.e. one part in a million) of its expected value to be equal.\n     This treatment would lead to surprising results if the expected value was\n@@ -708,12 +717,19 @@ def approx(expected, rel=None, abs=None, nan_ok: bool = False) -> ApproxBase:\n         expected = _as_numpy_array(expected)\n         cls = ApproxNumpy\n     elif (\n-        isinstance(expected, Iterable)\n+        hasattr(expected, \"__getitem__\")\n         and isinstance(expected, Sized)\n         # Type ignored because the error is wrong -- not unreachable.\n         and not isinstance(expected, STRING_TYPES)  # type: ignore[unreachable]\n     ):\n-        cls = ApproxSequencelike\n+        cls = ApproxSequenceLike\n+    elif (\n+        isinstance(expected, Collection)\n+        # Type ignored because the error is wrong -- not unreachable.\n+        and not isinstance(expected, STRING_TYPES)  # type: ignore[unreachable]\n+    ):\n+        msg = f\"pytest.approx() only supports ordered sequences, but got: {repr(expected)}\"\n+        raise TypeError(msg)\n     else:\n         cls = ApproxScalar\n \n",
  "test_patch": "diff --git a/testing/python/approx.py b/testing/python/approx.py\n--- a/testing/python/approx.py\n+++ b/testing/python/approx.py\n@@ -858,13 +858,21 @@ def test_numpy_scalar_with_array(self):\n         assert approx(expected, rel=5e-7, abs=0) == actual\n         assert approx(expected, rel=5e-8, abs=0) != actual\n \n-    def test_generic_sized_iterable_object(self):\n-        class MySizedIterable:\n-            def __iter__(self):\n-                return iter([1, 2, 3, 4])\n+    def test_generic_ordered_sequence(self):\n+        class MySequence:\n+            def __getitem__(self, i):\n+                return [1, 2, 3, 4][i]\n \n             def __len__(self):\n                 return 4\n \n-        expected = MySizedIterable()\n-        assert [1, 2, 3, 4] == approx(expected)\n+        expected = MySequence()\n+        assert [1, 2, 3, 4] == approx(expected, abs=1e-4)\n+\n+        expected_repr = \"approx([1 ± 1.0e-06, 2 ± 2.0e-06, 3 ± 3.0e-06, 4 ± 4.0e-06])\"\n+        assert repr(approx(expected)) == expected_repr\n+\n+    def test_allow_ordered_sequences_only(self) -> None:\n+        \"\"\"pytest.approx() should raise an error on unordered sequences (#9692).\"\"\"\n+        with pytest.raises(TypeError, match=\"only supports ordered sequences\"):\n+            assert {1, 2, 3} == approx({1, 2, 3})\n",
  "problem_statement": "Current implementation of `pytest.approx()` cannot be used to compare sets\nThe current implementation of `pytest.approx()` yields incorrect results when used to compare sets.\r\n\r\nConsider the following self-explanatory code comparing two (equal as by `__eq__()`) sets:\r\n\r\n```\r\nimport numpy as np\r\nimport pytest\r\n\r\n\r\na = 2**np.arange(12)\r\nb = 2**np.arange(12)\r\nnp.random.shuffle(a)\r\n\r\nprint(a)\r\nprint(b)\r\n\r\nprint(*set(a))\r\nprint(*set(b))\r\n\r\nprint(set(a) == set(b))\r\nprint(set(a) == pytest.approx(set(b)))\r\n\r\n```\r\n\r\nAlthough the two sets are obviously the same, the last equality check using approx is failing.\r\n\r\nA quick view into the implementation of `approx()` makes it obvious why this is the case:\r\n\r\n```\r\nclass ApproxSequencelike(ApproxBase):\r\n    \"\"\"Perform approximate comparisons where the expected value is a sequence of numbers.\"\"\"\r\n\r\n    def __repr__(self) -> str:\r\n        seq_type = type(self.expected)\r\n        if seq_type not in (tuple, list, set):\r\n            seq_type = list\r\n        return \"approx({!r})\".format(\r\n            seq_type(self._approx_scalar(x) for x in self.expected)\r\n        )\r\n\r\n    def _yield_comparisons(self, actual):\r\n        return zip(actual, self.expected)\r\n```\r\n\r\nIn `_yield_comparisons()`, only `__iter__()` is used (in `zip()`), but since sets are unordered, so is the resulting iterator. This means, for sets such an implementation cannot work.\r\nWhat makes things worse is the confusion that seems to exist here between the different abstract base classes:\r\nIn the `__repr__()` method, clearly `set` is mentioned, explicitly. However, a set is not a sequence type, but only a collection type (because of the missing order). It is, however, iterable and since this is the only thing that is actually checked in the implementation, the code seems to work for sets, where, in fact, it does not. As a first step, I would suggest one could keep the current implementation, but explicitly check for sequence types (i.e. classes having a `__getitem__()` method) and delete all mentions of `set` in the code as well as on the documentation page and make it crystal clear that there is only an implementation for sequence types.\r\nBut what would be way better would, of course, be an implementation for arbitrary container comparisons.\r\n\r\nTested with pytest version 7.0.1.\n",
  "hints_text": "-1 on that - unlike ordered sequences, sets would have to \"magically\" match the right approximations with the right values\r\n\r\nhowever we should warn or error on unordered sequences\nThanks for reacting. Yes, that is why I suggested that sets should be forbidden in approx. (They are not. Instead, they are explicitly mentioned in the code.)  It is not enough to check for `__iter__()`. One has to check for the presence of `__getitem__()`.\r\n\r\n(I don't understand your -1, though. Sorry for trying to help ...)\nPS: You are confusing ABCs, again. Sequences are **always** ordered, because they have a `__getitem__()` method. That is my whole point.",
  "created_at": "2022-02-23T11:25:45Z",
  "version": "7.1",
  "FAIL_TO_PASS": "[\"testing/python/approx.py::TestApprox::test_generic_ordered_sequence\", \"testing/python/approx.py::TestApprox::test_allow_ordered_sequences_only\"]",
  "PASS_TO_PASS": "[\"testing/python/approx.py::TestApprox::test_repr_string\", \"testing/python/approx.py::TestApprox::test_repr_complex_numbers\", \"testing/python/approx.py::TestApprox::test_bool\", \"testing/python/approx.py::TestApprox::test_operator_overloading\", \"testing/python/approx.py::TestApprox::test_exactly_equal\", \"testing/python/approx.py::TestApprox::test_opposite_sign\", \"testing/python/approx.py::TestApprox::test_zero_tolerance\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100-None]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[None--1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[1e+100--1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100-1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100--1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance_message\", \"testing/python/approx.py::TestApprox::test_inf_tolerance\", \"testing/python/approx.py::TestApprox::test_inf_tolerance_expecting_zero\", \"testing/python/approx.py::TestApprox::test_nan_tolerance\", \"testing/python/approx.py::TestApprox::test_reasonable_defaults\", \"testing/python/approx.py::TestApprox::test_default_tolerances\", \"testing/python/approx.py::TestApprox::test_custom_tolerances\", \"testing/python/approx.py::TestApprox::test_relative_tolerance\", \"testing/python/approx.py::TestApprox::test_absolute_tolerance\", \"testing/python/approx.py::TestApprox::test_expecting_zero\", \"testing/python/approx.py::TestApprox::test_expecting_inf\", \"testing/python/approx.py::TestApprox::test_expecting_nan\", \"testing/python/approx.py::TestApprox::test_int\", \"testing/python/approx.py::TestApprox::test_decimal\", \"testing/python/approx.py::TestApprox::test_fraction\", \"testing/python/approx.py::TestApprox::test_complex\", \"testing/python/approx.py::TestApprox::test_list\", \"testing/python/approx.py::TestApprox::test_list_decimal\", \"testing/python/approx.py::TestApprox::test_list_wrong_len\", \"testing/python/approx.py::TestApprox::test_tuple\", \"testing/python/approx.py::TestApprox::test_tuple_wrong_len\", \"testing/python/approx.py::TestApprox::test_tuple_vs_other\", \"testing/python/approx.py::TestApprox::test_dict\", \"testing/python/approx.py::TestApprox::test_dict_decimal\", \"testing/python/approx.py::TestApprox::test_dict_wrong_len\", \"testing/python/approx.py::TestApprox::test_dict_nonnumeric\", \"testing/python/approx.py::TestApprox::test_dict_vs_other\", \"testing/python/approx.py::TestApprox::test_doctests\", \"testing/python/approx.py::TestApprox::test_expected_value_type_error[nested-list]\", \"testing/python/approx.py::TestApprox::test_expected_value_type_error[nested-dict]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[None]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[nested-str]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[dict-with-string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[nested-str]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[dict-with-string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_dict_repr\", \"testing/python/approx.py::TestApprox::test_nonnumeric_list_repr\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[<=]\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[<]\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[>=]\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[>]\", \"testing/python/approx.py::TestApprox::test_unicode_plus_minus\"]",
  "environment_setup_commit": "4a8f8ada431974f2837260af3ed36299fd382814",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.947694",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}