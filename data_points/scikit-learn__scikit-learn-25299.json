{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-25299",
  "base_commit": "d9cfe3f6b1c58dd253dc87cb676ce5171ff1f8a1",
  "patch": "diff --git a/sklearn/metrics/_classification.py b/sklearn/metrics/_classification.py\n--- a/sklearn/metrics/_classification.py\n+++ b/sklearn/metrics/_classification.py\n@@ -2622,6 +2622,9 @@ def log_loss(\n            The default value changed from `1e-15` to `\"auto\"` that is\n            equivalent to `np.finfo(y_pred.dtype).eps`.\n \n+        .. deprecated:: 1.3\n+           `eps` is deprecated in 1.3 and will be removed in 1.5.\n+\n     normalize : bool, default=True\n         If true, return the mean loss per sample.\n         Otherwise, return the sum of the per-sample losses.\n@@ -2660,7 +2663,16 @@ def log_loss(\n     y_pred = check_array(\n         y_pred, ensure_2d=False, dtype=[np.float64, np.float32, np.float16]\n     )\n-    eps = np.finfo(y_pred.dtype).eps if eps == \"auto\" else eps\n+    if eps == \"auto\":\n+        eps = np.finfo(y_pred.dtype).eps\n+    else:\n+        # TODO: Remove user defined eps in 1.5\n+        warnings.warn(\n+            \"Setting the eps parameter is deprecated and will \"\n+            \"be removed in 1.5. Instead eps will always have\"\n+            \"a default value of `np.finfo(y_pred.dtype).eps`.\",\n+            FutureWarning,\n+        )\n \n     check_consistent_length(y_pred, y_true, sample_weight)\n     lb = LabelBinarizer()\n@@ -2723,6 +2735,12 @@ def log_loss(\n \n     # Renormalize\n     y_pred_sum = y_pred.sum(axis=1)\n+    if not np.isclose(y_pred_sum, 1, rtol=1e-15, atol=5 * eps).all():\n+        warnings.warn(\n+            \"The y_pred values do not sum to one. Starting from 1.5 this\"\n+            \"will result in an error.\",\n+            UserWarning,\n+        )\n     y_pred = y_pred / y_pred_sum[:, np.newaxis]\n     loss = -xlogy(transformed_labels, y_pred).sum(axis=1)\n \n",
  "test_patch": "diff --git a/sklearn/metrics/tests/test_classification.py b/sklearn/metrics/tests/test_classification.py\n--- a/sklearn/metrics/tests/test_classification.py\n+++ b/sklearn/metrics/tests/test_classification.py\n@@ -2477,19 +2477,29 @@ def test_log_loss():\n     loss = log_loss(y_true, y_pred, normalize=False)\n     assert_almost_equal(loss, 0.6904911 * 6, decimal=6)\n \n+    user_warning_msg = \"y_pred values do not sum to one\"\n     # check eps and handling of absolute zero and one probabilities\n     y_pred = np.asarray(y_pred) > 0.5\n-    loss = log_loss(y_true, y_pred, normalize=True, eps=0.1)\n-    assert_almost_equal(loss, log_loss(y_true, np.clip(y_pred, 0.1, 0.9)))\n+    with pytest.warns(FutureWarning):\n+        loss = log_loss(y_true, y_pred, normalize=True, eps=0.1)\n+    with pytest.warns(UserWarning, match=user_warning_msg):\n+        assert_almost_equal(loss, log_loss(y_true, np.clip(y_pred, 0.1, 0.9)))\n \n     # binary case: check correct boundary values for eps = 0\n-    assert log_loss([0, 1], [0, 1], eps=0) == 0\n-    assert log_loss([0, 1], [0, 0], eps=0) == np.inf\n-    assert log_loss([0, 1], [1, 1], eps=0) == np.inf\n+    with pytest.warns(FutureWarning):\n+        assert log_loss([0, 1], [0, 1], eps=0) == 0\n+    with pytest.warns(FutureWarning):\n+        assert log_loss([0, 1], [0, 0], eps=0) == np.inf\n+    with pytest.warns(FutureWarning):\n+        assert log_loss([0, 1], [1, 1], eps=0) == np.inf\n \n     # multiclass case: check correct boundary values for eps = 0\n-    assert log_loss([0, 1, 2], [[1, 0, 0], [0, 1, 0], [0, 0, 1]], eps=0) == 0\n-    assert log_loss([0, 1, 2], [[0, 0.5, 0.5], [0, 1, 0], [0, 0, 1]], eps=0) == np.inf\n+    with pytest.warns(FutureWarning):\n+        assert log_loss([0, 1, 2], [[1, 0, 0], [0, 1, 0], [0, 0, 1]], eps=0) == 0\n+    with pytest.warns(FutureWarning):\n+        assert (\n+            log_loss([0, 1, 2], [[0, 0.5, 0.5], [0, 1, 0], [0, 0, 1]], eps=0) == np.inf\n+        )\n \n     # raise error if number of classes are not equal.\n     y_true = [1, 0, 2]\n@@ -2500,7 +2510,8 @@ def test_log_loss():\n     # case when y_true is a string array object\n     y_true = [\"ham\", \"spam\", \"spam\", \"ham\"]\n     y_pred = [[0.2, 0.7], [0.6, 0.5], [0.4, 0.1], [0.7, 0.2]]\n-    loss = log_loss(y_true, y_pred)\n+    with pytest.warns(UserWarning, match=user_warning_msg):\n+        loss = log_loss(y_true, y_pred)\n     assert_almost_equal(loss, 1.0383217, decimal=6)\n \n     # test labels option\n@@ -2528,7 +2539,8 @@ def test_log_loss():\n     # ensure labels work when len(np.unique(y_true)) != y_pred.shape[1]\n     y_true = [1, 2, 2]\n     y_score2 = [[0.2, 0.7, 0.3], [0.6, 0.5, 0.3], [0.3, 0.9, 0.1]]\n-    loss = log_loss(y_true, y_score2, labels=[1, 2, 3])\n+    with pytest.warns(UserWarning, match=user_warning_msg):\n+        loss = log_loss(y_true, y_score2, labels=[1, 2, 3])\n     assert_almost_equal(loss, 1.0630345, decimal=6)\n \n \n@@ -2568,7 +2580,8 @@ def test_log_loss_pandas_input():\n     for TrueInputType, PredInputType in types:\n         # y_pred dataframe, y_true series\n         y_true, y_pred = TrueInputType(y_tr), PredInputType(y_pr)\n-        loss = log_loss(y_true, y_pred)\n+        with pytest.warns(UserWarning, match=\"y_pred values do not sum to one\"):\n+            loss = log_loss(y_true, y_pred)\n         assert_almost_equal(loss, 1.0383217, decimal=6)\n \n \n",
  "problem_statement": "BUG log_loss renormalizes the predictions\n### Describe the bug\n\n`log_loss(y_true, y_pred)` renormalizes `y_pred` internally such that it sums to 1. This way, a really bad model, the predictions of which do not sum to 1, gets a better loss then it actually has.\n\n### Steps/Code to Reproduce\n\n```python\r\nfrom scipy.special import xlogy\r\nfrom sklearn.metrics import log_loss\r\n\r\ny_true = [[0, 1]]\r\ny_pred = [[0.2, 0.3]]\r\n\r\nlog_loss(y_true, y_pred)\r\n```\n\n### Expected Results\n\n```python\r\n-xlogy(y_true, y_pred).sum(axis=1)\r\n```\r\nResult: `1.2039728`\n\n### Actual Results\n\nResult: `0.5108256237659907`\n\n### Versions\n\n```shell\nSystem:\r\n    python: 3.9.14\r\n   machine: macOS\r\n\r\nPython dependencies:\r\n      sklearn: 1.1.2\n```\n\n",
  "hints_text": "can u share me the refernce of the code where the bug was there\n@TomDLT I'd be interested in you opinion. We hit this in https://github.com/scikit-learn/scikit-learn/pull/24365#discussion_r976815764.\nI feel like computing a log loss with probabilities not summing to one does not make sense, so I am ok with the renormalization.\r\n\r\n> a really bad model, the predictions of which do not sum to 1\r\n\r\nTo me this is not a bad model (a model that has poor prediction accuracy), this is an incorrect model (a model that does not return results in the expected format), as would be a model that predicts negative probabilities. We could almost raise an error if the probabilities do not sum to one (or close), but I feel like it is simpler to just renormalize and compute the loss.\n> I feel like computing a log loss with probabilities not summing to one does not make sense, so I am ok with the renormalization.\r\n\r\nTo be honest, I strongly think renormalizing in the metric is methodologically wrong because this way the metric is not measuring the model prediction anymore. The model should take care of it's own predictions (i.e. make them sum to 1), not the metric!\r\n\r\nA metric is like a measuring device, say a scale (for measuring weight). We are measuring objects for a flight transport, so lighter is better. Renormalization is like measuring the weight of objects with their packaging removed. But the flight will have to carry the whole objects, with packaging included.\n> We could almost raise an error if the probabilities do not sum to one (or close), but I feel like it is simpler to just renormalize and compute the loss.\r\n\r\nI would be fine with raising a warning first and an error in the future.\nI agree with @lorentzenchr that the current behavior is very surprising and therefore it's a bug to me.\nWhat should be the behavior for larger `eps` values? For example, the following has `eps=0.1`:\r\n\r\n```python\r\nfrom sklearn.metrics import log_loss\r\nimport numpy as np\r\n\r\ny_true = [0, 1, 2]\r\ny_pred = [[0, 0, 1], [0, 1, 0], [0, 0, 1]]\r\n\r\neps = 0.1\r\nlog_loss(y_true, y_pred, eps=eps)\r\n# 0.9330788879075577\r\n\r\n# `log_loss` will use a clipped `y_pred` for computing the log loss:\r\nnp.clip(y_pred, eps, 1 - eps)\r\n# array([[0.1, 0.1, 0.9],\r\n#        [0.1, 0.9, 0.1],\r\n#        [0.1, 0.1, 0.9]])\r\n```\r\n\r\nWe could just validate the input, i.e. `np.isclose(y_pred.sum(axis=1), 1.0)`, but `log_loss` will use the clipped version for computation. For reference, here is the clipping:\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/d52e946fa4fca4282b0065ddcb0dd5d268c956e7/sklearn/metrics/_classification.py#L2629-L2630\r\n\r\nFor me, I think that `eps` shouldn't be a parameter and should always be `np.finfo(y_pred.dtype).eps`. For reference, PyTorch's `binary_cross_entropy` [clips the log to -100 by default](https://github.com/pytorch/pytorch/blob/e47af44eb81b9cd0c3583de91b0a2d4f56a5cf8d/aten/src/ATen/native/Loss.cpp#L292-L297)\nI agree with @thomasjpfan that `eps` should not be a parameter. In my opinion, the perfect default value is 0 (what is the use case of having it in the first place?). I'm also fine with `np.finfo(y_pred.dtype).eps`.\n@lorentzenchr Would it be okay for me to work on this issue?\n@OmarManzoor If the solution is clear to you, then yes.\n> @OmarManzoor If the solution is clear to you, then yes.\r\n\r\nFrom what I can understand we need to raise a warning if `y_pred` does not sum to 1 and we need to remove eps as a parameter to this metric and instead use a value of `np.finfo(y_pred.dtype).eps`.\n@OmarManzoor Yes. You are very welcome to go ahead, open a PR and link it with this issue. Keep in mind that `eps` needs a a deprecation cycle, i.e. throw a warning when set for 2 releases. Be prepared that a few concerns might be raised during review. \n> @OmarManzoor Yes. You are very welcome to go ahead, open a PR and link it with this issue. Keep in mind that `eps` needs a a deprecation cycle, i.e. throw a warning when set for 2 releases. Be prepared that a few concerns might be raised during review.\r\n\r\nSure thank you.",
  "created_at": "2023-01-05T07:16:22Z",
  "version": "1.3",
  "FAIL_TO_PASS": "[\"sklearn/metrics/tests/test_classification.py::test_log_loss\", \"sklearn/metrics/tests/test_classification.py::test_log_loss_pandas_input\"]",
  "PASS_TO_PASS": "[\"sklearn/metrics/tests/test_classification.py::test_classification_report_dictionary_output\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_output_dict_empty_input\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_zero_division_warning[warn]\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_zero_division_warning[0]\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_zero_division_warning[1]\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_accuracy_score_subset_accuracy\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_binary_single_class\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_extra_labels\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_ignored_labels\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_score_non_binary_class\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_duplicate_values\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_tied_values\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_fscore_support_errors\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_unused_pos_label\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_binary\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_binary\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_multilabel\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_errors\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[true-f-0.333333333]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[pred-f-0.333333333]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[all-f-0.1111111111]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[None-i-2]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize_single_class\", \"sklearn/metrics/tests/test_classification.py::test_likelihood_ratios_warnings[params0-samples\", \"sklearn/metrics/tests/test_classification.py::test_likelihood_ratios_warnings[params1-positive_likelihood_ratio\", \"sklearn/metrics/tests/test_classification.py::test_likelihood_ratios_warnings[params2-no\", \"sklearn/metrics/tests/test_classification.py::test_likelihood_ratios_warnings[params3-negative_likelihood_ratio\", \"sklearn/metrics/tests/test_classification.py::test_likelihood_ratios_warnings[params4-no\", \"sklearn/metrics/tests/test_classification.py::test_likelihood_ratios_errors[params0-class_likelihood_ratios\", \"sklearn/metrics/tests/test_classification.py::test_likelihood_ratios\", \"sklearn/metrics/tests/test_classification.py::test_cohen_kappa\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_nan\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_numpy_corrcoef\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_jurman\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[100]\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[10000]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[samples]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[micro]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[macro]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[weighted]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[None]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary_averaged\", \"sklearn/metrics/tests/test_classification.py::test_zero_precision_recall\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_multiclass_subset_labels\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_error[empty\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_error[unknown\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_on_zero_length_input[None]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_on_zero_length_input[binary]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_on_zero_length_input[multiclass]\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_dtype\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_balanced\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_label_detection\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_digits\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_string_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_unicode_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_long_string_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_labels_target_names_unequal_length\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_no_labels_target_names_unequal_length\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_classification_report\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_zero_one_loss_subset\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_hamming_loss\", \"sklearn/metrics/tests/test_classification.py::test_jaccard_score_validation\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_jaccard_score\", \"sklearn/metrics/tests/test_classification.py::test_multiclass_jaccard_score\", \"sklearn/metrics/tests/test_classification.py::test_average_binary_jaccard_score\", \"sklearn/metrics/tests/test_classification.py::test_jaccard_score_zero_division_warning\", \"sklearn/metrics/tests/test_classification.py::test_jaccard_score_zero_division_set_value[0-0]\", \"sklearn/metrics/tests/test_classification.py::test_jaccard_score_zero_division_set_value[1-0.5]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_2\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction[warn]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction[0]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction[1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-macro-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-micro-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-weighted-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-samples-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-macro-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-micro-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-weighted-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-samples-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[macro]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[micro]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[weighted]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[samples]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_average_none[0]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_average_none[1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_average_none_warn\", \"sklearn/metrics/tests/test_classification.py::test_prf_warnings\", \"sklearn/metrics/tests/test_classification.py::test_prf_no_warnings_if_zero_division_set[0]\", \"sklearn/metrics/tests/test_classification.py::test_prf_no_warnings_if_zero_division_set[1]\", \"sklearn/metrics/tests/test_classification.py::test_recall_warnings[warn]\", \"sklearn/metrics/tests/test_classification.py::test_recall_warnings[0]\", \"sklearn/metrics/tests/test_classification.py::test_recall_warnings[1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_warnings[warn]\", \"sklearn/metrics/tests/test_classification.py::test_precision_warnings[0]\", \"sklearn/metrics/tests/test_classification.py::test_precision_warnings[1]\", \"sklearn/metrics/tests/test_classification.py::test_fscore_warnings[warn]\", \"sklearn/metrics/tests/test_classification.py::test_fscore_warnings[0]\", \"sklearn/metrics/tests/test_classification.py::test_fscore_warnings[1]\", \"sklearn/metrics/tests/test_classification.py::test_prf_average_binary_data_non_binary\", \"sklearn/metrics/tests/test_classification.py::test__check_targets\", \"sklearn/metrics/tests/test_classification.py::test__check_targets_multiclass_with_both_y_true_and_y_pred_binary\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_binary\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_missing_labels_with_labels_none\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_no_consistent_pred_decision_shape\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_with_missing_labels\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_missing_labels_only_two_unq_in_y_true\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_invariance_lists\", \"sklearn/metrics/tests/test_classification.py::test_log_loss_eps_auto[float64]\", \"sklearn/metrics/tests/test_classification.py::test_log_loss_eps_auto_float16\", \"sklearn/metrics/tests/test_classification.py::test_brier_score_loss\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score_unseen\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true0-y_pred0]\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true1-y_pred1]\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true2-y_pred2]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes0-jaccard_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes0-f1_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes0-metric2]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes0-precision_recall_fscore_support]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes0-precision_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes0-recall_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes0-brier_score_loss]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes1-jaccard_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes1-f1_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes1-metric2]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes1-precision_recall_fscore_support]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes1-precision_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes1-recall_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes1-brier_score_loss]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes2-jaccard_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes2-f1_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes2-metric2]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes2-precision_recall_fscore_support]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes2-precision_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes2-recall_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes2-brier_score_loss]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes3-jaccard_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes3-f1_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes3-metric2]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes3-precision_recall_fscore_support]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes3-precision_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes3-recall_score]\", \"sklearn/metrics/tests/test_classification.py::test_classification_metric_pos_label_types[classes3-brier_score_loss]\"]",
  "environment_setup_commit": "1e8a5b833d1b58f3ab84099c4582239af854b23a",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.016524",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}