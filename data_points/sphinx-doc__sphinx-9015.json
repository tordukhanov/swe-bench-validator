{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9015",
  "base_commit": "9f62b9cccbd69d250ff84a3cfb346725476f83a8",
  "patch": "diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -11,6 +11,7 @@\n import sys\n import typing\n from struct import Struct\n+from types import TracebackType\n from typing import Any, Callable, Dict, Generator, List, Optional, Tuple, TypeVar, Union\n \n from docutils import nodes\n@@ -42,6 +43,13 @@ def _evaluate(self, globalns: Dict, localns: Dict) -> Any:\n     from typing import Type  # NOQA # for python3.5.1\n \n \n+# builtin classes that have incorrect __module__\n+INVALID_BUILTIN_CLASSES = {\n+    Struct: 'struct.Struct',  # Before Python 3.9\n+    TracebackType: 'types.TracebackType',\n+}\n+\n+\n # Text like nodes which are initialized with text and rawsource\n TextlikeNode = Union[nodes.Text, nodes.TextElement]\n \n@@ -101,9 +109,8 @@ def restify(cls: Optional[\"Type\"]) -> str:\n         return ':obj:`None`'\n     elif cls is Ellipsis:\n         return '...'\n-    elif cls is Struct:\n-        # Before Python 3.9, struct.Struct class has incorrect __module__.\n-        return ':class:`struct.Struct`'\n+    elif cls in INVALID_BUILTIN_CLASSES:\n+        return ':class:`%s`' % INVALID_BUILTIN_CLASSES[cls]\n     elif inspect.isNewType(cls):\n         return ':class:`%s`' % cls.__name__\n     elif types_Union and isinstance(cls, types_Union):\n@@ -276,14 +283,13 @@ def stringify(annotation: Any) -> str:\n         return repr(annotation)\n     elif annotation is NoneType:\n         return 'None'\n+    elif annotation in INVALID_BUILTIN_CLASSES:\n+        return INVALID_BUILTIN_CLASSES[annotation]\n     elif (getattr(annotation, '__module__', None) == 'builtins' and\n           hasattr(annotation, '__qualname__')):\n         return annotation.__qualname__\n     elif annotation is Ellipsis:\n         return '...'\n-    elif annotation is Struct:\n-        # Before Python 3.9, struct.Struct class has incorrect __module__.\n-        return 'struct.Struct'\n \n     if sys.version_info >= (3, 7):  # py37+\n         return _stringify_py37(annotation)\n",
  "test_patch": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -11,6 +11,7 @@\n import sys\n from numbers import Integral\n from struct import Struct\n+from types import TracebackType\n from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar,\n                     Union)\n \n@@ -45,6 +46,7 @@ def test_restify():\n     assert restify(None) == \":obj:`None`\"\n     assert restify(Integral) == \":class:`numbers.Integral`\"\n     assert restify(Struct) == \":class:`struct.Struct`\"\n+    assert restify(TracebackType) == \":class:`types.TracebackType`\"\n     assert restify(Any) == \":obj:`Any`\"\n \n \n@@ -133,7 +135,8 @@ def test_stringify():\n     assert stringify(str) == \"str\"\n     assert stringify(None) == \"None\"\n     assert stringify(Integral) == \"numbers.Integral\"\n-    assert restify(Struct) == \":class:`struct.Struct`\"\n+    assert stringify(Struct) == \"struct.Struct\"\n+    assert stringify(TracebackType) == \"types.TracebackType\"\n     assert stringify(Any) == \"Any\"\n \n \n",
  "problem_statement": "Property gets linked instead of external type in class with inline type annotations\n**Describe the bug**\r\n\r\nThe project is using autodoc with inline Python type annotations. Given the following class (snipped to the relevant parts):\r\n\r\n```py\r\nfrom types import TracebackType\r\n\r\nclass ExceptionInfo(Generic[E]):\r\n    @classmethod\r\n    def from_exc_info(\r\n        cls,\r\n        exc_info: Tuple[Type[E], E, TracebackType],\r\n        exprinfo: Optional[str] = None,\r\n    ) -> \"ExceptionInfo[E]\":\r\n        pass\r\n\r\n    @property\r\n    def traceback(self) -> Traceback:\r\n        pass\r\n```\r\n\r\nThe class and `from_exc_info` method get rendered [as follows](https://docs.pytest.org/en/stable/reference.html#pytest._code.ExceptionInfo.from_exc_info):\r\n\r\n![Screenshot_2021-03-13 API Reference â€” pytest documentation](https://user-images.githubusercontent.com/1223550/111029541-d51bbd80-8405-11eb-9fed-b0ac2ece733f.png)\r\n\r\nIn the class, the `TracebackType` gets rendered as `traceback` and is not linked.\r\n\r\nIn the method, the `TracebackType` gets rendered as `traceback` and links to the `traceback` property.\r\n\r\n**Expected behavior**\r\n\r\nI expect it to show as `TracebackType`. A `traceback` is also OK I guess (if it's meant to refer to a \"traceback object\"), but in that case it should link to https://docs.python.org/3/library/types.html#types.TracebackType or https://docs.python.org/3/reference/datamodel.html#traceback-objects instead of the local property.\r\n\r\n**To Reproduce**\r\n\r\nI can try to create a minimal reproduction if the above is not sufficient or gets outdated.\r\n\r\n**Your project**\r\n\r\nhttps://github.com/pytest-dev/pytest\r\n\r\n**Environment info**\r\n- OS: Linux\r\n- Python version: 3.9.2\r\n- Sphinx version: 3.5.2\r\n- Sphinx extensions: \r\n\r\n```py\r\nextensions = [\r\n    \"pallets_sphinx_themes\",\r\n    \"pygments_pytest\",\r\n    \"sphinx.ext.autodoc\",\r\n    \"sphinx.ext.autosummary\",\r\n    \"sphinx.ext.intersphinx\",\r\n    \"sphinx.ext.todo\",\r\n    \"sphinx.ext.viewcode\",\r\n    \"sphinx_removed_in\",\r\n    \"sphinxcontrib_trio\",\r\n]\r\n```\n",
  "hints_text": "Unfortunately, the real name of `types.TracebackType` is `traceback`.\r\n\r\n```\r\n$ python\r\nPython 3.9.1 (default, Dec 18 2020, 00:18:40)\r\n[Clang 11.0.3 (clang-1103.0.32.59)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from types import TracebackType\r\n>>> TracebackType\r\n<class 'traceback'>\r\n>>> TracebackType.__module__\r\n'builtins'\r\n```\r\n\r\nAs a result, `ExceptionInfo.from_exc_info` was rendered as following (internally):\r\n```\r\n   .. py:method:: ExceptionInfo.from_exc_info(exc_info: Tuple[Type[example.E], example.E, traceback], exprinfo: Optional[str] = None) -> example.ExceptionInfo[example.E]\r\n      :module: example\r\n      :classmethod:\r\n```\r\n\r\nAfter that, the \"traceback\" name confuses Sphinx.\nAh the `traceback` makes sense now, thanks.\r\n\r\nSo I guess the problem is that the `builtins` gets elided + has lesser priority than the property. The second part makes sense, but for the first part, is it viable to keep the `builtins`, but just not display it?\nWould you like to see `builtins.int` or `builtins.str`? Of course, it's possible technically. But nobody wants to show it, I think.\nI mean that it would become `builtins.traceback` in the sphinx code but rendered in HTML as just `traceback`. But that's just a thought, I didn't try to check how viable this is. Another complicating factor is that `traceback` is not actually present in the `builtins` module.\r\n\r\nBTW, if it's rendered as\r\n\r\n```rst\r\n   .. py:method:: ExceptionInfo.from_exc_info(exc_info: Tuple[Type[example.E], example.E, traceback], exprinfo: Optional[str] = None) -> example.ExceptionInfo[example.E]\r\n      :module: example\r\n      :classmethod:\r\n```\r\n\r\nmaybe it makes sense to just skip properties when trying to resolve *types*.",
  "created_at": "2021-03-17T14:38:22Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"tests/test_util_typing.py::test_restify\", \"tests/test_util_typing.py::test_stringify\"]",
  "PASS_TO_PASS": "[\"tests/test_util_typing.py::test_restify_type_hints_containers\", \"tests/test_util_typing.py::test_restify_type_hints_Callable\", \"tests/test_util_typing.py::test_restify_type_hints_Union\", \"tests/test_util_typing.py::test_restify_type_hints_typevars\", \"tests/test_util_typing.py::test_restify_type_hints_custom_class\", \"tests/test_util_typing.py::test_restify_type_hints_alias\", \"tests/test_util_typing.py::test_restify_type_ForwardRef\", \"tests/test_util_typing.py::test_restify_broken_type_hints\", \"tests/test_util_typing.py::test_stringify_type_hints_containers\", \"tests/test_util_typing.py::test_stringify_Annotated\", \"tests/test_util_typing.py::test_stringify_type_hints_string\", \"tests/test_util_typing.py::test_stringify_type_hints_Callable\", \"tests/test_util_typing.py::test_stringify_type_hints_Union\", \"tests/test_util_typing.py::test_stringify_type_hints_typevars\", \"tests/test_util_typing.py::test_stringify_type_hints_custom_class\", \"tests/test_util_typing.py::test_stringify_type_hints_alias\", \"tests/test_util_typing.py::test_stringify_broken_type_hints\"]",
  "environment_setup_commit": "8939a75efaa911a12dbe6edccedf261e88bf7eef",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.062195",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}