{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8951",
  "base_commit": "b923165d5ef289ba39bb964201d4a036eb5a5ff6",
  "patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -306,6 +306,7 @@\n     |   \\+\\+ | --\n     |   ->\\*? | \\,\n     |   (<<|>>)=? | && | \\|\\|\n+    |   <=>\n     |   [!<>=/*%+|&^~-]=?\n     |   (\\b(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|xor|xor_eq)\\b)\n ''')\n@@ -494,6 +495,7 @@\n     '>': 'gt',\n     '<=': 'le',\n     '>=': 'ge',\n+    '<=>': 'ss',\n     '!': 'nt', 'not': 'nt',\n     '&&': 'aa', 'and': 'aa',\n     '||': 'oo', 'or': 'oo',\n@@ -528,7 +530,7 @@\n     ['^', 'xor'],\n     ['&', 'bitand'],\n     ['==', '!=', 'not_eq'],\n-    ['<=', '>=', '<', '>'],\n+    ['<=>', '<=', '>=', '<', '>'],\n     ['<<', '>>'],\n     ['+', '-'],\n     ['*', '/', '%'],\n@@ -5309,7 +5311,7 @@ def _parse_logical_or_expression(self, inTemplate: bool) -> ASTExpression:\n         # exclusive-or   = and              ^\n         # and            = equality         &\n         # equality       = relational       ==, !=\n-        # relational     = shift            <, >, <=, >=\n+        # relational     = shift            <, >, <=, >=, <=>\n         # shift          = additive         <<, >>\n         # additive       = multiplicative   +, -\n         # multiplicative = pm               *, /, %\n",
  "test_patch": "diff --git a/tests/test_domain_cpp.py b/tests/test_domain_cpp.py\n--- a/tests/test_domain_cpp.py\n+++ b/tests/test_domain_cpp.py\n@@ -289,13 +289,16 @@ class Config:\n     exprCheck('5 == 42', 'eqL5EL42E')\n     exprCheck('5 != 42', 'neL5EL42E')\n     exprCheck('5 not_eq 42', 'neL5EL42E')\n-    # ['<=', '>=', '<', '>']\n+    # ['<=', '>=', '<', '>', '<=>']\n     exprCheck('5 <= 42', 'leL5EL42E')\n     exprCheck('A <= 42', 'le1AL42E')\n     exprCheck('5 >= 42', 'geL5EL42E')\n     exprCheck('5 < 42', 'ltL5EL42E')\n     exprCheck('A < 42', 'lt1AL42E')\n     exprCheck('5 > 42', 'gtL5EL42E')\n+    exprCheck('A > 42', 'gt1AL42E')\n+    exprCheck('5 <=> 42', 'ssL5EL42E')\n+    exprCheck('A <=> 42', 'ss1AL42E')\n     # ['<<', '>>']\n     exprCheck('5 << 42', 'lsL5EL42E')\n     exprCheck('A << 42', 'ls1AL42E')\n@@ -661,6 +664,7 @@ def test_operators():\n     check('function', 'void operator>()', {1: \"gt-operator\", 2: \"gtv\"})\n     check('function', 'void operator<=()', {1: \"lte-operator\", 2: \"lev\"})\n     check('function', 'void operator>=()', {1: \"gte-operator\", 2: \"gev\"})\n+    check('function', 'void operator<=>()', {1: None, 2: \"ssv\"})\n     check('function', 'void operator!()', {1: \"not-operator\", 2: \"ntv\"})\n     check('function', 'void operator not()', {2: \"ntv\"})\n     check('function', 'void operator&&()', {1: \"sand-operator\", 2: \"aav\"})\n",
  "problem_statement": "Support C++20's spaceship operator\nC++20 has the new spaceship operator `<=>` for three way comparisons which can also be [defaulted](https://en.cppreference.com/w/cpp/language/default_comparisons) (not sure if the latter matters to Sphinx).\r\n\r\nI hope this is a problem with Sphinx at all and not with the Breathe extension I'm also using.\r\n\r\nFor example, this reST code in Sphinx\r\n```\r\n.. cpp:function:: std::strong_ordering operator<=>(Foo, Foo)\r\n```\r\ncurrently leads to the following warning/error\r\n```\r\nWARNING: Error when parsing function declaration.\r\nIf the function has no return type:\r\n  Error in declarator or parameters-and-qualifiers\r\n  Invalid C++ declaration: Expecting \"(\" in parameters-and-qualifiers. [error at 21]\r\n    std::strong_ordering operator<=>(Foo, Foo)\r\n    ---------------------^\r\nIf the function has a return type:\r\n  Error in declarator or parameters-and-qualifiers\r\n  If pointer to member declarator:\r\n    Invalid C++ declaration: Expected '::' in pointer to member (function). [error at 31]\r\n      std::strong_ordering operator<=>(Foo, Foo)\r\n      -------------------------------^\r\n  If declarator-id:\r\n    Invalid C++ declaration: Expecting \"(\" in parameters-and-qualifiers. [error at 31]\r\n      std::strong_ordering operator<=>(Foo, Foo)\r\n      -------------------------------^\r\n```\n",
  "hints_text": "",
  "created_at": "2021-03-02T19:28:19Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"tests/test_domain_cpp.py::test_expressions\", \"tests/test_domain_cpp.py::test_operators\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_cpp.py::test_fundamental_types\", \"tests/test_domain_cpp.py::test_type_definitions\", \"tests/test_domain_cpp.py::test_concept_definitions\", \"tests/test_domain_cpp.py::test_member_definitions\", \"tests/test_domain_cpp.py::test_function_definitions\", \"tests/test_domain_cpp.py::test_nested_name\", \"tests/test_domain_cpp.py::test_class_definitions\", \"tests/test_domain_cpp.py::test_union_definitions\", \"tests/test_domain_cpp.py::test_enum_definitions\", \"tests/test_domain_cpp.py::test_anon_definitions\", \"tests/test_domain_cpp.py::test_templates\", \"tests/test_domain_cpp.py::test_requires_clauses\", \"tests/test_domain_cpp.py::test_template_args\", \"tests/test_domain_cpp.py::test_initializers\", \"tests/test_domain_cpp.py::test_attributes\", \"tests/test_domain_cpp.py::test_xref_parsing\", \"tests/test_domain_cpp.py::test_build_domain_cpp_multi_decl_lookup\", \"tests/test_domain_cpp.py::test_build_domain_cpp_warn_template_param_qualified_name\", \"tests/test_domain_cpp.py::test_build_domain_cpp_backslash_ok_true\", \"tests/test_domain_cpp.py::test_build_domain_cpp_semicolon\", \"tests/test_domain_cpp.py::test_build_domain_cpp_backslash_ok_false\", \"tests/test_domain_cpp.py::test_build_domain_cpp_anon_dup_decl\", \"tests/test_domain_cpp.py::test_build_domain_cpp_misuse_of_roles\", \"tests/test_domain_cpp.py::test_build_domain_cpp_with_add_function_parentheses_is_True\", \"tests/test_domain_cpp.py::test_build_domain_cpp_with_add_function_parentheses_is_False\", \"tests/test_domain_cpp.py::test_xref_consistency\", \"tests/test_domain_cpp.py::test_noindexentry\", \"tests/test_domain_cpp.py::test_intersphinx\"]",
  "environment_setup_commit": "8939a75efaa911a12dbe6edccedf261e88bf7eef",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.061858",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}