{
  "repo": "django/django",
  "instance_id": "django__django-10606",
  "base_commit": "0315c18fe170b1b611b7d10b5dde2f196b89a7e0",
  "patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -114,7 +114,10 @@ def __repr__(self):\n             self.related_model._meta.model_name,\n         )\n \n-    def get_choices(self, include_blank=True, blank_choice=BLANK_CHOICE_DASH, ordering=()):\n+    def get_choices(\n+        self, include_blank=True, blank_choice=BLANK_CHOICE_DASH,\n+        limit_choices_to=None, ordering=(),\n+    ):\n         \"\"\"\n         Return choices with a default blank choices included, for use\n         as <select> choices for this field.\n@@ -122,7 +125,8 @@ def get_choices(self, include_blank=True, blank_choice=BLANK_CHOICE_DASH, orderi\n         Analog of django.db.models.fields.Field.get_choices(), provided\n         initially for utilization by RelatedFieldListFilter.\n         \"\"\"\n-        qs = self.related_model._default_manager.all()\n+        limit_choices_to = limit_choices_to or self.limit_choices_to\n+        qs = self.related_model._default_manager.complex_filter(limit_choices_to)\n         if ordering:\n             qs = qs.order_by(*ordering)\n         return (blank_choice if include_blank else []) + [\n",
  "test_patch": "diff --git a/tests/admin_filters/tests.py b/tests/admin_filters/tests.py\n--- a/tests/admin_filters/tests.py\n+++ b/tests/admin_filters/tests.py\n@@ -741,6 +741,43 @@ def test_relatedonlyfieldlistfilter_foreignkey(self):\n         expected = [(self.alfred.pk, 'alfred'), (self.bob.pk, 'bob')]\n         self.assertEqual(sorted(filterspec.lookup_choices), sorted(expected))\n \n+    def test_relatedonlyfieldlistfilter_foreignkey_reverse_relationships(self):\n+        class EmployeeAdminReverseRelationship(ModelAdmin):\n+            list_filter = (\n+                ('book', RelatedOnlyFieldListFilter),\n+            )\n+\n+        self.djangonaut_book.employee = self.john\n+        self.djangonaut_book.save()\n+        self.django_book.employee = self.jack\n+        self.django_book.save()\n+\n+        modeladmin = EmployeeAdminReverseRelationship(Employee, site)\n+        request = self.request_factory.get('/')\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        filterspec = changelist.get_filters(request)[0][0]\n+        self.assertEqual(filterspec.lookup_choices, [\n+            (self.djangonaut_book.pk, 'Djangonaut: an art of living'),\n+            (self.django_book.pk, 'The Django Book'),\n+        ])\n+\n+    def test_relatedonlyfieldlistfilter_manytomany_reverse_relationships(self):\n+        class UserAdminReverseRelationship(ModelAdmin):\n+            list_filter = (\n+                ('books_contributed', RelatedOnlyFieldListFilter),\n+            )\n+\n+        modeladmin = UserAdminReverseRelationship(User, site)\n+        request = self.request_factory.get('/')\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        filterspec = changelist.get_filters(request)[0][0]\n+        self.assertEqual(\n+            filterspec.lookup_choices,\n+            [(self.guitar_book.pk, 'Guitar for dummies')],\n+        )\n+\n     def test_relatedonlyfieldlistfilter_foreignkey_ordering(self):\n         \"\"\"RelatedOnlyFieldListFilter ordering respects ModelAdmin.ordering.\"\"\"\n         class EmployeeAdminWithOrdering(ModelAdmin):\ndiff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -266,3 +266,37 @@ def test_get_choices_reverse_related_field_default_ordering(self):\n             self.field.remote_field.get_choices(include_blank=False),\n             [self.bar2, self.bar1]\n         )\n+\n+\n+class GetChoicesLimitChoicesToTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.foo1 = Foo.objects.create(a='a', d='12.34')\n+        cls.foo2 = Foo.objects.create(a='b', d='12.34')\n+        cls.bar1 = Bar.objects.create(a=cls.foo1, b='b')\n+        cls.bar2 = Bar.objects.create(a=cls.foo2, b='a')\n+        cls.field = Bar._meta.get_field('a')\n+\n+    def assertChoicesEqual(self, choices, objs):\n+        self.assertEqual(choices, [(obj.pk, str(obj)) for obj in objs])\n+\n+    def test_get_choices(self):\n+        self.assertChoicesEqual(\n+            self.field.get_choices(include_blank=False, limit_choices_to={'a': 'a'}),\n+            [self.foo1],\n+        )\n+        self.assertChoicesEqual(\n+            self.field.get_choices(include_blank=False, limit_choices_to={}),\n+            [self.foo1, self.foo2],\n+        )\n+\n+    def test_get_choices_reverse_related_field(self):\n+        field = self.field.remote_field\n+        self.assertChoicesEqual(\n+            field.get_choices(include_blank=False, limit_choices_to={'b': 'b'}),\n+            [self.bar1],\n+        )\n+        self.assertChoicesEqual(\n+            field.get_choices(include_blank=False, limit_choices_to={}),\n+            [self.bar1, self.bar2],\n+        )\n",
  "problem_statement": "Using RelatedOnlyFieldListFilter with reverse ManyToMany crashes\nDescription\n\t \n\t\t(last modified by Tim Graham)\n\t \nUsing RelatedOnlyFieldListFilter with a reverse ManyToMany relation causes this exception:\nget_choices() got an unexpected keyword argument 'limit_choices_to'\nThis method in ForeignObjectRel.get_choices is missing the parameter that Field.get_choices has.\nPull Request: ​https://github.com/django/django/pull/10606\nDemo of how to trigger bug: ​https://github.com/mgrdcm/django-bug-reverse-related/blob/master/rrbug/rrapp/admin.py#L11-L15\n",
  "hints_text": "I can't reproduce the crash on a ManyToManyField with limit_choices_to. Could you give more details?\nApologies for my lack of response on this, have been traveling. I'm going to be working on adding tests for my fix ASAP but here's a minimal example of how to trigger: Demo of how to trigger bug: ​https://github.com/mgrdcm/django-bug-reverse-related/blob/master/rrbug/rrapp/admin.py#L11-L15\nTest case added: ​https://github.com/django/django/pull/10606/commits/da4785e82c9586c6f2ab41a0e9e5bc3eeeb8fd1c\nTim says \"test should very the correct results of the Filter rather than just checking that an exception isn't raised.\"",
  "created_at": "2018-11-04T02:46:48Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_get_choices_reverse_related_field (model_fields.tests.GetChoicesLimitChoicesToTests)\", \"test_relatedonlyfieldlistfilter_foreignkey_reverse_relationships (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_manytomany_reverse_relationships (admin_filters.tests.ListFiltersTests)\"]",
  "PASS_TO_PASS": "[\"test_check (model_fields.tests.ChoicesTests)\", \"test_choices (model_fields.tests.ChoicesTests)\", \"test_flatchoices (model_fields.tests.ChoicesTests)\", \"test_formfield (model_fields.tests.ChoicesTests)\", \"test_invalid_choice (model_fields.tests.ChoicesTests)\", \"test_choices_and_field_display (model_fields.tests.GetFieldDisplayTests)\", \"test_empty_iterator_choices (model_fields.tests.GetFieldDisplayTests)\", \"A translated display value is coerced to str.\", \"test_iterator_choices (model_fields.tests.GetFieldDisplayTests)\", \"test_blank_in_choices (model_fields.tests.GetChoicesTests)\", \"test_blank_in_grouped_choices (model_fields.tests.GetChoicesTests)\", \"test_empty_choices (model_fields.tests.GetChoicesTests)\", \"test_lazy_strings_not_evaluated (model_fields.tests.GetChoicesTests)\", \"Can supply a custom choices form class to Field.formfield()\", \"deconstruct() uses __qualname__ for nested class support.\", \"Field instances can be pickled.\", \"test_field_name (model_fields.tests.BasicFieldTests)\", \"Fields are ordered based on their creation.\", \"test_field_repr (model_fields.tests.BasicFieldTests)\", \"__repr__() uses __qualname__ for nested class support.\", \"test_field_str (model_fields.tests.BasicFieldTests)\", \"test_field_verbose_name (model_fields.tests.BasicFieldTests)\", \"Field.formfield() sets disabled for fields with choices.\", \"test_show_hidden_initial (model_fields.tests.BasicFieldTests)\", \"test_get_choices (model_fields.tests.GetChoicesLimitChoicesToTests)\", \"test_get_choices (model_fields.tests.GetChoicesOrderingTests)\", \"test_get_choices_default_ordering (model_fields.tests.GetChoicesOrderingTests)\", \"test_get_choices_reverse_related_field (model_fields.tests.GetChoicesOrderingTests)\", \"test_get_choices_reverse_related_field_default_ordering (model_fields.tests.GetChoicesOrderingTests)\", \"test_allvaluesfieldlistfilter (admin_filters.tests.ListFiltersTests)\", \"test_allvaluesfieldlistfilter_custom_qs (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter_nullbooleanfield (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter_tuple (admin_filters.tests.ListFiltersTests)\", \"test_choicesfieldlistfilter_has_none_choice (admin_filters.tests.ListFiltersTests)\", \"test_datefieldlistfilter (admin_filters.tests.ListFiltersTests)\", \"test_datefieldlistfilter_with_time_zone_support (admin_filters.tests.ListFiltersTests)\", \"Filtering by an invalid value.\", \"test_fieldlistfilter_underscorelookup_tuple (admin_filters.tests.ListFiltersTests)\", \"test_filter_with_failing_queryset (admin_filters.tests.ListFiltersTests)\", \"test_fk_with_to_field (admin_filters.tests.ListFiltersTests)\", \"test_list_filter_queryset_filtered_by_default (admin_filters.tests.ListFiltersTests)\", \"test_listfilter_genericrelation (admin_filters.tests.ListFiltersTests)\", \"test_listfilter_without_title (admin_filters.tests.ListFiltersTests)\", \"test_lookup_with_dynamic_value (admin_filters.tests.ListFiltersTests)\", \"test_lookup_with_non_string_value (admin_filters.tests.ListFiltersTests)\", \"test_lookup_with_non_string_value_underscored (admin_filters.tests.ListFiltersTests)\", \"test_parameter_ends_with__in__or__isnull (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_foreignkey (admin_filters.tests.ListFiltersTests)\", \"RelatedFieldListFilter ordering respects Model.ordering.\", \"RelatedFieldListFilter ordering respects ModelAdmin.ordering.\", \"test_relatedfieldlistfilter_foreignkey_ordering_reverse (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_manytomany (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_reverse_relationships (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_reverse_relationships_default_ordering (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_foreignkey (admin_filters.tests.ListFiltersTests)\", \"RelatedOnlyFieldListFilter ordering respects Meta.ordering.\", \"RelatedOnlyFieldListFilter ordering respects ModelAdmin.ordering.\", \"test_relatedonlyfieldlistfilter_manytomany (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_underscorelookup_foreignkey (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter_with_none_returning_lookups (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter_with_queryset_based_lookups (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter_without_parameter (admin_filters.tests.ListFiltersTests)\", \"test_two_characters_long_field (admin_filters.tests.ListFiltersTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.551650",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}