{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-13018",
  "base_commit": "e95969f314e084e8125d913099c1091a2643e530",
  "patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -564,29 +564,61 @@ def _eval_is_polar(self):\n     def _eval_subs(self, old, new):\n         from sympy import exp, log, Symbol\n         def _check(ct1, ct2, old):\n-            \"\"\"Return bool, pow where, if bool is True, then the exponent of\n-            Pow `old` will combine with `pow` so the substitution is valid,\n-            otherwise bool will be False,\n+            \"\"\"Return (bool, pow, remainder_pow) where, if bool is True, then the\n+            exponent of Pow `old` will combine with `pow` so the substitution\n+            is valid, otherwise bool will be False.\n+\n+            For noncommutative objects, `pow` will be an integer, and a factor\n+            `Pow(old.base, remainder_pow)` needs to be included. If there is\n+            no such factor, None is returned. For commutative objects,\n+            remainder_pow is always None.\n \n             cti are the coefficient and terms of an exponent of self or old\n             In this _eval_subs routine a change like (b**(2*x)).subs(b**x, y)\n             will give y**2 since (b**x)**2 == b**(2*x); if that equality does\n             not hold then the substitution should not occur so `bool` will be\n             False.\n+\n             \"\"\"\n             coeff1, terms1 = ct1\n             coeff2, terms2 = ct2\n             if terms1 == terms2:\n-                pow = coeff1/coeff2\n-                try:\n-                    pow = as_int(pow)\n-                    combines = True\n-                except ValueError:\n-                    combines = Pow._eval_power(\n-                        Pow(*old.as_base_exp(), evaluate=False),\n-                        pow) is not None\n-                return combines, pow\n-            return False, None\n+                if old.is_commutative:\n+                    # Allow fractional powers for commutative objects\n+                    pow = coeff1/coeff2\n+                    try:\n+                        pow = as_int(pow)\n+                        combines = True\n+                    except ValueError:\n+                        combines = Pow._eval_power(\n+                            Pow(*old.as_base_exp(), evaluate=False),\n+                            pow) is not None\n+                    return combines, pow, None\n+                else:\n+                    # With noncommutative symbols, substitute only integer powers\n+                    if not isinstance(terms1, tuple):\n+                        terms1 = (terms1,)\n+                    if not all(term.is_integer for term in terms1):\n+                        return False, None, None\n+\n+                    try:\n+                        # Round pow toward zero\n+                        pow, remainder = divmod(as_int(coeff1), as_int(coeff2))\n+                        if pow < 0 and remainder != 0:\n+                            pow += 1\n+                            remainder -= as_int(coeff2)\n+\n+                        if remainder == 0:\n+                            remainder_pow = None\n+                        else:\n+                            remainder_pow = Mul(remainder, *terms1)\n+\n+                        return True, pow, remainder_pow\n+                    except ValueError:\n+                        # Can't substitute\n+                        pass\n+\n+            return False, None, None\n \n         if old == self.base:\n             return new**self.exp._subs(old, new)\n@@ -601,10 +633,13 @@ def _check(ct1, ct2, old):\n             if self.exp.is_Add is False:\n                 ct1 = self.exp.as_independent(Symbol, as_Add=False)\n                 ct2 = old.exp.as_independent(Symbol, as_Add=False)\n-                ok, pow = _check(ct1, ct2, old)\n+                ok, pow, remainder_pow = _check(ct1, ct2, old)\n                 if ok:\n                     # issue 5180: (x**(6*y)).subs(x**(3*y),z)->z**2\n-                    return self.func(new, pow)\n+                    result = self.func(new, pow)\n+                    if remainder_pow is not None:\n+                        result = Mul(result, Pow(old.base, remainder_pow))\n+                    return result\n             else:  # b**(6*x+a).subs(b**(3*x), y) -> y**2 * b**a\n                 # exp(exp(x) + exp(x**2)).subs(exp(exp(x)), w) -> w * exp(exp(x**2))\n                 oarg = old.exp\n@@ -614,10 +649,16 @@ def _check(ct1, ct2, old):\n                 for a in self.exp.args:\n                     newa = a._subs(old, new)\n                     ct1 = newa.as_coeff_mul()\n-                    ok, pow = _check(ct1, ct2, old)\n+                    ok, pow, remainder_pow = _check(ct1, ct2, old)\n                     if ok:\n                         new_l.append(new**pow)\n+                        if remainder_pow is not None:\n+                            o_al.append(remainder_pow)\n                         continue\n+                    elif not old.is_commutative and not newa.is_integer:\n+                        # If any term in the exponent is non-integer,\n+                        # we do not do any substitutions in the noncommutative case\n+                        return\n                     o_al.append(newa)\n                 if new_l:\n                     new_l.append(Pow(self.base, Add(*o_al), evaluate=False))\n@@ -627,9 +668,12 @@ def _check(ct1, ct2, old):\n             ct1 = old.args[0].as_independent(Symbol, as_Add=False)\n             ct2 = (self.exp*log(self.base)).as_independent(\n                 Symbol, as_Add=False)\n-            ok, pow = _check(ct1, ct2, old)\n+            ok, pow, remainder_pow = _check(ct1, ct2, old)\n             if ok:\n-                return self.func(new, pow)  # (2**x).subs(exp(x*log(2)), z) -> z\n+                result = self.func(new, pow)  # (2**x).subs(exp(x*log(2)), z) -> z\n+                if remainder_pow is not None:\n+                    result = Mul(result, Pow(old.base, remainder_pow))\n+                return result\n \n     def as_base_exp(self):\n         \"\"\"Return base and exp of self.\n",
  "test_patch": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -292,6 +292,8 @@ def test_subs_commutative():\n \n def test_subs_noncommutative():\n     w, x, y, z, L = symbols('w x y z L', commutative=False)\n+    alpha = symbols('alpha', commutative=True)\n+    someint = symbols('someint', commutative=True, integer=True)\n \n     assert (x*y).subs(x*y, L) == L\n     assert (w*y*x).subs(x*y, L) == w*y*x\n@@ -306,6 +308,61 @@ def test_subs_noncommutative():\n     assert (w*x*y*z*x*y).subs(x*y*z, L) == w*L*x*y\n     assert (w*x*y*y*w*x*x*y*x*y*y*x*y).subs(x*y, L) == w*L*y*w*x*L**2*y*L\n \n+    # Check fractional power substitutions. It should not do\n+    # substitutions that choose a value for noncommutative log,\n+    # or inverses that don't already appear in the expressions.\n+    assert (x*x*x).subs(x*x, L) == L*x\n+    assert (x*x*x*y*x*x*x*x).subs(x*x, L) == L*x*y*L**2\n+    for p in range(1, 5):\n+        for k in range(10):\n+            assert (y * x**k).subs(x**p, L) == y * L**(k//p) * x**(k % p)\n+    assert (x**(3/2)).subs(x**(1/2), L) == x**(3/2)\n+    assert (x**(1/2)).subs(x**(1/2), L) == L\n+    assert (x**(-1/2)).subs(x**(1/2), L) == x**(-1/2)\n+    assert (x**(-1/2)).subs(x**(-1/2), L) == L\n+\n+    assert (x**(2*someint)).subs(x**someint, L) == L**2\n+    assert (x**(2*someint + 3)).subs(x**someint, L) == L**2*x**3\n+    assert (x**(3*someint + 3)).subs(x**someint, L) == L**3*x**3\n+    assert (x**(3*someint)).subs(x**(2*someint), L) == L * x**someint\n+    assert (x**(4*someint)).subs(x**(2*someint), L) == L**2\n+    assert (x**(4*someint + 1)).subs(x**(2*someint), L) == L**2 * x\n+    assert (x**(4*someint)).subs(x**(3*someint), L) == L * x**someint\n+    assert (x**(4*someint + 1)).subs(x**(3*someint), L) == L * x**(someint + 1)\n+\n+    assert (x**(2*alpha)).subs(x**alpha, L) == x**(2*alpha)\n+    assert (x**(2*alpha + 2)).subs(x**2, L) == x**(2*alpha + 2)\n+    assert ((2*z)**alpha).subs(z**alpha, y) == (2*z)**alpha\n+    assert (x**(2*someint*alpha)).subs(x**someint, L) == x**(2*someint*alpha)\n+    assert (x**(2*someint + alpha)).subs(x**someint, L) == x**(2*someint + alpha)\n+\n+    # This could in principle be substituted, but is not currently\n+    # because it requires recognizing that someint**2 is divisible by\n+    # someint.\n+    assert (x**(someint**2 + 3)).subs(x**someint, L) == x**(someint**2 + 3)\n+\n+    # alpha**z := exp(log(alpha) z) is usually well-defined\n+    assert (4**z).subs(2**z, y) == y**2\n+\n+    # Negative powers\n+    assert (x**(-1)).subs(x**3, L) == x**(-1)\n+    assert (x**(-2)).subs(x**3, L) == x**(-2)\n+    assert (x**(-3)).subs(x**3, L) == L**(-1)\n+    assert (x**(-4)).subs(x**3, L) == L**(-1) * x**(-1)\n+    assert (x**(-5)).subs(x**3, L) == L**(-1) * x**(-2)\n+\n+    assert (x**(-1)).subs(x**(-3), L) == x**(-1)\n+    assert (x**(-2)).subs(x**(-3), L) == x**(-2)\n+    assert (x**(-3)).subs(x**(-3), L) == L\n+    assert (x**(-4)).subs(x**(-3), L) == L * x**(-1)\n+    assert (x**(-5)).subs(x**(-3), L) == L * x**(-2)\n+\n+    assert (x**1).subs(x**(-3), L) == x\n+    assert (x**2).subs(x**(-3), L) == x**2\n+    assert (x**3).subs(x**(-3), L) == L**(-1)\n+    assert (x**4).subs(x**(-3), L) == L**(-1) * x\n+    assert (x**5).subs(x**(-3), L) == L**(-1) * x**2\n+\n \n def test_subs_basic_funcs():\n     a, b, c, d, K = symbols('a b c d K', commutative=True)\n",
  "problem_statement": "Wrong/surprising result from noncommutative Pow.subs\nThe following behavior in Sympy seems surprising:\r\n```\r\n>>> import sympy\r\n>>> sympy.__version__\r\n'1.1'\r\n>>> x = sympy.Symbol('x', commutative=False)\r\n>>> (x*x*x).subs({x*x: 1})   # !!!\r\n1\r\n```\r\nI would have expected this produces `x`.\r\n\r\nThe issue appears to be that `Pow._eval_subs` uses fractional powers in the substitution. This then raises questions on what noncommutative symbols in Sympy actually mean mathematically. At least in my use cases for them, certainly `x**2 == 1` does not imply `x**3 == 1`.\r\n\r\nI would suggest something like the following:\r\n```\r\n--- a/sympy/core/power.py\r\n+++ b/sympy/core/power.py\r\n@@ -591,6 +591,11 @@ def _check(ct1, ct2, old):\r\n         if old == self.base:\r\n             return new**self.exp._subs(old, new)\r\n\r\n+        if not old.is_commutative:\r\n+            # The logic here does not work for noncommutative objects.\r\n+            # x*x == 1 should not imply x == 1.\r\n+            return False, None\r\n+\r\n         # issue 10829: (4**x - 3*y + 2).subs(2**x, y) -> y**2 - 3*y + 2\r\n         if old.func is self.func and self.exp == old.exp:\r\n             l = log(self.base, old.base)\r\n```\n",
  "hints_text": "Agreed, fractional power logic should not apply to noncommutatives. Does your patch result in `x` or `x**3` for the substitution?\nIt results to `x**3`, so there's room for improvement.\nIf you're happy with `x**3` you can use `xreplace` instead of `subs` as a workaround. `xreplace` just does exact substitution, no mathematical manipulation. ",
  "created_at": "2017-07-20T22:09:54Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_subs_noncommutative\"]",
  "PASS_TO_PASS": "[\"test_subs\", \"test_subs_AccumBounds\", \"test_trigonometric\", \"test_powers\", \"test_bug\", \"test_subbug1\", \"test_subbug2\", \"test_dict_set\", \"test_dict_ambigous\", \"test_deriv_sub_bug3\", \"test_equality_subs1\", \"test_equality_subs2\", \"test_issue_3742\", \"test_subs_dict1\", \"test_mul\", \"test_subs_simple\", \"test_subs_constants\", \"test_subs_commutative\", \"test_subs_basic_funcs\", \"test_subs_wild\", \"test_division\", \"test_add\", \"test_subs_issue_4009\", \"test_functions_subs\", \"test_derivative_subs\", \"test_derivative_subs2\", \"test_derivative_subs3\", \"test_issue_5284\", \"test_subs_iter\", \"test_subs_dict\", \"test_no_arith_subs_on_floats\", \"test_issue_5651\", \"test_issue_6075\", \"test_issue_6079\", \"test_issue_4680\", \"test_issue_6158\", \"test_Function_subs\", \"test_simultaneous_subs\", \"test_issue_6419_6421\", \"test_issue_5261\", \"test_issue_6923\", \"test_2arg_hack\", \"test_noncommutative_subs\", \"test_issue_2877\", \"test_issue_5910\", \"test_issue_5217\", \"test_issue_10829\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.079286",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}