{
  "repo": "django/django",
  "instance_id": "django__django-9703",
  "base_commit": "6f0b8c1c9ef30a1f41ce401e1fed2effd524fed1",
  "patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -3,6 +3,7 @@\n import pkgutil\n import sys\n from collections import OrderedDict, defaultdict\n+from difflib import get_close_matches\n from importlib import import_module\n \n import django\n@@ -203,10 +204,11 @@ def fetch_command(self, subcommand):\n                 settings.INSTALLED_APPS\n             else:\n                 sys.stderr.write(\"No Django settings specified.\\n\")\n-            sys.stderr.write(\n-                \"Unknown command: %r\\nType '%s help' for usage.\\n\"\n-                % (subcommand, self.prog_name)\n-            )\n+            possible_matches = get_close_matches(subcommand, commands)\n+            sys.stderr.write('Unknown command: %r' % subcommand)\n+            if possible_matches:\n+                sys.stderr.write('. Did you mean %s?' % possible_matches[0])\n+            sys.stderr.write(\"\\nType '%s help' for usage.\\n\" % self.prog_name)\n             sys.exit(1)\n         if isinstance(app_name, BaseCommand):\n             # If the command is already loaded, use it directly.\n",
  "test_patch": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2256,3 +2256,23 @@ def test_runs_django_admin(self):\n     def test_program_name_in_help(self):\n         out, err = self.run_test('-m', ['django', 'help'])\n         self.assertOutput(out, \"Type 'python -m django help <subcommand>' for help on a specific subcommand.\")\n+\n+\n+class DjangoAdminSuggestions(AdminScriptTestCase):\n+    def setUp(self):\n+        self.write_settings('settings.py')\n+\n+    def tearDown(self):\n+        self.remove_settings('settings.py')\n+\n+    def test_suggestions(self):\n+        args = ['rnserver', '--settings=test_project.settings']\n+        out, err = self.run_django_admin(args)\n+        self.assertNoOutput(out)\n+        self.assertOutput(err, \"Unknown command: 'rnserver'. Did you mean runserver?\")\n+\n+    def test_no_suggestions(self):\n+        args = ['abcdef', '--settings=test_project.settings']\n+        out, err = self.run_django_admin(args)\n+        self.assertNoOutput(out)\n+        self.assertNotInOutput(err, 'Did you mean')\n",
  "problem_statement": "Allow management command invocation to suggest commands for mistyped commands\nDescription\n\t\nToo often I can't remember the full mgmt command name, but can remember a part of it.\nA little enhancement would save me time.\nAttaching a screenshot and a patch. Thanks.\n",
  "hints_text": "screenshot\na patch\nI wonder if we could do something smarter than a substring search. Perhaps there are other libraries we could borrow ideas from. It would be appropriate to write the DevelopersMailingList to get feedback. I wonder if this isn't somewhat redundant to the â€‹bash completion script though.\nThanks for considering. I don't see this feature to require a considerable planning to be completed on first shot. It could evolve. I was thinking about similarity string search etc., but ended up with the simplest change possible, a substring search. This version would start to help me. Okay, adding colors wasn't the simplest, but just nice and can be removed. I like simple clever hints to the user like this. Bash completion is neat, but not always available and installed.\nSince all features have development and maintenance costs, I'd like for others to confirm it's worth the effort before we commit to doing it.\nI think Django should not try to be a shell helper -- shell completions do a pretty good job, and the use case you describe seems to be answered by $ ./manage.py help | grep passw That said, I can see why people would like to have such functionality -- or even more sophisticated options -- built into their manage.py. And it's a bit of a shame that they have to patch Django to do that. So, in my opinion, instead of taking the current simple patch, we should think how to make command invocation extensible. And having written that, I just thought of this: Step 1: Add a new management command enhanced_manage which takes all its arguments and options, does whatever it likes (e.g. make sure the first arg is actually the name of an existing command, and if not suggests alternatives), and if all is well ends with call_command() to execute the command given; so that you can get your functionality by running manage.py enhanced_manage passw, or run the full command as manage.py enhanced_manage changepassword username Step 2: In your project, edit the file manage.py; replace the line execute_from_command_line(sys.argv) with execute_from_command_line(['enhanced_manage'] + sys.argv) And - tada! extensible command execution, no Django patching required. I suppose this way has some limitations I haven't thought about, and it may seem like a lot of work compared to your simple patch, but as Tim said (and you agreed) such features tend to evolve and become more complicated, and this way makes it possible for them to evolve outside of core, without even waiting for the next Django release.\nI think this is definitely worth pursuing - it's not that complicated to add and it helps out beginners who are new to the whole manage.py experience. I think people are perhaps over-thinking this: providing 'did you mean' suggestions for typos has a lot of prior art including git, pip and the default bash on Ubuntu and shouldn't be complicated or require any interaction. Simply printing out potential candidate commands when the user makes a typo is a quick and easy win IMO. Yes, users could use grep, but that assumes that they are familiar with such tools and are on a system that provides them. Plus learning a new tool like manage.py can be quite hard at the beginning and there is definitely a selection bias here of people who are familiar with Django and unix tooling in general. I wouldn't find this feature useful at all, but someone who is starting out with Django may. For the completion suggestions, difflib.get_close_matches seems to be a good candidate rather than substring matching or rolling our own - plus it's in the stdlib.",
  "created_at": "2018-02-16T18:18:31Z",
  "version": "2.1",
  "FAIL_TO_PASS": "[\"test_suggestions (admin_scripts.tests.DjangoAdminSuggestions)\"]",
  "PASS_TO_PASS": "[\"test_params_to_runserver (admin_scripts.tests.ManageTestserver)\", \"test_testserver_handle_params (admin_scripts.tests.ManageTestserver)\", \"test_no_database (admin_scripts.tests.ManageRunserver)\", \"test_readonly_database (admin_scripts.tests.ManageRunserver)\", \"test_runner_addrport_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runner_ambiguous (admin_scripts.tests.ManageRunserver)\", \"test_runner_custom_defaults (admin_scripts.tests.ManageRunserver)\", \"test_runner_custom_defaults_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runner_hostname (admin_scripts.tests.ManageRunserver)\", \"test_runner_hostname_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runserver_addrport (admin_scripts.tests.ManageRunserver)\", \"test_migration_warning_multiple_apps (admin_scripts.tests.ManageRunserverMigrationWarning)\", \"test_migration_warning_one_app (admin_scripts.tests.ManageRunserverMigrationWarning)\", \"test_precedence (admin_scripts.tests.Discovery)\", \"test_program_name_in_help (admin_scripts.tests.MainModule)\", \"test_runs_django_admin (admin_scripts.tests.MainModule)\", \"no settings: manage.py builtin commands fail with an error when no settings provided\", \"no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"test_attribute_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_help (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_import_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"no settings: django-admin builtin commands fail with an error when no settings provided\", \"no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"\\\"\", \"test_importable_name (admin_scripts.tests.StartApp)\", \"startapp validates that app name is a valid Python identifier.\", \"Regression for #20509\", \"test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts)\", \"test_no_suggestions (admin_scripts.tests.DjangoAdminSuggestions)\", \"minimal: django-admin builtin commands fail with an error when no settings provided\", \"minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"minimal: django-admin builtin commands fail if settings are provided in the environment\", \"minimal: django-admin builtin commands fail if settings are provided as argument\", \"minimal: django-admin can't execute user commands unless settings are provided\", \"minimal: django-admin can't execute user commands, even if settings are provided in environment\", \"minimal: django-admin can't execute user commands, even if settings are provided as argument\", \"fulldefault: django-admin builtin commands fail with an error when no settings provided\", \"fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"fulldefault: django-admin builtin commands succeed if the environment contains settings\", \"fulldefault: django-admin builtin commands succeed if a settings file is provided\", \"fulldefault: django-admin can't execute user commands unless settings are provided\", \"fulldefault: django-admin can execute user commands if settings are provided in environment\", \"fulldefault: django-admin can execute user commands if settings are provided as argument\", \"default: django-admin builtin commands fail with an error when no settings provided\", \"default: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"default: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"default: django-admin builtin commands succeed if settings are provided in the environment\", \"default: django-admin builtin commands succeed if settings are provided as argument\", \"default: django-admin can't execute user commands if it isn't provided settings\", \"default: django-admin can execute user commands if settings are provided in environment\", \"default: django-admin can execute user commands if settings are provided as argument\", \"alternate: django-admin builtin commands fail with an error when no settings provided\", \"alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"alternate: django-admin builtin commands succeed if settings are provided in the environment\", \"alternate: django-admin builtin commands succeed if settings are provided as argument\", \"alternate: django-admin can't execute user commands unless settings are provided\", \"alternate: django-admin can execute user commands if settings are provided in environment\", \"alternate: django-admin can execute user commands if settings are provided as argument\", \"directory: django-admin builtin commands fail with an error when no settings provided\", \"directory: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"directory: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"directory: django-admin builtin commands succeed if settings are provided in the environment\", \"directory: django-admin builtin commands succeed if settings are provided as argument\", \"directory: django-admin can't execute user commands unless settings are provided\", \"directory: startapp creates the correct directory\", \"directory: startapp creates the correct directory with a custom template\", \"Runs without error and emits settings diff.\", \"test_custom_default (admin_scripts.tests.DiffSettings)\", \"--output=unified emits settings diff in unified mode.\", \"Options passed before settings are correctly handled.\", \"Options are correctly handled when they are passed before and after\", \"Options passed after settings are correctly handled.\", \"Short options passed after settings are correctly handled.\", \"Short options passed before settings are correctly handled.\", \"alternate: manage.py builtin commands fail with an error when no default settings provided\", \"alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"alternate: manage.py builtin commands work if settings are provided in the environment\", \"alternate: manage.py builtin commands work with settings provided as argument\", \"alternate: manage.py can't execute user commands without settings\", \"alternate: manage.py output syntax color can be deactivated with the `--no-color` option\", \"alternate: manage.py can execute user commands if settings are provided in environment\", \"alternate: manage.py can execute user commands if settings are provided as argument\", \"manage.py check does not raise errors when an app imports a base\", \"manage.py check reports an ImportError if an app's models.py\", \"manage.py check does not raise an ImportError validating a\", \"check reports an error on a nonexistent app in INSTALLED_APPS.\", \"All errors/warnings should be sorted by level and by message.\", \"test_warning_does_not_halt (admin_scripts.tests.ManageCheck)\", \"default: manage.py builtin commands succeed when default settings are appropriate\", \"default: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"default: manage.py builtin commands succeed if settings file (from argument) doesn't exist\", \"default: manage.py builtin commands succeed if settings are provided in the environment\", \"default: manage.py builtin commands succeed if settings are provided as argument\", \"default: manage.py can execute user commands when default settings are appropriate\", \"default: manage.py can execute user commands when settings are provided in environment\", \"default: manage.py can execute user commands when settings are provided as argument\", \"minimal: manage.py builtin commands fail with an error when no settings provided\", \"minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"minimal: manage.py builtin commands fail if settings are provided in the environment\", \"minimal: manage.py builtin commands fail if settings are provided as argument\", \"minimal: manage.py can't execute user commands without appropriate settings\", \"minimal: manage.py can't execute user commands, even if settings are provided in environment\", \"minimal: manage.py can't execute user commands, even if settings are provided as argument\", \"multiple: manage.py builtin commands fail with an error when no settings provided\", \"multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"multiple: manage.py can execute builtin commands if settings are provided in the environment\", \"multiple: manage.py builtin commands succeed if settings are provided as argument\", \"multiple: manage.py can't execute user commands using default settings\", \"multiple: manage.py can execute user commands if settings are provided in environment\", \"multiple: manage.py can execute user commands if settings are provided as argument\", \"fulldefault: manage.py builtin commands succeed when default settings are appropriate\", \"fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist\", \"fulldefault: manage.py builtin commands succeed if settings are provided in the environment\", \"fulldefault: manage.py builtin commands succeed if settings are provided as argument\", \"fulldefault: manage.py can execute user commands when default settings are appropriate\", \"fulldefault: manage.py can execute user commands when settings are provided in environment\", \"fulldefault: manage.py can execute user commands when settings are provided as argument\", \"test_custom_project_destination_missing (admin_scripts.tests.StartProject)\", \"Make sure the startproject management command is able to use a different project template\", \"Make sure template context variables are rendered with proper values\", \"Make sure the startproject management command is able to use a different project template from a tarball\", \"test_custom_project_template_from_tarball_by_url (admin_scripts.tests.StartProject)\", \"Startproject can use a project template from a tarball and create it in a specified location\", \"test_custom_project_template_with_non_ascii_templates (admin_scripts.tests.StartProject)\", \"Make sure the startproject management command is able to render custom files\", \"test_importable_project_name (admin_scripts.tests.StartProject)\", \"Make sure the startproject management command validates a project name\", \"Make sure template context variables are not html escaped\", \"Startproject management command handles project template tar/zip balls from non-canonical urls\", \"Make sure the startproject management command creates a project\", \"Make sure the startproject management command creates a project in a specific directory\", \"Ticket 17475: Template dir passed has a trailing path separator\", \"Make sure passing the wrong kinds of arguments outputs an error and prints usage\", \"User AppCommands can execute when a single app name is provided\", \"User AppCommands raise an error when multiple app names are provided\", \"User AppCommands raise an error when no app name is provided\", \"User AppCommands can execute when some of the provided app names are invalid\", \"User BaseCommands can execute when a label is provided\", \"User BaseCommands can execute when no labels are provided\", \"User BaseCommands can execute with options when a label is provided\", \"User BaseCommands can execute with multiple options when a label is provided\", \"User BaseCommands outputs command usage when wrong option is specified\", \"test_base_run_from_argv (admin_scripts.tests.CommandTypes)\", \"test_color_style (admin_scripts.tests.CommandTypes)\", \"test_command_color (admin_scripts.tests.CommandTypes)\", \"--no-color prevent colorization of the output\", \"test_custom_stderr (admin_scripts.tests.CommandTypes)\", \"test_custom_stdout (admin_scripts.tests.CommandTypes)\", \"help is handled as a special case\", \"--help is equivalent to help\", \"help --commands shows the list of all available commands\", \"-h is handled as a short form of --help\", \"User LabelCommands can execute when a label is provided\", \"User LabelCommands are executed multiple times if multiple labels are provided\", \"User LabelCommands raise an error if no label is provided\", \"NoArg Commands can be executed\", \"NoArg Commands raise an error if an argument is provided\", \"test_run_from_argv_closes_connections (admin_scripts.tests.CommandTypes)\", \"test_run_from_argv_non_ascii_error (admin_scripts.tests.CommandTypes)\", \"--help can be used on a specific command\", \"version is handled as a special case\", \"--version is equivalent to version\"]",
  "environment_setup_commit": "3574a6d32fcd88d404b110a8d2204db1dd14a545",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.783729",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}