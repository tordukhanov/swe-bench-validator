{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9464",
  "base_commit": "810a1e2988b14f4d139b5ef328a91967f5ed7a08",
  "patch": "diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -310,7 +310,10 @@ def stringify(annotation: Any) -> str:\n         return INVALID_BUILTIN_CLASSES[annotation]\n     elif (getattr(annotation, '__module__', None) == 'builtins' and\n           hasattr(annotation, '__qualname__')):\n-        return annotation.__qualname__\n+        if hasattr(annotation, '__args__'):  # PEP 585 generic\n+            return repr(annotation)\n+        else:\n+            return annotation.__qualname__\n     elif annotation is Ellipsis:\n         return '...'\n \n",
  "test_patch": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -175,6 +175,18 @@ def test_stringify_type_hints_containers():\n     assert stringify(Generator[None, None, None]) == \"Generator[None, None, None]\"\n \n \n+@pytest.mark.skipif(sys.version_info < (3, 9), reason='python 3.9+ is required.')\n+def test_stringify_type_hints_pep_585():\n+    assert stringify(list[int]) == \"list[int]\"\n+    assert stringify(list[str]) == \"list[str]\"\n+    assert stringify(dict[str, float]) == \"dict[str, float]\"\n+    assert stringify(tuple[str, str, str]) == \"tuple[str, str, str]\"\n+    assert stringify(tuple[str, ...]) == \"tuple[str, ...]\"\n+    assert stringify(tuple[()]) == \"tuple[()]\"\n+    assert stringify(list[dict[str, tuple]]) == \"list[dict[str, tuple]]\"\n+    assert stringify(type[int]) == \"type[int]\"\n+\n+\n @pytest.mark.skipif(sys.version_info < (3, 9), reason='python 3.9+ is required.')\n def test_stringify_Annotated():\n     from typing import Annotated  # type: ignore\n",
  "problem_statement": "PEP 585 type hints not rendered correctly\n### Describe the bug\r\n\r\nIf you use a PEP 585 generic as an annotation i.e. `list[str]`, autodoc renders the annotation as `list` rather than `list[str]`, this behaviour differs from using `typing.List[str]` which renders as expected.\r\n\r\nFixing this is quite simple as far as I can tell, https://github.com/sphinx-doc/sphinx/blob/810a1e2988b14f4d139b5ef328a91967f5ed7a08/sphinx/util/typing.py#L311-L313 just needs to check if the annotation has `__args__` and if it does, return `repr(annotation)`\r\n\r\n### How to Reproduce\r\n\r\n```py\r\ndef foo() -> list[str]:\r\n\t...\r\n```\r\n\r\n```rst\r\n.. autofunction:: foo\r\n```\r\n\r\n### Expected behavior\r\n\r\nAn annotation of `list[str]` to be rendered as `list[str]`\r\n\r\n### Your project\r\n\r\nhttps://github.com/Gobot1234/sphinx-test\r\n\r\n### Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/50501825/126038116-252eee01-228a-42bb-b6ab-23bdf72968e3.png)\r\n\r\n\r\n### OS\r\n\r\nMac\r\n\r\n### Python version\r\n\r\nPython 3.9.3\r\n\r\n### Sphinx version\r\n\r\n4.1.1\r\n\r\n### Sphinx extensions\r\n\r\nautodoc\r\n\r\n### Extra tools\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_\n",
  "hints_text": "Hi @Gobot1234 , would you please upload your project to GitHub instead? Google Drive is not very convenient to read code.\nhttps://github.com/Gobot1234/sphinx-test\n@astrojuanlu Should I open a PR to fix this?\n@Gobot1234 Yes, please!",
  "created_at": "2021-07-17T17:02:31Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"tests/test_util_typing.py::test_stringify_type_hints_pep_585\"]",
  "PASS_TO_PASS": "[\"tests/test_util_typing.py::test_restify\", \"tests/test_util_typing.py::test_restify_type_hints_containers\", \"tests/test_util_typing.py::test_restify_type_hints_Callable\", \"tests/test_util_typing.py::test_restify_type_hints_Union\", \"tests/test_util_typing.py::test_restify_type_hints_typevars\", \"tests/test_util_typing.py::test_restify_type_hints_custom_class\", \"tests/test_util_typing.py::test_restify_type_hints_alias\", \"tests/test_util_typing.py::test_restify_type_ForwardRef\", \"tests/test_util_typing.py::test_restify_type_Literal\", \"tests/test_util_typing.py::test_restify_broken_type_hints\", \"tests/test_util_typing.py::test_stringify\", \"tests/test_util_typing.py::test_stringify_type_hints_containers\", \"tests/test_util_typing.py::test_stringify_Annotated\", \"tests/test_util_typing.py::test_stringify_type_hints_string\", \"tests/test_util_typing.py::test_stringify_type_hints_Callable\", \"tests/test_util_typing.py::test_stringify_type_hints_Union\", \"tests/test_util_typing.py::test_stringify_type_hints_typevars\", \"tests/test_util_typing.py::test_stringify_type_hints_custom_class\", \"tests/test_util_typing.py::test_stringify_type_hints_alias\", \"tests/test_util_typing.py::test_stringify_type_Literal\", \"tests/test_util_typing.py::test_stringify_broken_type_hints\"]",
  "environment_setup_commit": "336605b8e4b14c5da9f4d872fb730dc6894edb77",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.067140",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}