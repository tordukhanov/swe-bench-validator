{
  "repo": "django/django",
  "instance_id": "django__django-12485",
  "base_commit": "a21f7b91db273a03abfb47b0580bb39e0043c99a",
  "patch": "diff --git a/django/http/multipartparser.py b/django/http/multipartparser.py\n--- a/django/http/multipartparser.py\n+++ b/django/http/multipartparser.py\n@@ -664,12 +664,12 @@ def parse_header(line):\n                 if p.count(b\"'\") == 2:\n                     has_encoding = True\n             value = p[i + 1:].strip()\n-            if has_encoding:\n-                encoding, lang, value = value.split(b\"'\")\n-                value = unquote(value.decode(), encoding=encoding.decode())\n             if len(value) >= 2 and value[:1] == value[-1:] == b'\"':\n                 value = value[1:-1]\n                 value = value.replace(b'\\\\\\\\', b'\\\\').replace(b'\\\\\"', b'\"')\n+            if has_encoding:\n+                encoding, lang, value = value.split(b\"'\")\n+                value = unquote(value.decode(), encoding=encoding.decode())\n             pdict[name] = value\n     return key, pdict\n \n",
  "test_patch": "diff --git a/tests/file_uploads/tests.py b/tests/file_uploads/tests.py\n--- a/tests/file_uploads/tests.py\n+++ b/tests/file_uploads/tests.py\n@@ -162,6 +162,48 @@ def test_unicode_name_rfc2231(self):\n         response = self.client.request(**r)\n         self.assertEqual(response.status_code, 200)\n \n+    def test_unicode_file_name_rfc2231_with_double_quotes(self):\n+        payload = client.FakePayload()\n+        payload.write('\\r\\n'.join([\n+            '--' + client.BOUNDARY,\n+            'Content-Disposition: form-data; name=\"file_unicode\"; '\n+            'filename*=\"UTF-8\\'\\'%s\"' % quote(UNICODE_FILENAME),\n+            'Content-Type: application/octet-stream',\n+            '',\n+            'You got pwnd.\\r\\n',\n+            '\\r\\n--' + client.BOUNDARY + '--\\r\\n',\n+        ]))\n+        r = {\n+            'CONTENT_LENGTH': len(payload),\n+            'CONTENT_TYPE': client.MULTIPART_CONTENT,\n+            'PATH_INFO': '/unicode_name/',\n+            'REQUEST_METHOD': 'POST',\n+            'wsgi.input': payload,\n+        }\n+        response = self.client.request(**r)\n+        self.assertEqual(response.status_code, 200)\n+\n+    def test_unicode_name_rfc2231_with_double_quotes(self):\n+        payload = client.FakePayload()\n+        payload.write('\\r\\n'.join([\n+            '--' + client.BOUNDARY,\n+            'Content-Disposition: form-data; name*=\"UTF-8\\'\\'file_unicode\"; '\n+            'filename*=\"UTF-8\\'\\'%s\"' % quote(UNICODE_FILENAME),\n+            'Content-Type: application/octet-stream',\n+            '',\n+            'You got pwnd.\\r\\n',\n+            '\\r\\n--' + client.BOUNDARY + '--\\r\\n'\n+        ]))\n+        r = {\n+            'CONTENT_LENGTH': len(payload),\n+            'CONTENT_TYPE': client.MULTIPART_CONTENT,\n+            'PATH_INFO': '/unicode_name/',\n+            'REQUEST_METHOD': 'POST',\n+            'wsgi.input': payload,\n+        }\n+        response = self.client.request(**r)\n+        self.assertEqual(response.status_code, 200)\n+\n     def test_blank_filenames(self):\n         \"\"\"\n         Receiving file upload when filename is blank (before and after\n",
  "problem_statement": "MultiPartParser support double quotes\nDescription\n\t\nAlthough the rfc2231 document does not indicate that values can be wrapped in double quotes. However, some third-party tools wrap the value in double quotation marks when wrapping HTTP requests (such as the filename of the file uploaded by PostmanCanary). This results in double quotes for the filename at the end of Django parsing.\nPostman request body:\n----------------------------677822685948106391633425\nContent-Disposition: form-data; name=\"file\"; filename=\"测试.txt\"; filename*=\"UTF-8''%E6%B5%8B%E8%AF%95.txt\"\nContent-Type: text/plain\ntest\n----------------------------677822685948106391633425--\ndjango got filename is 测试.txt\" not 测试.txt\nThis is not a bug of Django. But I suggest Django do some compatibility processing.\nCPython is also compatible with this situation.\n​https://hg.python.org/cpython/file/default/Lib/test/test_email/test_headerregistry.py\n​https://github.com/django/django/pull/12485\n",
  "hints_text": "",
  "created_at": "2020-02-21T05:43:48Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_unicode_file_name_rfc2231_with_double_quotes (file_uploads.tests.FileUploadTests)\", \"test_unicode_name_rfc2231_with_double_quotes (file_uploads.tests.FileUploadTests)\"]",
  "PASS_TO_PASS": "[\"test_not_a_directory (file_uploads.tests.DirectoryCreationTests)\", \"test_bad_type_content_length (file_uploads.tests.MultiParserTests)\", \"test_empty_upload_handlers (file_uploads.tests.MultiParserTests)\", \"test_invalid_content_type (file_uploads.tests.MultiParserTests)\", \"test_negative_content_length (file_uploads.tests.MultiParserTests)\", \"test_rfc2231_parsing (file_uploads.tests.MultiParserTests)\", \"test_rfc2231_wrong_title (file_uploads.tests.MultiParserTests)\", \"test_base64_upload (file_uploads.tests.FileUploadTests)\", \"test_big_base64_newlines_upload (file_uploads.tests.FileUploadTests)\", \"test_big_base64_upload (file_uploads.tests.FileUploadTests)\", \"test_blank_filenames (file_uploads.tests.FileUploadTests)\", \"test_broken_custom_upload_handler (file_uploads.tests.FileUploadTests)\", \"Uploaded files may have content type parameters available.\", \"test_custom_upload_handler (file_uploads.tests.FileUploadTests)\", \"Uploaded file names should be sanitized before ever reaching the view.\", \"test_empty_multipart_handled_gracefully (file_uploads.tests.FileUploadTests)\", \"test_file_content (file_uploads.tests.FileUploadTests)\", \"test_file_error_blocking (file_uploads.tests.FileUploadTests)\", \"test_filename_case_preservation (file_uploads.tests.FileUploadTests)\", \"File names over 256 characters (dangerous on some platforms) get fixed up.\", \"test_fileupload_getlist (file_uploads.tests.FileUploadTests)\", \"test_fileuploads_closed_at_request_end (file_uploads.tests.FileUploadTests)\", \"test_large_upload (file_uploads.tests.FileUploadTests)\", \"test_no_parsing_triggered_by_fd_closing (file_uploads.tests.FileUploadTests)\", \"test_simple_upload (file_uploads.tests.FileUploadTests)\", \"test_truncated_multipart_handled_gracefully (file_uploads.tests.FileUploadTests)\", \"test_unicode_file_name (file_uploads.tests.FileUploadTests)\", \"test_unicode_file_name_rfc2231 (file_uploads.tests.FileUploadTests)\", \"test_unicode_name_rfc2231 (file_uploads.tests.FileUploadTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.627009",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}