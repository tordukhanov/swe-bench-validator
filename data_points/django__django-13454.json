{
  "repo": "django/django",
  "instance_id": "django__django-13454",
  "base_commit": "01974d7f7549b2dca2a729c3c1a1ea7d4585eb3a",
  "patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -277,6 +277,7 @@ class GenericRelation(ForeignObject):\n \n     # Field flags\n     auto_created = False\n+    empty_strings_allowed = False\n \n     many_to_many = False\n     many_to_one = False\n@@ -295,6 +296,9 @@ def __init__(self, to, object_id_field='object_id', content_type_field='content_\n             limit_choices_to=limit_choices_to,\n         )\n \n+        # Reverse relations are always nullable (Django can't enforce that a\n+        # foreign key on the related model points to this model).\n+        kwargs['null'] = True\n         kwargs['blank'] = True\n         kwargs['on_delete'] = models.CASCADE\n         kwargs['editable'] = False\n",
  "test_patch": "diff --git a/tests/admin_filters/tests.py b/tests/admin_filters/tests.py\n--- a/tests/admin_filters/tests.py\n+++ b/tests/admin_filters/tests.py\n@@ -1535,6 +1535,32 @@ class UserAdminReverseRelationship(UserAdmin):\n                 queryset = changelist.get_queryset(request)\n                 self.assertCountEqual(queryset, expected_result)\n \n+    def test_emptylistfieldfilter_genericrelation(self):\n+        class BookmarkGenericRelation(ModelAdmin):\n+            list_filter = (\n+                ('tags', EmptyFieldListFilter),\n+            )\n+\n+        modeladmin = BookmarkGenericRelation(Bookmark, site)\n+\n+        django_bookmark = Bookmark.objects.create(url='https://www.djangoproject.com/')\n+        python_bookmark = Bookmark.objects.create(url='https://www.python.org/')\n+        none_tags = Bookmark.objects.create(url='https://www.kernel.org/')\n+        TaggedItem.objects.create(content_object=django_bookmark, tag='python')\n+        TaggedItem.objects.create(content_object=python_bookmark, tag='python')\n+\n+        tests = [\n+            ({'tags__isempty': '1'}, [none_tags]),\n+            ({'tags__isempty': '0'}, [django_bookmark, python_bookmark]),\n+        ]\n+        for query_string, expected_result in tests:\n+            with self.subTest(query_string=query_string):\n+                request = self.request_factory.get('/', query_string)\n+                request.user = self.alfred\n+                changelist = modeladmin.get_changelist_instance(request)\n+                queryset = changelist.get_queryset(request)\n+                self.assertCountEqual(queryset, expected_result)\n+\n     def test_emptylistfieldfilter_choices(self):\n         modeladmin = BookAdminWithEmptyFieldListFilter(Book, site)\n         request = self.request_factory.get('/')\n",
  "problem_statement": "Using EmptyFieldListFilter with GenericForeignKey and GenericRelation crashes.\nDescription\n\t\nI have a GenericForeignKey in my model:\ncontent_type_resource_contract = models.ForeignKey(\n\tContentType,\n\ton_delete=models.CASCADE,\n\tblank=True,\n\tnull=True,\n)\nresource_contract_id = models.PositiveIntegerField(blank=True, null=True)\nresource_contract = GenericForeignKey('content_type_resource', 'resource_contract_id')\nand I want to use the new admin.EmptyFieldListFilter in my model admin:\nclass myAdmin(admin.ModelAdmin):\n\tlist_filter = (('resource_contract', admin.EmptyFieldListFilter),)\nBut when I try to run it I get a \"'GenericForeignKey' object has no attribute 'empty_strings_allowed'\". It will work fine if I use the resource_contract_id field. Would it make sense to extend the GenericForeignKey to use those empty_strings_allowed attributes from fields that are used in this generic relation?\n",
  "hints_text": "Thanks for the report!\nAfter reconsideration I think a GenericForeignKey is out of scope for the original feature, see #28991. Moreover according to docs: Due to the way GenericForeignKey is implemented, you cannot use such fields directly with filters (filter() and exclude(), for example) via the database API. Because a GenericForeignKey isnâ€™t a normal field object, these examples will not work: ... so I would add a note to EmptyFieldListFilter that it's not supported. I've also found that it crashes with GenericRelation but we can fix it easily.",
  "created_at": "2020-09-24T08:08:30Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_emptylistfieldfilter_genericrelation (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter_invalid_lookup_parameters (admin_filters.tests.ListFiltersTests)\"]",
  "PASS_TO_PASS": "[\"test_allvaluesfieldlistfilter (admin_filters.tests.ListFiltersTests)\", \"test_allvaluesfieldlistfilter_custom_qs (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter_choices (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter_nullbooleanfield (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter_tuple (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter_tuple_choices (admin_filters.tests.ListFiltersTests)\", \"test_choicesfieldlistfilter_has_none_choice (admin_filters.tests.ListFiltersTests)\", \"test_datefieldlistfilter (admin_filters.tests.ListFiltersTests)\", \"test_datefieldlistfilter_with_time_zone_support (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter_choices (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter_non_empty_field (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter_reverse_relationships (admin_filters.tests.ListFiltersTests)\", \"Filtering by an invalid value.\", \"test_fieldlistfilter_underscorelookup_tuple (admin_filters.tests.ListFiltersTests)\", \"test_filter_with_failing_queryset (admin_filters.tests.ListFiltersTests)\", \"test_fk_with_to_field (admin_filters.tests.ListFiltersTests)\", \"test_list_filter_queryset_filtered_by_default (admin_filters.tests.ListFiltersTests)\", \"test_listfilter_genericrelation (admin_filters.tests.ListFiltersTests)\", \"test_listfilter_without_title (admin_filters.tests.ListFiltersTests)\", \"test_lookup_with_dynamic_value (admin_filters.tests.ListFiltersTests)\", \"test_lookup_with_non_string_value (admin_filters.tests.ListFiltersTests)\", \"test_lookup_with_non_string_value_underscored (admin_filters.tests.ListFiltersTests)\", \"test_parameter_ends_with__in__or__isnull (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_foreignkey (admin_filters.tests.ListFiltersTests)\", \"RelatedFieldListFilter ordering respects Model.ordering.\", \"RelatedFieldListFilter ordering respects ModelAdmin.ordering.\", \"test_relatedfieldlistfilter_foreignkey_ordering_reverse (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_manytomany (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_reverse_relationships (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_reverse_relationships_default_ordering (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_foreignkey (admin_filters.tests.ListFiltersTests)\", \"RelatedOnlyFieldListFilter ordering respects Meta.ordering.\", \"RelatedOnlyFieldListFilter ordering respects ModelAdmin.ordering.\", \"test_relatedonlyfieldlistfilter_foreignkey_reverse_relationships (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_manytomany (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_manytomany_reverse_relationships (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_underscorelookup_foreignkey (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter_with_none_returning_lookups (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter_with_queryset_based_lookups (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter_without_parameter (admin_filters.tests.ListFiltersTests)\", \"test_two_characters_long_field (admin_filters.tests.ListFiltersTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.658443",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}