{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12834",
  "base_commit": "55a98ab7e3b10966f6d00c3562f3a99896797964",
  "patch": "diff --git a/sklearn/ensemble/forest.py b/sklearn/ensemble/forest.py\n--- a/sklearn/ensemble/forest.py\n+++ b/sklearn/ensemble/forest.py\n@@ -547,7 +547,10 @@ def predict(self, X):\n \n         else:\n             n_samples = proba[0].shape[0]\n-            predictions = np.zeros((n_samples, self.n_outputs_))\n+            # all dtypes should be the same, so just take the first\n+            class_type = self.classes_[0].dtype\n+            predictions = np.empty((n_samples, self.n_outputs_),\n+                                   dtype=class_type)\n \n             for k in range(self.n_outputs_):\n                 predictions[:, k] = self.classes_[k].take(np.argmax(proba[k],\n",
  "test_patch": "diff --git a/sklearn/ensemble/tests/test_forest.py b/sklearn/ensemble/tests/test_forest.py\n--- a/sklearn/ensemble/tests/test_forest.py\n+++ b/sklearn/ensemble/tests/test_forest.py\n@@ -532,14 +532,14 @@ def check_multioutput(name):\n     if name in FOREST_CLASSIFIERS:\n         with np.errstate(divide=\"ignore\"):\n             proba = est.predict_proba(X_test)\n-            assert_equal(len(proba), 2)\n-            assert_equal(proba[0].shape, (4, 2))\n-            assert_equal(proba[1].shape, (4, 4))\n+            assert len(proba) == 2\n+            assert proba[0].shape == (4, 2)\n+            assert proba[1].shape == (4, 4)\n \n             log_proba = est.predict_log_proba(X_test)\n-            assert_equal(len(log_proba), 2)\n-            assert_equal(log_proba[0].shape, (4, 2))\n-            assert_equal(log_proba[1].shape, (4, 4))\n+            assert len(log_proba) == 2\n+            assert log_proba[0].shape == (4, 2)\n+            assert log_proba[1].shape == (4, 4)\n \n \n @pytest.mark.filterwarnings('ignore:The default value of n_estimators')\n@@ -548,6 +548,37 @@ def test_multioutput(name):\n     check_multioutput(name)\n \n \n+@pytest.mark.filterwarnings('ignore:The default value of n_estimators')\n+@pytest.mark.parametrize('name', FOREST_CLASSIFIERS)\n+def test_multioutput_string(name):\n+    # Check estimators on multi-output problems with string outputs.\n+\n+    X_train = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1], [-2, 1],\n+               [-1, 1], [-1, 2], [2, -1], [1, -1], [1, -2]]\n+    y_train = [[\"red\", \"blue\"], [\"red\", \"blue\"], [\"red\", \"blue\"],\n+               [\"green\", \"green\"], [\"green\", \"green\"], [\"green\", \"green\"],\n+               [\"red\", \"purple\"], [\"red\", \"purple\"], [\"red\", \"purple\"],\n+               [\"green\", \"yellow\"], [\"green\", \"yellow\"], [\"green\", \"yellow\"]]\n+    X_test = [[-1, -1], [1, 1], [-1, 1], [1, -1]]\n+    y_test = [[\"red\", \"blue\"], [\"green\", \"green\"],\n+              [\"red\", \"purple\"], [\"green\", \"yellow\"]]\n+\n+    est = FOREST_ESTIMATORS[name](random_state=0, bootstrap=False)\n+    y_pred = est.fit(X_train, y_train).predict(X_test)\n+    assert_array_equal(y_pred, y_test)\n+\n+    with np.errstate(divide=\"ignore\"):\n+        proba = est.predict_proba(X_test)\n+        assert len(proba) == 2\n+        assert proba[0].shape == (4, 2)\n+        assert proba[1].shape == (4, 4)\n+\n+        log_proba = est.predict_log_proba(X_test)\n+        assert len(log_proba) == 2\n+        assert log_proba[0].shape == (4, 2)\n+        assert log_proba[1].shape == (4, 4)\n+\n+\n def check_classes_shape(name):\n     # Test that n_classes_ and classes_ have proper shape.\n     ForestClassifier = FOREST_CLASSIFIERS[name]\n",
  "problem_statement": "`predict` fails for multioutput ensemble models with non-numeric DVs\n#### Description\r\n<!-- Example: Joblib Error thrown when calling fit on LatentDirichletAllocation with evaluate_every > 0-->\r\nMultioutput forest models assume that the dependent variables are numeric. Passing string DVs returns the following error:\r\n\r\n`ValueError: could not convert string to float:`\r\n\r\nI'm going to take a stab at submitting a fix today, but I wanted to file an issue to document the problem in case I'm not able to finish a fix.\r\n\r\n#### Steps/Code to Reproduce\r\nI wrote a test based on `ensemble/tests/test_forest:test_multioutput` which currently fails:\r\n\r\n```\r\ndef check_multioutput_string(name):\r\n    # Check estimators on multi-output problems with string outputs.\r\n\r\n    X_train = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1], [-2, 1],\r\n               [-1, 1], [-1, 2], [2, -1], [1, -1], [1, -2]]\r\n    y_train = [[\"red\", \"blue\"], [\"red\", \"blue\"], [\"red\", \"blue\"], [\"green\", \"green\"],\r\n               [\"green\", \"green\"], [\"green\", \"green\"], [\"red\", \"purple\"],\r\n               [\"red\", \"purple\"], [\"red\", \"purple\"], [\"green\", \"yellow\"],\r\n               [\"green\", \"yellow\"], [\"green\", \"yellow\"]]\r\n    X_test = [[-1, -1], [1, 1], [-1, 1], [1, -1]]\r\n    y_test = [[\"red\", \"blue\"], [\"green\", \"green\"], [\"red\", \"purple\"], [\"green\", \"yellow\"]]\r\n\r\n    est = FOREST_ESTIMATORS[name](random_state=0, bootstrap=False)\r\n    y_pred = est.fit(X_train, y_train).predict(X_test)\r\n    assert_array_almost_equal(y_pred, y_test)\r\n\r\n    if name in FOREST_CLASSIFIERS:\r\n        with np.errstate(divide=\"ignore\"):\r\n            proba = est.predict_proba(X_test)\r\n            assert_equal(len(proba), 2)\r\n            assert_equal(proba[0].shape, (4, 2))\r\n            assert_equal(proba[1].shape, (4, 4))\r\n\r\n            log_proba = est.predict_log_proba(X_test)\r\n            assert_equal(len(log_proba), 2)\r\n            assert_equal(log_proba[0].shape, (4, 2))\r\n            assert_equal(log_proba[1].shape, (4, 4))\r\n\r\n\r\n@pytest.mark.filterwarnings('ignore:The default value of n_estimators')\r\n@pytest.mark.parametrize('name', FOREST_CLASSIFIERS_REGRESSORS)\r\ndef test_multioutput_string(name):\r\n    check_multioutput_string(name)\r\n```\r\n\r\n#### Expected Results\r\nNo error is thrown, can run `predict` for all ensemble multioutput models\r\n<!-- Example: No error is thrown. Please paste or describe the expected results.-->\r\n\r\n#### Actual Results\r\n<!-- Please paste or specifically describe the actual output or traceback. -->\r\n`ValueError: could not convert string to float: <DV class>`\r\n\r\n#### Versions\r\nI replicated this error using the current master branch of sklearn (0.21.dev0).\r\n<!--\r\nPlease run the following snippet and paste the output below.\r\nFor scikit-learn >= 0.20:\r\nimport sklearn; sklearn.show_versions()\r\nFor scikit-learn < 0.20:\r\nimport platform; print(platform.platform())\r\nimport sys; print(\"Python\", sys.version)\r\nimport numpy; print(\"NumPy\", numpy.__version__)\r\nimport scipy; print(\"SciPy\", scipy.__version__)\r\nimport sklearn; print(\"Scikit-Learn\", sklearn.__version__)\r\n-->\r\n\r\n\r\n<!-- Thanks for contributing! -->\r\n\n",
  "hints_text": "Is numeric-only an intentional limitation in this case? There are lines that explicitly cast to double (https://github.com/scikit-learn/scikit-learn/blob/e73acef80de4159722b11e3cd6c20920382b9728/sklearn/ensemble/forest.py#L279). It's not an issue for single-output models, though.\nSorry what do you mean by \"DV\"?\nYou're using the regressors:\r\nFOREST_CLASSIFIERS_REGRESSORS\r\n\r\nThey are not supposed to work with classes, you want the classifiers.\r\n\r\nCan you please provide a minimum self-contained example?\nAh, sorry. \"DV\" is \"dependent variable\". \r\n\r\nHere's an example:\r\n```\r\nX_train = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1], [-2, 1],\r\n               [-1, 1], [-1, 2], [2, -1], [1, -1], [1, -2]]\r\ny_train = [[\"red\", \"blue\"], [\"red\", \"blue\"], [\"red\", \"blue\"], [\"green\", \"green\"],\r\n               [\"green\", \"green\"], [\"green\", \"green\"], [\"red\", \"purple\"],\r\n               [\"red\", \"purple\"], [\"red\", \"purple\"], [\"green\", \"yellow\"],\r\n               [\"green\", \"yellow\"], [\"green\", \"yellow\"]]\r\nX_test = [[-1, -1], [1, 1], [-1, 1], [1, -1]]\r\nest = RandomForestClassifier()\r\nest.fit(X_train, y_train)\r\ny_pred = est.predict(X_test)\r\n```\r\n\r\nReturns:\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-5-a3b5313a012b> in <module>\r\n----> 1 y_pred = est.predict(X_test)\r\n\r\n~/repos/forks/scikit-learn/sklearn/ensemble/forest.py in predict(self, X)\r\n    553                 predictions[:, k] = self.classes_[k].take(np.argmax(proba[k],\r\n    554                                                                     axis=1),\r\n--> 555                                                           axis=0)\r\n    556\r\n    557             return predictions\r\n\r\nValueError: could not convert string to float: 'green'\r\n```\nThanks, this indeed looks like bug.\r\n\r\nThe multi-output multi-class support is fairly untested tbh and I'm not a big fan of it (we don't implement ``score`` for that case!).\r\nSo even if we fix this it's likely you'll run into more issues. I have been arguing for removing this feature for a while (which is probably not what you wanted to hear ;)\nFor what it's worth, I think this specific issue may be resolved with a one-line fix. For my use case, having `predict` and `predict_proba` work is all I need.\nFeel free to submit a PR if you like",
  "created_at": "2018-12-19T22:36:36Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/ensemble/tests/test_forest.py::test_multioutput_string[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput_string[RandomForestClassifier]\"]",
  "PASS_TO_PASS": "[\"sklearn/ensemble/tests/test_forest.py::test_classification_toy[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_classification_toy[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_iris[gini-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_iris[gini-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_iris[entropy-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_iris[entropy-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_boston[mse-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_boston[mse-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_boston[mae-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_boston[mae-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_boston[friedman_mse-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_boston[friedman_mse-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_regressor_attributes[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_regressor_attributes[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_probability[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_probability[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesClassifier-gini-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesClassifier-gini-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesClassifier-entropy-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesClassifier-entropy-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestClassifier-gini-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestClassifier-gini-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestClassifier-entropy-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestClassifier-entropy-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-mse-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-mse-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-friedman_mse-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-friedman_mse-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-mae-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-mae-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-mse-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-mse-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-friedman_mse-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-friedman_mse-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-mae-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-mae-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances_asymptotic\", \"sklearn/ensemble/tests/test_forest.py::test_unfitted_feature_importances[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_unfitted_feature_importances[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_unfitted_feature_importances[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_unfitted_feature_importances[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_unfitted_feature_importances[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_classifiers[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_classifiers[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_regressors[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_regressors[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_raise_error[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_raise_error[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_raise_error[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_raise_error[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_oob_score_raise_error[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_gridsearch[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_gridsearch[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_parallel[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_parallel[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_parallel[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_parallel[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_pickle[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_pickle[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_pickle[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_pickle[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_classes_shape[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_classes_shape[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_random_trees_dense_type\", \"sklearn/ensemble/tests/test_forest.py::test_random_trees_dense_equal\", \"sklearn/ensemble/tests/test_forest.py::test_random_hasher\", \"sklearn/ensemble/tests/test_forest.py::test_random_hasher_sparse_data\", \"sklearn/ensemble/tests/test_forest.py::test_parallel_train\", \"sklearn/ensemble/tests/test_forest.py::test_distribution\", \"sklearn/ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_split[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_split[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_split[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_split[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_split[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_leaf[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_leaf[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_leaf[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_leaf[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_leaf[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_min_weight_fraction_leaf[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_weight_fraction_leaf[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_weight_fraction_leaf[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_weight_fraction_leaf[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_weight_fraction_leaf[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csr_matrix-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csr_matrix-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csr_matrix-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csr_matrix-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csr_matrix-RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csc_matrix-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csc_matrix-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csc_matrix-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csc_matrix-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csc_matrix-RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[coo_matrix-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[coo_matrix-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[coo_matrix-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[coo_matrix-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[coo_matrix-RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float64-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float64-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float64-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float64-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float32-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float32-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float32-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float32-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_1d_input[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_1d_input[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_1d_input[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_1d_input[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_1d_input[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weights[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weights[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weight_balanced_and_bootstrap_multi_output[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weight_balanced_and_bootstrap_multi_output[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weight_errors[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weight_errors[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_clear[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_clear[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_clear[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_clear[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_clear[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_smaller_n_estimators[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_smaller_n_estimators[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_smaller_n_estimators[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_smaller_n_estimators[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_smaller_n_estimators[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_equal_n_estimators[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_equal_n_estimators[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_equal_n_estimators[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_equal_n_estimators[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_equal_n_estimators[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_oob[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_oob[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_oob[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_oob[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_dtype_convert\", \"sklearn/ensemble/tests/test_forest.py::test_decision_path[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_decision_path[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_decision_path[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_decision_path[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_impurity_split\", \"sklearn/ensemble/tests/test_forest.py::test_min_impurity_decrease\", \"sklearn/ensemble/tests/test_forest.py::test_nestimators_future_warning[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_nestimators_future_warning[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_nestimators_future_warning[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_nestimators_future_warning[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_nestimators_future_warning[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_backend_respected\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.968585",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}