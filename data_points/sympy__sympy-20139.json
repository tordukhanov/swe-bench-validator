{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-20139",
  "base_commit": "3449cecacb1938d47ce2eb628a812e4ecf6702f1",
  "patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -42,6 +42,7 @@ def __getnewargs__(self):\n     def _hashable_content(self):\n         return (self.name,)\n \n+\n def _filter_assumptions(kwargs):\n     \"\"\"Split the given dict into assumptions and non-assumptions.\n     Keys are taken as assumptions if they correspond to an\ndiff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -6,6 +6,7 @@\n from sympy.core import S, Symbol, Integer, Basic, Expr, Mul, Add\n from sympy.core.decorators import call_highest_priority\n from sympy.core.compatibility import SYMPY_INTS, default_sort_key\n+from sympy.core.symbol import Str\n from sympy.core.sympify import SympifyError, _sympify\n from sympy.functions import conjugate, adjoint\n from sympy.functions.special.tensor_functions import KroneckerDelta\n@@ -772,7 +773,7 @@ def __new__(cls, name, n, m):\n         cls._check_dim(n)\n \n         if isinstance(name, str):\n-            name = Symbol(name)\n+            name = Str(name)\n         obj = Basic.__new__(cls, name, n, m)\n         return obj\n \ndiff --git a/sympy/printing/dot.py b/sympy/printing/dot.py\n--- a/sympy/printing/dot.py\n+++ b/sympy/printing/dot.py\n@@ -35,6 +35,7 @@ def purestr(x, with_args=False):\n \n     >>> from sympy import Float, Symbol, MatrixSymbol\n     >>> from sympy import Integer # noqa: F401\n+    >>> from sympy.core.symbol import Str # noqa: F401\n     >>> from sympy.printing.dot import purestr\n \n     Applying ``purestr`` for basic symbolic object:\n@@ -51,7 +52,7 @@ def purestr(x, with_args=False):\n     For matrix symbol:\n     >>> code = purestr(MatrixSymbol('x', 2, 2))\n     >>> code\n-    \"MatrixSymbol(Symbol('x'), Integer(2), Integer(2))\"\n+    \"MatrixSymbol(Str('x'), Integer(2), Integer(2))\"\n     >>> eval(code) == MatrixSymbol('x', 2, 2)\n     True\n \n@@ -59,8 +60,8 @@ def purestr(x, with_args=False):\n     >>> purestr(Float(2), with_args=True)\n     (\"Float('2.0', precision=53)\", ())\n     >>> purestr(MatrixSymbol('x', 2, 2), with_args=True)\n-    (\"MatrixSymbol(Symbol('x'), Integer(2), Integer(2))\",\n-     (\"Symbol('x')\", 'Integer(2)', 'Integer(2)'))\n+    (\"MatrixSymbol(Str('x'), Integer(2), Integer(2))\",\n+     (\"Str('x')\", 'Integer(2)', 'Integer(2)'))\n     \"\"\"\n     sargs = ()\n     if not isinstance(x, Basic):\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_dot.py b/sympy/printing/tests/test_dot.py\n--- a/sympy/printing/tests/test_dot.py\n+++ b/sympy/printing/tests/test_dot.py\n@@ -101,8 +101,8 @@ def test_Matrix_and_non_basics():\n # Nodes #\n #########\n \n-\"MatrixSymbol(Symbol('X'), Symbol('n'), Symbol('n'))_()\" [\"color\"=\"black\", \"label\"=\"MatrixSymbol\", \"shape\"=\"ellipse\"];\n-\"Symbol('X')_(0,)\" [\"color\"=\"black\", \"label\"=\"X\", \"shape\"=\"ellipse\"];\n+\"MatrixSymbol(Str('X'), Symbol('n'), Symbol('n'))_()\" [\"color\"=\"black\", \"label\"=\"MatrixSymbol\", \"shape\"=\"ellipse\"];\n+\"Str('X')_(0,)\" [\"color\"=\"blue\", \"label\"=\"X\", \"shape\"=\"ellipse\"];\n \"Symbol('n')_(1,)\" [\"color\"=\"black\", \"label\"=\"n\", \"shape\"=\"ellipse\"];\n \"Symbol('n')_(2,)\" [\"color\"=\"black\", \"label\"=\"n\", \"shape\"=\"ellipse\"];\n \n@@ -110,9 +110,9 @@ def test_Matrix_and_non_basics():\n # Edges #\n #########\n \n-\"MatrixSymbol(Symbol('X'), Symbol('n'), Symbol('n'))_()\" -> \"Symbol('X')_(0,)\";\n-\"MatrixSymbol(Symbol('X'), Symbol('n'), Symbol('n'))_()\" -> \"Symbol('n')_(1,)\";\n-\"MatrixSymbol(Symbol('X'), Symbol('n'), Symbol('n'))_()\" -> \"Symbol('n')_(2,)\";\n+\"MatrixSymbol(Str('X'), Symbol('n'), Symbol('n'))_()\" -> \"Str('X')_(0,)\";\n+\"MatrixSymbol(Str('X'), Symbol('n'), Symbol('n'))_()\" -> \"Symbol('n')_(1,)\";\n+\"MatrixSymbol(Str('X'), Symbol('n'), Symbol('n'))_()\" -> \"Symbol('n')_(2,)\";\n }\"\"\"\n \n \ndiff --git a/sympy/printing/tests/test_repr.py b/sympy/printing/tests/test_repr.py\n--- a/sympy/printing/tests/test_repr.py\n+++ b/sympy/printing/tests/test_repr.py\n@@ -6,6 +6,7 @@\n     sqrt, root, AlgebraicNumber, Symbol, Dummy, Wild, MatrixSymbol)\n from sympy.combinatorics import Cycle, Permutation\n from sympy.core.compatibility import exec_\n+from sympy.core.symbol import Str\n from sympy.geometry import Point, Ellipse\n from sympy.printing import srepr\n from sympy.polys import ring, field, ZZ, QQ, lex, grlex, Poly\n@@ -16,7 +17,7 @@\n \n # eval(srepr(expr)) == expr has to succeed in the right environment. The right\n # environment is the scope of \"from sympy import *\" for most cases.\n-ENV = {}  # type: Dict[str, Any]\n+ENV = {\"Str\": Str}  # type: Dict[str, Any]\n exec_(\"from sympy import *\", ENV)\n \n \n@@ -295,9 +296,9 @@ def test_matrix_expressions():\n     n = symbols('n', integer=True)\n     A = MatrixSymbol(\"A\", n, n)\n     B = MatrixSymbol(\"B\", n, n)\n-    sT(A, \"MatrixSymbol(Symbol('A'), Symbol('n', integer=True), Symbol('n', integer=True))\")\n-    sT(A*B, \"MatMul(MatrixSymbol(Symbol('A'), Symbol('n', integer=True), Symbol('n', integer=True)), MatrixSymbol(Symbol('B'), Symbol('n', integer=True), Symbol('n', integer=True)))\")\n-    sT(A + B, \"MatAdd(MatrixSymbol(Symbol('A'), Symbol('n', integer=True), Symbol('n', integer=True)), MatrixSymbol(Symbol('B'), Symbol('n', integer=True), Symbol('n', integer=True)))\")\n+    sT(A, \"MatrixSymbol(Str('A'), Symbol('n', integer=True), Symbol('n', integer=True))\")\n+    sT(A*B, \"MatMul(MatrixSymbol(Str('A'), Symbol('n', integer=True), Symbol('n', integer=True)), MatrixSymbol(Str('B'), Symbol('n', integer=True), Symbol('n', integer=True)))\")\n+    sT(A + B, \"MatAdd(MatrixSymbol(Str('A'), Symbol('n', integer=True), Symbol('n', integer=True)), MatrixSymbol(Str('B'), Symbol('n', integer=True), Symbol('n', integer=True)))\")\n \n \n def test_Cycle():\ndiff --git a/sympy/printing/tests/test_tree.py b/sympy/printing/tests/test_tree.py\n--- a/sympy/printing/tests/test_tree.py\n+++ b/sympy/printing/tests/test_tree.py\n@@ -184,11 +184,11 @@ def test_print_tree_MatAdd_noassumptions():\n     test_str = \\\n \"\"\"MatAdd: A + B\n +-MatrixSymbol: A\n-| +-Symbol: A\n+| +-Str: A\n | +-Integer: 3\n | +-Integer: 3\n +-MatrixSymbol: B\n-  +-Symbol: B\n+  +-Str: B\n   +-Integer: 3\n   +-Integer: 3\n \"\"\"\ndiff --git a/sympy/simplify/tests/test_powsimp.py b/sympy/simplify/tests/test_powsimp.py\n--- a/sympy/simplify/tests/test_powsimp.py\n+++ b/sympy/simplify/tests/test_powsimp.py\n@@ -2,6 +2,7 @@\n     symbols, powsimp, MatrixSymbol, sqrt, pi, Mul, gamma, Function,\n     S, I, exp, simplify, sin, E, log, hyper, Symbol, Dummy, powdenest, root,\n     Rational, oo, signsimp)\n+from sympy.core.symbol import Str\n \n from sympy.abc import x, y, z, a, b\n \n@@ -227,7 +228,7 @@ def test_issue_9324_powsimp_on_matrix_symbol():\n     M = MatrixSymbol('M', 10, 10)\n     expr = powsimp(M, deep=True)\n     assert expr == M\n-    assert expr.args[0] == Symbol('M')\n+    assert expr.args[0] == Str('M')\n \n \n def test_issue_6367():\ndiff --git a/sympy/unify/tests/test_sympy.py b/sympy/unify/tests/test_sympy.py\n--- a/sympy/unify/tests/test_sympy.py\n+++ b/sympy/unify/tests/test_sympy.py\n@@ -1,4 +1,5 @@\n from sympy import Add, Basic, symbols, Symbol, And\n+from sympy.core.symbol import Str\n from sympy.unify.core import Compound, Variable\n from sympy.unify.usympy import (deconstruct, construct, unify, is_associative,\n         is_commutative)\n@@ -100,8 +101,8 @@ def test_matrix():\n     X = MatrixSymbol('X', n, n)\n     Y = MatrixSymbol('Y', 2, 2)\n     Z = MatrixSymbol('Z', 2, 3)\n-    assert list(unify(X, Y, {}, variables=[n, Symbol('X')])) == [{Symbol('X'): Symbol('Y'), n: 2}]\n-    assert list(unify(X, Z, {}, variables=[n, Symbol('X')])) == []\n+    assert list(unify(X, Y, {}, variables=[n, Str('X')])) == [{Str('X'): Str('Y'), n: 2}]\n+    assert list(unify(X, Z, {}, variables=[n, Str('X')])) == []\n \n def test_non_frankenAdds():\n     # the is_commutative property used to fail because of Basic.__new__\n",
  "problem_statement": "Use Str instead of Symbol for name of MatrixSymbol\n<!-- Your title above should be a short description of what\r\nwas changed. Do not include the issue number in the title. -->\r\n\r\n#### References to other Issues or PRs\r\n<!-- If this pull request fixes an issue, write \"Fixes #NNNN\" in that exact\r\nformat, e.g. \"Fixes #1234\" (see\r\nhttps://tinyurl.com/auto-closing for more information). Also, please\r\nwrite a comment on that issue linking back to this pull request once it is\r\nopen. -->\r\n\r\n\r\n#### Brief description of what is fixed or changed\r\n\r\n\r\n#### Other comments\r\n\r\n\r\n#### Release Notes\r\n\r\n<!-- Write the release notes for this release below. See\r\nhttps://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information\r\non how to write release notes. The bot will check your release notes\r\nautomatically to see if they are formatted correctly. -->\r\n\r\n<!-- BEGIN RELEASE NOTES -->\r\n- matrices\r\n  - `MatrixSymbol` will store Str in its first argument.\r\n<!-- END RELEASE NOTES -->\n",
  "hints_text": ":white_check_mark:\n\nHi, I am the [SymPy bot](https://github.com/sympy/sympy-bot) (v160). I'm here to help you write a release notes entry. Please read the [guide on how to write release notes](https://github.com/sympy/sympy/wiki/Writing-Release-Notes).\n\n\n\nYour release notes are in good order.\n\nHere is what the release notes will look like:\n* matrices\n  - `MatrixSymbol` will store Str in its first argument. ([#19715](https://github.com/sympy/sympy/pull/19715) by [@sylee957](https://github.com/sylee957))\n\nThis will be added to https://github.com/sympy/sympy/wiki/Release-Notes-for-1.7.\n\nNote: This comment will be updated with the latest check if you edit the pull request. You need to reload the page to see it. <details><summary>Click here to see the pull request description that was parsed.</summary>\n\n    <!-- Your title above should be a short description of what\r\n    was changed. Do not include the issue number in the title. -->\r\n\r\n    #### References to other Issues or PRs\r\n    <!-- If this pull request fixes an issue, write \"Fixes #NNNN\" in that exact\r\n    format, e.g. \"Fixes #1234\" (see\r\n    https://tinyurl.com/auto-closing for more information). Also, please\r\n    write a comment on that issue linking back to this pull request once it is\r\n    open. -->\r\n\r\n\r\n    #### Brief description of what is fixed or changed\r\n\r\n\r\n    #### Other comments\r\n\r\n\r\n    #### Release Notes\r\n\r\n    <!-- Write the release notes for this release below. See\r\n    https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information\r\n    on how to write release notes. The bot will check your release notes\r\n    automatically to see if they are formatted correctly. -->\r\n\r\n    <!-- BEGIN RELEASE NOTES -->\r\n    - matrices\r\n      - `MatrixSymbol` will store Str in its first argument.\r\n    <!-- END RELEASE NOTES -->\n\n</details><p>\n\nI missed the introduction of `Str`. I don't see anything in the release notes about it. \n@sylee957 Any news on this?\nThis needs progress in #19841 to resolve the failing tests",
  "created_at": "2020-09-23T19:33:08Z",
  "version": "1.7",
  "FAIL_TO_PASS": "[\"test_Matrix_and_non_basics\", \"test_matrix_expressions\", \"test_issue_9324_powsimp_on_matrix_symbol\", \"test_matrix\"]",
  "PASS_TO_PASS": "[\"test_purestr\", \"test_styleof\", \"test_attrprint\", \"test_dotnode\", \"test_dotedges\", \"test_dotprint\", \"test_dotprint_depth\", \"test_labelfunc\", \"test_printmethod\", \"test_Add\", \"test_more_than_255_args_issue_10259\", \"test_Function\", \"test_Geometry\", \"test_Singletons\", \"test_Integer\", \"test_list\", \"test_Matrix\", \"test_empty_Matrix\", \"test_Rational\", \"test_Float\", \"test_Symbol\", \"test_Symbol_two_assumptions\", \"test_Symbol_no_special_commutative_treatment\", \"test_Wild\", \"test_Dummy\", \"test_Dummy_assumption\", \"test_Dummy_from_Symbol\", \"test_tuple\", \"test_WildFunction\", \"test_settins\", \"test_Mul\", \"test_AlgebraicNumber\", \"test_PolyRing\", \"test_FracField\", \"test_PolyElement\", \"test_FracElement\", \"test_FractionField\", \"test_PolynomialRingBase\", \"test_DMP\", \"test_FiniteExtension\", \"test_ExtensionElement\", \"test_BooleanAtom\", \"test_Integers\", \"test_Naturals\", \"test_Naturals0\", \"test_Reals\", \"test_Cycle\", \"test_Permutation\", \"test_dict\", \"test_powsimp\", \"test_powsimp_negated_base\", \"test_powsimp_nc\", \"test_issue_6440\", \"test_powdenest\", \"test_powdenest_polar\", \"test_issue_5805\", \"test_issue_6367\", \"test_powsimp_polar\", \"test_issue_5728\", \"test_issue_from_PR1599\", \"test_issue_10195\", \"test_issue_15709\", \"test_issue_11981\", \"test_deconstruct\", \"test_construct\", \"test_nested\", \"test_unify\", \"test_unify_variables\", \"test_s_input\", \"test_unify_commutative\", \"test_unify_iter\", \"test_hard_match\", \"test_non_frankenAdds\", \"test_FiniteSet_commutivity\", \"test_FiniteSet_complex\", \"test_and\", \"test_Union\", \"test_is_commutative\"]",
  "environment_setup_commit": "cffd4e0f86fefd4802349a9f9b19ed70934ea354",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.136497",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}