{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-7466",
  "base_commit": "678c1a0745f1cf175c442c719906a1f13e496910",
  "patch": "diff --git a/src/_pytest/_io/terminalwriter.py b/src/_pytest/_io/terminalwriter.py\n--- a/src/_pytest/_io/terminalwriter.py\n+++ b/src/_pytest/_io/terminalwriter.py\n@@ -27,11 +27,12 @@ def should_do_markup(file: TextIO) -> bool:\n         return True\n     if os.environ.get(\"PY_COLORS\") == \"0\":\n         return False\n+    if \"NO_COLOR\" in os.environ:\n+        return False\n+    if \"FORCE_COLOR\" in os.environ:\n+        return True\n     return (\n-        hasattr(file, \"isatty\")\n-        and file.isatty()\n-        and os.environ.get(\"TERM\") != \"dumb\"\n-        and not (sys.platform.startswith(\"java\") and os._name == \"nt\")\n+        hasattr(file, \"isatty\") and file.isatty() and os.environ.get(\"TERM\") != \"dumb\"\n     )\n \n \n",
  "test_patch": "diff --git a/testing/io/test_terminalwriter.py b/testing/io/test_terminalwriter.py\n--- a/testing/io/test_terminalwriter.py\n+++ b/testing/io/test_terminalwriter.py\n@@ -154,8 +154,7 @@ def test_attr_hasmarkup() -> None:\n     assert \"\\x1b[0m\" in s\n \n \n-def test_should_do_markup_PY_COLORS_eq_1(monkeypatch: MonkeyPatch) -> None:\n-    monkeypatch.setitem(os.environ, \"PY_COLORS\", \"1\")\n+def assert_color_set():\n     file = io.StringIO()\n     tw = terminalwriter.TerminalWriter(file)\n     assert tw.hasmarkup\n@@ -166,8 +165,7 @@ def test_should_do_markup_PY_COLORS_eq_1(monkeypatch: MonkeyPatch) -> None:\n     assert \"\\x1b[0m\" in s\n \n \n-def test_should_do_markup_PY_COLORS_eq_0(monkeypatch: MonkeyPatch) -> None:\n-    monkeypatch.setitem(os.environ, \"PY_COLORS\", \"0\")\n+def assert_color_not_set():\n     f = io.StringIO()\n     f.isatty = lambda: True  # type: ignore\n     tw = terminalwriter.TerminalWriter(file=f)\n@@ -177,6 +175,34 @@ def test_should_do_markup_PY_COLORS_eq_0(monkeypatch: MonkeyPatch) -> None:\n     assert s == \"hello\\n\"\n \n \n+def test_should_do_markup_PY_COLORS_eq_1(monkeypatch: MonkeyPatch) -> None:\n+    monkeypatch.setitem(os.environ, \"PY_COLORS\", \"1\")\n+    assert_color_set()\n+\n+\n+def test_should_not_do_markup_PY_COLORS_eq_0(monkeypatch: MonkeyPatch) -> None:\n+    monkeypatch.setitem(os.environ, \"PY_COLORS\", \"0\")\n+    assert_color_not_set()\n+\n+\n+def test_should_not_do_markup_NO_COLOR(monkeypatch: MonkeyPatch) -> None:\n+    monkeypatch.setitem(os.environ, \"NO_COLOR\", \"1\")\n+    assert_color_not_set()\n+\n+\n+def test_should_do_markup_FORCE_COLOR(monkeypatch: MonkeyPatch) -> None:\n+    monkeypatch.setitem(os.environ, \"FORCE_COLOR\", \"1\")\n+    assert_color_set()\n+\n+\n+def test_should_not_do_markup_NO_COLOR_and_FORCE_COLOR(\n+    monkeypatch: MonkeyPatch,\n+) -> None:\n+    monkeypatch.setitem(os.environ, \"NO_COLOR\", \"1\")\n+    monkeypatch.setitem(os.environ, \"FORCE_COLOR\", \"1\")\n+    assert_color_not_set()\n+\n+\n class TestTerminalWriterLineWidth:\n     def test_init(self) -> None:\n         tw = terminalwriter.TerminalWriter()\n",
  "problem_statement": "Support NO_COLOR to disable colored output\n`NO_COLOR` is a [community standard environement](https://no-color.org/ ) variable.\r\n\r\nThe general behavior is:\r\n* A command line application emits colour when attached to a TTY, but no colour otherwise e.g. when attached to a pipe.\r\n* `NO_COLOR` stops the application from emitting colour even when attached to a TTY\r\n* My extension to the standard is to add `FORCE_COLOR` which forces the application to emit colour escape sequences even when not outputting to a TTY e.g. if we want to pipe into a log file with colour.\r\n\r\n_Originally posted by @jhol in https://github.com/pytest-dev/pytest/issues/7443#issuecomment-655520755_\n",
  "hints_text": "`PY_COLOR` is also pytest specific, so I think if it happens that both are set, we should give preference over `PY_COLOR` over `NO_COLOR`.\nfwiw, I think `NO_COLOR` is ~slightly flawed in that `NO_COLOR=` (empty environment variable) is treated as `NO_COLOR=1`.  this diverges from standard expected posix behaviour where an empty environment variable should be treated as absent",
  "created_at": "2020-07-08T19:54:01Z",
  "version": "5.4",
  "FAIL_TO_PASS": "[\"testing/io/test_terminalwriter.py::test_should_not_do_markup_NO_COLOR\", \"testing/io/test_terminalwriter.py::test_should_do_markup_FORCE_COLOR\", \"testing/io/test_terminalwriter.py::test_should_not_do_markup_NO_COLOR_and_FORCE_COLOR\"]",
  "PASS_TO_PASS": "[\"testing/io/test_terminalwriter.py::test_terminal_width_COLUMNS\", \"testing/io/test_terminalwriter.py::test_terminalwriter_width_bogus\", \"testing/io/test_terminalwriter.py::test_terminalwriter_computes_width\", \"testing/io/test_terminalwriter.py::test_terminalwriter_dumb_term_no_markup\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_line[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_line[stringio]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_line_unicode[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_line_unicode[stringio]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_sep_no_title[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_sep_no_title[stringio]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_sep_with_title[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_sep_with_title[stringio]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_sep_longer_than_width[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_sep_longer_than_width[stringio]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[path-red-True]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[path-red-False]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[path-green-True]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[path-green-False]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[stringio-red-True]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[stringio-red-False]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[stringio-green-True]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[stringio-green-False]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup_bad[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup_bad[stringio]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_line_write_markup[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_line_write_markup[stringio]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_attr_fullwidth[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_attr_fullwidth[stringio]\", \"testing/io/test_terminalwriter.py::test_attr_hasmarkup\", \"testing/io/test_terminalwriter.py::test_should_do_markup_PY_COLORS_eq_1\", \"testing/io/test_terminalwriter.py::test_should_not_do_markup_PY_COLORS_eq_0\", \"testing/io/test_terminalwriter.py::TestTerminalWriterLineWidth::test_init\", \"testing/io/test_terminalwriter.py::TestTerminalWriterLineWidth::test_update\", \"testing/io/test_terminalwriter.py::TestTerminalWriterLineWidth::test_update_with_newline\", \"testing/io/test_terminalwriter.py::TestTerminalWriterLineWidth::test_update_with_wide_text\", \"testing/io/test_terminalwriter.py::TestTerminalWriterLineWidth::test_composed\", \"testing/io/test_terminalwriter.py::TestTerminalWriterLineWidth::test_combining\", \"testing/io/test_terminalwriter.py::test_code_highlight[without\", \"testing/io/test_terminalwriter.py::test_code_highlight[neither\"]",
  "environment_setup_commit": "678c1a0745f1cf175c442c719906a1f13e496910",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.936538",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}