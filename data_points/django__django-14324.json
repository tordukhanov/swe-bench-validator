{
  "repo": "django/django",
  "instance_id": "django__django-14324",
  "base_commit": "b746596f5f0e1fcac791b0f7c8bfc3d69dfef2ff",
  "patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -89,6 +89,18 @@ class RelatedField(FieldCacheMixin, Field):\n     many_to_many = False\n     many_to_one = False\n \n+    def __init__(\n+        self,\n+        related_name=None,\n+        related_query_name=None,\n+        limit_choices_to=None,\n+        **kwargs,\n+    ):\n+        self._related_name = related_name\n+        self._related_query_name = related_query_name\n+        self._limit_choices_to = limit_choices_to\n+        super().__init__(**kwargs)\n+\n     @cached_property\n     def related_model(self):\n         # Can't cache this property until all the models are loaded.\n@@ -319,12 +331,12 @@ def resolve_related_class(model, related, field):\n \n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n-        if self.remote_field.limit_choices_to:\n-            kwargs['limit_choices_to'] = self.remote_field.limit_choices_to\n-        if self.remote_field.related_name is not None:\n-            kwargs['related_name'] = self.remote_field.related_name\n-        if self.remote_field.related_query_name is not None:\n-            kwargs['related_query_name'] = self.remote_field.related_query_name\n+        if self._limit_choices_to:\n+            kwargs['limit_choices_to'] = self._limit_choices_to\n+        if self._related_name is not None:\n+            kwargs['related_name'] = self._related_name\n+        if self._related_query_name is not None:\n+            kwargs['related_query_name'] = self._related_query_name\n         return name, path, args, kwargs\n \n     def get_forward_related_filter(self, obj):\n@@ -471,7 +483,13 @@ def __init__(self, to, on_delete, from_fields, to_fields, rel=None, related_name\n                 on_delete=on_delete,\n             )\n \n-        super().__init__(rel=rel, **kwargs)\n+        super().__init__(\n+            rel=rel,\n+            related_name=related_name,\n+            related_query_name=related_query_name,\n+            limit_choices_to=limit_choices_to,\n+            **kwargs,\n+        )\n \n         self.from_fields = from_fields\n         self.to_fields = to_fields\n@@ -825,6 +843,9 @@ def __init__(self, to, on_delete, related_name=None, related_query_name=None,\n         super().__init__(\n             to,\n             on_delete,\n+            related_name=related_name,\n+            related_query_name=related_query_name,\n+            limit_choices_to=limit_choices_to,\n             from_fields=[RECURSIVE_RELATIONSHIP_CONSTANT],\n             to_fields=[to_field],\n             **kwargs,\n@@ -1174,7 +1195,12 @@ def __init__(self, to, related_name=None, related_query_name=None,\n         )\n         self.has_null_arg = 'null' in kwargs\n \n-        super().__init__(**kwargs)\n+        super().__init__(\n+            related_name=related_name,\n+            related_query_name=related_query_name,\n+            limit_choices_to=limit_choices_to,\n+            **kwargs,\n+        )\n \n         self.db_table = db_table\n         self.swappable = swappable\n",
  "test_patch": "diff --git a/tests/field_deconstruction/tests.py b/tests/field_deconstruction/tests.py\n--- a/tests/field_deconstruction/tests.py\n+++ b/tests/field_deconstruction/tests.py\n@@ -432,6 +432,34 @@ def test_many_to_many_field_swapped(self):\n         self.assertEqual(kwargs, {\"to\": \"auth.Permission\"})\n         self.assertEqual(kwargs['to'].setting_name, \"AUTH_USER_MODEL\")\n \n+    def test_many_to_many_field_related_name(self):\n+        class MyModel(models.Model):\n+            flag = models.BooleanField(default=True)\n+            m2m = models.ManyToManyField('self')\n+            m2m_related_name = models.ManyToManyField(\n+                'self',\n+                related_name='custom_name',\n+                related_query_name='custom_query_name',\n+                limit_choices_to={'flag': True},\n+            )\n+\n+        name, path, args, kwargs = MyModel.m2m.field.deconstruct()\n+        self.assertEqual(path, 'django.db.models.ManyToManyField')\n+        self.assertEqual(args, [])\n+        # deconstruct() should not include attributes which were not passed to\n+        # the field during initialization.\n+        self.assertEqual(kwargs, {'to': 'field_deconstruction.MyModel'})\n+        # Passed attributes.\n+        name, path, args, kwargs = MyModel.m2m_related_name.field.deconstruct()\n+        self.assertEqual(path, 'django.db.models.ManyToManyField')\n+        self.assertEqual(args, [])\n+        self.assertEqual(kwargs, {\n+            'to': 'field_deconstruction.MyModel',\n+            'related_name': 'custom_name',\n+            'related_query_name': 'custom_query_name',\n+            'limit_choices_to': {'flag': True},\n+        })\n+\n     def test_positive_integer_field(self):\n         field = models.PositiveIntegerField()\n         name, path, args, kwargs = field.deconstruct()\ndiff --git a/tests/schema/fields.py b/tests/schema/fields.py\n--- a/tests/schema/fields.py\n+++ b/tests/schema/fields.py\n@@ -34,7 +34,12 @@ def __init__(self, to, db_constraint=True, swappable=True, related_name=None, re\n         self.db_table = db_table\n         if kwargs['rel'].through is not None:\n             assert self.db_table is None, \"Cannot specify a db_table if an intermediary model is used.\"\n-        super().__init__(**kwargs)\n+        super().__init__(\n+            related_name=related_name,\n+            related_query_name=related_query_name,\n+            limit_choices_to=limit_choices_to,\n+            **kwargs,\n+        )\n \n     def contribute_to_class(self, cls, name, **kwargs):\n         if self.remote_field.symmetrical and (\n",
  "problem_statement": "Migration autodetector changes related_name for self-referential ManyToManyField.\nDescription\n\t\nMigration autodetector no longer adds a model name to the related_name attribute for self-referential ManyToManyField, e.g. for a field\nclass MyModel2(models.Model):\n\tfield_3 = models.ManyToManyField('self')\nit creates a migration with related_name='field_3_rel_+' instead of related_name='_mymodel2_field_3_+'.\nRegression in aa4acc164d1247c0de515c959f7b09648b57dc42 (see #29899).\n",
  "hints_text": "Hi, Similarly to #32675, on a first and very quick look, the ManyToManyField has some logic at django.db.models.fields.related.ManyToManyField.contribute_to_class that looks very much like the names described in the ticket itself: def contribute_to_class(self, cls, name, **kwargs): # To support multiple relations to self, it's useful to have a non-None # related name on symmetrical relations for internal reasons. The # concept doesn't make a lot of sense externally (\"you want me to # specify *what* on my non-reversible relation?!\"), so we set it up # automatically. The funky name reduces the chance of an accidental # clash. if self.remote_field.symmetrical and ( self.remote_field.model == RECURSIVE_RELATIONSHIP_CONSTANT or self.remote_field.model == cls._meta.object_name ): self.remote_field.related_name = \"%s_rel_+\" % name elif self.remote_field.is_hidden(): # If the backwards relation is disabled, replace the original # related_name with one generated from the m2m field name. Django # still uses backwards relations internally and we need to avoid # clashes between multiple m2m fields with related_name == '+'. self.remote_field.related_name = '_%s_%s_%s_+' % ( cls._meta.app_label, cls.__name__.lower(), name, ) Since _meta should not be available anymore, I expect that the result of the self.remote_field.model == cls._meta.object_name condition changed, because we should not be able to use cls._meta.app_label. I'm open to help if we have an idea about how we can fix this :)\nThat seems like a flaw of RelatedField.deconstruct tbh, it should not include related_name and friends if it was not specified at initialization. I suggest we make RelatedField.__init__ store related_name and related_query_name as self._related_name and self._related_query_name and use them instead of relying on self.remote_field in deconstruct. That's the approach we've taken for post-initialization alterable attributes in Field â€‹for example.",
  "created_at": "2021-04-28T19:25:23Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_many_to_many_field_related_name (field_deconstruction.tests.FieldDeconstructionTests)\"]",
  "PASS_TO_PASS": "[\"test_auto_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_big_integer_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_binary_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_boolean_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_char_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_char_field_choices (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_csi_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_date_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_datetime_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_db_tablespace (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_decimal_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"A DecimalField with decimal_places=0 should work (#22272).\", \"test_email_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_file_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_file_path_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_float_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_foreign_key (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_foreign_key_swapped (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_generic_ip_address_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_image_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_integer_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_ip_address_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_many_to_many_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_many_to_many_field_swapped (field_deconstruction.tests.FieldDeconstructionTests)\", \"Tests the outputting of the correct name if assigned one.\", \"test_one_to_one (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_positive_big_integer_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_positive_integer_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_positive_small_integer_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_slug_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_small_integer_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_text_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_time_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_url_field (field_deconstruction.tests.FieldDeconstructionTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.687084",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}