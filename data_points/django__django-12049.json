{
  "repo": "django/django",
  "instance_id": "django__django-12049",
  "base_commit": "24b9f5082344a127147266dd52d5d2dcd1c9cb44",
  "patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -329,8 +329,11 @@ def should_skip_detecting_model(migration, model):\n         apps = after_state.apps\n         found_create_model_migration = False\n         found_add_field_migration = False\n+        fold_identifier_case = self.connection.features.ignores_table_name_case\n         with self.connection.cursor() as cursor:\n-            existing_table_names = self.connection.introspection.table_names(cursor)\n+            existing_table_names = set(self.connection.introspection.table_names(cursor))\n+            if fold_identifier_case:\n+                existing_table_names = {name.casefold() for name in existing_table_names}\n         # Make sure all create model and add field operations are done\n         for operation in migration.operations:\n             if isinstance(operation, migrations.CreateModel):\n@@ -341,7 +344,10 @@ def should_skip_detecting_model(migration, model):\n                     model = global_apps.get_model(model._meta.swapped)\n                 if should_skip_detecting_model(migration, model):\n                     continue\n-                if model._meta.db_table not in existing_table_names:\n+                db_table = model._meta.db_table\n+                if fold_identifier_case:\n+                    db_table = db_table.casefold()\n+                if db_table not in existing_table_names:\n                     return False, project_state\n                 found_create_model_migration = True\n             elif isinstance(operation, migrations.AddField):\n@@ -358,19 +364,29 @@ def should_skip_detecting_model(migration, model):\n \n                 # Handle implicit many-to-many tables created by AddField.\n                 if field.many_to_many:\n-                    if field.remote_field.through._meta.db_table not in existing_table_names:\n+                    through_db_table = field.remote_field.through._meta.db_table\n+                    if fold_identifier_case:\n+                        through_db_table = through_db_table.casefold()\n+                    if through_db_table not in existing_table_names:\n                         return False, project_state\n                     else:\n                         found_add_field_migration = True\n                         continue\n-\n-                column_names = [\n-                    column.name for column in\n-                    self.connection.introspection.get_table_description(self.connection.cursor(), table)\n-                ]\n-                if field.column not in column_names:\n+                columns = self.connection.introspection.get_table_description(\n+                    self.connection.cursor(),\n+                    table,\n+                )\n+                for column in columns:\n+                    field_column = field.column\n+                    column_name = column.name\n+                    if fold_identifier_case:\n+                        column_name = column_name.casefold()\n+                        field_column = field_column.casefold()\n+                    if column_name == field_column:\n+                        found_add_field_migration = True\n+                        break\n+                else:\n                     return False, project_state\n-                found_add_field_migration = True\n         # If we get this far and we found at least one CreateModel or AddField migration,\n         # the migration is considered implicitly applied.\n         return (found_create_model_migration or found_add_field_migration), after_state\n",
  "test_patch": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -14,7 +14,7 @@\n from django.db.backends.utils import truncate_name\n from django.db.migrations.exceptions import InconsistentMigrationHistory\n from django.db.migrations.recorder import MigrationRecorder\n-from django.test import TestCase, override_settings\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n \n from .models import UnicodeModel, UnserializableModel\n from .routers import TestRouter\n@@ -197,6 +197,32 @@ def test_migrate_fake_initial(self):\n             self.assertTableNotExists(\"migrations_tribble\", using=db)\n             self.assertTableNotExists(\"migrations_book\", using=db)\n \n+    @skipUnlessDBFeature('ignores_table_name_case')\n+    def test_migrate_fake_initial_case_insensitive(self):\n+        with override_settings(MIGRATION_MODULES={\n+            'migrations': 'migrations.test_fake_initial_case_insensitive.initial',\n+        }):\n+            call_command('migrate', 'migrations', '0001', verbosity=0)\n+            call_command('migrate', 'migrations', 'zero', fake=True, verbosity=0)\n+\n+        with override_settings(MIGRATION_MODULES={\n+            'migrations': 'migrations.test_fake_initial_case_insensitive.fake_initial',\n+        }):\n+            out = io.StringIO()\n+            call_command(\n+                'migrate',\n+                'migrations',\n+                '0001',\n+                fake_initial=True,\n+                stdout=out,\n+                verbosity=1,\n+                no_color=True,\n+            )\n+            self.assertIn(\n+                'migrations.0001_initial... faked',\n+                out.getvalue().lower(),\n+            )\n+\n     @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_fake_split_initial\"})\n     def test_migrate_fake_split_initial(self):\n         \"\"\"\ndiff --git a/tests/migrations/test_fake_initial_case_insensitive/fake_initial/0001_initial.py b/tests/migrations/test_fake_initial_case_insensitive/fake_initial/0001_initial.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/migrations/test_fake_initial_case_insensitive/fake_initial/0001_initial.py\n@@ -0,0 +1,28 @@\n+from django.db import migrations, models\n+\n+\n+class Migration(migrations.Migration):\n+    initial = True\n+\n+    operations = [\n+        migrations.CreateModel(\n+            'fakeinitialmodel',\n+            [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('field', models.CharField(max_length=20)),\n+            ],\n+            options={\n+                'db_table': 'migrations_mIxEd_cAsE_iNiTiAl_mOdEl',\n+            },\n+        ),\n+        migrations.AddField(\n+            model_name='fakeinitialmodel',\n+            name='field_mixed_case',\n+            field=models.CharField(max_length=20, db_column='fIeLd_mIxEd_cAsE'),\n+        ),\n+        migrations.AddField(\n+            model_name='fakeinitialmodel',\n+            name='fake_initial_model',\n+            field=models.ManyToManyField(to='migrations.fakeinitialmodel', db_table='m2m_mIxEd_cAsE'),\n+        ),\n+    ]\ndiff --git a/tests/migrations/test_fake_initial_case_insensitive/fake_initial/__init__.py b/tests/migrations/test_fake_initial_case_insensitive/fake_initial/__init__.py\nnew file mode 100644\ndiff --git a/tests/migrations/test_fake_initial_case_insensitive/initial/0001_initial.py b/tests/migrations/test_fake_initial_case_insensitive/initial/0001_initial.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/migrations/test_fake_initial_case_insensitive/initial/0001_initial.py\n@@ -0,0 +1,23 @@\n+from django.db import migrations, models\n+\n+\n+class Migration(migrations.Migration):\n+    initial = True\n+\n+    operations = [\n+        migrations.CreateModel(\n+            name='fakeinitialmodel',\n+            fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('field', models.CharField(max_length=20)),\n+                ('field_mixed_case', models.CharField(max_length=20, db_column='FiEld_MiXeD_CaSe')),\n+                (\n+                    'fake_initial_mode',\n+                    models.ManyToManyField('migrations.FakeInitialModel', db_table='m2m_MiXeD_CaSe'),\n+                ),\n+            ],\n+            options={\n+                'db_table': 'migrations_MiXeD_CaSe_InItIaL_MoDel',\n+            },\n+        ),\n+    ]\ndiff --git a/tests/migrations/test_fake_initial_case_insensitive/initial/__init__.py b/tests/migrations/test_fake_initial_case_insensitive/initial/__init__.py\nnew file mode 100644\n",
  "problem_statement": "Applied migration detection may fail when using a case-insensitive collation\nDescription\n\t \n\t\t(last modified by Tim Graham)\n\t \nHello, \nI'm using this guide â€‹https://datascience.blog.wzb.eu/2017/03/21/using-django-with-an-existinglegacy-database for my studies with camelCasing together with Django (yes, I'm still trying to keep the naming convention we have inside our DB, also for the model's names)\nNow, I'm really new to Django and I don't know if it's intended but this part of code inside django/db/migrations/executor.py' is doing case sensitive comparison to check if a column is already present in a database\ncolumn_names = [\n\tcolumn.name for column in\n\tself.connection.introspection.get_table_description(self.connection.cursor(), table)\n]\nif field.column not in column_names:\n\treturn False, project_state\nso if my migration file contains something like this\n\t\tmigrations.AddField(\n\t\t\tmodel_name='city',\n\t\t\tname='countrycode',\n\t\t\tfield=models.ForeignKey(db_column='countryCode', on_delete=django.db.models.deletion.CASCADE, to='my_DB.country'),\nand I run python3 manage.py migrate --database my_DB --fake-initial my_first_app\nit fires an error saying that that table already exists \ndjango.db.utils.OperationalError: (1050, \"Table 'city' already exists\")\nIf I run python3 manage.py migrate --database my_DB --fake my_first_app it correctly fakes my_first_app\nThe my_DB collation is case insensitive, while MySql is running with the ' --lower-case-table-names=0' option\n",
  "hints_text": "Not sure about the solution. PR just created for proposing the solution.\nLeft a few comments for improvements.",
  "created_at": "2019-11-08T23:50:59Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_migrate_fake_initial_case_insensitive (migrations.test_commands.MigrateTests)\"]",
  "PASS_TO_PASS": "[\"test_makemigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_makemigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"--squashed-name specifies the new migration's name.\", \"--squashed-name also works if a start migration is omitted.\", \"test_squashmigrations_initial_attribute (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_invalid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_optimizes (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_squashes (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_valid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_ticket_23799_squashmigrations_no_optimize (migrations.test_commands.SquashMigrationsTests)\", \"test_failing_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_files_content (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_auto_now_add_interactive (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_check (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_conflict_exit (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_consistency_checks_respect_routers (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_default_merge_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_disabled_migrations_for_app (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_connections (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_no_app_specified (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_handle_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_inconsistent_history (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_accept (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_by_default (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_reject (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_dont_output_dependency_operations (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_no_conflict (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output_valueerror (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_announce (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_nonexistent_toplevel_package (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_path_not_exist (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_apps_initial (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes_no_apps (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_common_ancestor (migrations.test_commands.MakeMigrationsTests)\", \"Migration directories without an __init__.py file are allowed.\", \"test_makemigrations_non_interactive_no_field_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_no_model_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_addition (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_alteration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_order (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_no_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_invalid_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_ambiguous_prefix (migrations.test_commands.MigrateTests)\", \"test_app_without_migrations (migrations.test_commands.MigrateTests)\", \"test_migrate (migrations.test_commands.MigrateTests)\", \"test_migrate_conflict_exit (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_split_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_inconsistent_history (migrations.test_commands.MigrateTests)\", \"test_migrate_initial_false (migrations.test_commands.MigrateTests)\", \"Tests migrate --plan output.\", \"test_migrate_record_replaced (migrations.test_commands.MigrateTests)\", \"test_migrate_record_squashed (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_app_label (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_app_with_migrations (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_deferred_sql_executed_with_schemaeditor (migrations.test_commands.MigrateTests)\", \"test_migrate_with_system_checks (migrations.test_commands.MigrateTests)\", \"test_migrations_no_operations (migrations.test_commands.MigrateTests)\", \"test_regression_22823_unmigrated_fk_to_migrated_model (migrations.test_commands.MigrateTests)\", \"test_showmigrations_list (migrations.test_commands.MigrateTests)\", \"test_showmigrations_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_app_label_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_multiple_app_labels (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_single_app_label (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_squashed (migrations.test_commands.MigrateTests)\", \"test_showmigrations_unmigrated_app (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_backwards (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_for_non_atomic_migration (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_for_non_transactional_databases (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_forwards (migrations.test_commands.MigrateTests)\", \"test_unknown_prefix (migrations.test_commands.MigrateTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.591613",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}