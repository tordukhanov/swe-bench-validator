{
  "repo": "django/django",
  "instance_id": "django__django-15272",
  "base_commit": "847f46e9bf88964484c8b76a10af753ea1018311",
  "patch": "diff --git a/django/core/management/commands/optimizemigration.py b/django/core/management/commands/optimizemigration.py\nnew file mode 100644\n--- /dev/null\n+++ b/django/core/management/commands/optimizemigration.py\n@@ -0,0 +1,121 @@\n+import sys\n+\n+from django.apps import apps\n+from django.core.management.base import BaseCommand, CommandError\n+from django.core.management.utils import run_formatters\n+from django.db import migrations\n+from django.db.migrations.exceptions import AmbiguityError\n+from django.db.migrations.loader import MigrationLoader\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.db.migrations.writer import MigrationWriter\n+from django.utils.version import get_docs_version\n+\n+\n+class Command(BaseCommand):\n+    help = \"Optimizes the operations for the named migration.\"\n+\n+    def add_arguments(self, parser):\n+        parser.add_argument(\n+            \"app_label\",\n+            help=\"App label of the application to optimize the migration for.\",\n+        )\n+        parser.add_argument(\n+            \"migration_name\", help=\"Migration name to optimize the operations for.\"\n+        )\n+        parser.add_argument(\n+            \"--check\",\n+            action=\"store_true\",\n+            help=\"Exit with a non-zero status if the migration can be optimized.\",\n+        )\n+\n+    def handle(self, *args, **options):\n+        verbosity = options[\"verbosity\"]\n+        app_label = options[\"app_label\"]\n+        migration_name = options[\"migration_name\"]\n+        check = options[\"check\"]\n+\n+        # Validate app_label.\n+        try:\n+            apps.get_app_config(app_label)\n+        except LookupError as err:\n+            raise CommandError(str(err))\n+\n+        # Load the current graph state.\n+        loader = MigrationLoader(None)\n+        if app_label not in loader.migrated_apps:\n+            raise CommandError(f\"App '{app_label}' does not have migrations.\")\n+        # Find a migration.\n+        try:\n+            migration = loader.get_migration_by_prefix(app_label, migration_name)\n+        except AmbiguityError:\n+            raise CommandError(\n+                f\"More than one migration matches '{migration_name}' in app \"\n+                f\"'{app_label}'. Please be more specific.\"\n+            )\n+        except KeyError:\n+            raise CommandError(\n+                f\"Cannot find a migration matching '{migration_name}' from app \"\n+                f\"'{app_label}'.\"\n+            )\n+\n+        # Optimize the migration.\n+        optimizer = MigrationOptimizer()\n+        new_operations = optimizer.optimize(migration.operations, migration.app_label)\n+        if len(migration.operations) == len(new_operations):\n+            if verbosity > 0:\n+                self.stdout.write(\"No optimizations possible.\")\n+            return\n+        else:\n+            if verbosity > 0:\n+                self.stdout.write(\n+                    \"Optimizing from %d operations to %d operations.\"\n+                    % (len(migration.operations), len(new_operations))\n+                )\n+            if check:\n+                sys.exit(1)\n+\n+        # Set the new migration optimizations.\n+        migration.operations = new_operations\n+\n+        # Write out the optimized migration file.\n+        writer = MigrationWriter(migration)\n+        migration_file_string = writer.as_string()\n+        if writer.needs_manual_porting:\n+            if migration.replaces:\n+                raise CommandError(\n+                    \"Migration will require manual porting but is already a squashed \"\n+                    \"migration.\\nTransition to a normal migration first: \"\n+                    \"https://docs.djangoproject.com/en/%s/topics/migrations/\"\n+                    \"#squashing-migrations\" % get_docs_version()\n+                )\n+            # Make a new migration with those operations.\n+            subclass = type(\n+                \"Migration\",\n+                (migrations.Migration,),\n+                {\n+                    \"dependencies\": migration.dependencies,\n+                    \"operations\": new_operations,\n+                    \"replaces\": [(migration.app_label, migration.name)],\n+                },\n+            )\n+            optimized_migration_name = \"%s_optimized\" % migration.name\n+            optimized_migration = subclass(optimized_migration_name, app_label)\n+            writer = MigrationWriter(optimized_migration)\n+            migration_file_string = writer.as_string()\n+            if verbosity > 0:\n+                self.stdout.write(\n+                    self.style.MIGRATE_HEADING(\"Manual porting required\") + \"\\n\"\n+                    \"  Your migrations contained functions that must be manually \"\n+                    \"copied over,\\n\"\n+                    \"  as we could not safely copy their implementation.\\n\"\n+                    \"  See the comment at the top of the optimized migration for \"\n+                    \"details.\"\n+                )\n+        with open(writer.path, \"w\", encoding=\"utf-8\") as fh:\n+            fh.write(migration_file_string)\n+        run_formatters([writer.path])\n+\n+        if verbosity > 0:\n+            self.stdout.write(\n+                self.style.MIGRATE_HEADING(f\"Optimized migration {writer.path}\")\n+            )\n",
  "test_patch": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2810,3 +2810,163 @@ def test_squashmigrations_nonexistent_app_label(self):\n     def test_squashmigrations_app_name_specified_as_label(self):\n         with self.assertRaisesMessage(CommandError, self.did_you_mean_auth_error):\n             call_command(\"squashmigrations\", \"django.contrib.auth\", \"0002\")\n+\n+    def test_optimizemigration_nonexistent_app_label(self):\n+        with self.assertRaisesMessage(CommandError, self.nonexistent_app_error):\n+            call_command(\"optimizemigration\", \"nonexistent_app\", \"0002\")\n+\n+    def test_optimizemigration_app_name_specified_as_label(self):\n+        with self.assertRaisesMessage(CommandError, self.did_you_mean_auth_error):\n+            call_command(\"optimizemigration\", \"django.contrib.auth\", \"0002\")\n+\n+\n+class OptimizeMigrationTests(MigrationTestBase):\n+    def test_no_optimization_possible(self):\n+        out = io.StringIO()\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations\"\n+        ) as migration_dir:\n+            call_command(\n+                \"optimizemigration\", \"migrations\", \"0002\", stdout=out, no_color=True\n+            )\n+            migration_file = os.path.join(migration_dir, \"0002_second.py\")\n+            self.assertTrue(os.path.exists(migration_file))\n+            call_command(\n+                \"optimizemigration\",\n+                \"migrations\",\n+                \"0002\",\n+                stdout=out,\n+                no_color=True,\n+                verbosity=0,\n+            )\n+        self.assertEqual(out.getvalue(), \"No optimizations possible.\\n\")\n+\n+    def test_optimization(self):\n+        out = io.StringIO()\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations\"\n+        ) as migration_dir:\n+            call_command(\n+                \"optimizemigration\", \"migrations\", \"0001\", stdout=out, no_color=True\n+            )\n+            initial_migration_file = os.path.join(migration_dir, \"0001_initial.py\")\n+            self.assertTrue(os.path.exists(initial_migration_file))\n+            with open(initial_migration_file) as fp:\n+                content = fp.read()\n+                self.assertIn(\n+                    '(\"bool\", models.BooleanField'\n+                    if HAS_BLACK\n+                    else \"('bool', models.BooleanField\",\n+                    content,\n+                )\n+        self.assertEqual(\n+            out.getvalue(),\n+            f\"Optimizing from 4 operations to 2 operations.\\n\"\n+            f\"Optimized migration {initial_migration_file}\\n\",\n+        )\n+\n+    def test_optimization_no_verbosity(self):\n+        out = io.StringIO()\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations\"\n+        ) as migration_dir:\n+            call_command(\n+                \"optimizemigration\",\n+                \"migrations\",\n+                \"0001\",\n+                stdout=out,\n+                no_color=True,\n+                verbosity=0,\n+            )\n+            initial_migration_file = os.path.join(migration_dir, \"0001_initial.py\")\n+            self.assertTrue(os.path.exists(initial_migration_file))\n+            with open(initial_migration_file) as fp:\n+                content = fp.read()\n+                self.assertIn(\n+                    '(\"bool\", models.BooleanField'\n+                    if HAS_BLACK\n+                    else \"('bool', models.BooleanField\",\n+                    content,\n+                )\n+        self.assertEqual(out.getvalue(), \"\")\n+\n+    def test_creates_replace_migration_manual_porting(self):\n+        out = io.StringIO()\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_manual_porting\"\n+        ) as migration_dir:\n+            call_command(\n+                \"optimizemigration\", \"migrations\", \"0003\", stdout=out, no_color=True\n+            )\n+            optimized_migration_file = os.path.join(\n+                migration_dir, \"0003_third_optimized.py\"\n+            )\n+            self.assertTrue(os.path.exists(optimized_migration_file))\n+            with open(optimized_migration_file) as fp:\n+                content = fp.read()\n+                self.assertIn(\"replaces = [\", content)\n+        self.assertEqual(\n+            out.getvalue(),\n+            f\"Optimizing from 3 operations to 2 operations.\\n\"\n+            f\"Manual porting required\\n\"\n+            f\"  Your migrations contained functions that must be manually copied over,\"\n+            f\"\\n\"\n+            f\"  as we could not safely copy their implementation.\\n\"\n+            f\"  See the comment at the top of the optimized migration for details.\\n\"\n+            f\"Optimized migration {optimized_migration_file}\\n\",\n+        )\n+\n+    def test_fails_squash_migration_manual_porting(self):\n+        out = io.StringIO()\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_manual_porting\"\n+        ) as migration_dir:\n+            msg = (\n+                \"Migration will require manual porting but is already a squashed \"\n+                \"migration.\\nTransition to a normal migration first: \"\n+                \"https://docs.djangoproject.com/en/dev/topics/migrations/\"\n+                \"#squashing-migrations\"\n+            )\n+            with self.assertRaisesMessage(CommandError, msg):\n+                call_command(\"optimizemigration\", \"migrations\", \"0004\", stdout=out)\n+            optimized_migration_file = os.path.join(\n+                migration_dir, \"0004_fourth_optimized.py\"\n+            )\n+            self.assertFalse(os.path.exists(optimized_migration_file))\n+        self.assertEqual(\n+            out.getvalue(), \"Optimizing from 3 operations to 2 operations.\\n\"\n+        )\n+\n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n+    def test_optimizemigration_check(self):\n+        with self.assertRaises(SystemExit):\n+            call_command(\n+                \"optimizemigration\", \"--check\", \"migrations\", \"0001\", verbosity=0\n+            )\n+\n+        call_command(\"optimizemigration\", \"--check\", \"migrations\", \"0002\", verbosity=0)\n+\n+    @override_settings(\n+        INSTALLED_APPS=[\"migrations.migrations_test_apps.unmigrated_app_simple\"],\n+    )\n+    def test_app_without_migrations(self):\n+        msg = \"App 'unmigrated_app_simple' does not have migrations.\"\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command(\"optimizemigration\", \"unmigrated_app_simple\", \"0001\")\n+\n+    @override_settings(\n+        MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_clashing_prefix\"},\n+    )\n+    def test_ambigious_prefix(self):\n+        msg = (\n+            \"More than one migration matches 'a' in app 'migrations'. Please \"\n+            \"be more specific.\"\n+        )\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command(\"optimizemigration\", \"migrations\", \"a\")\n+\n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n+    def test_unknown_prefix(self):\n+        msg = \"Cannot find a migration matching 'nonexistent' from app 'migrations'.\"\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command(\"optimizemigration\", \"migrations\", \"nonexistent\")\ndiff --git a/tests/migrations/test_migrations_manual_porting/0003_third.py b/tests/migrations/test_migrations_manual_porting/0003_third.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/migrations/test_migrations_manual_porting/0003_third.py\n@@ -0,0 +1,23 @@\n+from django.db import migrations\n+\n+\n+def forwards(apps, schema_editor):\n+    pass\n+\n+\n+class Migration(migrations.Migration):\n+    dependencies = [\n+        (\"migrations\", \"0002_second\"),\n+    ]\n+\n+    operations = [\n+        migrations.AlterUniqueTogether(\n+            name=\"somemodel\",\n+            unique_together={(\"id\", \"name\")},\n+        ),\n+        migrations.AlterUniqueTogether(\n+            name=\"somemodel\",\n+            unique_together={(\"name\",)},\n+        ),\n+        migrations.RunPython(forwards, migrations.RunPython.noop),\n+    ]\ndiff --git a/tests/migrations/test_migrations_manual_porting/0004_fourth.py b/tests/migrations/test_migrations_manual_porting/0004_fourth.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/migrations/test_migrations_manual_porting/0004_fourth.py\n@@ -0,0 +1,27 @@\n+from django.db import migrations\n+\n+\n+def forwards(apps, schema_editor):\n+    pass\n+\n+\n+class Migration(migrations.Migration):\n+    dependencies = [\n+        (\"migrations\", \"0002_second\"),\n+    ]\n+\n+    replaces = [\n+        (\"migrations\", \"0003_third\"),\n+    ]\n+\n+    operations = [\n+        migrations.AlterUniqueTogether(\n+            name=\"somemodel\",\n+            unique_together={(\"id\", \"name\")},\n+        ),\n+        migrations.AlterUniqueTogether(\n+            name=\"somemodel\",\n+            unique_together={(\"name\",)},\n+        ),\n+        migrations.RunPython(forwards, migrations.RunPython.noop),\n+    ]\n",
  "problem_statement": "Add a management command to optimize a migration\nDescription\n\t \n\t\t(last modified by Raphael Gaschignard)\n\t \nBecause the migration optimizer still has a bit of trouble with reducing operations, you often want to edit squashed migrations and re-run it through the optimizer.\nThe attached patch contains an implementation of a management command, optimizemigration, that will help speed up this process.\noptimizemigration app_name migration_name reads a single migration, pass it through the optimizer, and then rewrite the result to disk. Unlike squashmigrations, this ignores things like the squashed-ness of the migration.\n",
  "hints_text": "​django-developers discussion from the reporter. Shai also ​proposed a similar thing.",
  "created_at": "2022-01-01T22:35:36Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_optimizemigration_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_optimizemigration_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_ambigious_prefix (migrations.test_commands.OptimizeMigrationTests)\", \"test_app_without_migrations (migrations.test_commands.OptimizeMigrationTests)\", \"test_creates_replace_migration_manual_porting (migrations.test_commands.OptimizeMigrationTests)\", \"test_fails_squash_migration_manual_porting (migrations.test_commands.OptimizeMigrationTests)\", \"test_no_optimization_possible (migrations.test_commands.OptimizeMigrationTests)\", \"test_optimization (migrations.test_commands.OptimizeMigrationTests)\", \"test_optimization_no_verbosity (migrations.test_commands.OptimizeMigrationTests)\", \"test_optimizemigration_check (migrations.test_commands.OptimizeMigrationTests)\", \"test_unknown_prefix (migrations.test_commands.OptimizeMigrationTests)\"]",
  "PASS_TO_PASS": "[\"test_makemigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_makemigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_ambiguous_prefix (migrations.test_commands.MigrateTests)\", \"test_app_without_migrations (migrations.test_commands.MigrateTests)\", \"Tests basic usage of the migrate command.\", \"test_migrate_backward_to_squashed_migration (migrations.test_commands.MigrateTests)\", \"test_migrate_check (migrations.test_commands.MigrateTests)\", \"test_migrate_check_plan (migrations.test_commands.MigrateTests)\", \"migrate exits if it detects a conflict.\", \"--fake-initial only works if all tables created in the initial\", \"test_migrate_fake_initial_case_insensitive (migrations.test_commands.MigrateTests)\", \"Split initial migrations can be faked with --fake-initial.\", \"Running migrate with some migrations applied before their dependencies\", \"`Migration.initial = False` skips fake-initial detection.\", \"test_migrate_not_reflected_changes (migrations.test_commands.MigrateTests)\", \"Migrating to a squashed migration specified by name should succeed\", \"Tests migrate --plan output.\", \"With prune=True, references to migration files deleted from the\", \"Running a single squashed migration should record all of the original\", \"Running migrate for a squashed migration should record as run\", \"Running migrate --run-syncdb with an app_label only creates tables for\", \"test_migrate_syncdb_app_with_migrations (migrations.test_commands.MigrateTests)\", \"For an app without migrations, editor.execute() is used for executing\", \"test_migrate_with_system_checks (migrations.test_commands.MigrateTests)\", \"test_migrations_no_operations (migrations.test_commands.MigrateTests)\", \"test_prune_deleted_squashed_migrations_in_replaces (migrations.test_commands.MigrateTests)\", \"test_prune_no_app_label (migrations.test_commands.MigrateTests)\", \"test_prune_no_migrations_to_prune (migrations.test_commands.MigrateTests)\", \"Assuming you have 3 apps, `A`, `B`, and `C`, such that:\", \"showmigrations --list  displays migrations and whether or not they're\", \"test_showmigrations_list_squashed (migrations.test_commands.MigrateTests)\", \"test_showmigrations_no_migrations (migrations.test_commands.MigrateTests)\", \"Tests --plan output of showmigrations command\", \"test_showmigrations_plan_app_label_no_migrations (migrations.test_commands.MigrateTests)\", \"`showmigrations --plan app_label` output with multiple app_labels.\", \"Tests --plan output of showmigrations command without migrations\", \"`showmigrations --plan app_label` output with a single app_label.\", \"Tests --plan output of showmigrations command with squashed migrations.\", \"test_showmigrations_unmigrated_app (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_ambiguous_prefix_squashed_migrations (migrations.test_commands.MigrateTests)\", \"sqlmigrate outputs reverse looking SQL.\", \"Transaction wrappers aren't shown for non-atomic migrations.\", \"Transaction wrappers aren't shown for databases that don't support\", \"sqlmigrate outputs forward looking SQL.\", \"test_sqlmigrate_replaced_migration (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_squashed_migration (migrations.test_commands.MigrateTests)\", \"test_unknown_prefix (migrations.test_commands.MigrateTests)\", \"test_squashed_name_exists (migrations.test_commands.SquashMigrationsTests)\", \"--squashed-name specifies the new migration's name.\", \"--squashed-name also works if a start migration is omitted.\", \"test_squashmigrations_initial_attribute (migrations.test_commands.SquashMigrationsTests)\", \"squashmigrations doesn't accept a starting migration after the ending migration.\", \"test_squashmigrations_manual_porting (migrations.test_commands.SquashMigrationsTests)\", \"squashmigrations optimizes operations.\", \"squashmigrations squashes migrations.\", \"squashmigrations accepts a starting migration.\", \"squashmigrations --no-optimize doesn't optimize operations.\", \"test_failing_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_files_content (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations respects --dry-run option when fixing migration\", \"`makemigrations --merge --dry-run` writes the merge migration file to\", \"test_makemigrations_auto_merge_name (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations prompts the user when adding auto_now_add to an existing\", \"test_makemigrations_auto_now_add_interactive_quit (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations --check should exit with a non-zero status when\", \"makemigrations exits if it detects a conflict.\", \"The history consistency checks in makemigrations respect\", \"test_makemigrations_continues_number_sequence_after_squash (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_default_merge_name (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations raises a nice error when migrations are disabled for an\", \"`makemigrations --dry-run` should not ask for defaults.\", \"Allow `makemigrations --dry-run` to output the migrations file to\", \"test_makemigrations_empty_connections (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations properly constructs an empty migration.\", \"makemigrations exits if no app is specified with 'empty' mode.\", \"test_makemigrations_field_rename_interactive (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations properly merges the conflicting migrations with --noinput.\", \"makemigrations should raise InconsistentMigrationHistory exception if\", \"test_makemigrations_inconsistent_history_db_failure (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations enters interactive mode and merges properly.\", \"The user is prompted to merge by default if there are conflicts and\", \"makemigrations messages when adding a NOT NULL field in interactive\", \"makemigrations messages when changing a NULL field to NOT NULL in\", \"makemigrations enters and exits interactive mode properly.\", \"makemigrations prompts the user when adding a unique field with\", \"makemigrations --merge does not output any operations from apps that\", \"makemigrations exits if in merge mode with no conflicts.\", \"makemigrations should print the relative paths to the migrations unless\", \"makemigrations prints the absolute path if os.path.relpath() raises a\", \"makemigrations announces the migration at the default verbosity level.\", \"test_makemigrations_migrations_modules_nonexistent_toplevel_package (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations creates migrations when specifying a custom location\", \"test_makemigrations_model_rename_interactive (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations should detect initial is needed on empty migration\", \"makemigrations exits when there are no changes to an app.\", \"makemigrations exits when there are no changes and no apps are specified.\", \"makemigrations fails to merge migrations with no common ancestor.\", \"Migration directories without an __init__.py file are allowed.\", \"Non-interactive makemigrations fails when a default is missing on a\", \"makemigrations adds and removes a possible field rename in\", \"makemigrations adds and removes a possible model rename in\", \"test_makemigrations_non_interactive_unique_callable_default_addition (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations should recognize number-only migrations (0001.py).\", \"With scriptable=True, log output is diverted to stderr, and only the\", \"test_makemigrations_scriptable_merge (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations does not create a merge for an unspecified app even if\", \"makemigrations does not raise a CommandError when an unspecified app\", \"makemigrations --name generate a custom migration name.\", \"test_makemigrations_with_invalid_custom_name (migrations.test_commands.MakeMigrationsTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.723144",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}