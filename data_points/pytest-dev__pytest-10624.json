{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-10624",
  "base_commit": "7421f3bb94df80ff2d131e932223b190f9b6d7b6",
  "patch": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -269,10 +269,16 @@ def _repr_compare(self, other_side: Mapping[object, float]) -> List[str]:\n                 max_abs_diff = max(\n                     max_abs_diff, abs(approx_value.expected - other_value)\n                 )\n-                max_rel_diff = max(\n-                    max_rel_diff,\n-                    abs((approx_value.expected - other_value) / approx_value.expected),\n-                )\n+                if approx_value.expected == 0.0:\n+                    max_rel_diff = math.inf\n+                else:\n+                    max_rel_diff = max(\n+                        max_rel_diff,\n+                        abs(\n+                            (approx_value.expected - other_value)\n+                            / approx_value.expected\n+                        ),\n+                    )\n                 different_ids.append(approx_key)\n \n         message_data = [\n",
  "test_patch": "diff --git a/testing/python/approx.py b/testing/python/approx.py\n--- a/testing/python/approx.py\n+++ b/testing/python/approx.py\n@@ -630,6 +630,19 @@ def test_dict_nonnumeric(self):\n     def test_dict_vs_other(self):\n         assert 1 != approx({\"a\": 0})\n \n+    def test_dict_for_div_by_zero(self, assert_approx_raises_regex):\n+        assert_approx_raises_regex(\n+            {\"foo\": 42.0},\n+            {\"foo\": 0.0},\n+            [\n+                r\"  comparison failed. Mismatched elements: 1 / 1:\",\n+                rf\"  Max absolute difference: {SOME_FLOAT}\",\n+                r\"  Max relative difference: inf\",\n+                r\"  Index \\| Obtained\\s+\\| Expected   \",\n+                rf\"  foo   | {SOME_FLOAT} \\| {SOME_FLOAT} ± {SOME_FLOAT}\",\n+            ],\n+        )\n+\n     def test_numpy_array(self):\n         np = pytest.importorskip(\"numpy\")\n \n",
  "problem_statement": "`assert a == approx(b)` when `b` is dict containing zero value results in ZeroDivisionError\nPytest behaves differently when comparing dictionaries containing zero values compared to lists containing same values\r\n\r\npytest==7.2.0\r\nUbuntu 22.04\r\n\r\n```python\r\nimport pytest\r\n\r\ndef test_foo_dict():\r\n    a = {'foo': 42.0}\r\n    b = {'foo': 0.0}\r\n    assert a == pytest.approx(b) # ZeroDivisionError in pytest/python_api.py\r\n\r\ndef test_foo_list():\r\n    a = [42.0]\r\n    b = [0.0]\r\n    assert a == pytest.approx(b) # OK\r\n```\r\n\r\n```python\r\n_____________________ test_foo_dict\r\n\r\n    def test_foo_dict():\r\n        a = {'foo': 42.0}\r\n        b = {'foo': 0.0}\r\n>       assert a == pytest.approx(b)\r\nE       AssertionError: assert {'foo': 42.0} == approx({'foo': 0.0 ± 1.0e-12})\r\nE         (pytest_assertion plugin: representation of details failed: /home/arkanoid/test/venv/lib/python3.10/site-packages/_pytest/python_api.py:274: ZeroDivisionError: float division by zero.\r\nE          Probably an object has a faulty __repr__.)\r\n\r\nextra/test_pytest_issue.py:9: AssertionError\r\n\r\n_____________________ test_foo_list\r\n\r\n    def test_foo_list():\r\n        a = [42.0]\r\n        b = [0.0]\r\n>       assert a == pytest.approx(b)\r\nE       assert [42.0] == approx([0.0 ± 1.0e-12])\r\nE         comparison failed. Mismatched elements: 1 / 1:\r\nE         Max absolute difference: 42.0\r\nE         Max relative difference: 1.0\r\nE         Index | Obtained | Expected     \r\nE         0     | 42.0     | 0.0 ± 1.0e-12\r\n\r\nextra/test_pytest_issue.py:15: AssertionError\r\n```\n",
  "hints_text": "I think I might have figured out what the problem is.\r\n\r\nHere is a snippet from `def _repr_compare` function of `class ApproxNumpy`, there is a check for when the `other_value` (which is the divisor) is 0.0\r\nhttps://github.com/pytest-dev/pytest/blob/857e34ef8555c48cb5c44f143a0d6692efb6c60f/src/_pytest/python_api.py#L186-L195\r\n\r\nHere is a snippet from `def _repr_compare` function of `class ApproxMapping`, there is no such check for the case  when  `approx_value.expected` (which is the divisor) is 0.0\r\nhttps://github.com/pytest-dev/pytest/blob/857e34ef8555c48cb5c44f143a0d6692efb6c60f/src/_pytest/python_api.py#L268-L276\r\n\r\nHere is my suggested change\r\n```python\r\n         if approx_value != other_value:\r\n              max_abs_diff = max(\r\n                  max_abs_diff, abs(approx_value.expected - other_value)\r\n              )\r\n              if approx_value.expected == 0.0:\r\n                  max_rel_diff = math.inf\r\n              else:\r\n                  max_rel_diff = max(\r\n                      max_rel_diff,\r\n                      abs((approx_value.expected - other_value) / approx_value.expected),\r\n                  )\r\n              different_ids.append(approx_key)\r\n```\r\n\r\n\nI would like to fix this.",
  "created_at": "2023-01-01T10:54:40Z",
  "version": "7.2",
  "FAIL_TO_PASS": "[\"testing/python/approx.py::TestApprox::test_dict_for_div_by_zero\"]",
  "PASS_TO_PASS": "[\"testing/python/approx.py::TestApprox::test_error_messages_native_dtypes\", \"testing/python/approx.py::TestApprox::test_repr_string\", \"testing/python/approx.py::TestApprox::test_repr_complex_numbers\", \"testing/python/approx.py::TestApprox::test_bool\", \"testing/python/approx.py::TestApprox::test_operator_overloading\", \"testing/python/approx.py::TestApprox::test_exactly_equal\", \"testing/python/approx.py::TestApprox::test_opposite_sign\", \"testing/python/approx.py::TestApprox::test_zero_tolerance\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100-None]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[None--1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[1e+100--1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100-1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100--1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance_message\", \"testing/python/approx.py::TestApprox::test_inf_tolerance\", \"testing/python/approx.py::TestApprox::test_inf_tolerance_expecting_zero\", \"testing/python/approx.py::TestApprox::test_nan_tolerance\", \"testing/python/approx.py::TestApprox::test_reasonable_defaults\", \"testing/python/approx.py::TestApprox::test_default_tolerances\", \"testing/python/approx.py::TestApprox::test_custom_tolerances\", \"testing/python/approx.py::TestApprox::test_relative_tolerance\", \"testing/python/approx.py::TestApprox::test_absolute_tolerance\", \"testing/python/approx.py::TestApprox::test_expecting_zero\", \"testing/python/approx.py::TestApprox::test_expecting_inf\", \"testing/python/approx.py::TestApprox::test_expecting_nan\", \"testing/python/approx.py::TestApprox::test_int\", \"testing/python/approx.py::TestApprox::test_decimal\", \"testing/python/approx.py::TestApprox::test_fraction\", \"testing/python/approx.py::TestApprox::test_complex\", \"testing/python/approx.py::TestApprox::test_list\", \"testing/python/approx.py::TestApprox::test_list_decimal\", \"testing/python/approx.py::TestApprox::test_list_wrong_len\", \"testing/python/approx.py::TestApprox::test_tuple\", \"testing/python/approx.py::TestApprox::test_tuple_wrong_len\", \"testing/python/approx.py::TestApprox::test_tuple_vs_other\", \"testing/python/approx.py::TestApprox::test_dict\", \"testing/python/approx.py::TestApprox::test_dict_decimal\", \"testing/python/approx.py::TestApprox::test_dict_wrong_len\", \"testing/python/approx.py::TestApprox::test_dict_nonnumeric\", \"testing/python/approx.py::TestApprox::test_dict_vs_other\", \"testing/python/approx.py::TestApprox::test_doctests\", \"testing/python/approx.py::TestApprox::test_expected_value_type_error[nested-list]\", \"testing/python/approx.py::TestApprox::test_expected_value_type_error[nested-dict]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[None]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[nested-str]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[dict-with-string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[nested-str]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[dict-with-string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_dict_repr\", \"testing/python/approx.py::TestApprox::test_nonnumeric_list_repr\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[<=]\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[<]\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[>=]\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[>]\", \"testing/python/approx.py::TestApprox::test_generic_ordered_sequence\", \"testing/python/approx.py::TestApprox::test_allow_ordered_sequences_only\", \"testing/python/approx.py::TestRecursiveSequenceMap::test_map_over_scalar\", \"testing/python/approx.py::TestRecursiveSequenceMap::test_map_over_empty_list\", \"testing/python/approx.py::TestRecursiveSequenceMap::test_map_over_list\", \"testing/python/approx.py::TestRecursiveSequenceMap::test_map_over_tuple\", \"testing/python/approx.py::TestRecursiveSequenceMap::test_map_over_nested_lists\", \"testing/python/approx.py::TestRecursiveSequenceMap::test_map_over_mixed_sequence\", \"testing/python/approx.py::TestApprox::test_unicode_plus_minus\"]",
  "environment_setup_commit": "572b5657d7ca557593418ce0319fabff88800c73",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.922830",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}