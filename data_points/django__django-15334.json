{
  "repo": "django/django",
  "instance_id": "django__django-15334",
  "base_commit": "c27932ec938217d4fbb0adad23c0d0708f83f690",
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -5,7 +5,7 @@\n import copy\n import operator\n import warnings\n-from itertools import chain\n+from itertools import chain, islice\n \n import django\n from django.conf import settings\n@@ -23,6 +23,7 @@\n from django.db.models.sql.constants import CURSOR, GET_ITERATOR_CHUNK_SIZE\n from django.db.models.utils import create_namedtuple_class, resolve_callables\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango50Warning\n from django.utils.functional import cached_property, partition\n \n # The maximum number of results to fetch in a get() query.\n@@ -356,14 +357,40 @@ def __or__(self, other):\n     ####################################\n \n     def _iterator(self, use_chunked_fetch, chunk_size):\n-        yield from self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size)\n+        iterable = self._iterable_class(\n+            self,\n+            chunked_fetch=use_chunked_fetch,\n+            chunk_size=chunk_size or 2000,\n+        )\n+        if not self._prefetch_related_lookups or chunk_size is None:\n+            yield from iterable\n+            return\n+\n+        iterator = iter(iterable)\n+        while results := list(islice(iterator, chunk_size)):\n+            prefetch_related_objects(results, *self._prefetch_related_lookups)\n+            yield from results\n \n-    def iterator(self, chunk_size=2000):\n+    def iterator(self, chunk_size=None):\n         \"\"\"\n         An iterator over the results from applying this QuerySet to the\n-        database.\n-        \"\"\"\n-        if chunk_size <= 0:\n+        database. chunk_size must be provided for QuerySets that prefetch\n+        related objects. Otherwise, a default chunk_size of 2000 is supplied.\n+        \"\"\"\n+        if chunk_size is None:\n+            if self._prefetch_related_lookups:\n+                # When the deprecation ends, replace with:\n+                # raise ValueError(\n+                #     'chunk_size must be provided when using '\n+                #     'QuerySet.iterator() after prefetch_related().'\n+                # )\n+                warnings.warn(\n+                    'Using QuerySet.iterator() after prefetch_related() '\n+                    'without specifying chunk_size is deprecated.',\n+                    category=RemovedInDjango50Warning,\n+                    stacklevel=2,\n+                )\n+        elif chunk_size <= 0:\n             raise ValueError('Chunk size must be strictly positive.')\n         use_chunked_fetch = not connections[self.db].settings_dict.get('DISABLE_SERVER_SIDE_CURSORS')\n         return self._iterator(use_chunked_fetch, chunk_size)\n",
  "test_patch": "diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py\n--- a/tests/prefetch_related/tests.py\n+++ b/tests/prefetch_related/tests.py\n@@ -7,7 +7,8 @@\n from django.db.models.query import get_prefetcher\n from django.db.models.sql import Query\n from django.test import TestCase, override_settings\n-from django.test.utils import CaptureQueriesContext\n+from django.test.utils import CaptureQueriesContext, ignore_warnings\n+from django.utils.deprecation import RemovedInDjango50Warning\n \n from .models import (\n     Article, Author, Author2, AuthorAddress, AuthorWithAge, Bio, Book,\n@@ -316,6 +317,38 @@ def test_named_values_list(self):\n             ['Anne', 'Charlotte', 'Emily', 'Jane'],\n         )\n \n+    def test_m2m_prefetching_iterator_with_chunks(self):\n+        with self.assertNumQueries(3):\n+            authors = [\n+                b.authors.first()\n+                for b in Book.objects.prefetch_related('authors').iterator(chunk_size=2)\n+            ]\n+        self.assertEqual(\n+            authors,\n+            [self.author1, self.author1, self.author3, self.author4],\n+        )\n+\n+    @ignore_warnings(category=RemovedInDjango50Warning)\n+    def test_m2m_prefetching_iterator_without_chunks(self):\n+        # prefetch_related() is ignored.\n+        with self.assertNumQueries(5):\n+            authors = [\n+                b.authors.first()\n+                for b in Book.objects.prefetch_related('authors').iterator()\n+            ]\n+        self.assertEqual(\n+            authors,\n+            [self.author1, self.author1, self.author3, self.author4],\n+        )\n+\n+    def test_m2m_prefetching_iterator_without_chunks_warning(self):\n+        msg = (\n+            'Using QuerySet.iterator() after prefetch_related() without '\n+            'specifying chunk_size is deprecated.'\n+        )\n+        with self.assertWarnsMessage(RemovedInDjango50Warning, msg):\n+            Book.objects.prefetch_related('authors').iterator()\n+\n \n class RawQuerySetTests(TestDataMixin, TestCase):\n     def test_basic(self):\n",
  "problem_statement": "Support prefetch_related() with Queryset.iterator()\nDescription\n\t \n\t\t(last modified by Asif Saifuddin Auvi)\n\t \nI was surprised when I found out that prefetch_related calls are ignored when using Queryset.iterator. I noticed in the docs here ​https://docs.djangoproject.com/en/dev/ref/models/querysets/#iterator that it is because the \"these two optimizations do not make sense together.\" That may have been true in the past, but it is definitely not the case now. The iterator allows chunking (by default 2000) and it would be very helpful to prefetch related for each chunk.\n",
  "hints_text": "The situation isn't completely straightforward. There's a discussion on ​django-developers. Accepting the ticket to do something.\nI've created a proof of concept implementation ​https://github.com/django/django/pull/10707/ I think prefetching is probably closer to what a user would expect from the api.\nPatch needs both documentation and a deprecation warning when self._prefetch_related_lookups and chunk_size is None. The idea is to eventually turn this deprecation warning into an error and never performs prefetching unless a chunk size is specified.",
  "created_at": "2022-01-19T15:02:50Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_m2m_prefetching_iterator_with_chunks (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_prefetching_iterator_without_chunks_warning (prefetch_related.tests.PrefetchRelatedTests)\"]",
  "PASS_TO_PASS": "[\"test_bug (prefetch_related.tests.Ticket19607Tests)\", \"test_bug (prefetch_related.tests.Ticket21760Tests)\", \"The prefetched relationship is used rather than populating the reverse\", \"test_bug (prefetch_related.tests.Ticket21410Tests)\", \"test_order (prefetch_related.tests.LookupOrderingTest)\", \"test_m2m_then_m2m (prefetch_related.tests.DefaultManagerTests)\", \"When intermediary results are prefetched without a destination\", \"test_foreignkey (prefetch_related.tests.ForeignKeyToFieldTest)\", \"test_m2m (prefetch_related.tests.ForeignKeyToFieldTest)\", \"test_m2m_manager_reused (prefetch_related.tests.ForeignKeyToFieldTest)\", \"test_basic (prefetch_related.tests.RawQuerySetTests)\", \"test_clear (prefetch_related.tests.RawQuerySetTests)\", \"test_prefetch_before_raw (prefetch_related.tests.RawQuerySetTests)\", \"test_add_clears_prefetched_objects (prefetch_related.tests.DirectPrefetchedObjectCacheReuseTests)\", \"Nested prefetch_related() shouldn't trigger duplicate queries for the same\", \"test_detect_is_fetched_with_to_attr (prefetch_related.tests.DirectPrefetchedObjectCacheReuseTests)\", \"test_prefetch_reverse_foreign_key (prefetch_related.tests.DirectPrefetchedObjectCacheReuseTests)\", \"test_remove_clears_prefetched_objects (prefetch_related.tests.DirectPrefetchedObjectCacheReuseTests)\", \"In-bulk does correctly prefetch objects by not using .iterator()\", \"test_prefetch_nullable (prefetch_related.tests.NullableTest)\", \"test_traverse_nullable (prefetch_related.tests.NullableTest)\", \"test_child_link_prefetch (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_foreignkey (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_foreignkey_to_inherited (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_m2m_to_inheriting_model (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_parent_link_prefetch (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_using_is_honored_custom_qs (prefetch_related.tests.MultiDbTests)\", \"test_using_is_honored_fkey (prefetch_related.tests.MultiDbTests)\", \"test_using_is_honored_inheritance (prefetch_related.tests.MultiDbTests)\", \"test_using_is_honored_m2m (prefetch_related.tests.MultiDbTests)\", \"test_charfield_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_custom_queryset (prefetch_related.tests.GenericRelationTests)\", \"test_deleted_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_generic_relation (prefetch_related.tests.GenericRelationTests)\", \"test_nullable_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_prefetch_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_prefetch_GFK_fk_pk (prefetch_related.tests.GenericRelationTests)\", \"test_prefetch_GFK_nonint_pk (prefetch_related.tests.GenericRelationTests)\", \"test_prefetch_GFK_uuid_pk (prefetch_related.tests.GenericRelationTests)\", \"A 'content_object' can be traversed with prefetch_related() and\", \"test_attribute_error (prefetch_related.tests.PrefetchRelatedTests)\", \"test_bool (prefetch_related.tests.PrefetchRelatedTests)\", \"test_clear (prefetch_related.tests.PrefetchRelatedTests)\", \"test_count (prefetch_related.tests.PrefetchRelatedTests)\", \"test_exists (prefetch_related.tests.PrefetchRelatedTests)\", \"Related filtering of prefetched querysets is deferred on m2m and\", \"A m2m relation can be followed after a relation like ForeignKey that\", \"test_foreignkey_forward (prefetch_related.tests.PrefetchRelatedTests)\", \"test_foreignkey_reverse (prefetch_related.tests.PrefetchRelatedTests)\", \"test_forward_m2m_to_attr_conflict (prefetch_related.tests.PrefetchRelatedTests)\", \"Objects retrieved with .get() get the prefetch behavior.\", \"Regression test for #20242 - QuerySet \\\"in\\\" didn't work the first time\", \"test_invalid_final_lookup (prefetch_related.tests.PrefetchRelatedTests)\", \"test_len (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_forward (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_prefetching_iterator_without_chunks (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_reverse (prefetch_related.tests.PrefetchRelatedTests)\", \"A m2m can be followed through another m2m.\", \"test_m2m_then_m2m_object_ids (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_then_reverse_fk_object_ids (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_then_reverse_one_to_one_object_ids (prefetch_related.tests.PrefetchRelatedTests)\", \"test_named_values_list (prefetch_related.tests.PrefetchRelatedTests)\", \"test_onetoone_reverse_no_match (prefetch_related.tests.PrefetchRelatedTests)\", \"A model (Bio) with a OneToOneField primary key (author) that references\", \"test_overriding_prefetch (prefetch_related.tests.PrefetchRelatedTests)\", \"test_prefetch_eq (prefetch_related.tests.PrefetchRelatedTests)\", \"test_reverse_m2m_to_attr_conflict (prefetch_related.tests.PrefetchRelatedTests)\", \"A m2m relation can be followed after going through the select_related\", \"test_survives_clone (prefetch_related.tests.PrefetchRelatedTests)\", \"test_ambiguous (prefetch_related.tests.CustomPrefetchTests)\", \"test_custom_qs (prefetch_related.tests.CustomPrefetchTests)\", \"Related filtering of prefetched querysets is deferred until necessary.\", \"test_generic_rel (prefetch_related.tests.CustomPrefetchTests)\", \"test_m2m (prefetch_related.tests.CustomPrefetchTests)\", \"test_m2m_through_fk (prefetch_related.tests.CustomPrefetchTests)\", \"test_m2m_through_gfk (prefetch_related.tests.CustomPrefetchTests)\", \"test_nested_prefetch_related_are_not_overwritten (prefetch_related.tests.CustomPrefetchTests)\", \"Nested prefetches whose name clashes with descriptor names\", \"test_o2m_through_m2m (prefetch_related.tests.CustomPrefetchTests)\", \"test_raw_queryset (prefetch_related.tests.CustomPrefetchTests)\", \"test_reverse_m2m (prefetch_related.tests.CustomPrefetchTests)\", \"test_to_attr_cached_property (prefetch_related.tests.CustomPrefetchTests)\", \"test_to_attr_doesnt_cache_through_attr_as_list (prefetch_related.tests.CustomPrefetchTests)\", \"test_traverse_multiple_items_property (prefetch_related.tests.CustomPrefetchTests)\", \"test_traverse_qs (prefetch_related.tests.CustomPrefetchTests)\", \"test_traverse_single_item_property (prefetch_related.tests.CustomPrefetchTests)\", \"test_values_queryset (prefetch_related.tests.CustomPrefetchTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.725941",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}