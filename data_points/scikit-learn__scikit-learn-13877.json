{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13877",
  "base_commit": "88846b3be23e96553fb90d0c5575d74ffd8dbff2",
  "patch": "diff --git a/sklearn/metrics/pairwise.py b/sklearn/metrics/pairwise.py\n--- a/sklearn/metrics/pairwise.py\n+++ b/sklearn/metrics/pairwise.py\n@@ -1182,17 +1182,23 @@ def _parallel_pairwise(X, Y, func, n_jobs, **kwds):\n \n     if Y is None:\n         Y = X\n+    X, Y, dtype = _return_float_dtype(X, Y)\n \n     if effective_n_jobs(n_jobs) == 1:\n         return func(X, Y, **kwds)\n \n     # enforce a threading backend to prevent data communication overhead\n     fd = delayed(_dist_wrapper)\n-    ret = np.empty((X.shape[0], Y.shape[0]), dtype=X.dtype, order='F')\n+    ret = np.empty((X.shape[0], Y.shape[0]), dtype=dtype, order='F')\n     Parallel(backend=\"threading\", n_jobs=n_jobs)(\n         fd(func, ret, s, X, Y[s], **kwds)\n         for s in gen_even_slices(_num_samples(Y), effective_n_jobs(n_jobs)))\n \n+    if (X is Y or Y is None) and func is euclidean_distances:\n+        # zeroing diagonal for euclidean norm.\n+        # TODO: do it also for other norms.\n+        np.fill_diagonal(ret, 0)\n+\n     return ret\n \n \n",
  "test_patch": "diff --git a/sklearn/metrics/tests/test_pairwise.py b/sklearn/metrics/tests/test_pairwise.py\n--- a/sklearn/metrics/tests/test_pairwise.py\n+++ b/sklearn/metrics/tests/test_pairwise.py\n@@ -231,31 +231,6 @@ def test_pairwise_precomputed_non_negative():\n                          metric='precomputed')\n \n \n-def check_pairwise_parallel(func, metric, kwds):\n-    rng = np.random.RandomState(0)\n-    for make_data in (np.array, csr_matrix):\n-        X = make_data(rng.random_sample((5, 4)))\n-        Y = make_data(rng.random_sample((3, 4)))\n-\n-        try:\n-            S = func(X, metric=metric, n_jobs=1, **kwds)\n-        except (TypeError, ValueError) as exc:\n-            # Not all metrics support sparse input\n-            # ValueError may be triggered by bad callable\n-            if make_data is csr_matrix:\n-                assert_raises(type(exc), func, X, metric=metric,\n-                              n_jobs=2, **kwds)\n-                continue\n-            else:\n-                raise\n-        S2 = func(X, metric=metric, n_jobs=2, **kwds)\n-        assert_array_almost_equal(S, S2)\n-\n-        S = func(X, Y, metric=metric, n_jobs=1, **kwds)\n-        S2 = func(X, Y, metric=metric, n_jobs=2, **kwds)\n-        assert_array_almost_equal(S, S2)\n-\n-\n _wminkowski_kwds = {'w': np.arange(1, 5).astype('double', copy=False), 'p': 1}\n \n \n@@ -272,8 +247,30 @@ def callable_rbf_kernel(x, y, **kwds):\n          (pairwise_distances, 'wminkowski', _wminkowski_kwds),\n          (pairwise_kernels, 'polynomial', {'degree': 1}),\n          (pairwise_kernels, callable_rbf_kernel, {'gamma': .1})])\n-def test_pairwise_parallel(func, metric, kwds):\n-    check_pairwise_parallel(func, metric, kwds)\n+@pytest.mark.parametrize('array_constr', [np.array, csr_matrix])\n+@pytest.mark.parametrize('dtype', [np.float64, int])\n+def test_pairwise_parallel(func, metric, kwds, array_constr, dtype):\n+    rng = np.random.RandomState(0)\n+    X = array_constr(5 * rng.random_sample((5, 4)), dtype=dtype)\n+    Y = array_constr(5 * rng.random_sample((3, 4)), dtype=dtype)\n+\n+    try:\n+        S = func(X, metric=metric, n_jobs=1, **kwds)\n+    except (TypeError, ValueError) as exc:\n+        # Not all metrics support sparse input\n+        # ValueError may be triggered by bad callable\n+        if array_constr is csr_matrix:\n+            with pytest.raises(type(exc)):\n+                func(X, metric=metric, n_jobs=2, **kwds)\n+            return\n+        else:\n+            raise\n+    S2 = func(X, metric=metric, n_jobs=2, **kwds)\n+    assert_allclose(S, S2)\n+\n+    S = func(X, Y, metric=metric, n_jobs=1, **kwds)\n+    S2 = func(X, Y, metric=metric, n_jobs=2, **kwds)\n+    assert_allclose(S, S2)\n \n \n def test_pairwise_callable_nonstrict_metric():\n@@ -546,6 +543,16 @@ def test_pairwise_distances_chunked_diagonal(metric):\n     assert_array_almost_equal(np.diag(np.vstack(chunks)), 0, decimal=10)\n \n \n+@pytest.mark.parametrize(\n+        'metric',\n+        ('euclidean', 'l2', 'sqeuclidean'))\n+def test_parallel_pairwise_distances_diagonal(metric):\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(size=(1000, 10), scale=1e10)\n+    distances = pairwise_distances(X, metric=metric, n_jobs=2)\n+    assert_allclose(np.diag(distances), 0, atol=1e-10)\n+\n+\n @ignore_warnings\n def test_pairwise_distances_chunked():\n     # Test the pairwise_distance helper function.\n",
  "problem_statement": "pairwise_distances returns zeros for metric cosine when executed in parallel\n#### Description\r\n`pairwise_distances` returns a list of zeros when calculating `cosine` with `n_jobs` equal to -1 or greater than 2. Using `n_jobs=1` calculates the expected results.\r\n\r\nUsing the metric `euclidean` returns non-zero results, but the values seem to be integers instead of floats.\r\n\r\n#### Steps/Code to Reproduce\r\n```python\r\nimport numpy as np\r\nfrom sklearn.metrics import pairwise_distances\r\n\r\nX = np.array([\r\n    [1, 3],\r\n    [2, 1],\r\n    [3, 2]\r\n])\r\npairwise_distances(X, metric='cosine', n_jobs=-1)\r\n```\r\n\r\n#### Expected Results\r\n```\r\n[[0.         0.29289322 0.21064778]\r\n [0.29289322 0.         0.00772212]\r\n [0.21064778 0.00772212 0.        ]]\r\n```\r\n\r\n#### Actual Results\r\n```\r\n[[0 0 0]\r\n [0 0 0]\r\n [0 0 0]]\r\n```\r\n\r\n#### Details\r\nI executed `pairwise_distances` with different values for `metric` and `n_jobs`. The outputs were as follows:\r\n```\r\nX:\r\n[[1 3]\r\n [2 1]\r\n [3 2]]\r\n\r\n\r\nmetric=cosine, n_jobs=-1:\r\n[[0 0 0]\r\n [0 0 0]\r\n [0 0 0]]\r\n\r\nmetric=cosine, n_jobs=1:\r\n[[0.         0.29289322 0.21064778]\r\n [0.29289322 0.         0.00772212]\r\n [0.21064778 0.00772212 0.        ]]\r\n\r\nmetric=cosine, n_jobs=2:\r\n[[0 0 0]\r\n [0 0 0]\r\n [0 0 0]]\r\n\r\n\r\nmetric=euclidean, n_jobs=-1:\r\n[[0 2 2]\r\n [2 0 1]\r\n [2 1 0]]\r\n\r\nmetric=euclidean, n_jobs=1:\r\n[[0.         2.23606798 2.23606798]\r\n [2.23606798 0.         1.41421356]\r\n [2.23606798 1.41421356 0.        ]]\r\n\r\nmetric=euclidean, n_jobs=2:\r\n[[0 2 2]\r\n [2 0 1]\r\n [2 1 0]]\r\n```\r\n\r\n#### Versions\r\n```\r\nSystem:\r\n    python: 3.6.7 (default, Nov 21 2018, 09:28:58)  [GCC 8.2.1 20180831]\r\nexecutable: /home/lennart/tool-playground/jupyter/.venv-3.6/bin/python3.6\r\n   machine: Linux-5.0.9-2-MANJARO-x86_64-with-arch-Manjaro-Linux\r\n\r\nBLAS:\r\n    macros: NO_ATLAS_INFO=1\r\n  lib_dirs: /usr/lib64\r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 19.0.3\r\nsetuptools: 39.0.1\r\n   sklearn: 0.21.0\r\n     numpy: 1.16.2\r\n     scipy: 1.2.1\r\n    Cython: None\r\n    pandas: 0.24.1\r\n```\r\n\n",
  "hints_text": "Thanks for the thorough report. It seems to be casting to integer dtype here:\r\nhttps://github.com/scikit-learn/scikit-learn/blob/88846b3be23e96553fb90d0c5575d74ffd8dbff2/sklearn/metrics/pairwise.py#L1191\r\n\r\nI think instead it should be using the dtype of the return values, or else something like `_return_float_dtype`. https://github.com/scikit-learn/scikit-learn/blob/88846b3be23e96553fb90d0c5575d74ffd8dbff2/sklearn/metrics/pairwise.py#L37-L58\r\n\r\nA pull request adding a test and fixing this is very welcome.",
  "created_at": "2019-05-14T14:14:47Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_distances-euclidean-kwds0]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_distances-euclidean-kwds0]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_kernels-polynomial-kwds3]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_kernels-callable_rbf_kernel-kwds4]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_distances-euclidean-kwds0]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_kernels-polynomial-kwds3]\", \"sklearn/metrics/tests/test_pairwise.py::test_parallel_pairwise_distances_diagonal[euclidean]\", \"sklearn/metrics/tests/test_pairwise.py::test_parallel_pairwise_distances_diagonal[l2]\"]",
  "PASS_TO_PASS": "[\"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[dice]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[jaccard]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[kulsinski]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[matching]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[rogerstanimoto]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[russellrao]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[sokalmichener]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[sokalsneath]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[yule]\", \"sklearn/metrics/tests/test_pairwise.py::test_no_data_conversion_warning\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed[pairwise_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed[pairwise_kernels]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed_non_negative\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_distances-wminkowski-kwds1]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_distances-wminkowski-kwds2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_kernels-polynomial-kwds3]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_kernels-callable_rbf_kernel-kwds4]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_distances-euclidean-kwds0]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_distances-wminkowski-kwds1]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_distances-wminkowski-kwds2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_kernels-polynomial-kwds3]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_kernels-callable_rbf_kernel-kwds4]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_distances-wminkowski-kwds1]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_distances-wminkowski-kwds2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_distances-wminkowski-kwds1]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_distances-wminkowski-kwds2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_kernels-callable_rbf_kernel-kwds4]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_callable_nonstrict_metric\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[rbf]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[laplacian]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[sigmoid]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[polynomial]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[linear]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[chi2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[additive_chi2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels_callable\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels_filter_param\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[cosine-paired_cosine_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[euclidean-paired_euclidean_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[l2-paired_euclidean_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[l1-paired_manhattan_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[manhattan-paired_manhattan_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[cityblock-paired_manhattan_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances_callable\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_argmin_min\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>0]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>1]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>3]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>4]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-ValueError-length\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-TypeError-returned\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-TypeError-,\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[euclidean]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[l2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[sqeuclidean]\", \"sklearn/metrics/tests/test_pairwise.py::test_parallel_pairwise_distances_diagonal[sqeuclidean]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[dense-dense]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[dense-sparse]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[sparse-dense]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[sparse-sparse]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[dense-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[dense-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[sparse-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[sparse-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-dense-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-dense-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-sparse-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-sparse-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-dense-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-dense-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-sparse-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-sparse-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[dense-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[dense-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[sparse-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[sparse-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_extreme_values[1-float32-0.0001-1e-05]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_extreme_values[1000000-float32-0.0001-1e-05]\", \"sklearn/metrics/tests/test_pairwise.py::test_cosine_distances\", \"sklearn/metrics/tests/test_pairwise.py::test_haversine_distances\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_euclidean_distances\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_manhattan_distances\", \"sklearn/metrics/tests/test_pairwise.py::test_chi_square_kernel\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[linear_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[polynomial_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[rbf_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[laplacian_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[sigmoid_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[cosine_similarity]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[linear_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[polynomial_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[rbf_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[laplacian_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[sigmoid_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[cosine_similarity]\", \"sklearn/metrics/tests/test_pairwise.py::test_linear_kernel\", \"sklearn/metrics/tests/test_pairwise.py::test_rbf_kernel\", \"sklearn/metrics/tests/test_pairwise.py::test_laplacian_kernel\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_similarity_sparse_output[linear-linear_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_similarity_sparse_output[cosine-cosine_similarity]\", \"sklearn/metrics/tests/test_pairwise.py::test_cosine_similarity\", \"sklearn/metrics/tests/test_pairwise.py::test_check_dense_matrices\", \"sklearn/metrics/tests/test_pairwise.py::test_check_XB_returned\", \"sklearn/metrics/tests/test_pairwise.py::test_check_different_dimensions\", \"sklearn/metrics/tests/test_pairwise.py::test_check_invalid_dimensions\", \"sklearn/metrics/tests/test_pairwise.py::test_check_sparse_arrays\", \"sklearn/metrics/tests/test_pairwise.py::test_check_tuple_input\", \"sklearn/metrics/tests/test_pairwise.py::test_check_preserve_type\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_data_derived_params[Y\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.999326",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}