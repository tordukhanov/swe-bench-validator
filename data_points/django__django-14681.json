{
  "repo": "django/django",
  "instance_id": "django__django-14681",
  "base_commit": "6b513f01374da8e8f38e231f0ff95e8c095d3239",
  "patch": "diff --git a/django/middleware/csrf.py b/django/middleware/csrf.py\n--- a/django/middleware/csrf.py\n+++ b/django/middleware/csrf.py\n@@ -11,6 +11,7 @@\n \n from django.conf import settings\n from django.core.exceptions import DisallowedHost, ImproperlyConfigured\n+from django.http import UnreadablePostError\n from django.http.request import HttpHeaders\n from django.urls import get_callable\n from django.utils.cache import patch_vary_headers\n@@ -342,7 +343,7 @@ def _check_token(self, request):\n         if request.method == 'POST':\n             try:\n                 request_csrf_token = request.POST.get('csrfmiddlewaretoken', '')\n-            except OSError:\n+            except UnreadablePostError:\n                 # Handle a broken connection before we've completed reading the\n                 # POST data. process_view shouldn't raise any exceptions, so\n                 # we'll ignore and serve the user a 403 (assuming they're still\n",
  "test_patch": "diff --git a/tests/csrf_tests/tests.py b/tests/csrf_tests/tests.py\n--- a/tests/csrf_tests/tests.py\n+++ b/tests/csrf_tests/tests.py\n@@ -3,7 +3,7 @@\n from django.conf import settings\n from django.contrib.sessions.backends.cache import SessionStore\n from django.core.exceptions import ImproperlyConfigured\n-from django.http import HttpRequest, HttpResponse\n+from django.http import HttpRequest, HttpResponse, UnreadablePostError\n from django.middleware.csrf import (\n     CSRF_ALLOWED_CHARS, CSRF_SESSION_KEY, CSRF_TOKEN_LENGTH, REASON_BAD_ORIGIN,\n     REASON_CSRF_TOKEN_MISSING, REASON_NO_CSRF_COOKIE, CsrfViewMiddleware,\n@@ -99,6 +99,23 @@ def is_secure(self):\n         return getattr(self, '_is_secure_override', False)\n \n \n+class PostErrorRequest(TestingHttpRequest):\n+    \"\"\"\n+    TestingHttpRequest that can raise errors when accessing POST data.\n+    \"\"\"\n+    post_error = None\n+\n+    def _get_post(self):\n+        if self.post_error is not None:\n+            raise self.post_error\n+        return self._post\n+\n+    def _set_post(self, post):\n+        self._post = post\n+\n+    POST = property(_get_post, _set_post)\n+\n+\n class CsrfViewMiddlewareTestMixin:\n     \"\"\"\n     Shared methods and tests for session-based and cookie-based tokens.\n@@ -131,10 +148,12 @@ def assertCookiesSet(self, req, resp, expected_secrets):\n         secrets_set = [_unmask_cipher_token(cookie) for cookie in cookies_set]\n         self.assertEqual(secrets_set, expected_secrets)\n \n-    def _get_request(self, method=None, cookie=None):\n+    def _get_request(self, method=None, cookie=None, request_class=None):\n         if method is None:\n             method = 'GET'\n-        req = TestingHttpRequest()\n+        if request_class is None:\n+            request_class = TestingHttpRequest\n+        req = request_class()\n         req.method = method\n         if cookie is not None:\n             self._set_csrf_cookie(req, cookie)\n@@ -142,7 +161,7 @@ def _get_request(self, method=None, cookie=None):\n \n     def _get_csrf_cookie_request(\n         self, method=None, cookie=None, post_token=None, meta_token=None,\n-        token_header=None,\n+        token_header=None, request_class=None,\n     ):\n         \"\"\"\n         The method argument defaults to \"GET\". The cookie argument defaults to\n@@ -156,7 +175,11 @@ def _get_csrf_cookie_request(\n             cookie = self._csrf_id_cookie\n         if token_header is None:\n             token_header = 'HTTP_X_CSRFTOKEN'\n-        req = self._get_request(method=method, cookie=cookie)\n+        req = self._get_request(\n+            method=method,\n+            cookie=cookie,\n+            request_class=request_class,\n+        )\n         if post_token is not None:\n             req.POST['csrfmiddlewaretoken'] = post_token\n         if meta_token is not None:\n@@ -165,15 +188,21 @@ def _get_csrf_cookie_request(\n \n     def _get_POST_csrf_cookie_request(\n         self, cookie=None, post_token=None, meta_token=None, token_header=None,\n+        request_class=None,\n     ):\n         return self._get_csrf_cookie_request(\n             method='POST', cookie=cookie, post_token=post_token,\n             meta_token=meta_token, token_header=token_header,\n+            request_class=request_class,\n         )\n \n-    def _get_POST_request_with_token(self, cookie=None):\n+    def _get_POST_request_with_token(self, cookie=None, request_class=None):\n         \"\"\"The cookie argument defaults to this class's default test cookie.\"\"\"\n-        return self._get_POST_csrf_cookie_request(cookie=cookie, post_token=self._csrf_id_token)\n+        return self._get_POST_csrf_cookie_request(\n+            cookie=cookie,\n+            post_token=self._csrf_id_token,\n+            request_class=request_class,\n+        )\n \n     def _check_token_present(self, response, csrf_id=None):\n         text = str(response.content, response.charset)\n@@ -699,52 +728,19 @@ def test_ensures_csrf_cookie_no_logging(self):\n             req = self._get_request()\n             ensure_csrf_cookie_view(req)\n \n-    def test_post_data_read_failure(self):\n+    def test_reading_post_data_raises_unreadable_post_error(self):\n         \"\"\"\n-        OSErrors during POST data reading are caught and treated as if the\n-        POST data wasn't there (#20128).\n+        An UnreadablePostError raised while reading the POST data should be\n+        handled by the middleware.\n         \"\"\"\n-        class CsrfPostRequest(HttpRequest):\n-            \"\"\"\n-            HttpRequest that can raise an OSError when accessing POST data\n-            \"\"\"\n-            def __init__(self, token, raise_error):\n-                super().__init__()\n-                self.method = 'POST'\n-\n-                self.raise_error = False\n-                self.COOKIES[settings.CSRF_COOKIE_NAME] = token\n-\n-                # Handle both cases here to prevent duplicate code in the\n-                # session tests.\n-                self.session = {}\n-                self.session[CSRF_SESSION_KEY] = token\n-\n-                self.POST['csrfmiddlewaretoken'] = token\n-                self.raise_error = raise_error\n-\n-            def _load_post_and_files(self):\n-                raise OSError('error reading input data')\n-\n-            def _get_post(self):\n-                if self.raise_error:\n-                    self._load_post_and_files()\n-                return self._post\n-\n-            def _set_post(self, post):\n-                self._post = post\n-\n-            POST = property(_get_post, _set_post)\n-\n-        token = ('ABC' + self._csrf_id_token)[:CSRF_TOKEN_LENGTH]\n-\n-        req = CsrfPostRequest(token, raise_error=False)\n+        req = self._get_POST_request_with_token()\n         mw = CsrfViewMiddleware(post_form_view)\n         mw.process_request(req)\n         resp = mw.process_view(req, post_form_view, (), {})\n         self.assertIsNone(resp)\n \n-        req = CsrfPostRequest(token, raise_error=True)\n+        req = self._get_POST_request_with_token(request_class=PostErrorRequest)\n+        req.post_error = UnreadablePostError('Error reading input data.')\n         mw.process_request(req)\n         with self.assertLogs('django.security.csrf', 'WARNING') as cm:\n             resp = mw.process_view(req, post_form_view, (), {})\n@@ -754,6 +750,18 @@ def _set_post(self, post):\n             'Forbidden (%s): ' % REASON_CSRF_TOKEN_MISSING,\n         )\n \n+    def test_reading_post_data_raises_os_error(self):\n+        \"\"\"\n+        An OSError raised while reading the POST data should not be handled by\n+        the middleware.\n+        \"\"\"\n+        mw = CsrfViewMiddleware(post_form_view)\n+        req = self._get_POST_request_with_token(request_class=PostErrorRequest)\n+        req.post_error = OSError('Deleted directories/Missing permissions.')\n+        mw.process_request(req)\n+        with self.assertRaises(OSError):\n+            mw.process_view(req, post_form_view, (), {})\n+\n     @override_settings(ALLOWED_HOSTS=['www.example.com'])\n     def test_bad_origin_bad_domain(self):\n         \"\"\"A request with a bad origin is rejected.\"\"\"\n",
  "problem_statement": "CSRF failure incorrectly reported on upload when there is a problem with storage\nDescription\n\t\nMinimal reproduction app is in the attachment, although the only changes from the default template are:\ncsrfbug/settings.py:\nMEDIA_URL = '/media/'\nMEDIA_ROOT = 'media/'\nFILE_UPLOAD_MAX_MEMORY_SIZE = 1024 * 1024\nFILE_UPLOAD_TEMP_DIR = MEDIA_ROOT + 'tmp'\napp/models.py\nclass File(models.Model):\n\tfile = models.FileField()\napp/admin.py\nfrom .models import File\nadmin.site.register(File)\nRequired setup for the attached app:\npython manage.py migrate\npython manage.py createsuperuser\nSteps to reproduce\n1) runserver\n2) navigate and login to /admin/\n3) navigate to /admin/app/file/add/\nScenario 1. default state - file uploads works as expected\nScenario 2. remove media/tmp directory - file uploads works only for files that fit in FILE_UPLOAD_MAX_MEMORY_SIZE, error otherwise (see below)\nScenario 3. remove whole media directory - error reported for all file uploads (see below)\nExact error message:\nForbidden (403)\nCSRF verification failed. Request aborted.\nReason given for failure: CSRF token missing or incorrect.\nExpected behaviour:\nFilesystem error or similar reporting incorrect media storage setup. \nComment:\nYes, the setup in this scenario is invalid to begin with, but the error message has nothing to do with the actual problem. \nI suspect a real problem with an underlying filesystem will also get covered in the same way.\n",
  "hints_text": "minimal reproduction app\nI think the \"problem with storage\" is that TemporaryUploadedFile fails silently if FILE_UPLOAD_TEMP_DIR doesn't exist. That may merit a separate ticket to add a system check or a more helpful exception if possible. I could reproduce this except for \"Scenario 3. remove whole media directory - error reported for all file uploads\". FileSystemStorage._save() creates the (media) directory if needed so when MemoryFileUploadHandler was used, there was no problem. The problem seems limited to when TemporaryFileUploadHandler is used but FILE_UPLOAD_TEMP_DIR doesn't exist. I didn't track down exactly why the CSRF error happens or if it can be fixed, but I'll accept the ticket for investigation.\nI think this is the offending code (django.middleware.csrf lines 295-304): if request.method == \"POST\": try: request_csrf_token = request.POST.get('csrfmiddlewaretoken', '') except OSError: # Handle a broken connection before we've completed reading # the POST data. process_view shouldn't raise any # exceptions, so we'll ignore and serve the user a 403 # (assuming they're still listening, which they probably # aren't because of the error). pass I think what's happening is: request.POST isn't actually accessed until the csrf middleware. When it's accessed here, request._load_post_and_files is called. The actual error is raised during the creation of NamedTemporaryFile (see traceback below) The error remains unhandled until it is caught in CSRF middleware, and a 403 is returned. File \".../lib/python3.8/site-packages/django/core/files/uploadedfile.py\", line 63, in __init__ file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR) File \"/usr/local/Cellar/python@3.8/3.8.6/Frameworks/Python.framework/Versions/3.8/lib/python3.8/tempfile.py\", line 540, in NamedTemporaryFile (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type) File \"/usr/local/Cellar/python@3.8/3.8.6/Frameworks/Python.framework/Versions/3.8/lib/python3.8/tempfile.py\", line 250, in _mkstemp_inner fd = _os.open(file, flags, 0o600) FileNotFoundError: [Errno 2] No such file or directory: 'media/tmp/tmpg5wy5s9f.upload.pages' I'm happy to write a patch, but I'm not sure what the best solution is: Raise a 500? Raise a 400? Ignore the file? (probably not, since this would lead to pretty confusing and hard to debug behaviour) Either way, I think we should probably add a check that if FILE_UPLOAD_TEMP_DIR is set then it also exists (EDIT: I've just seen this was suggested above). If we did add such a check, could we ignore handling OSErrors in TemporaryUploadedFile.__init__? My immediate feeling is that even if a check would mitigate this particular error, there are probably other errors that could occur here, and letting them bubble up to wherever they happen to get caught is confusing and difficult to debug. As such, a decision is needed as to how they should be handled. I suppose another solution would be to create some sort of FailedUploadedFile that subclasses UploadedFile that could be added to request._files and then the error could be handled by the view/form and a decision can be made at that point how it should be handled.\nMaybe there's an opportunity to use more specific exception catching than OSError (#20128 added it as IOError before it was updated to OSError in 7785e03ba89aafbd949191f126361fb9103cb980). Too bad we don't have the original exception in #20128 so we can see exactly where that exception comes from and determine if it's actually OSError/IOError on Python 3.\nI have created a separate ticket to add a check: https://code.djangoproject.com/ticket/32360\nI reproduced the error in ticket:20128 and it seems to be raised from ​django/http/request.py #359 Traceback (most recent call last): File \"/project/django/django/middleware/csrf.py\", line 345, in _check_token request_csrf_token = request.POST.get('csrfmiddlewaretoken', '') File \"/project/django/django/core/handlers/wsgi.py\", line 102, in _get_post self._load_post_and_files() File \"/project/django/django/http/request.py\", line 328, in _load_post_and_files self._post, self._files = self.parse_file_upload(self.META, data) File \"/project/django/django/http/request.py\", line 288, in parse_file_upload return parser.parse() File \"/project/django/django/http/multipartparser.py\", line 240, in parse for chunk in field_stream: File \"/project/django/django/http/multipartparser.py\", line 402, in __next__ output = next(self._producer) File \"/project/django/django/http/multipartparser.py\", line 534, in __next__ for bytes in stream: File \"/project/django/django/http/multipartparser.py\", line 402, in __next__ output = next(self._producer) File \"/project/django/django/http/multipartparser.py\", line 465, in __next__ data = self.flo.read(self.chunk_size) File \"/project/django/django/http/request.py\", line 359, in read raise UnreadablePostError(*e.args) from e django.http.request.UnreadablePostError: Apache/mod_wsgi request data read error: Partial results are valid but processing is incomplet As it was suggested, catching UnreadablePostError instead of OSError fixes this ticket and still conforms to ticket:20128. Only the test from that ticket needs to be updated. I was wondering if logging the ignored exception wouldn't be enough as an alternative. Figuring out the issue from logs seems to be the main reported issue. Please let me know if any of these solutions is acceptable\nCatching UnreadablePostError looks good to me. Thanks for investigating!\n​PR",
  "created_at": "2021-07-22T08:51:12Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"An OSError raised while reading the POST data should not be handled by\"]",
  "PASS_TO_PASS": "[\"test_mask_cipher_secret (csrf_tests.tests.CsrfFunctionTests)\", \"test_unmask_cipher_token (csrf_tests.tests.CsrfFunctionTests)\", \"A request with a bad origin is rejected.\", \"A request with an origin with wrong protocol is rejected.\", \"A POST request with an origin that can't be parsed by urlparse() is\", \"A request with an origin with the wrong protocol compared to\", \"A request with a null origin is rejected.\", \"The csrf token used in posts is changed on every request (although\", \"If a CSRF cookie is present but the token is missing or invalid, the\", \"If a CSRF cookie is present and an invalid token is passed via a\", \"The token may be passed in a header instead of in the form.\", \"settings.CSRF_HEADER_NAME can be used to customize the CSRF header name\", \"ensure_csrf_cookie() doesn't log warnings (#19436).\", \"The ensure_csrf_cookie() decorator works with the CsrfViewMiddleware\", \"get_token still works for a view decorated with 'csrf_exempt'.\", \"get_token() works for a view decorated solely with requires_csrf_token.\", \"A POST request with an origin added to the CSRF_TRUSTED_ORIGINS\", \"A POST HTTP request with a good origin is accepted.\", \"A POST HTTPS request with a good origin is accepted.\", \"A POST request with an origin that matches a CSRF_TRUSTED_ORIGINS\", \"A POST HTTPS request with a bad referer is rejected\", \"A POST HTTPS request with a referer added to the CSRF_TRUSTED_ORIGINS\", \"A POST HTTPS request with a referer that matches a CSRF_TRUSTED_ORIGINS\", \"A POST HTTPS request with a good referer is accepted.\", \"A POST HTTPS request with a good referer is accepted where the referer\", \"A POST HTTPS request is accepted when USE_X_FORWARDED_PORT=True.\", \"A POST HTTPS request is accepted if it receives a good referer with\", \"A POST HTTPS request with a good referer should be accepted from a\", \"CsrfViewMiddleware generates a 403 response if it receives an HTTPS\", \"A POST HTTPS request with a bad referer is rejected.\", \"A POST HTTPS request with a missing referer is rejected.\", \"A POST HTTPS request from an insecure referer should be rejected.\", \"Masked and unmasked tokens are allowed both as POST and as the\", \"If no CSRF cookies is present, the middleware rejects the incoming\", \"test_no_session_on_request (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_origin_malformed_host (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"If both a cookie and a token is present, the middleware lets it through.\", \"If a CSRF cookie is present and no token, but the csrf_exempt decorator\", \"If get_token() is not called, the view middleware does not\", \"The ensure_csrf_cookie() decorator works without middleware.\", \"HTTP PUT and DELETE can get through with X-CSRFToken and a cookie.\", \"HTTP PUT and DELETE methods have protection\", \"An UnreadablePostError raised while reading the POST data should be\", \"If rotate_token() is called after the token is reset in\", \"The session isn't saved if the CSRF cookie is unchanged.\", \"A new token is sent if the csrf_cookie is the empty string.\", \"CsrfTokenNode works when no CSRF cookie is set.\", \"CsrfTokenNode works when a CSRF cookie is set.\", \"CsrfTokenNode works when a CSRF cookie is created by\", \"If the CSRF cookie has invalid characters in a POST request, the\", \"If the CSRF cookie has an incorrect length in a POST request, the\", \"The csrf token is reset from a bare secret.\", \"A CSRF cookie that needs to be reset is reset only once when the view\", \"CSRF cookie age can be set using settings.CSRF_COOKIE_AGE.\", \"CSRF cookie age does not have max age set and therefore uses\", \"test_csrf_cookie_samesite (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"A CSRF cookie with the wrong format is replaced during a GET request.\", \"All combinations are allowed of (1) masked and unmasked cookies,\", \"test_origin_malformed_host (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"If the token contains non-alphanumeric characters, it is ignored and a\", \"If the token is longer than expected, it is ignored and a new token is\", \"test_csrf_token_on_404_stays_constant (csrf_tests.tests.CsrfInErrorHandlingViewsTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.700007",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}