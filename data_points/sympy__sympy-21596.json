{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-21596",
  "base_commit": "110997fe18b9f7d5ba7d22f624d156a29bf40759",
  "patch": "diff --git a/sympy/sets/handlers/intersection.py b/sympy/sets/handlers/intersection.py\n--- a/sympy/sets/handlers/intersection.py\n+++ b/sympy/sets/handlers/intersection.py\n@@ -5,7 +5,7 @@\n from sympy.sets.fancysets import (Integers, Naturals, Reals, Range,\n     ImageSet, Rationals)\n from sympy.sets.sets import UniversalSet, imageset, ProductSet\n-\n+from sympy.simplify.radsimp import numer\n \n @dispatch(ConditionSet, ConditionSet)  # type: ignore # noqa:F811\n def intersection_sets(a, b): # noqa:F811\n@@ -280,6 +280,19 @@ def intersection_sets(self, other): # noqa:F811\n         from sympy.core.function import expand_complex\n         from sympy.solvers.solvers import denoms, solve_linear\n         from sympy.core.relational import Eq\n+\n+        def _solution_union(exprs, sym):\n+            # return a union of linear solutions to i in expr;\n+            # if i cannot be solved, use a ConditionSet for solution\n+            sols = []\n+            for i in exprs:\n+                x, xis = solve_linear(i, 0, [sym])\n+                if x == sym:\n+                    sols.append(FiniteSet(xis))\n+                else:\n+                    sols.append(ConditionSet(sym, Eq(i, 0)))\n+            return Union(*sols)\n+\n         f = self.lamda.expr\n         n = self.lamda.variables[0]\n \n@@ -303,22 +316,14 @@ def intersection_sets(self, other): # noqa:F811\n         elif ifree != {n}:\n             return None\n         else:\n-            # univarite imaginary part in same variable\n-            x, xis = zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols])\n-            if x and all(i == n for i in x):\n-                base_set -= FiniteSet(xis)\n-            else:\n-                base_set -= ConditionSet(n, Eq(im, 0), S.Integers)\n+            # univarite imaginary part in same variable;\n+            # use numer instead of as_numer_denom to keep\n+            # this as fast as possible while still handling\n+            # simple cases\n+            base_set &= _solution_union(\n+                Mul.make_args(numer(im)), n)\n         # exclude values that make denominators 0\n-        for i in denoms(f):\n-            if i.has(n):\n-                sol = list(zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols]))\n-                if sol != []:\n-                    x, xis = sol\n-                    if x and all(i == n for i in x):\n-                        base_set -= FiniteSet(xis)\n-                else:\n-                    base_set -= ConditionSet(n, Eq(i, 0), S.Integers)\n+        base_set -= _solution_union(denoms(f), n)\n         return imageset(lam, base_set)\n \n     elif isinstance(other, Interval):\n",
  "test_patch": "diff --git a/sympy/sets/tests/test_fancysets.py b/sympy/sets/tests/test_fancysets.py\n--- a/sympy/sets/tests/test_fancysets.py\n+++ b/sympy/sets/tests/test_fancysets.py\n@@ -2,8 +2,9 @@\n from sympy.core.expr import unchanged\n from sympy.sets.fancysets import (ImageSet, Range, normalize_theta_set,\n                                   ComplexRegion)\n-from sympy.sets.sets import (Complement, FiniteSet, Interval, Union, imageset,\n+from sympy.sets.sets import (FiniteSet, Interval, Union, imageset,\n                              Intersection, ProductSet, Contains)\n+from sympy.sets.conditionset import ConditionSet\n from sympy.simplify.simplify import simplify\n from sympy import (S, Symbol, Lambda, symbols, cos, sin, pi, oo, Basic,\n                    Rational, sqrt, tan, log, exp, Abs, I, Tuple, eye,\n@@ -657,7 +658,23 @@ def test_infinitely_indexed_set_2():\n def test_imageset_intersect_real():\n     from sympy import I\n     from sympy.abc import n\n-    assert imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers).intersect(S.Reals) == Complement(S.Integers, FiniteSet((-1, 1)))\n+    assert imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers).intersect(S.Reals) == FiniteSet(-1, 1)\n+    im = (n - 1)*(n + S.Half)\n+    assert imageset(Lambda(n, n + im*I), S.Integers\n+        ).intersect(S.Reals) == FiniteSet(1)\n+    assert imageset(Lambda(n, n + im*(n + 1)*I), S.Naturals0\n+        ).intersect(S.Reals) == FiniteSet(1)\n+    assert imageset(Lambda(n, n/2 + im.expand()*I), S.Integers\n+        ).intersect(S.Reals) == ImageSet(Lambda(x, x/2), ConditionSet(\n+        n, Eq(n**2 - n/2 - S(1)/2, 0), S.Integers))\n+    assert imageset(Lambda(n, n/(1/n - 1) + im*(n + 1)*I), S.Integers\n+        ).intersect(S.Reals) == FiniteSet(S.Half)\n+    assert imageset(Lambda(n, n/(n - 6) +\n+        (n - 3)*(n + 1)*I/(2*n + 2)), S.Integers).intersect(\n+        S.Reals) == FiniteSet(-1)\n+    assert imageset(Lambda(n, n/(n**2 - 9) +\n+        (n - 3)*(n + 1)*I/(2*n + 2)), S.Integers).intersect(\n+        S.Reals) is S.EmptySet\n     s = ImageSet(\n         Lambda(n, -I*(I*(2*pi*n - pi/4) + log(Abs(sqrt(-I))))),\n         S.Integers)\n",
  "problem_statement": "bug in is_subset(Reals)\nSolving issue #19513 has given rise to another bug.\r\nNow:\r\n```\r\nIn [8]: S1 = imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers)\r\n\r\nIn [9]: S1\r\nOut[9]: {n + ⅈ⋅(n - 1)⋅(n + 1) │ n ∊ ℤ}\r\n\r\nIn [10]: 2 in S1\r\nOut[10]: False\r\n\r\nIn [11]: 2 in S1.intersect(Reals)\r\nOut[11]: True\r\n```\r\nThis output is incorrect.\r\n\r\nCorrect output is:\r\n```\r\nIn [4]: S1\r\nOut[4]: {n + ⅈ⋅(n - 1)⋅(n + 1) │ n ∊ ℤ}\r\n\r\nIn [5]: 2 in S1\r\nOut[5]: False\r\n\r\nIn [6]: 2 in S1.intersect(Reals)\r\nOut[6]: False\r\n\r\nIn [7]: S2 = Reals\r\n\r\nIn [8]: S1.intersect(S2)\r\nOut[8]: {-1, 1}\r\n```\n",
  "hints_text": "",
  "created_at": "2021-06-10T15:35:08Z",
  "version": "1.9",
  "FAIL_TO_PASS": "[\"test_imageset_intersect_real\"]",
  "PASS_TO_PASS": "[\"test_naturals\", \"test_naturals0\", \"test_integers\", \"test_ImageSet\", \"test_image_is_ImageSet\", \"test_halfcircle\", \"test_ImageSet_iterator_not_injective\", \"test_inf_Range_len\", \"test_Range_set\", \"test_Range_symbolic\", \"test_range_range_intersection\", \"test_range_interval_intersection\", \"test_range_is_finite_set\", \"test_Integers_eval_imageset\", \"test_Range_eval_imageset\", \"test_fun\", \"test_Reals\", \"test_Complex\", \"test_intersections\", \"test_infinitely_indexed_set_1\", \"test_infinitely_indexed_set_2\", \"test_imageset_intersect_interval\", \"test_imageset_intersect_diophantine\", \"test_infinitely_indexed_set_3\", \"test_ImageSet_simplification\", \"test_ImageSet_contains\", \"test_ComplexRegion_contains\", \"test_ComplexRegion_intersect\", \"test_ComplexRegion_union\", \"test_ComplexRegion_from_real\", \"test_ComplexRegion_measure\", \"test_normalize_theta_set\", \"test_ComplexRegion_FiniteSet\", \"test_union_RealSubSet\", \"test_issue_9980\", \"test_issue_11732\", \"test_issue_11730\", \"test_issue_11938\", \"test_issue_11914\", \"test_issue_9543\", \"test_issue_16871\", \"test_issue_18050\", \"test_Rationals\", \"test_NZQRC_unions\", \"test_imageset_intersection\", \"test_issue_17858\"]",
  "environment_setup_commit": "f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.145125",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}