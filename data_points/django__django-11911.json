{
  "repo": "django/django",
  "instance_id": "django__django-11911",
  "base_commit": "2839659b42ef80038152768b6cedae1016c59d90",
  "patch": "diff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py\n--- a/django/core/management/commands/migrate.py\n+++ b/django/core/management/commands/migrate.py\n@@ -343,21 +343,21 @@ def model_installed(model):\n     def describe_operation(operation, backwards):\n         \"\"\"Return a string that describes a migration operation for --plan.\"\"\"\n         prefix = ''\n+        is_error = False\n         if hasattr(operation, 'code'):\n             code = operation.reverse_code if backwards else operation.code\n-            action = code.__doc__ if code else ''\n+            action = (code.__doc__ or '') if code else None\n         elif hasattr(operation, 'sql'):\n             action = operation.reverse_sql if backwards else operation.sql\n         else:\n             action = ''\n             if backwards:\n                 prefix = 'Undo '\n-        if action is None:\n+        if action is not None:\n+            action = str(action).replace('\\n', '')\n+        elif backwards:\n             action = 'IRREVERSIBLE'\n             is_error = True\n-        else:\n-            action = str(action).replace('\\n', '')\n-            is_error = False\n         if action:\n             action = ' -> ' + action\n         truncated = Truncator(action)\n",
  "test_patch": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -327,53 +327,77 @@ def test_migrate_plan(self):\n             \"    Raw SQL operation -> ['SELECT * FROM migrations_author']\\n\",\n             out.getvalue()\n         )\n-        # Migrate to the third migration.\n-        call_command('migrate', 'migrations', '0003', verbosity=0)\n-        out = io.StringIO()\n-        # Show the plan for when there is nothing to apply.\n-        call_command('migrate', 'migrations', '0003', plan=True, stdout=out, no_color=True)\n-        self.assertEqual(\n-            'Planned operations:\\n'\n-            '  No planned migration operations.\\n',\n-            out.getvalue()\n-        )\n-        out = io.StringIO()\n-        # Show the plan for reverse migration back to 0001.\n-        call_command('migrate', 'migrations', '0001', plan=True, stdout=out, no_color=True)\n-        self.assertEqual(\n-            'Planned operations:\\n'\n-            'migrations.0003_third\\n'\n-            '    Undo Create model Author\\n'\n-            \"    Raw SQL operation -> ['SELECT * FROM migrations_book']\\n\"\n-            'migrations.0002_second\\n'\n-            '    Undo Create model Book\\n'\n-            \"    Raw SQL operation -> ['SELECT * FROM migrations_salamand…\\n\",\n-            out.getvalue()\n-        )\n-        out = io.StringIO()\n-        # Show the migration plan to fourth, with truncated details.\n-        call_command('migrate', 'migrations', '0004', plan=True, stdout=out, no_color=True)\n-        self.assertEqual(\n-            'Planned operations:\\n'\n-            'migrations.0004_fourth\\n'\n-            '    Raw SQL operation -> SELECT * FROM migrations_author WHE…\\n',\n-            out.getvalue()\n-        )\n-        # Show the plan when an operation is irreversible.\n-        # Migrate to the fourth migration.\n-        call_command('migrate', 'migrations', '0004', verbosity=0)\n-        out = io.StringIO()\n-        call_command('migrate', 'migrations', '0003', plan=True, stdout=out, no_color=True)\n-        self.assertEqual(\n-            'Planned operations:\\n'\n-            'migrations.0004_fourth\\n'\n-            '    Raw SQL operation -> IRREVERSIBLE\\n',\n-            out.getvalue()\n-        )\n-        # Cleanup by unmigrating everything: fake the irreversible, then\n-        # migrate all to zero.\n-        call_command('migrate', 'migrations', '0003', fake=True, verbosity=0)\n-        call_command('migrate', 'migrations', 'zero', verbosity=0)\n+        try:\n+            # Migrate to the third migration.\n+            call_command('migrate', 'migrations', '0003', verbosity=0)\n+            out = io.StringIO()\n+            # Show the plan for when there is nothing to apply.\n+            call_command('migrate', 'migrations', '0003', plan=True, stdout=out, no_color=True)\n+            self.assertEqual(\n+                'Planned operations:\\n'\n+                '  No planned migration operations.\\n',\n+                out.getvalue()\n+            )\n+            out = io.StringIO()\n+            # Show the plan for reverse migration back to 0001.\n+            call_command('migrate', 'migrations', '0001', plan=True, stdout=out, no_color=True)\n+            self.assertEqual(\n+                'Planned operations:\\n'\n+                'migrations.0003_third\\n'\n+                '    Undo Create model Author\\n'\n+                \"    Raw SQL operation -> ['SELECT * FROM migrations_book']\\n\"\n+                'migrations.0002_second\\n'\n+                '    Undo Create model Book\\n'\n+                \"    Raw SQL operation -> ['SELECT * FROM migrations_salamand…\\n\",\n+                out.getvalue()\n+            )\n+            out = io.StringIO()\n+            # Show the migration plan to fourth, with truncated details.\n+            call_command('migrate', 'migrations', '0004', plan=True, stdout=out, no_color=True)\n+            self.assertEqual(\n+                'Planned operations:\\n'\n+                'migrations.0004_fourth\\n'\n+                '    Raw SQL operation -> SELECT * FROM migrations_author WHE…\\n',\n+                out.getvalue()\n+            )\n+            # Show the plan when an operation is irreversible.\n+            # Migrate to the fourth migration.\n+            call_command('migrate', 'migrations', '0004', verbosity=0)\n+            out = io.StringIO()\n+            call_command('migrate', 'migrations', '0003', plan=True, stdout=out, no_color=True)\n+            self.assertEqual(\n+                'Planned operations:\\n'\n+                'migrations.0004_fourth\\n'\n+                '    Raw SQL operation -> IRREVERSIBLE\\n',\n+                out.getvalue()\n+            )\n+            out = io.StringIO()\n+            call_command('migrate', 'migrations', '0005', plan=True, stdout=out, no_color=True)\n+            # Operation is marked as irreversible only in the revert plan.\n+            self.assertEqual(\n+                'Planned operations:\\n'\n+                'migrations.0005_fifth\\n'\n+                '    Raw Python operation\\n'\n+                '    Raw Python operation\\n'\n+                '    Raw Python operation -> Feed salamander.\\n',\n+                out.getvalue()\n+            )\n+            call_command('migrate', 'migrations', '0005', verbosity=0)\n+            out = io.StringIO()\n+            call_command('migrate', 'migrations', '0004', plan=True, stdout=out, no_color=True)\n+            self.assertEqual(\n+                'Planned operations:\\n'\n+                'migrations.0005_fifth\\n'\n+                '    Raw Python operation -> IRREVERSIBLE\\n'\n+                '    Raw Python operation -> IRREVERSIBLE\\n'\n+                '    Raw Python operation\\n',\n+                out.getvalue()\n+            )\n+        finally:\n+            # Cleanup by unmigrating everything: fake the irreversible, then\n+            # migrate all to zero.\n+            call_command('migrate', 'migrations', '0003', fake=True, verbosity=0)\n+            call_command('migrate', 'migrations', 'zero', verbosity=0)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_empty'})\n     def test_showmigrations_no_migrations(self):\ndiff --git a/tests/migrations/test_migrations_plan/0005_fifth.py b/tests/migrations/test_migrations_plan/0005_fifth.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/migrations/test_migrations_plan/0005_fifth.py\n@@ -0,0 +1,22 @@\n+from django.db import migrations\n+\n+\n+def grow_tail(x, y):\n+    pass\n+\n+\n+def feed(x, y):\n+    \"\"\"Feed salamander.\"\"\"\n+    pass\n+\n+\n+class Migration(migrations.Migration):\n+    dependencies = [\n+        ('migrations', '0004_fourth'),\n+    ]\n+\n+    operations = [\n+        migrations.RunPython(migrations.RunPython.noop),\n+        migrations.RunPython(grow_tail),\n+        migrations.RunPython(feed, migrations.RunPython.noop),\n+    ]\n",
  "problem_statement": "\"migrate --plan\" outputs \"IRREVERSIBLE\" on RunPython operations without docstrings.\nDescription\n\t\nGiven a migration like:\nfrom django.db import migrations\ndef forward(apps, schema_editor):\n\tpass\ndef reverse(apps, schema_editor):\n\tpass\nclass Migration(migrations.Migration):\n\toperations = [\n\t\tmigrations.RunPython(forward, reverse)\n\t]\nmanage.py migrate --plan will output:\nPlanned operations:\nexample.0001_initial\n\tRaw Python operation -> IRREVERSIBLE\nThe migration should not be described as \"irreversible\".\nThis error is in the definition of describe_operation in django/django/core/management/commands/migrate.py, reproduced below with line numbers from 2.2.6 tag.\n343\t@staticmethod\n344\tdef describe_operation(operation, backwards):\n345\t\t\"\"\"Return a string that describes a migration operation for --plan.\"\"\"\n346\t\tprefix = ''\n347\t\tif hasattr(operation, 'code'):\n348\t\t\tcode = operation.reverse_code if backwards else operation.code\n349\t\t\taction = code.__doc__ if code else ''\n350\t\telif hasattr(operation, 'sql'):\n351\t\t\taction = operation.reverse_sql if backwards else operation.sql\n352\t\telse:\n353\t\t\taction = ''\n354\t\t\tif backwards:\n355\t\t\t\tprefix = 'Undo '\n356\t\tif action is None:\n357\t\t\taction = 'IRREVERSIBLE'\n358\t\t\tis_error = True\n359\t\telse:\n360\t\t\taction = str(action).replace('\\n', '')\n361\t\t\tis_error = False\n362\t\tif action:\n363\t\t\taction = ' -> ' + action\n364\t\ttruncated = Truncator(action)\n365\treturn prefix + operation.describe() + truncated.chars(40), is_error\nLine 349 uses the docstring as the output string.\nLine 356 tests that value and sets action = 'IRREVERSIBLE' on line 357 because the dosctring is None.\nIt would appear that the intention is to use a docstring to describe the operation, if available, and leave it blank otherwise. However, because it tests against code instead of code.__doc__ it actually sets action = None resulting in 'IRREVERSIBLE' being displayed.\nProposed Solutions below\nFor a localized fix, I believe line 349 should be replaced by\n\t\tif code:\n\t\t\taction = code.__doc__ if code.__doc__ else ''\n\t\telse:\n\t\t\taction = None\nHowever, a more holistic view suggests that displaying \"IRREVERSIBLE\" isn't really the correct thing to do. \"IRREVERSIBLE\" is set when is_error is also set to True and seems to be trying to indicate that the migration operation is invalid rather than irreversible. That is, if code/reverse_code is None (line 348) or sql/reverse_sql is None (line 351) the migration can't run.\nSince sql and code are required parameters for their respective Operations, action should only possibly be None in the reverse case, which seems to be what this code is trying to capture and explain.\nGiven that, a better approach would probably make use of the reversible property defined on RunSQL and RunPython operations. This is a little verbose and could probably be pared down, but I think it has the right logic:\n@staticmethod\ndef describe_operation(operation, backwards):\n\t\"\"\"Return a string that describes a migration operation for --plan.\"\"\"\n\tprefix = ''\n\taction = ''\n\tis_error = False\n\tif backwards:\n\t\tprefix = 'Undo '\n\t\tif hasattr(operation, 'reversible') and not operation.reversible:\n\t\t\taction = 'INVALID'\n\t\t\tis_error = True\n\t\telif hasattr(operation, 'reverse_code'):\n\t\t\taction = operation.reverse_code.__doc__ if operation.reverse_code.__doc__ else ''\n\t\telif hasattr(operation, 'reverse_sql'):\n\t\t\taction = operation.reverse_sql.__doc__ if operation.reverse_sql.__doc__ else ''\n\telse:\n\t\tif hasattr(operation, 'code'):\n\t\t\taction = operation.code.__doc__ if operation.code.__doc__ else ''\n\t\telif hasattr(operation, 'sql'):\n\t\t\taction = operation.sql.__doc__ if operation.sql.__doc__ else ''\n\taction = ' -> ' + str(action).replace('\\n', '')\n\ttruncated = Truncator(action)\n\treturn prefix + operation.describe() + truncated.chars(40), is_error\n",
  "hints_text": "Thanks for this report. However, a more holistic view suggests that displaying \"IRREVERSIBLE\" isn't really the correct thing to do. \"IRREVERSIBLE\" is set when is_error is also set to True and seems to be trying to indicate that the migration operation is invalid rather than irreversible. That is, if code/reverse_code is None (line 348) or sql/reverse_sql is None (line 351) the migration can't run. IRREVERSIBLE doesn't mean that migrations are invalid, it means that you cannot reverse them. is_error is to emphasize this as a warning (probably name is misleading). IMO a one line fix is acceptable for backporting diff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py index 37914e2622..5b5b96d1da 100644 --- a/django/core/management/commands/migrate.py +++ b/django/core/management/commands/migrate.py @@ -345,7 +345,7 @@ class Command(BaseCommand): prefix = '' if hasattr(operation, 'code'): code = operation.reverse_code if backwards else operation.code - action = code.__doc__ if code else '' + action = (code.__doc__ or '') if code else '' elif hasattr(operation, 'sql'): action = operation.reverse_sql if backwards else operation.sql else: We could accept some refactoring with a reversible property but this should be done as a cleanup only on master.\n@Kyle Dickerson, if you want to prepare a patch just reassign the ticket to yourself.\nAfter reconsideration I think we should display IRREVERSIBLE only for reverse migrations (backwards is True). As a cleanup we could also handle migrations.RunPython.noop and migrations.RunSQL.noop as a special case.\nI believe the patch should be - action = code.__doc__ if code else '' + action = (code.__doc__ or '') if code else None rather than - action = code.__doc__ if code else '' + action = (code.__doc__ or '') if code else '' Or a RunPython operation will never show IRREVERSIBLE as action could never be None at line 356. After reconsideration I think we should display IRREVERSIBLE only for reverse migrations (backwards is True). The current code should have that behavior because, with this bug fix, action should only be None on line 356 if we set it based on either reverse_code or reverse_sql (since code and sql are required attributes of their respective operations), but it's not an explicit restriction in the current form. It would certainly be more readable to make that restriction explicit (e.g., in my proposed broader refactor).\nI'm going to push this forward today. Hasan, thanks for the initial patch.\nThe patch is ready. I am going to clean it and add test for it. I can push it today.\nThis is a release blocker so it's quite urgent, I'm going to work on it now, and prepare Django 3.0b1 after that.\nReplying to Kyle Dickerson: The current code should have that behavior because, with this bug fix, action should only be None on line 356 if we set it based on either reverse_code or reverse_sql (since code and sql are required attributes of their respective operations), but it's not an explicit restriction in the current form. It would certainly be more readable to make that restriction explicit (e.g., in my proposed broader refactor). code and sql are required attributes but they can be empty, nevertheless I agree that IRREVERSIBLE should be displayed on for backwards.",
  "created_at": "2019-10-14T08:52:04Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"Tests migrate --plan output.\"]",
  "PASS_TO_PASS": "[\"test_makemigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_makemigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"--squashed-name specifies the new migration's name.\", \"--squashed-name also works if a start migration is omitted.\", \"test_squashmigrations_initial_attribute (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_invalid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_optimizes (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_squashes (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_valid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_ticket_23799_squashmigrations_no_optimize (migrations.test_commands.SquashMigrationsTests)\", \"test_failing_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_files_content (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_auto_now_add_interactive (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_check (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_conflict_exit (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_consistency_checks_respect_routers (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_default_merge_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_disabled_migrations_for_app (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_connections (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_no_app_specified (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_handle_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_inconsistent_history (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_accept (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_by_default (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_reject (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_dont_output_dependency_operations (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_no_conflict (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output_valueerror (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_announce (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_nonexistent_toplevel_package (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_path_not_exist (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_apps_initial (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes_no_apps (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_common_ancestor (migrations.test_commands.MakeMigrationsTests)\", \"Migration directories without an __init__.py file are allowed.\", \"test_makemigrations_non_interactive_no_field_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_no_model_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_addition (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_alteration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_order (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_no_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_invalid_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_ambiguous_prefix (migrations.test_commands.MigrateTests)\", \"test_app_without_migrations (migrations.test_commands.MigrateTests)\", \"test_migrate (migrations.test_commands.MigrateTests)\", \"test_migrate_conflict_exit (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_split_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_inconsistent_history (migrations.test_commands.MigrateTests)\", \"test_migrate_initial_false (migrations.test_commands.MigrateTests)\", \"test_migrate_record_replaced (migrations.test_commands.MigrateTests)\", \"test_migrate_record_squashed (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_app_label (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_app_with_migrations (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_deferred_sql_executed_with_schemaeditor (migrations.test_commands.MigrateTests)\", \"test_migrate_with_system_checks (migrations.test_commands.MigrateTests)\", \"test_migrations_no_operations (migrations.test_commands.MigrateTests)\", \"test_regression_22823_unmigrated_fk_to_migrated_model (migrations.test_commands.MigrateTests)\", \"test_showmigrations_list (migrations.test_commands.MigrateTests)\", \"test_showmigrations_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_app_label_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_multiple_app_labels (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_single_app_label (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_squashed (migrations.test_commands.MigrateTests)\", \"test_showmigrations_unmigrated_app (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_backwards (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_for_non_atomic_migration (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_for_non_transactional_databases (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_forwards (migrations.test_commands.MigrateTests)\", \"test_unknown_prefix (migrations.test_commands.MigrateTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.589039",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}