{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-16840",
  "base_commit": "71a7a76ddff8c01fbfdd166e4ff6f691235925cd",
  "patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -545,9 +545,12 @@ def invert(self, other, *gens, **args):\n \n     def __divmod__(self, other):\n         from .containers import Tuple\n+        from sympy.functions.elementary.complexes import sign\n \n         try:\n             other = Number(other)\n+            if self.is_infinite or S.NaN in (self, other):\n+                return (S.NaN, S.NaN)\n         except TypeError:\n             msg = \"unsupported operand type(s) for divmod(): '%s' and '%s'\"\n             raise TypeError(msg % (type(self).__name__, type(other).__name__))\n@@ -555,10 +558,16 @@ def __divmod__(self, other):\n             raise ZeroDivisionError('modulo by zero')\n         if self.is_Integer and other.is_Integer:\n             return Tuple(*divmod(self.p, other.p))\n+        elif isinstance(other, Float):\n+            rat = self/Rational(other)\n         else:\n             rat = self/other\n-        w = int(rat) if rat > 0 else int(rat) - 1\n-        r = self - other*w\n+        if other.is_finite:\n+            w = int(rat) if rat > 0 else int(rat) - 1\n+            r = self - other*w\n+        else:\n+            w = 0 if not self or (sign(self) == sign(other)) else -1\n+            r = other if w else self\n         return Tuple(w, r)\n \n     def __rdivmod__(self, other):\n@@ -2304,7 +2313,9 @@ def as_numer_denom(self):\n         return self, S.One\n \n     def __floordiv__(self, other):\n-        return Integer(self.p // Integer(other).p)\n+        if isinstance(other, Integer):\n+            return Integer(self.p // other)\n+        return Integer(divmod(self, other)[0])\n \n     def __rfloordiv__(self, other):\n         return Integer(Integer(other).p // self.p)\n",
  "test_patch": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -122,7 +122,8 @@ def test_divmod():\n     assert divmod(S(\"3.5\"), S(\"2\")) == Tuple(S(\"1\"), S(\"1.5\"))\n     assert divmod(S(\"2\"), S(\"1/3\")) == Tuple(S(\"6\"), S(\"0\"))\n     assert divmod(S(\"1/3\"), S(\"2\")) == Tuple(S(\"0\"), S(\"1/3\"))\n-    assert divmod(S(\"2\"), S(\"0.1\")) == Tuple(S(\"20\"), S(\"0\"))\n+    assert divmod(S(\"2\"), S(\"1/10\")) == Tuple(S(\"20\"), S(\"0\"))\n+    assert divmod(S(\"2\"), S(\".1\"))[0] == 19\n     assert divmod(S(\"0.1\"), S(\"2\")) == Tuple(S(\"0\"), S(\"0.1\"))\n     assert divmod(S(\"2\"), 2) == Tuple(S(\"1\"), S(\"0\"))\n     assert divmod(2, S(\"2\")) == Tuple(S(\"1\"), S(\"0\"))\n@@ -133,7 +134,7 @@ def test_divmod():\n     assert divmod(S(\"3.5\"), S(\"3/2\")) == Tuple(S(\"2\"), S(\"0.5\"))\n     assert divmod(S(\"3/2\"), S(\"1/3\")) == Tuple(S(\"4\"), Float(\"1/6\"))\n     assert divmod(S(\"1/3\"), S(\"3/2\")) == Tuple(S(\"0\"), S(\"1/3\"))\n-    assert divmod(S(\"3/2\"), S(\"0.1\")) == Tuple(S(\"15\"), S(\"0\"))\n+    assert divmod(S(\"3/2\"), S(\"0.1\"))[0] == 14\n     assert divmod(S(\"0.1\"), S(\"3/2\")) == Tuple(S(\"0\"), S(\"0.1\"))\n     assert divmod(S(\"3/2\"), 2) == Tuple(S(\"0\"), S(\"3/2\"))\n     assert divmod(2, S(\"3/2\")) == Tuple(S(\"1\"), S(\"0.5\"))\n@@ -155,7 +156,7 @@ def test_divmod():\n     assert divmod(S(\"1/3\"), 1.5) == Tuple(S(\"0\"), S(\"1/3\"))\n     assert divmod(0.3, S(\"1/3\")) == Tuple(S(\"0\"), S(\"0.3\"))\n     assert divmod(S(\"0.1\"), 2) == Tuple(S(\"0\"), S(\"0.1\"))\n-    assert divmod(2, S(\"0.1\")) == Tuple(S(\"20\"), S(\"0\"))\n+    assert divmod(2, S(\"0.1\"))[0] == 19\n     assert divmod(S(\"0.1\"), 1.5) == Tuple(S(\"0\"), S(\"0.1\"))\n     assert divmod(1.5, S(\"0.1\")) == Tuple(S(\"15\"), S(\"0\"))\n     assert divmod(S(\"0.1\"), 0.3) == Tuple(S(\"0\"), S(\"0.1\"))\n@@ -176,6 +177,22 @@ def test_divmod():\n     assert divmod(S(4), S(-2.1)) == divmod(4, -2.1)\n     assert divmod(S(-8), S(-2.5) ) == Tuple(3 , -0.5)\n \n+    assert divmod(oo, 1) == (S.NaN, S.NaN)\n+    assert divmod(S.NaN, 1) == (S.NaN, S.NaN)\n+    assert divmod(1, S.NaN) == (S.NaN, S.NaN)\n+    ans = [(-1, oo), (-1, oo), (0, 0), (0, 1), (0, 2)]\n+    OO = float('inf')\n+    ANS = [tuple(map(float, i)) for i in ans]\n+    assert [divmod(i, oo) for i in range(-2, 3)] == ans\n+    assert [divmod(i, OO) for i in range(-2, 3)] ==  ANS\n+    ans = [(0, -2), (0, -1), (0, 0), (-1, -oo), (-1, -oo)]\n+    ANS = [tuple(map(float, i)) for i in ans]\n+    assert [divmod(i, -oo) for i in range(-2, 3)] == ans\n+    assert [divmod(i, -OO) for i in range(-2, 3)] == ANS\n+    assert divmod(S(3.5), S(-2)) == divmod(3.5, -2)\n+    assert divmod(-S(3.5), S(-2)) == divmod(-3.5, -2)\n+\n+\n def test_igcd():\n     assert igcd(0, 0) == 0\n     assert igcd(0, 1) == 1\n@@ -1909,3 +1926,6 @@ def test_abc():\n     assert(isinstance(y, nums.Rational))\n     z = numbers.Integer(3)\n     assert(isinstance(z, nums.Number))\n+\n+def test_floordiv():\n+    assert S(2)//S.Half == 4\n",
  "problem_statement": "S(2)//S.Half give ZeroDivisionError\nIn Python, `2//.5 -> 4`\n",
  "hints_text": "",
  "created_at": "2019-05-15T17:26:34Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_divmod\"]",
  "PASS_TO_PASS": "[\"test_seterr\", \"test_mod\", \"test_igcd\", \"test_igcd_lehmer\", \"test_igcd2\", \"test_ilcm\", \"test_igcdex\", \"test_Integer_new\", \"test_Rational_new\", \"test_Number_new\", \"test_Number_cmp\", \"test_Rational_cmp\", \"test_Float\", \"test_float_mpf\", \"test_Float_RealElement\", \"test_Float_default_to_highprec_from_str\", \"test_Float_eval\", \"test_Float_issue_2107\", \"test_issue_14289\", \"test_Float_from_tuple\", \"test_Infinity\", \"test_Infinity_2\", \"test_Mul_Infinity_Zero\", \"test_Div_By_Zero\", \"test_Infinity_inequations\", \"test_NaN\", \"test_special_numbers\", \"test_powers\", \"test_integer_nthroot_overflow\", \"test_integer_log\", \"test_isqrt\", \"test_powers_Integer\", \"test_powers_Rational\", \"test_powers_Float\", \"test_abs1\", \"test_accept_int\", \"test_dont_accept_str\", \"test_int\", \"test_long\", \"test_real_bug\", \"test_bug_sqrt\", \"test_pi_Pi\", \"test_no_len\", \"test_issue_3321\", \"test_issue_3692\", \"test_issue_3423\", \"test_issue_3449\", \"test_issue_13890\", \"test_Integer_factors\", \"test_Rational_factors\", \"test_issue_4107\", \"test_IntegerInteger\", \"test_Rational_gcd_lcm_cofactors\", \"test_Float_gcd_lcm_cofactors\", \"test_issue_4611\", \"test_conversion_to_mpmath\", \"test_relational\", \"test_Integer_as_index\", \"test_Rational_int\", \"test_zoo\", \"test_issue_4122\", \"test_GoldenRatio_expand\", \"test_TribonacciConstant_expand\", \"test_as_content_primitive\", \"test_hashing_sympy_integers\", \"test_rounding_issue_4172\", \"test_Catalan_EulerGamma_prec\", \"test_Float_eq\", \"test_int_NumberSymbols\", \"test_issue_6640\", \"test_issue_6349\", \"test_mpf_norm\", \"test_latex\", \"test_issue_7742\", \"test_simplify_AlgebraicNumber\", \"test_Float_idempotence\", \"test_comp\", \"test_issue_9491\", \"test_issue_10063\", \"test_issue_10020\", \"test_invert_numbers\", \"test_mod_inverse\", \"test_golden_ratio_rewrite_as_sqrt\", \"test_tribonacci_constant_rewrite_as_sqrt\", \"test_comparisons_with_unknown_type\", \"test_NumberSymbol_comparison\", \"test_Integer_precision\", \"test_Integer_ceiling_floor\", \"test_ComplexInfinity\", \"test_Infinity_floor_ceiling_power\", \"test_One_power\", \"test_NegativeInfinity\", \"test_issue_6133\", \"test_abc\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.110144",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}