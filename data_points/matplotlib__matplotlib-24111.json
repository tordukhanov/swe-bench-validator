{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-24111",
  "base_commit": "239386650a2c3a537d36de9cd85d09bd0f6796cf",
  "patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -61,12 +61,6 @@ class ColormapRegistry(Mapping):\n     r\"\"\"\n     Container for colormaps that are known to Matplotlib by name.\n \n-    .. admonition:: Experimental\n-\n-       While we expect the API to be final, we formally mark it as\n-       experimental for 3.5 because we want to keep the option to still adapt\n-       the API for 3.6 should the need arise.\n-\n     The universal registry instance is `matplotlib.colormaps`. There should be\n     no need for users to instantiate `.ColormapRegistry` themselves.\n \n@@ -193,6 +187,38 @@ def unregister(self, name):\n                              \"colormap.\")\n         self._cmaps.pop(name, None)\n \n+    def get_cmap(self, cmap):\n+        \"\"\"\n+        Return a color map specified through *cmap*.\n+\n+        Parameters\n+        ----------\n+        cmap : str or `~matplotlib.colors.Colormap` or None\n+\n+            - if a `.Colormap`, return it\n+            - if a string, look it up in ``mpl.colormaps``\n+            - if None, return the Colormap defined in :rc:`image.cmap`\n+\n+        Returns\n+        -------\n+        Colormap\n+        \"\"\"\n+        # get the default color map\n+        if cmap is None:\n+            return self[mpl.rcParams[\"image.cmap\"]]\n+\n+        # if the user passed in a Colormap, simply return it\n+        if isinstance(cmap, colors.Colormap):\n+            return cmap\n+        if isinstance(cmap, str):\n+            _api.check_in_list(sorted(_colormaps), cmap=cmap)\n+            # otherwise, it must be a string so look it up\n+            return self[cmap]\n+        raise TypeError(\n+            'get_cmap expects None or an instance of a str or Colormap . ' +\n+            f'you passed {cmap!r} of type {type(cmap)}'\n+        )\n+\n \n # public access to the colormaps should be via `matplotlib.colormaps`. For now,\n # we still create the registry here, but that should stay an implementation\n@@ -281,7 +307,12 @@ def _get_cmap(name=None, lut=None):\n # pyplot.\n get_cmap = _api.deprecated(\n     '3.6',\n-    name='get_cmap', pending=True, alternative=\"``matplotlib.colormaps[name]``\"\n+    name='get_cmap',\n+    pending=True,\n+    alternative=(\n+        \"``matplotlib.colormaps[name]`` \" +\n+        \"or ``matplotlib.colormaps.get_cmap(obj)``\"\n+    )\n )(_get_cmap)\n \n \n@@ -687,6 +718,8 @@ def _ensure_cmap(cmap):\n     \"\"\"\n     Ensure that we have a `.Colormap` object.\n \n+    For internal use to preserve type stability of errors.\n+\n     Parameters\n     ----------\n     cmap : None, str, Colormap\n@@ -698,6 +731,7 @@ def _ensure_cmap(cmap):\n     Returns\n     -------\n     Colormap\n+\n     \"\"\"\n     if isinstance(cmap, colors.Colormap):\n         return cmap\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -109,6 +109,26 @@ def test_register_cmap():\n             cm.register_cmap('nome', cmap='not a cmap')\n \n \n+def test_colormaps_get_cmap():\n+    cr = mpl.colormaps\n+\n+    # check str, and Colormap pass\n+    assert cr.get_cmap('plasma') == cr[\"plasma\"]\n+    assert cr.get_cmap(cr[\"magma\"]) == cr[\"magma\"]\n+\n+    # check default\n+    assert cr.get_cmap(None) == cr[mpl.rcParams['image.cmap']]\n+\n+    # check ValueError on bad name\n+    bad_cmap = 'AardvarksAreAwkward'\n+    with pytest.raises(ValueError, match=bad_cmap):\n+        cr.get_cmap(bad_cmap)\n+\n+    # check TypeError on bad type\n+    with pytest.raises(TypeError, match='object'):\n+        cr.get_cmap(object())\n+\n+\n def test_double_register_builtin_cmap():\n     name = \"viridis\"\n     match = f\"Re-registering the builtin cmap {name!r}.\"\n",
  "problem_statement": "[ENH]: Default `matplotlib.colormaps[None]` to call `matplotlib.colormaps[matplotlib.rcParams['image.cmap']]`?\n### Problem\n\nWhile addressing the `matplotlib.cm.get_cmap` deprecation in 3.6:\r\n\r\n```\r\nPendingDeprecationWarning: The get_cmap function will be deprecated in a future version. Use ``matplotlib.colormaps[name]`` instead.\r\n```\r\nI noticed that `None` isn't directly migrate-able \r\n\r\n```\r\nIn [1]: import matplotlib\r\n\r\nIn [2]: matplotlib.cm.get_cmap(None)\r\nOut[2]: <matplotlib.colors.ListedColormap at 0x11e609e20>\r\n\r\nIn [3]: matplotlib.colormaps[None]\r\nKeyError: 'None is not a known colormap name'\r\n```\n\n### Proposed solution\n\nIt appears from the source that `get_cmap(None)` defaults to  `matplotlib.rcParams['image.cmap']` so it would be nice if `colormaps[None]` could default to that as well.\r\n\r\nOtherwise, it would be nice if this was better documented.\n",
  "hints_text": "If folks agree it's a regression error (& I think it kinda is) the fix is I think add something like\r\n\r\n```python\r\n if item is None: \r\n     item = mpl.rcParams['image.cmap'] \r\n```\r\nwhich is a direct port of the `get_cmap` code \r\nhttps://github.com/matplotlib/matplotlib/blob/a152851669b9df06302d3a133c7413b863f00283/lib/matplotlib/cm.py#L270-L271\r\n\r\nbefore the try in:\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/a152851669b9df06302d3a133c7413b863f00283/lib/matplotlib/cm.py#L91-L95\r\n\n@mroeschke What is your use case? Are you passing in `None` as a literal or is it the value of some variable you have? Is this in library code or do you expect this to be needed in an interactive console.\r\n\r\nWe have discussed this on the last dev call and are not yet clear how to handle the default colormap case in the new API. Logically, `colormaps` itself was designed as a mapping of all explicit colormaps. The default colormap notion does not fit in there very well. It depends on the anticipated usage how we would handle that API-wise.\r\n\nThe use case would be for library code. In pandas, there are some APIs with matplotlib functionality that accept `cmap` that default to `None` and were passed into `matplotlib.cm.get_cmap`: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.io.formats.style.Styler.bar.html\r\n\r\nWe're happy to start using `matplotlib.colormaps` instead just noting in https://github.com/matplotlib/matplotlib/issues/23981#issue-1381487093 that I had to dig into what `get_cmap(None)` did before to maintain the prior behavior.  \n@mroeschke I was going to suggest that you do something like\r\n\r\n```\r\ncmap = cmap in cmap is not None else mpl.rcparams['image.cmap']\r\n```\r\n\r\nwhich should work on all versions of Matplotlib and leaves you an escape hatch if you want to make the default colormap controllable indepently.  However, that probably is not enough for you as if you take `str` or `ColorMap` and actually want the color map (rather than passing through to some mpl function) you'll also have to have the logic to decide if you need to look up the color map or if the user directly gave you one.\r\n\r\n\r\nWhen we decided to move to the registry model we mostly had end-users in mind, however this issues highlights that we did not take into account the library case enough.  We have https://github.com/matplotlib/matplotlib/blob/0517187b9c91061d2ec87e70442615cf4f47b6f3/lib/matplotlib/cm.py#L686-L708 for internal use (which is a bit more complicated than it needs to be to preserve exact error types).  It is not clear to me if we should make that public or document the pattern of:\r\n\r\n```python\r\nif isinstance(inp, mcolors.Colormap):\r\n    cmap = inp\r\nelse:\r\n    cmap = mpl.colormaps[inp if inp is not None else mpl.rcParams[\"image.cmap\"]]\r\n\r\n```\r\nThere is just enough complexity in there it probably be a function we provide. I think this has to be a function/method rather than shoehorned into `__getitem__` or `get` on the registry because that would be getting too far away from the `Mapping` API\r\n\r\nIf we have a registry method for this I propose\r\n\r\n```python\r\ndef ensure_colormap(self, cmap: str|Colormap, * default=None):\r\n    if isinstance(cmap, mcolors.Colormap):\r\n       return cmap\r\n\r\n    default = default if default is not None else mpl.rcParams[\"image.cmap\"]\r\n    cmap = cmap if cmap is not None else default\r\n    return self[cmap]\r\n```\r\nwhich could also live as a free method and use the global registry.\nYeah in pandas we used a similar workaround for translating `cm.cmap(None)` to remove the deprecation warning.\r\n\r\nI don't have any strong opinions personally on `colormaps[None]` being valid. I mainly wanted to highlighting that the deprecation message wasn't entirely clear for the `name=None` case.\nDiscussed on the call, we are going to put the method on the registery class for 3.6.1 on the reasoning that this is not a new feature, but completing something that should have been in 3.6.1 as part of the deplication. ",
  "created_at": "2022-10-06T22:09:31Z",
  "version": "3.6",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_colors.py::test_colormaps_get_cmap\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_colors.py::test_create_lookup_table[5-result0]\", \"lib/matplotlib/tests/test_colors.py::test_create_lookup_table[2-result1]\", \"lib/matplotlib/tests/test_colors.py::test_create_lookup_table[1-result2]\", \"lib/matplotlib/tests/test_colors.py::test_resampled\", \"lib/matplotlib/tests/test_colors.py::test_register_cmap\", \"lib/matplotlib/tests/test_colors.py::test_unregister_builtin_cmap\", \"lib/matplotlib/tests/test_colors.py::test_colormap_copy\", \"lib/matplotlib/tests/test_colors.py::test_colormap_equals\", \"lib/matplotlib/tests/test_colors.py::test_colormap_endian\", \"lib/matplotlib/tests/test_colors.py::test_colormap_invalid\", \"lib/matplotlib/tests/test_colors.py::test_colormap_return_types\", \"lib/matplotlib/tests/test_colors.py::test_BoundaryNorm\", \"lib/matplotlib/tests/test_colors.py::test_CenteredNorm\", \"lib/matplotlib/tests/test_colors.py::test_lognorm_invalid[-1-2]\", \"lib/matplotlib/tests/test_colors.py::test_lognorm_invalid[3-1]\", \"lib/matplotlib/tests/test_colors.py::test_LogNorm\", \"lib/matplotlib/tests/test_colors.py::test_LogNorm_inverse\", \"lib/matplotlib/tests/test_colors.py::test_PowerNorm\", \"lib/matplotlib/tests/test_colors.py::test_PowerNorm_translation_invariance\", \"lib/matplotlib/tests/test_colors.py::test_Normalize\", \"lib/matplotlib/tests/test_colors.py::test_FuncNorm\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale_None_vmin\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale_None_vmax\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scale\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scaleout_center\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scaleout_center_max\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_Even\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_Odd\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VminEqualsVcenter\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VmaxEqualsVcenter\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VminGTVcenter\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_TwoSlopeNorm_VminGTVmax\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VcenterGTVmax\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_premature_scaling\", \"lib/matplotlib/tests/test_colors.py::test_SymLogNorm\", \"lib/matplotlib/tests/test_colors.py::test_SymLogNorm_colorbar\", \"lib/matplotlib/tests/test_colors.py::test_SymLogNorm_single_zero\", \"lib/matplotlib/tests/test_colors.py::TestAsinhNorm::test_init\", \"lib/matplotlib/tests/test_colors.py::TestAsinhNorm::test_norm\", \"lib/matplotlib/tests/test_colors.py::test_cmap_and_norm_from_levels_and_colors[png]\", \"lib/matplotlib/tests/test_colors.py::test_boundarynorm_and_colorbarbase[png]\", \"lib/matplotlib/tests/test_colors.py::test_cmap_and_norm_from_levels_and_colors2\", \"lib/matplotlib/tests/test_colors.py::test_rgb_hsv_round_trip\", \"lib/matplotlib/tests/test_colors.py::test_autoscale_masked\", \"lib/matplotlib/tests/test_colors.py::test_light_source_topo_surface[png]\", \"lib/matplotlib/tests/test_colors.py::test_light_source_shading_default\", \"lib/matplotlib/tests/test_colors.py::test_light_source_shading_empty_mask\", \"lib/matplotlib/tests/test_colors.py::test_light_source_masked_shading\", \"lib/matplotlib/tests/test_colors.py::test_light_source_hillshading\", \"lib/matplotlib/tests/test_colors.py::test_light_source_planar_hillshading\", \"lib/matplotlib/tests/test_colors.py::test_color_names\", \"lib/matplotlib/tests/test_colors.py::test_pandas_iterable\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Accent]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Accent_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Blues]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Blues_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BrBG]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BrBG_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuPu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuPu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[CMRmap]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[CMRmap_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Dark2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Dark2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[GnBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[GnBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greens]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greens_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greys]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greys_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[OrRd]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[OrRd_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Oranges]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Oranges_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PRGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PRGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Paired]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Paired_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel1]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel1_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PiYG]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PiYG_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBuGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBuGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuOr]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuOr_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuRd]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuRd_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Purples]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Purples_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdGy]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdGy_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdPu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdPu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Reds]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Reds_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set1]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set1_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set3]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set3_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Spectral]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Spectral_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Wistia]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Wistia_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGnBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGnBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrBr]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrBr_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrRd]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrRd_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[afmhot]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[afmhot_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[autumn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[autumn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[binary]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[binary_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bone]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bone_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[brg]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[brg_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bwr]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bwr_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cividis]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cividis_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cool]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cool_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[coolwarm]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[coolwarm_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[copper]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[copper_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cubehelix]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cubehelix_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[flag]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[flag_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_earth]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_earth_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_gray]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_gray_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_heat]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_heat_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_ncar]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_ncar_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_rainbow]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_rainbow_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_stern]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_stern_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_yarg]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_yarg_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gray]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gray_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hot]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hot_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hsv]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hsv_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[inferno]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[inferno_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[jet]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[jet_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[magma]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[magma_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[nipy_spectral]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[nipy_spectral_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[ocean]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[ocean_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[pink]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[pink_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[plasma]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[plasma_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[prism]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[prism_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[rainbow]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[rainbow_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[seismic]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[seismic_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[spring]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[spring_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[summer]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[summer_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab10]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab10_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20b]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20b_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20c]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20c_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[terrain]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[terrain_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[turbo]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[turbo_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_shifted]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_shifted_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[viridis]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[viridis_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[winter]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[winter_r]\", \"lib/matplotlib/tests/test_colors.py::test_has_alpha_channel\", \"lib/matplotlib/tests/test_colors.py::test_cn\", \"lib/matplotlib/tests/test_colors.py::test_conversions\", \"lib/matplotlib/tests/test_colors.py::test_conversions_masked\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_array_single_str\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_array_alpha_array\", \"lib/matplotlib/tests/test_colors.py::test_failed_conversions\", \"lib/matplotlib/tests/test_colors.py::test_grey_gray\", \"lib/matplotlib/tests/test_colors.py::test_tableau_order\", \"lib/matplotlib/tests/test_colors.py::test_ndarray_subclass_norm\", \"lib/matplotlib/tests/test_colors.py::test_same_color\", \"lib/matplotlib/tests/test_colors.py::test_hex_shorthand_notation\", \"lib/matplotlib/tests/test_colors.py::test_repr_png\", \"lib/matplotlib/tests/test_colors.py::test_repr_html\", \"lib/matplotlib/tests/test_colors.py::test_get_under_over_bad\", \"lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[over]\", \"lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[under]\", \"lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[bad]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_alpha_array\", \"lib/matplotlib/tests/test_colors.py::test_colormap_bad_data_with_alpha\", \"lib/matplotlib/tests/test_colors.py::test_2d_to_rgba\", \"lib/matplotlib/tests/test_colors.py::test_set_dict_to_rgba\", \"lib/matplotlib/tests/test_colors.py::test_norm_deepcopy\", \"lib/matplotlib/tests/test_colors.py::test_norm_callback\", \"lib/matplotlib/tests/test_colors.py::test_scalarmappable_norm_update\", \"lib/matplotlib/tests/test_colors.py::test_norm_update_figs[png]\", \"lib/matplotlib/tests/test_colors.py::test_norm_update_figs[pdf]\", \"lib/matplotlib/tests/test_colors.py::test_make_norm_from_scale_name\", \"lib/matplotlib/tests/test_colors.py::test_color_sequences\", \"lib/matplotlib/tests/test_colors.py::test_cm_set_cmap_error\"]",
  "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.808012",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}