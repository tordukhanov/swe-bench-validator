{
  "repo": "django/django",
  "instance_id": "django__django-11057",
  "base_commit": "258110d6cdea5050f8df0bbc9af3fcd9bd342d29",
  "patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -15,6 +15,7 @@\n )\n from django.template import engines\n from django.template.backends.django import DjangoTemplates\n+from django.utils.module_loading import import_string\n \n \n def _issubclass(cls, classinfo):\n@@ -28,6 +29,23 @@ def _issubclass(cls, classinfo):\n         return False\n \n \n+def _contains_subclass(class_path, candidate_paths):\n+    \"\"\"\n+    Return whether or not a dotted class path (or a subclass of that class) is\n+    found in a list of candidate paths.\n+    \"\"\"\n+    cls = import_string(class_path)\n+    for path in candidate_paths:\n+        try:\n+            candidate_cls = import_string(path)\n+        except ImportError:\n+            # ImportErrors are raised elsewhere.\n+            continue\n+        if _issubclass(candidate_cls, cls):\n+            return True\n+    return False\n+\n+\n def check_admin_app(app_configs, **kwargs):\n     from django.contrib.admin.sites import all_sites\n     errors = []\n@@ -72,8 +90,7 @@ def check_dependencies(**kwargs):\n     else:\n         if ('django.contrib.auth.context_processors.auth'\n                 not in django_templates_instance.context_processors and\n-                'django.contrib.auth.backends.ModelBackend'\n-                in settings.AUTHENTICATION_BACKENDS):\n+                _contains_subclass('django.contrib.auth.backends.ModelBackend', settings.AUTHENTICATION_BACKENDS)):\n             errors.append(checks.Error(\n                 \"'django.contrib.auth.context_processors.auth' must be \"\n                 \"enabled in DjangoTemplates (TEMPLATES) if using the default \"\n@@ -88,15 +105,14 @@ def check_dependencies(**kwargs):\n                 \"the admin application.\",\n                 id='admin.E404',\n             ))\n-    if ('django.contrib.auth.middleware.AuthenticationMiddleware'\n-            not in settings.MIDDLEWARE):\n+\n+    if not _contains_subclass('django.contrib.auth.middleware.AuthenticationMiddleware', settings.MIDDLEWARE):\n         errors.append(checks.Error(\n             \"'django.contrib.auth.middleware.AuthenticationMiddleware' must \"\n             \"be in MIDDLEWARE in order to use the admin application.\",\n             id='admin.E408',\n         ))\n-    if ('django.contrib.messages.middleware.MessageMiddleware'\n-            not in settings.MIDDLEWARE):\n+    if not _contains_subclass('django.contrib.messages.middleware.MessageMiddleware', settings.MIDDLEWARE):\n         errors.append(checks.Error(\n             \"'django.contrib.messages.middleware.MessageMiddleware' must \"\n             \"be in MIDDLEWARE in order to use the admin application.\",\n",
  "test_patch": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -1,7 +1,10 @@\n from django import forms\n from django.contrib import admin\n from django.contrib.admin import AdminSite\n+from django.contrib.auth.backends import ModelBackend\n+from django.contrib.auth.middleware import AuthenticationMiddleware\n from django.contrib.contenttypes.admin import GenericStackedInline\n+from django.contrib.messages.middleware import MessageMiddleware\n from django.core import checks\n from django.test import SimpleTestCase, override_settings\n \n@@ -37,6 +40,18 @@ def check(self, **kwargs):\n         return ['error!']\n \n \n+class AuthenticationMiddlewareSubclass(AuthenticationMiddleware):\n+    pass\n+\n+\n+class MessageMiddlewareSubclass(MessageMiddleware):\n+    pass\n+\n+\n+class ModelBackendSubclass(ModelBackend):\n+    pass\n+\n+\n @override_settings(\n     SILENCED_SYSTEM_CHECKS=['fields.W342'],  # ForeignKey(unique=True)\n     INSTALLED_APPS=[\n@@ -129,6 +144,27 @@ def test_context_processor_dependencies(self):\n         with self.settings(AUTHENTICATION_BACKENDS=[]):\n             self.assertEqual(admin.checks.check_dependencies(), expected[1:])\n \n+    @override_settings(\n+        AUTHENTICATION_BACKENDS=['admin_checks.tests.ModelBackendSubclass'],\n+        TEMPLATES=[{\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            'DIRS': [],\n+            'APP_DIRS': True,\n+            'OPTIONS': {\n+                'context_processors': ['django.contrib.messages.context_processors.messages'],\n+            },\n+        }],\n+    )\n+    def test_context_processor_dependencies_model_backend_subclass(self):\n+        self.assertEqual(admin.checks.check_dependencies(), [\n+            checks.Error(\n+                \"'django.contrib.auth.context_processors.auth' must be \"\n+                \"enabled in DjangoTemplates (TEMPLATES) if using the default \"\n+                \"auth backend in order to use the admin application.\",\n+                id='admin.E402',\n+            ),\n+        ])\n+\n     @override_settings(\n         TEMPLATES=[\n             {\n@@ -169,6 +205,21 @@ def test_middleware_dependencies(self):\n         ]\n         self.assertEqual(errors, expected)\n \n+    @override_settings(MIDDLEWARE=[\n+        'admin_checks.tests.AuthenticationMiddlewareSubclass',\n+        'admin_checks.tests.MessageMiddlewareSubclass',\n+    ])\n+    def test_middleware_subclasses(self):\n+        self.assertEqual(admin.checks.check_dependencies(), [])\n+\n+    @override_settings(MIDDLEWARE=[\n+        'django.contrib.does.not.Exist',\n+        'django.contrib.auth.middleware.AuthenticationMiddleware',\n+        'django.contrib.messages.middleware.MessageMiddleware',\n+    ])\n+    def test_admin_check_ignores_import_error_in_middleware(self):\n+        self.assertEqual(admin.checks.check_dependencies(), [])\n+\n     def test_custom_adminsite(self):\n         class CustomAdminSite(admin.AdminSite):\n             pass\n",
  "problem_statement": "admin check for AuthenticationMiddleware should allow subclasses\nDescription\n\t\nI am attempting an upgrade from 2.1 to 2.2b1. I have a custom middleware in place for authentication which essentially wraps around the base AuthenticationMiddleware and sets/unsets a cookie upon login and logout. This was working with Django 2.1 as my authentication middleware.\nNow, when I attempt to start my application, the check fails with admin.E408:\n?: (admin.E408) 'django.contrib.auth.middleware.AuthenticationMiddleware' must be in MIDDLEWARE in order to use the admin application.\nIs this a bug/regression, or have I been using the middleware incorrectly this whole time?\n",
  "hints_text": "The check is new in Django 2.2 (371ece2f0682e51f2f796854d3e091827a7cea63). It might be possible to modify it so that it detects AuthenticationMiddleware subclasses. You could also simply add that error to your SILENCED_SYSTEM_CHECKS setting.\nAgreed, import_string should be used to perform issubclass checks.",
  "created_at": "2019-03-05T21:45:50Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_context_processor_dependencies_model_backend_subclass (admin_checks.tests.SystemChecksTestCase)\", \"test_middleware_subclasses (admin_checks.tests.SystemChecksTestCase)\"]",
  "PASS_TO_PASS": "[\"test_admin_check_ignores_import_error_in_middleware (admin_checks.tests.SystemChecksTestCase)\", \"test_allows_checks_relying_on_other_modeladmins (admin_checks.tests.SystemChecksTestCase)\", \"test_app_label_in_admin_checks (admin_checks.tests.SystemChecksTestCase)\", \"test_apps_dependencies (admin_checks.tests.SystemChecksTestCase)\", \"test_cannot_include_through (admin_checks.tests.SystemChecksTestCase)\", \"test_check_fieldset_sublists_for_duplicates (admin_checks.tests.SystemChecksTestCase)\", \"test_check_sublists_for_duplicates (admin_checks.tests.SystemChecksTestCase)\", \"test_checks_are_performed (admin_checks.tests.SystemChecksTestCase)\", \"test_context_processor_dependencies (admin_checks.tests.SystemChecksTestCase)\", \"test_custom_adminsite (admin_checks.tests.SystemChecksTestCase)\", \"test_custom_get_form_with_fieldsets (admin_checks.tests.SystemChecksTestCase)\", \"test_custom_modelforms_with_fields_fieldsets (admin_checks.tests.SystemChecksTestCase)\", \"test_editable (admin_checks.tests.SystemChecksTestCase)\", \"test_exclude_duplicate_values (admin_checks.tests.SystemChecksTestCase)\", \"test_exclude_in_inline (admin_checks.tests.SystemChecksTestCase)\", \"test_exclude_inline_model_admin (admin_checks.tests.SystemChecksTestCase)\", \"test_exclude_values (admin_checks.tests.SystemChecksTestCase)\", \"test_explicit_through_override (admin_checks.tests.SystemChecksTestCase)\", \"test_extra (admin_checks.tests.SystemChecksTestCase)\", \"test_field_name_not_in_list_display (admin_checks.tests.SystemChecksTestCase)\", \"test_fieldsets_fields_non_tuple (admin_checks.tests.SystemChecksTestCase)\", \"test_fk_exclusion (admin_checks.tests.SystemChecksTestCase)\", \"test_generic_inline_model_admin_bad_ct_field (admin_checks.tests.SystemChecksTestCase)\", \"test_generic_inline_model_admin_bad_fk_field (admin_checks.tests.SystemChecksTestCase)\", \"test_generic_inline_model_admin_non_generic_model (admin_checks.tests.SystemChecksTestCase)\", \"test_generic_inline_model_admin_non_gfk_ct_field (admin_checks.tests.SystemChecksTestCase)\", \"test_generic_inline_model_admin_non_gfk_fk_field (admin_checks.tests.SystemChecksTestCase)\", \"test_graceful_m2m_fail (admin_checks.tests.SystemChecksTestCase)\", \"test_inline_self_check (admin_checks.tests.SystemChecksTestCase)\", \"test_inline_with_specified (admin_checks.tests.SystemChecksTestCase)\", \"test_list_editable_missing_field (admin_checks.tests.SystemChecksTestCase)\", \"test_list_editable_not_a_list_or_tuple (admin_checks.tests.SystemChecksTestCase)\", \"test_list_filter_works_on_through_field_even_when_apps_not_ready (admin_checks.tests.SystemChecksTestCase)\", \"test_middleware_dependencies (admin_checks.tests.SystemChecksTestCase)\", \"test_nested_fields (admin_checks.tests.SystemChecksTestCase)\", \"test_nested_fieldsets (admin_checks.tests.SystemChecksTestCase)\", \"test_no_template_engines (admin_checks.tests.SystemChecksTestCase)\", \"test_non_model_fields (admin_checks.tests.SystemChecksTestCase)\", \"test_non_model_first_field (admin_checks.tests.SystemChecksTestCase)\", \"test_nonexistent_field (admin_checks.tests.SystemChecksTestCase)\", \"test_nonexistent_field_on_inline (admin_checks.tests.SystemChecksTestCase)\", \"test_nonfirst_fieldset (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_and_editable (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_dynamic_attribute_on_modeladmin (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_fields_not_list_or_tuple (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_lambda (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_method_on_model (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_on_method (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_on_modeladmin (admin_checks.tests.SystemChecksTestCase)\", \"test_several_templates_backends (admin_checks.tests.SystemChecksTestCase)\", \"test_valid_generic_inline_model_admin (admin_checks.tests.SystemChecksTestCase)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.558104",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}