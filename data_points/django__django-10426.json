{
  "repo": "django/django",
  "instance_id": "django__django-10426",
  "base_commit": "817c6cdf0e2a72362045ca503af01830df9b9d36",
  "patch": "diff --git a/django/core/management/commands/showmigrations.py b/django/core/management/commands/showmigrations.py\n--- a/django/core/management/commands/showmigrations.py\n+++ b/django/core/management/commands/showmigrations.py\n@@ -1,4 +1,7 @@\n-from django.core.management.base import BaseCommand, CommandError\n+import sys\n+\n+from django.apps import apps\n+from django.core.management.base import BaseCommand\n from django.db import DEFAULT_DB_ALIAS, connections\n from django.db.migrations.loader import MigrationLoader\n \n@@ -45,12 +48,15 @@ def handle(self, *args, **options):\n             return self.show_list(connection, options['app_label'])\n \n     def _validate_app_names(self, loader, app_names):\n-        invalid_apps = []\n+        has_bad_names = False\n         for app_name in app_names:\n-            if app_name not in loader.migrated_apps:\n-                invalid_apps.append(app_name)\n-        if invalid_apps:\n-            raise CommandError('No migrations present for: %s' % (', '.join(sorted(invalid_apps))))\n+            try:\n+                apps.get_app_config(app_name)\n+            except LookupError as err:\n+                self.stderr.write(str(err))\n+                has_bad_names = True\n+        if has_bad_names:\n+            sys.exit(2)\n \n     def show_list(self, connection, app_names=None):\n         \"\"\"\n@@ -129,3 +135,5 @@ def print_deps(node):\n                 self.stdout.write(\"[X]  %s.%s%s\" % (node.key[0], node.key[1], deps))\n             else:\n                 self.stdout.write(\"[ ]  %s.%s%s\" % (node.key[0], node.key[1], deps))\n+        if not plan:\n+            self.stdout.write('(no migrations)', self.style.ERROR)\n",
  "test_patch": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -381,8 +381,9 @@ def test_showmigrations_no_migrations(self):\n \n     @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n     def test_showmigrations_unmigrated_app(self):\n-        with self.assertRaisesMessage(CommandError, 'No migrations present for: unmigrated_app'):\n-            call_command('showmigrations', 'unmigrated_app')\n+        out = io.StringIO()\n+        call_command('showmigrations', 'unmigrated_app', stdout=out, no_color=True)\n+        self.assertEqual('unmigrated_app\\n (no migrations)\\n', out.getvalue().lower())\n \n     @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_empty\"})\n     def test_showmigrations_plan_no_migrations(self):\n@@ -390,12 +391,12 @@ def test_showmigrations_plan_no_migrations(self):\n         Tests --plan output of showmigrations command without migrations\n         \"\"\"\n         out = io.StringIO()\n-        call_command(\"showmigrations\", format='plan', stdout=out)\n-        self.assertEqual(\"\", out.getvalue().lower())\n+        call_command('showmigrations', format='plan', stdout=out, no_color=True)\n+        self.assertEqual('(no migrations)\\n', out.getvalue().lower())\n \n         out = io.StringIO()\n-        call_command(\"showmigrations\", format='plan', stdout=out, verbosity=2)\n-        self.assertEqual(\"\", out.getvalue().lower())\n+        call_command('showmigrations', format='plan', stdout=out, verbosity=2, no_color=True)\n+        self.assertEqual('(no migrations)\\n', out.getvalue().lower())\n \n     @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed_complex\"})\n     def test_showmigrations_plan_squashed(self):\n@@ -522,22 +523,10 @@ def test_showmigrations_plan_multiple_app_labels(self):\n         )\n \n     @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n-    def test_showmigrations_plan_app_label_error(self):\n-        \"\"\"\n-        `showmigrations --plan app_label` raises an error when no app or\n-        no migrations are present in provided app labels.\n-        \"\"\"\n-        # App with no migrations.\n-        with self.assertRaisesMessage(CommandError, 'No migrations present for: unmigrated_app'):\n-            call_command('showmigrations', 'unmigrated_app', format='plan')\n-        # Nonexistent app (wrong app label).\n-        with self.assertRaisesMessage(CommandError, 'No migrations present for: nonexistent_app'):\n-            call_command('showmigrations', 'nonexistent_app', format='plan')\n-        # Multiple nonexistent apps; input order shouldn't matter.\n-        with self.assertRaisesMessage(CommandError, 'No migrations present for: nonexistent_app1, nonexistent_app2'):\n-            call_command('showmigrations', 'nonexistent_app1', 'nonexistent_app2', format='plan')\n-        with self.assertRaisesMessage(CommandError, 'No migrations present for: nonexistent_app1, nonexistent_app2'):\n-            call_command('showmigrations', 'nonexistent_app2', 'nonexistent_app1', format='plan')\n+    def test_showmigrations_plan_app_label_no_migrations(self):\n+        out = io.StringIO()\n+        call_command('showmigrations', 'unmigrated_app', format='plan', stdout=out, no_color=True)\n+        self.assertEqual('(no migrations)\\n', out.getvalue())\n \n     @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n     def test_sqlmigrate_forwards(self):\n@@ -1561,6 +1550,18 @@ def test_migrate_app_name_specified_as_label(self):\n         with self.assertRaisesMessage(CommandError, self.did_you_mean_auth_error):\n             call_command('migrate', 'django.contrib.auth')\n \n+    def test_showmigrations_nonexistent_app_label(self):\n+        err = io.StringIO()\n+        with self.assertRaises(SystemExit):\n+            call_command('showmigrations', 'nonexistent_app', stderr=err)\n+        self.assertIn(self.nonexistent_app_error, err.getvalue())\n+\n+    def test_showmigrations_app_name_specified_as_label(self):\n+        err = io.StringIO()\n+        with self.assertRaises(SystemExit):\n+            call_command('showmigrations', 'django.contrib.auth', stderr=err)\n+        self.assertIn(self.did_you_mean_auth_error, err.getvalue())\n+\n     def test_sqlmigrate_nonexistent_app_label(self):\n         with self.assertRaisesMessage(CommandError, self.nonexistent_app_error):\n             call_command('sqlmigrate', 'nonexistent_app', '0002')\n",
  "problem_statement": "Add app_label validation to showmigrations\nDescription\n\t\n#29469\n#29518\n#29506\nThe app label validation was added to some commands as above tickets.\nBut showmigrations command doesn't contain it.\nSo I think the validation should be added to showmigrations command.\n",
  "hints_text": "â€‹https://github.com/django/django/pull/10426\nA test failure remains.",
  "created_at": "2018-09-22T14:12:29Z",
  "version": "2.2",
  "FAIL_TO_PASS": "[\"test_squashmigrations_initial_attribute (migrations.test_commands.SquashMigrationsTests)\"]",
  "PASS_TO_PASS": "[\"test_makemigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_makemigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"--squashed-name specifies the new migration's name.\", \"--squashed-name also works if a start migration is omitted.\", \"test_squashmigrations_invalid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_squashes (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_valid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_ticket_23799_squashmigrations_no_optimize (migrations.test_commands.SquashMigrationsTests)\", \"test_failing_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_files_content (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_auto_now_add_interactive (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_check (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_conflict_exit (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_consistency_checks_respect_routers (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_default_merge_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_disabled_migrations_for_app (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_connections (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_no_app_specified (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_handle_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_inconsistent_history (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_accept (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_by_default (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_reject (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_dont_output_dependency_operations (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_no_conflict (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output_valueerror (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_announce (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_nonexistent_toplevel_package (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_path_not_exist (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_apps_initial (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes_no_apps (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_common_ancestor (migrations.test_commands.MakeMigrationsTests)\", \"Migration directories without an __init__.py file are allowed.\", \"test_makemigrations_non_interactive_no_field_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_no_model_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_addition (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_alteration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_order (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_no_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_invalid_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_ambigious_prefix (migrations.test_commands.MigrateTests)\", \"test_app_without_migrations (migrations.test_commands.MigrateTests)\", \"test_migrate (migrations.test_commands.MigrateTests)\", \"test_migrate_conflict_exit (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_split_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_inconsistent_history (migrations.test_commands.MigrateTests)\", \"test_migrate_initial_false (migrations.test_commands.MigrateTests)\", \"Tests migrate --plan output.\", \"test_migrate_record_replaced (migrations.test_commands.MigrateTests)\", \"test_migrate_record_squashed (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_deferred_sql_executed_with_schemaeditor (migrations.test_commands.MigrateTests)\", \"test_migrate_with_system_checks (migrations.test_commands.MigrateTests)\", \"test_regression_22823_unmigrated_fk_to_migrated_model (migrations.test_commands.MigrateTests)\", \"test_showmigrations_list (migrations.test_commands.MigrateTests)\", \"test_showmigrations_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_multiple_app_labels (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_single_app_label (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_squashed (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_backwards (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_for_non_atomic_migration (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_forwards (migrations.test_commands.MigrateTests)\", \"test_unknown_prefix (migrations.test_commands.MigrateTests)\"]",
  "environment_setup_commit": "4fc35a9c3efdc9154efce28cb23cb84f8834517e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.551072",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}