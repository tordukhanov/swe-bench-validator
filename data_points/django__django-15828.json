{
  "repo": "django/django",
  "instance_id": "django__django-15828",
  "base_commit": "41019e48bbf082c985e6ba3bad34d118b903bff1",
  "patch": "diff --git a/django/contrib/postgres/constraints.py b/django/contrib/postgres/constraints.py\n--- a/django/contrib/postgres/constraints.py\n+++ b/django/contrib/postgres/constraints.py\n@@ -177,6 +177,7 @@ def __eq__(self, other):\n                 and self.deferrable == other.deferrable\n                 and self.include == other.include\n                 and self.opclasses == other.opclasses\n+                and self.violation_error_message == other.violation_error_message\n             )\n         return super().__eq__(other)\n \ndiff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -14,12 +14,15 @@\n \n \n class BaseConstraint:\n-    violation_error_message = _(\"Constraint “%(name)s” is violated.\")\n+    default_violation_error_message = _(\"Constraint “%(name)s” is violated.\")\n+    violation_error_message = None\n \n     def __init__(self, name, violation_error_message=None):\n         self.name = name\n         if violation_error_message is not None:\n             self.violation_error_message = violation_error_message\n+        else:\n+            self.violation_error_message = self.default_violation_error_message\n \n     @property\n     def contains_expressions(self):\n@@ -43,7 +46,13 @@ def get_violation_error_message(self):\n     def deconstruct(self):\n         path = \"%s.%s\" % (self.__class__.__module__, self.__class__.__name__)\n         path = path.replace(\"django.db.models.constraints\", \"django.db.models\")\n-        return (path, (), {\"name\": self.name})\n+        kwargs = {\"name\": self.name}\n+        if (\n+            self.violation_error_message is not None\n+            and self.violation_error_message != self.default_violation_error_message\n+        ):\n+            kwargs[\"violation_error_message\"] = self.violation_error_message\n+        return (path, (), kwargs)\n \n     def clone(self):\n         _, args, kwargs = self.deconstruct()\n@@ -94,7 +103,11 @@ def __repr__(self):\n \n     def __eq__(self, other):\n         if isinstance(other, CheckConstraint):\n-            return self.name == other.name and self.check == other.check\n+            return (\n+                self.name == other.name\n+                and self.check == other.check\n+                and self.violation_error_message == other.violation_error_message\n+            )\n         return super().__eq__(other)\n \n     def deconstruct(self):\n@@ -273,6 +286,7 @@ def __eq__(self, other):\n                 and self.include == other.include\n                 and self.opclasses == other.opclasses\n                 and self.expressions == other.expressions\n+                and self.violation_error_message == other.violation_error_message\n             )\n         return super().__eq__(other)\n \n",
  "test_patch": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -65,6 +65,29 @@ def test_custom_violation_error_message(self):\n         )\n         self.assertEqual(c.get_violation_error_message(), \"custom base_name message\")\n \n+    def test_custom_violation_error_message_clone(self):\n+        constraint = BaseConstraint(\n+            \"base_name\",\n+            violation_error_message=\"custom %(name)s message\",\n+        ).clone()\n+        self.assertEqual(\n+            constraint.get_violation_error_message(),\n+            \"custom base_name message\",\n+        )\n+\n+    def test_deconstruction(self):\n+        constraint = BaseConstraint(\n+            \"base_name\",\n+            violation_error_message=\"custom %(name)s message\",\n+        )\n+        path, args, kwargs = constraint.deconstruct()\n+        self.assertEqual(path, \"django.db.models.BaseConstraint\")\n+        self.assertEqual(args, ())\n+        self.assertEqual(\n+            kwargs,\n+            {\"name\": \"base_name\", \"violation_error_message\": \"custom %(name)s message\"},\n+        )\n+\n \n class CheckConstraintTests(TestCase):\n     def test_eq(self):\n@@ -84,6 +107,28 @@ def test_eq(self):\n             models.CheckConstraint(check=check2, name=\"price\"),\n         )\n         self.assertNotEqual(models.CheckConstraint(check=check1, name=\"price\"), 1)\n+        self.assertNotEqual(\n+            models.CheckConstraint(check=check1, name=\"price\"),\n+            models.CheckConstraint(\n+                check=check1, name=\"price\", violation_error_message=\"custom error\"\n+            ),\n+        )\n+        self.assertNotEqual(\n+            models.CheckConstraint(\n+                check=check1, name=\"price\", violation_error_message=\"custom error\"\n+            ),\n+            models.CheckConstraint(\n+                check=check1, name=\"price\", violation_error_message=\"other custom error\"\n+            ),\n+        )\n+        self.assertEqual(\n+            models.CheckConstraint(\n+                check=check1, name=\"price\", violation_error_message=\"custom error\"\n+            ),\n+            models.CheckConstraint(\n+                check=check1, name=\"price\", violation_error_message=\"custom error\"\n+            ),\n+        )\n \n     def test_repr(self):\n         constraint = models.CheckConstraint(\n@@ -216,6 +261,38 @@ def test_eq(self):\n         self.assertNotEqual(\n             models.UniqueConstraint(fields=[\"foo\", \"bar\"], name=\"unique\"), 1\n         )\n+        self.assertNotEqual(\n+            models.UniqueConstraint(fields=[\"foo\", \"bar\"], name=\"unique\"),\n+            models.UniqueConstraint(\n+                fields=[\"foo\", \"bar\"],\n+                name=\"unique\",\n+                violation_error_message=\"custom error\",\n+            ),\n+        )\n+        self.assertNotEqual(\n+            models.UniqueConstraint(\n+                fields=[\"foo\", \"bar\"],\n+                name=\"unique\",\n+                violation_error_message=\"custom error\",\n+            ),\n+            models.UniqueConstraint(\n+                fields=[\"foo\", \"bar\"],\n+                name=\"unique\",\n+                violation_error_message=\"other custom error\",\n+            ),\n+        )\n+        self.assertEqual(\n+            models.UniqueConstraint(\n+                fields=[\"foo\", \"bar\"],\n+                name=\"unique\",\n+                violation_error_message=\"custom error\",\n+            ),\n+            models.UniqueConstraint(\n+                fields=[\"foo\", \"bar\"],\n+                name=\"unique\",\n+                violation_error_message=\"custom error\",\n+            ),\n+        )\n \n     def test_eq_with_condition(self):\n         self.assertEqual(\ndiff --git a/tests/postgres_tests/test_constraints.py b/tests/postgres_tests/test_constraints.py\n--- a/tests/postgres_tests/test_constraints.py\n+++ b/tests/postgres_tests/test_constraints.py\n@@ -444,17 +444,39 @@ def test_eq(self):\n             )\n             self.assertNotEqual(constraint_2, constraint_9)\n             self.assertNotEqual(constraint_7, constraint_8)\n+\n+        constraint_10 = ExclusionConstraint(\n+            name=\"exclude_overlapping\",\n+            expressions=[\n+                (F(\"datespan\"), RangeOperators.OVERLAPS),\n+                (F(\"room\"), RangeOperators.EQUAL),\n+            ],\n+            condition=Q(cancelled=False),\n+            violation_error_message=\"custom error\",\n+        )\n+        constraint_11 = ExclusionConstraint(\n+            name=\"exclude_overlapping\",\n+            expressions=[\n+                (F(\"datespan\"), RangeOperators.OVERLAPS),\n+                (F(\"room\"), RangeOperators.EQUAL),\n+            ],\n+            condition=Q(cancelled=False),\n+            violation_error_message=\"other custom error\",\n+        )\n         self.assertEqual(constraint_1, constraint_1)\n         self.assertEqual(constraint_1, mock.ANY)\n         self.assertNotEqual(constraint_1, constraint_2)\n         self.assertNotEqual(constraint_1, constraint_3)\n         self.assertNotEqual(constraint_1, constraint_4)\n+        self.assertNotEqual(constraint_1, constraint_10)\n         self.assertNotEqual(constraint_2, constraint_3)\n         self.assertNotEqual(constraint_2, constraint_4)\n         self.assertNotEqual(constraint_2, constraint_7)\n         self.assertNotEqual(constraint_4, constraint_5)\n         self.assertNotEqual(constraint_5, constraint_6)\n         self.assertNotEqual(constraint_1, object())\n+        self.assertNotEqual(constraint_10, constraint_11)\n+        self.assertEqual(constraint_10, constraint_10)\n \n     def test_deconstruct(self):\n         constraint = ExclusionConstraint(\n",
  "problem_statement": "BaseConstraint.deconstruct() and __eq__ operators don't take violation_error_message into account.\nDescription\n\t\nThanks Stéphane \"Twidi\" Angel for the report.\nRegression in 667105877e6723c6985399803a364848891513cc.\n",
  "hints_text": "",
  "created_at": "2022-07-07T02:26:49Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_custom_violation_error_message_clone (constraints.tests.BaseConstraintTests)\", \"test_deconstruction (constraints.tests.BaseConstraintTests)\", \"test_eq (constraints.tests.CheckConstraintTests)\", \"test_eq (constraints.tests.UniqueConstraintTests)\"]",
  "PASS_TO_PASS": "[\"test_constraint_sql (constraints.tests.BaseConstraintTests)\", \"test_contains_expressions (constraints.tests.BaseConstraintTests)\", \"test_create_sql (constraints.tests.BaseConstraintTests)\", \"test_custom_violation_error_message (constraints.tests.BaseConstraintTests)\", \"test_default_violation_error_message (constraints.tests.BaseConstraintTests)\", \"test_remove_sql (constraints.tests.BaseConstraintTests)\", \"test_validate (constraints.tests.BaseConstraintTests)\", \"test_abstract_name (constraints.tests.CheckConstraintTests)\", \"test_database_constraint (constraints.tests.CheckConstraintTests)\", \"test_database_constraint_unicode (constraints.tests.CheckConstraintTests)\", \"test_deconstruction (constraints.tests.CheckConstraintTests)\", \"test_invalid_check_types (constraints.tests.CheckConstraintTests)\", \"test_name (constraints.tests.CheckConstraintTests)\", \"test_repr (constraints.tests.CheckConstraintTests)\", \"test_validate (constraints.tests.CheckConstraintTests)\", \"test_validate_boolean_expressions (constraints.tests.CheckConstraintTests)\", \"test_validate_rawsql_expressions_noop (constraints.tests.CheckConstraintTests)\", \"test_condition_must_be_q (constraints.tests.UniqueConstraintTests)\", \"test_database_constraint (constraints.tests.UniqueConstraintTests)\", \"test_database_constraint_with_condition (constraints.tests.UniqueConstraintTests)\", \"test_deconstruction (constraints.tests.UniqueConstraintTests)\", \"test_deconstruction_with_condition (constraints.tests.UniqueConstraintTests)\", \"test_deconstruction_with_deferrable (constraints.tests.UniqueConstraintTests)\", \"test_deconstruction_with_expressions (constraints.tests.UniqueConstraintTests)\", \"test_deconstruction_with_include (constraints.tests.UniqueConstraintTests)\", \"test_deconstruction_with_opclasses (constraints.tests.UniqueConstraintTests)\", \"test_deferrable_with_condition (constraints.tests.UniqueConstraintTests)\", \"test_deferrable_with_expressions (constraints.tests.UniqueConstraintTests)\", \"test_deferrable_with_include (constraints.tests.UniqueConstraintTests)\", \"test_deferrable_with_opclasses (constraints.tests.UniqueConstraintTests)\", \"test_eq_with_condition (constraints.tests.UniqueConstraintTests)\", \"test_eq_with_deferrable (constraints.tests.UniqueConstraintTests)\", \"test_eq_with_expressions (constraints.tests.UniqueConstraintTests)\", \"test_eq_with_include (constraints.tests.UniqueConstraintTests)\", \"test_eq_with_opclasses (constraints.tests.UniqueConstraintTests)\", \"test_expressions_and_fields_mutually_exclusive (constraints.tests.UniqueConstraintTests)\", \"test_expressions_with_opclasses (constraints.tests.UniqueConstraintTests)\", \"test_invalid_defer_argument (constraints.tests.UniqueConstraintTests)\", \"test_invalid_include_argument (constraints.tests.UniqueConstraintTests)\", \"test_invalid_opclasses_argument (constraints.tests.UniqueConstraintTests)\", \"test_model_validation (constraints.tests.UniqueConstraintTests)\", \"Partial unique constraints are not ignored by\", \"test_name (constraints.tests.UniqueConstraintTests)\", \"test_opclasses_and_fields_same_length (constraints.tests.UniqueConstraintTests)\", \"test_repr (constraints.tests.UniqueConstraintTests)\", \"test_repr_with_condition (constraints.tests.UniqueConstraintTests)\", \"test_repr_with_deferrable (constraints.tests.UniqueConstraintTests)\", \"test_repr_with_expressions (constraints.tests.UniqueConstraintTests)\", \"test_repr_with_include (constraints.tests.UniqueConstraintTests)\", \"test_repr_with_opclasses (constraints.tests.UniqueConstraintTests)\", \"test_requires_field_or_expression (constraints.tests.UniqueConstraintTests)\", \"test_requires_name (constraints.tests.UniqueConstraintTests)\", \"test_validate (constraints.tests.UniqueConstraintTests)\", \"test_validate_condition (constraints.tests.UniqueConstraintTests)\", \"test_validate_expression (constraints.tests.UniqueConstraintTests)\", \"test_validate_expression_condition (constraints.tests.UniqueConstraintTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.741676",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}