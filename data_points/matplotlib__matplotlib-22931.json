{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-22931",
  "base_commit": "e779b97174ff3ab2737fbdffb432ef8689201602",
  "patch": "diff --git a/lib/matplotlib/backend_bases.py b/lib/matplotlib/backend_bases.py\n--- a/lib/matplotlib/backend_bases.py\n+++ b/lib/matplotlib/backend_bases.py\n@@ -924,7 +924,7 @@ def set_dashes(self, dash_offset, dash_list):\n             if np.any(dl < 0.0):\n                 raise ValueError(\n                     \"All values in the dash list must be non-negative\")\n-            if not np.any(dl > 0.0):\n+            if dl.size and not np.any(dl > 0.0):\n                 raise ValueError(\n                     'At least one value in the dash list must be positive')\n         self._dashes = dash_offset, dash_list\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_lines.py b/lib/matplotlib/tests/test_lines.py\n--- a/lib/matplotlib/tests/test_lines.py\n+++ b/lib/matplotlib/tests/test_lines.py\n@@ -108,7 +108,9 @@ def test_valid_colors():\n def test_linestyle_variants():\n     fig, ax = plt.subplots()\n     for ls in [\"-\", \"solid\", \"--\", \"dashed\",\n-               \"-.\", \"dashdot\", \":\", \"dotted\"]:\n+               \"-.\", \"dashdot\", \":\", \"dotted\",\n+               (0, None), (0, ()), (0, []),  # gh-22930\n+               ]:\n         ax.plot(range(10), linestyle=ls)\n     fig.canvas.draw()\n \n",
  "problem_statement": "[Bug]: Regression in dashes due to #22569\n### Bug summary\n\nPreviously working plotting code has broken. It fails on 96ddc6728ce09cb61f6b6c53714755fe0936b106 / #22569 but passes on the parent daaa1ed376b4fc60ed5a20d155a13c6361aee479.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\nfig, ax = plt.subplots()\r\nax.plot([0, 1], [0, 1], ls=(0, ()))\r\nplt.show()\n```\n\n\n### Actual outcome\n\nNo line shown, error while drawing\r\n```\r\n  File \"/home/larsoner/python/matplotlib/lib/matplotlib/backends/backend_qt.py\", line 479, in _draw_idle\r\n    self.draw()\r\n  File \"/home/larsoner/python/matplotlib/lib/matplotlib/backends/backend_agg.py\", line 424, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"/home/larsoner/python/matplotlib/lib/matplotlib/artist.py\", line 73, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"/home/larsoner/python/matplotlib/lib/matplotlib/artist.py\", line 50, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"/home/larsoner/python/matplotlib/lib/matplotlib/figure.py\", line 2860, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/home/larsoner/python/matplotlib/lib/matplotlib/image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/home/larsoner/python/matplotlib/lib/matplotlib/artist.py\", line 50, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"/home/larsoner/python/matplotlib/lib/matplotlib/axes/_base.py\", line 3101, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/home/larsoner/python/matplotlib/lib/matplotlib/image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/home/larsoner/python/matplotlib/lib/matplotlib/artist.py\", line 50, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"/home/larsoner/python/matplotlib/lib/matplotlib/lines.py\", line 772, in draw\r\n    gc.set_dashes(*self._dash_pattern)\r\n  File \"/home/larsoner/python/matplotlib/lib/matplotlib/backend_bases.py\", line 930, in set_dashes\r\n    raise ValueError(\r\nValueError: At least one value in the dash list must be positive\r\n```\n\n### Expected outcome\n\nLine shown\r\n\r\n![Screenshot from 2022-04-28 12-03-38](https://user-images.githubusercontent.com/2365790/165796031-bebea18a-e2af-4c3d-ae6e-8617af9b3a01.png)\r\n\r\n\n\n### Additional information\n\nMaybe we use a weird/bad/incorrect convention in our code by creating `ls=(0, ())` and we can certainly work around it/fix it, but it used to work at least! At a minimum it might be nice to raise a nicer error if possible...\n\n### Operating system\n\nUbuntu 22.04\n\n### Matplotlib Version\n\n96ddc6728ce09cb61f6b6c53714755fe0936b106\n\n### Matplotlib Backend\n\nQtAgg (PyQt6)\n\n### Python version\n\n3.10.4\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\ngit checkout\n",
  "hints_text": "It looks like internally matplotlib uses `'solid': (0, None)` which is fine, I can switch our code to that -- but it seems like for backward compat supporting `'solid': (0, ())` as an alias would make sense since it used to be that way in official examples (here from 2.x):\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/908d23d5975d4f4a4c7eb85a057be069700c5a98/examples/lines_bars_and_markers/linestyles.py#L14\r\n\nSure, we should still accept `(0, ())` and `(0, [])`.\nOkay, I can open a quick PR to fix this",
  "created_at": "2022-04-28T16:53:47Z",
  "version": "3.5",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_lines.py::test_linestyle_variants\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_lines.py::test_segment_hits\", \"lib/matplotlib/tests/test_lines.py::test_invisible_Line_rendering\", \"lib/matplotlib/tests/test_lines.py::test_set_line_coll_dash\", \"lib/matplotlib/tests/test_lines.py::test_line_dashes[png]\", \"lib/matplotlib/tests/test_lines.py::test_line_dashes[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_line_colors\", \"lib/matplotlib/tests/test_lines.py::test_valid_colors\", \"lib/matplotlib/tests/test_lines.py::test_valid_linestyles\", \"lib/matplotlib/tests/test_lines.py::test_drawstyle_variants[png]\", \"lib/matplotlib/tests/test_lines.py::test_no_subslice_with_transform[png]\", \"lib/matplotlib/tests/test_lines.py::test_valid_drawstyles\", \"lib/matplotlib/tests/test_lines.py::test_set_drawstyle\", \"lib/matplotlib/tests/test_lines.py::test_set_line_coll_dash_image[png]\", \"lib/matplotlib/tests/test_lines.py::test_set_line_coll_dash_image[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_marker_fill_styles[png]\", \"lib/matplotlib/tests/test_lines.py::test_markerfacecolor_fillstyle\", \"lib/matplotlib/tests/test_lines.py::test_lw_scaling[png]\", \"lib/matplotlib/tests/test_lines.py::test_lw_scaling[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_nan_is_sorted\", \"lib/matplotlib/tests/test_lines.py::test_step_markers[png]\", \"lib/matplotlib/tests/test_lines.py::test_step_markers[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_markevery[png-figure]\", \"lib/matplotlib/tests/test_lines.py::test_markevery[png-axes]\", \"lib/matplotlib/tests/test_lines.py::test_markevery_figure_line_unsupported_relsize\", \"lib/matplotlib/tests/test_lines.py::test_marker_as_markerstyle\", \"lib/matplotlib/tests/test_lines.py::test_odd_dashes[png]\", \"lib/matplotlib/tests/test_lines.py::test_odd_dashes[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_picking\", \"lib/matplotlib/tests/test_lines.py::test_input_copy[png]\", \"lib/matplotlib/tests/test_lines.py::test_input_copy[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_markevery_prop_cycle[png]\"]",
  "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.797169",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}