{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-22383",
  "base_commit": "07c3ad3d2ca9f52ccb132df23b9b736d65a90ad6",
  "patch": "diff --git a/bin/authors_update.py b/bin/authors_update.py\n--- a/bin/authors_update.py\n+++ b/bin/authors_update.py\n@@ -15,8 +15,8 @@\n import os\n \n \n-if sys.version_info < (3, 6):\n-    sys.exit(\"This script requires Python 3.6 or newer\")\n+if sys.version_info < (3, 7):\n+    sys.exit(\"This script requires Python 3.7 or newer\")\n \n from subprocess import run, PIPE\n from sympy.external.importtools import version_tuple\ndiff --git a/bin/mailmap_update.py b/bin/mailmap_update.py\n--- a/bin/mailmap_update.py\n+++ b/bin/mailmap_update.py\n@@ -11,8 +11,8 @@\n import os\n \n \n-if sys.version_info < (3, 6):\n-    sys.exit(\"This script requires Python 3.6 or newer\")\n+if sys.version_info < (3, 7):\n+    sys.exit(\"This script requires Python 3.7 or newer\")\n \n from subprocess import run, PIPE\n from sympy.external.importtools import version_tuple\ndiff --git a/setup.py b/setup.py\n--- a/setup.py\n+++ b/setup.py\n@@ -69,8 +69,8 @@\n               % min_mpmath_version)\n         sys.exit(-1)\n \n-if sys.version_info < (3, 6):\n-    print(\"SymPy requires Python 3.6 or newer. Python %d.%d detected\"\n+if sys.version_info < (3, 7):\n+    print(\"SymPy requires Python 3.7 or newer. Python %d.%d detected\"\n           % sys.version_info[:2])\n     sys.exit(-1)\n \n@@ -455,7 +455,7 @@ def run(self):\n                     'antlr': antlr,\n                     'sdist': sdist_sympy,\n                     },\n-          python_requires='>=3.6',\n+          python_requires='>=3.7',\n           classifiers=[\n             'License :: OSI Approved :: BSD License',\n             'Operating System :: OS Independent',\n@@ -464,9 +464,9 @@ def run(self):\n             'Topic :: Scientific/Engineering :: Mathematics',\n             'Topic :: Scientific/Engineering :: Physics',\n             'Programming Language :: Python :: 3',\n-            'Programming Language :: Python :: 3.6',\n             'Programming Language :: Python :: 3.7',\n             'Programming Language :: Python :: 3.8',\n+            'Programming Language :: Python :: 3.9',\n             'Programming Language :: Python :: 3 :: Only',\n             'Programming Language :: Python :: Implementation :: CPython',\n             'Programming Language :: Python :: Implementation :: PyPy',\ndiff --git a/sympy/__init__.py b/sympy/__init__.py\n--- a/sympy/__init__.py\n+++ b/sympy/__init__.py\n@@ -13,8 +13,8 @@\n \n \n import sys\n-if sys.version_info < (3, 6):\n-    raise ImportError(\"Python version 3.6 or above is required for SymPy.\")\n+if sys.version_info < (3, 7):\n+    raise ImportError(\"Python version 3.7 or above is required for SymPy.\")\n del sys\n \n \ndiff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1048,19 +1048,6 @@ def __new__(cls, num, dps=None, prec=None, precision=None):\n         if isinstance(num, str):\n             # Float accepts spaces as digit separators\n             num = num.replace(' ', '').lower()\n-            # in Py 3.6\n-            # underscores are allowed. In anticipation of that, we ignore\n-            # legally placed underscores\n-            if '_' in num:\n-                parts = num.split('_')\n-                if not (all(parts) and\n-                        all(parts[i][-1].isdigit()\n-                            for i in range(0, len(parts), 2)) and\n-                        all(parts[i][0].isdigit()\n-                            for i in range(1, len(parts), 2))):\n-                    # copy Py 3.6 error\n-                    raise ValueError(\"could not convert string to float: '%s'\" % num)\n-                num = ''.join(parts)\n             if num.startswith('.') and len(num) > 1:\n                 num = '0' + num\n             elif num.startswith('-.') and len(num) > 2:\n",
  "test_patch": "diff --git a/release/test_install.py b/release/test_install.py\n--- a/release/test_install.py\n+++ b/release/test_install.py\n@@ -6,7 +6,7 @@\n from subprocess import check_call\n \n \n-PY_VERSIONS = '3.6', '3.7', '3.8', '3.9'\n+PY_VERSIONS = '3.7', '3.8', '3.9'\n \n \n def main(version, outdir):\ndiff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -530,13 +530,13 @@ def teq(a):\n \n     # allow underscore\n     assert Float('1_23.4_56') == Float('123.456')\n-    assert Float('1_23.4_5_6', 12) == Float('123.456', 12)\n+    assert Float('1_') == Float('1.0')\n+    assert Float('1_.') == Float('1.0')\n+    assert Float('1._') == Float('1.0')\n+    assert Float('1__2') == Float('12.0')\n+    # assert Float('1_23.4_5_6', 12) == Float('123.456', 12)\n     # ...but not in all cases (per Py 3.6)\n     raises(ValueError, lambda: Float('_1'))\n-    raises(ValueError, lambda: Float('1_'))\n-    raises(ValueError, lambda: Float('1_.'))\n-    raises(ValueError, lambda: Float('1._'))\n-    raises(ValueError, lambda: Float('1__2'))\n     raises(ValueError, lambda: Float('_inf'))\n \n     # allow auto precision detection\ndiff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -275,8 +275,8 @@ def test_unicode_names():\n \n def test_python3_features():\n     # Make sure the tokenizer can handle Python 3-only features\n-    if sys.version_info < (3, 6):\n-        skip(\"test_python3_features requires Python 3.6 or newer\")\n+    if sys.version_info < (3, 7):\n+        skip(\"test_python3_features requires Python 3.7 or newer\")\n \n \n     assert parse_expr(\"123_456\") == 123456\n",
  "problem_statement": "maint(ci): drop testing for Python 3.6\n<!-- Your title above should be a short description of what\r\nwas changed. Do not include the issue number in the title. -->\r\n\r\n#### References to other Issues or PRs\r\n<!-- If this pull request fixes an issue, write \"Fixes #NNNN\" in that exact\r\nformat, e.g. \"Fixes #1234\" (see\r\nhttps://tinyurl.com/auto-closing for more information). Also, please\r\nwrite a comment on that issue linking back to this pull request once it is\r\nopen. -->\r\n\r\n#21884 describes adopting NEP 29 which would mean dropping support for Python 3.6 now.\r\n\r\n\r\n#### Brief description of what is fixed or changed\r\n\r\nDrop testing in CI for Python 3.6 and PyPy 3.6\r\n\r\n#### Other comments\r\n\r\n\r\n#### Release Notes\r\n\r\n<!-- Write the release notes for this release below between the BEGIN and END\r\nstatements. The basic format is a bulleted list with the name of the subpackage\r\nand the release note for this PR. For example:\r\n\r\n* solvers\r\n  * Added a new solver for logarithmic equations.\r\n\r\n* functions\r\n  * Fixed a bug with log of integers.\r\n\r\nor if no release note(s) should be included use:\r\n\r\nNO ENTRY\r\n\r\nSee https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more\r\ninformation on how to write release notes. The bot will check your release\r\nnotes automatically to see if they are formatted correctly. -->\r\n\r\n<!-- BEGIN RELEASE NOTES -->\r\nNO ENTRY\r\n<!-- END RELEASE NOTES -->\r\n\n",
  "hints_text": "",
  "created_at": "2021-10-29T21:08:21Z",
  "version": "1.10",
  "FAIL_TO_PASS": "[\"test_Float\"]",
  "PASS_TO_PASS": "[\"test_seterr\", \"test_mod\", \"test_divmod\", \"test_igcd\", \"test_igcd_lehmer\", \"test_igcd2\", \"test_ilcm\", \"test_igcdex\", \"test_Integer_new\", \"test_Rational_new\", \"test_Number_new\", \"test_Number_cmp\", \"test_Rational_cmp\", \"test_zero_not_false\", \"test_float_mpf\", \"test_Float_RealElement\", \"test_Float_default_to_highprec_from_str\", \"test_Float_eval\", \"test_Float_issue_2107\", \"test_issue_14289\", \"test_Float_from_tuple\", \"test_Infinity\", \"test_Infinity_2\", \"test_Mul_Infinity_Zero\", \"test_Div_By_Zero\", \"test_Infinity_inequations\", \"test_NaN\", \"test_special_numbers\", \"test_powers\", \"test_integer_nthroot_overflow\", \"test_integer_log\", \"test_isqrt\", \"test_powers_Integer\", \"test_powers_Rational\", \"test_powers_Float\", \"test_lshift_Integer\", \"test_rshift_Integer\", \"test_and_Integer\", \"test_xor_Integer\", \"test_or_Integer\", \"test_invert_Integer\", \"test_abs1\", \"test_accept_int\", \"test_dont_accept_str\", \"test_int\", \"test_int_NumberSymbols\", \"test_real_bug\", \"test_bug_sqrt\", \"test_pi_Pi\", \"test_no_len\", \"test_issue_3321\", \"test_issue_3692\", \"test_issue_3423\", \"test_issue_3449\", \"test_issue_13890\", \"test_Integer_factors\", \"test_Rational_factors\", \"test_issue_4107\", \"test_IntegerInteger\", \"test_Rational_gcd_lcm_cofactors\", \"test_Float_gcd_lcm_cofactors\", \"test_issue_4611\", \"test_conversion_to_mpmath\", \"test_relational\", \"test_Integer_as_index\", \"test_Rational_int\", \"test_zoo\", \"test_issue_4122\", \"test_GoldenRatio_expand\", \"test_TribonacciConstant_expand\", \"test_as_content_primitive\", \"test_hashing_sympy_integers\", \"test_rounding_issue_4172\", \"test_Catalan_EulerGamma_prec\", \"test_Catalan_rewrite\", \"test_bool_eq\", \"test_Float_eq\", \"test_issue_6640\", \"test_issue_6349\", \"test_mpf_norm\", \"test_latex\", \"test_issue_7742\", \"test_simplify_AlgebraicNumber\", \"test_Float_idempotence\", \"test_comp1\", \"test_issue_9491\", \"test_issue_10063\", \"test_issue_10020\", \"test_invert_numbers\", \"test_mod_inverse\", \"test_golden_ratio_rewrite_as_sqrt\", \"test_tribonacci_constant_rewrite_as_sqrt\", \"test_comparisons_with_unknown_type\", \"test_NumberSymbol_comparison\", \"test_Integer_precision\", \"test_Integer_ceiling_floor\", \"test_ComplexInfinity\", \"test_Infinity_floor_ceiling_power\", \"test_One_power\", \"test_NegativeInfinity\", \"test_issue_6133\", \"test_abc\", \"test_sympy_parser\", \"test_rationalize\", \"test_factorial_fail\", \"test_repeated_fail\", \"test_repeated_dot_only\", \"test_local_dict\", \"test_local_dict_split_implmult\", \"test_local_dict_symbol_to_fcn\", \"test_global_dict\", \"test_issue_2515\", \"test_issue_7663\", \"test_recursive_evaluate_false_10560\", \"test_function_evaluate_false\", \"test_issue_10773\", \"test_split_symbols\", \"test_split_symbols_function\", \"test_functional_exponent\", \"test_match_parentheses_implicit_multiplication\", \"test_convert_equals_signs\", \"test_parse_function_issue_3539\", \"test_split_symbols_numeric\", \"test_unicode_names\", \"test_python3_features\"]",
  "environment_setup_commit": "fd40404e72921b9e52a5f9582246e4a6cd96c431",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.149329",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}