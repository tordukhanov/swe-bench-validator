{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-5175",
  "base_commit": "1daee40d6f1cf3d379396dc272c123d987ad4cdd",
  "patch": "diff --git a/pylint/extensions/_check_docs_utils.py b/pylint/extensions/_check_docs_utils.py\n--- a/pylint/extensions/_check_docs_utils.py\n+++ b/pylint/extensions/_check_docs_utils.py\n@@ -279,7 +279,7 @@ class SphinxDocstring(Docstring):\n         \\s+\n         )?\n \n-        (\\w+)                   # Parameter name\n+        (\\*{{0,2}}\\w+)          # Parameter name with potential asterisks\n         \\s*                     # whitespace\n         :                       # final colon\n         \"\"\"\n@@ -472,7 +472,7 @@ class GoogleDocstring(Docstring):\n \n     re_param_line = re.compile(\n         fr\"\"\"\n-        \\s*  \\*{{0,2}}(\\w+)             # identifier potentially with asterisks\n+        \\s*  (\\*{{0,2}}\\w+)             # identifier potentially with asterisks\n         \\s*  ( [(]\n             {re_multiple_type}\n             (?:,\\s+optional)?\n@@ -731,7 +731,7 @@ class NumpyDocstring(GoogleDocstring):\n \n     re_param_line = re.compile(\n         fr\"\"\"\n-        \\s*  (\\w+)                                                          # identifier\n+        \\s*  (\\*{{0,2}}\\w+)                                                 # identifier with potential asterisks\n         \\s*  :\n         \\s*  (?:({GoogleDocstring.re_multiple_type})(?:,\\s+optional)?)?     # optional type declaration\n         \\s* (.*)                                                            # optional description\ndiff --git a/pylint/extensions/docparams.py b/pylint/extensions/docparams.py\n--- a/pylint/extensions/docparams.py\n+++ b/pylint/extensions/docparams.py\n@@ -536,11 +536,11 @@ class constructor.\n             }\n \n         if arguments_node.vararg is not None:\n-            expected_argument_names.add(arguments_node.vararg)\n-            not_needed_type_in_docstring.add(arguments_node.vararg)\n+            expected_argument_names.add(f\"*{arguments_node.vararg}\")\n+            not_needed_type_in_docstring.add(f\"*{arguments_node.vararg}\")\n         if arguments_node.kwarg is not None:\n-            expected_argument_names.add(arguments_node.kwarg)\n-            not_needed_type_in_docstring.add(arguments_node.kwarg)\n+            expected_argument_names.add(f\"**{arguments_node.kwarg}\")\n+            not_needed_type_in_docstring.add(f\"**{arguments_node.kwarg}\")\n         params_with_doc, params_with_type = doc.match_param_docs()\n         # Tolerate no parameter documentation at all.\n         if not params_with_doc and not params_with_type and accept_no_param_doc:\ndiff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -147,7 +147,7 @@ def colorize_ansi(\n \n     :param style: the message's style elements, this will be deprecated\n \n-    :param kwargs: used to accept `color` parameter while it is being deprecated\n+    :param **kwargs: used to accept `color` parameter while it is being deprecated\n \n     :return: the ansi escaped string\n     \"\"\"\n",
  "test_patch": "diff --git a/tests/extensions/test_check_docs.py b/tests/extensions/test_check_docs.py\n--- a/tests/extensions/test_check_docs.py\n+++ b/tests/extensions/test_check_docs.py\n@@ -1141,7 +1141,7 @@ def my_func(named_arg, *args):\n         '''\n         )\n         with self.assertAddsMessages(\n-            MessageTest(msg_id=\"missing-param-doc\", node=node, args=(\"args\",))\n+            MessageTest(msg_id=\"missing-param-doc\", node=node, args=(\"*args\",))\n         ):\n             self.checker.visit_functiondef(node)\n \n@@ -1161,7 +1161,7 @@ def my_func(named_arg, **kwargs):\n         '''\n         )\n         with self.assertAddsMessages(\n-            MessageTest(msg_id=\"missing-param-doc\", node=node, args=(\"kwargs\",))\n+            MessageTest(msg_id=\"missing-param-doc\", node=node, args=(\"**kwargs\",))\n         ):\n             self.checker.visit_functiondef(node)\n \n@@ -1182,7 +1182,7 @@ def my_func(named_arg, *args):\n         '''\n         )\n         with self.assertAddsMessages(\n-            MessageTest(msg_id=\"missing-param-doc\", node=node, args=(\"args\",))\n+            MessageTest(msg_id=\"missing-param-doc\", node=node, args=(\"*args\",))\n         ):\n             self.checker.visit_functiondef(node)\n \n@@ -1203,7 +1203,7 @@ def my_func(named_arg, **kwargs):\n         '''\n         )\n         with self.assertAddsMessages(\n-            MessageTest(msg_id=\"missing-param-doc\", node=node, args=(\"kwargs\",))\n+            MessageTest(msg_id=\"missing-param-doc\", node=node, args=(\"**kwargs\",))\n         ):\n             self.checker.visit_functiondef(node)\n \n@@ -1228,7 +1228,7 @@ def my_func(named_arg, *args):\n         '''\n         )\n         with self.assertAddsMessages(\n-            MessageTest(msg_id=\"missing-param-doc\", node=node, args=(\"args\",))\n+            MessageTest(msg_id=\"missing-param-doc\", node=node, args=(\"*args\",))\n         ):\n             self.checker.visit_functiondef(node)\n \n@@ -1253,7 +1253,7 @@ def my_func(named_arg, **kwargs):\n         '''\n         )\n         with self.assertAddsMessages(\n-            MessageTest(msg_id=\"missing-param-doc\", node=node, args=(\"kwargs\",))\n+            MessageTest(msg_id=\"missing-param-doc\", node=node, args=(\"**kwargs\",))\n         ):\n             self.checker.visit_functiondef(node)\n \n@@ -1265,7 +1265,7 @@ def my_func(named_arg, *args):\n \n             :param named_arg: Returned\n             :type named_arg: object\n-            :param args: Optional arguments\n+            :param *args: Optional arguments\n             :returns: Maybe named_arg\n             :rtype: object or None\n             \"\"\"\n@@ -1284,7 +1284,7 @@ def my_func(named_arg, **kwargs):\n \n             :param named_arg: Returned\n             :type named_arg: object\n-            :param kwargs: Keyword arguments\n+            :param **kwargs: Keyword arguments\n             :returns: Maybe named_arg\n             :rtype: object or None\n             \"\"\"\n@@ -1345,7 +1345,7 @@ def my_func(named_arg, *args):\n             ----\n             named_arg : object\n                 Returned\n-            args :\n+            *args :\n                 Optional Arguments\n \n             Returns\n@@ -1390,7 +1390,7 @@ def my_func(named_arg, *args):\n             ----\n             named_arg : `example.value`\n                 Returned\n-            args :\n+            *args :\n                 Optional Arguments\n \n             Returns\n@@ -1415,7 +1415,7 @@ def my_func(named_arg, **kwargs):\n             ----\n             named_arg : object\n                 Returned\n-            kwargs :\n+            **kwargs :\n                 Keyword arguments\n \n             Returns\ndiff --git a/tests/functional/m/missing/missing_param_doc.py b/tests/functional/m/missing/missing_param_doc.py\n--- a/tests/functional/m/missing/missing_param_doc.py\n+++ b/tests/functional/m/missing/missing_param_doc.py\n@@ -104,3 +104,39 @@ def foobar12(arg1, arg2, arg3): #[missing-param-doc, missing-type-doc]\n     arg3\n     \"\"\"\n     print(arg1, arg2, arg3)\n+\n+def foobar13(arg1, *args, arg3=\";\"):\n+    \"\"\"Description of the function\n+\n+    Parameters\n+    ----------\n+    arg1 : str\n+        Path to the input.\n+    *args :\n+        Relevant parameters.\n+    arg3 : str, optional\n+        File separator.\n+    \"\"\"\n+    print(arg1, args, arg3)\n+\n+def foobar14(arg1, *args):\n+    \"\"\"Description of the function\n+\n+    Parameters\n+    ----------\n+    arg1 : str\n+        Path to the input.\n+    *args :\n+        Relevant parameters.\n+    \"\"\"\n+    print(arg1, args)\n+\n+def foobar15(*args):\n+    \"\"\"Description of the function\n+\n+    Parameters\n+    ----------\n+    *args :\n+        Relevant parameters.\n+    \"\"\"\n+    print(args)\n",
  "problem_statement": "*args is considered as missing in documentation\nHi, I met an issue with the following code:\r\n\r\n````\r\ndef function(file, *args, sep=\";\"):\r\n    \"\"\"Description of the function\r\n\r\n    Parameters\r\n    ----------\r\n    file : str\r\n        Path to the input.\r\n    *args\r\n        Relevant parameters.\r\n    sep : str, optional\r\n        File separator.\r\n    \"\"\"\r\n````\r\n\r\n### Current behavior\r\nReturn this warning: W9015: \"args\" missing in parameter documentation (missing-param-doc)\r\n\r\n\r\n### Expected behavior\r\nNo warning must be returned as there is a documentation concerning *args\r\n\r\n### pylint --version output\r\npylint 2.5.3\r\nastroid 2.4.2\r\nPython 3.7.2 (default, Feb 25 2019, 14:07:05)\r\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]\n",
  "hints_text": "@DanielNoord Would you like to take a look at this? I'm unable to reproduce it with `main`.\nI'm able to reproduce this.\r\n\r\nAdding `pylint.extensions.docparams` to `load-plugins` and `no-docstring-rgx=__.*__` makes this warning emit for me.\r\n\r\nI have a feeling it might be because of the `*` because the message reports it is missing for `args` instead of `*args`. I will take a look!",
  "created_at": "2021-10-17T20:08:34Z",
  "version": "2.11",
  "FAIL_TO_PASS": "[\"tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_args_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_kwargs_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_args_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_kwargs_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_args_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_kwargs_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_without_type_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_kwargs_without_type_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_without_type_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_with_xref_type_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_kwargs_without_type_numpy\"]",
  "PASS_TO_PASS": "[\"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_in_sphinx_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_type_doc_google_docstring_exempt_kwonly_args\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_with_annotations_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_default_arg_with_annotations_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_with_partial_annotations_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_non_builtin_annotations_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_non_builtin_annotations_for_returntype_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_func_params_and_keyword_params_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_func_params_and_wrong_keyword_params_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_in_numpy_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_tolerate_no_param_documentation_at_all\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_don_t_tolerate_no_param_documentation_at_all\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_tolerate_no_param_documentation_at_all\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_method_params_in_sphinx_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_method_params_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_method_params_in_numpy_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_existing_func_params_in_sphinx_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_existing_func_params_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_existing_func_params_in_numpy_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_wrong_name_of_func_params_in_sphinx_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_wrong_name_of_func_params_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_wrong_name_of_func_params_in_numpy_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_func_params_in_sphinx_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_func_params_in_google_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_func_params_in_numpy_docstring\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_and_attributes_in_class_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_init_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_init_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_init_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_constr_params_in_class\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_constr_params_in_init\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_and_init_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_and_init_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_and_init_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_kwonlyargs_are_taken_in_account\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_without_type_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_kwargs_without_type_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_with_xref_type_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict(str,str)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict[str,str]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[list[tokenize.TokenInfo]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict(str,\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict[str,\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[int\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int)\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict(str,str)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict[str,str]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[list[tokenize.TokenInfo]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict(str,\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict[str,\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[int\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int)\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict(str,str)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict[str,str]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[list[tokenize.TokenInfo]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict(str,\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict[str,\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[int\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int)\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[dict(str,str)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[dict[str,str]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[tuple(int)]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[list[tokenize.TokenInfo]]\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_optional_specifier_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_optional_specifier_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_short_name_exception\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_in_setter_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_google_2\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_numpy_2\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_property_return_type_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_property_return_type_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_property_return_type_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_annotation_property_return_type_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_property_return_type_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_annotation_property_return_type_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_property_return_type_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_property_return_type_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_non_property_return_type_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_non_property_return_type_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_non_property_return_type_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_non_property_annotation_return_type_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_raise_notimplementederror_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_google_2\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_numpy_2\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_ignored_argument_names_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_ignored_argument_names_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_ignored_argument_names_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_useless_docs_ignored_argument_names_sphinx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_useless_docs_ignored_argument_names_google\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_useless_docs_ignored_argument_names_numpy\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_skip_no_docstring_rgx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_all_docstring_rgx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_fail_empty_docstring_rgx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_fail_docparams_check_init\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_no_docstring_rgx\", \"tests/extensions/test_check_docs.py::TestParamDocChecker::test_skip_docstring_min_length\"]",
  "environment_setup_commit": "2c687133e4fcdd73ae3afa2e79be2160b150bb82",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.909685",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}