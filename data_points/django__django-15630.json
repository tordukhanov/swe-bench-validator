{
  "repo": "django/django",
  "instance_id": "django__django-15630",
  "base_commit": "dcebc5da4831d2982b26d00a9480ad538b5c5acf",
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -27,6 +27,7 @@\n     OuterRef,\n     Ref,\n     ResolvedOuterRef,\n+    Value,\n )\n from django.db.models.fields import Field\n from django.db.models.fields.related_lookups import MultiColSource\n@@ -582,8 +583,7 @@ def exists(self, using, limit=True):\n         q.clear_ordering(force=True)\n         if limit:\n             q.set_limits(high=1)\n-        q.add_extra({\"a\": 1}, None, None, None, None, None)\n-        q.set_extra_mask([\"a\"])\n+        q.add_annotation(Value(1), \"a\")\n         return q\n \n     def has_results(self, using):\n",
  "test_patch": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1434,6 +1434,18 @@ def test_aggregation_subquery_annotation_exists(self):\n         )\n         self.assertTrue(publisher_qs.exists())\n \n+    def test_aggregation_filter_exists(self):\n+        publishers_having_more_than_one_book_qs = (\n+            Book.objects.values(\"publisher\")\n+            .annotate(cnt=Count(\"isbn\"))\n+            .filter(cnt__gt=1)\n+        )\n+        query = publishers_having_more_than_one_book_qs.query.exists(\n+            using=connection.alias\n+        )\n+        _, _, group_by = query.get_compiler(connection=connection).pre_sql_setup()\n+        self.assertEqual(len(group_by), 1)\n+\n     def test_aggregation_exists_annotation(self):\n         published_books = Book.objects.filter(publisher=OuterRef(\"pk\"))\n         publisher_qs = Publisher.objects.annotate(\n",
  "problem_statement": "Unnecessary column in a GROUP BY clause with QuerySet.exists()\nDescription\n\t\nI've got a question about the interaction between exists() and group by.\nFor example something like: \nManager.values('field').annotate(cnt=Count('id')).filter(cnt__gt=1).exists()\nThe corresp. query with PostgreSQL looks like this:\nSELECT (1) AS \"a\"\nFROM \"app_model\"\nGROUP BY \"app_model\".\"field\", (1)\nHAVING COUNT(\"app_model\".\"id\") > 1\nLIMIT 1\nexists() (see ​https://github.com/django/django/blob/470708f50d8c13a50770893b8d7181f5218bf3ac/django/db/models/sql/query.py#L563) clears the SELECT clause and replaces it by (if I understand correctly) a hardcoded value 1 (as \"a\"), along with a limit of 1, which makes sense to me.\nBut get_group_by() (see ​https://github.com/django/django/blob/6b53114dd862ec97c282fdfdc83579cbd6d1560d/django/db/models/sql/compiler.py#L79) pushes this hardcoded value to the GROUP BY clause and we end up with the query above.\nNow, on PostgreSQL, that works, but to me it sounds like it works by luck/lucky robustness... and certainly the same query without the , (1) in the GROUP BY clause yields the same result.\nThe problem is that outside of PostgreSQL that GROUP BY clause can be downright invalid...\nNote that if I alter exists() to use {'a': 2} instead of {'a': 1}, it does not work anymore (on PostgreSQL), because (2) in the SELECT clause means the hardcoded number 2 while (2) in the GROUP BY clause presumably (??) refers to the 2nd expr of the SELECT clause, but we only got one... \nMy feeling is that get_group_by() should avoid adding extra/raw sql (or at least extra/raw pure values, if we can detect that...) to the group by expressions?\nNB: the existing/old ticket that seems most related to my question would probably be: https://code.djangoproject.com/ticket/24835\n",
  "hints_text": "Thanks for the report. I agree that (1) is unnecessary in the GROUP BY clause unfortunately we cannot always remove constants from it because folks can use them as an alias for n-th column (as you already noticed). Maybe we could select only the first column from the GROUP BY clause instead: django/db/models/sql/query.py diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py index 64e7927f7a..940d3141d1 100644 a b class Query(BaseExpression): 582582 q.clear_ordering(force=True) 583583 if limit: 584584 q.set_limits(high=1) 585 q.add_extra({\"a\": 1}, None, None, None, None, None) 586 q.set_extra_mask([\"a\"]) 585 if q.group_by and not q.select: 586 q.add_select_col(q.group_by[0], \"a\") 587 else: 588 q.add_extra({\"a\": 1}, None , None, None, None, None) 589 q.set_extra_mask([\"a\"]) 587590 return q 588591 589592 def has_results(self, using): Tentatively accepted for future investigation.\nThanks for the quick answer. Your suggested workaround seems interesting indeed (provided the value of said column does not affect the exists() return value - for example if it's 0?) NB: I didn't mean removing all constants from GROUP BY, rather: removing the automatic transmission of constants from the SELECT clause to the GROUP BY clause, since their meaning automatically switches from \"constant number n\" to \"nth element of the select clause\" which imo can never be intended.\nprovided the value of said column does not affect the exists() return value - for example if it's 0? No, it's not. It's enough for the query to return any rows.\nMaybe we should stop relying on extra and use Value(1) instead ​which already disables grouping. django/db/models/sql/query.py diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py index 64e7927f7a..1097de4f79 100644 a b 2727 OuterRef, 2828 Ref, 2929 ResolvedOuterRef, 30 Value, 3031) 3132from django.db.models.fields import Field 3233from django.db.models.fields.related_lookups import MultiColSource … … def exists(self, using, limit=True): 582583 q.clear_ordering(force=True) 583584 if limit: 584585 q.set_limits(high=1) 585 q.add_extra({\"a\": 1}, None, None, None, None, None) 586 q.set_extra_mask([\"a\"]) 586 q.add_annotation(Value(1), \"a\") 587587 return q 588588 589589 def has_results(self, using): Anything that relies on extra is a black box to the compiler as it could be an aggregate function or not.\nReplying to Simon Charette: Maybe we should stop relying on extra and use Value(1) instead ​which already disables grouping. Great idea!\nSounds good indeed! Replying to Mariusz Felisiak: Replying to Simon Charette: Maybe we should stop relying on extra and use Value(1) instead ​which already disables grouping. Great idea!\nMarc, Would you like to prepare a patch?\nYeah, I guess I can do that, with Simon's suggestion the whole thing should be straightforward enough. I'll take the ticket - I'll have to look up the contribution guide etc. / especially about the tests, as I haven't really contributed before.\nReplying to Marc Perrin: Yeah, I guess I can do that, with Simon's suggestion the whole thing should be straightforward enough. I'll take the ticket - I'll have to look up the contribution guide etc. / especially about the tests, as I haven't really contributed before. Great, thanks! In this ticket we are forced to check a generated SQL, IMO it's fine to add assertions to an existing test e.g. aggregation.tests.AggregateTestCase.test_aggregation_subquery_annotation_exists: with self.assertNumQueries(1) as ctx: self.assertTrue(publisher_qs.exists()) sql = ctx[0][\"sql\"] self.assertIn(\"SELECT 1 \", sql) self.assertNotIn(\"(1)\", sql) # There is just one GROUP BY clause (zero commas means at most one # clause). self.assertEqual(sql[sql.index(\"GROUP BY\") :].count(\", \"), 0)\nYeah, looks like the most relevant existing test case indeed, thanks for the pointer\nThough after debugging this test, it might be a bit more complex than we want/need (e.g. there are 4 fields in the GROUP BY anyway...) and I might just add a new test e.g. \"test_aggregation_annotation_exists\" that gets close to what I mentioned originally (e.g. Book.objects.values('publisher').annotate(cnt=Count('isbn')).filter(cnt__gt=1).exists() ) For reference, with the fix, this query goes from: SELECT (1) AS \"a\" FROM \"aggregation_book\" GROUP BY \"aggregation_book\".\"publisher_id\", (1) HAVING COUNT(\"aggregation_book\".\"isbn\") > 1 LIMIT 1 to: SELECT 1 AS \"a\" FROM \"aggregation_book\" GROUP BY \"aggregation_book\".\"publisher_id\" HAVING COUNT(\"aggregation_book\".\"isbn\") > 1 LIMIT 1 (with the test default settings i.e. sqlite I guess) I'll try to be diligent with the asserts though, because if the test must work on all backends, even self.assertIn(\"SELECT 1 \", sql) isn't good, because we can get SELECT TOP 1 1 (...) instead of SELECT 1 (...) LIMIT 1 So perhaps a simple self.assertNotIn(\", (1)\", sql) would be enough (I'm not really fond of your assert about GROUP BY either, because it's not really targeting the GROUP BY clause, it includes everything after it incl. HAVING clause)",
  "created_at": "2022-04-25T19:40:38Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_aggregation_filter_exists (aggregation.tests.AggregateTestCase)\"]",
  "PASS_TO_PASS": "[\"test_add_implementation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_alias (aggregation.tests.AggregateTestCase)\", \"test_aggregate_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_in_order_by (aggregation.tests.AggregateTestCase)\", \"test_aggregate_join_transform (aggregation.tests.AggregateTestCase)\", \"test_aggregate_multi_join (aggregation.tests.AggregateTestCase)\", \"test_aggregate_over_aggregate (aggregation.tests.AggregateTestCase)\", \"test_aggregate_over_complex_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_transform (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_after_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_compound_expression (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_expression (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_group_by (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_integer (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_not_in_aggregate (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_passed_another_aggregate (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_unset (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_unsupported_by_count (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_date_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_date_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_datetime_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_datetime_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_decimal_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_decimal_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_duration_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_duration_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_time_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_time_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_zero (aggregation.tests.AggregateTestCase)\", \"test_aggregation_exists_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregation_expressions (aggregation.tests.AggregateTestCase)\", \"test_aggregation_nested_subquery_outerref (aggregation.tests.AggregateTestCase)\", \"test_aggregation_order_by_not_selected_annotation_values (aggregation.tests.AggregateTestCase)\", \"Random() is not included in the GROUP BY when used for ordering.\", \"Subquery annotations are excluded from the GROUP BY if they are\", \"test_aggregation_subquery_annotation_exists (aggregation.tests.AggregateTestCase)\", \"Subquery annotations must be included in the GROUP BY if they use\", \"test_aggregation_subquery_annotation_related_field (aggregation.tests.AggregateTestCase)\", \"Subquery annotations and external aliases are excluded from the GROUP\", \"test_aggregation_subquery_annotation_values_collision (aggregation.tests.AggregateTestCase)\", \"test_alias_sql_injection (aggregation.tests.AggregateTestCase)\", \"test_annotate_basic (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer_select_related (aggregation.tests.AggregateTestCase)\", \"test_annotate_m2m (aggregation.tests.AggregateTestCase)\", \"test_annotate_ordering (aggregation.tests.AggregateTestCase)\", \"test_annotate_over_annotate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_list (aggregation.tests.AggregateTestCase)\", \"test_annotated_aggregate_over_annotated_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotation (aggregation.tests.AggregateTestCase)\", \"test_annotation_expressions (aggregation.tests.AggregateTestCase)\", \"test_arguments_must_be_expressions (aggregation.tests.AggregateTestCase)\", \"test_avg_decimal_field (aggregation.tests.AggregateTestCase)\", \"test_avg_duration_field (aggregation.tests.AggregateTestCase)\", \"test_backwards_m2m_annotate (aggregation.tests.AggregateTestCase)\", \"test_coalesced_empty_result_set (aggregation.tests.AggregateTestCase)\", \"test_combine_different_types (aggregation.tests.AggregateTestCase)\", \"test_complex_aggregations_require_kwarg (aggregation.tests.AggregateTestCase)\", \"test_complex_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_count (aggregation.tests.AggregateTestCase)\", \"test_count_distinct_expression (aggregation.tests.AggregateTestCase)\", \"test_count_star (aggregation.tests.AggregateTestCase)\", \".dates() returns a distinct set of dates when applied to a\", \"test_decimal_max_digits_has_no_effect (aggregation.tests.AggregateTestCase)\", \"test_distinct_on_aggregate (aggregation.tests.AggregateTestCase)\", \"test_empty_aggregate (aggregation.tests.AggregateTestCase)\", \"test_empty_result_optimization (aggregation.tests.AggregateTestCase)\", \"test_even_more_aggregate (aggregation.tests.AggregateTestCase)\", \"test_exists_extra_where_with_aggregate (aggregation.tests.AggregateTestCase)\", \"test_exists_none_with_aggregate (aggregation.tests.AggregateTestCase)\", \"test_expression_on_aggregation (aggregation.tests.AggregateTestCase)\", \"test_filter_aggregate (aggregation.tests.AggregateTestCase)\", \"Filtering against an aggregate requires the usage of the HAVING clause.\", \"test_filtering (aggregation.tests.AggregateTestCase)\", \"test_fkey_aggregate (aggregation.tests.AggregateTestCase)\", \"Exists annotations are included in the GROUP BY if they are\", \"Subquery annotations are included in the GROUP BY if they are\", \"An annotation included in values() before an aggregate should be\", \"test_more_aggregation (aggregation.tests.AggregateTestCase)\", \"test_multi_arg_aggregate (aggregation.tests.AggregateTestCase)\", \"test_multiple_aggregates (aggregation.tests.AggregateTestCase)\", \"An annotation not included in values() before an aggregate should be\", \"test_nonaggregate_aggregation_throws (aggregation.tests.AggregateTestCase)\", \"test_nonfield_annotation (aggregation.tests.AggregateTestCase)\", \"test_order_of_precedence (aggregation.tests.AggregateTestCase)\", \"test_related_aggregate (aggregation.tests.AggregateTestCase)\", \"test_reverse_fkey_annotate (aggregation.tests.AggregateTestCase)\", \"test_single_aggregate (aggregation.tests.AggregateTestCase)\", \"Sum on a distinct() QuerySet should aggregate only the distinct items.\", \"test_sum_duration_field (aggregation.tests.AggregateTestCase)\", \"Subqueries do not needlessly contain ORDER BY, SELECT FOR UPDATE or\", \"Aggregation over sliced queryset works correctly.\", \"Doing exclude() on a foreign model after annotate() doesn't crash.\", \"test_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_values_annotation_with_expression (aggregation.tests.AggregateTestCase)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.735883",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}