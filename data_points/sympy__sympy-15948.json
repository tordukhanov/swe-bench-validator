{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15948",
  "base_commit": "f8e46e9e741f253803e9b8be03287e5dd16abd4d",
  "patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -116,6 +116,8 @@ def flatten(cls, seq):\n                         # e.g. 3 + ...\n         order_factors = []\n \n+        extra = []\n+\n         for o in seq:\n \n             # O(x)\n@@ -133,12 +135,12 @@ def flatten(cls, seq):\n             # 3 or NaN\n             elif o.is_Number:\n                 if (o is S.NaN or coeff is S.ComplexInfinity and\n-                        o.is_finite is False):\n+                        o.is_finite is False) and not extra:\n                     # we know for sure the result will be nan\n                     return [S.NaN], [], None\n                 if coeff.is_Number:\n                     coeff += o\n-                    if coeff is S.NaN:\n+                    if coeff is S.NaN and not extra:\n                         # we know for sure the result will be nan\n                         return [S.NaN], [], None\n                 continue\n@@ -149,7 +151,7 @@ def flatten(cls, seq):\n \n             elif isinstance(o, MatrixExpr):\n                 # can't add 0 to Matrix so make sure coeff is not 0\n-                coeff = o.__add__(coeff) if coeff else o\n+                extra.append(o)\n                 continue\n \n             elif isinstance(o, TensExpr):\n@@ -157,7 +159,7 @@ def flatten(cls, seq):\n                 continue\n \n             elif o is S.ComplexInfinity:\n-                if coeff.is_finite is False:\n+                if coeff.is_finite is False and not extra:\n                     # we know for sure the result will be nan\n                     return [S.NaN], [], None\n                 coeff = S.ComplexInfinity\n@@ -196,7 +198,7 @@ def flatten(cls, seq):\n             # 2*x**2 + 3*x**2  ->  5*x**2\n             if s in terms:\n                 terms[s] += c\n-                if terms[s] is S.NaN:\n+                if terms[s] is S.NaN and not extra:\n                     # we know for sure the result will be nan\n                     return [S.NaN], [], None\n             else:\n@@ -276,6 +278,10 @@ def flatten(cls, seq):\n         if coeff is not S.Zero:\n             newseq.insert(0, coeff)\n \n+        if extra:\n+            newseq += extra\n+            noncommutative = True\n+\n         # we are done\n         if noncommutative:\n             return [], newseq, None\ndiff --git a/sympy/core/basic.py b/sympy/core/basic.py\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -1773,24 +1773,18 @@ def _exec_constructor_postprocessors(cls, obj):\n         postprocessors = defaultdict(list)\n         for i in obj.args:\n             try:\n-                if i in Basic._constructor_postprocessor_mapping:\n-                    for k, v in Basic._constructor_postprocessor_mapping[i].items():\n-                        postprocessors[k].extend([j for j in v if j not in postprocessors[k]])\n-                else:\n-                    postprocessor_mappings = (\n-                        Basic._constructor_postprocessor_mapping[cls].items()\n-                        for cls in type(i).mro()\n-                        if cls in Basic._constructor_postprocessor_mapping\n-                    )\n-                    for k, v in chain.from_iterable(postprocessor_mappings):\n-                        postprocessors[k].extend([j for j in v if j not in postprocessors[k]])\n+                postprocessor_mappings = (\n+                    Basic._constructor_postprocessor_mapping[cls].items()\n+                    for cls in type(i).mro()\n+                    if cls in Basic._constructor_postprocessor_mapping\n+                )\n+                for k, v in chain.from_iterable(postprocessor_mappings):\n+                    postprocessors[k].extend([j for j in v if j not in postprocessors[k]])\n             except TypeError:\n                 pass\n \n         for f in postprocessors.get(clsname, []):\n             obj = f(obj)\n-        if len(postprocessors) > 0 and obj not in Basic._constructor_postprocessor_mapping:\n-            Basic._constructor_postprocessor_mapping[obj] = postprocessors\n \n         return obj\n \ndiff --git a/sympy/core/exprtools.py b/sympy/core/exprtools.py\n--- a/sympy/core/exprtools.py\n+++ b/sympy/core/exprtools.py\n@@ -1040,11 +1040,11 @@ def mask(terms):\n         reps = []\n         for i, (c, nc) in enumerate(args):\n             if nc:\n-                nc = Mul._from_args(nc)\n+                nc = Mul(*nc)\n                 d = Dummy()\n                 reps.append((d, nc))\n                 c.append(d)\n-                args[i] = Mul._from_args(c)\n+                args[i] = Mul(*c)\n             else:\n                 args[i] = c\n         return args, dict(reps)\n@@ -1210,7 +1210,7 @@ def _mask_nc(eq, name=None):\n     and cannot be made commutative. The third value returned is a list\n     of any non-commutative symbols that appear in the returned equation.\n \n-    ``name``, if given, is the name that will be used with numered Dummy\n+    ``name``, if given, is the name that will be used with numbered Dummy\n     variables that will replace the non-commutative objects and is mainly\n     used for doctesting purposes.\n \ndiff --git a/sympy/core/mul.py b/sympy/core/mul.py\n--- a/sympy/core/mul.py\n+++ b/sympy/core/mul.py\n@@ -273,13 +273,6 @@ def flatten(cls, seq):\n                 coeff = o.__mul__(coeff)\n                 continue\n \n-            elif isinstance(o, MatrixExpr):\n-                if isinstance(coeff, MatrixExpr):\n-                    coeff *= o\n-                else:\n-                    coeff = o.__mul__(coeff)\n-                continue\n-\n             elif o is S.ComplexInfinity:\n                 if not coeff:\n                     # 0 * zoo = NaN\n@@ -595,7 +588,9 @@ def _handle_for_oo(c_part, coeff_sign):\n         # 0\n         elif coeff is S.Zero:\n             # we know for sure the result will be 0 except the multiplicand\n-            # is infinity\n+            # is infinity or a matrix\n+            if any(isinstance(c, MatrixExpr) for c in nc_part):\n+                return [coeff], nc_part, order_symbols\n             if any(c.is_finite == False for c in c_part):\n                 return [S.NaN], [], order_symbols\n             return [coeff], [], order_symbols\n@@ -1782,7 +1777,7 @@ def _keep_coeff(coeff, factors, clear=True, sign=False):\n                 r = c/q\n                 if r == int(r):\n                     return coeff*factors\n-        return Mul._from_args((coeff, factors))\n+        return Mul(coeff, factors, evaluate=False)\n     elif factors.is_Mul:\n         margs = list(factors.args)\n         if margs[0].is_Number:\ndiff --git a/sympy/core/operations.py b/sympy/core/operations.py\n--- a/sympy/core/operations.py\n+++ b/sympy/core/operations.py\n@@ -35,7 +35,9 @@ def __new__(cls, *args, **options):\n         if evaluate is None:\n             evaluate = global_evaluate[0]\n         if not evaluate:\n-            return cls._from_args(args)\n+            obj = cls._from_args(args)\n+            obj = cls._exec_constructor_postprocessors(obj)\n+            return obj\n \n         if len(args) == 0:\n             return cls.identity\ndiff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -3,7 +3,7 @@\n from functools import wraps, reduce\n import collections\n \n-from sympy.core import S, Symbol, Tuple, Integer, Basic, Expr, Eq\n+from sympy.core import S, Symbol, Tuple, Integer, Basic, Expr, Eq, Mul, Add\n from sympy.core.decorators import call_highest_priority\n from sympy.core.compatibility import range, SYMPY_INTS, default_sort_key\n from sympy.core.sympify import SympifyError, sympify\n@@ -558,6 +558,46 @@ def _eval_Eq(self, other):\n             return True\n         return Eq(self, other, evaluate=False)\n \n+def get_postprocessor(cls):\n+    def _postprocessor(expr):\n+        # To avoid circular imports, we can't have MatMul/MatAdd on the top level\n+        mat_class = {Mul: MatMul, Add: MatAdd}[cls]\n+        nonmatrices = []\n+        matrices = []\n+        for term in expr.args:\n+            if isinstance(term, MatrixExpr):\n+                matrices.append(term)\n+            else:\n+                nonmatrices.append(term)\n+\n+        if not matrices:\n+            return cls._from_args(nonmatrices)\n+\n+        if nonmatrices:\n+            if cls == Mul:\n+                for i in range(len(matrices)):\n+                    if not matrices[i].is_MatrixExpr:\n+                        # If one of the matrices explicit, absorb the scalar into it\n+                        # (doit will combine all explicit matrices into one, so it\n+                        # doesn't matter which)\n+                        matrices[i] = matrices[i].__mul__(cls._from_args(nonmatrices))\n+                        nonmatrices = []\n+                        break\n+\n+            else:\n+                # Maintain the ability to create Add(scalar, matrix) without\n+                # raising an exception. That way different algorithms can\n+                # replace matrix expressions with non-commutative symbols to\n+                # manipulate them like non-commutative scalars.\n+                return cls._from_args(nonmatrices + [mat_class(*matrices).doit(deep=False)])\n+\n+        return mat_class(cls._from_args(nonmatrices), *matrices).doit(deep=False)\n+    return _postprocessor\n+\n+Basic._constructor_postprocessor_mapping[MatrixExpr] = {\n+    \"Mul\": [get_postprocessor(Mul)],\n+    \"Add\": [get_postprocessor(Add)],\n+}\n \n def _matrix_derivative(expr, x):\n     from sympy import Derivative\ndiff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -89,6 +89,8 @@ def as_coeff_matrices(self):\n         scalars = [x for x in self.args if not x.is_Matrix]\n         matrices = [x for x in self.args if x.is_Matrix]\n         coeff = Mul(*scalars)\n+        if coeff.is_commutative is False:\n+            raise NotImplementedError(\"noncommutative scalars in MatMul are not supported.\")\n \n         return coeff, matrices\n \n@@ -138,12 +140,9 @@ def doit(self, **kwargs):\n \n     # Needed for partial compatibility with Mul\n     def args_cnc(self, **kwargs):\n-        coeff, matrices = self.as_coeff_matrices()\n-        # I don't know how coeff could have noncommutative factors, but this\n-        # handles it.\n-        coeff_c, coeff_nc = coeff.args_cnc(**kwargs)\n-\n-        return coeff_c, coeff_nc + matrices\n+        coeff_c = [x for x in self.args if x.is_commutative]\n+        coeff_nc = [x for x in self.args if not x.is_commutative]\n+        return [coeff_c, coeff_nc]\n \n     def _eval_derivative_matrix_lines(self, x):\n         from .transpose import Transpose\ndiff --git a/sympy/matrices/expressions/trace.py b/sympy/matrices/expressions/trace.py\n--- a/sympy/matrices/expressions/trace.py\n+++ b/sympy/matrices/expressions/trace.py\n@@ -19,6 +19,7 @@ class Trace(Expr):\n     Trace(A)\n     \"\"\"\n     is_Trace = True\n+    is_commutative = True\n \n     def __new__(cls, mat):\n         mat = sympify(mat)\n",
  "test_patch": "diff --git a/sympy/core/tests/test_constructor_postprocessor.py b/sympy/core/tests/test_constructor_postprocessor.py\n--- a/sympy/core/tests/test_constructor_postprocessor.py\n+++ b/sympy/core/tests/test_constructor_postprocessor.py\n@@ -1,5 +1,6 @@\n from sympy import Symbol, Mul, symbols, Basic\n \n+from sympy.utilities.pytest import XFAIL\n \n class SymbolInMulOnce(Symbol):\n     # Test class for a symbol that can only appear once in a `Mul` expression.\n@@ -36,7 +37,6 @@ class SubclassSymbolRemovesOtherSymbols(SymbolRemovesOtherSymbols):\n \n \n def test_constructor_postprocessors1():\n-    a = symbols(\"a\")\n     x = SymbolInMulOnce(\"x\")\n     y = SymbolInMulOnce(\"y\")\n     assert isinstance(3*x, Mul)\n@@ -50,13 +50,9 @@ def test_constructor_postprocessors1():\n     w = SymbolRemovesOtherSymbols(\"w\")\n     assert x*w == w\n     assert (3*w).args == (3, w)\n-    assert 3*a*w**2 == 3*w**2\n-    assert 3*a*x**3*w**2 == 3*w**2\n     assert set((w + x).args) == set((x, w))\n \n-\n def test_constructor_postprocessors2():\n-    a = symbols(\"a\")\n     x = SubclassSymbolInMulOnce(\"x\")\n     y = SubclassSymbolInMulOnce(\"y\")\n     assert isinstance(3*x, Mul)\n@@ -70,6 +66,20 @@ def test_constructor_postprocessors2():\n     w = SubclassSymbolRemovesOtherSymbols(\"w\")\n     assert x*w == w\n     assert (3*w).args == (3, w)\n+    assert set((w + x).args) == set((x, w))\n+\n+\n+@XFAIL\n+def test_subexpression_postprocessors():\n+    # The postprocessors used to work with subexpressions, but the\n+    # functionality was removed. See #15948.\n+    a = symbols(\"a\")\n+    x = SymbolInMulOnce(\"x\")\n+    w = SymbolRemovesOtherSymbols(\"w\")\n+    assert 3*a*w**2 == 3*w**2\n+    assert 3*a*x**3*w**2 == 3*w**2\n+\n+    x = SubclassSymbolInMulOnce(\"x\")\n+    w = SubclassSymbolRemovesOtherSymbols(\"w\")\n     assert 3*a*w**2 == 3*w**2\n     assert 3*a*x**3*w**2 == 3*w**2\n-    assert set((w + x).args) == set((x, w))\ndiff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -3,9 +3,9 @@\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n     Lambda, atan2, cse, cot, tan, S, Tuple, Basic, Dict,\n     Piecewise, oo, Mul, factor, nsimplify, zoo, Subs, RootOf,\n-    AccumBounds, Matrix, zeros)\n+    AccumBounds, Matrix, zeros, ZeroMatrix)\n from sympy.core.basic import _aresame\n-from sympy.utilities.pytest import XFAIL\n+from sympy.utilities.pytest import XFAIL, raises\n from sympy.abc import a, x, y, z\n \n \n@@ -23,11 +23,17 @@ def test_subs():\n \n def test_subs_Matrix():\n     z = zeros(2)\n-    assert (x*y).subs({x:z, y:0}) == z\n+    z1 = ZeroMatrix(2, 2)\n+    assert (x*y).subs({x:z, y:0}) in [z, z1]\n     assert (x*y).subs({y:z, x:0}) == 0\n-    assert (x*y).subs({y:z, x:0}, simultaneous=True) == z\n-    assert (x + y).subs({x: z, y: z}) == z\n-\n+    assert (x*y).subs({y:z, x:0}, simultaneous=True) in [z, z1]\n+    assert (x + y).subs({x: z, y: z}, simultaneous=True) in [z, z1]\n+    assert (x + y).subs({x: z, y: z}) in [z, z1]\n+\n+    # Issue #15528\n+    assert Mul(Matrix([[3]]), x).subs(x, 2.0) == Matrix([[6.0]])\n+    # Does not raise a TypeError, see comment on the MatAdd postprocessor\n+    assert Add(Matrix([[3]]), x).subs(x, 2.0) == Add(Matrix([[3]]), 2.0)\n \n def test_subs_AccumBounds():\n     e = x\ndiff --git a/sympy/matrices/expressions/tests/test_derivatives.py b/sympy/matrices/expressions/tests/test_derivatives.py\n--- a/sympy/matrices/expressions/tests/test_derivatives.py\n+++ b/sympy/matrices/expressions/tests/test_derivatives.py\n@@ -101,6 +101,9 @@ def test_matrix_derivative_vectors_and_scalars():\n \n def test_matrix_derivatives_of_traces():\n \n+    expr = Trace(A)*A\n+    assert expr.diff(A) == Derivative(Trace(A)*A, A)\n+\n     ## First order:\n \n     # Cookbook example 99:\ndiff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -1,5 +1,5 @@\n-from sympy import KroneckerDelta, diff, Piecewise, And\n-from sympy import Sum, Dummy, factor, expand\n+from sympy import (KroneckerDelta, diff, Piecewise, Sum, Dummy, factor,\n+                   expand, zeros, gcd_terms, Eq)\n \n from sympy.core import S, symbols, Add, Mul\n from sympy.core.compatibility import long\n@@ -10,8 +10,7 @@\n         SparseMatrix, Transpose, Adjoint)\n from sympy.matrices.expressions.matexpr import (MatrixElement,\n     GenericZeroMatrix, GenericIdentity)\n-from sympy.utilities.pytest import raises\n-from sympy import Eq\n+from sympy.utilities.pytest import raises, XFAIL\n \n \n n, m, l, k, p = symbols('n m l k p', integer=True)\n@@ -342,7 +341,7 @@ def test_inv():\n     B = MatrixSymbol('B', 3, 3)\n     assert B.inv() == B**-1\n \n-\n+@XFAIL\n def test_factor_expand():\n     A = MatrixSymbol(\"A\", n, n)\n     B = MatrixSymbol(\"B\", n, n)\n@@ -352,6 +351,10 @@ def test_factor_expand():\n     assert expand(expr1) == expr2\n     assert factor(expr2) == expr1\n \n+    expr = B**(-1)*(A**(-1)*B**(-1) - A**(-1)*C*B**(-1))**(-1)*A**(-1)\n+    I = Identity(n)\n+    # Ideally we get the first, but we at least don't want a wrong answer\n+    assert factor(expr) in [I - C, B**-1*(A**-1*(I - C)*B**-1)**-1*A**-1]\n \n def test_issue_2749():\n     A = MatrixSymbol(\"A\", 5, 2)\n@@ -413,3 +416,91 @@ def test_generic_identity():\n     assert MatMul(I, A) == MatMul(A)\n     # Make sure it is hashable\n     hash(I)\n+\n+def test_MatMul_postprocessor():\n+    z = zeros(2)\n+    z1 = ZeroMatrix(2, 2)\n+    assert Mul(0, z) == Mul(z, 0) in [z, z1]\n+\n+    M = Matrix([[1, 2], [3, 4]])\n+    Mx = Matrix([[x, 2*x], [3*x, 4*x]])\n+    assert Mul(x, M) == Mul(M, x) == Mx\n+\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    assert Mul(A, M) == MatMul(A, M)\n+    assert Mul(M, A) == MatMul(M, A)\n+    # Scalars should be absorbed into constant matrices\n+    a = Mul(x, M, A)\n+    b = Mul(M, x, A)\n+    c = Mul(M, A, x)\n+    assert a == b == c == MatMul(Mx, A)\n+    a = Mul(x, A, M)\n+    b = Mul(A, x, M)\n+    c = Mul(A, M, x)\n+    assert a == b == c == MatMul(A, Mx)\n+    assert Mul(M, M) == M**2\n+    assert Mul(A, M, M) == MatMul(A, M**2)\n+    assert Mul(M, M, A) == MatMul(M**2, A)\n+    assert Mul(M, A, M) == MatMul(M, A, M)\n+\n+    assert Mul(A, x, M, M, x) == MatMul(A, Mx**2)\n+\n+@XFAIL\n+def test_MatAdd_postprocessor_xfail():\n+    # This is difficult to get working because of the way that Add processes\n+    # its args.\n+    z = zeros(2)\n+    assert Add(z, S.NaN) == Add(S.NaN, z)\n+\n+def test_MatAdd_postprocessor():\n+    # Some of these are nonsensical, but we do not raise errors for Add\n+    # because that breaks algorithms that want to replace matrices with dummy\n+    # symbols.\n+\n+    z = zeros(2)\n+\n+    assert Add(0, z) == Add(z, 0) == z\n+\n+    a = Add(S.Infinity, z)\n+    assert a == Add(z, S.Infinity)\n+    assert isinstance(a, Add)\n+    assert a.args == (S.Infinity, z)\n+\n+    a = Add(S.ComplexInfinity, z)\n+    assert a == Add(z, S.ComplexInfinity)\n+    assert isinstance(a, Add)\n+    assert a.args == (S.ComplexInfinity, z)\n+\n+    a = Add(z, S.NaN)\n+    # assert a == Add(S.NaN, z) # See the XFAIL above\n+    assert isinstance(a, Add)\n+    assert a.args == (S.NaN, z)\n+\n+    M = Matrix([[1, 2], [3, 4]])\n+    a = Add(x, M)\n+    assert a == Add(M, x)\n+    assert isinstance(a, Add)\n+    assert a.args == (x, M)\n+\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    assert Add(A, M) == Add(M, A) == A + M\n+\n+    # Scalars should be absorbed into constant matrices (producing an error)\n+    a = Add(x, M, A)\n+    assert a == Add(M, x, A) == Add(M, A, x) == Add(x, A, M) == Add(A, x, M) == Add(A, M, x)\n+    assert isinstance(a, Add)\n+    assert a.args == (x, A + M)\n+\n+    assert Add(M, M) == 2*M\n+    assert Add(M, A, M) == Add(M, M, A) == Add(A, M, M) == A + 2*M\n+\n+    a = Add(A, x, M, M, x)\n+    assert isinstance(a, Add)\n+    assert a.args == (2*x, A + 2*M)\n+\n+def test_simplify_matrix_expressions():\n+    # Various simplification functions\n+    assert type(gcd_terms(C*D + D*C)) == MatAdd\n+    a = gcd_terms(2*C*D + 4*D*C)\n+    assert type(a) == MatMul\n+    assert a.args == (2, (C*D + 2*D*C))\ndiff --git a/sympy/matrices/expressions/tests/test_matmul.py b/sympy/matrices/expressions/tests/test_matmul.py\n--- a/sympy/matrices/expressions/tests/test_matmul.py\n+++ b/sympy/matrices/expressions/tests/test_matmul.py\n@@ -8,7 +8,10 @@\n from sympy.strategies import null_safe\n from sympy import refine, Q, Symbol\n \n+from sympy.utilities.pytest import XFAIL\n+\n n, m, l, k = symbols('n m l k', integer=True)\n+x = symbols('x')\n A = MatrixSymbol('A', n, m)\n B = MatrixSymbol('B', m, l)\n C = MatrixSymbol('C', n, n)\n@@ -128,9 +131,15 @@ def test_matmul_no_matrices():\n     assert not isinstance(MatMul(n, m), MatMul)\n \n def test_matmul_args_cnc():\n+    assert MatMul(n, A, A.T).args_cnc() == [[n], [A, A.T]]\n+    assert MatMul(A, A.T).args_cnc() == [[], [A, A.T]]\n+\n+@XFAIL\n+def test_matmul_args_cnc_symbols():\n+    # Not currently supported\n     a, b = symbols('a b', commutative=False)\n-    assert MatMul(n, a, b, A, A.T).args_cnc() == ([n], [a, b, A, A.T])\n-    assert MatMul(A, A.T).args_cnc() == ([1], [A, A.T])\n+    assert MatMul(n, a, b, A, A.T).args_cnc() == [[n], [a, b, A, A.T]]\n+    assert MatMul(n, a, A, b, A.T).args_cnc() == [[n], [a, A, b, A.T]]\n \n def test_issue_12950():\n     M = Matrix([[Symbol(\"x\")]]) * MatrixSymbol(\"A\", 1, 1)\ndiff --git a/sympy/matrices/expressions/tests/test_trace.py b/sympy/matrices/expressions/tests/test_trace.py\n--- a/sympy/matrices/expressions/tests/test_trace.py\n+++ b/sympy/matrices/expressions/tests/test_trace.py\n@@ -43,6 +43,7 @@ def test_Trace():\n \n     assert str(trace(A)) == str(Trace(A).doit())\n \n+    assert Trace(A).is_commutative is True\n \n def test_Trace_A_plus_B():\n     assert trace(A + B) == Trace(A) + Trace(B)\n",
  "problem_statement": "Sympy 1.4.dev - issue with subs\nHey! \r\nI've got the following issue:\r\nWhen I substitute a value into my existing (matrix) equation I get a completely different (and wrong!) result when evaluating before substituting. \r\n\r\nIt seems if I print out the equation in question and _sympify_ it, the result is as expected, but I really do not see why there would be a difference like this.\r\n\r\nHere's the piece of (debug) code (_sp_ is _sympy_):\r\n```\r\n            if _debug:\r\n                print 'sol', sol\r\n                print 'srepr', sp.srepr(sol)\r\n                print 'u0N', u0N, type(u0N)\r\n                sol_1 = sol.subs('u0None', u0N)\r\n                sol_2 = sol.subs('u0None', u0N.evalf())\r\n                print 'are they the same?\\n %s\\n vs \\n%s'%(sol_1, sol_2)\r\n                print 'equal?', sol_1 == sol_2\r\n\r\n                print \"what about when I sympify it?\"\r\n                sol_symp = sp.sympify(str(sol))\r\n                print 'new', sol_symp\r\n                print 'new srepr', sp.srepr(sol_symp)\r\n                print 'equal?', sol_symp.subs('u0None', u0N) == sol_symp.subs('u0None', u0N.evalf())\r\n```\r\nAnd the results:\r\n```\r\nsol Matrix([[1, 1, 1, 1]])*u0None + Matrix([[-0.222222222222222, -0.617283950617284, -0.924554183813443, -1.16354214296601]])\r\nsrepr Add(Mul(ImmutableDenseMatrix([[Integer(1), Integer(1), Integer(1), Integer(1)]]), Symbol('u0None')), ImmutableDenseMatrix([[Float('-0.22222222222222221', precision=53), Float('-0.61728395061728392', precision=53), Float('-0.92455418381344312', precision=53), Float('-1.1635421429660113', precision=53)]]))\r\nu0N 2 <class 'sympy.core.numbers.Integer'>\r\nare they the same?\r\n Matrix([[1.77777777777778, 1.38271604938272, 1.07544581618656, 0.836457857033989]])\r\n vs \r\nMatrix([[0.777777777777778, 0.382716049382716, 0.0754458161865569, -0.163542142966011]])\r\nequal? False\r\nwhat about when I sympify it?\r\nnew Matrix([[u0None - 0.222222222222222, u0None - 0.617283950617284, u0None - 0.924554183813443, u0None - 1.16354214296601]])\r\nnew srepr MutableDenseMatrix([[Add(Symbol('u0None'), Float('-0.22222222222222199', precision=53)), Add(Symbol('u0None'), Float('-0.61728395061728403', precision=53)), Add(Symbol('u0None'), Float('-0.92455418381344301', precision=53)), Add(Symbol('u0None'), Float('-1.16354214296601', precision=53))]])\r\nequal? True\r\n```\r\n\r\nI've got no idea what might be causing this, but it is annoying.\nFix of Matrix expressions sometimes gives Add and Mul instead of MatA…\n…dd and MatMul\r\n\r\n<!-- Your title above should be a short description of what\r\nwas changed. Do not include the issue number in the title. -->\r\n\r\n#### References to other Issues or PRs\r\n<!-- If this pull request fixes an issue, write \"Fixes #NNNN\" in that exact\r\nformat, e.g. \"Fixes #1234\". See\r\nhttps://github.com/blog/1506-closing-issues-via-pull-requests .-->\r\nFixes #15665 \r\n\r\n\r\n#### Brief description of what is fixed or changed\r\nModified Mul.flatten such that it returns the correct return type in case of matrices i.e\r\n\r\n>>> A = MatrixSymbol(\"A\", n, n)\r\n>>> B = MatrixSymbol(\"B\", n, n)\r\n>>> type(Mul(A, B))\r\n<class 'sympy.matrices.expressions.matmul.MatMul'>\r\n>>> type(Mul(-1, Mul(A, B)))\r\n<class 'sympy.matrices.expressions.matmul.MatMul'>\r\n\r\n#### Other comments\r\n\r\n\r\n#### Release Notes\r\n\r\n<!-- Write the release notes for this release below. See\r\nhttps://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information\r\non how to write release notes. The bot will check your release notes\r\nautomatically to see if they are formatted correctly. -->\r\n\r\n<!-- BEGIN RELEASE NOTES -->\r\n* core\r\n       * fixed a bug in the flatten function\r\n\r\n\r\n<!-- END RELEASE NOTES -->\r\n\n",
  "hints_text": "Could you provide a minimal and self-contained example? In general, checking for exact equality of floating point numbers is usually not what you want to do.\n> Could you provide a minimal and self-contained example? In general, checking for exact equality of floating point numbers is usually not what you want to do.\r\n\r\nI am working on producing a minimal example.\r\nAnd I can understand that comparing can be faulty. However, if you look at the resulting matrices, they are entirely different. If we were talking about a floating point precision error (or something of the like), we'd be looking at two similar results, not ones that are completely different.\nOK, I've not got a self-contained example. However, I went as deep as I could.\r\nIs there any way to \"serialize\" my existing expression any further than _srepr_?\r\n\r\nIn any case, I've seen that for some reason, in this isolated case, a _Matrix_ times _2_ works correctly, yet a _Matrix_ times _2.0_ does not.\r\n(Mostly the same code, slight modifications in the end and still a part of some larger script):\r\n```\r\n            if _debug:\r\n                print 'sol', sol\r\n                print 'srepr', sp.srepr(sol)\r\n                print 'u0N', u0N, type(u0N)\r\n                sol_1 = sol.subs('u0None', u0N)\r\n                sol_2 = sol.subs('u0None', u0N.evalf())\r\n                print 'are they the same?\\n %s\\n vs \\n%s'%(sol_1, sol_2)\r\n                print 'equal?', sol_1 == sol_2\r\n\r\n                print \"what about when I sympify it?\"\r\n                sol_symp = sp.sympify(str(sol))\r\n                print 'new', sol_symp\r\n                print 'new srepr', sp.srepr(sol_symp)\r\n                print 'equal?', sol_symp.subs('u0None', u0N) == sol_symp.subs('u0None', u0N.evalf())\r\n                print 'preorder_traversal'\r\n                for el in sp.preorder_traversal(sol):\r\n                    t1 = el.subs('u0None', u0N)\r\n                    t2 = el.subs('u0None', u0N.evalf())\r\n                    equal = t1 == t2\r\n                    if not equal:\r\n                        print 'el', el, u0N, u0N.evalf()\r\n                        print 'sp.srepr', sp.srepr(el)\r\n                        print 'subs', t1, t2, t1 == t2\r\n```\r\nAnd the result:\r\n```\r\nsol Matrix([[1, 1, 1, 1]])*u0None + Matrix([[-0.222222222222222, -0.617283950617284, -0.924554183813443, -1.16354214296601]])\r\nsrepr Add(Mul(ImmutableDenseMatrix([[Integer(1), Integer(1), Integer(1), Integer(1)]]), Symbol('u0None')), ImmutableDenseMatrix([[Float('-0.22222222222222221', precision=53), Float('-0.61728395061728392', precision=53), Float('-0.92455418381344312', precision=53), Float('-1.1635421429660113', precision=53)]]))\r\nu0N 2 <class 'sympy.core.numbers.Integer'>\r\nare they the same?\r\n Matrix([[1.77777777777778, 1.38271604938272, 1.07544581618656, 0.836457857033989]])\r\n vs \r\nMatrix([[0.777777777777778, 0.382716049382716, 0.0754458161865569, -0.163542142966011]])\r\nequal? False\r\nwhat about when I sympify it?\r\nnew Matrix([[u0None - 0.222222222222222, u0None - 0.617283950617284, u0None - 0.924554183813443, u0None - 1.16354214296601]])\r\nnew srepr MutableDenseMatrix([[Add(Symbol('u0None'), Float('-0.22222222222222199', precision=53)), Add(Symbol('u0None'), Float('-0.61728395061728403', precision=53)), Add(Symbol('u0None'), Float('-0.92455418381344301', precision=53)), Add(Symbol('u0None'), Float('-1.16354214296601', precision=53))]])\r\nequal? True\r\npreorder_traversal\r\nel Matrix([[1, 1, 1, 1]])*u0None + Matrix([[-0.222222222222222, -0.617283950617284, -0.924554183813443, -1.16354214296601]]) 2 2.00000000000000\r\nsp.srepr Add(Mul(ImmutableDenseMatrix([[Integer(1), Integer(1), Integer(1), Integer(1)]]), Symbol('u0None')), ImmutableDenseMatrix([[Float('-0.22222222222222221', precision=53), Float('-0.61728395061728392', precision=53), Float('-0.92455418381344312', precision=53), Float('-1.1635421429660113', precision=53)]]))\r\nsubs Matrix([[1.77777777777778, 1.38271604938272, 1.07544581618656, 0.836457857033989]]) Matrix([[0.777777777777778, 0.382716049382716, 0.0754458161865569, -0.163542142966011]]) False\r\n# This is where I've got a Matrix times u0None and it gets 2 wholly different results for 2 and 2.0 \r\nel Matrix([[1, 1, 1, 1]])*u0None 2 2.00000000000000\r\nsp.srepr Mul(ImmutableDenseMatrix([[Integer(1), Integer(1), Integer(1), Integer(1)]]), Symbol('u0None'))\r\n# on the left is the expected result with 2 and next to it the wrong result with 2.0\r\nsubs Matrix([[2, 2, 2, 2]]) Matrix([[1, 1, 1, 1]]) False\r\n```\r\n\nIt seems that `sol` contains the symbol `u0None` but not the string `'u0None'`.  Therefore the substitution should be `sol.subs(u0None, u0N)` instead of `sol.subs('u0None', u0N)`.\n> It seems that `sol` contains the symbol `u0None` but not the string `'u0None'`. Therefore the substitution should be `sol.subs(u0None, u0N)` instead of `sol.subs('u0None', u0N)`.\r\n\r\nYou're right, there is the symbol not the string. As this little program demonstrates, either will work:\r\n```\r\nimport sympy\r\n\r\nif __name__ == '__main__':\r\n    eq = sympy.sympify('x^2 + 2*x + 4 * u0None')\r\n    print 'eq', eq\r\n    t1 = eq.subs('u0None', 3)\r\n    t2 = eq.subs(sympy.Symbol('u0None'), 3)\r\n    print 'with string: %s \\nwith symbol: %s'%(t1, t2)\r\n```\r\nOutputting:\r\n```\r\neq 4*u0None + x**2 + 2*x\r\nwith string: x**2 + 2*x + 12 \r\nwith symbol: x**2 + 2*x + 12\r\n```\r\nThe same can be seen in the example I provided. In both cases the symbol vanishes after calling the _subs_ method.\r\n\r\nFurthermore, even if I replace the string with a symbol, the result is the very same:\r\n```\r\n            if _debug:\r\n                u0None = sp.Symbol('u0None')\r\n                print 'sol', sol\r\n                print 'srepr', sp.srepr(sol)\r\n                print 'u0N', u0N, type(u0N)\r\n                sol_1 = sol.subs(u0None, u0N)\r\n                sol_2 = sol.subs(u0None, u0N.evalf())\r\n                print 'are they the same?\\n %s\\n vs \\n%s'%(sol_1, sol_2)\r\n                print 'equal?', sol_1 == sol_2\r\n\r\n                print \"what about when I sympify it?\"\r\n                sol_symp = sp.sympify(str(sol))\r\n                print 'new', sol_symp\r\n                print 'new srepr', sp.srepr(sol_symp)\r\n                print 'equal?', sol_symp.subs(u0None, u0N) == sol_symp.subs(u0None, u0N.evalf())\r\n                print 'preorder_traversal'\r\n                for el in sp.preorder_traversal(sol):\r\n                    t1 = el.subs(u0None, u0N)\r\n                    t2 = el.subs(u0None, u0N.evalf())\r\n                    equal = t1 == t2\r\n                    if not equal:\r\n                        print 'el', el, u0N, u0N.evalf()\r\n                        print 'sp.srepr', sp.srepr(el)\r\n                        print 'subs', t1, t2, t1 == t2\r\n                print 'what about func and args?'\r\n                sol_ = sol.func(*sol.args)\r\n                t1 = sol_.subs(u0None, u0N)\r\n                t2 = sol_.subs(u0None, u0N.evalf())\r\n                print sol_\r\n                print t1, t2\r\n```\r\nOutputting:\r\n```\r\nsol Matrix([[1, 1, 1, 1]])*u0None + Matrix([[-0.222222222222222, -0.617283950617284, -0.924554183813443, -1.16354214296601]])\r\nsrepr Add(Mul(ImmutableDenseMatrix([[Integer(1), Integer(1), Integer(1), Integer(1)]]), Symbol('u0None')), ImmutableDenseMatrix([[Float('-0.22222222222222221', precision=53), Float('-0.61728395061728392', precision=53), Float('-0.92455418381344312', precision=53), Float('-1.1635421429660113', precision=53)]]))\r\nu0N 2 <class 'sympy.core.numbers.Integer'>\r\nare they the same?\r\n Matrix([[1.77777777777778, 1.38271604938272, 1.07544581618656, 0.836457857033989]])\r\n vs \r\nMatrix([[0.777777777777778, 0.382716049382716, 0.0754458161865569, -0.163542142966011]])\r\nequal? False\r\nwhat about when I sympify it?\r\nnew Matrix([[u0None - 0.222222222222222, u0None - 0.617283950617284, u0None - 0.924554183813443, u0None - 1.16354214296601]])\r\nnew srepr MutableDenseMatrix([[Add(Symbol('u0None'), Float('-0.22222222222222199', precision=53)), Add(Symbol('u0None'), Float('-0.61728395061728403', precision=53)), Add(Symbol('u0None'), Float('-0.92455418381344301', precision=53)), Add(Symbol('u0None'), Float('-1.16354214296601', precision=53))]])\r\nequal? True\r\npreorder_traversal\r\nel Matrix([[1, 1, 1, 1]])*u0None + Matrix([[-0.222222222222222, -0.617283950617284, -0.924554183813443, -1.16354214296601]]) 2 2.00000000000000\r\nsp.srepr Add(Mul(ImmutableDenseMatrix([[Integer(1), Integer(1), Integer(1), Integer(1)]]), Symbol('u0None')), ImmutableDenseMatrix([[Float('-0.22222222222222221', precision=53), Float('-0.61728395061728392', precision=53), Float('-0.92455418381344312', precision=53), Float('-1.1635421429660113', precision=53)]]))\r\nsubs Matrix([[1.77777777777778, 1.38271604938272, 1.07544581618656, 0.836457857033989]]) Matrix([[0.777777777777778, 0.382716049382716, 0.0754458161865569, -0.163542142966011]]) False\r\nel Matrix([[1, 1, 1, 1]])*u0None 2 2.00000000000000\r\nsp.srepr Mul(ImmutableDenseMatrix([[Integer(1), Integer(1), Integer(1), Integer(1)]]), Symbol('u0None'))\r\nsubs Matrix([[2, 2, 2, 2]]) Matrix([[1, 1, 1, 1]]) False\r\nwhat about func and args?\r\nMatrix([[1, 1, 1, 1]])*u0None + Matrix([[-0.222222222222222, -0.617283950617284, -0.924554183813443, -1.16354214296601]])\r\nMatrix([[1.77777777777778, 1.38271604938272, 1.07544581618656, 0.836457857033989]]) Matrix([[0.777777777777778, 0.382716049382716, 0.0754458161865569, -0.163542142966011]])\r\n```\nMinimal self-contained example:\r\n```\r\nimport sympy\r\n\r\neq = sympy.Mul(sympy.ImmutableDenseMatrix([[sympy.Integer(1), sympy.Integer(1), sympy.Integer(1), sympy.Integer(1)]]), sympy.Symbol('u0None'))\r\nprint 'Equation:\\n', eq\r\nprint 'Subbing 2\\n', eq.subs('u0None', 2)\r\nprint 'Subbing 2.0\\n', eq.subs('u0None', 2.0)\r\nu0None = sympy.Symbol('u0None')\r\nprint 'Using Symbol:', u0None\r\nprint 'Subbing 2\\n', eq.subs(u0None, 2)\r\nprint 'Subbing 2.0\\n', eq.subs(u0None, 2.0)\r\n```\r\nOutputting:\r\n```\r\nEquation:\r\nMatrix([[1, 1, 1, 1]])*u0None\r\nSubbing 2\r\nMatrix([[2, 2, 2, 2]])\r\nSubbing 2.0\r\nMatrix([[1, 1, 1, 1]])\r\nUsing Symbol: u0None\r\nSubbing 2\r\nMatrix([[2, 2, 2, 2]])\r\nSubbing 2.0\r\nMatrix([[1, 1, 1, 1]])\r\n```\nI can confirm this.\r\n\r\nAn even smaller example:\r\n```\r\nIn [23]: Mul(Matrix([[3]]), x).subs(x, 2.0)\r\nOut[23]: [3]\r\n\r\nIn [24]: Mul(Matrix([[3]]), x).subs(x, 2)\r\nOut[24]: [6]\r\n```\n[This line](https://github.com/sympy/sympy/blob/master/sympy/core/mul.py#L280) allows the type of `coeff` become `Matrix` but that is not tested on [this line](https://github.com/sympy/sympy/blob/master/sympy/core/mul.py#L265) which results in the multiplier 2.0 being lost. Maybe the test should be changed to something like `coeff is not zoo`.\nActually, I think that `coeff` of `Mul.flatten` should not be a matrix at all. It is my understanding that the purpose of `coeff` is to collect all numerical factors and return their product as the first item of `c_part` (if it is not 1). Matrices are non-commutative by nature and should be placed in `nc_part` (preserving their order).\nAn issue I believe is linked to this.\r\nWhen substituting the _e_ instead of the unknown and evaluating afterwards, we get the incorrect result:\r\n`Mul(Matrix([[3]]), x).subs(x, exp(1)).evalf()`\r\nComes out to:\r\n`Matrix([[3]])`\r\nHowever, we should (obviously) be getting:\r\n`Matrix([[8.15484548537714]])`\r\n\r\nThe workaround I've been using:\r\n`Mul(Matrix([[3]]), x).subs(x, eye(1) * exp(1)).evalf()`\r\nresults in\r\n`Matrix([[8.15484548537714]])`\r\n\r\nEDIT: \r\nThe original subs works just fine:\r\n`Mul(Matrix([[3]]), x).subs(x, exp(1))`\r\nResulting:\r\n`Matrix([[3]])*E`\r\n\r\nI'm guessing `evalf` somehow works similar to `subs`.\r\n\r\nEDIT2:\r\nSame happens when you use `pi` instead of `E` (as expected, really).\nMatrices are put in the `coeff` as part of a hack to keep them separate from the rest of the expression.  See the discussion at https://github.com/sympy/sympy/issues/15665 (unfortunately, the pull request https://github.com/sympy/sympy/pull/15666 doesn't not seem to fix this issue). \nThe minimal example does work if you use `MatMul` instead of `Mul`. \r\n\r\n```py\r\n>>> MatMul(Matrix([[3]]), x).subs(x, 2.0)\r\nMatrix([[3]])*2.0\r\n```\r\n\r\nMaybe instead of using the `coeff` hack, if a matrix is seen in Mul we should just pass down to MatMul. I don't know if there are any clean ways to handle this because the API wasn't really designed around, but we should at least try to get something that avoids wrong results. \nI would like to fix this issue. @jksuom @asmeurer  Can you exactly tell me what to be fixed?\nI don't think I can. That is something that has to be investigated. The use of MatMul appears promising to me.\n:white_check_mark:\n\nHi, I am the [SymPy bot](https://github.com/sympy/sympy-bot) (v135). I'm here to help you write a release notes entry. Please read the [guide on how to write release notes](https://github.com/sympy/sympy/wiki/Writing-Release-Notes).\n\n\n\nYour release notes are in good order.\n\nHere is what the release notes will look like:\n* core\n  * fixed a bug in the flatten function ([#15692](https://github.com/sympy/sympy/pull/15692) by [@jmig5776](https://github.com/jmig5776))\n\nThis will be added to https://github.com/sympy/sympy/wiki/Release-Notes-for-1.4.\n\nNote: This comment will be updated with the latest check if you edit the pull request. You need to reload the page to see it. <details><summary>Click here to see the pull request description that was parsed.</summary>\n\n    …dd and MatMul\r\n\r\n    <!-- Your title above should be a short description of what\r\n    was changed. Do not include the issue number in the title. -->\r\n\r\n    #### References to other Issues or PRs\r\n    <!-- If this pull request fixes an issue, write \"Fixes #NNNN\" in that exact\r\n    format, e.g. \"Fixes #1234\". See\r\n    https://github.com/blog/1506-closing-issues-via-pull-requests .-->\r\n    Fixes #15665 \r\n\r\n\r\n    #### Brief description of what is fixed or changed\r\n    Modified Mul.flatten such that it returns the correct return type in case of matrices i.e\r\n\r\n    >>> A = MatrixSymbol(\"A\", n, n)\r\n    >>> B = MatrixSymbol(\"B\", n, n)\r\n    >>> type(Mul(A, B))\r\n    <class 'sympy.matrices.expressions.matmul.MatMul'>\r\n    >>> type(Mul(-1, Mul(A, B)))\r\n    <class 'sympy.matrices.expressions.matmul.MatMul'>\r\n\r\n    #### Other comments\r\n\r\n\r\n    #### Release Notes\r\n\r\n    <!-- Write the release notes for this release below. See\r\n    https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information\r\n    on how to write release notes. The bot will check your release notes\r\n    automatically to see if they are formatted correctly. -->\r\n\r\n    <!-- BEGIN RELEASE NOTES -->\r\n    * core\r\n           * fixed a bug in the flatten function\r\n\r\n\r\n    <!-- END RELEASE NOTES -->\r\n\n\n</details><p>\n\n@asmeurer , @smichr  Please review it.\n@smichr I think it can merge into master.\nI'll take a look. Can you add tests. \nYeah sure I will add some tests\n@asmeurer I had added the test cases . \nThis doesn't seem to fix the error from https://github.com/sympy/sympy/issues/15120 (you may need to merge in the branch from https://github.com/sympy/sympy/pull/15121 first). The following should work without giving an exception\r\n\r\n```py\r\nimport sympy as sy\r\nn = sy.symbols('n')\r\nA = sy.MatrixSymbol(\"A\",n,n)\r\nB = sy.MatrixSymbol(\"B\",n,n)\r\nC = sy.MatrixSymbol(\"C\",n,n)\r\nM = A.inverse()*B.inverse() - A.inverse()*C*B.inverse()\r\na = B.inverse()*M.inverse()*A.inverse()\r\nfactor(a)\r\n```\nOhh I was unaware about #15120 . Should I merge into branch of #15121 ?. Or I should work to solve this here explicitly.\nSorry, I mean to test merge against that branch to test, but don't actually push the merge up here. You could create a new branch first before merging, or use a detached HEAD. \nTo clarify, merging my branch will be necessary to avoid other bugs unrelated to this one. \n> This doesn't seem to fix the error from #15120 (you may need to merge in the branch from #15121 first). The following should work without giving an exception\r\n> \r\n> ```python\r\n> import sympy as sy\r\n> n = sy.symbols('n')\r\n> A = sy.MatrixSymbol(\"A\",n,n)\r\n> B = sy.MatrixSymbol(\"B\",n,n)\r\n> C = sy.MatrixSymbol(\"C\",n,n)\r\n> M = A.inverse()*B.inverse() - A.inverse()*C*B.inverse()\r\n> a = B.inverse()*M.inverse()*A.inverse()\r\n> factor(a)\r\n> ```\r\n\r\nI tested the merge with your branch locally but it is does not seems to fix the exception occuring in above case.What do you think?",
  "created_at": "2019-02-09T00:17:24Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_subs_Matrix\", \"test_MatMul_postprocessor\", \"test_MatAdd_postprocessor\", \"test_matmul_args_cnc\", \"test_Trace\"]",
  "PASS_TO_PASS": "[\"test_constructor_postprocessors1\", \"test_constructor_postprocessors2\", \"test_subs\", \"test_subs_AccumBounds\", \"test_trigonometric\", \"test_powers\", \"test_logexppow\", \"test_bug\", \"test_subbug1\", \"test_subbug2\", \"test_dict_set\", \"test_dict_ambigous\", \"test_deriv_sub_bug3\", \"test_equality_subs1\", \"test_equality_subs2\", \"test_issue_3742\", \"test_subs_dict1\", \"test_mul\", \"test_subs_simple\", \"test_subs_constants\", \"test_subs_commutative\", \"test_subs_noncommutative\", \"test_subs_basic_funcs\", \"test_subs_wild\", \"test_subs_mixed\", \"test_division\", \"test_add\", \"test_subs_issue_4009\", \"test_functions_subs\", \"test_derivative_subs\", \"test_derivative_subs2\", \"test_derivative_subs3\", \"test_issue_5284\", \"test_subs_iter\", \"test_subs_dict\", \"test_no_arith_subs_on_floats\", \"test_issue_5651\", \"test_issue_6075\", \"test_issue_6079\", \"test_issue_4680\", \"test_issue_6158\", \"test_Function_subs\", \"test_simultaneous_subs\", \"test_issue_6419_6421\", \"test_issue_6559\", \"test_issue_5261\", \"test_issue_6923\", \"test_2arg_hack\", \"test_noncommutative_subs\", \"test_issue_2877\", \"test_issue_5910\", \"test_issue_5217\", \"test_issue_10829\", \"test_pow_eval_subs_no_cache\", \"test_RootOf_issue_10092\", \"test_issue_8886\", \"test_issue_12657\", \"test_recurse_Application_args\", \"test_Subs_subs\", \"test_issue_13333\", \"test_issue_15234\", \"test_matrix_derivative_non_matrix_result\", \"test_matrix_derivative_trivial_cases\", \"test_matrix_derivative_with_inverse\", \"test_matrix_derivative_vectors_and_scalars\", \"test_matrix_derivatives_of_traces\", \"test_derivatives_of_complicated_matrix_expr\", \"test_shape\", \"test_matexpr\", \"test_ZeroMatrix\", \"test_ZeroMatrix_doit\", \"test_Identity\", \"test_Identity_doit\", \"test_addition\", \"test_multiplication\", \"test_MatPow\", \"test_MatrixSymbol\", \"test_dense_conversion\", \"test_free_symbols\", \"test_zero_matmul\", \"test_matadd_simplify\", \"test_matmul_simplify\", \"test_invariants\", \"test_indexing\", \"test_single_indexing\", \"test_MatrixElement_commutative\", \"test_MatrixSymbol_determinant\", \"test_MatrixElement_diff\", \"test_MatrixElement_doit\", \"test_identity_powers\", \"test_Zero_power\", \"test_matrixelement_diff\", \"test_MatrixElement_with_values\", \"test_inv\", \"test_issue_2749\", \"test_issue_2750\", \"test_issue_7842\", \"test_generic_zero_matrix\", \"test_generic_identity\", \"test_adjoint\", \"test_transpose\", \"test_factor_in_front\", \"test_remove_ids\", \"test_xxinv\", \"test_any_zeros\", \"test_unpack\", \"test_only_squares\", \"test_determinant\", \"test_doit\", \"test_doit_drills_down\", \"test_doit_deep_false_still_canonical\", \"test_matmul_scalar_Matrix_doit\", \"test_matmul_sympify\", \"test_collapse_MatrixBase\", \"test_refine\", \"test_matmul_no_matrices\", \"test_issue_12950\", \"test_Trace_A_plus_B\", \"test_Trace_MatAdd_doit\", \"test_Trace_MatPow_doit\", \"test_Trace_MutableMatrix_plus\", \"test_Trace_doit_deep_False\", \"test_trace_constant_factor\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.104320",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}