{
  "repo": "django/django",
  "instance_id": "django__django-14026",
  "base_commit": "59942a66ceb79868cb91844df3a72a24c63e39fa",
  "patch": "diff --git a/django/contrib/postgres/aggregates/general.py b/django/contrib/postgres/aggregates/general.py\n--- a/django/contrib/postgres/aggregates/general.py\n+++ b/django/contrib/postgres/aggregates/general.py\n@@ -1,5 +1,8 @@\n+import warnings\n+\n from django.contrib.postgres.fields import ArrayField\n from django.db.models import Aggregate, BooleanField, JSONField, Value\n+from django.utils.deprecation import RemovedInDjango50Warning\n \n from .mixins import OrderableAggMixin\n \n@@ -8,20 +11,44 @@\n ]\n \n \n-class ArrayAgg(OrderableAggMixin, Aggregate):\n+# RemovedInDjango50Warning\n+NOT_PROVIDED = object()\n+\n+\n+class DeprecatedConvertValueMixin:\n+    def __init__(self, *expressions, default=NOT_PROVIDED, **extra):\n+        if default is NOT_PROVIDED:\n+            default = None\n+            self._default_provided = False\n+        else:\n+            self._default_provided = True\n+        super().__init__(*expressions, default=default, **extra)\n+\n+    def convert_value(self, value, expression, connection):\n+        if value is None and not self._default_provided:\n+            warnings.warn(self.deprecation_msg, category=RemovedInDjango50Warning)\n+            return self.deprecation_value\n+        return value\n+\n+\n+class ArrayAgg(DeprecatedConvertValueMixin, OrderableAggMixin, Aggregate):\n     function = 'ARRAY_AGG'\n     template = '%(function)s(%(distinct)s%(expressions)s %(ordering)s)'\n     allow_distinct = True\n \n+    # RemovedInDjango50Warning\n+    deprecation_value = property(lambda self: [])\n+    deprecation_msg = (\n+        'In Django 5.0, ArrayAgg() will return None instead of an empty list '\n+        'if there are no rows. Pass default=None to opt into the new behavior '\n+        'and silence this warning or default=Value([]) to keep the previous '\n+        'behavior.'\n+    )\n+\n     @property\n     def output_field(self):\n         return ArrayField(self.source_expressions[0].output_field)\n \n-    def convert_value(self, value, expression, connection):\n-        if not value:\n-            return []\n-        return value\n-\n \n class BitAnd(Aggregate):\n     function = 'BIT_AND'\n@@ -41,28 +68,36 @@ class BoolOr(Aggregate):\n     output_field = BooleanField()\n \n \n-class JSONBAgg(OrderableAggMixin, Aggregate):\n+class JSONBAgg(DeprecatedConvertValueMixin, OrderableAggMixin, Aggregate):\n     function = 'JSONB_AGG'\n     template = '%(function)s(%(distinct)s%(expressions)s %(ordering)s)'\n     allow_distinct = True\n     output_field = JSONField()\n \n-    def convert_value(self, value, expression, connection):\n-        if not value:\n-            return '[]'\n-        return value\n+    # RemovedInDjango50Warning\n+    deprecation_value = '[]'\n+    deprecation_msg = (\n+        \"In Django 5.0, JSONBAgg() will return None instead of an empty list \"\n+        \"if there are no rows. Pass default=None to opt into the new behavior \"\n+        \"and silence this warning or default=Value('[]') to keep the previous \"\n+        \"behavior.\"\n+    )\n \n \n-class StringAgg(OrderableAggMixin, Aggregate):\n+class StringAgg(DeprecatedConvertValueMixin, OrderableAggMixin, Aggregate):\n     function = 'STRING_AGG'\n     template = '%(function)s(%(distinct)s%(expressions)s %(ordering)s)'\n     allow_distinct = True\n \n+    # RemovedInDjango50Warning\n+    deprecation_value = ''\n+    deprecation_msg = (\n+        \"In Django 5.0, StringAgg() will return None instead of an empty \"\n+        \"string if there are no rows. Pass default=None to opt into the new \"\n+        \"behavior and silence this warning or default=Value('') to keep the \"\n+        \"previous behavior.\"\n+    )\n+\n     def __init__(self, expression, delimiter, **extra):\n         delimiter_expr = Value(str(delimiter))\n         super().__init__(expression, delimiter_expr, **extra)\n-\n-    def convert_value(self, value, expression, connection):\n-        if not value:\n-            return ''\n-        return value\ndiff --git a/django/contrib/postgres/aggregates/statistics.py b/django/contrib/postgres/aggregates/statistics.py\n--- a/django/contrib/postgres/aggregates/statistics.py\n+++ b/django/contrib/postgres/aggregates/statistics.py\n@@ -9,10 +9,10 @@\n class StatAggregate(Aggregate):\n     output_field = FloatField()\n \n-    def __init__(self, y, x, output_field=None, filter=None):\n+    def __init__(self, y, x, output_field=None, filter=None, default=None):\n         if not x or not y:\n             raise ValueError('Both y and x must be provided.')\n-        super().__init__(y, x, output_field=output_field, filter=filter)\n+        super().__init__(y, x, output_field=output_field, filter=filter, default=default)\n \n \n class Corr(StatAggregate):\n@@ -20,9 +20,9 @@ class Corr(StatAggregate):\n \n \n class CovarPop(StatAggregate):\n-    def __init__(self, y, x, sample=False, filter=None):\n+    def __init__(self, y, x, sample=False, filter=None, default=None):\n         self.function = 'COVAR_SAMP' if sample else 'COVAR_POP'\n-        super().__init__(y, x, filter=filter)\n+        super().__init__(y, x, filter=filter, default=default)\n \n \n class RegrAvgX(StatAggregate):\ndiff --git a/django/db/backends/mysql/features.py b/django/db/backends/mysql/features.py\n--- a/django/db/backends/mysql/features.py\n+++ b/django/db/backends/mysql/features.py\n@@ -88,6 +88,17 @@ def django_test_skips(self):\n                     'annotations.tests.NonAggregateAnnotationTestCase.test_annotation_aggregate_with_m2o',\n                 },\n             })\n+        if not self.connection.mysql_is_mariadb and self.connection.mysql_version < (8,):\n+            skips.update({\n+                'Casting to datetime/time is not supported by MySQL < 8.0. (#30224)': {\n+                    'aggregation.tests.AggregateTestCase.test_aggregation_default_using_time_from_python',\n+                    'aggregation.tests.AggregateTestCase.test_aggregation_default_using_datetime_from_python',\n+                },\n+                'MySQL < 8.0 returns string type instead of datetime/time. (#30224)': {\n+                    'aggregation.tests.AggregateTestCase.test_aggregation_default_using_time_from_database',\n+                    'aggregation.tests.AggregateTestCase.test_aggregation_default_using_datetime_from_database',\n+                },\n+            })\n         if (\n             self.connection.mysql_is_mariadb and\n             (10, 4, 3) < self.connection.mysql_version < (10, 5, 2)\ndiff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -4,6 +4,7 @@\n from django.core.exceptions import FieldError\n from django.db.models.expressions import Case, Func, Star, When\n from django.db.models.fields import IntegerField\n+from django.db.models.functions.comparison import Coalesce\n from django.db.models.functions.mixins import (\n     FixDurationInputMixin, NumericOutputFieldMixin,\n )\n@@ -22,11 +23,14 @@ class Aggregate(Func):\n     allow_distinct = False\n     empty_aggregate_value = None\n \n-    def __init__(self, *expressions, distinct=False, filter=None, **extra):\n+    def __init__(self, *expressions, distinct=False, filter=None, default=None, **extra):\n         if distinct and not self.allow_distinct:\n             raise TypeError(\"%s does not allow distinct.\" % self.__class__.__name__)\n+        if default is not None and self.empty_aggregate_value is not None:\n+            raise TypeError(f'{self.__class__.__name__} does not allow default.')\n         self.distinct = distinct\n         self.filter = filter\n+        self.default = default\n         super().__init__(*expressions, **extra)\n \n     def get_source_fields(self):\n@@ -56,7 +60,12 @@ def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize\n                     before_resolved = self.get_source_expressions()[index]\n                     name = before_resolved.name if hasattr(before_resolved, 'name') else repr(before_resolved)\n                     raise FieldError(\"Cannot compute %s('%s'): '%s' is an aggregate\" % (c.name, name, name))\n-        return c\n+        if (default := c.default) is None:\n+            return c\n+        if hasattr(default, 'resolve_expression'):\n+            default = default.resolve_expression(query, allow_joins, reuse, summarize)\n+        c.default = None  # Reset the default argument before wrapping.\n+        return Coalesce(c, default, output_field=c._output_field_or_none)\n \n     @property\n     def default_alias(self):\n",
  "test_patch": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,15 +1,19 @@\n import datetime\n+import math\n import re\n from decimal import Decimal\n \n from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models import (\n-    Avg, Case, Count, DecimalField, DurationField, Exists, F, FloatField,\n-    IntegerField, Max, Min, OuterRef, Subquery, Sum, Value, When,\n+    Avg, Case, Count, DateField, DateTimeField, DecimalField, DurationField,\n+    Exists, F, FloatField, IntegerField, Max, Min, OuterRef, Q, StdDev,\n+    Subquery, Sum, TimeField, Value, Variance, When,\n )\n from django.db.models.expressions import Func, RawSQL\n-from django.db.models.functions import Coalesce, Greatest\n+from django.db.models.functions import (\n+    Cast, Coalesce, Greatest, Now, Pi, TruncDate, TruncHour,\n+)\n from django.test import TestCase\n from django.test.testcases import skipUnlessDBFeature\n from django.test.utils import Approximate, CaptureQueriesContext\n@@ -18,6 +22,20 @@\n from .models import Author, Book, Publisher, Store\n \n \n+class NowUTC(Now):\n+    template = 'CURRENT_TIMESTAMP'\n+    output_field = DateTimeField()\n+\n+    def as_mysql(self, compiler, connection, **extra_context):\n+        return self.as_sql(compiler, connection, template='UTC_TIMESTAMP', **extra_context)\n+\n+    def as_oracle(self, compiler, connection, **extra_context):\n+        return self.as_sql(compiler, connection, template=\"CURRENT_TIMESTAMP AT TIME ZONE 'UTC'\", **extra_context)\n+\n+    def as_postgresql(self, compiler, connection, **extra_context):\n+        return self.as_sql(compiler, connection, template=\"STATEMENT_TIMESTAMP() AT TIME ZONE 'UTC'\", **extra_context)\n+\n+\n class AggregateTestCase(TestCase):\n \n     @classmethod\n@@ -1402,3 +1420,190 @@ def test_coalesced_empty_result_set(self):\n                 )['latest_opening'],\n                 datetime.datetime,\n             )\n+\n+    def test_aggregation_default_unsupported_by_count(self):\n+        msg = 'Count does not allow default.'\n+        with self.assertRaisesMessage(TypeError, msg):\n+            Count('age', default=0)\n+\n+    def test_aggregation_default_unset(self):\n+        for Aggregate in [Avg, Max, Min, StdDev, Sum, Variance]:\n+            with self.subTest(Aggregate):\n+                result = Author.objects.filter(age__gt=100).aggregate(\n+                    value=Aggregate('age'),\n+                )\n+                self.assertIsNone(result['value'])\n+\n+    def test_aggregation_default_zero(self):\n+        for Aggregate in [Avg, Max, Min, StdDev, Sum, Variance]:\n+            with self.subTest(Aggregate):\n+                result = Author.objects.filter(age__gt=100).aggregate(\n+                    value=Aggregate('age', default=0),\n+                )\n+                self.assertEqual(result['value'], 0)\n+\n+    def test_aggregation_default_integer(self):\n+        for Aggregate in [Avg, Max, Min, StdDev, Sum, Variance]:\n+            with self.subTest(Aggregate):\n+                result = Author.objects.filter(age__gt=100).aggregate(\n+                    value=Aggregate('age', default=21),\n+                )\n+                self.assertEqual(result['value'], 21)\n+\n+    def test_aggregation_default_expression(self):\n+        for Aggregate in [Avg, Max, Min, StdDev, Sum, Variance]:\n+            with self.subTest(Aggregate):\n+                result = Author.objects.filter(age__gt=100).aggregate(\n+                    value=Aggregate('age', default=Value(5) * Value(7)),\n+                )\n+                self.assertEqual(result['value'], 35)\n+\n+    def test_aggregation_default_group_by(self):\n+        qs = Publisher.objects.values('name').annotate(\n+            books=Count('book'),\n+            pages=Sum('book__pages', default=0),\n+        ).filter(books=0)\n+        self.assertSequenceEqual(\n+            qs,\n+            [{'name': \"Jonno's House of Books\", 'books': 0, 'pages': 0}],\n+        )\n+\n+    def test_aggregation_default_compound_expression(self):\n+        # Scale rating to a percentage; default to 50% if no books published.\n+        formula = Avg('book__rating', default=2.5) * 20.0\n+        queryset = Publisher.objects.annotate(rating=formula).order_by('name')\n+        self.assertSequenceEqual(queryset.values('name', 'rating'), [\n+            {'name': 'Apress', 'rating': 85.0},\n+            {'name': \"Jonno's House of Books\", 'rating': 50.0},\n+            {'name': 'Morgan Kaufmann', 'rating': 100.0},\n+            {'name': 'Prentice Hall', 'rating': 80.0},\n+            {'name': 'Sams', 'rating': 60.0},\n+        ])\n+\n+    def test_aggregation_default_using_time_from_python(self):\n+        expr = Min(\n+            'store__friday_night_closing',\n+            filter=~Q(store__name='Amazon.com'),\n+            default=datetime.time(17),\n+        )\n+        if connection.vendor == 'mysql':\n+            # Workaround for #30224 for MySQL 8.0+ & MariaDB.\n+            expr.default = Cast(expr.default, TimeField())\n+        queryset = Book.objects.annotate(oldest_store_opening=expr).order_by('isbn')\n+        self.assertSequenceEqual(queryset.values('isbn', 'oldest_store_opening'), [\n+            {'isbn': '013235613', 'oldest_store_opening': datetime.time(21, 30)},\n+            {'isbn': '013790395', 'oldest_store_opening': datetime.time(23, 59, 59)},\n+            {'isbn': '067232959', 'oldest_store_opening': datetime.time(17)},\n+            {'isbn': '155860191', 'oldest_store_opening': datetime.time(21, 30)},\n+            {'isbn': '159059725', 'oldest_store_opening': datetime.time(23, 59, 59)},\n+            {'isbn': '159059996', 'oldest_store_opening': datetime.time(21, 30)},\n+        ])\n+\n+    def test_aggregation_default_using_time_from_database(self):\n+        now = timezone.now().astimezone(timezone.utc)\n+        expr = Min(\n+            'store__friday_night_closing',\n+            filter=~Q(store__name='Amazon.com'),\n+            default=TruncHour(NowUTC(), output_field=TimeField()),\n+        )\n+        queryset = Book.objects.annotate(oldest_store_opening=expr).order_by('isbn')\n+        self.assertSequenceEqual(queryset.values('isbn', 'oldest_store_opening'), [\n+            {'isbn': '013235613', 'oldest_store_opening': datetime.time(21, 30)},\n+            {'isbn': '013790395', 'oldest_store_opening': datetime.time(23, 59, 59)},\n+            {'isbn': '067232959', 'oldest_store_opening': datetime.time(now.hour)},\n+            {'isbn': '155860191', 'oldest_store_opening': datetime.time(21, 30)},\n+            {'isbn': '159059725', 'oldest_store_opening': datetime.time(23, 59, 59)},\n+            {'isbn': '159059996', 'oldest_store_opening': datetime.time(21, 30)},\n+        ])\n+\n+    def test_aggregation_default_using_date_from_python(self):\n+        expr = Min('book__pubdate', default=datetime.date(1970, 1, 1))\n+        if connection.vendor == 'mysql':\n+            # Workaround for #30224 for MySQL 5.7+ & MariaDB.\n+            expr.default = Cast(expr.default, DateField())\n+        queryset = Publisher.objects.annotate(earliest_pubdate=expr).order_by('name')\n+        self.assertSequenceEqual(queryset.values('name', 'earliest_pubdate'), [\n+            {'name': 'Apress', 'earliest_pubdate': datetime.date(2007, 12, 6)},\n+            {'name': \"Jonno's House of Books\", 'earliest_pubdate': datetime.date(1970, 1, 1)},\n+            {'name': 'Morgan Kaufmann', 'earliest_pubdate': datetime.date(1991, 10, 15)},\n+            {'name': 'Prentice Hall', 'earliest_pubdate': datetime.date(1995, 1, 15)},\n+            {'name': 'Sams', 'earliest_pubdate': datetime.date(2008, 3, 3)},\n+        ])\n+\n+    def test_aggregation_default_using_date_from_database(self):\n+        now = timezone.now().astimezone(timezone.utc)\n+        expr = Min('book__pubdate', default=TruncDate(NowUTC()))\n+        queryset = Publisher.objects.annotate(earliest_pubdate=expr).order_by('name')\n+        self.assertSequenceEqual(queryset.values('name', 'earliest_pubdate'), [\n+            {'name': 'Apress', 'earliest_pubdate': datetime.date(2007, 12, 6)},\n+            {'name': \"Jonno's House of Books\", 'earliest_pubdate': now.date()},\n+            {'name': 'Morgan Kaufmann', 'earliest_pubdate': datetime.date(1991, 10, 15)},\n+            {'name': 'Prentice Hall', 'earliest_pubdate': datetime.date(1995, 1, 15)},\n+            {'name': 'Sams', 'earliest_pubdate': datetime.date(2008, 3, 3)},\n+        ])\n+\n+    def test_aggregation_default_using_datetime_from_python(self):\n+        expr = Min(\n+            'store__original_opening',\n+            filter=~Q(store__name='Amazon.com'),\n+            default=datetime.datetime(1970, 1, 1),\n+        )\n+        if connection.vendor == 'mysql':\n+            # Workaround for #30224 for MySQL 8.0+ & MariaDB.\n+            expr.default = Cast(expr.default, DateTimeField())\n+        queryset = Book.objects.annotate(oldest_store_opening=expr).order_by('isbn')\n+        self.assertSequenceEqual(queryset.values('isbn', 'oldest_store_opening'), [\n+            {'isbn': '013235613', 'oldest_store_opening': datetime.datetime(1945, 4, 25, 16, 24, 14)},\n+            {'isbn': '013790395', 'oldest_store_opening': datetime.datetime(2001, 3, 15, 11, 23, 37)},\n+            {'isbn': '067232959', 'oldest_store_opening': datetime.datetime(1970, 1, 1)},\n+            {'isbn': '155860191', 'oldest_store_opening': datetime.datetime(1945, 4, 25, 16, 24, 14)},\n+            {'isbn': '159059725', 'oldest_store_opening': datetime.datetime(2001, 3, 15, 11, 23, 37)},\n+            {'isbn': '159059996', 'oldest_store_opening': datetime.datetime(1945, 4, 25, 16, 24, 14)},\n+        ])\n+\n+    def test_aggregation_default_using_datetime_from_database(self):\n+        now = timezone.now().astimezone(timezone.utc)\n+        expr = Min(\n+            'store__original_opening',\n+            filter=~Q(store__name='Amazon.com'),\n+            default=TruncHour(NowUTC(), output_field=DateTimeField()),\n+        )\n+        queryset = Book.objects.annotate(oldest_store_opening=expr).order_by('isbn')\n+        self.assertSequenceEqual(queryset.values('isbn', 'oldest_store_opening'), [\n+            {'isbn': '013235613', 'oldest_store_opening': datetime.datetime(1945, 4, 25, 16, 24, 14)},\n+            {'isbn': '013790395', 'oldest_store_opening': datetime.datetime(2001, 3, 15, 11, 23, 37)},\n+            {'isbn': '067232959', 'oldest_store_opening': now.replace(minute=0, second=0, microsecond=0, tzinfo=None)},\n+            {'isbn': '155860191', 'oldest_store_opening': datetime.datetime(1945, 4, 25, 16, 24, 14)},\n+            {'isbn': '159059725', 'oldest_store_opening': datetime.datetime(2001, 3, 15, 11, 23, 37)},\n+            {'isbn': '159059996', 'oldest_store_opening': datetime.datetime(1945, 4, 25, 16, 24, 14)},\n+        ])\n+\n+    def test_aggregation_default_using_duration_from_python(self):\n+        result = Publisher.objects.filter(num_awards__gt=3).aggregate(\n+            value=Sum('duration', default=datetime.timedelta(0)),\n+        )\n+        self.assertEqual(result['value'], datetime.timedelta(0))\n+\n+    def test_aggregation_default_using_duration_from_database(self):\n+        result = Publisher.objects.filter(num_awards__gt=3).aggregate(\n+            value=Sum('duration', default=Now() - Now()),\n+        )\n+        self.assertEqual(result['value'], datetime.timedelta(0))\n+\n+    def test_aggregation_default_using_decimal_from_python(self):\n+        result = Book.objects.filter(rating__lt=3.0).aggregate(\n+            value=Sum('price', default=Decimal('0.00')),\n+        )\n+        self.assertEqual(result['value'], Decimal('0.00'))\n+\n+    def test_aggregation_default_using_decimal_from_database(self):\n+        result = Book.objects.filter(rating__lt=3.0).aggregate(\n+            value=Sum('price', default=Pi()),\n+        )\n+        self.assertAlmostEqual(result['value'], Decimal.from_float(math.pi), places=6)\n+\n+    def test_aggregation_default_passed_another_aggregate(self):\n+        result = Book.objects.aggregate(\n+            value=Sum('price', filter=Q(rating__lt=3.0), default=Avg('pages') / 10.0),\n+        )\n+        self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\ndiff --git a/tests/postgres_tests/test_aggregates.py b/tests/postgres_tests/test_aggregates.py\n--- a/tests/postgres_tests/test_aggregates.py\n+++ b/tests/postgres_tests/test_aggregates.py\n@@ -3,7 +3,8 @@\n )\n from django.db.models.fields.json import KeyTextTransform, KeyTransform\n from django.db.models.functions import Cast, Concat, Substr\n-from django.test.utils import Approximate\n+from django.test.utils import Approximate, ignore_warnings\n+from django.utils.deprecation import RemovedInDjango50Warning\n \n from . import PostgreSQLTestCase\n from .models import AggregateTestModel, StatTestModel\n@@ -44,6 +45,7 @@ def setUpTestData(cls):\n             ),\n         ])\n \n+    @ignore_warnings(category=RemovedInDjango50Warning)\n     def test_empty_result_set(self):\n         AggregateTestModel.objects.all().delete()\n         tests = [\n@@ -72,6 +74,77 @@ def test_empty_result_set(self):\n                     )\n                     self.assertEqual(values, {'aggregation': expected_result})\n \n+    def test_default_argument(self):\n+        AggregateTestModel.objects.all().delete()\n+        tests = [\n+            (ArrayAgg('char_field', default=['<empty>']), ['<empty>']),\n+            (ArrayAgg('integer_field', default=[0]), [0]),\n+            (ArrayAgg('boolean_field', default=[False]), [False]),\n+            (BitAnd('integer_field', default=0), 0),\n+            (BitOr('integer_field', default=0), 0),\n+            (BoolAnd('boolean_field', default=False), False),\n+            (BoolOr('boolean_field', default=False), False),\n+            (JSONBAgg('integer_field', default=Value('[\"<empty>\"]')), ['<empty>']),\n+            (StringAgg('char_field', delimiter=';', default=Value('<empty>')), '<empty>'),\n+        ]\n+        for aggregation, expected_result in tests:\n+            with self.subTest(aggregation=aggregation):\n+                # Empty result with non-execution optimization.\n+                with self.assertNumQueries(0):\n+                    values = AggregateTestModel.objects.none().aggregate(\n+                        aggregation=aggregation,\n+                    )\n+                    self.assertEqual(values, {'aggregation': expected_result})\n+                # Empty result when query must be executed.\n+                with self.assertNumQueries(1):\n+                    values = AggregateTestModel.objects.aggregate(\n+                        aggregation=aggregation,\n+                    )\n+                    self.assertEqual(values, {'aggregation': expected_result})\n+\n+    def test_convert_value_deprecation(self):\n+        AggregateTestModel.objects.all().delete()\n+        queryset = AggregateTestModel.objects.all()\n+\n+        with self.assertWarnsMessage(RemovedInDjango50Warning, ArrayAgg.deprecation_msg):\n+            queryset.aggregate(aggregation=ArrayAgg('boolean_field'))\n+\n+        with self.assertWarnsMessage(RemovedInDjango50Warning, JSONBAgg.deprecation_msg):\n+            queryset.aggregate(aggregation=JSONBAgg('integer_field'))\n+\n+        with self.assertWarnsMessage(RemovedInDjango50Warning, StringAgg.deprecation_msg):\n+            queryset.aggregate(aggregation=StringAgg('char_field', delimiter=';'))\n+\n+        # No warnings raised if default argument provided.\n+        self.assertEqual(\n+            queryset.aggregate(aggregation=ArrayAgg('boolean_field', default=None)),\n+            {'aggregation': None},\n+        )\n+        self.assertEqual(\n+            queryset.aggregate(aggregation=JSONBAgg('integer_field', default=None)),\n+            {'aggregation': None},\n+        )\n+        self.assertEqual(\n+            queryset.aggregate(\n+                aggregation=StringAgg('char_field', delimiter=';', default=None),\n+            ),\n+            {'aggregation': None},\n+        )\n+        self.assertEqual(\n+            queryset.aggregate(aggregation=ArrayAgg('boolean_field', default=Value([]))),\n+            {'aggregation': []},\n+        )\n+        self.assertEqual(\n+            queryset.aggregate(aggregation=JSONBAgg('integer_field', default=Value('[]'))),\n+            {'aggregation': []},\n+        )\n+        self.assertEqual(\n+            queryset.aggregate(\n+                aggregation=StringAgg('char_field', delimiter=';', default=Value('')),\n+            ),\n+            {'aggregation': ''},\n+        )\n+\n     def test_array_agg_charfield(self):\n         values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('char_field'))\n         self.assertEqual(values, {'arrayagg': ['Foo1', 'Foo2', 'Foo4', 'Foo3']})\n@@ -515,6 +588,37 @@ def test_empty_result_set(self):\n                     )\n                     self.assertEqual(values, {'aggregation': expected_result})\n \n+    def test_default_argument(self):\n+        StatTestModel.objects.all().delete()\n+        tests = [\n+            (Corr(y='int2', x='int1', default=0), 0),\n+            (CovarPop(y='int2', x='int1', default=0), 0),\n+            (CovarPop(y='int2', x='int1', sample=True, default=0), 0),\n+            (RegrAvgX(y='int2', x='int1', default=0), 0),\n+            (RegrAvgY(y='int2', x='int1', default=0), 0),\n+            # RegrCount() doesn't support the default argument.\n+            (RegrIntercept(y='int2', x='int1', default=0), 0),\n+            (RegrR2(y='int2', x='int1', default=0), 0),\n+            (RegrSlope(y='int2', x='int1', default=0), 0),\n+            (RegrSXX(y='int2', x='int1', default=0), 0),\n+            (RegrSXY(y='int2', x='int1', default=0), 0),\n+            (RegrSYY(y='int2', x='int1', default=0), 0),\n+        ]\n+        for aggregation, expected_result in tests:\n+            with self.subTest(aggregation=aggregation):\n+                # Empty result with non-execution optimization.\n+                with self.assertNumQueries(0):\n+                    values = StatTestModel.objects.none().aggregate(\n+                        aggregation=aggregation,\n+                    )\n+                    self.assertEqual(values, {'aggregation': expected_result})\n+                # Empty result when query must be executed.\n+                with self.assertNumQueries(1):\n+                    values = StatTestModel.objects.aggregate(\n+                        aggregation=aggregation,\n+                    )\n+                    self.assertEqual(values, {'aggregation': expected_result})\n+\n     def test_corr_general(self):\n         values = StatTestModel.objects.aggregate(corr=Corr(y='int2', x='int1'))\n         self.assertEqual(values, {'corr': -1.0})\n@@ -539,6 +643,11 @@ def test_regr_count_general(self):\n         values = StatTestModel.objects.aggregate(regrcount=RegrCount(y='int2', x='int1'))\n         self.assertEqual(values, {'regrcount': 3})\n \n+    def test_regr_count_default(self):\n+        msg = 'RegrCount does not allow default.'\n+        with self.assertRaisesMessage(TypeError, msg):\n+            RegrCount(y='int2', x='int1', default=0)\n+\n     def test_regr_intercept_general(self):\n         values = StatTestModel.objects.aggregate(regrintercept=RegrIntercept(y='int2', x='int1'))\n         self.assertEqual(values, {'regrintercept': 4})\n",
  "problem_statement": "Support a default value for Sum (and possibly other aggregation functions)\nDescription\n\t\nBy default, annotate(sum_field = Sum(...)) results in sum_field being NULL if there were no values to sum. In most cases, 0 would be a better option here, for proper sorting in a later order_by, and for comparisons using lt/gt/gte/lte.\nA monkeypatch to implement default values for NULL using COALESCE is available here:\n​http://stackoverflow.com/questions/553038/treat-null-as-0-in-django-model\n",
  "hints_text": "This is a reasonable suggestion; variants in SQL syntax notwithstanding, it shouldn't be too hard to implement. For those following the advice of Stack Overflow: There is no need to monkeypatch the sql_aggregates module - if you override the add_to_query function(), you can load the sql-specific aggregate from wherever you want. In fact, you don't even need to have the split between generic and SQL specific aggregate. If all you want is a custom SQL aggregate that you can use in your own code, the following definition will help: from django.db.models.sql.aggregates import Aggregate class MyAggregate(Aggregate): sql_function = 'SOME_SQL_FUNC' sql_template = 'SQL_TEMPLATE_BITS(%(function)s(%(field)s), %(default)s)' def __init__(self, lookup, **extra): self.lookup = lookup self.extra = extra def _default_alias(self): return '%s__%s' % (self.lookup, self.__class__.__name__.lower()) default_alias = property(_default_alias) def add_to_query(self, query, alias, col, source, is_summary): super(MyAggregate, self).__init__(col, source, is_summary, **self.extra) query.aggregate_select[alias] = self\n#14548 was a duplicate, had some useful discussion in its comments.\nJust added a patch with an initial implementation for this feature. It should work for all aggregates by wrapping the default sql_template in COALESCE(%s, %%(default)s), if params has a default item. There's a basic test in there that checks the behaviour for Avg with and without a default. If there's positive feedback about the implementation, I'll have a go at adding documentation and any improvements to the implementation and tests that are suggested.\nThere is a good case for giving Sum a default of zero, while leaving Max and Min with default of None. Essentially, the reason is that zero is the fixed point of the + operator, while max and min have no fixed points (excluding negative infinity and positive infinity respectively, which are problematic). Also, it makes the behaviour analogous to the Python builtins sum, min and max - sum returns 0 for an empty list, whereas min and max throw exceptions. (We don't want to throw exceptions here, for various obvious reasons, but I think we should be indicating 'undefined' in some way under the same circumstances). If we do this, we need a note in the release notes about the backwards incompatibility - if people were relying on Sum returning None for no data instead of zero. (We can certainly classify the previous behaviour as a bug, since it was out of line with our docs, and neither expected or useful behaviour, but should still mention this). We should also have some tests that ensure that it returns a zero of the right type for different underlying field types. This also brings up the possibility of whether the default for Sum should act like the start parameter of the sum Python builtin. I think it should. That would make implementation harder, though, I guess. Alternatively we could have a separate 'start' parameter for Sum, which might be clearer, and would make that a separate feature.\nI would support closing this as a duplicate of #23753. Once the linked ticket is implemented, it'll be possible for users to construct their own coalesce value like: annotate(sum_field = Coalesce(Sum(...), 0)) This leaves the default behaviour alone, but provides a higher level of customisation. It relies on the #14030 patch which will also allow adding a \"start\" value, as mentioned by @lukeplant above: annotate(sum_field = Coalesce(Sum(...), 0) + Value(5)) Would everyone be happy enough with the above use?\nI'm not totally convinced (yet) that we should give up on this when Coalesce() becomes available. If we just instruct people to use Coalesce(Sum(...), default) all the time, we're basically just recreating the literal semantics of SQL itself rather than providing an easy to use abstraction of it. Sure, it would be useful and powerful to have Coalesce() as well, but we might not need to force people to use it all the time for the common case. At the very least, a decision on closing this ticket should probably wait until Coalesce() is actually implemented.\n@mrmachine that's not a bad argument to make. What we could support is: Sum('field', default=0) Which would then be returned from convert_value in the case where the value is None. The argument against that is we'd be special-casing the Sum aggregate, while leaving other aggregates to use the Coalesce method. That's not such a big downside though. Does anyone else want to weigh in on this? Supporting a default=0 kwarg is a 4 line + docs change.\nReplying to jarshwah: @mrmachine that's not a bad argument to make. What we could support is: Sum('field', default=0) Which would then be returned from convert_value in the case where the value is None. The argument against that is we'd be special-casing the Sum aggregate, while leaving other aggregates to use the Coalesce method. That's not such a big downside though. Does anyone else want to weigh in on this? Supporting a default=0 kwarg is a 4 line + docs change. +1 for this.\nReplying to jarshwah: @mrmachine that's not a bad argument to make. What we could support is: Sum('field', default=0) Which would then be returned from convert_value in the case where the value is None. The argument against that is we'd be special-casing the Sum aggregate, while leaving other aggregates to use the Coalesce method. That's not such a big downside though. Does anyone else want to weigh in on this? Supporting a default=0 kwarg is a 4 line + docs change. +1 from me too.\nReplying to jarshwah: @mrmachine that's not a bad argument to make. What we could support is: Sum('field', default=0) Which would then be returned from convert_value in the case where the value is None. The argument against that is we'd be special-casing the Sum aggregate, while leaving other aggregates to use the Coalesce method. That's not such a big downside though. Does anyone else want to weigh in on this? Supporting a default=0 kwarg is a 4 line + docs change. I ran into a situation today where this feature would have been nice. +1 from me.\nIf you are running into this use case, you can use Coalesce(Sum('field'), 0) in Django 1.8. At least until a decision is made on this ticket. If you want to bring this up on the ML for the other ORM people to have input, that'd be a good next step.\nReplying to Josh Smeaton: @mrmachine that's not a bad argument to make. What we could support is: Sum('field', default=0) Which would then be returned from convert_value in the case where the value is None. The argument against that is we'd be special-casing the Sum aggregate, while leaving other aggregates to use the Coalesce method. That's not such a big downside though. Does anyone else want to weigh in on this? Supporting a default=0 kwarg is a 4 line + docs change. +1 for me .\nMay I suggest the argument be named coalesce and be added to all aggregates (through the django.db.models.aggregate.Aggregate class)?\nI'm also facing this issue. The workaround with Coalesce works, but... from django.db.models import Sum from django.db.models.functions import Coalesce really?\nNote that the new aggregate functions in django.contrib.postgres ​silently handle this. I still believe adding a coalesce sugar argument to aggregate functions would be more appropriate than a default one as it would allow passing expressions instead of simple Python value. Sum('amount', coalesce=F('minimum_amount')) Which is more readable than Coalesce(Sum('amount'), F('minimum_amount'))\n+1 for default kwarg\nAnother +1\nAaargh, cmon, 11 years? To add a perfectly sane default of 0 for Sum? I'm amazed this hasn't been fixed for so long :) What was wrong with supporting default=0 at least? (yes I had the same perfectly normal reaction of getting annoyed by seeing NULL in my API output instead of 0 for a Sum of Payments for a User).\nBjörn, such comments doesn't help. Patch is welcome.\n​PR",
  "created_at": "2021-02-21T01:44:44Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_aggregation_default_compound_expression (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_expression (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_group_by (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_integer (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_passed_another_aggregate (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_unsupported_by_count (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_date_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_date_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_datetime_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_datetime_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_decimal_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_decimal_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_duration_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_duration_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_time_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_time_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_zero (aggregation.tests.AggregateTestCase)\", \"test_aggregation_exists_annotation (aggregation.tests.AggregateTestCase)\"]",
  "PASS_TO_PASS": "[\"test_add_implementation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_alias (aggregation.tests.AggregateTestCase)\", \"test_aggregate_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_in_order_by (aggregation.tests.AggregateTestCase)\", \"test_aggregate_join_transform (aggregation.tests.AggregateTestCase)\", \"test_aggregate_multi_join (aggregation.tests.AggregateTestCase)\", \"test_aggregate_over_aggregate (aggregation.tests.AggregateTestCase)\", \"test_aggregate_over_complex_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_transform (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_unset (aggregation.tests.AggregateTestCase)\", \"test_aggregation_expressions (aggregation.tests.AggregateTestCase)\", \"test_aggregation_nested_subquery_outerref (aggregation.tests.AggregateTestCase)\", \"test_aggregation_order_by_not_selected_annotation_values (aggregation.tests.AggregateTestCase)\", \"Random() is not included in the GROUP BY when used for ordering.\", \"Subquery annotations are excluded from the GROUP BY if they are\", \"test_aggregation_subquery_annotation_exists (aggregation.tests.AggregateTestCase)\", \"Subquery annotations must be included in the GROUP BY if they use\", \"test_aggregation_subquery_annotation_related_field (aggregation.tests.AggregateTestCase)\", \"Subquery annotations and external aliases are excluded from the GROUP\", \"test_aggregation_subquery_annotation_values_collision (aggregation.tests.AggregateTestCase)\", \"test_annotate_basic (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer_select_related (aggregation.tests.AggregateTestCase)\", \"test_annotate_m2m (aggregation.tests.AggregateTestCase)\", \"test_annotate_ordering (aggregation.tests.AggregateTestCase)\", \"test_annotate_over_annotate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_list (aggregation.tests.AggregateTestCase)\", \"test_annotated_aggregate_over_annotated_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotation (aggregation.tests.AggregateTestCase)\", \"test_annotation_expressions (aggregation.tests.AggregateTestCase)\", \"test_arguments_must_be_expressions (aggregation.tests.AggregateTestCase)\", \"test_avg_decimal_field (aggregation.tests.AggregateTestCase)\", \"test_avg_duration_field (aggregation.tests.AggregateTestCase)\", \"test_backwards_m2m_annotate (aggregation.tests.AggregateTestCase)\", \"test_coalesced_empty_result_set (aggregation.tests.AggregateTestCase)\", \"test_combine_different_types (aggregation.tests.AggregateTestCase)\", \"test_complex_aggregations_require_kwarg (aggregation.tests.AggregateTestCase)\", \"test_complex_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_count (aggregation.tests.AggregateTestCase)\", \"test_count_distinct_expression (aggregation.tests.AggregateTestCase)\", \"test_count_star (aggregation.tests.AggregateTestCase)\", \".dates() returns a distinct set of dates when applied to a\", \"test_decimal_max_digits_has_no_effect (aggregation.tests.AggregateTestCase)\", \"test_distinct_on_aggregate (aggregation.tests.AggregateTestCase)\", \"test_empty_aggregate (aggregation.tests.AggregateTestCase)\", \"test_empty_result_optimization (aggregation.tests.AggregateTestCase)\", \"test_even_more_aggregate (aggregation.tests.AggregateTestCase)\", \"test_expression_on_aggregation (aggregation.tests.AggregateTestCase)\", \"test_filter_aggregate (aggregation.tests.AggregateTestCase)\", \"test_filtering (aggregation.tests.AggregateTestCase)\", \"test_fkey_aggregate (aggregation.tests.AggregateTestCase)\", \"Exists annotations are included in the GROUP BY if they are\", \"Subquery annotations are included in the GROUP BY if they are\", \"An annotation included in values() before an aggregate should be\", \"test_more_aggregation (aggregation.tests.AggregateTestCase)\", \"test_multi_arg_aggregate (aggregation.tests.AggregateTestCase)\", \"test_multiple_aggregates (aggregation.tests.AggregateTestCase)\", \"An annotation not included in values() before an aggregate should be\", \"test_nonaggregate_aggregation_throws (aggregation.tests.AggregateTestCase)\", \"test_nonfield_annotation (aggregation.tests.AggregateTestCase)\", \"test_order_of_precedence (aggregation.tests.AggregateTestCase)\", \"test_related_aggregate (aggregation.tests.AggregateTestCase)\", \"test_reverse_fkey_annotate (aggregation.tests.AggregateTestCase)\", \"test_single_aggregate (aggregation.tests.AggregateTestCase)\", \"Sum on a distinct() QuerySet should aggregate only the distinct items.\", \"test_sum_duration_field (aggregation.tests.AggregateTestCase)\", \"Subqueries do not needlessly contain ORDER BY, SELECT FOR UPDATE or\", \"Aggregation over sliced queryset works correctly.\", \"Doing exclude() on a foreign model after annotate() doesn't crash.\", \"test_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_values_annotation_with_expression (aggregation.tests.AggregateTestCase)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.678470",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}