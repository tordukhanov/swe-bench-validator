{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-11311",
  "base_commit": "65fd5be20d0269c47fbf8c5bbc37a6f24324594b",
  "patch": "diff --git a/sphinx/addnodes.py b/sphinx/addnodes.py\n--- a/sphinx/addnodes.py\n+++ b/sphinx/addnodes.py\n@@ -298,9 +298,20 @@ class desc_annotation(nodes.Part, nodes.Inline, nodes.FixedTextElement):\n # Leaf nodes for markup of text fragments\n #########################################\n \n+#: A set of classes inheriting :class:`desc_sig_element`. Each node class\n+#: is expected to be handled by the builder's translator class if the latter\n+#: does not inherit from SphinxTranslator.\n+#:\n+#: This set can be extended manually by third-party extensions or\n+#: by subclassing :class:`desc_sig_element` and using the class\n+#: keyword argument `_sig_element=True`.\n+SIG_ELEMENTS: set[type[desc_sig_element]] = set()\n+\n+\n # Signature text elements, generally translated to node.inline\n # in SigElementFallbackTransform.\n-# When adding a new one, add it to SIG_ELEMENTS.\n+# When adding a new one, add it to SIG_ELEMENTS via the class\n+# keyword argument `_sig_element=True` (e.g., see `desc_sig_space`).\n \n class desc_sig_element(nodes.inline, _desc_classes_injector):\n     \"\"\"Common parent class of nodes for inline text of a signature.\"\"\"\n@@ -311,11 +322,17 @@ def __init__(self, rawsource: str = '', text: str = '',\n         super().__init__(rawsource, text, *children, **attributes)\n         self['classes'].extend(self.classes)\n \n+    def __init_subclass__(cls, *, _sig_element=False, **kwargs):\n+        super().__init_subclass__(**kwargs)\n+        if _sig_element:\n+            # add the class to the SIG_ELEMENTS set if asked\n+            SIG_ELEMENTS.add(cls)\n+\n \n # to not reinvent the wheel, the classes in the following desc_sig classes\n # are based on those used in Pygments\n \n-class desc_sig_space(desc_sig_element):\n+class desc_sig_space(desc_sig_element, _sig_element=True):\n     \"\"\"Node for a space in a signature.\"\"\"\n     classes = [\"w\"]\n \n@@ -324,54 +341,46 @@ def __init__(self, rawsource: str = '', text: str = ' ',\n         super().__init__(rawsource, text, *children, **attributes)\n \n \n-class desc_sig_name(desc_sig_element):\n+class desc_sig_name(desc_sig_element, _sig_element=True):\n     \"\"\"Node for an identifier in a signature.\"\"\"\n     classes = [\"n\"]\n \n \n-class desc_sig_operator(desc_sig_element):\n+class desc_sig_operator(desc_sig_element, _sig_element=True):\n     \"\"\"Node for an operator in a signature.\"\"\"\n     classes = [\"o\"]\n \n \n-class desc_sig_punctuation(desc_sig_element):\n+class desc_sig_punctuation(desc_sig_element, _sig_element=True):\n     \"\"\"Node for punctuation in a signature.\"\"\"\n     classes = [\"p\"]\n \n \n-class desc_sig_keyword(desc_sig_element):\n+class desc_sig_keyword(desc_sig_element, _sig_element=True):\n     \"\"\"Node for a general keyword in a signature.\"\"\"\n     classes = [\"k\"]\n \n \n-class desc_sig_keyword_type(desc_sig_element):\n+class desc_sig_keyword_type(desc_sig_element, _sig_element=True):\n     \"\"\"Node for a keyword which is a built-in type in a signature.\"\"\"\n     classes = [\"kt\"]\n \n \n-class desc_sig_literal_number(desc_sig_element):\n+class desc_sig_literal_number(desc_sig_element, _sig_element=True):\n     \"\"\"Node for a numeric literal in a signature.\"\"\"\n     classes = [\"m\"]\n \n \n-class desc_sig_literal_string(desc_sig_element):\n+class desc_sig_literal_string(desc_sig_element, _sig_element=True):\n     \"\"\"Node for a string literal in a signature.\"\"\"\n     classes = [\"s\"]\n \n \n-class desc_sig_literal_char(desc_sig_element):\n+class desc_sig_literal_char(desc_sig_element, _sig_element=True):\n     \"\"\"Node for a character literal in a signature.\"\"\"\n     classes = [\"sc\"]\n \n \n-SIG_ELEMENTS = [desc_sig_space,\n-                desc_sig_name,\n-                desc_sig_operator,\n-                desc_sig_punctuation,\n-                desc_sig_keyword, desc_sig_keyword_type,\n-                desc_sig_literal_number, desc_sig_literal_string, desc_sig_literal_char]\n-\n-\n ###############################################################\n # new admonition-like constructs\n \ndiff --git a/sphinx/transforms/post_transforms/__init__.py b/sphinx/transforms/post_transforms/__init__.py\n--- a/sphinx/transforms/post_transforms/__init__.py\n+++ b/sphinx/transforms/post_transforms/__init__.py\n@@ -250,18 +250,27 @@ def has_visitor(translator: type[nodes.NodeVisitor], node: type[Element]) -> boo\n             # subclass of SphinxTranslator supports desc_sig_element nodes automatically.\n             return\n \n-        # for the leaf elements (desc_sig_element), the translator should support _all_\n-        if not all(has_visitor(translator, node) for node in addnodes.SIG_ELEMENTS):\n+        # for the leaf elements (desc_sig_element), the translator should support _all_,\n+        # unless there exists a generic visit_desc_sig_element default visitor\n+        if (not all(has_visitor(translator, node) for node in addnodes.SIG_ELEMENTS)\n+                and not has_visitor(translator, addnodes.desc_sig_element)):\n             self.fallback(addnodes.desc_sig_element)\n \n         if not has_visitor(translator, addnodes.desc_inline):\n             self.fallback(addnodes.desc_inline)\n \n-    def fallback(self, nodeType: Any) -> None:\n-        for node in self.document.findall(nodeType):\n+    def fallback(self, node_type: Any) -> None:\n+        \"\"\"Translate nodes of type *node_type* to docutils inline nodes.\n+\n+        The original node type name is stored as a string in a private\n+        ``_sig_node_type`` attribute if the latter did not exist.\n+        \"\"\"\n+        for node in self.document.findall(node_type):\n             newnode = nodes.inline()\n             newnode.update_all_atts(node)\n             newnode.extend(node)\n+            # Only set _sig_node_type if not defined by the user\n+            newnode.setdefault('_sig_node_type', node.tagname)\n             node.replace_self(newnode)\n \n \n",
  "test_patch": "diff --git a/tests/test_addnodes.py b/tests/test_addnodes.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/test_addnodes.py\n@@ -0,0 +1,51 @@\n+\"\"\"Test the non-trivial features in the :mod:`sphinx.addnodes` module.\"\"\"\n+\n+from __future__ import annotations\n+\n+import pytest\n+\n+from sphinx import addnodes\n+\n+\n+@pytest.fixture()\n+def sig_elements() -> set[type[addnodes.desc_sig_element]]:\n+    \"\"\"Fixture returning the current ``addnodes.SIG_ELEMENTS`` set.\"\"\"\n+    original = addnodes.SIG_ELEMENTS.copy()  # safe copy of the current nodes\n+    yield {*addnodes.SIG_ELEMENTS}  # temporary value to use during tests\n+    addnodes.SIG_ELEMENTS = original  # restore the previous value\n+\n+\n+def test_desc_sig_element_nodes(sig_elements):\n+    \"\"\"Test the registration of ``desc_sig_element`` subclasses.\"\"\"\n+\n+    # expected desc_sig_* node classes (must be declared *after* reloading\n+    # the module since otherwise the objects are not the correct ones)\n+    EXPECTED_SIG_ELEMENTS = {\n+        addnodes.desc_sig_space,\n+        addnodes.desc_sig_name,\n+        addnodes.desc_sig_operator,\n+        addnodes.desc_sig_punctuation,\n+        addnodes.desc_sig_keyword,\n+        addnodes.desc_sig_keyword_type,\n+        addnodes.desc_sig_literal_number,\n+        addnodes.desc_sig_literal_string,\n+        addnodes.desc_sig_literal_char,\n+    }\n+\n+    assert addnodes.SIG_ELEMENTS == EXPECTED_SIG_ELEMENTS\n+\n+    # create a built-in custom desc_sig_element (added to SIG_ELEMENTS)\n+    class BuiltInSigElementLikeNode(addnodes.desc_sig_element, _sig_element=True):\n+        pass\n+\n+    # create a custom desc_sig_element (implicitly not added to SIG_ELEMENTS)\n+    class Custom1SigElementLikeNode(addnodes.desc_sig_element):\n+        pass\n+\n+    # create a custom desc_sig_element (explicitly not added to SIG_ELEMENTS)\n+    class Custom2SigElementLikeNode(addnodes.desc_sig_element, _sig_element=False):\n+        pass\n+\n+    assert BuiltInSigElementLikeNode in addnodes.SIG_ELEMENTS\n+    assert Custom1SigElementLikeNode not in addnodes.SIG_ELEMENTS\n+    assert Custom2SigElementLikeNode not in addnodes.SIG_ELEMENTS\ndiff --git a/tests/test_transforms_post_transforms.py b/tests/test_transforms_post_transforms.py\n--- a/tests/test_transforms_post_transforms.py\n+++ b/tests/test_transforms_post_transforms.py\n@@ -1,11 +1,29 @@\n \"\"\"Tests the post_transforms\"\"\"\n \n+from __future__ import annotations\n+\n+import logging\n+from typing import TYPE_CHECKING\n+\n import pytest\n from docutils import nodes\n \n+from sphinx import addnodes\n+from sphinx.addnodes import SIG_ELEMENTS\n+from sphinx.testing.util import assert_node\n+from sphinx.transforms.post_transforms import SigElementFallbackTransform\n+from sphinx.util.docutils import new_document\n+\n+if TYPE_CHECKING:\n+    from typing import Any, NoReturn\n+\n+    from _pytest.fixtures import SubRequest\n+\n+    from sphinx.testing.util import SphinxTestApp\n+\n \n @pytest.mark.sphinx('html', testroot='transforms-post_transforms-missing-reference')\n-def test_nitpicky_warning(app, status, warning):\n+def test_nitpicky_warning(app, warning):\n     app.build()\n     assert ('index.rst:4: WARNING: py:class reference target '\n             'not found: io.StringIO' in warning.getvalue())\n@@ -17,12 +35,12 @@ def test_nitpicky_warning(app, status, warning):\n \n @pytest.mark.sphinx('html', testroot='transforms-post_transforms-missing-reference',\n                     freshenv=True)\n-def test_missing_reference(app, status, warning):\n-    def missing_reference(app, env, node, contnode):\n-        assert app is app\n-        assert env is app.env\n-        assert node['reftarget'] == 'io.StringIO'\n-        assert contnode.astext() == 'io.StringIO'\n+def test_missing_reference(app, warning):\n+    def missing_reference(app_, env_, node_, contnode_):\n+        assert app_ is app\n+        assert env_ is app.env\n+        assert node_['reftarget'] == 'io.StringIO'\n+        assert contnode_.astext() == 'io.StringIO'\n \n         return nodes.inline('', 'missing-reference.StringIO')\n \n@@ -37,8 +55,8 @@ def missing_reference(app, env, node, contnode):\n \n @pytest.mark.sphinx('html', testroot='domain-py-python_use_unqualified_type_names',\n                     freshenv=True)\n-def test_missing_reference_conditional_pending_xref(app, status, warning):\n-    def missing_reference(app, env, node, contnode):\n+def test_missing_reference_conditional_pending_xref(app, warning):\n+    def missing_reference(_app, _env, _node, contnode):\n         return contnode\n \n     warning.truncate(0)\n@@ -57,3 +75,194 @@ def test_keyboard_hyphen_spaces(app):\n     app.build()\n     assert \"spanish\" in (app.outdir / 'index.html').read_text(encoding='utf8')\n     assert \"inquisition\" in (app.outdir / 'index.html').read_text(encoding='utf8')\n+\n+\n+class TestSigElementFallbackTransform:\n+    \"\"\"Integration test for :class:`sphinx.transforms.post_transforms.SigElementFallbackTransform`.\"\"\"\n+    # safe copy of the \"built-in\" desc_sig_* nodes (during the test, instances of such nodes\n+    # will be created sequentially, so we fix a possible order at the beginning using a tuple)\n+    _builtin_sig_elements: tuple[type[addnodes.desc_sig_element], ...] = tuple(SIG_ELEMENTS)\n+\n+    @pytest.fixture(autouse=True)\n+    def builtin_sig_elements(self) -> tuple[type[addnodes.desc_sig_element], ...]:\n+        \"\"\"Fixture returning an ordered view on the original value of :data:`!sphinx.addnodes.SIG_ELEMENTS`.\"\"\"\n+        return self._builtin_sig_elements\n+\n+    @pytest.fixture()\n+    def document(\n+        self, app: SphinxTestApp, builtin_sig_elements: tuple[type[addnodes.desc_sig_element], ...],\n+    ) -> nodes.document:\n+        \"\"\"Fixture returning a new document with built-in ``desc_sig_*`` nodes and a final ``desc_inline`` node.\"\"\"\n+        doc = new_document('')\n+        doc.settings.env = app.env\n+        # Nodes that should be supported by a default custom translator class.\n+        # It is important that builtin_sig_elements has a fixed order so that\n+        # the nodes can be deterministically checked.\n+        doc += [node_type('', '') for node_type in builtin_sig_elements]\n+        doc += addnodes.desc_inline('py')\n+        return doc\n+\n+    @pytest.fixture()\n+    def with_desc_sig_elements(self, value: Any) -> bool:\n+        \"\"\"Dynamic fixture acting as the identity on booleans.\"\"\"\n+        assert isinstance(value, bool)\n+        return value\n+\n+    @pytest.fixture()\n+    def add_visitor_method_for(self, value: Any) -> list[str]:\n+        \"\"\"Dynamic fixture acting as the identity on a list of strings.\"\"\"\n+        assert isinstance(value, list)\n+        assert all(isinstance(item, str) for item in value)\n+        return value\n+\n+    @pytest.fixture(autouse=True)\n+    def translator_class(self, request: SubRequest) -> type[nodes.NodeVisitor]:\n+        \"\"\"Minimal interface fixture similar to SphinxTranslator but orthogonal thereof.\"\"\"\n+        logger = logging.getLogger(__name__)\n+\n+        class BaseCustomTranslatorClass(nodes.NodeVisitor):\n+            \"\"\"Base class for a custom translator class, orthogonal to ``SphinxTranslator``.\"\"\"\n+\n+            def __init__(self, document, *_a):\n+                super().__init__(document)\n+                # ignore other arguments\n+\n+            def dispatch_visit(self, node):\n+                for node_class in node.__class__.__mro__:\n+                    if method := getattr(self, f'visit_{node_class.__name__}', None):\n+                        method(node)\n+                        break\n+                else:\n+                    logger.info('generic visit: %r', node.__class__.__name__)\n+                    super().dispatch_visit(node)\n+\n+            def unknown_visit(self, node):\n+                logger.warning('unknown visit: %r', node.__class__.__name__)\n+                raise nodes.SkipDeparture  # ignore unknown departure\n+\n+            def visit_document(self, node):\n+                raise nodes.SkipDeparture  # ignore departure\n+\n+            def mark_node(self, node: nodes.Node) -> NoReturn:\n+                logger.info('mark: %r', node.__class__.__name__)\n+                raise nodes.SkipDeparture  # ignore departure\n+\n+        with_desc_sig_elements = request.getfixturevalue('with_desc_sig_elements')\n+        if with_desc_sig_elements:\n+            desc_sig_elements_list = request.getfixturevalue('builtin_sig_elements')\n+        else:\n+            desc_sig_elements_list = []\n+        add_visitor_method_for = request.getfixturevalue('add_visitor_method_for')\n+        visitor_methods = {f'visit_{tp.__name__}' for tp in desc_sig_elements_list}\n+        visitor_methods.update(f'visit_{name}' for name in add_visitor_method_for)\n+        class_dict = dict.fromkeys(visitor_methods, BaseCustomTranslatorClass.mark_node)\n+        return type('CustomTranslatorClass', (BaseCustomTranslatorClass,), class_dict)  # type: ignore[return-value]\n+\n+    @pytest.mark.parametrize(\n+        'add_visitor_method_for',\n+        [[], ['desc_inline']],\n+        ids=[\n+            'no_explicit_visitor',\n+            'explicit_desc_inline_visitor',\n+        ],\n+    )\n+    @pytest.mark.parametrize(\n+        'with_desc_sig_elements',\n+        [True, False],\n+        ids=[\n+            'with_default_visitors_for_desc_sig_elements',\n+            'without_default_visitors_for_desc_sig_elements',\n+        ],\n+    )\n+    @pytest.mark.sphinx('dummy')\n+    def test_support_desc_inline(\n+        self, document: nodes.document, with_desc_sig_elements: bool,\n+            add_visitor_method_for: list[str], request: SubRequest,\n+    ) -> None:\n+        document, _, _ = self._exec(request)\n+        # count the number of desc_inline nodes with the extra _sig_node_type field\n+        desc_inline_typename = addnodes.desc_inline.__name__\n+        visit_desc_inline = desc_inline_typename in add_visitor_method_for\n+        if visit_desc_inline:\n+            assert_node(document[-1], addnodes.desc_inline)\n+        else:\n+            assert_node(document[-1], nodes.inline, _sig_node_type=desc_inline_typename)\n+\n+    @pytest.mark.parametrize(\n+        'add_visitor_method_for',\n+        [\n+            [],  # no support\n+            ['desc_sig_space'],  # enable desc_sig_space visitor\n+            ['desc_sig_element'],  # enable generic visitor\n+            ['desc_sig_space', 'desc_sig_element'],  # enable desc_sig_space and generic visitors\n+        ],\n+        ids=[\n+            'no_explicit_visitor',\n+            'explicit_desc_sig_space_visitor',\n+            'explicit_desc_sig_element_visitor',\n+            'explicit_desc_sig_space_and_desc_sig_element_visitors',\n+        ],\n+    )\n+    @pytest.mark.parametrize(\n+        'with_desc_sig_elements',\n+        [True, False],\n+        ids=[\n+            'with_default_visitors_for_desc_sig_elements',\n+            'without_default_visitors_for_desc_sig_elements',\n+        ],\n+    )\n+    @pytest.mark.sphinx('dummy')\n+    def test_custom_implementation(\n+        self,\n+        document: nodes.document,\n+        with_desc_sig_elements: bool,\n+        add_visitor_method_for: list[str],\n+        request: SubRequest,\n+    ) -> None:\n+        document, stdout, stderr = self._exec(request)\n+        assert len(self._builtin_sig_elements) == len(document.children[:-1]) == len(stdout[:-1])\n+\n+        visit_desc_sig_element = addnodes.desc_sig_element.__name__ in add_visitor_method_for\n+        ignore_sig_element_fallback_transform = visit_desc_sig_element or with_desc_sig_elements\n+\n+        if ignore_sig_element_fallback_transform:\n+            # desc_sig_element is implemented or desc_sig_* nodes are properly handled (and left untouched)\n+            for node_type, node, mess in zip(self._builtin_sig_elements, document.children[:-1], stdout[:-1]):\n+                assert_node(node, node_type)\n+                assert not node.hasattr('_sig_node_type')\n+                assert mess == f'mark: {node_type.__name__!r}'\n+        else:\n+            # desc_sig_* nodes are converted into inline nodes\n+            for node_type, node, mess in zip(self._builtin_sig_elements, document.children[:-1], stdout[:-1]):\n+                assert_node(node, nodes.inline, _sig_node_type=node_type.__name__)\n+                assert mess == f'generic visit: {nodes.inline.__name__!r}'\n+\n+        # desc_inline node is never handled and always transformed\n+        assert addnodes.desc_inline.__name__ not in add_visitor_method_for\n+        assert_node(document[-1], nodes.inline, _sig_node_type=addnodes.desc_inline.__name__)\n+        assert stdout[-1] == f'generic visit: {nodes.inline.__name__!r}'\n+\n+        # nodes.inline are never handled\n+        assert len(stderr) == 1 if ignore_sig_element_fallback_transform else len(document.children)\n+        assert set(stderr) == {f'unknown visit: {nodes.inline.__name__!r}'}\n+\n+    @staticmethod\n+    def _exec(request: SubRequest) -> tuple[nodes.document, list[str], list[str]]:\n+        caplog = request.getfixturevalue('caplog')\n+        caplog.set_level(logging.INFO, logger=__name__)\n+\n+        app = request.getfixturevalue('app')\n+        translator_class = request.getfixturevalue('translator_class')\n+        app.set_translator('dummy', translator_class)\n+        # run the post-transform directly [building phase]\n+        # document contains SIG_ELEMENTS nodes followed by a desc_inline node\n+        document = request.getfixturevalue('document')\n+        SigElementFallbackTransform(document).run()\n+        # run the translator [writing phase]\n+        translator = translator_class(document, app.builder)\n+        document.walkabout(translator)\n+        # extract messages\n+        messages = caplog.record_tuples\n+        stdout = [message for _, lvl, message in messages if lvl == logging.INFO]\n+        stderr = [message for _, lvl, message in messages if lvl == logging.WARN]\n+        return document, stdout, stderr\n",
  "problem_statement": "[FEATURE] Avoid losing information in `SigElementFallbackTransform.fallback`.\nIn light to #11272, the current implementation of `SigElementFallbackTransform` does the following assuming that the builder's current translator class is *not* a subclass of `SphinxTranslator`:\r\n\r\n- If one or more node classes specified by [SIG_ELEMENTS](https://github.com/sphinx-doc/sphinx/blob/ba080286b06cb9e0cadec59a6cf1f96aa11aef5a/sphinx/addnodes.py#L341) (and derived from [desc_sig_element](https://github.com/sphinx-doc/sphinx/blob/ba080286b06cb9e0cadec59a6cf1f96aa11aef5a/sphinx/addnodes.py#L279)) are not handled by  the translator class, *all* `desc_sig_element` are transformed into `docutils.nodes.inline` nodes instead (with the same attributes).\r\n- If in addition the [desc_inline](https://github.com/sphinx-doc/sphinx/blob/ba080286b06cb9e0cadec59a6cf1f96aa11aef5a/sphinx/addnodes.py#L190) node is not handled by the visitor class, it is transformed into an `docutils.nodes.inline` node instead as well.\r\n\r\nThis implementation choice suffers from the following disadvantages:\r\n\r\n- Whenever a node inherits from `desc_sig_element`, the class must be added to the `SIG_ELEMENTS` list. \r\n- A custom translator not inheriting from `SphinxTranslator` should not be penalized if it only implements `visit_desc_sig_element` and handle it internally. Currently, they can emulate that behaviour by implementing `visit_inline` and checking whether the XML attributes are those that we would find on `desc_sig_*` nodes. \r\n\r\nAs such, I suggest the following features:\r\n\r\n- Use the `__init_subclass__` hook together with a `_sig_element=true` meta-keyword (defaults to `False`) to automatically add a class derived from `desc_sig_element` to the `SIG_ELEMENTS` list. That way, users may still use `desc_sig_element` as a regular base class without affecting the nodes expected by Sphinx itself.\r\n- A custom translator class `T` orthogonal to `SphinxTranslator` must satisfy one of the following exclusive conditions:\r\n  - `T` explicitly supports all nodes described in `SIG_ELEMENTS` by providing `visit_desc_sig_*` methods. If a node inherits from `desc_sig_element` but is not in `SIG_ELEMENTS`, then `T` must explicitly specify the corresponding visitor method.\r\n    \r\n     That way, `desc_sig_*` nodes expected from Sphinx (i.e., those in `SIG_ELEMENTS`) are correctly dispatched and the remaining nodes are simply kept as is and handled as any other nodes. \r\n   \r\n  - `T` specifies a *generic* fallback `visit_desc_sig_element` method and possibly zero or more visitor methods for handling specific `desc_sig_element` nodes. The nodes are then dispatched to their most precise type. \r\n\r\n  - `T` does not have an interface for `desc_sig_element` nodes and should therefore use a fallback. However, if there are other post-transforms coming *after* the fallback transform, it would be good to keep some information on the `desc_sig_*` type the node originally had before converting them into `inline` nodes. For instance, we could add `_sig_node_type=node.__class__.__name__` as an extra XML attribute of the transformed inline node.\r\n\r\nFor `desc_sig_inline`, since the latter does not inherit from `desc_sig_element`, I suggest that the fallback implementation simply add `_sig_node_type=\"desc_sig_inline\"` as an XML attribute in order to have a similar behaviour. \r\n\r\n\n",
  "hints_text": "",
  "created_at": "2023-04-10T10:38:14Z",
  "version": "7.2",
  "FAIL_TO_PASS": "[\"tests/test_addnodes.py::test_desc_sig_element_nodes\", \"tests/test_transforms_post_transforms.py::TestSigElementFallbackTransform::test_support_desc_inline[with_default_visitors_for_desc_sig_elements-no_explicit_visitor]\", \"tests/test_transforms_post_transforms.py::TestSigElementFallbackTransform::test_support_desc_inline[without_default_visitors_for_desc_sig_elements-no_explicit_visitor]\", \"tests/test_transforms_post_transforms.py::TestSigElementFallbackTransform::test_custom_implementation[with_default_visitors_for_desc_sig_elements-no_explicit_visitor]\", \"tests/test_transforms_post_transforms.py::TestSigElementFallbackTransform::test_custom_implementation[with_default_visitors_for_desc_sig_elements-explicit_desc_sig_space_visitor]\", \"tests/test_transforms_post_transforms.py::TestSigElementFallbackTransform::test_custom_implementation[with_default_visitors_for_desc_sig_elements-explicit_desc_sig_element_visitor]\", \"tests/test_transforms_post_transforms.py::TestSigElementFallbackTransform::test_custom_implementation[with_default_visitors_for_desc_sig_elements-explicit_desc_sig_space_and_desc_sig_element_visitors]\", \"tests/test_transforms_post_transforms.py::TestSigElementFallbackTransform::test_custom_implementation[without_default_visitors_for_desc_sig_elements-no_explicit_visitor]\", \"tests/test_transforms_post_transforms.py::TestSigElementFallbackTransform::test_custom_implementation[without_default_visitors_for_desc_sig_elements-explicit_desc_sig_space_visitor]\", \"tests/test_transforms_post_transforms.py::TestSigElementFallbackTransform::test_custom_implementation[without_default_visitors_for_desc_sig_elements-explicit_desc_sig_element_visitor]\", \"tests/test_transforms_post_transforms.py::TestSigElementFallbackTransform::test_custom_implementation[without_default_visitors_for_desc_sig_elements-explicit_desc_sig_space_and_desc_sig_element_visitors]\"]",
  "PASS_TO_PASS": "[\"tests/test_transforms_post_transforms.py::test_nitpicky_warning\", \"tests/test_transforms_post_transforms.py::test_missing_reference\", \"tests/test_transforms_post_transforms.py::test_missing_reference_conditional_pending_xref\", \"tests/test_transforms_post_transforms.py::test_keyboard_hyphen_spaces\", \"tests/test_transforms_post_transforms.py::TestSigElementFallbackTransform::test_support_desc_inline[with_default_visitors_for_desc_sig_elements-explicit_desc_inline_visitor]\", \"tests/test_transforms_post_transforms.py::TestSigElementFallbackTransform::test_support_desc_inline[without_default_visitors_for_desc_sig_elements-explicit_desc_inline_visitor]\"]",
  "environment_setup_commit": "7758e016231c3886e5a290c00fcb2c75d1f36c18",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.036786",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}