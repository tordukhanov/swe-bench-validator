{
  "repo": "django/django",
  "instance_id": "django__django-11278",
  "base_commit": "6485a5f450b3dc60e690c31a75e0e9574a896842",
  "patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -10,6 +10,8 @@\n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n     db_table_models = defaultdict(list)\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n     errors = []\n     if app_configs is None:\n         models = apps.get_models()\n@@ -29,6 +31,10 @@ def check_all_models(app_configs=None, **kwargs):\n             )\n         else:\n             errors.extend(model.check(**kwargs))\n+        for model_index in model._meta.indexes:\n+            indexes[model_index.name].append(model._meta.label)\n+        for model_constraint in model._meta.constraints:\n+            constraints[model_constraint.name].append(model._meta.label)\n     for db_table, model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n             errors.append(\n@@ -39,6 +45,32 @@ def check_all_models(app_configs=None, **kwargs):\n                     id='models.E028',\n                 )\n             )\n+    for index_name, model_labels in indexes.items():\n+        if len(model_labels) > 1:\n+            model_labels = set(model_labels)\n+            errors.append(\n+                Error(\n+                    \"index name '%s' is not unique %s %s.\" % (\n+                        index_name,\n+                        'for model' if len(model_labels) == 1 else 'amongst models:',\n+                        ', '.join(sorted(model_labels)),\n+                    ),\n+                    id='models.E029' if len(model_labels) == 1 else 'models.E030',\n+                ),\n+            )\n+    for constraint_name, model_labels in constraints.items():\n+        if len(model_labels) > 1:\n+            model_labels = set(model_labels)\n+            errors.append(\n+                Error(\n+                    \"constraint name '%s' is not unique %s %s.\" % (\n+                        constraint_name,\n+                        'for model' if len(model_labels) == 1 else 'amongst models:',\n+                        ', '.join(sorted(model_labels)),\n+                    ),\n+                    id='models.E031' if len(model_labels) == 1 else 'models.E032',\n+                ),\n+            )\n     return errors\n \n \n",
  "test_patch": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -1,7 +1,7 @@\n from django.core import checks\n from django.core.checks import Error\n from django.db import models\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     isolate_apps, modify_settings, override_system_checks,\n )\n@@ -73,3 +73,166 @@ class Meta:\n \n         self.assertEqual(Model._meta.db_table, ProxyModel._meta.db_table)\n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+\n+@isolate_apps('check_framework', attr_name='apps')\n+@override_system_checks([checks.model_checks.check_all_models])\n+class IndexNameTests(SimpleTestCase):\n+    def test_collision_in_same_model(self):\n+        index = models.Index(fields=['id'], name='foo')\n+\n+        class Model(models.Model):\n+            class Meta:\n+                indexes = [index, index]\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Error(\n+                \"index name 'foo' is not unique for model check_framework.Model.\",\n+                id='models.E029',\n+            ),\n+        ])\n+\n+    def test_collision_in_different_models(self):\n+        index = models.Index(fields=['id'], name='foo')\n+\n+        class Model1(models.Model):\n+            class Meta:\n+                indexes = [index]\n+\n+        class Model2(models.Model):\n+            class Meta:\n+                indexes = [index]\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Error(\n+                \"index name 'foo' is not unique amongst models: \"\n+                \"check_framework.Model1, check_framework.Model2.\",\n+                id='models.E030',\n+            ),\n+        ])\n+\n+    def test_collision_abstract_model(self):\n+        class AbstractModel(models.Model):\n+            class Meta:\n+                indexes = [models.Index(fields=['id'], name='foo')]\n+                abstract = True\n+\n+        class Model1(AbstractModel):\n+            pass\n+\n+        class Model2(AbstractModel):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Error(\n+                \"index name 'foo' is not unique amongst models: \"\n+                \"check_framework.Model1, check_framework.Model2.\",\n+                id='models.E030',\n+            ),\n+        ])\n+\n+    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n+    @isolate_apps('basic', 'check_framework', kwarg_name='apps')\n+    def test_collision_across_apps(self, apps):\n+        index = models.Index(fields=['id'], name='foo')\n+\n+        class Model1(models.Model):\n+            class Meta:\n+                app_label = 'basic'\n+                indexes = [index]\n+\n+        class Model2(models.Model):\n+            class Meta:\n+                app_label = 'check_framework'\n+                indexes = [index]\n+\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [\n+            Error(\n+                \"index name 'foo' is not unique amongst models: basic.Model1, \"\n+                \"check_framework.Model2.\",\n+                id='models.E030',\n+            ),\n+        ])\n+\n+\n+@isolate_apps('check_framework', attr_name='apps')\n+@override_system_checks([checks.model_checks.check_all_models])\n+@skipUnlessDBFeature('supports_table_check_constraints')\n+class ConstraintNameTests(TestCase):\n+    def test_collision_in_same_model(self):\n+        class Model(models.Model):\n+            class Meta:\n+                constraints = [\n+                    models.CheckConstraint(check=models.Q(id__gt=0), name='foo'),\n+                    models.CheckConstraint(check=models.Q(id__lt=100), name='foo'),\n+                ]\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Error(\n+                \"constraint name 'foo' is not unique for model \"\n+                \"check_framework.Model.\",\n+                id='models.E031',\n+            ),\n+        ])\n+\n+    def test_collision_in_different_models(self):\n+        constraint = models.CheckConstraint(check=models.Q(id__gt=0), name='foo')\n+\n+        class Model1(models.Model):\n+            class Meta:\n+                constraints = [constraint]\n+\n+        class Model2(models.Model):\n+            class Meta:\n+                constraints = [constraint]\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Error(\n+                \"constraint name 'foo' is not unique amongst models: \"\n+                \"check_framework.Model1, check_framework.Model2.\",\n+                id='models.E032',\n+            ),\n+        ])\n+\n+    def test_collision_abstract_model(self):\n+        class AbstractModel(models.Model):\n+            class Meta:\n+                constraints = [models.CheckConstraint(check=models.Q(id__gt=0), name='foo')]\n+                abstract = True\n+\n+        class Model1(AbstractModel):\n+            pass\n+\n+        class Model2(AbstractModel):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Error(\n+                \"constraint name 'foo' is not unique amongst models: \"\n+                \"check_framework.Model1, check_framework.Model2.\",\n+                id='models.E032',\n+            ),\n+        ])\n+\n+    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n+    @isolate_apps('basic', 'check_framework', kwarg_name='apps')\n+    def test_collision_across_apps(self, apps):\n+        constraint = models.CheckConstraint(check=models.Q(id__gt=0), name='foo')\n+\n+        class Model1(models.Model):\n+            class Meta:\n+                app_label = 'basic'\n+                constraints = [constraint]\n+\n+        class Model2(models.Model):\n+            class Meta:\n+                app_label = 'check_framework'\n+                constraints = [constraint]\n+\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [\n+            Error(\n+                \"constraint name 'foo' is not unique amongst models: \"\n+                \"basic.Model1, check_framework.Model2.\",\n+                id='models.E032',\n+            ),\n+        ])\n",
  "problem_statement": "Add a system check for uniqueness of partial indexes and constraints names.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nname is a mandatory field for constraints (check and unique) and partial indexes that must be unique in the database scope. We should add a system check for uniqueness of names.\nBased on discussion in #30362.\n",
  "hints_text": "â€‹PR",
  "created_at": "2019-04-24T13:24:54Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_collision_abstract_model (check_framework.test_model_checks.ConstraintNameTests)\", \"test_collision_across_apps (check_framework.test_model_checks.ConstraintNameTests)\", \"test_collision_in_different_models (check_framework.test_model_checks.ConstraintNameTests)\", \"test_collision_in_same_model (check_framework.test_model_checks.ConstraintNameTests)\", \"test_collision_abstract_model (check_framework.test_model_checks.IndexNameTests)\", \"test_collision_across_apps (check_framework.test_model_checks.IndexNameTests)\", \"test_collision_in_different_models (check_framework.test_model_checks.IndexNameTests)\", \"test_collision_in_same_model (check_framework.test_model_checks.IndexNameTests)\"]",
  "PASS_TO_PASS": "[\"test_collision_across_apps (check_framework.test_model_checks.DuplicateDBTableTests)\", \"test_collision_in_same_app (check_framework.test_model_checks.DuplicateDBTableTests)\", \"test_no_collision_for_proxy_models (check_framework.test_model_checks.DuplicateDBTableTests)\", \"test_no_collision_for_unmanaged_models (check_framework.test_model_checks.DuplicateDBTableTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.566777",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}