{
  "repo": "django/django",
  "instance_id": "django__django-12630",
  "base_commit": "421622548060499881df9966b7a352bce63901cd",
  "patch": "diff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py\n--- a/django/core/management/commands/migrate.py\n+++ b/django/core/management/commands/migrate.py\n@@ -1,3 +1,4 @@\n+import sys\n import time\n from importlib import import_module\n \n@@ -62,6 +63,10 @@ def add_arguments(self, parser):\n             '--run-syncdb', action='store_true',\n             help='Creates tables for apps without migrations.',\n         )\n+        parser.add_argument(\n+            '--check', action='store_true', dest='check_unapplied',\n+            help='Exits with a non-zero status if unapplied migrations exist.',\n+        )\n \n     @no_translations\n     def handle(self, *args, **options):\n@@ -143,6 +148,7 @@ def handle(self, *args, **options):\n             targets = executor.loader.graph.leaf_nodes()\n \n         plan = executor.migration_plan(targets)\n+        exit_dry = plan and options['check_unapplied']\n \n         if options['plan']:\n             self.stdout.write('Planned operations:', self.style.MIGRATE_LABEL)\n@@ -154,7 +160,11 @@ def handle(self, *args, **options):\n                     message, is_error = self.describe_operation(operation, backwards)\n                     style = self.style.WARNING if is_error else None\n                     self.stdout.write('    ' + message, style)\n+            if exit_dry:\n+                sys.exit(1)\n             return\n+        if exit_dry:\n+            sys.exit(1)\n \n         # At this point, ignore run_syncdb if there aren't any apps to sync.\n         run_syncdb = options['run_syncdb'] and executor.loader.unmigrated_apps\n",
  "test_patch": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -249,6 +249,39 @@ def test_migrate_conflict_exit(self):\n         with self.assertRaisesMessage(CommandError, \"Conflicting migrations detected\"):\n             call_command(\"migrate\", \"migrations\")\n \n+    @override_settings(MIGRATION_MODULES={\n+        'migrations': 'migrations.test_migrations',\n+    })\n+    def test_migrate_check(self):\n+        with self.assertRaises(SystemExit):\n+            call_command('migrate', 'migrations', '0001', check_unapplied=True, verbosity=0)\n+        self.assertTableNotExists('migrations_author')\n+        self.assertTableNotExists('migrations_tribble')\n+        self.assertTableNotExists('migrations_book')\n+\n+    @override_settings(MIGRATION_MODULES={\n+        'migrations': 'migrations.test_migrations_plan',\n+    })\n+    def test_migrate_check_plan(self):\n+        out = io.StringIO()\n+        with self.assertRaises(SystemExit):\n+            call_command(\n+                'migrate',\n+                'migrations',\n+                '0001',\n+                check_unapplied=True,\n+                plan=True,\n+                stdout=out,\n+                no_color=True,\n+            )\n+        self.assertEqual(\n+            'Planned operations:\\n'\n+            'migrations.0001_initial\\n'\n+            '    Create model Salamander\\n'\n+            '    Raw Python operation -> Grow salamander tail.\\n',\n+            out.getvalue(),\n+        )\n+\n     @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n     def test_showmigrations_list(self):\n         \"\"\"\n",
  "problem_statement": "Add --check flag to migrate.\nDescription\n\t \n\t\t(last modified by thenewguy)\n\t \nIt would be helpful if there was a flag for migrate that acted similar to makemigrations --check that could be used to stop CI from deploying an application automatically when unapplied migrations exist.\nThis is different from makemigrations --check because the new command flag would tell us if we need to *run* any migrations where as makemigrations --check tells us if we need to *create* any migrations.\nOne currently needs to parse output. It seems like this would be universally useful.\n",
  "hints_text": "Thanks for this ticket, however I don't see why you cannot use makemigrations --check for the same purpose. You can start a discussion on DevelopersMailingList if you don't agree.\nBased on short discussion â€‹https://groups.google.com/d/msg/django-developers/wr8MYU-d8pU/f86jYOZ6AQAJ.",
  "created_at": "2020-03-26T09:22:15Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_migrate_check (migrations.test_commands.MigrateTests)\", \"test_migrate_check_plan (migrations.test_commands.MigrateTests)\"]",
  "PASS_TO_PASS": "[\"test_makemigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_makemigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"--squashed-name specifies the new migration's name.\", \"--squashed-name also works if a start migration is omitted.\", \"test_squashmigrations_initial_attribute (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_invalid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_optimizes (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_squashes (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_valid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_ticket_23799_squashmigrations_no_optimize (migrations.test_commands.SquashMigrationsTests)\", \"test_failing_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_files_content (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_auto_now_add_interactive (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_check (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_conflict_exit (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_consistency_checks_respect_routers (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_default_merge_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_disabled_migrations_for_app (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_connections (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_no_app_specified (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_handle_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_inconsistent_history (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_accept (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_by_default (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_reject (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_dont_output_dependency_operations (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_no_conflict (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output_valueerror (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_announce (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_nonexistent_toplevel_package (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_path_not_exist (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_apps_initial (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes_no_apps (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_common_ancestor (migrations.test_commands.MakeMigrationsTests)\", \"Migration directories without an __init__.py file are allowed.\", \"test_makemigrations_non_interactive_no_field_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_no_model_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_addition (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_alteration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_order (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_no_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_invalid_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_ambiguous_prefix (migrations.test_commands.MigrateTests)\", \"test_app_without_migrations (migrations.test_commands.MigrateTests)\", \"test_migrate (migrations.test_commands.MigrateTests)\", \"test_migrate_conflict_exit (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_initial_case_insensitive (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_split_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_inconsistent_history (migrations.test_commands.MigrateTests)\", \"test_migrate_initial_false (migrations.test_commands.MigrateTests)\", \"Tests migrate --plan output.\", \"test_migrate_record_replaced (migrations.test_commands.MigrateTests)\", \"test_migrate_record_squashed (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_app_label (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_app_with_migrations (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_deferred_sql_executed_with_schemaeditor (migrations.test_commands.MigrateTests)\", \"test_migrate_with_system_checks (migrations.test_commands.MigrateTests)\", \"test_migrations_no_operations (migrations.test_commands.MigrateTests)\", \"test_regression_22823_unmigrated_fk_to_migrated_model (migrations.test_commands.MigrateTests)\", \"test_showmigrations_list (migrations.test_commands.MigrateTests)\", \"test_showmigrations_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_app_label_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_multiple_app_labels (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_single_app_label (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_squashed (migrations.test_commands.MigrateTests)\", \"test_showmigrations_unmigrated_app (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_ambiguous_prefix_squashed_migrations (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_backwards (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_for_non_atomic_migration (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_for_non_transactional_databases (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_forwards (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_replaced_migration (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_squashed_migration (migrations.test_commands.MigrateTests)\", \"test_unknown_prefix (migrations.test_commands.MigrateTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.632019",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}