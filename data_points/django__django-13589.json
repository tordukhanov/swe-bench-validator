{
  "repo": "django/django",
  "instance_id": "django__django-13589",
  "base_commit": "83a8da576dc6ccd6986e6426a308b69b9639b818",
  "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -679,38 +679,7 @@ def save(self, force_insert=False, force_update=False, using=None,\n         that the \"save\" must be an SQL insert or update (or equivalent for\n         non-SQL backends), respectively. Normally, they should not be set.\n         \"\"\"\n-        # Ensure that a model instance without a PK hasn't been assigned to\n-        # a ForeignKey or OneToOneField on this model. If the field is\n-        # nullable, allowing the save() would result in silent data loss.\n-        for field in self._meta.concrete_fields:\n-            # If the related field isn't cached, then an instance hasn't\n-            # been assigned and there's no need to worry about this check.\n-            if field.is_relation and field.is_cached(self):\n-                obj = getattr(self, field.name, None)\n-                if not obj:\n-                    continue\n-                # A pk may have been assigned manually to a model instance not\n-                # saved to the database (or auto-generated in a case like\n-                # UUIDField), but we allow the save to proceed and rely on the\n-                # database to raise an IntegrityError if applicable. If\n-                # constraints aren't supported by the database, there's the\n-                # unavoidable risk of data corruption.\n-                if obj.pk is None:\n-                    # Remove the object from a related instance cache.\n-                    if not field.remote_field.multiple:\n-                        field.remote_field.delete_cached_value(obj)\n-                    raise ValueError(\n-                        \"save() prohibited to prevent data loss due to \"\n-                        \"unsaved related object '%s'.\" % field.name\n-                    )\n-                elif getattr(self, field.attname) is None:\n-                    # Use pk from related object if it has been saved after\n-                    # an assignment.\n-                    setattr(self, field.attname, obj.pk)\n-                # If the relationship's pk/to_field was changed, clear the\n-                # cached relationship.\n-                if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n-                    field.delete_cached_value(self)\n+        self._prepare_related_fields_for_save(operation_name='save')\n \n         using = using or router.db_for_write(self.__class__, instance=self)\n         if force_insert and (force_update or update_fields):\n@@ -939,6 +908,40 @@ def _do_insert(self, manager, using, fields, returning_fields, raw):\n             using=using, raw=raw,\n         )\n \n+    def _prepare_related_fields_for_save(self, operation_name):\n+        # Ensure that a model instance without a PK hasn't been assigned to\n+        # a ForeignKey or OneToOneField on this model. If the field is\n+        # nullable, allowing the save would result in silent data loss.\n+        for field in self._meta.concrete_fields:\n+            # If the related field isn't cached, then an instance hasn't been\n+            # assigned and there's no need to worry about this check.\n+            if field.is_relation and field.is_cached(self):\n+                obj = getattr(self, field.name, None)\n+                if not obj:\n+                    continue\n+                # A pk may have been assigned manually to a model instance not\n+                # saved to the database (or auto-generated in a case like\n+                # UUIDField), but we allow the save to proceed and rely on the\n+                # database to raise an IntegrityError if applicable. If\n+                # constraints aren't supported by the database, there's the\n+                # unavoidable risk of data corruption.\n+                if obj.pk is None:\n+                    # Remove the object from a related instance cache.\n+                    if not field.remote_field.multiple:\n+                        field.remote_field.delete_cached_value(obj)\n+                    raise ValueError(\n+                        \"%s() prohibited to prevent data loss due to unsaved \"\n+                        \"related object '%s'.\" % (operation_name, field.name)\n+                    )\n+                elif getattr(self, field.attname) is None:\n+                    # Use pk from related object if it has been saved after\n+                    # an assignment.\n+                    setattr(self, field.attname, obj.pk)\n+                # If the relationship's pk/to_field was changed, clear the\n+                # cached relationship.\n+                if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n+                    field.delete_cached_value(self)\n+\n     def delete(self, using=None, keep_parents=False):\n         using = using or router.db_for_write(self.__class__, instance=self)\n         assert self.pk is not None, (\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -453,10 +453,12 @@ def create(self, **kwargs):\n         obj.save(force_insert=True, using=self.db)\n         return obj\n \n-    def _populate_pk_values(self, objs):\n+    def _prepare_for_bulk_create(self, objs):\n         for obj in objs:\n             if obj.pk is None:\n+                # Populate new PK values.\n                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)\n+            obj._prepare_related_fields_for_save(operation_name='bulk_create')\n \n     def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):\n         \"\"\"\n@@ -493,7 +495,7 @@ def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):\n         opts = self.model._meta\n         fields = opts.concrete_fields\n         objs = list(objs)\n-        self._populate_pk_values(objs)\n+        self._prepare_for_bulk_create(objs)\n         with transaction.atomic(using=self.db, savepoint=False):\n             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)\n             if objs_with_pk:\n",
  "test_patch": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -321,3 +321,29 @@ def test_ignore_conflicts_ignore(self):\n         # Without ignore_conflicts=True, there's a problem.\n         with self.assertRaises(IntegrityError):\n             TwoFields.objects.bulk_create(conflicting_objects)\n+\n+    def test_nullable_fk_after_parent(self):\n+        parent = NoFields()\n+        child = NullableFields(auto_field=parent, integer_field=88)\n+        parent.save()\n+        NullableFields.objects.bulk_create([child])\n+        child = NullableFields.objects.get(integer_field=88)\n+        self.assertEqual(child.auto_field, parent)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_nullable_fk_after_parent_bulk_create(self):\n+        parent = NoFields()\n+        child = NullableFields(auto_field=parent, integer_field=88)\n+        NoFields.objects.bulk_create([parent])\n+        NullableFields.objects.bulk_create([child])\n+        child = NullableFields.objects.get(integer_field=88)\n+        self.assertEqual(child.auto_field, parent)\n+\n+    def test_unsaved_parent(self):\n+        parent = NoFields()\n+        msg = (\n+            \"bulk_create() prohibited to prevent data loss due to unsaved \"\n+            \"related object 'auto_field'.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            NullableFields.objects.bulk_create([NullableFields(auto_field=parent)])\n",
  "problem_statement": "Saving parent object after setting on child leads to unexpected data loss in bulk_create().\nDescription\n\t\nExample:\nclass Country(models.Model):\n\tname = models.CharField(max_length=255)\n\tiso_two_letter = models.CharField(max_length=2)\n\tdescription = models.TextField()\nclass City(models.Model):\n\tname = models.CharField(max_length=255)\n\tcountry = models.ForeignKey(Country, on_delete=models.CASCADE)\nclass BulkCreateTests(TestCase):\n\tdef test_fk_bug(self):\n\t\tcountry_nl = Country(name='Netherlands', iso_two_letter='NL')\n\t\tcountry_be = Country(name='Belgium', iso_two_letter='BE')\n\t\tcity = City(country=country_be, name='Brussels') # (1)\n\t\tcountry_be.save() # (2)\n\t\tcity.save()\nThis results in an integrity error:\n======================================================================\nERROR: test_fk_bug (bulk_create.tests.BulkCreateTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/Users/robin/src/django/django/db/backends/utils.py\", line 85, in _execute\n\treturn self.cursor.execute(sql, params)\npsycopg2.IntegrityError: null value in column \"country_id\" violates not-null constraint\nDETAIL: Failing row contains (1, Brussels, null).\nThe above exception was the direct cause of the following exception:\n...\n----------------------------------------------------------------------\nI wonder wether there's a reason that this doesn't work. If setting a related object on a model instance automatically sets instance.related_object_id, you'd expect this behavior to continue working if the related object receives its primary key after the referencing instance was initialized.\nOf course, switching lines (1) and (2) makes it all work, but this behavior means that bulk creating with related objects (with postgres returning the primary keys, bless it's heart) becomes more complex than it should be, forcing the user to use mappings or even set the foreign keys themselves:\nfor country_data, city_data in data:\n\tcountry = Country(**country_data)\n\tcountries.append(country)\n\tcity = City(country=country, **city_data)\n\tcities.append(city)\nCountry.objects.bulk_create(countries)\n# needs this for the bulk create to not give an integrity error:\nfor city in cities:\n\tcity.country_id = city.country.id\nCity.objects.bulk_create(cities)\nIdeally, the main instance would, when saved, 'reach into' its related objects and set the foreign key field like the loop does. Is there a reason this can't work?\n",
  "hints_text": "Duplicate of #29085.",
  "created_at": "2020-10-22T19:05:51Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_nullable_fk_after_parent (bulk_create.tests.BulkCreateTests)\", \"test_unsaved_parent (bulk_create.tests.BulkCreateTests)\"]",
  "PASS_TO_PASS": "[\"test_batch_same_vals (bulk_create.tests.BulkCreateTests)\", \"test_bulk_insert_nullable_fields (bulk_create.tests.BulkCreateTests)\", \"test_efficiency (bulk_create.tests.BulkCreateTests)\", \"test_empty_model (bulk_create.tests.BulkCreateTests)\", \"test_explicit_batch_size (bulk_create.tests.BulkCreateTests)\", \"test_explicit_batch_size_efficiency (bulk_create.tests.BulkCreateTests)\", \"test_explicit_batch_size_respects_max_batch_size (bulk_create.tests.BulkCreateTests)\", \"test_ignore_conflicts_ignore (bulk_create.tests.BulkCreateTests)\", \"test_large_batch (bulk_create.tests.BulkCreateTests)\", \"test_large_batch_efficiency (bulk_create.tests.BulkCreateTests)\", \"test_large_batch_mixed (bulk_create.tests.BulkCreateTests)\", \"test_large_batch_mixed_efficiency (bulk_create.tests.BulkCreateTests)\", \"test_large_single_field_batch (bulk_create.tests.BulkCreateTests)\", \"test_long_and_short_text (bulk_create.tests.BulkCreateTests)\", \"test_long_non_ascii_text (bulk_create.tests.BulkCreateTests)\", \"test_multi_table_inheritance_unsupported (bulk_create.tests.BulkCreateTests)\", \"test_non_auto_increment_pk (bulk_create.tests.BulkCreateTests)\", \"test_non_auto_increment_pk_efficiency (bulk_create.tests.BulkCreateTests)\", \"test_proxy_inheritance_supported (bulk_create.tests.BulkCreateTests)\", \"test_set_state_with_pk_specified (bulk_create.tests.BulkCreateTests)\", \"test_simple (bulk_create.tests.BulkCreateTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.663092",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}