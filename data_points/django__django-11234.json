{
  "repo": "django/django",
  "instance_id": "django__django-11234",
  "base_commit": "d610521bffe9d44a070ebe3a719b474aff6d3d1e",
  "patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -939,6 +939,9 @@ def get_db_prep_save(self, value, connection):\n     def get_db_prep_value(self, value, connection, prepared=False):\n         return self.target_field.get_db_prep_value(value, connection, prepared)\n \n+    def get_prep_value(self, value):\n+        return self.target_field.get_prep_value(value)\n+\n     def contribute_to_related_class(self, cls, related):\n         super().contribute_to_related_class(cls, related)\n         if self.remote_field.field_name is None:\n",
  "test_patch": "diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py\n--- a/tests/prefetch_related/tests.py\n+++ b/tests/prefetch_related/tests.py\n@@ -891,6 +891,13 @@ def test_prefetch_GFK_uuid_pk(self):\n         qs = Comment.objects.prefetch_related('content_object_uuid')\n         self.assertEqual([c.content_object_uuid for c in qs], [article])\n \n+    def test_prefetch_GFK_fk_pk(self):\n+        book = Book.objects.create(title='Poems')\n+        book_with_year = BookWithYear.objects.create(book=book, published_year=2019)\n+        Comment.objects.create(comment='awesome', content_object=book_with_year)\n+        qs = Comment.objects.prefetch_related('content_object')\n+        self.assertEqual([c.content_object for c in qs], [book_with_year])\n+\n     def test_traverse_GFK(self):\n         \"\"\"\n         A 'content_object' can be traversed with prefetch_related() and\n",
  "problem_statement": "Prefetch related is not working when used GFK for model that uses FK as PK.\nDescription\n\t\nSteps to reproduce\nCreate Base model with an AutoField primary key\nclass Base(models.Model):\n\ttitle = models.TextField()\nCreate a model where the primary key is also a foreign key\nclass Extended(models.Model):\n\tbase = models.OneToOneField(Base, on_delete=models.CASCADE, primary_key=True)\nCreate model with GenericForeignKey\nclass Comment(models.Model):\n\tcontent_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n\tobject_pk = models.TextField()\n\tcontent_object = GenericForeignKey(ct_field=\"content_type\", fk_field=\"object_pk\")\nPrefetch the GenericForeignKey field content_object expecting it to have a value but get None instead. \n# Setup\nbase = Base.objects.create(title=\"foo\")\nextended = Extended.objects.create(base=base)\nComment.objects.create(content_object=extended)\n# Exercise\ncomment = Comment.objects.prefetch_related(\"content_object\").get()\nprint(comment.content_object)\n",
  "hints_text": "",
  "created_at": "2019-04-15T11:10:15Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_prefetch_GFK_fk_pk (prefetch_related.tests.GenericRelationTests)\"]",
  "PASS_TO_PASS": "[\"test_foreignkey (prefetch_related.tests.ForeignKeyToFieldTest)\", \"test_m2m (prefetch_related.tests.ForeignKeyToFieldTest)\", \"test_retrieves_results_from_prefetched_objects_cache (prefetch_related.tests.ReadPrefetchedObjectsCacheTests)\", \"test_bug (prefetch_related.tests.Ticket21760Tests)\", \"test_add_clears_prefetched_objects (prefetch_related.tests.DirectPrefechedObjectCacheReuseTests)\", \"test_detect_is_fetched (prefetch_related.tests.DirectPrefechedObjectCacheReuseTests)\", \"test_detect_is_fetched_with_to_attr (prefetch_related.tests.DirectPrefechedObjectCacheReuseTests)\", \"test_prefetch_reverse_foreign_key (prefetch_related.tests.DirectPrefechedObjectCacheReuseTests)\", \"test_remove_clears_prefetched_objects (prefetch_related.tests.DirectPrefechedObjectCacheReuseTests)\", \"test_bug (prefetch_related.tests.Ticket19607Tests)\", \"test_m2m_then_m2m (prefetch_related.tests.DefaultManagerTests)\", \"test_bug (prefetch_related.tests.Ticket21410Tests)\", \"test_using_is_honored_custom_qs (prefetch_related.tests.MultiDbTests)\", \"test_using_is_honored_fkey (prefetch_related.tests.MultiDbTests)\", \"test_using_is_honored_inheritance (prefetch_related.tests.MultiDbTests)\", \"test_using_is_honored_m2m (prefetch_related.tests.MultiDbTests)\", \"test_in_bulk (prefetch_related.tests.NullableTest)\", \"test_prefetch_nullable (prefetch_related.tests.NullableTest)\", \"test_traverse_nullable (prefetch_related.tests.NullableTest)\", \"test_basic (prefetch_related.tests.RawQuerySetTests)\", \"test_clear (prefetch_related.tests.RawQuerySetTests)\", \"test_prefetch_before_raw (prefetch_related.tests.RawQuerySetTests)\", \"test_order (prefetch_related.tests.LookupOrderingTest)\", \"test_child_link_prefetch (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_foreignkey (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_foreignkey_to_inherited (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_m2m_to_inheriting_model (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_parent_link_prefetch (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_charfield_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_custom_queryset (prefetch_related.tests.GenericRelationTests)\", \"test_generic_relation (prefetch_related.tests.GenericRelationTests)\", \"test_nullable_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_prefetch_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_prefetch_GFK_nonint_pk (prefetch_related.tests.GenericRelationTests)\", \"test_prefetch_GFK_uuid_pk (prefetch_related.tests.GenericRelationTests)\", \"test_traverse_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_attribute_error (prefetch_related.tests.PrefetchRelatedTests)\", \"test_bool (prefetch_related.tests.PrefetchRelatedTests)\", \"test_clear (prefetch_related.tests.PrefetchRelatedTests)\", \"test_count (prefetch_related.tests.PrefetchRelatedTests)\", \"test_exists (prefetch_related.tests.PrefetchRelatedTests)\", \"test_foreign_key_then_m2m (prefetch_related.tests.PrefetchRelatedTests)\", \"test_foreignkey_forward (prefetch_related.tests.PrefetchRelatedTests)\", \"test_foreignkey_reverse (prefetch_related.tests.PrefetchRelatedTests)\", \"test_forward_m2m_to_attr_conflict (prefetch_related.tests.PrefetchRelatedTests)\", \"test_get (prefetch_related.tests.PrefetchRelatedTests)\", \"test_in_and_prefetch_related (prefetch_related.tests.PrefetchRelatedTests)\", \"test_invalid_final_lookup (prefetch_related.tests.PrefetchRelatedTests)\", \"test_len (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_forward (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_reverse (prefetch_related.tests.PrefetchRelatedTests)\", \"A m2m can be followed through another m2m.\", \"test_m2m_then_m2m_object_ids (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_then_reverse_fk_object_ids (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_then_reverse_one_to_one_object_ids (prefetch_related.tests.PrefetchRelatedTests)\", \"test_onetoone_reverse_no_match (prefetch_related.tests.PrefetchRelatedTests)\", \"test_onetoone_reverse_with_to_field_pk (prefetch_related.tests.PrefetchRelatedTests)\", \"test_overriding_prefetch (prefetch_related.tests.PrefetchRelatedTests)\", \"test_reverse_m2m_to_attr_conflict (prefetch_related.tests.PrefetchRelatedTests)\", \"test_reverse_one_to_one_then_m2m (prefetch_related.tests.PrefetchRelatedTests)\", \"test_survives_clone (prefetch_related.tests.PrefetchRelatedTests)\", \"test_ambiguous (prefetch_related.tests.CustomPrefetchTests)\", \"test_custom_qs (prefetch_related.tests.CustomPrefetchTests)\", \"test_generic_rel (prefetch_related.tests.CustomPrefetchTests)\", \"test_m2m (prefetch_related.tests.CustomPrefetchTests)\", \"test_m2m_through_fk (prefetch_related.tests.CustomPrefetchTests)\", \"test_m2m_through_gfk (prefetch_related.tests.CustomPrefetchTests)\", \"test_nested_prefetch_related_are_not_overwritten (prefetch_related.tests.CustomPrefetchTests)\", \"test_nested_prefetch_related_with_duplicate_prefetcher (prefetch_related.tests.CustomPrefetchTests)\", \"test_o2m_through_m2m (prefetch_related.tests.CustomPrefetchTests)\", \"test_reverse_m2m (prefetch_related.tests.CustomPrefetchTests)\", \"test_to_attr_cached_property (prefetch_related.tests.CustomPrefetchTests)\", \"test_to_attr_doesnt_cache_through_attr_as_list (prefetch_related.tests.CustomPrefetchTests)\", \"test_traverse_multiple_items_property (prefetch_related.tests.CustomPrefetchTests)\", \"test_traverse_qs (prefetch_related.tests.CustomPrefetchTests)\", \"test_traverse_single_item_property (prefetch_related.tests.CustomPrefetchTests)\", \"test_values_queryset (prefetch_related.tests.CustomPrefetchTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.565099",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}