{
  "repo": "django/django",
  "instance_id": "django__django-13708",
  "base_commit": "8b040e3cbbb2e81420e777afc3ca48a1c8f4dd5a",
  "patch": "diff --git a/django/db/transaction.py b/django/db/transaction.py\n--- a/django/db/transaction.py\n+++ b/django/db/transaction.py\n@@ -158,16 +158,30 @@ class Atomic(ContextDecorator):\n \n     Since database connections are thread-local, this is thread-safe.\n \n+    An atomic block can be tagged as durable. In this case, raise a\n+    RuntimeError if it's nested within another atomic block. This guarantees\n+    that database changes in a durable block are committed to the database when\n+    the block exists without error.\n+\n     This is a private API.\n     \"\"\"\n+    # This private flag is provided only to disable the durability checks in\n+    # TestCase.\n+    _ensure_durability = True\n \n-    def __init__(self, using, savepoint):\n+    def __init__(self, using, savepoint, durable):\n         self.using = using\n         self.savepoint = savepoint\n+        self.durable = durable\n \n     def __enter__(self):\n         connection = get_connection(self.using)\n \n+        if self.durable and self._ensure_durability and connection.in_atomic_block:\n+            raise RuntimeError(\n+                'A durable atomic block cannot be nested within another '\n+                'atomic block.'\n+            )\n         if not connection.in_atomic_block:\n             # Reset state when entering an outermost atomic block.\n             connection.commit_on_exit = True\n@@ -282,14 +296,14 @@ def __exit__(self, exc_type, exc_value, traceback):\n                     connection.in_atomic_block = False\n \n \n-def atomic(using=None, savepoint=True):\n+def atomic(using=None, savepoint=True, durable=False):\n     # Bare decorator: @atomic -- although the first argument is called\n     # `using`, it's actually the function being decorated.\n     if callable(using):\n-        return Atomic(DEFAULT_DB_ALIAS, savepoint)(using)\n+        return Atomic(DEFAULT_DB_ALIAS, savepoint, durable)(using)\n     # Decorator: @atomic(...) or context manager: with atomic(...): ...\n     else:\n-        return Atomic(using, savepoint)\n+        return Atomic(using, savepoint, durable)\n \n \n def _non_atomic_requests(view, using):\n",
  "test_patch": "diff --git a/django/test/testcases.py b/django/test/testcases.py\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1181,29 +1181,37 @@ def setUpClass(cls):\n         super().setUpClass()\n         if not cls._databases_support_transactions():\n             return\n-        cls.cls_atomics = cls._enter_atomics()\n-\n-        if cls.fixtures:\n-            for db_name in cls._databases_names(include_mirrors=False):\n-                try:\n-                    call_command('loaddata', *cls.fixtures, **{'verbosity': 0, 'database': db_name})\n-                except Exception:\n-                    cls._rollback_atomics(cls.cls_atomics)\n-                    cls._remove_databases_failures()\n-                    raise\n-        pre_attrs = cls.__dict__.copy()\n+        # Disable the durability check to allow testing durable atomic blocks\n+        # in a transaction for performance reasons.\n+        transaction.Atomic._ensure_durability = False\n         try:\n-            cls.setUpTestData()\n+            cls.cls_atomics = cls._enter_atomics()\n+\n+            if cls.fixtures:\n+                for db_name in cls._databases_names(include_mirrors=False):\n+                    try:\n+                        call_command('loaddata', *cls.fixtures, **{'verbosity': 0, 'database': db_name})\n+                    except Exception:\n+                        cls._rollback_atomics(cls.cls_atomics)\n+                        cls._remove_databases_failures()\n+                        raise\n+            pre_attrs = cls.__dict__.copy()\n+            try:\n+                cls.setUpTestData()\n+            except Exception:\n+                cls._rollback_atomics(cls.cls_atomics)\n+                cls._remove_databases_failures()\n+                raise\n+            for name, value in cls.__dict__.items():\n+                if value is not pre_attrs.get(name):\n+                    setattr(cls, name, TestData(name, value))\n         except Exception:\n-            cls._rollback_atomics(cls.cls_atomics)\n-            cls._remove_databases_failures()\n+            transaction.Atomic._ensure_durability = True\n             raise\n-        for name, value in cls.__dict__.items():\n-            if value is not pre_attrs.get(name):\n-                setattr(cls, name, TestData(name, value))\n \n     @classmethod\n     def tearDownClass(cls):\n+        transaction.Atomic._ensure_durability = True\n         if cls._databases_support_transactions():\n             cls._rollback_atomics(cls.cls_atomics)\n             for conn in connections.all():\ndiff --git a/tests/transactions/tests.py b/tests/transactions/tests.py\n--- a/tests/transactions/tests.py\n+++ b/tests/transactions/tests.py\n@@ -8,7 +8,7 @@\n     transaction,\n )\n from django.test import (\n-    TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n+    TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n \n from .models import Reporter\n@@ -498,3 +498,76 @@ def test_orm_query_without_autocommit(self):\n         finally:\n             transaction.rollback()\n             transaction.set_autocommit(True)\n+\n+\n+class DurableTests(TransactionTestCase):\n+    available_apps = ['transactions']\n+\n+    def test_commit(self):\n+        with transaction.atomic(durable=True):\n+            reporter = Reporter.objects.create(first_name='Tintin')\n+        self.assertEqual(Reporter.objects.get(), reporter)\n+\n+    def test_nested_outer_durable(self):\n+        with transaction.atomic(durable=True):\n+            reporter1 = Reporter.objects.create(first_name='Tintin')\n+            with transaction.atomic():\n+                reporter2 = Reporter.objects.create(\n+                    first_name='Archibald',\n+                    last_name='Haddock',\n+                )\n+        self.assertSequenceEqual(Reporter.objects.all(), [reporter2, reporter1])\n+\n+    def test_nested_both_durable(self):\n+        msg = 'A durable atomic block cannot be nested within another atomic block.'\n+        with transaction.atomic(durable=True):\n+            with self.assertRaisesMessage(RuntimeError, msg):\n+                with transaction.atomic(durable=True):\n+                    pass\n+\n+    def test_nested_inner_durable(self):\n+        msg = 'A durable atomic block cannot be nested within another atomic block.'\n+        with transaction.atomic():\n+            with self.assertRaisesMessage(RuntimeError, msg):\n+                with transaction.atomic(durable=True):\n+                    pass\n+\n+\n+class DisableDurabiltityCheckTests(TestCase):\n+    \"\"\"\n+    TestCase runs all tests in a transaction by default. Code using\n+    durable=True would always fail when run from TestCase. This would mean\n+    these tests would be forced to use the slower TransactionTestCase even when\n+    not testing durability. For this reason, TestCase disables the durability\n+    check.\n+    \"\"\"\n+    available_apps = ['transactions']\n+\n+    def test_commit(self):\n+        with transaction.atomic(durable=True):\n+            reporter = Reporter.objects.create(first_name='Tintin')\n+        self.assertEqual(Reporter.objects.get(), reporter)\n+\n+    def test_nested_outer_durable(self):\n+        with transaction.atomic(durable=True):\n+            reporter1 = Reporter.objects.create(first_name='Tintin')\n+            with transaction.atomic():\n+                reporter2 = Reporter.objects.create(\n+                    first_name='Archibald',\n+                    last_name='Haddock',\n+                )\n+        self.assertSequenceEqual(Reporter.objects.all(), [reporter2, reporter1])\n+\n+    def test_nested_both_durable(self):\n+        with transaction.atomic(durable=True):\n+            # Error is not raised.\n+            with transaction.atomic(durable=True):\n+                reporter = Reporter.objects.create(first_name='Tintin')\n+        self.assertEqual(Reporter.objects.get(), reporter)\n+\n+    def test_nested_inner_durable(self):\n+        with transaction.atomic():\n+            # Error is not raised.\n+            with transaction.atomic(durable=True):\n+                reporter = Reporter.objects.create(first_name='Tintin')\n+        self.assertEqual(Reporter.objects.get(), reporter)\n",
  "problem_statement": "Add a 'durable' flag to transaction.atomic()\nDescription\n\t\nAs discussed ​on Twitter following ​David Seddon's blog post.\ntransaction.atomic() guarantees the wrapped database operations is *atomic* - at the end of its wrapped block, operations within that block will all be applied, or all rolled back. In some situations it's also useful to guarantee that the wrapped operations are *durable* - at the end of the wrapped block, all operations have definitely been committed. atomic() doesn't guarantee this at the moment since its use may be wrapped by *another* atomic() higher in the stack, delaying the commit.\nDavid Seddon's technique to guarantee durability is to wrap atomic() to first check if an atomic() is already active for the current connection (in other words, connection.get_autocommit() returns False), and raise an error if so.\nOn Twitter, Ian Foote suggested adding a durable flag to atomic() to add this behaviour to Django, to which Aymeric Augustin said it sounds like a good idea.\n",
  "hints_text": "",
  "created_at": "2020-11-22T16:48:17Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_commit (transactions.tests.DisableDurabiltityCheckTests)\", \"test_nested_both_durable (transactions.tests.DisableDurabiltityCheckTests)\", \"test_nested_inner_durable (transactions.tests.DisableDurabiltityCheckTests)\", \"test_nested_outer_durable (transactions.tests.DisableDurabiltityCheckTests)\", \"test_commit (transactions.tests.DurableTests)\", \"test_nested_both_durable (transactions.tests.DurableTests)\", \"test_nested_inner_durable (transactions.tests.DurableTests)\", \"test_nested_outer_durable (transactions.tests.DurableTests)\"]",
  "PASS_TO_PASS": "[\"test_orm_query_after_error_and_rollback (transactions.tests.NonAutocommitTests)\", \"#24921 -- ORM queries must be possible after set_autocommit(False).\", \"#23074 -- Savepoints must be released after rollback.\", \"test_mark_for_rollback_on_error_in_autocommit (transactions.tests.AtomicMiscTests)\", \"test_mark_for_rollback_on_error_in_transaction (transactions.tests.AtomicMiscTests)\", \"#20028 -- Atomic must support wrapping callable instances.\", \"test_merged_inner_savepoint_rollback (transactions.tests.AtomicMergeTests)\", \"test_merged_outer_rollback (transactions.tests.AtomicMergeTests)\", \"test_atomic_allows_queries_after_fixing_transaction (transactions.tests.AtomicErrorsTests)\", \"test_atomic_prevents_calling_transaction_methods (transactions.tests.AtomicErrorsTests)\", \"test_atomic_prevents_queries_in_broken_transaction (transactions.tests.AtomicErrorsTests)\", \"test_atomic_prevents_setting_autocommit (transactions.tests.AtomicErrorsTests)\", \"test_alternate_decorator_syntax_commit (transactions.tests.AtomicTests)\", \"test_alternate_decorator_syntax_rollback (transactions.tests.AtomicTests)\", \"test_commit (transactions.tests.AtomicTests)\", \"test_decorator_syntax_commit (transactions.tests.AtomicTests)\", \"test_decorator_syntax_rollback (transactions.tests.AtomicTests)\", \"test_force_rollback (transactions.tests.AtomicTests)\", \"test_merged_commit_commit (transactions.tests.AtomicTests)\", \"test_merged_commit_rollback (transactions.tests.AtomicTests)\", \"test_merged_rollback_commit (transactions.tests.AtomicTests)\", \"test_merged_rollback_rollback (transactions.tests.AtomicTests)\", \"test_nested_commit_commit (transactions.tests.AtomicTests)\", \"test_nested_commit_rollback (transactions.tests.AtomicTests)\", \"test_nested_rollback_commit (transactions.tests.AtomicTests)\", \"test_nested_rollback_rollback (transactions.tests.AtomicTests)\", \"test_prevent_rollback (transactions.tests.AtomicTests)\", \"test_reuse_commit_commit (transactions.tests.AtomicTests)\", \"test_reuse_commit_rollback (transactions.tests.AtomicTests)\", \"test_reuse_rollback_commit (transactions.tests.AtomicTests)\", \"test_reuse_rollback_rollback (transactions.tests.AtomicTests)\", \"test_rollback (transactions.tests.AtomicTests)\", \"test_alternate_decorator_syntax_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_alternate_decorator_syntax_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_decorator_syntax_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_decorator_syntax_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_force_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_merged_commit_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_merged_commit_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_merged_rollback_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_merged_rollback_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_nested_commit_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_nested_commit_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_nested_rollback_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_nested_rollback_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_prevent_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_reuse_commit_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_reuse_commit_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_reuse_rollback_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_reuse_rollback_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_alternate_decorator_syntax_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_alternate_decorator_syntax_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_decorator_syntax_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_decorator_syntax_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_force_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_merged_commit_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_merged_commit_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_merged_rollback_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_merged_rollback_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_nested_commit_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_nested_commit_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_nested_rollback_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_nested_rollback_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_prevent_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_reuse_commit_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_reuse_commit_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_reuse_rollback_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_reuse_rollback_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_rollback (transactions.tests.AtomicInsideTransactionTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.667435",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}