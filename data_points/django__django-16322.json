{
  "repo": "django/django",
  "instance_id": "django__django-16322",
  "base_commit": "d526d1569ca4a1e62bb6a1dd779d2068766d348c",
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -23,7 +23,7 @@\n from django.db.models import AutoField, DateField, DateTimeField, Field, sql\n from django.db.models.constants import LOOKUP_SEP, OnConflict\n from django.db.models.deletion import Collector\n-from django.db.models.expressions import Case, F, Ref, Value, When\n+from django.db.models.expressions import Case, F, Value, When\n from django.db.models.functions import Cast, Trunc\n from django.db.models.query_utils import FilteredRelation, Q\n from django.db.models.sql.constants import CURSOR, GET_ITERATOR_CHUNK_SIZE\n@@ -589,24 +589,7 @@ def aggregate(self, *args, **kwargs):\n                 raise TypeError(\"Complex aggregates require an alias\")\n             kwargs[arg.default_alias] = arg\n \n-        query = self.query.chain()\n-        for (alias, aggregate_expr) in kwargs.items():\n-            query.add_annotation(aggregate_expr, alias, is_summary=True)\n-            annotation = query.annotations[alias]\n-            if not annotation.contains_aggregate:\n-                raise TypeError(\"%s is not an aggregate expression\" % alias)\n-            for expr in annotation.get_source_expressions():\n-                if (\n-                    expr.contains_aggregate\n-                    and isinstance(expr, Ref)\n-                    and expr.refs in kwargs\n-                ):\n-                    name = expr.refs\n-                    raise exceptions.FieldError(\n-                        \"Cannot compute %s('%s'): '%s' is an aggregate\"\n-                        % (annotation.name, name, name)\n-                    )\n-        return query.get_aggregation(self.db, kwargs)\n+        return self.query.chain().get_aggregation(self.db, kwargs)\n \n     async def aaggregate(self, *args, **kwargs):\n         return await sync_to_async(self.aggregate)(*args, **kwargs)\n@@ -1655,7 +1638,6 @@ def _annotate(self, args, kwargs, select=True):\n                 clone.query.add_annotation(\n                     annotation,\n                     alias,\n-                    is_summary=False,\n                     select=select,\n                 )\n         for alias, annotation in clone.query.annotations.items():\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -381,24 +381,28 @@ def _get_col(self, target, field, alias):\n             alias = None\n         return target.get_col(alias, field)\n \n-    def get_aggregation(self, using, added_aggregate_names):\n+    def get_aggregation(self, using, aggregate_exprs):\n         \"\"\"\n         Return the dictionary with the values of the existing aggregations.\n         \"\"\"\n-        if not self.annotation_select:\n+        if not aggregate_exprs:\n             return {}\n-        existing_annotations = {\n-            alias: annotation\n-            for alias, annotation in self.annotations.items()\n-            if alias not in added_aggregate_names\n-        }\n+        aggregates = {}\n+        for alias, aggregate_expr in aggregate_exprs.items():\n+            self.check_alias(alias)\n+            aggregate = aggregate_expr.resolve_expression(\n+                self, allow_joins=True, reuse=None, summarize=True\n+            )\n+            if not aggregate.contains_aggregate:\n+                raise TypeError(\"%s is not an aggregate expression\" % alias)\n+            aggregates[alias] = aggregate\n         # Existing usage of aggregation can be determined by the presence of\n         # selected aggregates but also by filters against aliased aggregates.\n         _, having, qualify = self.where.split_having_qualify()\n         has_existing_aggregation = (\n             any(\n                 getattr(annotation, \"contains_aggregate\", True)\n-                for annotation in existing_annotations.values()\n+                for annotation in self.annotations.values()\n             )\n             or having\n         )\n@@ -449,25 +453,19 @@ def get_aggregation(self, using, added_aggregate_names):\n                     # filtering against window functions is involved as it\n                     # requires complex realising.\n                     annotation_mask = set()\n-                    for name in added_aggregate_names:\n-                        annotation_mask.add(name)\n-                        annotation_mask |= inner_query.annotations[name].get_refs()\n+                    for aggregate in aggregates.values():\n+                        annotation_mask |= aggregate.get_refs()\n                     inner_query.set_annotation_mask(annotation_mask)\n \n-            # Remove any aggregates marked for reduction from the subquery and\n-            # move them to the outer AggregateQuery. This requires making sure\n-            # all columns referenced by the aggregates are selected in the\n-            # subquery. It is achieved by retrieving all column references from\n-            # the aggregates, explicitly selecting them if they are not\n-            # already, and making sure the aggregates are repointed to\n-            # referenced to them.\n+            # Add aggregates to the outer AggregateQuery. This requires making\n+            # sure all columns referenced by the aggregates are selected in the\n+            # inner query. It is achieved by retrieving all column references\n+            # by the aggregates, explicitly selecting them in the inner query,\n+            # and making sure the aggregates are repointed to them.\n             col_refs = {}\n-            for alias, expression in list(inner_query.annotation_select.items()):\n-                if not expression.is_summary:\n-                    continue\n-                annotation_select_mask = inner_query.annotation_select_mask\n+            for alias, aggregate in aggregates.items():\n                 replacements = {}\n-                for col in self._gen_cols([expression], resolve_refs=False):\n+                for col in self._gen_cols([aggregate], resolve_refs=False):\n                     if not (col_ref := col_refs.get(col)):\n                         index = len(col_refs) + 1\n                         col_alias = f\"__col{index}\"\n@@ -476,13 +474,9 @@ def get_aggregation(self, using, added_aggregate_names):\n                         inner_query.annotations[col_alias] = col\n                         inner_query.append_annotation_mask([col_alias])\n                     replacements[col] = col_ref\n-                outer_query.annotations[alias] = expression.replace_expressions(\n+                outer_query.annotations[alias] = aggregate.replace_expressions(\n                     replacements\n                 )\n-                del inner_query.annotations[alias]\n-                annotation_select_mask.remove(alias)\n-                # Make sure the annotation_select wont use cached results.\n-                inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n             if (\n                 inner_query.select == ()\n                 and not inner_query.default_cols\n@@ -499,19 +493,21 @@ def get_aggregation(self, using, added_aggregate_names):\n             self.select = ()\n             self.default_cols = False\n             self.extra = {}\n-            if existing_annotations:\n+            if self.annotations:\n                 # Inline reference to existing annotations and mask them as\n                 # they are unnecessary given only the summarized aggregations\n                 # are requested.\n                 replacements = {\n                     Ref(alias, annotation): annotation\n-                    for alias, annotation in existing_annotations.items()\n+                    for alias, annotation in self.annotations.items()\n                 }\n-                for name in added_aggregate_names:\n-                    self.annotations[name] = self.annotations[name].replace_expressions(\n-                        replacements\n-                    )\n-                self.set_annotation_mask(added_aggregate_names)\n+                self.annotations = {\n+                    alias: aggregate.replace_expressions(replacements)\n+                    for alias, aggregate in aggregates.items()\n+                }\n+            else:\n+                self.annotations = aggregates\n+            self.set_annotation_mask(aggregates)\n \n         empty_set_result = [\n             expression.empty_result_set_value\n@@ -537,8 +533,7 @@ def get_count(self, using):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n-        obj.add_annotation(Count(\"*\"), alias=\"__count\", is_summary=True)\n-        return obj.get_aggregation(using, [\"__count\"])[\"__count\"]\n+        return obj.get_aggregation(using, {\"__count\": Count(\"*\")})[\"__count\"]\n \n     def has_filters(self):\n         return self.where\n@@ -1085,12 +1080,10 @@ def check_alias(self, alias):\n                 \"semicolons, or SQL comments.\"\n             )\n \n-    def add_annotation(self, annotation, alias, is_summary=False, select=True):\n+    def add_annotation(self, annotation, alias, select=True):\n         \"\"\"Add a single annotation expression to the Query.\"\"\"\n         self.check_alias(alias)\n-        annotation = annotation.resolve_expression(\n-            self, allow_joins=True, reuse=None, summarize=is_summary\n-        )\n+        annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None)\n         if select:\n             self.append_annotation_mask([alias])\n         else:\n",
  "test_patch": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1258,11 +1258,11 @@ def test_annotate_over_annotate(self):\n         self.assertEqual(author.sum_age, other_author.sum_age)\n \n     def test_aggregate_over_aggregate(self):\n-        msg = \"Cannot compute Avg('age'): 'age' is an aggregate\"\n+        msg = \"Cannot resolve keyword 'age_agg' into field.\"\n         with self.assertRaisesMessage(FieldError, msg):\n-            Author.objects.annotate(age_alias=F(\"age\"),).aggregate(\n-                age=Sum(F(\"age\")),\n-                avg_age=Avg(F(\"age\")),\n+            Author.objects.aggregate(\n+                age_agg=Sum(F(\"age\")),\n+                avg_age=Avg(F(\"age_agg\")),\n             )\n \n     def test_annotated_aggregate_over_annotated_aggregate(self):\n@@ -2086,6 +2086,14 @@ def test_exists_extra_where_with_aggregate(self):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_aggregation_over_annotation_shared_alias(self):\n+        self.assertEqual(\n+            Publisher.objects.annotate(agg=Count(\"book__authors\"),).aggregate(\n+                agg=Count(\"agg\"),\n+            ),\n+            {\"agg\": 5},\n+        )\n+\n \n class AggregateAnnotationPruningTests(TestCase):\n     @classmethod\n",
  "problem_statement": "Django subtly produces incorrect query when the same keyword appears in both aggregate() and annotate()\nDescription\n\t\nI have the following query:\n Model.objects.annotate(foo=F('column')).aggregate(foo=Sum(F('foo')))\nInitially, I was running this query on SQLite and Django was producing a result (i.e. 0).\nWhen I switched to MySQL this query crushed with the following exception:\n Traceback (most recent call last):\n File \"/dir/.env/lib/python3.8/site-packages/django/db/backends/utils.py\", line 86, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"/dir/.env/lib/python3.8/site-packages/django/db/backends/mysql/base.py\", line 74, in execute\n\treturn self.cursor.execute(query, args)\n File \"/dir/.env/lib/python3.8/site-packages/MySQLdb/cursors.py\", line 209, in execute\n\tres = self._query(query)\n File \"/dir/.env/lib/python3.8/site-packages/MySQLdb/cursors.py\", line 315, in _query\n\tdb.query(q)\n File \"/dir/.env/lib/python3.8/site-packages/MySQLdb/connections.py\", line 239, in query\n\t_mysql.connection.query(self, query)\nMySQLdb._exceptions.OperationalError: (1054, \"Unknown column 'foo' in 'field list'\")\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"mysql.py\", line 15, in <module>\n\tret2 = Model.objects.using('mysql').annotate(foo=F('column')).aggregate(foo=Sum(F('foo')))\n File \"/dir/.env/lib/python3.8/site-packages/django/db/models/query.py\", line 384, in aggregate\n\treturn query.get_aggregation(self.db, kwargs)\n File \"/dir/.env/lib/python3.8/site-packages/django/db/models/sql/query.py\", line 502, in get_aggregation\n\tresult = compiler.execute_sql(SINGLE)\n File \"/dir/.env/lib/python3.8/site-packages/django/db/models/sql/compiler.py\", line 1151, in execute_sql\n\tcursor.execute(sql, params)\n File \"/dir/.env/lib/python3.8/site-packages/django/db/backends/utils.py\", line 100, in execute\n\treturn super().execute(sql, params)\n File \"/dir/.env/lib/python3.8/site-packages/django/db/backends/utils.py\", line 68, in execute\n\treturn self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n File \"/dir/.env/lib/python3.8/site-packages/django/db/backends/utils.py\", line 77, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n File \"/dir/.env/lib/python3.8/site-packages/django/db/backends/utils.py\", line 86, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"/dir/.env/lib/python3.8/site-packages/django/db/utils.py\", line 90, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"/dir/.env/lib/python3.8/site-packages/django/db/backends/utils.py\", line 86, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"/dir/.env/lib/python3.8/site-packages/django/db/backends/mysql/base.py\", line 74, in execute\n\treturn self.cursor.execute(query, args)\n File \"/dir/.env/lib/python3.8/site-packages/MySQLdb/cursors.py\", line 209, in execute\n\tres = self._query(query)\n File \"/dir/.env/lib/python3.8/site-packages/MySQLdb/cursors.py\", line 315, in _query\n\tdb.query(q)\n File \"/dir/.env/lib/python3.8/site-packages/MySQLdb/connections.py\", line 239, in query\n\t_mysql.connection.query(self, query)\ndjango.db.utils.OperationalError: (1054, \"Unknown column 'foo' in 'field list'\")\nAfter examining the SQL query produced by Django, I realized that the query is not correct.\nSpecifically, Django produced the following SQL query:\n SELECT SUM(`foo`) AS `foo` FROM `model`\nInstead of\n SELECT SUM(`foo`) FROM (SELECT `model`.`column` AS `foo` FROM `model`) subquery\nThe issue appears when a keyword in aggregate function is the same with one of the keywords in annotate function. I initially thought that Django does not have any restriction on the keywords used in aggregate (i.e. a keyword in aggregate can be the same with the name of a column from the inspected model).\nIf you think that aggregate should not conflict with the annotate, then Django should produce a warning as running this query in SQLite subtly produces an incorrect result.\n",
  "hints_text": "Reproduced on PostgreSQL, Django 3.0.7. Not sure, should this work or produce an error.\nI would expect this to fail with a ValueError. aggregate() supplies an annotation, and a Query’s annotations are keyed on aliases. Supporting this would take a massive rewrite, it seems to me.\n​PR\nUnassigning myself because the attached patch was too restrictive.\nIs this the same as https://code.djangoproject.com/ticket/31880 (which was fixed by ​https://github.com/django/django/pull/13431 )?\nReplying to Herbert Poul: Is this the same as https://code.djangoproject.com/ticket/31880 (which was fixed by ​https://github.com/django/django/pull/13431 )? No it is not a duplicate, see comment.\nModel.objects.annotate(foo=F('column')).aggregate(foo=Sum(F('foo'))) So in the example above, where both annotated and aggregated kwargs are named foo, the output should actually contain just the last one, right? The first annotated foo column can just be renamed and then removed from the final result (to avoid confusion). [Edit] Note that current resulting query might not contain some significant changes within firstly called annotate method as query.annotations dictionary's value is just overridden with the new value for key foo [Edit2] And then there's an issue about referencing the previous defined foo :( (the one that would have been randomly renamed)",
  "created_at": "2022-11-23T03:02:57Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_aggregate_over_aggregate (aggregation.tests.AggregateTestCase)\", \"test_aggregation_over_annotation_shared_alias (aggregation.tests.AggregateTestCase)\"]",
  "PASS_TO_PASS": "[\"test_non_aggregate_annotation_pruned (aggregation.tests.AggregateAnnotationPruningTests)\", \"test_referenced_aggregate_annotation_kept (aggregation.tests.AggregateAnnotationPruningTests)\", \"test_unreferenced_aggregate_annotation_pruned (aggregation.tests.AggregateAnnotationPruningTests)\", \"test_unused_aliased_aggregate_pruned (aggregation.tests.AggregateAnnotationPruningTests)\", \"test_add_implementation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_alias (aggregation.tests.AggregateTestCase)\", \"test_aggregate_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_in_order_by (aggregation.tests.AggregateTestCase)\", \"test_aggregate_join_transform (aggregation.tests.AggregateTestCase)\", \"test_aggregate_multi_join (aggregation.tests.AggregateTestCase)\", \"test_aggregate_over_complex_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_transform (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_after_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_compound_expression (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_expression (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_group_by (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_integer (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_not_in_aggregate (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_passed_another_aggregate (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_unset (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_unsupported_by_count (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_date_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_date_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_datetime_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_datetime_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_decimal_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_decimal_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_duration_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_duration_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_time_from_database (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_using_time_from_python (aggregation.tests.AggregateTestCase)\", \"test_aggregation_default_zero (aggregation.tests.AggregateTestCase)\", \"test_aggregation_exists_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregation_exists_multivalued_outeref (aggregation.tests.AggregateTestCase)\", \"test_aggregation_expressions (aggregation.tests.AggregateTestCase)\", \"test_aggregation_filter_exists (aggregation.tests.AggregateTestCase)\", \"test_aggregation_nested_subquery_outerref (aggregation.tests.AggregateTestCase)\", \"test_aggregation_order_by_not_selected_annotation_values (aggregation.tests.AggregateTestCase)\", \"Random() is not included in the GROUP BY when used for ordering.\", \"Subquery annotations are excluded from the GROUP BY if they are\", \"test_aggregation_subquery_annotation_exists (aggregation.tests.AggregateTestCase)\", \"Subquery annotations must be included in the GROUP BY if they use\", \"test_aggregation_subquery_annotation_related_field (aggregation.tests.AggregateTestCase)\", \"Subquery annotations and external aliases are excluded from the GROUP\", \"test_aggregation_subquery_annotation_values_collision (aggregation.tests.AggregateTestCase)\", \"test_alias_sql_injection (aggregation.tests.AggregateTestCase)\", \"test_annotate_basic (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer_select_related (aggregation.tests.AggregateTestCase)\", \"test_annotate_m2m (aggregation.tests.AggregateTestCase)\", \"test_annotate_ordering (aggregation.tests.AggregateTestCase)\", \"test_annotate_over_annotate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_list (aggregation.tests.AggregateTestCase)\", \"test_annotated_aggregate_over_annotated_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotation (aggregation.tests.AggregateTestCase)\", \"test_annotation_expressions (aggregation.tests.AggregateTestCase)\", \"test_arguments_must_be_expressions (aggregation.tests.AggregateTestCase)\", \"test_avg_decimal_field (aggregation.tests.AggregateTestCase)\", \"test_avg_duration_field (aggregation.tests.AggregateTestCase)\", \"test_backwards_m2m_annotate (aggregation.tests.AggregateTestCase)\", \"test_coalesced_empty_result_set (aggregation.tests.AggregateTestCase)\", \"test_combine_different_types (aggregation.tests.AggregateTestCase)\", \"test_complex_aggregations_require_kwarg (aggregation.tests.AggregateTestCase)\", \"test_complex_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_count (aggregation.tests.AggregateTestCase)\", \"test_count_distinct_expression (aggregation.tests.AggregateTestCase)\", \"test_count_star (aggregation.tests.AggregateTestCase)\", \".dates() returns a distinct set of dates when applied to a\", \"test_decimal_max_digits_has_no_effect (aggregation.tests.AggregateTestCase)\", \"test_distinct_on_aggregate (aggregation.tests.AggregateTestCase)\", \"test_empty_aggregate (aggregation.tests.AggregateTestCase)\", \"test_empty_result_optimization (aggregation.tests.AggregateTestCase)\", \"test_even_more_aggregate (aggregation.tests.AggregateTestCase)\", \"test_exists_extra_where_with_aggregate (aggregation.tests.AggregateTestCase)\", \"test_exists_none_with_aggregate (aggregation.tests.AggregateTestCase)\", \"test_expression_on_aggregation (aggregation.tests.AggregateTestCase)\", \"test_filter_aggregate (aggregation.tests.AggregateTestCase)\", \"Filtering against an aggregate requires the usage of the HAVING clause.\", \"test_filtering (aggregation.tests.AggregateTestCase)\", \"test_fkey_aggregate (aggregation.tests.AggregateTestCase)\", \"Exists annotations are included in the GROUP BY if they are\", \"Subquery annotations are included in the GROUP BY if they are\", \"An annotation included in values() before an aggregate should be\", \"test_more_aggregation (aggregation.tests.AggregateTestCase)\", \"test_multi_arg_aggregate (aggregation.tests.AggregateTestCase)\", \"test_multiple_aggregates (aggregation.tests.AggregateTestCase)\", \"An annotation not included in values() before an aggregate should be\", \"test_nonaggregate_aggregation_throws (aggregation.tests.AggregateTestCase)\", \"test_nonfield_annotation (aggregation.tests.AggregateTestCase)\", \"test_order_of_precedence (aggregation.tests.AggregateTestCase)\", \"test_related_aggregate (aggregation.tests.AggregateTestCase)\", \"test_reverse_fkey_annotate (aggregation.tests.AggregateTestCase)\", \"test_single_aggregate (aggregation.tests.AggregateTestCase)\", \"Sum on a distinct() QuerySet should aggregate only the distinct items.\", \"test_sum_duration_field (aggregation.tests.AggregateTestCase)\", \"Subqueries do not needlessly contain ORDER BY, SELECT FOR UPDATE or\", \"Aggregation over sliced queryset works correctly.\", \"Doing exclude() on a foreign model after annotate() doesn't crash.\", \"test_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_values_annotation_with_expression (aggregation.tests.AggregateTestCase)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.753548",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}