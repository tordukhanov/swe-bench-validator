{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-10893",
  "base_commit": "22524046cff84c66f128da9e3cdb993082445c75",
  "patch": "diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -6,6 +6,7 @@\n import os\n import shutil\n import sys\n+import types\n import uuid\n import warnings\n from enum import Enum\n@@ -28,6 +29,8 @@\n from typing import Iterator\n from typing import Optional\n from typing import Set\n+from typing import Tuple\n+from typing import Type\n from typing import TypeVar\n from typing import Union\n \n@@ -63,21 +66,33 @@ def get_lock_path(path: _AnyPurePath) -> _AnyPurePath:\n     return path.joinpath(\".lock\")\n \n \n-def on_rm_rf_error(func, path: str, exc, *, start_path: Path) -> bool:\n+def on_rm_rf_error(\n+    func,\n+    path: str,\n+    excinfo: Union[\n+        BaseException,\n+        Tuple[Type[BaseException], BaseException, Optional[types.TracebackType]],\n+    ],\n+    *,\n+    start_path: Path,\n+) -> bool:\n     \"\"\"Handle known read-only errors during rmtree.\n \n     The returned value is used only by our own tests.\n     \"\"\"\n-    exctype, excvalue = exc[:2]\n+    if isinstance(excinfo, BaseException):\n+        exc = excinfo\n+    else:\n+        exc = excinfo[1]\n \n     # Another process removed the file in the middle of the \"rm_rf\" (xdist for example).\n     # More context: https://github.com/pytest-dev/pytest/issues/5974#issuecomment-543799018\n-    if isinstance(excvalue, FileNotFoundError):\n+    if isinstance(exc, FileNotFoundError):\n         return False\n \n-    if not isinstance(excvalue, PermissionError):\n+    if not isinstance(exc, PermissionError):\n         warnings.warn(\n-            PytestWarning(f\"(rm_rf) error removing {path}\\n{exctype}: {excvalue}\")\n+            PytestWarning(f\"(rm_rf) error removing {path}\\n{type(exc)}: {exc}\")\n         )\n         return False\n \n@@ -86,7 +101,7 @@ def on_rm_rf_error(func, path: str, exc, *, start_path: Path) -> bool:\n             warnings.warn(\n                 PytestWarning(\n                     \"(rm_rf) unknown function {} when removing {}:\\n{}: {}\".format(\n-                        func, path, exctype, excvalue\n+                        func, path, type(exc), exc\n                     )\n                 )\n             )\n@@ -149,7 +164,10 @@ def rm_rf(path: Path) -> None:\n     are read-only.\"\"\"\n     path = ensure_extended_length_path(path)\n     onerror = partial(on_rm_rf_error, start_path=path)\n-    shutil.rmtree(str(path), onerror=onerror)\n+    if sys.version_info >= (3, 12):\n+        shutil.rmtree(str(path), onexc=onerror)\n+    else:\n+        shutil.rmtree(str(path), onerror=onerror)\n \n \n def find_prefixed(root: Path, prefix: str) -> Iterator[Path]:\ndiff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -298,6 +298,9 @@ def addSuccess(self, testcase: \"unittest.TestCase\") -> None:\n     def stopTest(self, testcase: \"unittest.TestCase\") -> None:\n         pass\n \n+    def addDuration(self, testcase: \"unittest.TestCase\", elapsed: float) -> None:\n+        pass\n+\n     def runtest(self) -> None:\n         from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n \n",
  "test_patch": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -512,20 +512,20 @@ def test_on_rm_rf_error(self, tmp_path: Path) -> None:\n \n         # unknown exception\n         with pytest.warns(pytest.PytestWarning):\n-            exc_info1 = (None, RuntimeError(), None)\n+            exc_info1 = (RuntimeError, RuntimeError(), None)\n             on_rm_rf_error(os.unlink, str(fn), exc_info1, start_path=tmp_path)\n             assert fn.is_file()\n \n         # we ignore FileNotFoundError\n-        exc_info2 = (None, FileNotFoundError(), None)\n+        exc_info2 = (FileNotFoundError, FileNotFoundError(), None)\n         assert not on_rm_rf_error(None, str(fn), exc_info2, start_path=tmp_path)\n \n         # unknown function\n         with pytest.warns(\n             pytest.PytestWarning,\n-            match=r\"^\\(rm_rf\\) unknown function None when removing .*foo.txt:\\nNone: \",\n+            match=r\"^\\(rm_rf\\) unknown function None when removing .*foo.txt:\\n<class 'PermissionError'>: \",\n         ):\n-            exc_info3 = (None, PermissionError(), None)\n+            exc_info3 = (PermissionError, PermissionError(), None)\n             on_rm_rf_error(None, str(fn), exc_info3, start_path=tmp_path)\n             assert fn.is_file()\n \n@@ -533,12 +533,12 @@ def test_on_rm_rf_error(self, tmp_path: Path) -> None:\n         with warnings.catch_warnings():\n             warnings.simplefilter(\"ignore\")\n             with pytest.warns(None) as warninfo:  # type: ignore[call-overload]\n-                exc_info4 = (None, PermissionError(), None)\n+                exc_info4 = PermissionError()\n                 on_rm_rf_error(os.open, str(fn), exc_info4, start_path=tmp_path)\n                 assert fn.is_file()\n             assert not [x.message for x in warninfo]\n \n-        exc_info5 = (None, PermissionError(), None)\n+        exc_info5 = PermissionError()\n         on_rm_rf_error(os.unlink, str(fn), exc_info5, start_path=tmp_path)\n         assert not fn.is_file()\n \n",
  "problem_statement": "Use of `rmtree` causes `DeprecationWarning` on Python 3.12 alpha\nThe current Python 3.12 alpha has made a change to `rmtree` https://github.com/python/cpython/issues/102828, deprecating the `onerror` parameter and replacing it with an `onexc` parameter. Something in Pytest's temp path fixtures calls an `rm_rf` function which calls `rmtree` with the `onerror` parameter. https://github.com/pytest-dev/pytest/blob/6dcd652d4a55bacda01a15017e155caa816e15a5/src/_pytest/pathlib.py#L147 When warnings are treated as errors, this makes pytest fail any test using temp paths.\nAdd `addDuration` to `TestCaseFunction`\ncpython 3.12  (alpha) has added an `addDuration` API to test results (python/cpython#12271).\r\n\r\nThis would not be an issue, except it was designed to trigger a warning if the test result doesn't have such a method (hence e.g. python/cpython#103309). This means when using pytest as runner for unittest tests *and* running `-We` an error is triggered as pytest's test result (which seems to be `TestCaseFunction`) does not support this protocol.\r\n\r\nNow obviously this should be non-blocking, as hopefully nobody is running CI which blocks on testing 3.12, but there you go, I figure an early forewarning can't hurt.\n",
  "hints_text": "\nThanks @masklinn, appreciate the report.",
  "created_at": "2023-04-11T10:10:51Z",
  "version": "7.4",
  "FAIL_TO_PASS": "[\"testing/test_tmpdir.py::TestRmRf::test_on_rm_rf_error\"]",
  "PASS_TO_PASS": "[\"testing/test_tmpdir.py::TestTmpPathHandler::test_mktemp\", \"testing/test_tmpdir.py::TestTmpPathHandler::test_tmppath_relative_basetemp_absolute\", \"testing/test_tmpdir.py::test_get_user_uid_not_found\", \"testing/test_tmpdir.py::TestNumberedDir::test_make\", \"testing/test_tmpdir.py::TestNumberedDir::test_cleanup_lock_create\", \"testing/test_tmpdir.py::TestNumberedDir::test_lock_register_cleanup_removal\", \"testing/test_tmpdir.py::TestNumberedDir::test_cleanup_keep\", \"testing/test_tmpdir.py::TestNumberedDir::test_cleanup_keep_0\", \"testing/test_tmpdir.py::TestNumberedDir::test_cleanup_locked\", \"testing/test_tmpdir.py::TestNumberedDir::test_cleanup_ignores_symlink\", \"testing/test_tmpdir.py::TestNumberedDir::test_removal_accepts_lock\", \"testing/test_tmpdir.py::TestRmRf::test_rm_rf\", \"testing/test_tmpdir.py::TestRmRf::test_rm_rf_with_read_only_file\", \"testing/test_tmpdir.py::TestRmRf::test_rm_rf_with_read_only_directory\", \"testing/test_tmpdir.py::test_tmp_path_factory_handles_invalid_dir_characters\", \"testing/test_tmpdir.py::test_tmp_path_factory_create_directory_with_safe_permissions\", \"testing/test_tmpdir.py::test_tmp_path_factory_fixes_up_world_readable_permissions\", \"testing/test_tmpdir.py::test_tmp_path_fixture\", \"testing/test_tmpdir.py::TestConfigTmpPath::test_getbasetemp_custom_removes_old\", \"testing/test_tmpdir.py::TestConfigTmpPath::test_policy_failed_removes_only_passed_dir\", \"testing/test_tmpdir.py::TestConfigTmpPath::test_policy_failed_removes_basedir_when_all_passed\", \"testing/test_tmpdir.py::TestConfigTmpPath::test_policy_failed_removes_dir_when_skipped_from_fixture\", \"testing/test_tmpdir.py::TestConfigTmpPath::test_policy_all_keeps_dir_when_skipped_from_fixture\", \"testing/test_tmpdir.py::test_mktemp[mypath-True]\", \"testing/test_tmpdir.py::test_mktemp[/mypath1-False]\", \"testing/test_tmpdir.py::test_mktemp[./mypath1-True]\", \"testing/test_tmpdir.py::test_mktemp[../mypath3-False]\", \"testing/test_tmpdir.py::test_mktemp[../../mypath4-False]\", \"testing/test_tmpdir.py::test_mktemp[mypath5/..-False]\", \"testing/test_tmpdir.py::test_mktemp[mypath6/../mypath6-True]\", \"testing/test_tmpdir.py::test_mktemp[mypath7/../mypath7/..-False]\", \"testing/test_tmpdir.py::test_tmp_path_always_is_realpath\", \"testing/test_tmpdir.py::test_tmp_path_too_long_on_parametrization\", \"testing/test_tmpdir.py::test_tmp_path_factory\", \"testing/test_tmpdir.py::test_tmp_path_fallback_tox_env\", \"testing/test_tmpdir.py::test_tmp_path_fallback_uid_not_found\", \"testing/test_tmpdir.py::test_basetemp_with_read_only_files\"]",
  "environment_setup_commit": "797b924fc44189d0b9c2ad905410f0bd89461ab7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.923190",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}