{
  "repo": "django/django",
  "instance_id": "django__django-12396",
  "base_commit": "9cc743d0c82e019306d80eb8a83f86f8c6244610",
  "patch": "diff --git a/django/core/checks/database.py b/django/core/checks/database.py\n--- a/django/core/checks/database.py\n+++ b/django/core/checks/database.py\n@@ -4,8 +4,11 @@\n \n \n @register(Tags.database)\n-def check_database_backends(*args, **kwargs):\n+def check_database_backends(databases=None, **kwargs):\n+    if databases is None:\n+        return []\n     issues = []\n-    for conn in connections.all():\n+    for alias in databases:\n+        conn = connections[alias]\n         issues.extend(conn.validation.check(**kwargs))\n     return issues\ndiff --git a/django/core/checks/registry.py b/django/core/checks/registry.py\n--- a/django/core/checks/registry.py\n+++ b/django/core/checks/registry.py\n@@ -54,7 +54,7 @@ def inner(check):\n                 tags += (check,)\n             return inner\n \n-    def run_checks(self, app_configs=None, tags=None, include_deployment_checks=False):\n+    def run_checks(self, app_configs=None, tags=None, include_deployment_checks=False, databases=None):\n         \"\"\"\n         Run all registered checks and return list of Errors and Warnings.\n         \"\"\"\n@@ -63,13 +63,9 @@ def run_checks(self, app_configs=None, tags=None, include_deployment_checks=Fals\n \n         if tags is not None:\n             checks = [check for check in checks if not set(check.tags).isdisjoint(tags)]\n-        else:\n-            # By default, 'database'-tagged checks are not run as they do more\n-            # than mere static code analysis.\n-            checks = [check for check in checks if Tags.database not in check.tags]\n \n         for check in checks:\n-            new_errors = check(app_configs=app_configs)\n+            new_errors = check(app_configs=app_configs, databases=databases)\n             assert is_iterable(new_errors), (\n                 \"The function %r did not return a list. All functions registered \"\n                 \"with the checks registry must return a list.\" % check)\ndiff --git a/django/core/management/base.py b/django/core/management/base.py\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -378,21 +378,20 @@ def execute(self, *args, **options):\n             self.stdout.write(output)\n         return output\n \n-    def _run_checks(self, **kwargs):\n-        return checks.run_checks(**kwargs)\n-\n     def check(self, app_configs=None, tags=None, display_num_errors=False,\n-              include_deployment_checks=False, fail_level=checks.ERROR):\n+              include_deployment_checks=False, fail_level=checks.ERROR,\n+              databases=None):\n         \"\"\"\n         Use the system check framework to validate entire Django project.\n         Raise CommandError for any serious message (error or critical errors).\n         If there are only light messages (like warnings), print them to stderr\n         and don't raise an exception.\n         \"\"\"\n-        all_issues = self._run_checks(\n+        all_issues = checks.run_checks(\n             app_configs=app_configs,\n             tags=tags,\n             include_deployment_checks=include_deployment_checks,\n+            databases=databases,\n         )\n \n         header, body, footer = \"\", \"\", \"\"\ndiff --git a/django/core/management/commands/check.py b/django/core/management/commands/check.py\n--- a/django/core/management/commands/check.py\n+++ b/django/core/management/commands/check.py\n@@ -32,6 +32,10 @@ def add_arguments(self, parser):\n                 'non-zero status. Default is ERROR.'\n             ),\n         )\n+        parser.add_argument(\n+            '--database', action='append', dest='databases',\n+            help='Run database related checks against these aliases.',\n+        )\n \n     def handle(self, *app_labels, **options):\n         include_deployment_checks = options['deploy']\n@@ -62,4 +66,5 @@ def handle(self, *app_labels, **options):\n             display_num_errors=True,\n             include_deployment_checks=include_deployment_checks,\n             fail_level=getattr(checks, options['fail_level']),\n+            databases=options['databases'],\n         )\ndiff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py\n--- a/django/core/management/commands/migrate.py\n+++ b/django/core/management/commands/migrate.py\n@@ -2,7 +2,6 @@\n from importlib import import_module\n \n from django.apps import apps\n-from django.core.checks import Tags, run_checks\n from django.core.management.base import (\n     BaseCommand, CommandError, no_translations,\n )\n@@ -20,8 +19,13 @@\n \n class Command(BaseCommand):\n     help = \"Updates database schema. Manages both apps with migrations and those without.\"\n+    requires_system_checks = False\n \n     def add_arguments(self, parser):\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n         parser.add_argument(\n             'app_label', nargs='?',\n             help='App label of an application to synchronize the state.',\n@@ -59,13 +63,11 @@ def add_arguments(self, parser):\n             help='Creates tables for apps without migrations.',\n         )\n \n-    def _run_checks(self, **kwargs):\n-        issues = run_checks(tags=[Tags.database])\n-        issues.extend(super()._run_checks(**kwargs))\n-        return issues\n-\n     @no_translations\n     def handle(self, *args, **options):\n+        database = options['database']\n+        if not options['skip_checks']:\n+            self.check(databases=[database])\n \n         self.verbosity = options['verbosity']\n         self.interactive = options['interactive']\n@@ -77,8 +79,7 @@ def handle(self, *args, **options):\n                 import_module('.management', app_config.name)\n \n         # Get the database we're operating from\n-        db = options['database']\n-        connection = connections[db]\n+        connection = connections[database]\n \n         # Hook for backends needing any database preparation\n         connection.prepare_database()\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1255,6 +1255,7 @@ def clean_fields(self, exclude=None):\n     def check(cls, **kwargs):\n         errors = [*cls._check_swappable(), *cls._check_model(), *cls._check_managers(**kwargs)]\n         if not cls._meta.swapped:\n+            databases = kwargs.get('databases') or []\n             errors += [\n                 *cls._check_fields(**kwargs),\n                 *cls._check_m2m_through_same_relationship(),\n@@ -1277,7 +1278,7 @@ def check(cls, **kwargs):\n                 *cls._check_unique_together(),\n                 *cls._check_indexes(),\n                 *cls._check_ordering(),\n-                *cls._check_constraints(),\n+                *cls._check_constraints(databases),\n             ]\n \n         return errors\n@@ -1836,9 +1837,9 @@ def _check_long_column_names(cls):\n         return errors\n \n     @classmethod\n-    def _check_constraints(cls):\n+    def _check_constraints(cls, databases):\n         errors = []\n-        for db in settings.DATABASES:\n+        for db in databases:\n             if not router.allow_migrate_model(db, cls):\n                 continue\n             connection = connections[db]\n",
  "test_patch": "diff --git a/django/test/runner.py b/django/test/runner.py\n--- a/django/test/runner.py\n+++ b/django/test/runner.py\n@@ -630,10 +630,10 @@ def get_test_runner_kwargs(self):\n             'buffer': self.buffer,\n         }\n \n-    def run_checks(self):\n+    def run_checks(self, databases):\n         # Checks are run after database creation since some checks require\n         # database access.\n-        call_command('check', verbosity=self.verbosity)\n+        call_command('check', verbosity=self.verbosity, databases=databases)\n \n     def run_suite(self, suite, **kwargs):\n         kwargs = self.get_test_runner_kwargs()\n@@ -695,7 +695,7 @@ def run_tests(self, test_labels, extra_tests=None, **kwargs):\n         old_config = self.setup_databases(aliases=databases)\n         run_failed = False\n         try:\n-            self.run_checks()\n+            self.run_checks(databases)\n             result = self.run_suite(suite)\n         except Exception:\n             run_failed = True\ndiff --git a/tests/check_framework/test_database.py b/tests/check_framework/test_database.py\n--- a/tests/check_framework/test_database.py\n+++ b/tests/check_framework/test_database.py\n@@ -1,8 +1,7 @@\n import unittest\n from unittest import mock\n \n-from django.core.checks import Tags, run_checks\n-from django.core.checks.registry import CheckRegistry\n+from django.core.checks.database import check_database_backends\n from django.db import connection\n from django.test import TestCase\n \n@@ -10,30 +9,12 @@\n class DatabaseCheckTests(TestCase):\n     databases = {'default', 'other'}\n \n-    @property\n-    def func(self):\n-        from django.core.checks.database import check_database_backends\n-        return check_database_backends\n-\n-    def test_database_checks_not_run_by_default(self):\n-        \"\"\"\n-        `database` checks are only run when their tag is specified.\n-        \"\"\"\n-        def f1(**kwargs):\n-            return [5]\n-\n-        registry = CheckRegistry()\n-        registry.register(Tags.database)(f1)\n-        errors = registry.run_checks()\n-        self.assertEqual(errors, [])\n-\n-        errors2 = registry.run_checks(tags=[Tags.database])\n-        self.assertEqual(errors2, [5])\n-\n-    def test_database_checks_called(self):\n-        with mock.patch('django.db.backends.base.validation.BaseDatabaseValidation.check') as mocked_check:\n-            run_checks(tags=[Tags.database])\n-            self.assertTrue(mocked_check.called)\n+    @mock.patch('django.db.backends.base.validation.BaseDatabaseValidation.check')\n+    def test_database_checks_called(self, mocked_check):\n+        check_database_backends()\n+        self.assertFalse(mocked_check.called)\n+        check_database_backends(databases=self.databases)\n+        self.assertTrue(mocked_check.called)\n \n     @unittest.skipUnless(connection.vendor == 'mysql', 'Test only for MySQL')\n     def test_mysql_strict_mode(self):\n@@ -47,7 +28,7 @@ def test_mysql_strict_mode(self):\n                 'django.db.backends.utils.CursorWrapper.fetchone', create=True,\n                 return_value=(response,)\n             ):\n-                self.assertEqual(self.func(None), [])\n+                self.assertEqual(check_database_backends(databases=self.databases), [])\n \n         bad_sql_modes = ['', 'WHATEVER']\n         for response in bad_sql_modes:\n@@ -56,6 +37,6 @@ def test_mysql_strict_mode(self):\n                 return_value=(response,)\n             ):\n                 # One warning for each database alias\n-                result = self.func(None)\n+                result = check_database_backends(databases=self.databases)\n                 self.assertEqual(len(result), 2)\n                 self.assertEqual([r.id for r in result], ['mysql.W002', 'mysql.W002'])\ndiff --git a/tests/check_framework/tests.py b/tests/check_framework/tests.py\n--- a/tests/check_framework/tests.py\n+++ b/tests/check_framework/tests.py\n@@ -160,22 +160,22 @@ def tearDown(self):\n     @override_system_checks([simple_system_check, tagged_system_check])\n     def test_simple_call(self):\n         call_command('check')\n-        self.assertEqual(simple_system_check.kwargs, {'app_configs': None})\n-        self.assertEqual(tagged_system_check.kwargs, {'app_configs': None})\n+        self.assertEqual(simple_system_check.kwargs, {'app_configs': None, 'databases': None})\n+        self.assertEqual(tagged_system_check.kwargs, {'app_configs': None, 'databases': None})\n \n     @override_system_checks([simple_system_check, tagged_system_check])\n     def test_given_app(self):\n         call_command('check', 'auth', 'admin')\n         auth_config = apps.get_app_config('auth')\n         admin_config = apps.get_app_config('admin')\n-        self.assertEqual(simple_system_check.kwargs, {'app_configs': [auth_config, admin_config]})\n-        self.assertEqual(tagged_system_check.kwargs, {'app_configs': [auth_config, admin_config]})\n+        self.assertEqual(simple_system_check.kwargs, {'app_configs': [auth_config, admin_config], 'databases': None})\n+        self.assertEqual(tagged_system_check.kwargs, {'app_configs': [auth_config, admin_config], 'databases': None})\n \n     @override_system_checks([simple_system_check, tagged_system_check])\n     def test_given_tag(self):\n         call_command('check', tags=['simpletag'])\n         self.assertIsNone(simple_system_check.kwargs)\n-        self.assertEqual(tagged_system_check.kwargs, {'app_configs': None})\n+        self.assertEqual(tagged_system_check.kwargs, {'app_configs': None, 'databases': None})\n \n     @override_system_checks([simple_system_check, tagged_system_check])\n     def test_invalid_tag(self):\ndiff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -6,7 +6,7 @@\n from django.db import connection, connections, models\n from django.db.models.functions import Lower\n from django.db.models.signals import post_init\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TestCase\n from django.test.utils import isolate_apps, override_settings, register_lookup\n \n \n@@ -1212,7 +1212,7 @@ def dummy_function(*args, **kwargs):\n \n \n @isolate_apps('invalid_models_tests')\n-class ConstraintsTests(SimpleTestCase):\n+class ConstraintsTests(TestCase):\n     def test_check_constraints(self):\n         class Model(models.Model):\n             age = models.IntegerField()\n@@ -1220,7 +1220,7 @@ class Model(models.Model):\n             class Meta:\n                 constraints = [models.CheckConstraint(check=models.Q(age__gte=18), name='is_adult')]\n \n-        errors = Model.check()\n+        errors = Model.check(databases=self.databases)\n         warn = Warning(\n             '%s does not support check constraints.' % connection.display_name,\n             hint=(\n@@ -1230,7 +1230,7 @@ class Meta:\n             obj=Model,\n             id='models.W027',\n         )\n-        expected = [] if connection.features.supports_table_check_constraints else [warn, warn]\n+        expected = [] if connection.features.supports_table_check_constraints else [warn]\n         self.assertCountEqual(errors, expected)\n \n     def test_check_constraints_required_db_features(self):\n",
  "problem_statement": "Omits test_ prefix from database name when running subset of tests\nDescription\n\t \n\t\t(last modified by Matthijs Kooijman)\n\t \nWhile debugging some test framework issues wrt mysql, I noticed a problem where the test runner would try to access the test database without prefixing test_, leading to an access denied error (because my permissions are set up tightly).\nWhat I suspect happens is that this subset of tests only uses the default database, so only that one is set up by DisoveryRunner.setup_databases. This is confirmed by using a debugger, which shows ​databases only contains 'default'. Then, it runs the check management command, which looks at settings.DATABASES, which still contains the settings for default and other. This in turn causes a connection to the other database to be made, but since the name of that database is not modified by ​create_test_db, that still refers to the original name, and the connection fails.\nTo reproduce, I have a clean master (c33eb6dcd0c211f8f02b2976fe3b3463f0a54498), with the following tests/test_mysql.py:\nDATABASES = {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t'default': {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t'ENGINE': 'django.db.backends.mysql',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t'HOST': 'localhost',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t'USER': 'test_django',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t'PASSWORD': 'XXX',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t# Django prepends test_ to this name...\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t'NAME': 'django_main',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t},\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t'other': {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t'ENGINE': 'django.db.backends.mysql',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t'HOST': 'localhost',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t'USER': 'test_django',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t'PASSWORD': 'XXX',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t# Django prepends test_ to this name...\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t'NAME': 'django_other',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nSECRET_KEY = \"django_tests_secret_key\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n# Use a fast hasher to speed up tests.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \nPASSWORD_HASHERS = [\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t'django.contrib.auth.hashers.MD5PasswordHasher',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n]\nThen inside tests, I run:\n ./runtests.py --settings test_mysql --parallel 1 timezones \nI think the --parallel 1 is not strictly needed, but might make things easier to debug. With the above, I get:\nCreating test database for alias 'default'...\nDestroying test database for alias 'default'...\nTesting against Django installed in '/home/matthijs/docs/src/upstream/django/django'\nTraceback (most recent call last):\n File \"/home/matthijs/docs/src/upstream/django/django/db/backends/base/base.py\", line 220, in ensure_connection\n\tself.connect()\n File \"/home/matthijs/docs/src/upstream/django/django/utils/asyncio.py\", line 24, in inner\n\treturn func(*args, **kwargs)\n File \"/home/matthijs/docs/src/upstream/django/django/db/backends/base/base.py\", line 197, in connect\n\tself.connection = self.get_new_connection(conn_params)\n File \"/home/matthijs/docs/src/upstream/django/django/utils/asyncio.py\", line 24, in inner\n\treturn func(*args, **kwargs)\n File \"/home/matthijs/docs/src/upstream/django/django/db/backends/mysql/base.py\", line 233, in get_new_connection\n\treturn Database.connect(**conn_params)\n File \"/home/matthijs/docs/src/upstream/django/venv/lib/python3.7/site-packages/MySQLdb/__init__.py\", line 84, in Connect\n\treturn Connection(*args, **kwargs)\n File \"/home/matthijs/docs/src/upstream/django/venv/lib/python3.7/site-packages/MySQLdb/connections.py\", line 179, in __init__\n\tsuper(Connection, self).__init__(*args, **kwargs2)\nMySQLdb._exceptions.OperationalError: (1044, \"Access denied for user 'test_django'@'localhost' to database 'django_other'\")\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"./runtests.py\", line 566, in <module>\n\toptions.start_at, options.start_after, options.pdb,\n File \"./runtests.py\", line 308, in django_tests\n\textra_tests=extra_tests,\n File \"/home/matthijs/docs/src/upstream/django/django/test/runner.py\", line 687, in run_tests\n\tself.run_checks()\n File \"/home/matthijs/docs/src/upstream/django/django/test/runner.py\", line 625, in run_checks\n\tcall_command('check', verbosity=self.verbosity)\n File \"/home/matthijs/docs/src/upstream/django/django/core/management/__init__.py\", line 168, in call_command\n\treturn command.execute(*args, **defaults)\n File \"/home/matthijs/docs/src/upstream/django/django/core/management/base.py\", line 369, in execute\n\toutput = self.handle(*args, **options)\n File \"/home/matthijs/docs/src/upstream/django/django/core/management/commands/check.py\", line 64, in handle\n\tfail_level=getattr(checks, options['fail_level']),\n File \"/home/matthijs/docs/src/upstream/django/django/core/management/base.py\", line 395, in check\n\tinclude_deployment_checks=include_deployment_checks,\n File \"/home/matthijs/docs/src/upstream/django/django/core/management/base.py\", line 382, in _run_checks\n\treturn checks.run_checks(**kwargs)\n File \"/home/matthijs/docs/src/upstream/django/django/core/checks/registry.py\", line 72, in run_checks\n\tnew_errors = check(app_configs=app_configs)\n File \"/home/matthijs/docs/src/upstream/django/django/core/checks/model_checks.py\", line 34, in check_all_models\n\terrors.extend(model.check(**kwargs))\n File \"/home/matthijs/docs/src/upstream/django/django/db/models/base.py\", line 1276, in check\n\t*cls._check_constraints(),\n File \"/home/matthijs/docs/src/upstream/django/django/db/models/base.py\", line 1842, in _check_constraints\n\tconnection.features.supports_table_check_constraints or\n File \"/home/matthijs/docs/src/upstream/django/django/utils/functional.py\", line 48, in __get__\n\tres = instance.__dict__[self.name] = self.func(instance)\n File \"/home/matthijs/docs/src/upstream/django/django/db/backends/mysql/features.py\", line 97, in supports_column_check_constraints\n\tif self.connection.mysql_is_mariadb:\n File \"/home/matthijs/docs/src/upstream/django/django/utils/functional.py\", line 48, in __get__\n\tres = instance.__dict__[self.name] = self.func(instance)\n File \"/home/matthijs/docs/src/upstream/django/django/db/backends/mysql/base.py\", line 364, in mysql_is_mariadb\n\treturn 'mariadb' in self.mysql_server_info.lower()\n File \"/home/matthijs/docs/src/upstream/django/django/utils/functional.py\", line 48, in __get__\n\tres = instance.__dict__[self.name] = self.func(instance)\n File \"/home/matthijs/docs/src/upstream/django/django/db/backends/mysql/base.py\", line 351, in mysql_server_info\n\twith self.temporary_connection() as cursor:\n File \"/usr/lib/python3.7/contextlib.py\", line 112, in __enter__\n\treturn next(self.gen)\n File \"/home/matthijs/docs/src/upstream/django/django/db/backends/base/base.py\", line 604, in temporary_connection\n\twith self.cursor() as cursor:\n File \"/home/matthijs/docs/src/upstream/django/django/utils/asyncio.py\", line 24, in inner\n\treturn func(*args, **kwargs)\n File \"/home/matthijs/docs/src/upstream/django/django/db/backends/base/base.py\", line 260, in cursor\n\treturn self._cursor()\n File \"/home/matthijs/docs/src/upstream/django/django/db/backends/base/base.py\", line 236, in _cursor\n\tself.ensure_connection()\n File \"/home/matthijs/docs/src/upstream/django/django/utils/asyncio.py\", line 24, in inner\n\treturn func(*args, **kwargs)\n File \"/home/matthijs/docs/src/upstream/django/django/db/backends/base/base.py\", line 220, in ensure_connection\n\tself.connect()\n File \"/home/matthijs/docs/src/upstream/django/django/db/utils.py\", line 90, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"/home/matthijs/docs/src/upstream/django/django/db/backends/base/base.py\", line 220, in ensure_connection\n\tself.connect()\n File \"/home/matthijs/docs/src/upstream/django/django/utils/asyncio.py\", line 24, in inner\n\treturn func(*args, **kwargs)\n File \"/home/matthijs/docs/src/upstream/django/django/db/backends/base/base.py\", line 197, in connect\n\tself.connection = self.get_new_connection(conn_params)\n File \"/home/matthijs/docs/src/upstream/django/django/utils/asyncio.py\", line 24, in inner\n\treturn func(*args, **kwargs)\n File \"/home/matthijs/docs/src/upstream/django/django/db/backends/mysql/base.py\", line 233, in get_new_connection\n\treturn Database.connect(**conn_params)\n File \"/home/matthijs/docs/src/upstream/django/venv/lib/python3.7/site-packages/MySQLdb/__init__.py\", line 84, in Connect\n\treturn Connection(*args, **kwargs)\n File \"/home/matthijs/docs/src/upstream/django/venv/lib/python3.7/site-packages/MySQLdb/connections.py\", line 179, in __init__\n\tsuper(Connection, self).__init__(*args, **kwargs2)\ndjango.db.utils.OperationalError: (1044, \"Access denied for user 'test_django'@'localhost' to database 'django_other'\")\nI am not quite familiar with this code, and this is already a distraction from a distraction from a distraction from the actual project I was working on, so I'm going to leave this here for others to fix :-)\n",
  "hints_text": "OK, wowser, yes. Good one. Running all the tests we create both DBs: $ ./runtests.py --parallel=1 Testing against Django installed in '.../django' Creating test database for alias 'default'... Creating test database for alias 'other'... System check identified no issues (14 silenced). vs $ ./runtests.py --parallel=1 timezones Testing against Django installed in '.../django' Creating test database for alias 'default'... System check identified no issues (0 silenced). How best we should disable the other alias in this circumstance is a good question, but presumably this should work. Thanks for the report.\nThis is likely related to #28478. I guess DiscoverRunner should make sure only checks against the tested databases are run when it calls run_checks ​https://github.com/django/django/blob/d8e233352877c37c469687287e7761e05bdae94e/django/test/runner.py#L633-L636\nSimon, you set \"has patch\", but I cannot see any patch. Was that unintentional? As for the fix, I wonder if maybe the connections object should just be trimmed to only contain the used databases, so all other code that iterates the databases will only see the ones actually in use? I believe there is code in multiple places now that has special casing for when a subset of databases is in use to not use all of the connections but only some, that could maybe also be simplified. On the other hand, this seems like an obvious implementation for using a subset of databases, so I guess there is a reason this implementation is not used right now?\nMatthijs, you can see links to Github PRs in the ticket description at the top. ​https://github.com/django/django/pull/12201 As for the fix, I wonder if maybe the connections object should just be trimmed to only contain the used databases, so all other code that iterates the databases will only see the ones actually in use You'd have to give it a shot to make sure but I'm afraid it might break backward compatibility in subtle ways. To me this issue is really similar to the ones discovered during #26351 where checks that require database accesses should be special cased.\nMatthijs, you can see links to Github PRs in the ticket description at the top. Ah, I see. I quickly looked through those, but thought that if the PR link was added as a property there, it should also show up in the activity log below. But I suspect this PR link is added automatically based on the PR description or something like that, so it does not show up in the log. Oh well, found it now, thanks! I had a quick look at the PR, but I do not think I have enough experience with this code to add anything useful there (and it looks like others are chipping in just fine). In any case, thanks for picking this up :-)\nMarking as \"needs improvement\" due to ​Simon's comment.\n​https://github.com/django/django/pull/12396",
  "created_at": "2020-01-31T06:41:25Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_registered_check_did_run (check_framework.tests.ChecksRunDuringTests)\", \"test_register_and_run_checks (check_framework.tests.SystemCheckFrameworkTests)\", \"test_model_check_method_not_shadowed (check_framework.tests.CheckFrameworkReservedNamesTests)\", \"test_equal_to_same_constructed_check (check_framework.tests.MessageTests)\", \"test_equal_to_self (check_framework.tests.MessageTests)\", \"test_not_equal_to_different_constructed_check (check_framework.tests.MessageTests)\", \"test_not_equal_to_non_check (check_framework.tests.MessageTests)\", \"test_printing (check_framework.tests.MessageTests)\", \"test_printing_field_error (check_framework.tests.MessageTests)\", \"test_printing_manager_error (check_framework.tests.MessageTests)\", \"test_printing_model_error (check_framework.tests.MessageTests)\", \"test_printing_no_hint (check_framework.tests.MessageTests)\", \"test_printing_no_object (check_framework.tests.MessageTests)\", \"test_printing_with_given_id (check_framework.tests.MessageTests)\", \"test_database_checks_called (check_framework.test_database.DatabaseCheckTests)\", \"test_silenced_error (check_framework.tests.SilencingCheckTests)\", \"test_silenced_warning (check_framework.tests.SilencingCheckTests)\", \"test_check_constraints (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraints_required_db_features (invalid_models_tests.test_models.ConstraintsTests)\", \"test_db_column_clash (invalid_models_tests.test_models.FieldNamesTests)\", \"test_ending_with_underscore (invalid_models_tests.test_models.FieldNamesTests)\", \"test_including_separator (invalid_models_tests.test_models.FieldNamesTests)\", \"test_pk (invalid_models_tests.test_models.FieldNamesTests)\", \"test_fail_level (check_framework.tests.CheckCommandTests)\", \"test_given_app (check_framework.tests.CheckCommandTests)\", \"test_given_tag (check_framework.tests.CheckCommandTests)\", \"test_invalid_tag (check_framework.tests.CheckCommandTests)\", \"test_list_deployment_check_included (check_framework.tests.CheckCommandTests)\", \"test_list_deployment_check_omitted (check_framework.tests.CheckCommandTests)\", \"test_list_tags (check_framework.tests.CheckCommandTests)\", \"test_list_tags_empty (check_framework.tests.CheckCommandTests)\", \"test_simple_call (check_framework.tests.CheckCommandTests)\", \"test_tags_deployment_check_included (check_framework.tests.CheckCommandTests)\", \"test_tags_deployment_check_omitted (check_framework.tests.CheckCommandTests)\", \"test_list_containing_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_non_list (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_pointing_to_fk (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_pointing_to_m2m (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_valid_model (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_max_name_length (invalid_models_tests.test_models.IndexesTests)\", \"test_name_constraints (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_fk (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexesTests)\", \"test_list_containing_non_iterable (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_non_iterable (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_non_list (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_fk (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_field_name_clash_with_child_accessor (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_id_clash (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_inheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_multigeneration_inheritance (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_multiinheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_just_order_with_respect_to_no_errors (invalid_models_tests.test_models.OtherModelTests)\", \"test_just_ordering_no_errors (invalid_models_tests.test_models.OtherModelTests)\", \"test_lazy_reference_checks (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_autogenerated_table_name_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_field_table_name_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_table_name_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_to_concrete_and_proxy_allowed (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_unmanaged_shadow_models_not_checked (invalid_models_tests.test_models.OtherModelTests)\", \"test_name_beginning_with_underscore (invalid_models_tests.test_models.OtherModelTests)\", \"test_name_contains_double_underscores (invalid_models_tests.test_models.OtherModelTests)\", \"test_name_ending_with_underscore (invalid_models_tests.test_models.OtherModelTests)\", \"test_non_valid (invalid_models_tests.test_models.OtherModelTests)\", \"test_onetoone_with_explicit_parent_link_parent_model (invalid_models_tests.test_models.OtherModelTests)\", \"test_onetoone_with_parent_model (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_allows_registered_lookups (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_non_iterable (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_multiple_times_to_model_fields (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_foreignkey_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_foreignkey_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_related_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_related_model_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_non_related_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_related_model_pk (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_two_related_model_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_with_order_with_respect_to (invalid_models_tests.test_models.OtherModelTests)\", \"test_property_and_related_field_accessor_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_single_primary_key (invalid_models_tests.test_models.OtherModelTests)\", \"test_swappable_missing_app (invalid_models_tests.test_models.OtherModelTests)\", \"test_swappable_missing_app_name (invalid_models_tests.test_models.OtherModelTests)\", \"test_two_m2m_through_same_model_with_different_through_fields (invalid_models_tests.test_models.OtherModelTests)\", \"test_two_m2m_through_same_relationship (invalid_models_tests.test_models.OtherModelTests)\", \"test_unique_primary_key (invalid_models_tests.test_models.OtherModelTests)\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.623799",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}