{
  "repo": "django/django",
  "instance_id": "django__django-13814",
  "base_commit": "429d089d0a8fbd400e0c010708df4f0d16218970",
  "patch": "diff --git a/django/template/backends/django.py b/django/template/backends/django.py\n--- a/django/template/backends/django.py\n+++ b/django/template/backends/django.py\n@@ -123,7 +123,7 @@ def get_package_libraries(pkg):\n             raise InvalidTemplateLibrary(\n                 \"Invalid template library specified. ImportError raised when \"\n                 \"trying to load '%s': %s\" % (entry[1], e)\n-            )\n+            ) from e\n \n         if hasattr(module, 'register'):\n             yield entry[1]\n",
  "test_patch": "diff --git a/tests/template_backends/test_django.py b/tests/template_backends/test_django.py\n--- a/tests/template_backends/test_django.py\n+++ b/tests/template_backends/test_django.py\n@@ -104,13 +104,14 @@ def test_templatetag_discovery_import_error(self):\n             InvalidTemplateLibrary,\n             \"ImportError raised when trying to load \"\n             \"'template_backends.apps.importerror.templatetags.broken_tags'\"\n-        ):\n+        ) as cm:\n             DjangoTemplates({\n                 'DIRS': [],\n                 'APP_DIRS': False,\n                 'NAME': 'django',\n                 'OPTIONS': {},\n             })\n+        self.assertIsInstance(cm.exception.__cause__, ImportError)\n \n     def test_builtins_discovery(self):\n         engine = DjangoTemplates({\n",
  "problem_statement": "Raising InvalidTemplateLibrary completely masks out real exception in get_package_libraries\nDescription\n\t\nSummary\nIn django/template/backends/django.py, function get_package_libraries on line 119 completely masks out the ImportError and raises InvalidTemplateLibrary. This makes it incredibly difficult to debug application issues.\nProbably better not to handle the exception in the first place since it only raises another type and inner exception looses the stack trace.\nTo reproduce\nCreate two apps e.g. form_utils and reports. \nWrite a template tag in reports e.g. reports.templatetags.report_tags. (reports/templatetags/report_tags.py\nAdd a simple module in form_utils e.g. widgets.py. \nIn widgets.py, import a none-existent module e.g. from django.forms.util import flatatt (was removed in > django 1.4)\nimport form_utils.widget in report_tags e.g. from form_utils.widgets import CalendarWidget\nA quick way to reproduce the error would be to register some models with admin and navigate to /admin\nThe following error will be raised in get_package_libraries:\nInvalidTemplateLibrary at /admin/login/\nInvalid template library specified. ImportError raised when trying to load 'reports.templatetags.report_tags': No module named util\nRequest Method:\t\t GET\nRequest URL:\t\t ​http://localhost:2017/admin/login/?next=/admin/\nDjango Version:\t\t 1.10.1\nException Type:\t\t InvalidTemplateLibrary\nException Value:\t\t \nInvalid template library specified. ImportError raised when trying to load 'reports.templatetags.report_tags': No module named util\nException Location:\t\t D:\\repo\\django110\\lib\\site-packages\\django\\template\\backends\\django.py in get_package_libraries, line 130\nHowever, if the exception was not caught and \"wrongly\" re-raised as an InvalidTemplateLibrary, the following errors would be printed:\nImportError at /admin/login/\nNo module named util\nRequest Method:\t\t GET\nRequest URL:\t\t ​http://localhost:2017/admin/login/?next=/admin/\nDjango Version:\t\t 1.10.1\nException Type:\t\t ImportError\nException Value:\t\t \nNo module named util\nException Location:\t\t D:\\repo\\projects\\evincehr\\apps\\form_utils\\widgets.py in <module>, line 3\nThe second behavior is more appropriate to debugging the error and the error would be quickly found.\n",
  "hints_text": "Invalid error message.\ngood error message.\nI'm not sure if the \"helpful\" message added in 655f52491505932ef04264de2bce21a03f3a7cd0 must be removed, but since master only supports Python 3, there's an opportunity to use Python 3 exception chaining, e.g. raise InvalidTemplateLibrary(...) from e.",
  "created_at": "2020-12-27T15:25:44Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_templatetag_discovery_import_error (template_backends.test_django.DjangoTemplatesTests)\"]",
  "PASS_TO_PASS": "[\"test_csrf_token (template_backends.test_dummy.TemplateStringsTests)\", \"test_from_string (template_backends.test_dummy.TemplateStringsTests)\", \"test_get_template (template_backends.test_dummy.TemplateStringsTests)\", \"test_get_template_nonexistent (template_backends.test_dummy.TemplateStringsTests)\", \"test_html_escaping (template_backends.test_dummy.TemplateStringsTests)\", \"test_no_directory_traversal (template_backends.test_dummy.TemplateStringsTests)\", \"test_non_ascii_characters (template_backends.test_dummy.TemplateStringsTests)\", \"test_autoescape_default (template_backends.test_django.DjangoTemplatesTests)\", \"test_autoescape_off (template_backends.test_django.DjangoTemplatesTests)\", \"test_builtins_discovery (template_backends.test_django.DjangoTemplatesTests)\", \"test_context_has_priority_over_template_context_processors (template_backends.test_django.DjangoTemplatesTests)\", \"test_csrf_token (template_backends.test_django.DjangoTemplatesTests)\", \"test_debug_default_template_loaders (template_backends.test_django.DjangoTemplatesTests)\", \"test_dirs_pathlib (template_backends.test_django.DjangoTemplatesTests)\", \"test_django_html_escaping (template_backends.test_django.DjangoTemplatesTests)\", \"test_from_string (template_backends.test_django.DjangoTemplatesTests)\", \"test_get_template (template_backends.test_django.DjangoTemplatesTests)\", \"test_get_template_nonexistent (template_backends.test_django.DjangoTemplatesTests)\", \"test_get_template_syntax_error (template_backends.test_django.DjangoTemplatesTests)\", \"test_html_escaping (template_backends.test_django.DjangoTemplatesTests)\", \"test_no_directory_traversal (template_backends.test_django.DjangoTemplatesTests)\", \"test_non_ascii_characters (template_backends.test_django.DjangoTemplatesTests)\", \"test_non_debug_default_template_loaders (template_backends.test_django.DjangoTemplatesTests)\", \"django.Template.render() requires a dict.\", \"test_templatetag_discovery (template_backends.test_django.DjangoTemplatesTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.671346",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}