{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-11635",
  "base_commit": "be6bf6902c199b27f4f001ce3597e521c3a0d0aa",
  "patch": "diff --git a/sklearn/feature_selection/_base.py b/sklearn/feature_selection/_base.py\n--- a/sklearn/feature_selection/_base.py\n+++ b/sklearn/feature_selection/_base.py\n@@ -71,7 +71,9 @@ def transform(self, X):\n         X_r : array of shape [n_samples, n_selected_features]\n             The input samples with only the selected features.\n         \"\"\"\n-        X = check_array(X, dtype=None, accept_sparse='csr')\n+        tags = self._get_tags()\n+        X = check_array(X, dtype=None, accept_sparse='csr',\n+                        force_all_finite=not tags.get('allow_nan', True))\n         mask = self.get_support()\n         if not mask.any():\n             warn(\"No features were selected: either the data is\"\ndiff --git a/sklearn/feature_selection/_from_model.py b/sklearn/feature_selection/_from_model.py\n--- a/sklearn/feature_selection/_from_model.py\n+++ b/sklearn/feature_selection/_from_model.py\n@@ -131,6 +131,10 @@ class SelectFromModel(MetaEstimatorMixin, SelectorMixin, BaseEstimator):\n     threshold_ : float\n         The threshold value used for feature selection.\n \n+    Notes\n+    -----\n+    Allows NaN/Inf in the input if the underlying estimator does as well.\n+\n     Examples\n     --------\n     >>> from sklearn.feature_selection import SelectFromModel\n@@ -249,3 +253,7 @@ def partial_fit(self, X, y=None, **fit_params):\n             self.estimator_ = clone(self.estimator)\n         self.estimator_.partial_fit(X, y, **fit_params)\n         return self\n+\n+    def _more_tags(self):\n+        estimator_tags = self.estimator._get_tags()\n+        return {'allow_nan': estimator_tags.get('allow_nan', True)}\ndiff --git a/sklearn/feature_selection/_rfe.py b/sklearn/feature_selection/_rfe.py\n--- a/sklearn/feature_selection/_rfe.py\n+++ b/sklearn/feature_selection/_rfe.py\n@@ -103,6 +103,10 @@ class RFE(SelectorMixin, MetaEstimatorMixin, BaseEstimator):\n     >>> selector.ranking_\n     array([1, 1, 1, 1, 1, 6, 4, 3, 2, 5])\n \n+    Notes\n+    -----\n+    Allows NaN/Inf in the input if the underlying estimator does as well.\n+\n     See also\n     --------\n     RFECV : Recursive feature elimination with built-in cross-validated\n@@ -150,7 +154,9 @@ def _fit(self, X, y, step_score=None):\n         # and is used when implementing RFECV\n         # self.scores_ will not be calculated when calling _fit through fit\n \n-        X, y = check_X_y(X, y, \"csc\", ensure_min_features=2)\n+        tags = self._get_tags()\n+        X, y = check_X_y(X, y, \"csc\", ensure_min_features=2,\n+                         force_all_finite=not tags.get('allow_nan', True))\n         # Initialization\n         n_features = X.shape[1]\n         if self.n_features_to_select is None:\n@@ -326,7 +332,9 @@ def predict_log_proba(self, X):\n         return self.estimator_.predict_log_proba(self.transform(X))\n \n     def _more_tags(self):\n-        return {'poor_score': True}\n+        estimator_tags = self.estimator._get_tags()\n+        return {'poor_score': True,\n+                'allow_nan': estimator_tags.get('allow_nan', True)}\n \n \n class RFECV(RFE):\n@@ -421,6 +429,8 @@ class RFECV(RFE):\n     ``ceil((n_features - min_features_to_select) / step) + 1``,\n     where step is the number of features removed at each iteration.\n \n+    Allows NaN/Inf in the input if the underlying estimator does as well.\n+\n     Examples\n     --------\n     The following example shows how to retrieve the a-priori not known 5\n@@ -479,7 +489,8 @@ def fit(self, X, y, groups=None):\n             train/test set. Only used in conjunction with a \"Group\" :term:`cv`\n             instance (e.g., :class:`~sklearn.model_selection.GroupKFold`).\n         \"\"\"\n-        X, y = check_X_y(X, y, \"csr\", ensure_min_features=2)\n+        X, y = check_X_y(X, y, \"csr\", ensure_min_features=2,\n+                         force_all_finite=False)\n \n         # Initialization\n         cv = check_cv(self.cv, y, is_classifier(self.estimator))\ndiff --git a/sklearn/feature_selection/_variance_threshold.py b/sklearn/feature_selection/_variance_threshold.py\n--- a/sklearn/feature_selection/_variance_threshold.py\n+++ b/sklearn/feature_selection/_variance_threshold.py\n@@ -29,6 +29,10 @@ class VarianceThreshold(SelectorMixin, BaseEstimator):\n     variances_ : array, shape (n_features,)\n         Variances of individual features.\n \n+    Notes\n+    -----\n+    Allows NaN in the input.\n+\n     Examples\n     --------\n     The following dataset has integer features, two of which are the same\n@@ -61,7 +65,8 @@ def fit(self, X, y=None):\n         -------\n         self\n         \"\"\"\n-        X = check_array(X, ('csr', 'csc'), dtype=np.float64)\n+        X = check_array(X, ('csr', 'csc'), dtype=np.float64,\n+                        force_all_finite='allow-nan')\n \n         if hasattr(X, \"toarray\"):   # sparse matrix\n             _, self.variances_ = mean_variance_axis(X, axis=0)\n@@ -69,16 +74,18 @@ def fit(self, X, y=None):\n                 mins, maxes = min_max_axis(X, axis=0)\n                 peak_to_peaks = maxes - mins\n         else:\n-            self.variances_ = np.var(X, axis=0)\n+            self.variances_ = np.nanvar(X, axis=0)\n             if self.threshold == 0:\n                 peak_to_peaks = np.ptp(X, axis=0)\n \n         if self.threshold == 0:\n             # Use peak-to-peak to avoid numeric precision issues\n             # for constant features\n-            self.variances_ = np.minimum(self.variances_, peak_to_peaks)\n+            compare_arr = np.array([self.variances_, peak_to_peaks])\n+            self.variances_ = np.nanmin(compare_arr, axis=0)\n \n-        if np.all(self.variances_ <= self.threshold):\n+        if np.all(~np.isfinite(self.variances_) |\n+                  (self.variances_ <= self.threshold)):\n             msg = \"No feature in X meets the variance threshold {0:.5f}\"\n             if X.shape[0] == 1:\n                 msg += \" (X contains only one sample)\"\n@@ -90,3 +97,6 @@ def _get_support_mask(self):\n         check_is_fitted(self)\n \n         return self.variances_ > self.threshold\n+\n+    def _more_tags(self):\n+        return {'allow_nan': True}\n",
  "test_patch": "diff --git a/sklearn/feature_selection/tests/test_from_model.py b/sklearn/feature_selection/tests/test_from_model.py\n--- a/sklearn/feature_selection/tests/test_from_model.py\n+++ b/sklearn/feature_selection/tests/test_from_model.py\n@@ -10,10 +10,28 @@\n from sklearn.linear_model import LogisticRegression, SGDClassifier, Lasso\n from sklearn.svm import LinearSVC\n from sklearn.feature_selection import SelectFromModel\n-from sklearn.ensemble import RandomForestClassifier\n+from sklearn.experimental import enable_hist_gradient_boosting  # noqa\n+from sklearn.ensemble import (RandomForestClassifier,\n+                              HistGradientBoostingClassifier)\n from sklearn.linear_model import PassiveAggressiveClassifier\n from sklearn.base import BaseEstimator\n \n+\n+class NaNTag(BaseEstimator):\n+    def _more_tags(self):\n+        return {'allow_nan': True}\n+\n+\n+class NoNaNTag(BaseEstimator):\n+    def _more_tags(self):\n+        return {'allow_nan': False}\n+\n+\n+class NaNTagRandomForest(RandomForestClassifier):\n+    def _more_tags(self):\n+        return {'allow_nan': True}\n+\n+\n iris = datasets.load_iris()\n data, y = iris.data, iris.target\n rng = np.random.RandomState(0)\n@@ -320,3 +338,40 @@ def test_threshold_without_refitting():\n     # Set a higher threshold to filter out more features.\n     model.threshold = \"1.0 * mean\"\n     assert X_transform.shape[1] > model.transform(data).shape[1]\n+\n+\n+def test_fit_accepts_nan_inf():\n+    # Test that fit doesn't check for np.inf and np.nan values.\n+    clf = HistGradientBoostingClassifier(random_state=0)\n+\n+    model = SelectFromModel(estimator=clf)\n+\n+    nan_data = data.copy()\n+    nan_data[0] = np.NaN\n+    nan_data[1] = np.Inf\n+\n+    model.fit(data, y)\n+\n+\n+def test_transform_accepts_nan_inf():\n+    # Test that transform doesn't check for np.inf and np.nan values.\n+    clf = NaNTagRandomForest(n_estimators=100, random_state=0)\n+    nan_data = data.copy()\n+\n+    model = SelectFromModel(estimator=clf)\n+    model.fit(nan_data, y)\n+\n+    nan_data[0] = np.NaN\n+    nan_data[1] = np.Inf\n+\n+    model.transform(nan_data)\n+\n+\n+def test_allow_nan_tag_comes_from_estimator():\n+    allow_nan_est = NaNTag()\n+    model = SelectFromModel(estimator=allow_nan_est)\n+    assert model._get_tags()['allow_nan'] is True\n+\n+    no_nan_est = NoNaNTag()\n+    model = SelectFromModel(estimator=no_nan_est)\n+    assert model._get_tags()['allow_nan'] is False\ndiff --git a/sklearn/feature_selection/tests/test_rfe.py b/sklearn/feature_selection/tests/test_rfe.py\n--- a/sklearn/feature_selection/tests/test_rfe.py\n+++ b/sklearn/feature_selection/tests/test_rfe.py\n@@ -2,6 +2,7 @@\n Testing Recursive feature elimination\n \"\"\"\n \n+import pytest\n import numpy as np\n from numpy.testing import assert_array_almost_equal, assert_array_equal\n from scipy import sparse\n@@ -54,6 +55,9 @@ def get_params(self, deep=True):\n     def set_params(self, **params):\n         return self\n \n+    def _get_tags(self):\n+        return {}\n+\n \n def test_rfe_features_importance():\n     generator = check_random_state(0)\n@@ -369,3 +373,25 @@ def test_rfe_cv_groups():\n     )\n     est_groups.fit(X, y, groups=groups)\n     assert est_groups.n_features_ > 0\n+\n+\n+@pytest.mark.parametrize(\"cv\", [\n+    None,\n+    5\n+])\n+def test_rfe_allow_nan_inf_in_x(cv):\n+    iris = load_iris()\n+    X = iris.data\n+    y = iris.target\n+\n+    # add nan and inf value to X\n+    X[0][0] = np.NaN\n+    X[0][1] = np.Inf\n+\n+    clf = MockClassifier()\n+    if cv is not None:\n+        rfe = RFECV(estimator=clf, cv=cv)\n+    else:\n+        rfe = RFE(estimator=clf)\n+    rfe.fit(X, y)\n+    rfe.transform(X)\ndiff --git a/sklearn/feature_selection/tests/test_variance_threshold.py b/sklearn/feature_selection/tests/test_variance_threshold.py\n--- a/sklearn/feature_selection/tests/test_variance_threshold.py\n+++ b/sklearn/feature_selection/tests/test_variance_threshold.py\n@@ -46,3 +46,15 @@ def test_zero_variance_floating_point_error():\n         msg = \"No feature in X meets the variance threshold 0.00000\"\n         with pytest.raises(ValueError, match=msg):\n             VarianceThreshold().fit(X)\n+\n+\n+def test_variance_nan():\n+    arr = np.array(data, dtype=np.float64)\n+    # add single NaN and feature should still be included\n+    arr[0, 0] = np.NaN\n+    # make all values in feature NaN and feature should be rejected\n+    arr[:, 1] = np.NaN\n+\n+    for X in [arr, csr_matrix(arr), csc_matrix(arr), bsr_matrix(arr)]:\n+        sel = VarianceThreshold().fit(X)\n+        assert_array_equal([0, 3, 4], sel.get_support(indices=True))\n",
  "problem_statement": "Is there any reason for SelectFromModel.transform to use force_all_finite=True in check_array?\n### Description\r\nSelectFromModel's transform raises ValueError if any value is infinite or NaN - however the values aren't actually used anywhere, so it seems to me that this check (check_array using default True value for parameter force_all_finite) could be lifted. as some models are capable of working with such values (e.g. tree based models should handle infinities properly). This could also apply to some other feature selection methods.\n",
  "hints_text": "This sounds reasonable to me for `SelectFromModel`.\r\n\r\nHowever `SelectFromModel.transform` is inherited from [`SelectorMixin.transform`](https://github.com/scikit-learn/scikit-learn/blob/a24c8b464d094d2c468a16ea9f8bf8d42d949f84/sklearn/feature_selection/base.py#L62) which is used in other feature selectors. So relaxing this check here, means adding additional checks to the feature selectors that require it, for instance, RFE, [as far as I understand](https://github.com/scikit-learn/scikit-learn/blob/a24c8b464d094d2c468a16ea9f8bf8d42d949f84/sklearn/feature_selection/rfe.py#L235).  Which means that `RFE.predict` would validate `X` twice. The alternative is to copy-paste the transform code from the mixin to `SelectFromModel` which is also not ideal.\r\n\r\nI'm not sure if it's worth it; let's wait for a second opinion on this..\nI'd be happy if this constraint were removed, even in RFE, where the\ndownstream model will check for finiteness too, and perhaps univariate\n(although then finiteness checks should be implemented in our available\nscore functions)\n\nI am happy to work on this issue if there is no one else working on it.\nI have made an example how it could be fixed. Could you please review it?",
  "created_at": "2018-07-19T16:56:01Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/feature_selection/tests/test_from_model.py::test_transform_accepts_nan_inf\", \"sklearn/feature_selection/tests/test_from_model.py::test_allow_nan_tag_comes_from_estimator\", \"sklearn/feature_selection/tests/test_rfe.py::test_rfe_allow_nan_inf_in_x[None]\", \"sklearn/feature_selection/tests/test_rfe.py::test_rfe_allow_nan_inf_in_x[5]\", \"sklearn/feature_selection/tests/test_variance_threshold.py::test_variance_nan\"]",
  "PASS_TO_PASS": "[\"sklearn/feature_selection/tests/test_from_model.py::test_invalid_input\", \"sklearn/feature_selection/tests/test_from_model.py::test_input_estimator_unchanged\", \"sklearn/feature_selection/tests/test_from_model.py::test_max_features_error[-1-ValueError-'max_features'\", \"sklearn/feature_selection/tests/test_from_model.py::test_max_features_error[5-ValueError-'max_features'\", \"sklearn/feature_selection/tests/test_from_model.py::test_max_features_error[gobbledigook-TypeError-should\", \"sklearn/feature_selection/tests/test_from_model.py::test_max_features_error[all-TypeError-should\", \"sklearn/feature_selection/tests/test_from_model.py::test_max_features_dim[0]\", \"sklearn/feature_selection/tests/test_from_model.py::test_max_features_dim[2]\", \"sklearn/feature_selection/tests/test_from_model.py::test_max_features_dim[4]\", \"sklearn/feature_selection/tests/test_from_model.py::test_max_features\", \"sklearn/feature_selection/tests/test_from_model.py::test_max_features_tiebreak\", \"sklearn/feature_selection/tests/test_from_model.py::test_threshold_and_max_features\", \"sklearn/feature_selection/tests/test_from_model.py::test_feature_importances\", \"sklearn/feature_selection/tests/test_from_model.py::test_sample_weight\", \"sklearn/feature_selection/tests/test_from_model.py::test_coef_default_threshold\", \"sklearn/feature_selection/tests/test_from_model.py::test_2d_coef\", \"sklearn/feature_selection/tests/test_from_model.py::test_partial_fit\", \"sklearn/feature_selection/tests/test_from_model.py::test_calling_fit_reinitializes\", \"sklearn/feature_selection/tests/test_from_model.py::test_prefit\", \"sklearn/feature_selection/tests/test_from_model.py::test_threshold_string\", \"sklearn/feature_selection/tests/test_from_model.py::test_threshold_without_refitting\", \"sklearn/feature_selection/tests/test_from_model.py::test_fit_accepts_nan_inf\", \"sklearn/feature_selection/tests/test_rfe.py::test_rfe_features_importance\", \"sklearn/feature_selection/tests/test_rfe.py::test_rfe\", \"sklearn/feature_selection/tests/test_rfe.py::test_rfe_mockclassifier\", \"sklearn/feature_selection/tests/test_rfe.py::test_rfecv\", \"sklearn/feature_selection/tests/test_rfe.py::test_rfecv_mockclassifier\", \"sklearn/feature_selection/tests/test_rfe.py::test_rfecv_verbose_output\", \"sklearn/feature_selection/tests/test_rfe.py::test_rfecv_grid_scores_size\", \"sklearn/feature_selection/tests/test_rfe.py::test_rfe_estimator_tags\", \"sklearn/feature_selection/tests/test_rfe.py::test_rfe_min_step\", \"sklearn/feature_selection/tests/test_rfe.py::test_number_of_subsets_of_features\", \"sklearn/feature_selection/tests/test_rfe.py::test_rfe_cv_n_jobs\", \"sklearn/feature_selection/tests/test_rfe.py::test_rfe_cv_groups\", \"sklearn/feature_selection/tests/test_variance_threshold.py::test_zero_variance\", \"sklearn/feature_selection/tests/test_variance_threshold.py::test_variance_threshold\", \"sklearn/feature_selection/tests/test_variance_threshold.py::test_zero_variance_floating_point_error\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.963578",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}