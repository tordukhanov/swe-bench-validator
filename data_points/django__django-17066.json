{
  "repo": "django/django",
  "instance_id": "django__django-17066",
  "base_commit": "4afaeb14c293725d7b2530788083fce1c120ff65",
  "patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -46,6 +46,11 @@ def serialize(self):\n         return value % (\", \".join(strings)), imports\n \n \n+class BaseUnorderedSequenceSerializer(BaseSequenceSerializer):\n+    def __init__(self, value):\n+        super().__init__(sorted(value, key=repr))\n+\n+\n class BaseSimpleSerializer(BaseSerializer):\n     def serialize(self):\n         return repr(self.value), set()\n@@ -151,7 +156,7 @@ def serialize(self):\n         return super().serialize()\n \n \n-class FrozensetSerializer(BaseSequenceSerializer):\n+class FrozensetSerializer(BaseUnorderedSequenceSerializer):\n     def _format(self):\n         return \"frozenset([%s])\"\n \n@@ -279,7 +284,7 @@ def _format(self):\n         return \"[%s]\"\n \n \n-class SetSerializer(BaseSequenceSerializer):\n+class SetSerializer(BaseUnorderedSequenceSerializer):\n     def _format(self):\n         # Serialize as a set literal except when value is empty because {}\n         # is an empty dict.\ndiff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -154,7 +154,9 @@ def as_string(self):\n                 imports.add(\"from django.conf import settings\")\n             else:\n                 dependencies.append(\"        %s,\" % self.serialize(dependency)[0])\n-        items[\"dependencies\"] = \"\\n\".join(dependencies) + \"\\n\" if dependencies else \"\"\n+        items[\"dependencies\"] = (\n+            \"\\n\".join(sorted(dependencies)) + \"\\n\" if dependencies else \"\"\n+        )\n \n         # Format imports nicely, swapping imports of functions from migration files\n         # for comments\n",
  "test_patch": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -768,12 +768,17 @@ def test_serialize_managers(self):\n     def test_serialize_frozensets(self):\n         self.assertSerializedEqual(frozenset())\n         self.assertSerializedEqual(frozenset(\"let it go\"))\n+        self.assertSerializedResultEqual(\n+            frozenset(\"cba\"), (\"frozenset(['a', 'b', 'c'])\", set())\n+        )\n \n     def test_serialize_set(self):\n         self.assertSerializedEqual(set())\n         self.assertSerializedResultEqual(set(), (\"set()\", set()))\n         self.assertSerializedEqual({\"a\"})\n         self.assertSerializedResultEqual({\"a\"}, (\"{'a'}\", set()))\n+        self.assertSerializedEqual({\"c\", \"b\", \"a\"})\n+        self.assertSerializedResultEqual({\"c\", \"b\", \"a\"}, (\"{'a', 'b', 'c'}\", set()))\n \n     def test_serialize_timedelta(self):\n         self.assertSerializedEqual(datetime.timedelta())\n@@ -891,6 +896,33 @@ def test_custom_operation(self):\n             result[\"custom_migration_operations\"].more_operations.TestOperation,\n         )\n \n+    def test_sorted_dependencies(self):\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\"mymodel\", \"myfield\", models.IntegerField()),\n+                ],\n+                \"dependencies\": [\n+                    (\"testapp10\", \"0005_fifth\"),\n+                    (\"testapp02\", \"0005_third\"),\n+                    (\"testapp02\", \"0004_sixth\"),\n+                    (\"testapp01\", \"0001_initial\"),\n+                ],\n+            },\n+        )\n+        output = MigrationWriter(migration, include_header=False).as_string()\n+        self.assertIn(\n+            \"    dependencies = [\\n\"\n+            \"        ('testapp01', '0001_initial'),\\n\"\n+            \"        ('testapp02', '0004_sixth'),\\n\"\n+            \"        ('testapp02', '0005_third'),\\n\"\n+            \"        ('testapp10', '0005_fifth'),\\n\"\n+            \"    ]\",\n+            output,\n+        )\n+\n     def test_sorted_imports(self):\n         \"\"\"\n         #24155 - Tests ordering of imports.\n",
  "problem_statement": "Migration serializer for sets results in non-deterministic order.\nDescription\n\t\nWe are using quite a lot of complex index_together / unique_together constraints on our models, and the output in the generated migrations is flip-flopping all the time like follows, causing spurious diffs in our checkouts:\nmigrations.AlterUniqueTogether(\n+\tunique_together={(\"tenant\", \"dealer\"), (\"tenant\", \"order\")},\n-\tunique_together={(\"tenant\", \"order\"), (\"tenant\", \"dealer\")},\nThis is happening because these constraints are normalized to sets internally in the ModelState, which kind of makes sense, but unfortunately set iteration order (unlike dicts!) is unstable in Python 3 due to hash randomization. However, migrations serializer doesn't have any special facilities for ensuring stable output for sets and this is what causes annoying diffs for us all the time.\nI suggest to add a trivial serializer specifically for unordered sequences which ensures stable output no matter the iteration order. Stability can be achieved by sorting elements in the set by their string representation. This only affects the writer output, and doesn't interfere with the rest of Django in any way, so this change only improves developer experience, but has no effect on the performance and/or reliability.\nI hope that even though it's apparently not a major problem for most users you would still accept the fix to ensure stable migration writer output for the rest of us.\n",
  "hints_text": "",
  "created_at": "2023-07-11T17:50:10Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_serialize_frozensets (migrations.test_writer.WriterTests.test_serialize_frozensets)\", \"test_serialize_set (migrations.test_writer.WriterTests.test_serialize_set)\", \"test_sorted_dependencies (migrations.test_writer.WriterTests.test_sorted_dependencies)\"]",
  "PASS_TO_PASS": "[\"test_args_kwargs_signature (migrations.test_writer.OperationWriterTests.test_args_kwargs_signature)\", \"test_args_signature (migrations.test_writer.OperationWriterTests.test_args_signature)\", \"test_empty_signature (migrations.test_writer.OperationWriterTests.test_empty_signature)\", \"test_expand_args_signature (migrations.test_writer.OperationWriterTests.test_expand_args_signature)\", \"test_kwargs_signature (migrations.test_writer.OperationWriterTests.test_kwargs_signature)\", \"test_multiline_args_signature (migrations.test_writer.OperationWriterTests.test_multiline_args_signature)\", \"test_nested_args_signature (migrations.test_writer.OperationWriterTests.test_nested_args_signature)\", \"test_nested_operation_expand_args_signature (migrations.test_writer.OperationWriterTests.test_nested_operation_expand_args_signature)\", \"test_custom_operation (migrations.test_writer.WriterTests.test_custom_operation)\", \"test_deconstruct_class_arguments (migrations.test_writer.WriterTests.test_deconstruct_class_arguments)\", \"Test comments at top of file.\", \"test_migration_path (migrations.test_writer.WriterTests.test_migration_path)\", \"django.db.models shouldn't be imported if unused.\", \"test_register_non_serializer (migrations.test_writer.WriterTests.test_register_non_serializer)\", \"test_register_serializer (migrations.test_writer.WriterTests.test_register_serializer)\", \"test_serialize_builtin_types (migrations.test_writer.WriterTests.test_serialize_builtin_types)\", \"test_serialize_builtins (migrations.test_writer.WriterTests.test_serialize_builtins)\", \"test_serialize_choices (migrations.test_writer.WriterTests.test_serialize_choices)\", \"Ticket #22943: Test serialization of class-based validators, including\", \"test_serialize_collections (migrations.test_writer.WriterTests.test_serialize_collections)\", \"Make sure compiled regex can be serialized.\", \"test_serialize_complex_func_index (migrations.test_writer.WriterTests.test_serialize_complex_func_index)\", \"test_serialize_constants (migrations.test_writer.WriterTests.test_serialize_constants)\", \"test_serialize_datetime (migrations.test_writer.WriterTests.test_serialize_datetime)\", \"Ticket #22679: makemigrations generates invalid code for (an empty\", \"test_serialize_enum_flags (migrations.test_writer.WriterTests.test_serialize_enum_flags)\", \"test_serialize_enums (migrations.test_writer.WriterTests.test_serialize_enums)\", \"test_serialize_fields (migrations.test_writer.WriterTests.test_serialize_fields)\", \"test_serialize_functions (migrations.test_writer.WriterTests.test_serialize_functions)\", \"test_serialize_functools_partial (migrations.test_writer.WriterTests.test_serialize_functools_partial)\", \"test_serialize_functools_partialmethod (migrations.test_writer.WriterTests.test_serialize_functools_partialmethod)\", \"test_serialize_iterators (migrations.test_writer.WriterTests.test_serialize_iterators)\", \"test_serialize_lazy_objects (migrations.test_writer.WriterTests.test_serialize_lazy_objects)\", \"A reference in a local scope can't be serialized.\", \"test_serialize_managers (migrations.test_writer.WriterTests.test_serialize_managers)\", \"test_serialize_multiline_strings (migrations.test_writer.WriterTests.test_serialize_multiline_strings)\", \"test_serialize_nested_class (migrations.test_writer.WriterTests.test_serialize_nested_class)\", \"test_serialize_numbers (migrations.test_writer.WriterTests.test_serialize_numbers)\", \"test_serialize_path_like (migrations.test_writer.WriterTests.test_serialize_path_like)\", \"test_serialize_pathlib (migrations.test_writer.WriterTests.test_serialize_pathlib)\", \"test_serialize_range (migrations.test_writer.WriterTests.test_serialize_range)\", \"test_serialize_settings (migrations.test_writer.WriterTests.test_serialize_settings)\", \"test_serialize_strings (migrations.test_writer.WriterTests.test_serialize_strings)\", \"test_serialize_timedelta (migrations.test_writer.WriterTests.test_serialize_timedelta)\", \"test_serialize_type_model (migrations.test_writer.WriterTests.test_serialize_type_model)\", \"test_serialize_type_none (migrations.test_writer.WriterTests.test_serialize_type_none)\", \"An unbound method used within a class body can be serialized.\", \"test_serialize_uuid (migrations.test_writer.WriterTests.test_serialize_uuid)\", \"Tests serializing a simple migration.\", \"#24155 - Tests ordering of imports.\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.780458",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}