{
  "repo": "pallets/flask",
  "instance_id": "pallets__flask-4074",
  "base_commit": "a541c2ac8b05c2b23e11bd8540088fce1abc2373",
  "patch": "diff --git a/src/flask/app.py b/src/flask/app.py\n--- a/src/flask/app.py\n+++ b/src/flask/app.py\n@@ -36,6 +36,7 @@\n from .globals import g\n from .globals import request\n from .globals import session\n+from .helpers import _split_blueprint_path\n from .helpers import get_debug_flag\n from .helpers import get_env\n from .helpers import get_flashed_messages\n@@ -747,7 +748,7 @@ def update_template_context(self, context: dict) -> None:\n         ] = self.template_context_processors[None]\n         reqctx = _request_ctx_stack.top\n         if reqctx is not None:\n-            for bp in self._request_blueprints():\n+            for bp in request.blueprints:\n                 if bp in self.template_context_processors:\n                     funcs = chain(funcs, self.template_context_processors[bp])\n         orig_ctx = context.copy()\n@@ -1018,6 +1019,12 @@ def register_blueprint(self, blueprint: \"Blueprint\", **options: t.Any) -> None:\n             :class:`~flask.blueprints.BlueprintSetupState`. They can be\n             accessed in :meth:`~flask.Blueprint.record` callbacks.\n \n+        .. versionchanged:: 2.0.1\n+            The ``name`` option can be used to change the (pre-dotted)\n+            name the blueprint is registered with. This allows the same\n+            blueprint to be registered multiple times with unique names\n+            for ``url_for``.\n+\n         .. versionadded:: 0.7\n         \"\"\"\n         blueprint.register(self, options)\n@@ -1267,7 +1274,7 @@ def _find_error_handler(self, e: Exception) -> t.Optional[ErrorHandlerCallable]:\n         exc_class, code = self._get_exc_class_and_code(type(e))\n \n         for c in [code, None]:\n-            for name in chain(self._request_blueprints(), [None]):\n+            for name in chain(request.blueprints, [None]):\n                 handler_map = self.error_handler_spec[name][c]\n \n                 if not handler_map:\n@@ -1788,9 +1795,14 @@ def inject_url_defaults(self, endpoint: str, values: dict) -> None:\n         .. versionadded:: 0.7\n         \"\"\"\n         funcs: t.Iterable[URLDefaultCallable] = self.url_default_functions[None]\n+\n         if \".\" in endpoint:\n-            bp = endpoint.rsplit(\".\", 1)[0]\n-            funcs = chain(funcs, self.url_default_functions[bp])\n+            # This is called by url_for, which can be called outside a\n+            # request, can't use request.blueprints.\n+            bps = _split_blueprint_path(endpoint.rpartition(\".\")[0])\n+            bp_funcs = chain.from_iterable(self.url_default_functions[bp] for bp in bps)\n+            funcs = chain(funcs, bp_funcs)\n+\n         for func in funcs:\n             func(endpoint, values)\n \n@@ -1831,14 +1843,14 @@ def preprocess_request(self) -> t.Optional[ResponseReturnValue]:\n         funcs: t.Iterable[URLValuePreprocessorCallable] = self.url_value_preprocessors[\n             None\n         ]\n-        for bp in self._request_blueprints():\n+        for bp in request.blueprints:\n             if bp in self.url_value_preprocessors:\n                 funcs = chain(funcs, self.url_value_preprocessors[bp])\n         for func in funcs:\n             func(request.endpoint, request.view_args)\n \n         funcs: t.Iterable[BeforeRequestCallable] = self.before_request_funcs[None]\n-        for bp in self._request_blueprints():\n+        for bp in request.blueprints:\n             if bp in self.before_request_funcs:\n                 funcs = chain(funcs, self.before_request_funcs[bp])\n         for func in funcs:\n@@ -1863,7 +1875,7 @@ def process_response(self, response: Response) -> Response:\n         \"\"\"\n         ctx = _request_ctx_stack.top\n         funcs: t.Iterable[AfterRequestCallable] = ctx._after_request_functions\n-        for bp in self._request_blueprints():\n+        for bp in request.blueprints:\n             if bp in self.after_request_funcs:\n                 funcs = chain(funcs, reversed(self.after_request_funcs[bp]))\n         if None in self.after_request_funcs:\n@@ -1902,7 +1914,7 @@ def do_teardown_request(\n         funcs: t.Iterable[TeardownCallable] = reversed(\n             self.teardown_request_funcs[None]\n         )\n-        for bp in self._request_blueprints():\n+        for bp in request.blueprints:\n             if bp in self.teardown_request_funcs:\n                 funcs = chain(funcs, reversed(self.teardown_request_funcs[bp]))\n         for func in funcs:\n@@ -2074,9 +2086,3 @@ def __call__(self, environ: dict, start_response: t.Callable) -> t.Any:\n         wrapped to apply middleware.\n         \"\"\"\n         return self.wsgi_app(environ, start_response)\n-\n-    def _request_blueprints(self) -> t.Iterable[str]:\n-        if _request_ctx_stack.top.request.blueprint is None:\n-            return []\n-        else:\n-            return reversed(_request_ctx_stack.top.request.blueprint.split(\".\"))\ndiff --git a/src/flask/blueprints.py b/src/flask/blueprints.py\n--- a/src/flask/blueprints.py\n+++ b/src/flask/blueprints.py\n@@ -67,6 +67,7 @@ def __init__(\n         #: blueprint.\n         self.url_prefix = url_prefix\n \n+        self.name = self.options.get(\"name\", blueprint.name)\n         self.name_prefix = self.options.get(\"name_prefix\", \"\")\n \n         #: A dictionary with URL defaults that is added to each and every\n@@ -96,9 +97,10 @@ def add_url_rule(\n         defaults = self.url_defaults\n         if \"defaults\" in options:\n             defaults = dict(defaults, **options.pop(\"defaults\"))\n+\n         self.app.add_url_rule(\n             rule,\n-            f\"{self.name_prefix}{self.blueprint.name}.{endpoint}\",\n+            f\"{self.name_prefix}.{self.name}.{endpoint}\".lstrip(\".\"),\n             view_func,\n             defaults=defaults,\n             **options,\n@@ -252,8 +254,16 @@ def register_blueprint(self, blueprint: \"Blueprint\", **options: t.Any) -> None:\n         arguments passed to this method will override the defaults set\n         on the blueprint.\n \n+        .. versionchanged:: 2.0.1\n+            The ``name`` option can be used to change the (pre-dotted)\n+            name the blueprint is registered with. This allows the same\n+            blueprint to be registered multiple times with unique names\n+            for ``url_for``.\n+\n         .. versionadded:: 2.0\n         \"\"\"\n+        if blueprint is self:\n+            raise ValueError(\"Cannot register a blueprint on itself\")\n         self._blueprints.append((blueprint, options))\n \n     def register(self, app: \"Flask\", options: dict) -> None:\n@@ -266,23 +276,48 @@ def register(self, app: \"Flask\", options: dict) -> None:\n             with.\n         :param options: Keyword arguments forwarded from\n             :meth:`~Flask.register_blueprint`.\n-        :param first_registration: Whether this is the first time this\n-            blueprint has been registered on the application.\n+\n+        .. versionchanged:: 2.0.1\n+            Nested blueprints are registered with their dotted name.\n+            This allows different blueprints with the same name to be\n+            nested at different locations.\n+\n+        .. versionchanged:: 2.0.1\n+            The ``name`` option can be used to change the (pre-dotted)\n+            name the blueprint is registered with. This allows the same\n+            blueprint to be registered multiple times with unique names\n+            for ``url_for``.\n+\n+        .. versionchanged:: 2.0.1\n+            Registering the same blueprint with the same name multiple\n+            times is deprecated and will become an error in Flask 2.1.\n         \"\"\"\n-        first_registration = False\n-\n-        if self.name in app.blueprints:\n-            assert app.blueprints[self.name] is self, (\n-                \"A name collision occurred between blueprints\"\n-                f\" {self!r} and {app.blueprints[self.name]!r}.\"\n-                f\" Both share the same name {self.name!r}.\"\n-                f\" Blueprints that are created on the fly need unique\"\n-                f\" names.\"\n-            )\n-        else:\n-            app.blueprints[self.name] = self\n-            first_registration = True\n+        first_registration = not any(bp is self for bp in app.blueprints.values())\n+        name_prefix = options.get(\"name_prefix\", \"\")\n+        self_name = options.get(\"name\", self.name)\n+        name = f\"{name_prefix}.{self_name}\".lstrip(\".\")\n+\n+        if name in app.blueprints:\n+            existing_at = f\" '{name}'\" if self_name != name else \"\"\n+\n+            if app.blueprints[name] is not self:\n+                raise ValueError(\n+                    f\"The name '{self_name}' is already registered for\"\n+                    f\" a different blueprint{existing_at}. Use 'name='\"\n+                    \" to provide a unique name.\"\n+                )\n+            else:\n+                import warnings\n+\n+                warnings.warn(\n+                    f\"The name '{self_name}' is already registered for\"\n+                    f\" this blueprint{existing_at}. Use 'name=' to\"\n+                    \" provide a unique name. This will become an error\"\n+                    \" in Flask 2.1.\",\n+                    stacklevel=4,\n+                )\n \n+        app.blueprints[name] = self\n         self._got_registered_once = True\n         state = self.make_setup_state(app, options, first_registration)\n \n@@ -298,12 +333,11 @@ def register(self, app: \"Flask\", options: dict) -> None:\n \n             def extend(bp_dict, parent_dict):\n                 for key, values in bp_dict.items():\n-                    key = self.name if key is None else f\"{self.name}.{key}\"\n-\n+                    key = name if key is None else f\"{name}.{key}\"\n                     parent_dict[key].extend(values)\n \n             for key, value in self.error_handler_spec.items():\n-                key = self.name if key is None else f\"{self.name}.{key}\"\n+                key = name if key is None else f\"{name}.{key}\"\n                 value = defaultdict(\n                     dict,\n                     {\n@@ -337,7 +371,7 @@ def extend(bp_dict, parent_dict):\n             if cli_resolved_group is None:\n                 app.cli.commands.update(self.cli.commands)\n             elif cli_resolved_group is _sentinel:\n-                self.cli.name = self.name\n+                self.cli.name = name\n                 app.cli.add_command(self.cli)\n             else:\n                 self.cli.name = cli_resolved_group\n@@ -354,10 +388,12 @@ def extend(bp_dict, parent_dict):\n                 bp_options[\"url_prefix\"] = (\n                     state.url_prefix.rstrip(\"/\") + \"/\" + bp_url_prefix.lstrip(\"/\")\n                 )\n-            else:\n+            elif bp_url_prefix is not None:\n+                bp_options[\"url_prefix\"] = bp_url_prefix\n+            elif state.url_prefix is not None:\n                 bp_options[\"url_prefix\"] = state.url_prefix\n \n-            bp_options[\"name_prefix\"] = options.get(\"name_prefix\", \"\") + self.name + \".\"\n+            bp_options[\"name_prefix\"] = name\n             blueprint.register(app, bp_options)\n \n     def add_url_rule(\ndiff --git a/src/flask/helpers.py b/src/flask/helpers.py\n--- a/src/flask/helpers.py\n+++ b/src/flask/helpers.py\n@@ -6,6 +6,7 @@\n import warnings\n from datetime import datetime\n from datetime import timedelta\n+from functools import lru_cache\n from functools import update_wrapper\n from threading import RLock\n \n@@ -821,3 +822,13 @@ def is_ip(value: str) -> bool:\n             return True\n \n     return False\n+\n+\n+@lru_cache(maxsize=None)\n+def _split_blueprint_path(name: str) -> t.List[str]:\n+    out: t.List[str] = [name]\n+\n+    if \".\" in name:\n+        out.extend(_split_blueprint_path(name.rpartition(\".\")[0]))\n+\n+    return out\ndiff --git a/src/flask/wrappers.py b/src/flask/wrappers.py\n--- a/src/flask/wrappers.py\n+++ b/src/flask/wrappers.py\n@@ -6,6 +6,7 @@\n \n from . import json\n from .globals import current_app\n+from .helpers import _split_blueprint_path\n \n if t.TYPE_CHECKING:\n     import typing_extensions as te\n@@ -59,23 +60,54 @@ def max_content_length(self) -> t.Optional[int]:  # type: ignore\n \n     @property\n     def endpoint(self) -> t.Optional[str]:\n-        \"\"\"The endpoint that matched the request.  This in combination with\n-        :attr:`view_args` can be used to reconstruct the same or a\n-        modified URL.  If an exception happened when matching, this will\n-        be ``None``.\n+        \"\"\"The endpoint that matched the request URL.\n+\n+        This will be ``None`` if matching failed or has not been\n+        performed yet.\n+\n+        This in combination with :attr:`view_args` can be used to\n+        reconstruct the same URL or a modified URL.\n         \"\"\"\n         if self.url_rule is not None:\n             return self.url_rule.endpoint\n-        else:\n-            return None\n+\n+        return None\n \n     @property\n     def blueprint(self) -> t.Optional[str]:\n-        \"\"\"The name of the current blueprint\"\"\"\n-        if self.url_rule and \".\" in self.url_rule.endpoint:\n-            return self.url_rule.endpoint.rsplit(\".\", 1)[0]\n-        else:\n-            return None\n+        \"\"\"The registered name of the current blueprint.\n+\n+        This will be ``None`` if the endpoint is not part of a\n+        blueprint, or if URL matching failed or has not been performed\n+        yet.\n+\n+        This does not necessarily match the name the blueprint was\n+        created with. It may have been nested, or registered with a\n+        different name.\n+        \"\"\"\n+        endpoint = self.endpoint\n+\n+        if endpoint is not None and \".\" in endpoint:\n+            return endpoint.rpartition(\".\")[0]\n+\n+        return None\n+\n+    @property\n+    def blueprints(self) -> t.List[str]:\n+        \"\"\"The registered names of the current blueprint upwards through\n+        parent blueprints.\n+\n+        This will be an empty list if there is no current blueprint, or\n+        if URL matching failed.\n+\n+        .. versionadded:: 2.0.1\n+        \"\"\"\n+        name = self.blueprint\n+\n+        if name is None:\n+            return []\n+\n+        return _split_blueprint_path(name)\n \n     def _load_form_data(self) -> None:\n         RequestBase._load_form_data(self)\n",
  "test_patch": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -140,7 +140,7 @@ def bar(bar):\n         return str(bar)\n \n     app.register_blueprint(bp, url_prefix=\"/1\", url_defaults={\"bar\": 23})\n-    app.register_blueprint(bp, url_prefix=\"/2\", url_defaults={\"bar\": 19})\n+    app.register_blueprint(bp, name=\"test2\", url_prefix=\"/2\", url_defaults={\"bar\": 19})\n \n     assert client.get(\"/1/foo\").data == b\"23/42\"\n     assert client.get(\"/2/foo\").data == b\"19/42\"\n@@ -837,48 +837,77 @@ def grandchild_no():\n     assert client.get(\"/parent/child/grandchild/no\").data == b\"Grandchild no\"\n \n \n-def test_nested_blueprint_url_prefix(app, client):\n-    parent = flask.Blueprint(\"parent\", __name__, url_prefix=\"/parent\")\n-    child = flask.Blueprint(\"child\", __name__, url_prefix=\"/child\")\n-    grandchild = flask.Blueprint(\"grandchild\", __name__, url_prefix=\"/grandchild\")\n-    apple = flask.Blueprint(\"apple\", __name__, url_prefix=\"/apple\")\n-\n-    @parent.route(\"/\")\n-    def parent_index():\n-        return \"Parent\"\n+@pytest.mark.parametrize(\n+    \"parent_init, child_init, parent_registration, child_registration\",\n+    [\n+        (\"/parent\", \"/child\", None, None),\n+        (\"/parent\", None, None, \"/child\"),\n+        (None, None, \"/parent\", \"/child\"),\n+        (\"/other\", \"/something\", \"/parent\", \"/child\"),\n+    ],\n+)\n+def test_nesting_url_prefixes(\n+    parent_init,\n+    child_init,\n+    parent_registration,\n+    child_registration,\n+    app,\n+    client,\n+) -> None:\n+    parent = flask.Blueprint(\"parent\", __name__, url_prefix=parent_init)\n+    child = flask.Blueprint(\"child\", __name__, url_prefix=child_init)\n \n     @child.route(\"/\")\n-    def child_index():\n-        return \"Child\"\n+    def index():\n+        return \"index\"\n \n-    @grandchild.route(\"/\")\n-    def grandchild_index():\n-        return \"Grandchild\"\n+    parent.register_blueprint(child, url_prefix=child_registration)\n+    app.register_blueprint(parent, url_prefix=parent_registration)\n \n-    @apple.route(\"/\")\n-    def apple_index():\n-        return \"Apple\"\n+    response = client.get(\"/parent/child/\")\n+    assert response.status_code == 200\n \n-    child.register_blueprint(grandchild)\n-    child.register_blueprint(apple, url_prefix=\"/orange\")  # test overwrite\n-    parent.register_blueprint(child)\n-    app.register_blueprint(parent)\n \n-    assert client.get(\"/parent/\").data == b\"Parent\"\n-    assert client.get(\"/parent/child/\").data == b\"Child\"\n-    assert client.get(\"/parent/child/grandchild/\").data == b\"Grandchild\"\n-    assert client.get(\"/parent/child/orange/\").data == b\"Apple\"\n+def test_unique_blueprint_names(app, client) -> None:\n+    bp = flask.Blueprint(\"bp\", __name__)\n+    bp2 = flask.Blueprint(\"bp\", __name__)\n \n+    app.register_blueprint(bp)\n \n-def test_nested_blueprint_url_prefix_only_parent_prefix(app, client):\n-    parent = flask.Blueprint(\"parent\", __name__)\n-    child = flask.Blueprint(\"child\", __name__)\n+    with pytest.warns(UserWarning):\n+        app.register_blueprint(bp)  # same bp, same name, warning\n \n-    @child.route(\"/child-endpoint\")\n-    def child_index():\n-        return \"Child\"\n+    app.register_blueprint(bp, name=\"again\")  # same bp, different name, ok\n \n-    parent.register_blueprint(child)\n-    app.register_blueprint(parent, url_prefix=\"/parent\")\n+    with pytest.raises(ValueError):\n+        app.register_blueprint(bp2)  # different bp, same name, error\n+\n+    app.register_blueprint(bp2, name=\"alt\")  # different bp, different name, ok\n+\n+\n+def test_self_registration(app, client) -> None:\n+    bp = flask.Blueprint(\"bp\", __name__)\n+    with pytest.raises(ValueError):\n+        bp.register_blueprint(bp)\n+\n+\n+def test_blueprint_renaming(app, client) -> None:\n+    bp = flask.Blueprint(\"bp\", __name__)\n+    bp2 = flask.Blueprint(\"bp2\", __name__)\n+\n+    @bp.get(\"/\")\n+    def index():\n+        return flask.request.endpoint\n+\n+    @bp2.get(\"/\")\n+    def index2():\n+        return flask.request.endpoint\n+\n+    bp.register_blueprint(bp2, url_prefix=\"/a\", name=\"sub\")\n+    app.register_blueprint(bp, url_prefix=\"/a\")\n+    app.register_blueprint(bp, url_prefix=\"/b\", name=\"alt\")\n \n-    assert client.get(\"/parent/child-endpoint\").data == b\"Child\"\n+    assert client.get(\"/a/\").data == b\"bp.index\"\n+    assert client.get(\"/b/\").data == b\"alt.index\"\n+    assert client.get(\"/a/a/\").data == b\"bp.sub.index2\"\n+    assert client.get(\"/b/a/\").data == b\"alt.sub.index2\"\n",
  "problem_statement": "url_for can't distinguish a blueprint mounted two times\nBased on blueprint concept, I expected it to handle relative `url_for` nicely:\n\n```\nfrom flask import Blueprint, Flask, url_for\n\nbp = Blueprint('foo', __name__)\n\n@bp.route('/')\ndef func():\n    return url_for('.func')\n\napp = Flask(__name__)\napp.register_blueprint(bp, url_prefix='/foo')\napp.register_blueprint(bp, url_prefix='/bar')\n\nclient = app.test_client()\nprint client.get('/foo/').data\nprint client.get('/bar/').data\n```\n\nBoth prints write the URL to the first blueprint registered (`/foo/`). Is it possible to mount two times the same blueprint and make relative `url_for` work? Is this behaviour expected?\n\n",
  "hints_text": "@iurisilvio this is expected behaviour. It won't work with absolute name (i.e. `blueprint_name.func`) either. What are you trying to do exactly? Probably you should use `request.url` instead of `url_for`.\n\n@jackunion it was just an example. I want to mount the same blueprint with different prefixes and I expect my _relative_ `url_for` to work inside my blueprint, but this is not how it works.\n\nI fixed my problem with multiple blueprints (with the same routes), but I expected `url_for` working fine with blueprints.\n\nFlask store the blueprint in a dict like `dict[blueprint.name] = blueprint`. I can change the blueprint name before register the blueprint again and it works (or override the `app.register_blueprint` to avoid name collision). I'm not sure if it really works.\n\n@iurisilvio actually, `url_for` works just fine :]\nTry `print(app.url_map)` to see all url rules.\n\nI am really curious what you're trying to do with registering the same blueprint multiple times. The restriction might seem arbitrary, but i can imagine it is in place to avoid gross misuse of Flask's blueprints.\n\n> Register a blueprint multiple times on an application with different URL rules.\n\nFrom http://flask.pocoo.org/docs/blueprints/\n\n> @iurisilvio this is expected behaviour. It won't work with absolute name (i.e. blueprint_name.func) either.\n\nThat is not true. This is not expected behaviour, this is a supported use case.\n\n@danielchatfield have you read the question?\n\nYes. The docs give registering a single blueprint multiple times on the same app as an \"intended use case\".\n\nThe utility of that is somewhat questionable if `url_for` doesn't work properly.\n\n@untitaker I have a blueprint mounted in `/foo`, but I also want almost the same views in routes like  `/x/foo` and `/y/foo`, where `x` and `y` are sections of my app. Some users can view only `x` section, which contains lots of routes from other blueprints too. Other users can view `x`, `y` and the `/foo`, which contains data from both sections and some other things.\n\nIn most cases, I'd prefer `/something/x` and `/something/y`, but this is not the case, `x` and `y` are used in several parts of my app and really makes sense in this case.\n\nI just created a blueprint factory to fix this issue for me, using different names. It works fine and is not a huge problem for me. But I consider it a bug, because it is an intended use case (@danielchatfield already quoted it). I never expected a relative `url_for` returning something from other mounted blueprint.\n\nFirst, i have to admit that it indeed seems to be an intended usecase.\n\n @iurisilvio It basically seems like you're mixing code and data there. Adding a rule `/<section>/foo` and using a proper data storage for the sections seems better at first glance, but i don't want to say your solution is wrong since i don't know your usecase.\n\nYes, I agree. This structure is weird, but it is really the right choice for my app.\n\nAs I said, it was easy to workaround this issue, but if I rather mount the same blueprint in different paths. Blueprints are perfect to my use case, based on blueprint definition. Unfortunately, `url_for` breaks all my url references. Looks like a bug or at least docs deserve better explanation about this limitation.\n\n@danielchatfield this question is about `url_for`, not about registering multiple blueprints.\n\n@jackunion this issue is about the `url_for` behaviour with the same blueprint registered more than once.\n\nTwo statements from blueprints docs:\n\n> Register a blueprint multiple times on an application with different URL rules.\n> \n> Additionally if you are in a view function of a blueprint or a rendered template and you want to link to another endpoint of the same blueprint, you can use relative redirects by prefixing the endpoint with a dot only\n\n@iurisilvio and again:\n`url_for` will not work as you expect even with absolute name (i.e. blueprint_name.view_func), not only with relative name.\nIt will give you the wrong url even if your blueprint is registered once but have more than one route decorator (i.e `@blueprint_name.route()`).\nIf you want to know how exactly `url_for` builds url, start [here](https://github.com/mitsuhiko/flask/blob/master/flask/helpers.py#L186).\n\n@jackunion the point of this issue is that it is a bug.\n\n@jackunion we know it doesn't work, but as per the docs it should work!\n\nHmm, this is definitely unexpected behavior, but I'm not sure what we can do about it. The problem is that the endpoint becomes `foo.func`, and while Werkzeug knows all the rules associated with an endpoint, it only uses the first one to build with.\r\n\r\nThere's no information about which path to prefer. We'd need to send the url prefix to `MapAdapter.build` and use that when deciding which rule to use for the endpoint.\r\n\r\nThere's also no way to know what other prefixes a blueprint was registered under, so we can't know a prefix to strip and replace with the current blueprint.\nThis is really confusing. The same `Register a blueprint multiple times on an application with different URL rules` line in the docs let me to expect that utilities like `url_for` would still work, but they don't.\r\n\r\nMy solution was to just nest my blueprint creation and route definition inside a `make_blueprint(blueprint_name)` factory function that could pass different `name` parameters to each `Blueprint` instance ...",
  "created_at": "2021-05-18T12:40:47Z",
  "version": "2.0",
  "FAIL_TO_PASS": "[\"tests/test_blueprints.py::test_unique_blueprint_names\", \"tests/test_blueprints.py::test_self_registration\"]",
  "PASS_TO_PASS": "[\"tests/test_blueprints.py::test_dotted_name_not_allowed\", \"tests/test_blueprints.py::test_route_decorator_custom_endpoint_with_dots\", \"tests/test_blueprints.py::test_template_filter\", \"tests/test_blueprints.py::test_add_template_filter\", \"tests/test_blueprints.py::test_template_filter_with_name\", \"tests/test_blueprints.py::test_add_template_filter_with_name\", \"tests/test_blueprints.py::test_template_test\", \"tests/test_blueprints.py::test_add_template_test\", \"tests/test_blueprints.py::test_template_test_with_name\", \"tests/test_blueprints.py::test_add_template_test_with_name\", \"tests/test_blueprints.py::test_template_global\"]",
  "environment_setup_commit": "4346498c85848c53843b810537b83a8f6124c9d3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.840694",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}