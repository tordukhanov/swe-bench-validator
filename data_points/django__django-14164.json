{
  "repo": "django/django",
  "instance_id": "django__django-14164",
  "base_commit": "41e6b2a3c5e723256506b9ff49437d52a1f3bf43",
  "patch": "diff --git a/django/utils/translation/__init__.py b/django/utils/translation/__init__.py\n--- a/django/utils/translation/__init__.py\n+++ b/django/utils/translation/__init__.py\n@@ -201,9 +201,9 @@ def to_language(locale):\n \n def to_locale(language):\n     \"\"\"Turn a language name (en-us) into a locale name (en_US).\"\"\"\n-    language, _, country = language.lower().partition('-')\n+    lang, _, country = language.lower().partition('-')\n     if not country:\n-        return language\n+        return language[:3].lower() + language[3:]\n     # A language with > 2 characters after the dash only has its first\n     # character after the dash capitalized; e.g. sr-latn becomes sr_Latn.\n     # A language with 2 characters after the dash has both characters\n@@ -212,7 +212,7 @@ def to_locale(language):\n     country = country.title() if len(country) > 2 else country.upper()\n     if tail:\n         country += '-' + tail\n-    return language + '_' + country\n+    return lang + '_' + country\n \n \n def get_language_from_request(request, check_path=False):\n",
  "test_patch": "diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -313,9 +313,16 @@ def test_to_locale(self):\n             ('EN', 'en'),\n             ('en-us', 'en_US'),\n             ('EN-US', 'en_US'),\n+            ('en_US', 'en_US'),\n             # With > 2 characters after the dash.\n             ('sr-latn', 'sr_Latn'),\n             ('sr-LATN', 'sr_Latn'),\n+            ('sr_Latn', 'sr_Latn'),\n+            # 3-char language codes.\n+            ('ber-MA', 'ber_MA'),\n+            ('BER-MA', 'ber_MA'),\n+            ('BER_MA', 'ber_MA'),\n+            ('ber_MA', 'ber_MA'),\n             # With private use subtag (x-informal).\n             ('nl-nl-x-informal', 'nl_NL-x-informal'),\n             ('NL-NL-X-INFORMAL', 'nl_NL-x-informal'),\n",
  "problem_statement": "to_locale should be idempotent\nDescription\n\t\nIn summary:\n>>> from django.utils.translation import to_locale\n>>> to_locale('en-us')\n'en_US' # <- Fine\n>>> to_locale(to_locale('en-us'))\n'en_us' # <- Bad\nTypically, this breaks using e.g. django.utils.translation.override with a locale code like pt_BR or zh_Hans. of course, we could document that override takes a language code, not a locale code, but if we can support both without much effort, this would be a lot better.\n",
  "hints_text": "â€‹PR",
  "created_at": "2021-03-21T18:04:56Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_to_locale (i18n.tests.TranslationTests)\"]",
  "PASS_TO_PASS": "[\"OSError is raised if the default language is unparseable.\", \"test_check_for_language (i18n.tests.CountrySpecificLanguageTests)\", \"test_check_for_language_null (i18n.tests.CountrySpecificLanguageTests)\", \"test_get_language_from_request (i18n.tests.CountrySpecificLanguageTests)\", \"test_get_language_from_request_null (i18n.tests.CountrySpecificLanguageTests)\", \"test_specific_language_codes (i18n.tests.CountrySpecificLanguageTests)\", \"test_ignores_non_mo_files (i18n.tests.TranslationFileChangedTests)\", \"test_resets_cache_with_mo_files (i18n.tests.TranslationFileChangedTests)\", \"get_language_info return the first fallback language info if the lang_info\", \"test_localized_language_info (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code_and_country_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_only_country_code (i18n.tests.TestLanguageInfo)\", \"test_round_away_from_one (i18n.tests.UtilsTests)\", \"test_django_fallback (i18n.tests.DjangoFallbackResolutionOrderI18NTests)\", \"test_lazy (i18n.tests.TestModels)\", \"test_safestr (i18n.tests.TestModels)\", \"test_check_for_language (i18n.tests.NonDjangoLanguageTests)\", \"test_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"test_plural_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"Untranslated strings for territorial language variants use the\", \"\\\"loading_app\\\" does not have translations for all languages provided by\", \"test_bug14894_translation_activate_thread_safety (i18n.tests.TranslationThreadSafetyTests)\", \"test_i18n_app_dirs_ignore_django_apps (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_disabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_enabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_local_locale (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_locale_paths (i18n.tests.WatchForTranslationChangesTests)\", \"After setting LANGUAGE, the cache should be cleared and languages\", \"With a non-English LANGUAGE_CODE and if the active language is English\", \"test_get_language_from_path_null (i18n.tests.MiscTests)\", \"test_get_language_from_path_real (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_null (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_real (i18n.tests.MiscTests)\", \"test_i18n_patterns_returns_list (i18n.tests.MiscTests)\", \"Now test that we parse language preferences stored in a cookie correctly.\", \"Now test that we parse a literal HTTP header correctly.\", \"Testing HTTP header parsing. First, we test that we can parse the\", \"Some languages may have special fallbacks that don't follow the simple\", \"Some browsers (Firefox, IE, etc.) use deprecated language codes. As these\", \"test_locale_paths_override_app_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"test_locale_paths_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"test_app_translation (i18n.tests.AppResolutionOrderI18NTests)\", \"test_streaming_response (i18n.tests.LocaleMiddlewareTests)\", \"Empty value must stay empty after being translated (#23196).\", \"test_language_bidi (i18n.tests.TranslationTests)\", \"test_language_bidi_null (i18n.tests.TranslationTests)\", \"Format string interpolation should work with *_lazy objects.\", \"test_lazy_pickle (i18n.tests.TranslationTests)\", \"Translations on files with Mac or DOS end of lines will be converted\", \"Normally, French has 2 plurals. As other/locale/fr/LC_MESSAGES/django.po\", \"test_ngettext_lazy (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_bool (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_format_style (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_pickle (i18n.tests.TranslationTests)\", \"test_override (i18n.tests.TranslationTests)\", \"test_override_decorator (i18n.tests.TranslationTests)\", \"The language restored is the one used when the function was\", \"test_pgettext (i18n.tests.TranslationTests)\", \"Test plurals with ngettext. French differs from English in that 0 is singular.\", \"test_plural_null (i18n.tests.TranslationTests)\", \"Translating a string requiring no auto-escaping with gettext or pgettext\", \"test_to_language (i18n.tests.TranslationTests)\", \"With i18n_patterns(..., prefix_default_language=False), the default\", \"A request for a nonexistent URL shouldn't cause a redirect to\", \"test_other_lang_with_prefix (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_page_with_dash (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_unprefixed_language_other_than_accept_language (i18n.tests.UnprefixedDefaultLanguageTests)\", \"The first input format for DATE_INPUT_FORMATS, TIME_INPUT_FORMATS, and\", \"test_all_format_strings (i18n.tests.FormattingTests)\", \"The active locale's formats take precedence over the default settings\", \"test_format_arbitrary_settings (i18n.tests.FormattingTests)\", \"test_get_custom_format (i18n.tests.FormattingTests)\", \"test_get_format_modules_lang (i18n.tests.FormattingTests)\", \"test_get_format_modules_stability (i18n.tests.FormattingTests)\", \"Tests the iter_format_modules function.\", \"Tests the iter_format_modules function always yields format modules in\", \"Catalan locale with format i18n disabled translations will be used,\", \"test_l10n_enabled (i18n.tests.FormattingTests)\", \"Localization of numbers\", \"Test the {% localize %} templatetag and the localize/unlocalize filters.\", \"Tests if form input with 'as_hidden' or 'as_text' is correctly localized. Ticket #18777\", \"Tests if form input is correctly localized\", \"test_localized_input_func (i18n.tests.FormattingTests)\", \"A string representation is returned for unlocalized numbers.\", \"Tests django.utils.formats.sanitize_separators.\", \"Check if sublocales fall back to the main locale\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.683222",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}