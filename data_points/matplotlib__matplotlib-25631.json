{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25631",
  "base_commit": "a1f9e0fc03b5c4ec7eadef9723ea48168d0e992f",
  "patch": "diff --git a/lib/matplotlib/animation.py b/lib/matplotlib/animation.py\n--- a/lib/matplotlib/animation.py\n+++ b/lib/matplotlib/animation.py\n@@ -213,7 +213,13 @@ def grab_frame(self, **savefig_kwargs):\n         Grab the image information from the figure and save as a movie frame.\n \n         All keyword arguments in *savefig_kwargs* are passed on to the\n-        `~.Figure.savefig` call that saves the figure.\n+        `~.Figure.savefig` call that saves the figure.  However, several\n+        keyword arguments that are supported by `~.Figure.savefig` may not be\n+        passed as they are controlled by the MovieWriter:\n+\n+        - *dpi*, *bbox_inches*:  These may not be passed because each frame of the\n+           animation much be exactly the same size in pixels.\n+        - *format*: This is controlled by the MovieWriter.\n         \"\"\"\n \n     @abc.abstractmethod\n@@ -227,12 +233,18 @@ def saving(self, fig, outfile, dpi, *args, **kwargs):\n \n         ``*args, **kw`` are any parameters that should be passed to `setup`.\n         \"\"\"\n+        if mpl.rcParams['savefig.bbox'] == 'tight':\n+            _log.info(\"Disabling savefig.bbox = 'tight', as it may cause \"\n+                      \"frame size to vary, which is inappropriate for \"\n+                      \"animation.\")\n+\n         # This particular sequence is what contextlib.contextmanager wants\n         self.setup(fig, outfile, dpi, *args, **kwargs)\n-        try:\n-            yield self\n-        finally:\n-            self.finish()\n+        with mpl.rc_context({'savefig.bbox': None}):\n+            try:\n+                yield self\n+            finally:\n+                self.finish()\n \n \n class MovieWriter(AbstractMovieWriter):\n@@ -351,6 +363,7 @@ def finish(self):\n \n     def grab_frame(self, **savefig_kwargs):\n         # docstring inherited\n+        _validate_grabframe_kwargs(savefig_kwargs)\n         _log.debug('MovieWriter.grab_frame: Grabbing frame.')\n         # Readjust the figure size in case it has been changed by the user.\n         # All frames must have the same size to save the movie correctly.\n@@ -457,6 +470,7 @@ def _base_temp_name(self):\n     def grab_frame(self, **savefig_kwargs):\n         # docstring inherited\n         # Creates a filename for saving using basename and counter.\n+        _validate_grabframe_kwargs(savefig_kwargs)\n         path = Path(self._base_temp_name() % self._frame_counter)\n         self._temp_paths.append(path)  # Record the filename for later use.\n         self._frame_counter += 1  # Ensures each created name is unique.\n@@ -491,6 +505,7 @@ def setup(self, fig, outfile, dpi=None):\n         self._frames = []\n \n     def grab_frame(self, **savefig_kwargs):\n+        _validate_grabframe_kwargs(savefig_kwargs)\n         buf = BytesIO()\n         self.fig.savefig(\n             buf, **{**savefig_kwargs, \"format\": \"rgba\", \"dpi\": self.dpi})\n@@ -747,6 +762,7 @@ def setup(self, fig, outfile, dpi=None, frame_dir=None):\n         self._clear_temp = False\n \n     def grab_frame(self, **savefig_kwargs):\n+        _validate_grabframe_kwargs(savefig_kwargs)\n         if self.embed_frames:\n             # Just stop processing if we hit the limit\n             if self._hit_limit:\n@@ -1051,10 +1067,6 @@ def func(current_frame: int, total_frames: int) -> Any\n         # TODO: Right now, after closing the figure, saving a movie won't work\n         # since GUI widgets are gone. Either need to remove extra code to\n         # allow for this non-existent use case or find a way to make it work.\n-        if mpl.rcParams['savefig.bbox'] == 'tight':\n-            _log.info(\"Disabling savefig.bbox = 'tight', as it may cause \"\n-                      \"frame size to vary, which is inappropriate for \"\n-                      \"animation.\")\n \n         facecolor = savefig_kwargs.get('facecolor',\n                                        mpl.rcParams['savefig.facecolor'])\n@@ -1070,10 +1082,8 @@ def _pre_composite_to_white(color):\n         # canvas._is_saving = True makes the draw_event animation-starting\n         # callback a no-op; canvas.manager = None prevents resizing the GUI\n         # widget (both are likewise done in savefig()).\n-        with mpl.rc_context({'savefig.bbox': None}), \\\n-             writer.saving(self._fig, filename, dpi), \\\n-             cbook._setattr_cm(self._fig.canvas,\n-                               _is_saving=True, manager=None):\n+        with writer.saving(self._fig, filename, dpi), \\\n+             cbook._setattr_cm(self._fig.canvas, _is_saving=True, manager=None):\n             for anim in all_anim:\n                 anim._init_draw()  # Clear the initial frame\n             frame_number = 0\n@@ -1776,3 +1786,16 @@ def _draw_frame(self, framedata):\n                 a.set_animated(self._blit)\n \n     save_count = _api.deprecate_privatize_attribute(\"3.7\")\n+\n+\n+def _validate_grabframe_kwargs(savefig_kwargs):\n+    if mpl.rcParams['savefig.bbox'] == 'tight':\n+        raise ValueError(\n+            f\"{mpl.rcParams['savefig.bbox']=} must not be 'tight' as it \"\n+            \"may cause frame size to vary, which is inappropriate for animation.\"\n+        )\n+    for k in ('dpi', 'bbox_inches', 'format'):\n+        if k in savefig_kwargs:\n+            raise TypeError(\n+                f\"grab_frame got an unexpected keyword argument {k!r}\"\n+            )\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_animation.py b/lib/matplotlib/tests/test_animation.py\n--- a/lib/matplotlib/tests/test_animation.py\n+++ b/lib/matplotlib/tests/test_animation.py\n@@ -62,6 +62,8 @@ def setup(self, fig, outfile, dpi, *args):\n         self._count = 0\n \n     def grab_frame(self, **savefig_kwargs):\n+        from matplotlib.animation import _validate_grabframe_kwargs\n+        _validate_grabframe_kwargs(savefig_kwargs)\n         self.savefig_kwargs = savefig_kwargs\n         self._count += 1\n \n@@ -193,6 +195,38 @@ def test_save_animation_smoketest(tmpdir, writer, frame_format, output, anim):\n     del anim\n \n \n+@pytest.mark.parametrize('writer, frame_format, output', gen_writers())\n+def test_grabframe(tmpdir, writer, frame_format, output):\n+    WriterClass = animation.writers[writer]\n+\n+    if frame_format is not None:\n+        plt.rcParams[\"animation.frame_format\"] = frame_format\n+\n+    fig, ax = plt.subplots()\n+\n+    dpi = None\n+    codec = None\n+    if writer == 'ffmpeg':\n+        # Issue #8253\n+        fig.set_size_inches((10.85, 9.21))\n+        dpi = 100.\n+        codec = 'h264'\n+\n+    test_writer = WriterClass()\n+    # Use temporary directory for the file-based writers, which produce a file\n+    # per frame with known names.\n+    with tmpdir.as_cwd():\n+        with test_writer.saving(fig, output, dpi):\n+            # smoke test it works\n+            test_writer.grab_frame()\n+            for k in {'dpi', 'bbox_inches', 'format'}:\n+                with pytest.raises(\n+                        TypeError,\n+                        match=f\"grab_frame got an unexpected keyword argument {k!r}\"\n+                ):\n+                    test_writer.grab_frame(**{k: object()})\n+\n+\n @pytest.mark.parametrize('writer', [\n     pytest.param(\n         'ffmpeg', marks=pytest.mark.skipif(\n",
  "problem_statement": "[Bug]: `bbox_inches=\"tight\"` does not work for writer.grab_frame()\n### Bug summary\n\n `bbox_inches=\"tight\"` will make snowflake movie in the example.\r\n\r\nThe example runs fine after removing  `bbox_inches=\"tight\"`.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.animation import FFMpegWriter\r\nimport numpy as np\r\n\r\nfig, ax = plt.subplots()\r\n\r\nmoviewriter = FFMpegWriter()\r\n\r\nmoviewriter.setup(fig, 'movie.mp4', dpi=200)\r\n\r\n\r\nline = ax.plot([], [])[0]\r\n    \r\n    \r\nx = np.linspace(0,2*np.pi,20)\r\nax.set(xlim=[0, 2*np.pi], ylim=[-1.1, 1.1])\r\nfor t in np.linspace(0,2*np.pi,20):    \r\n    line.set_data(x, np.sin(x-t))\r\n    moviewriter.grab_frame(bbox_inches='tight')\r\n    \r\nmoviewriter.finish()\n```\n\n\n### Actual outcome\n\n\r\nhttps://user-images.githubusercontent.com/5205922/229658612-06326a41-eaeb-4bb5-8151-c04954eb8458.mp4\r\n\r\n\n\n### Expected outcome\n\n\r\nhttps://user-images.githubusercontent.com/5205922/229658664-691f81ae-4fa4-4613-9b8a-43657ff8b66d.mp4\r\n\r\n\n\n### Additional information\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.7.1\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nNone\n",
  "hints_text": "Bbox_inches tight basically changes the size of the canvas every frame.  I guess a todo might be to lock that option out, but the work around is to not do that. \nCan we resize the size for first frame and then fix to that size?\nI do not have FFMpeg installed to try, but \r\n```\r\nfig, ax = plt.subplots(layout='tight')\r\n```\r\n*may* work.\r\n\r\nEdit: possibly `layout='compressed'` may be more well behaved.\nThanks, @oscargus \r\n\r\n`layout='tight'` or `layout='compressed'` will change sizes of axes, I have multiple axes and do not want to change their sizes and the alyout.\nThe example works for me if I replace `FFMpegWriter` with `FFMpegFileWriter`.  Is that any good to you?\n> `layout='tight'` or `layout='compressed'` will change sizes of axes, I have multiple axes and do not want to change their sizes and the layout.\r\n\r\n`bbox_inches='tight'` makes the figure bigger, which changes the layout as well.  If you are using a manual layout, is there any reason you cannot make it fit inside the figure to start with?  \r\n\n> FFMpegFileWriter\r\n\r\nTahnks, @rcomer \r\n\r\nIt works for the example, but it won't work if I add something out of bounds, e.g.:\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.animation import FFMpegFileWriter\r\nimport numpy as np\r\n\r\nfig, ax = plt.subplots()\r\nmoviewriter = FFMpegFileWriter()\r\nmoviewriter.setup(fig, 'movie.mp4', dpi=200)\r\n\r\nline = ax.plot([], [])[0]\r\nax.text(1.5,1.5,'helloworld',)\r\n    \r\nx = np.linspace(0,2*np.pi,20)\r\nax.set(xlim=[0, 2*np.pi], ylim=[-1.1, 1.1])\r\nfor t in np.linspace(0,2*np.pi,20):    \r\n    line.set_data(x, np.sin(x-t))\r\n    moviewriter.grab_frame(bbox_inches='tight')\r\n    \r\nmoviewriter.finish()\r\n```\n> > `layout='tight'` or `layout='compressed'` will change sizes of axes, I have multiple axes and do not want to change their sizes and the layout.\r\n> \r\n> `bbox_inches='tight'` makes the figure bigger, which changes the layout as well. If you are using a manual layout, is there any reason you cannot make it fit inside the figure to start with?\r\n\r\nI am creating a plotting tool that user can add new axes to canvas (figure) with new locations. They can sit outside the existing canvas and this works with `figsave(bbox_inches='tight')`  as it crops to the minimum extent of all artists\r\n\r\n\nThe core of the problem is that when you set up the writer it looks at how big the figure is when rendered (NxM pixels as RGBA).  Those values are passed to ffmpeg and it then expects NxMx4 byets per-frame to be pushed into stdin.   If you then pass frames that are either bigger or smaller ffmpeg does not know that, it is just wrapping the linear sequence of bytes into the size your promised to send it.\r\n\r\nIf there are are a different number of columns than you started with then the extra (missing) pixels will be wrapped and each row will be shifted right (left) relative to the row above.  This is why in the bad video it looks skewed.\r\n\r\nIf there are more (or less) rows that we told ffmeg the extra rows either get put at the top of the next frame are are added to the previous frame until the frame is full.   This is the source of the vertically moving black line line (that is likely the top or bottom of the Axes).\r\n\r\nEven if we managed to get `setup(...)` to be aware of `bbox_inches='tight'` it would not be generically safe to use because if an animation frame adds something out side / removes something then the animation will break because the rendered size of the frame changed.  I do not think that zero-padding the resulting image or cropping it make much sense to try because it would both be complicated and you would have to decide were to pad/crop.  This might save you from a \"starflake\" movie, but your animation could jump around.\r\n\r\nWe actually have a fair amount of logic in `grab_frame(...)` to make sure that we resize the figure back to the size it was when we called `setup(...)` however all of that is defeated by `bbox_inches='tight'`: https://github.com/matplotlib/matplotlib/blob/8ca75e445d136764bbc28d8db7346c261e8c6c41/lib/matplotlib/animation.py#L352-L360\r\n\r\nUnfortunately I think the right course of action here is for `grab_frame` to raise if `bbox_inches` is passed at all (even a fixed bounding box will be problematic if `setup(...)` did not know about it.\r\n\nI think all of `bbox_inches`, `dpi`, and `format` need to be forbidden (and some will fail with `TypeError` now on some of the MovieWriters.",
  "created_at": "2023-04-05T20:43:18Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_animation.py::test_null_movie_writer\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-null-None-movie.null]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-null-None-output35]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[ffmpeg-rgba-movie.mp4]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[ffmpeg-rgba-output1]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[ffmpeg_file-png-movie.mp4]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[ffmpeg_file-png-output3]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[ffmpeg_file-jpeg-movie.mp4]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[ffmpeg_file-jpeg-output5]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[ffmpeg_file-tiff-movie.mp4]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[ffmpeg_file-tiff-output7]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[ffmpeg_file-raw-movie.mp4]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[ffmpeg_file-raw-output9]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[ffmpeg_file-rgba-movie.mp4]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[ffmpeg_file-rgba-output11]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[imagemagick-rgba-movie.gif]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[imagemagick-rgba-output13]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[imagemagick_file-png-movie.gif]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[imagemagick_file-png-output15]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[imagemagick_file-jpeg-movie.gif]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[imagemagick_file-jpeg-output17]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[imagemagick_file-tiff-movie.gif]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[imagemagick_file-tiff-output19]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[imagemagick_file-raw-movie.gif]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[imagemagick_file-raw-output21]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[imagemagick_file-rgba-movie.gif]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[imagemagick_file-rgba-output23]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[pillow-None-movie.gif]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[pillow-None-output25]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[html-png-movie.html]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[html-png-output27]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[html-jpeg-movie.html]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[html-jpeg-output29]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[html-tiff-movie.html]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[html-tiff-output31]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[html-svg-movie.html]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[html-svg-output33]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[null-None-movie.null]\", \"lib/matplotlib/tests/test_animation.py::test_grabframe[null-None-output35]\", \"lib/matplotlib/tests/test_animation.py::test_no_length_frames[anim0]\", \"lib/matplotlib/tests/test_animation.py::test_funcanimation_cache_frame_data[False]\", \"lib/matplotlib/tests/test_animation.py::test_funcanimation_cache_frame_data[True]\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_animation.py::test_animation_delete[anim0]\", \"lib/matplotlib/tests/test_animation.py::test_movie_writer_dpi_default\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-ffmpeg-rgba-movie.mp4]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-ffmpeg-rgba-output1]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-ffmpeg_file-png-movie.mp4]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-ffmpeg_file-png-output3]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-ffmpeg_file-jpeg-movie.mp4]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-ffmpeg_file-jpeg-output5]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-ffmpeg_file-tiff-movie.mp4]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-ffmpeg_file-tiff-output7]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-ffmpeg_file-raw-movie.mp4]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-ffmpeg_file-raw-output9]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-ffmpeg_file-rgba-movie.mp4]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-ffmpeg_file-rgba-output11]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-imagemagick-rgba-movie.gif]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-imagemagick-rgba-output13]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-imagemagick_file-png-movie.gif]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-imagemagick_file-png-output15]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-imagemagick_file-jpeg-movie.gif]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-imagemagick_file-jpeg-output17]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-imagemagick_file-tiff-movie.gif]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-imagemagick_file-tiff-output19]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-imagemagick_file-raw-movie.gif]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-imagemagick_file-raw-output21]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-imagemagick_file-rgba-movie.gif]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-imagemagick_file-rgba-output23]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-pillow-None-movie.gif]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-pillow-None-output25]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-html-png-movie.html]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-html-png-output27]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-html-jpeg-movie.html]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-html-jpeg-output29]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-html-tiff-movie.html]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-html-tiff-output31]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-html-svg-movie.html]\", \"lib/matplotlib/tests/test_animation.py::test_save_animation_smoketest[anim0-html-svg-output33]\", \"lib/matplotlib/tests/test_animation.py::test_animation_repr_html[anim0-none-None-ffmpeg]\", \"lib/matplotlib/tests/test_animation.py::test_animation_repr_html[anim0-none-None-imagemagick]\", \"lib/matplotlib/tests/test_animation.py::test_animation_repr_html[anim0-html5-<video\", \"lib/matplotlib/tests/test_animation.py::test_animation_repr_html[anim0-jshtml-<script\", \"lib/matplotlib/tests/test_animation.py::test_movie_writer_registry\", \"lib/matplotlib/tests/test_animation.py::test_embed_limit[anim0-to_html5_video]\", \"lib/matplotlib/tests/test_animation.py::test_embed_limit[anim0-to_jshtml]\", \"lib/matplotlib/tests/test_animation.py::test_cleanup_temporaries[anim0-to_html5_video]\", \"lib/matplotlib/tests/test_animation.py::test_cleanup_temporaries[anim0-to_jshtml]\", \"lib/matplotlib/tests/test_animation.py::test_failing_ffmpeg\", \"lib/matplotlib/tests/test_animation.py::test_draw_frame[None]\", \"lib/matplotlib/tests/test_animation.py::test_draw_frame[string]\", \"lib/matplotlib/tests/test_animation.py::test_draw_frame[1]\", \"lib/matplotlib/tests/test_animation.py::test_draw_frame[return_value3]\", \"lib/matplotlib/tests/test_animation.py::test_draw_frame[artist]\", \"lib/matplotlib/tests/test_animation.py::test_exhausted_animation\", \"lib/matplotlib/tests/test_animation.py::test_no_frame_warning\", \"lib/matplotlib/tests/test_animation.py::test_animation_frame[png]\", \"lib/matplotlib/tests/test_animation.py::test_save_count_override_warnings_has_length[anim0]\", \"lib/matplotlib/tests/test_animation.py::test_save_count_override_warnings_scaler[anim0]\", \"lib/matplotlib/tests/test_animation.py::test_disable_cache_warning[anim0]\", \"lib/matplotlib/tests/test_animation.py::test_movie_writer_invalid_path\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.823162",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}