{
  "repo": "django/django",
  "instance_id": "django__django-12185",
  "base_commit": "5708327c3769262b845730996ca2784245ada4d1",
  "patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -100,7 +100,10 @@ def __invert__(self):\n     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):\n         # We must promote any new joins to left outer joins so that when Q is\n         # used as an expression, rows aren't filtered due to joins.\n-        clause, joins = query._add_q(self, reuse, allow_joins=allow_joins, split_subq=False)\n+        clause, joins = query._add_q(\n+            self, reuse, allow_joins=allow_joins, split_subq=False,\n+            check_filterable=False,\n+        )\n         query.promote_joins(joins)\n         return clause\n \ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1114,7 +1114,7 @@ def check_related_objects(self, field, value, opts):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', 'True'):\n+        if not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n@@ -1190,7 +1190,7 @@ def try_transform(self, lhs, name):\n \n     def build_filter(self, filter_expr, branch_negated=False, current_negated=False,\n                      can_reuse=None, allow_joins=True, split_subq=True,\n-                     reuse_with_filtered_relation=False):\n+                     reuse_with_filtered_relation=False, check_filterable=True):\n         \"\"\"\n         Build a WhereNode for a single filter clause but don't add it\n         to this Query. Query.add_q() will then add this filter to the where\n@@ -1229,6 +1229,7 @@ def build_filter(self, filter_expr, branch_negated=False, current_negated=False,\n                 used_aliases=can_reuse,\n                 allow_joins=allow_joins,\n                 split_subq=split_subq,\n+                check_filterable=check_filterable,\n             )\n         if hasattr(filter_expr, 'resolve_expression'):\n             if not getattr(filter_expr, 'conditional', False):\n@@ -1244,7 +1245,8 @@ def build_filter(self, filter_expr, branch_negated=False, current_negated=False,\n             raise FieldError(\"Cannot parse keyword query %r\" % arg)\n         lookups, parts, reffed_expression = self.solve_lookup_type(arg)\n \n-        self.check_filterable(reffed_expression)\n+        if check_filterable:\n+            self.check_filterable(reffed_expression)\n \n         if not allow_joins and len(parts) > 1:\n             raise FieldError(\"Joined field references are not permitted in this query\")\n@@ -1253,7 +1255,8 @@ def build_filter(self, filter_expr, branch_negated=False, current_negated=False,\n         value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n \n-        self.check_filterable(value)\n+        if check_filterable:\n+            self.check_filterable(value)\n \n         clause = self.where_class()\n         if reffed_expression:\n@@ -1349,7 +1352,8 @@ def build_where(self, filter_expr):\n         return self.build_filter(filter_expr, allow_joins=False)[0]\n \n     def _add_q(self, q_object, used_aliases, branch_negated=False,\n-               current_negated=False, allow_joins=True, split_subq=True):\n+               current_negated=False, allow_joins=True, split_subq=True,\n+               check_filterable=True):\n         \"\"\"Add a Q-object to the current filter.\"\"\"\n         connector = q_object.connector\n         current_negated = current_negated ^ q_object.negated\n@@ -1361,7 +1365,7 @@ def _add_q(self, q_object, used_aliases, branch_negated=False,\n             child_clause, needed_inner = self.build_filter(\n                 child, can_reuse=used_aliases, branch_negated=branch_negated,\n                 current_negated=current_negated, allow_joins=allow_joins,\n-                split_subq=split_subq,\n+                split_subq=split_subq, check_filterable=check_filterable,\n             )\n             joinpromoter.add_votes(needed_inner)\n             if child_clause:\n",
  "test_patch": "diff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -4,8 +4,8 @@\n from django.core.exceptions import FieldError\n from django.db import NotSupportedError, connection\n from django.db.models import (\n-    F, Func, OuterRef, Q, RowRange, Subquery, Value, ValueRange, Window,\n-    WindowFrame,\n+    BooleanField, Case, F, Func, OuterRef, Q, RowRange, Subquery, Value,\n+    ValueRange, When, Window, WindowFrame,\n )\n from django.db.models.aggregates import Avg, Max, Min, Sum\n from django.db.models.functions import (\n@@ -846,6 +846,22 @@ def test_invalid_filter(self):\n         with self.assertRaisesMessage(NotSupportedError, msg):\n             qs.annotate(total=Sum('dense_rank', filter=Q(name='Jones'))).filter(total=1)\n \n+    def test_conditional_annotation(self):\n+        qs = Employee.objects.annotate(\n+            dense_rank=Window(expression=DenseRank()),\n+        ).annotate(\n+            equal=Case(\n+                When(id=F('dense_rank'), then=Value(True)),\n+                default=Value(False),\n+                output_field=BooleanField(),\n+            ),\n+        )\n+        # The SQL standard disallows referencing window functions in the WHERE\n+        # clause.\n+        msg = 'Window is disallowed in the filter clause'\n+        with self.assertRaisesMessage(NotSupportedError, msg):\n+            qs.filter(equal=True)\n+\n     def test_invalid_order_by(self):\n         msg = 'order_by must be either an Expression or a sequence of expressions'\n         with self.assertRaisesMessage(ValueError, msg):\n",
  "problem_statement": "Window expression are not allowed in conditional statements used only in the SELECT clause.\nDescription\n\t\nDjango raises NotSupportedError when using window expressions in conditional statements used only in the SELECT clause, e.g.\nEmployee.objects.annotate(\n\tlag=Window(\n\t\texpression=Lag(expression='salary', offset=1),\n\t\tpartition_by=F('department'),\n\t\torder_by=[F('salary').asc(), F('name').asc()],\n\t),\n\tis_changed=Case(\n\t\tWhen(salary=F('lag'), then=Value(False)),\n\t\tdefault=Value(True), output_field=BooleanField()\n\t),\n)\nThe SQL standard disallows referencing window functions in the WHERE clause but in this case it's only used in the SELECT clause so this should be possible.\nThanks utapyngo for the report.\nRegression in 4edad1ddf6203326e0be4bdb105beecb0fe454c4.\n",
  "hints_text": "So it seems a bugfix would envolve moving the raise from build_filter to add_q. And we would have to propagate the necessity of the raise somehow, in WhereNode or as an additional return param.\nGiven build_filter now calls _add_q on the master branch the solution will probably involve adding a new kwarg to disable the check_filterable check instead instead.\nYeah, that works too (and is easier to implement). Btw the comment in _add_q Add a Q-object to the current filter seems to be misleading, considering the usage in CASE-WHEN...\nAgreed that the comment is misleading, it has been for a while though. The whole interactions between _add_q, add_q, and build_filter could probably be better expressed as add_q, _build_q, and build_filter as only add_q actually append nodes to the current query. The other methods only make sure query.aliases contains Join references to table necessary for the filter conditions.",
  "created_at": "2019-12-05T16:13:43Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_conditional_annotation (expressions_window.tests.NonQueryWindowTests)\"]",
  "PASS_TO_PASS": "[\"test_unsupported_backend (expressions_window.tests.WindowUnsupportedTests)\", \"test_empty_group_by_cols (expressions_window.tests.NonQueryWindowTests)\", \"test_frame_empty_group_by_cols (expressions_window.tests.NonQueryWindowTests)\", \"test_frame_window_frame_notimplemented (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_filter (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_order_by (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_source_expression (expressions_window.tests.NonQueryWindowTests)\", \"test_window_frame_repr (expressions_window.tests.NonQueryWindowTests)\", \"test_window_repr (expressions_window.tests.NonQueryWindowTests)\", \"test_avg_salary_department (expressions_window.tests.WindowFunctionTests)\", \"test_cume_dist (expressions_window.tests.WindowFunctionTests)\", \"test_dense_rank (expressions_window.tests.WindowFunctionTests)\", \"test_department_salary (expressions_window.tests.WindowFunctionTests)\", \"Window expressions can't be used in an INSERT statement.\", \"Window expressions can't be used in an UPDATE statement.\", \"test_first_value (expressions_window.tests.WindowFunctionTests)\", \"test_function_list_of_values (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_end_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_start_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_end_row_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_end_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_start_row_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_start_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_lag (expressions_window.tests.WindowFunctionTests)\", \"test_last_value (expressions_window.tests.WindowFunctionTests)\", \"test_lead (expressions_window.tests.WindowFunctionTests)\", \"test_lead_default (expressions_window.tests.WindowFunctionTests)\", \"test_lead_offset (expressions_window.tests.WindowFunctionTests)\", \"test_max_per_year (expressions_window.tests.WindowFunctionTests)\", \"An alternative way to specify a query for FirstValue.\", \"test_multiple_ordering (expressions_window.tests.WindowFunctionTests)\", \"test_multiple_partitioning (expressions_window.tests.WindowFunctionTests)\", \"test_nth_returns_null (expressions_window.tests.WindowFunctionTests)\", \"test_nthvalue (expressions_window.tests.WindowFunctionTests)\", \"test_ntile (expressions_window.tests.WindowFunctionTests)\", \"test_percent_rank (expressions_window.tests.WindowFunctionTests)\", \"test_range_n_preceding_and_following (expressions_window.tests.WindowFunctionTests)\", \"A query with RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING.\", \"test_rank (expressions_window.tests.WindowFunctionTests)\", \"test_row_number (expressions_window.tests.WindowFunctionTests)\", \"test_row_number_no_ordering (expressions_window.tests.WindowFunctionTests)\", \"test_row_range_rank (expressions_window.tests.WindowFunctionTests)\", \"test_subquery_row_range_rank (expressions_window.tests.WindowFunctionTests)\", \"test_window_expression_within_subquery (expressions_window.tests.WindowFunctionTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.617250",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}