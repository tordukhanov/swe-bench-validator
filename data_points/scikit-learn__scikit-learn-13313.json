{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13313",
  "base_commit": "cdfca8cba33be63ef50ba9e14d8823cc551baf92",
  "patch": "diff --git a/sklearn/utils/estimator_checks.py b/sklearn/utils/estimator_checks.py\n--- a/sklearn/utils/estimator_checks.py\n+++ b/sklearn/utils/estimator_checks.py\n@@ -1992,7 +1992,10 @@ def check_class_weight_balanced_linear_classifier(name, Classifier):\n     classifier.set_params(class_weight=class_weight)\n     coef_manual = classifier.fit(X, y).coef_.copy()\n \n-    assert_allclose(coef_balanced, coef_manual)\n+    assert_allclose(coef_balanced, coef_manual,\n+                    err_msg=\"Classifier %s is not computing\"\n+                    \" class_weight=balanced properly.\"\n+                    % name)\n \n \n @ignore_warnings(category=(DeprecationWarning, FutureWarning))\n",
  "test_patch": "diff --git a/sklearn/utils/tests/test_estimator_checks.py b/sklearn/utils/tests/test_estimator_checks.py\n--- a/sklearn/utils/tests/test_estimator_checks.py\n+++ b/sklearn/utils/tests/test_estimator_checks.py\n@@ -13,6 +13,8 @@\n                                    assert_equal, ignore_warnings,\n                                    assert_warns, assert_raises)\n from sklearn.utils.estimator_checks import check_estimator\n+from sklearn.utils.estimator_checks \\\n+    import check_class_weight_balanced_linear_classifier\n from sklearn.utils.estimator_checks import set_random_state\n from sklearn.utils.estimator_checks import set_checking_parameters\n from sklearn.utils.estimator_checks import check_estimators_unfitted\n@@ -190,6 +192,28 @@ def predict(self, X):\n         return np.ones(X.shape[0])\n \n \n+class BadBalancedWeightsClassifier(BaseBadClassifier):\n+    def __init__(self, class_weight=None):\n+        self.class_weight = class_weight\n+\n+    def fit(self, X, y):\n+        from sklearn.preprocessing import LabelEncoder\n+        from sklearn.utils import compute_class_weight\n+\n+        label_encoder = LabelEncoder().fit(y)\n+        classes = label_encoder.classes_\n+        class_weight = compute_class_weight(self.class_weight, classes, y)\n+\n+        # Intentionally modify the balanced class_weight\n+        # to simulate a bug and raise an exception\n+        if self.class_weight == \"balanced\":\n+            class_weight += 1.\n+\n+        # Simply assigning coef_ to the class_weight\n+        self.coef_ = class_weight\n+        return self\n+\n+\n class BadTransformerWithoutMixin(BaseEstimator):\n     def fit(self, X, y=None):\n         X = check_array(X)\n@@ -471,6 +495,16 @@ def run_tests_without_pytest():\n     runner.run(suite)\n \n \n+def test_check_class_weight_balanced_linear_classifier():\n+    # check that ill-computed balanced weights raises an exception\n+    assert_raises_regex(AssertionError,\n+                        \"Classifier estimator_name is not computing\"\n+                        \" class_weight=balanced properly.\",\n+                        check_class_weight_balanced_linear_classifier,\n+                        'estimator_name',\n+                        BadBalancedWeightsClassifier)\n+\n+\n if __name__ == '__main__':\n     # This module is run as a script to check that we have no dependency on\n     # pytest for estimator checks.\n",
  "problem_statement": "check_class_weight_balanced_classifiers is never run?!\n> git grep check_class_weight_balanced_classifiers\r\nsklearn/utils/estimator_checks.py:def check_class_weight_balanced_classifiers(name, Classifier, X_train, y_train,\r\n\r\nSame for ``check_class_weight_balanced_linear_classifier``\n",
  "hints_text": "`check_class_weight_balanced_linear_classifier` is run at tests/test_common.\r\n```\r\ngit grep check_class_weight_balanced_linear_classifier\r\nsklearn/tests/test_common.py:    check_class_weight_balanced_linear_classifier)\r\nsklearn/tests/test_common.py:        yield _named_check(check_class_weight_balanced_linear_classifier,\r\nsklearn/utils/estimator_checks.py:def check_class_weight_balanced_linear_classifier(name, Classifier):\r\n```\r\n\r\nI can implement a test for `check_class_weight_balanced_classifiers` if that is what we want.\nyeah that's what we want",
  "created_at": "2019-02-27T15:51:20Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/utils/tests/test_estimator_checks.py::test_check_class_weight_balanced_linear_classifier\"]",
  "PASS_TO_PASS": "[\"sklearn/utils/tests/test_estimator_checks.py::test_check_fit_score_takes_y_works_on_deprecated_fit\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_outlier_corruption\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator_transformer_no_mixin\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator_clones\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_no_attributes_set_in_init\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator_pairwise\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.992408",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}