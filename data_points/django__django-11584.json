{
  "repo": "django/django",
  "instance_id": "django__django-11584",
  "base_commit": "fed5e19369f456e41f0768f4fb92602af027a46d",
  "patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -240,8 +240,15 @@ def __init__(self):\n \n     def watch_dir(self, path, glob):\n         path = Path(path)\n-        if not path.is_absolute():\n-            raise ValueError('%s must be absolute.' % path)\n+        try:\n+            path = path.absolute()\n+        except FileNotFoundError:\n+            logger.debug(\n+                'Unable to watch directory %s as it cannot be resolved.',\n+                path,\n+                exc_info=True,\n+            )\n+            return\n         logger.debug('Watching dir %s with glob %s.', path, glob)\n         self.directory_globs[path].add(glob)\n \ndiff --git a/django/utils/translation/reloader.py b/django/utils/translation/reloader.py\n--- a/django/utils/translation/reloader.py\n+++ b/django/utils/translation/reloader.py\n@@ -14,8 +14,7 @@ def watch_for_translation_changes(sender, **kwargs):\n         directories.extend(Path(config.path) / 'locale' for config in apps.get_app_configs())\n         directories.extend(Path(p) for p in settings.LOCALE_PATHS)\n         for path in directories:\n-            absolute_path = path.absolute()\n-            sender.watch_dir(absolute_path, '**/*.mo')\n+            sender.watch_dir(path, '**/*.mo')\n \n \n def translation_file_changed(sender, file_path, **kwargs):\n",
  "test_patch": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -499,6 +499,12 @@ def test_overlapping_glob_recursive(self, mocked_modules, notify_mock):\n class BaseReloaderTests(ReloaderTests):\n     RELOADER_CLS = autoreload.BaseReloader\n \n+    def test_watch_dir_with_unresolvable_path(self):\n+        path = Path('unresolvable_directory')\n+        with mock.patch.object(Path, 'absolute', side_effect=FileNotFoundError):\n+            self.reloader.watch_dir(path, '**/*.mo')\n+        self.assertEqual(list(self.reloader.directory_globs), [])\n+\n     def test_watch_with_glob(self):\n         self.reloader.watch_dir(self.tempdir, '*.py')\n         watched_files = list(self.reloader.watched_files())\n",
  "problem_statement": "[FATAL] FileNotFoundError with runserver command inside Docker container\nDescription\n\t\nSummary\nTrying to run the development server in a container with volume-mounted source is throwing a FileNotFoundError. I've verified that the issue is consistently reproducible with Django==2.2.3 and not present in Django==2.1.4.\nTrace\n**INFO** /code/publications/models.py changed, reloading.\n**INFO** Watching for file changes with StatReloader\nPerforming system checks...\nTraceback (most recent call last):\n File \"manage.py\", line 21, in <module>\n\tmain()\n File \"manage.py\", line 17, in main\n\texecute_from_command_line(sys.argv)\n File \"/usr/local/lib/python3.6/site-packages/django/core/management/__init__.py\", line 381, in execute_from_command_line\n\tutility.execute()\n File \"/usr/local/lib/python3.6/site-packages/django/core/management/__init__.py\", line 375, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/usr/local/lib/python3.6/site-packages/django/core/management/base.py\", line 323, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"/usr/local/lib/python3.6/site-packages/django/core/management/commands/runserver.py\", line 60, in execute\n\tsuper().execute(*args, **options)\n File \"/usr/local/lib/python3.6/site-packages/django/core/management/base.py\", line 364, in execute\n\toutput = self.handle(*args, **options)\n File \"/usr/local/lib/python3.6/site-packages/django/core/management/commands/runserver.py\", line 95, in handle\n\tself.run(**options)\n File \"/usr/local/lib/python3.6/site-packages/django/core/management/commands/runserver.py\", line 102, in run\n\tautoreload.run_with_reloader(self.inner_run, **options)\n File \"/usr/local/lib/python3.6/site-packages/django/utils/autoreload.py\", line 587, in run_with_reloader\n\tstart_django(reloader, main_func, *args, **kwargs)\n File \"/usr/local/lib/python3.6/site-packages/django/utils/autoreload.py\", line 572, in start_django\n\treloader.run(django_main_thread)\n File \"/usr/local/lib/python3.6/site-packages/django/utils/autoreload.py\", line 289, in run\n\tautoreload_started.send(sender=self)\n File \"/usr/local/lib/python3.6/site-packages/django/dispatch/dispatcher.py\", line 175, in send\n\tfor receiver in self._live_receivers(sender)\n File \"/usr/local/lib/python3.6/site-packages/django/dispatch/dispatcher.py\", line 175, in <listcomp>\n\tfor receiver in self._live_receivers(sender)\n File \"/usr/local/lib/python3.6/site-packages/django/utils/translation/reloader.py\", line 16, in watch_for_translation_changes\n\tabsolute_path = path.absolute()\n File \"/usr/local/lib/python3.6/pathlib.py\", line 1129, in absolute\n\tobj = self._from_parts([os.getcwd()] + self._parts, init=False)\nFileNotFoundError: [Errno 2] No such file or directory\nConfiguration\nDockerfile\nFROM python:3.6.7-alpine3.7\nRUN mkdir /code\nWORKDIR /code\nRUN apk add postgresql-dev libffi-dev build-base musl-dev\nRUN apk add linux-headers\nADD requirements.txt .\nRUN pip install -r requirements.txt\nEXPOSE 3031\nADD cs /code\ndocker-compose\nversion: '3.7'\nservices:\n db:\n\timage: postgres\n\tvolumes:\n\t - ./pg_data:/var/lib/postgresql/data\n\tports:\n\t - \"5432:5432\"\n\tenvironment:\n\t POSTGRES_PASSWORD: postgres\n\t POSTGRES_USER: postgres\n\t POSTGRES_DB: postgres\n app:\n\tbuild:\n\t context: .\n\tvolumes:\n\t - ./cs/:/code/\n\tports:\n\t - \"8000:8000\"\n\tenv_file: .env\n\tcommand: [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]\n",
  "hints_text": "First glance, this looks like some Docker weirdness: File \"/usr/local/lib/python3.6/site-packages/django/utils/translation/reloader.py\", line 16, in watch_for_translation_changes absolute_path = path.absolute() File \"/usr/local/lib/python3.6/pathlib.py\", line 1129, in absolute obj = self._from_parts([os.getcwd()] + self._parts, init=False) FileNotFoundError: [Errno 2] No such file or directory That's a standard library call raising the error, so why's that not working? @steinbachr it would be helpful if you could put a breakpoint in there and try to work out exactly what's going on. (That call should work. Why isn't it? Is there an obvious something that would?) Why the regression between 2.1 and 2.2? We were using os.path previously I guess... Still, this should be something that works, so a bit more digging is needed.\nIs this while using Docker for Mac? Could it be related to this Docker issue, as it seems it’s being thrown in the cwd call: ​https://github.com/docker/for-mac/issues/1509 Can you confirm if this happens intermittently or happens all the time, and provide some more information on your machine (operating system, Docker version, filesystem type).\nI'm thinking to close this as needsinfo for the moment. I'm very happy to re-open it if we can show that Django is at fault. Or if we want to provide a workaround in any case... (— Tom, happy to follow your lead there.) @steinbachr please do add the extra information. I do mean the \"very happy to re-open\" :) Thanks.\n@Tom Forbes on my machine it is happening all the time. I can change my requirements to downgrade to Django==2.1.4 and rebuild the image, resulting in a working container. Then, I can upgrade to Django==2.2.3 and rebuild, resulting in a broken container, consistently. Some system information: Mac OS Version: 10.13.6 (High Sierra) Docker version 18.09.2, build 6247962 docker-compose version 1.23.2, build 1110ad01 Let me know if there's any additional info I can provide to help",
  "created_at": "2019-07-21T21:31:31Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_watch_dir_with_unresolvable_path (utils_tests.test_autoreload.BaseReloaderTests)\"]",
  "PASS_TO_PASS": "[\"test_common_roots (utils_tests.test_autoreload.TestCommonRoots)\", \"test_calls_start_django (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_calls_sys_exit (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_swallows_keyboard_interrupt (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_mutates_error_files (utils_tests.test_autoreload.TestCheckErrors)\", \"test_no_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_custom_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_exception_with_context (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_watchman_available (utils_tests.test_autoreload.GetReloaderTests)\", \"test_watchman_unavailable (utils_tests.test_autoreload.GetReloaderTests)\", \"test_sys_paths_absolute (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_directories (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_non_existing (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_with_directories (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_manage_py (utils_tests.test_autoreload.RestartWithReloaderTests)\", \"test_python_m_django (utils_tests.test_autoreload.RestartWithReloaderTests)\", \"test_run_loop_catches_stopiteration (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_run_loop_stop_and_return (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_wait_for_apps_ready_checks_for_exception (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_wait_for_apps_ready_without_exception (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_files_with_recursive_glob (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_with_glob (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_glob (utils_tests.test_autoreload.StatReloaderTests)\", \"test_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_multiple_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_multiple_recursive_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_nested_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_overlapping_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_overlapping_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_ignores_missing_files (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_updates (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_with_duplicates (utils_tests.test_autoreload.StatReloaderTests)\", \"test_tick_does_not_trigger_twice (utils_tests.test_autoreload.StatReloaderTests)\", \".pyc and .pyo files are included in the files list.\", \"test_check_errors (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_check_errors_catches_all_exceptions (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_file_added (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_main_module_is_resolved (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_main_module_without_file_is_not_resolved (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_module_without_spec (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_path_with_embedded_null_bytes (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_paths_are_pathlib_instances (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"iter_all_python_module_file() ignores weakref modules.\", \"test_zip_reload (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_check_errors_called (utils_tests.test_autoreload.StartDjangoTests)\", \"test_echo_on_called (utils_tests.test_autoreload.StartDjangoTests)\", \"test_starts_thread_with_args (utils_tests.test_autoreload.StartDjangoTests)\", \"test_watchman_becomes_unavailable (utils_tests.test_autoreload.StartDjangoTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.577680",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}