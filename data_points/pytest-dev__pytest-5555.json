{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-5555",
  "base_commit": "95824c588a333c54780e6ea82393488b6a6a81d4",
  "patch": "diff --git a/src/_pytest/stepwise.py b/src/_pytest/stepwise.py\n--- a/src/_pytest/stepwise.py\n+++ b/src/_pytest/stepwise.py\n@@ -72,7 +72,7 @@ def pytest_collection_modifyitems(self, session, config, items):\n \n     def pytest_runtest_logreport(self, report):\n         # Skip this hook if plugin is not active or the test is xfailed.\n-        if not self.active or \"xfail\" in report.keywords:\n+        if not self.active:\n             return\n \n         if report.failed:\n",
  "test_patch": "diff --git a/testing/test_stepwise.py b/testing/test_stepwise.py\n--- a/testing/test_stepwise.py\n+++ b/testing/test_stepwise.py\n@@ -165,3 +165,56 @@ def test_stop_on_collection_errors(broken_testdir, broken_first):\n         files.reverse()\n     result = broken_testdir.runpytest(\"-v\", \"--strict-markers\", \"--stepwise\", *files)\n     result.stdout.fnmatch_lines(\"*errors during collection*\")\n+\n+\n+def test_xfail_handling(testdir):\n+    \"\"\"Ensure normal xfail is ignored, and strict xfail interrupts the session in sw mode\n+\n+    (#5547)\n+    \"\"\"\n+    contents = \"\"\"\n+        import pytest\n+        def test_a(): pass\n+\n+        @pytest.mark.xfail(strict={strict})\n+        def test_b(): assert {assert_value}\n+\n+        def test_c(): pass\n+        def test_d(): pass\n+    \"\"\"\n+    testdir.makepyfile(contents.format(assert_value=\"0\", strict=\"False\"))\n+    result = testdir.runpytest(\"--sw\", \"-v\")\n+    result.stdout.fnmatch_lines(\n+        [\n+            \"*::test_a PASSED *\",\n+            \"*::test_b XFAIL *\",\n+            \"*::test_c PASSED *\",\n+            \"*::test_d PASSED *\",\n+            \"* 3 passed, 1 xfailed in *\",\n+        ]\n+    )\n+\n+    testdir.makepyfile(contents.format(assert_value=\"1\", strict=\"True\"))\n+    result = testdir.runpytest(\"--sw\", \"-v\")\n+    result.stdout.fnmatch_lines(\n+        [\n+            \"*::test_a PASSED *\",\n+            \"*::test_b FAILED *\",\n+            \"* Interrupted*\",\n+            \"* 1 failed, 1 passed in *\",\n+        ]\n+    )\n+\n+    # because we are writing to the same file, mtime might not be affected enough to\n+    # invalidate the cache, making this next run flaky\n+    testdir.tmpdir.join(\"__pycache__\").remove()\n+    testdir.makepyfile(contents.format(assert_value=\"0\", strict=\"True\"))\n+    result = testdir.runpytest(\"--sw\", \"-v\")\n+    result.stdout.fnmatch_lines(\n+        [\n+            \"*::test_b XFAIL *\",\n+            \"*::test_c PASSED *\",\n+            \"*::test_d PASSED *\",\n+            \"* 2 passed, 1 deselected, 1 xfailed in *\",\n+        ]\n+    )\n",
  "problem_statement": "pytest stepwise doesn't work with xfail strict failures\n```\r\ngraingert@onomastic:~/projects/foo$ cat tests/test_foo.py \r\nimport pytest\r\n\r\n\r\n@pytest.mark.xfail(reason=\"pass\")\r\ndef test_a():\r\n    pass\r\n\r\n\r\n@pytest.mark.xfail(reason=\"pass\")\r\ndef test_b():\r\n    pass\r\ngraingert@onomastic:~/projects/foo$ cat tests/pytest.ini \r\n[pytest]\r\naddopts = --strict\r\nxfail_strict=true\r\ngraingert@onomastic:~/projects/foo$ pytest --sw tests/\r\n================================ test session starts ================================\r\nplatform linux -- Python 3.7.3, pytest-5.0.0, py-1.8.0, pluggy-0.12.0\r\nrootdir: /home/graingert/projects/foo/tests, inifile: pytest.ini\r\ncollected 2 items                                                                   \r\nstepwise: no previously failed tests, not skipping.\r\n\r\ntests/test_foo.py FF                                                          [100%]\r\n\r\n===================================== FAILURES ======================================\r\n______________________________________ test_a _______________________________________\r\n[XPASS(strict)] pass\r\n______________________________________ test_b _______________________________________\r\n[XPASS(strict)] pass\r\n============================= 2 failed in 0.01 seconds ==============================\r\n```\n",
  "hints_text": "I expected stepwise to stop after the first XPASS(strict) failure\nIndeed it seems it is not handling `xpass(strict)` failures. üëç ",
  "created_at": "2019-07-04T23:09:25Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"testing/test_stepwise.py::test_xfail_handling\"]",
  "PASS_TO_PASS": "[\"testing/test_stepwise.py::test_run_without_stepwise\", \"testing/test_stepwise.py::test_fail_and_continue_with_stepwise\", \"testing/test_stepwise.py::test_run_with_skip_option\", \"testing/test_stepwise.py::test_fail_on_errors\", \"testing/test_stepwise.py::test_change_testfile\", \"testing/test_stepwise.py::test_stop_on_collection_errors[True]\", \"testing/test_stepwise.py::test_stop_on_collection_errors[False]\"]",
  "environment_setup_commit": "c2f762460f4c42547de906d53ea498dd499ea837",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.929140",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}