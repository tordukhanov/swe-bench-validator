{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-4994",
  "base_commit": "c7c4aae1fa2bcb9417e498e7dcb4acc0792c402d",
  "patch": "diff --git a/xarray/core/accessor_dt.py b/xarray/core/accessor_dt.py\n--- a/xarray/core/accessor_dt.py\n+++ b/xarray/core/accessor_dt.py\n@@ -31,6 +31,10 @@ def _access_through_cftimeindex(values, name):\n     if name == \"season\":\n         months = values_as_cftimeindex.month\n         field_values = _season_from_months(months)\n+    elif name == \"date\":\n+        raise AttributeError(\n+            \"'CFTimeIndex' object has no attribute `date`. Consider using the floor method instead, for instance: `.time.dt.floor('D')`.\"\n+        )\n     else:\n         field_values = getattr(values_as_cftimeindex, name)\n     return field_values.reshape(values.shape)\n@@ -415,6 +419,10 @@ def weekofyear(self):\n         \"time\", \"Timestamps corresponding to datetimes\", object\n     )\n \n+    date = Properties._tslib_field_accessor(\n+        \"date\", \"Date corresponding to datetimes\", object\n+    )\n+\n     is_month_start = Properties._tslib_field_accessor(\n         \"is_month_start\",\n         \"Indicates whether the date is the first day of the month.\",\n",
  "test_patch": "diff --git a/xarray/tests/test_accessor_dt.py b/xarray/tests/test_accessor_dt.py\n--- a/xarray/tests/test_accessor_dt.py\n+++ b/xarray/tests/test_accessor_dt.py\n@@ -59,6 +59,8 @@ def setup(self):\n             \"weekday\",\n             \"dayofyear\",\n             \"quarter\",\n+            \"date\",\n+            \"time\",\n             \"is_month_start\",\n             \"is_month_end\",\n             \"is_quarter_start\",\n@@ -144,6 +146,8 @@ def test_not_datetime_type(self):\n             \"weekday\",\n             \"dayofyear\",\n             \"quarter\",\n+            \"date\",\n+            \"time\",\n             \"is_month_start\",\n             \"is_month_end\",\n             \"is_quarter_start\",\n@@ -430,6 +434,16 @@ def test_isocalendar_cftime(data):\n         data.time.dt.isocalendar()\n \n \n+@requires_cftime\n+def test_date_cftime(data):\n+\n+    with raises_regex(\n+        AttributeError,\n+        r\"'CFTimeIndex' object has no attribute `date`. Consider using the floor method instead, for instance: `.time.dt.floor\\('D'\\)`.\",\n+    ):\n+        data.time.dt.date()\n+\n+\n @requires_cftime\n @pytest.mark.filterwarnings(\"ignore::RuntimeWarning\")\n def test_cftime_strftime_access(data):\n",
  "problem_statement": "Date missing in datetime accessor\n**What happened**:\r\nI wonder if there is a reason, why there is no `date` attribute in the datetime accessor.\r\n\r\n**What you expected to happen**:\r\nAs the `time` attribute is supported I would expect the same for the `date` attribute\r\n\r\n**Minimal Complete Verifiable Example**:\r\n\r\n```python\r\nimport xarray as xr\r\nimport pandas as pd\r\ntime_coord = pd.date_range(\"2020-01-01\",\"2020-01-03\", freq=\"12H\")\r\nda = xr.DataArray([1,2,3,4,5], dims=[\"time\"], coords={'time': time_coord})\r\n\r\nprint(da.time.dt.time)\r\n#<xarray.DataArray 'time' (time: 5)>\r\n#array([datetime.time(0, 0), datetime.time(12, 0), datetime.time(0, 0),\r\n#       datetime.time(12, 0), datetime.time(0, 0)], dtype=object)\r\n#Coordinates:\r\n#  * time     (time) datetime64[ns] 2020-01-01 2020-01-01T12:00:00 ... 2020-01-03\r\n\r\nprint(da.time.dt.date)\r\n#---------------------------------------------------------------------------\r\n#AttributeError                            Traceback (most recent call last)\r\n#<ipython-input-42-13741f407661> in <module>\r\n#----> 1 da.time.dt.date\r\n#AttributeError: 'DatetimeAccessor' object has no attribute 'date'\r\n```\r\n\r\n**Suggestion**:\r\nA simple addition of\r\n```\r\ndate = Properties._tslib_field_accessor(\r\n        \"date\", \"Date corresponding to datetimes\", object\r\n    )\r\n```\r\nin [core/accessor_dt.py](https://github.com/pydata/xarray/blob/master/xarray/core/accessor_dt.py) should do the trick. Happy to do a PR.\r\n\r\n**Anything else we need to know?**:\r\n\r\n**Environment**:\r\n\r\n<details><summary>Output of <tt>xr.show_versions()</tt></summary>\r\n\r\n\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.8.6 | packaged by conda-forge | (default, Oct  7 2020, 19:08:05) \r\n[GCC 7.5.0]\r\npython-bits: 64\r\nOS: Linux\r\nOS-release: 2.6.32-754.33.1.el6.x86_64\r\nmachine: x86_64\r\nprocessor: x86_64\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_US.UTF-8\r\nLOCALE: en_US.UTF-8\r\nlibhdf5: 1.10.6\r\nlibnetcdf: 4.7.4\r\n\r\nxarray: 0.17.0\r\npandas: 1.2.1\r\nnumpy: 1.20.0\r\nscipy: 1.6.0\r\nnetCDF4: 1.5.5.1\r\npydap: None\r\nh5netcdf: None\r\nh5py: None\r\nNio: None\r\nzarr: 2.6.1\r\ncftime: 1.4.1\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: None\r\ncfgrib: None\r\niris: None\r\nbottleneck: None\r\ndask: 2021.02.0\r\ndistributed: 2021.02.0\r\nmatplotlib: 3.3.4\r\ncartopy: 0.18.0\r\nseaborn: 0.11.1\r\nnumbagg: None\r\npint: 0.16.1\r\nsetuptools: 49.6.0.post20210108\r\npip: 21.0.1\r\nconda: None\r\npytest: None\r\nIPython: 7.20.0\r\nsphinx: None\r\n\r\n\r\n</details>\r\n\n",
  "hints_text": "Sounds reasonable. Or maybe that's not supported in cftime? cc @spencerkclark \nYes, I agree, this seems reasonable.  It's true that there is no object equivalent to `datetime.date` in cftime, but I do not think that is necessarily a requirement.  We can raise an error in that instance.\r\n\r\nI'll admit I personally have not found a need for functionality like this -- I typically prefer to use something like `da.time.dt.floor(\"D\")`, since it retains the `np.datetime64` or cftime type -- but if folks would find it useful I think it makes sense to add (this has come up [on StackOverflow](https://stackoverflow.com/questions/65182281/xarray-dt-date-dt-normalize-missing/) before too).",
  "created_at": "2021-03-04T15:47:17Z",
  "version": "0.12",
  "FAIL_TO_PASS": "[\"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[date]\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[year]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[month]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[day]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[hour]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[minute]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[second]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[microsecond]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[nanosecond]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[week]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[weekofyear]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[dayofweek]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[weekday]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[dayofyear]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[quarter]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[time]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_month_start]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_month_end]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_quarter_start]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_quarter_end]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_year_start]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_year_end]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_leap_year]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar[year-year]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar[week-week]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar[weekday-day]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_strftime\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_not_datetime_type\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[year]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[month]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[day]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[hour]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[minute]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[second]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[microsecond]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[nanosecond]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[week]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[weekofyear]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[dayofweek]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[weekday]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[dayofyear]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[quarter]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[date]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[time]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_month_start]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_month_end]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_quarter_start]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_quarter_end]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_year_start]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_year_end]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_leap_year]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar_dask[year]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar_dask[week]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar_dask[weekday]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[floor-D]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[ceil-D]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[round-D]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[strftime-%Y-%m-%d\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_seasons\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_accessor_method[floor-D]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_accessor_method[ceil-D]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_accessor_method[round-D]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_not_datetime_type\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[days]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[seconds]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[microseconds]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[nanoseconds]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_accessor_methods[floor-D]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_accessor_methods[ceil-D]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_accessor_methods[round-D]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[days]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[seconds]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[microseconds]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[nanoseconds]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_accessor_method[floor-D]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_accessor_method[ceil-D]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_accessor_method[round-D]\", \"xarray/tests/test_accessor_dt.py::test_field_access[365_day-year]\", \"xarray/tests/test_accessor_dt.py::test_field_access[365_day-month]\", \"xarray/tests/test_accessor_dt.py::test_field_access[365_day-day]\", \"xarray/tests/test_accessor_dt.py::test_field_access[365_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_field_access[365_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_field_access[365_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_field_access[360_day-year]\", \"xarray/tests/test_accessor_dt.py::test_field_access[360_day-month]\", \"xarray/tests/test_accessor_dt.py::test_field_access[360_day-day]\", \"xarray/tests/test_accessor_dt.py::test_field_access[360_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_field_access[360_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_field_access[360_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_field_access[julian-year]\", \"xarray/tests/test_accessor_dt.py::test_field_access[julian-month]\", \"xarray/tests/test_accessor_dt.py::test_field_access[julian-day]\", \"xarray/tests/test_accessor_dt.py::test_field_access[julian-hour]\", \"xarray/tests/test_accessor_dt.py::test_field_access[julian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_field_access[julian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_field_access[all_leap-year]\", \"xarray/tests/test_accessor_dt.py::test_field_access[all_leap-month]\", \"xarray/tests/test_accessor_dt.py::test_field_access[all_leap-day]\", \"xarray/tests/test_accessor_dt.py::test_field_access[all_leap-hour]\", \"xarray/tests/test_accessor_dt.py::test_field_access[all_leap-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_field_access[all_leap-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_field_access[366_day-year]\", \"xarray/tests/test_accessor_dt.py::test_field_access[366_day-month]\", \"xarray/tests/test_accessor_dt.py::test_field_access[366_day-day]\", \"xarray/tests/test_accessor_dt.py::test_field_access[366_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_field_access[366_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_field_access[366_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_field_access[gregorian-year]\", \"xarray/tests/test_accessor_dt.py::test_field_access[gregorian-month]\", \"xarray/tests/test_accessor_dt.py::test_field_access[gregorian-day]\", \"xarray/tests/test_accessor_dt.py::test_field_access[gregorian-hour]\", \"xarray/tests/test_accessor_dt.py::test_field_access[gregorian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_field_access[gregorian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-year]\", \"xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-month]\", \"xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-day]\", \"xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-hour]\", \"xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[365_day]\", \"xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[360_day]\", \"xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[julian]\", \"xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[all_leap]\", \"xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[366_day]\", \"xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[gregorian]\", \"xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[proleptic_gregorian]\", \"xarray/tests/test_accessor_dt.py::test_date_cftime[365_day]\", \"xarray/tests/test_accessor_dt.py::test_date_cftime[360_day]\", \"xarray/tests/test_accessor_dt.py::test_date_cftime[julian]\", \"xarray/tests/test_accessor_dt.py::test_date_cftime[all_leap]\", \"xarray/tests/test_accessor_dt.py::test_date_cftime[366_day]\", \"xarray/tests/test_accessor_dt.py::test_date_cftime[gregorian]\", \"xarray/tests/test_accessor_dt.py::test_date_cftime[proleptic_gregorian]\", \"xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[365_day]\", \"xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[360_day]\", \"xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[julian]\", \"xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[all_leap]\", \"xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[366_day]\", \"xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[gregorian]\", \"xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[proleptic_gregorian]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_seasons[365_day]\", \"xarray/tests/test_accessor_dt.py::test_seasons[360_day]\", \"xarray/tests/test_accessor_dt.py::test_seasons[julian]\", \"xarray/tests/test_accessor_dt.py::test_seasons[all_leap]\", \"xarray/tests/test_accessor_dt.py::test_seasons[366_day]\", \"xarray/tests/test_accessor_dt.py::test_seasons[gregorian]\", \"xarray/tests/test_accessor_dt.py::test_seasons[proleptic_gregorian]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[365_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[365_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[360_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[360_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[julian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[julian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[all_leap-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[all_leap-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[366_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[366_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[gregorian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[gregorian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[proleptic_gregorian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[proleptic_gregorian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[365_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[365_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[360_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[360_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[julian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[julian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[all_leap-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[all_leap-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[366_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[366_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[gregorian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[gregorian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[proleptic_gregorian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[proleptic_gregorian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[365_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[365_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[360_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[360_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[julian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[julian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[all_leap-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[all_leap-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[366_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[366_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[gregorian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[gregorian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[proleptic_gregorian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[proleptic_gregorian-True]\"]",
  "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.887284",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}