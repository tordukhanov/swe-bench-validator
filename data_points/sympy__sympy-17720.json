{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-17720",
  "base_commit": "496b6c16e8e482c2a2e096ede3756ede0c2c415f",
  "patch": "diff --git a/sympy/ntheory/factor_.py b/sympy/ntheory/factor_.py\n--- a/sympy/ntheory/factor_.py\n+++ b/sympy/ntheory/factor_.py\n@@ -1178,7 +1178,8 @@ def factorint(n, limit=None, use_trial=True, use_rho=True, use_pm1=True,\n                     facs = factorint(r, limit=limit, use_trial=use_trial,\n                                      use_rho=use_rho, use_pm1=use_pm1,\n                                      verbose=verbose)\n-                    factors.update(facs)\n+                    for k, v in facs.items():\n+                        factors[k] = factors.get(k, 0) + v\n                 raise StopIteration\n \n             # ...see if factorization can be terminated\n",
  "test_patch": "diff --git a/sympy/ntheory/tests/test_factor_.py b/sympy/ntheory/tests/test_factor_.py\n--- a/sympy/ntheory/tests/test_factor_.py\n+++ b/sympy/ntheory/tests/test_factor_.py\n@@ -1,5 +1,5 @@\n from sympy import (Mul, S, Pow, Symbol, summation, Dict,\n-    factorial as fac)\n+                   factorial as fac, sqrt)\n from sympy.core.evalf import bitcount\n from sympy.core.numbers import Integer, Rational\n from sympy.core.compatibility import long, range\n@@ -161,6 +161,11 @@ def test_factorint():\n     assert factorint(64015937) == {7993: 1, 8009: 1}\n     assert factorint(2**(2**6) + 1) == {274177: 1, 67280421310721: 1}\n \n+    #issue 17676\n+    assert factorint(28300421052393658575) == {3: 1, 5: 2, 11: 2, 43: 1, 2063: 2, 4127: 1, 4129: 1}\n+    assert factorint(2063**2 * 4127**1 * 4129**1) == {2063: 2, 4127: 1, 4129: 1}\n+    assert factorint(2347**2 * 7039**1 * 7043**1) == {2347: 2, 7039: 1, 7043: 1}\n+\n     assert factorint(0, multiple=True) == [0]\n     assert factorint(1, multiple=True) == []\n     assert factorint(-1, multiple=True) == [-1]\n",
  "problem_statement": "sqrt(sympify('28300421052393658575')) gives wrong answer\n```\r\n>>> sqrt(sympify('28300421052393658575'))\r\n55*sqrt(4534906006641)\r\n```\r\nIt is easily verified that this answer is not correct; notably:\r\n```\r\n>>> sqrt(sympify('28300421052393658575'))**2\r\n13718090670089025\r\n```\n",
  "hints_text": "No need for sympification:\r\n\r\n```\r\n>>> n = 28300421052393658575\r\n>>> sqrt(n)**2\r\n13718090670089025\r\n```\r\n\r\nThere's a problem with factorization:\r\n\r\n```\r\n>>> n = 28300421052393658575\r\n>>> factorint(n)\r\n{3: 1, 5: 2, 11: 2, 43: 1, 2063: 1, 4127: 1, 4129: 1}\r\n```\r\n\r\nThe correct result would be `{3: 1, 5: 2, 11: 2, 43: 1, 2063: 2, 4127: 1, 4129: 1}` (missing a factor of 2063).\nA smaller example is\r\n\r\n```\r\n>>> n = 2063**2 * 4127**1 * 4129**1\r\n>>> n\r\n72523341796127\r\n>>> sqrt(n)**2 == n\r\nFalse\r\n>>> factorint(n)\r\n{2063: 1, 4127: 1, 4129: 1}\r\n```\nSeems that there is an issue whenever \"Close factors satisfying Fermat condition found\" happens before \"Trial division with ints [2 ... 32768] and fail_max=600\" succeeds, based on the output from verbose=True\r\n```\r\n>>> factorint(2063**2*4127*4129,verbose=True)\r\nFactoring 72523341796127\r\nTrial division with ints [2 ... 32768] and fail_max=600\r\nClose factors satisying Fermat condition found.\r\nFactoring 8514001\r\nTrial division with ints [2 ... 32768] and fail_max=600\r\nCheck for termination\r\nTrial division with primes [1805 ... 2918]\r\n        2063 ** 1\r\nCheck for termination\r\nFactorization is complete.\r\nFactoring 8518127\r\nTrial division with ints [2 ... 32768] and fail_max=600\r\nCheck for termination\r\nTrial division with primes [1805 ... 2919]\r\n        2063 ** 1\r\nCheck for termination\r\nFactorization is complete.\r\nFactorization is complete.\r\n{2063: 1, 4127: 1, 4129: 1}\r\n```\r\nAnother example:\r\n```\r\n>>> factorint(2347**2*7039*7043,verbose=True)\r\nFactoring 273083105367893\r\nTrial division with ints [2 ... 32768] and fail_max=600\r\nClose factors satisying Fermat condition found.\r\nFactoring 16520533\r\nTrial division with ints [2 ... 32768] and fail_max=600\r\nCheck for termination\r\nTrial division with primes [1805 ... 3610]\r\n        2347 ** 1\r\nCheck for termination\r\nFactorization is complete.\r\nFactoring 16529921\r\nTrial division with ints [2 ... 32768] and fail_max=600\r\nCheck for termination\r\nTrial division with primes [1805 ... 3610]\r\n        2347 ** 1\r\nCheck for termination\r\nFactorization is complete.\r\nFactorization is complete.\r\n{2347: 1, 7039: 1, 7043: 1}\r\n```\r\nI'm new here and not familiar with the code, but my guess is that it has something to do with the dictionary update on line 1181?\r\nhttps://github.com/sympy/sympy/blob/5138712daf66fde7050c7fabdcec7bdc5d02d047/sympy/ntheory/factor_.py#L1172-L1181\nIt goes wrong here:\r\nhttps://github.com/sympy/sympy/blob/5138712daf66fde7050c7fabdcec7bdc5d02d047/sympy/core/numbers.py#L2365\r\n```\r\n(Pdb) p dict\r\n{2063: 1, 4127: 1, 4129: 1}\r\n(Pdb) p 2063*4127*4129\r\n35154310129\r\n(Pdb) p b_pos\r\n72523341796127\r\n```\r\nA more direct test:\r\n```julia\r\nIn [1]: S(72523341796127).factors()                                                                                                                           \r\nOut[1]: {2063: 1, 4127: 1, 4129: 1}\r\n```\r\nThat takes us here:\r\nhttps://github.com/sympy/sympy/blob/master/sympy/ntheory/factor_.py#L1274\r\nAnd then to factorint:\r\nhttps://github.com/sympy/sympy/blob/5138712daf66fde7050c7fabdcec7bdc5d02d047/sympy/ntheory/factor_.py#L861\r\n```julia\r\nIn [1]: factorint(72523341796127)                                                                                                                             \r\nOut[1]: {2063: 1, 4127: 1, 4129: 1}\r\n```\r\nThen it goes wrong somewhere starting here:\r\nhttps://github.com/sympy/sympy/blob/5138712daf66fde7050c7fabdcec7bdc5d02d047/sympy/ntheory/factor_.py#L1162\nSo I tried replacing line 1181 in factor_.py\r\nhttps://github.com/sympy/sympy/blob/5138712daf66fde7050c7fabdcec7bdc5d02d047/sympy/ntheory/factor_.py#L1181\r\nwith the following code:\r\n```\r\nfor fac in facs:\r\n    if fac in factors:\r\n        factors[fac] += facs[fac]\r\n    else:\r\n        factors.update({fac:facs[fac]})\r\n```\r\nand that seems to solve the problem--the original dictionary update was overwriting factor information from previous Fermat factors instead of properly summing factor exponents. All wrong examples currently in this thread are corrected under this modification.\r\n\r\nCould somebody else verify this? Should I submit a pull request? \nYes, if you think you have a solution a pull request would be great.\nOK I'll do some more testing and submit a pull request in the next few days\nYou can copy my fac branch or apply this diff, if you want:\r\n\r\n```diff\r\ndiff --git a/sympy/ntheory/factor_.py b/sympy/ntheory/factor_.py\r\nindex 0cc90a6..8a07346 100644\r\n--- a/sympy/ntheory/factor_.py\r\n+++ b/sympy/ntheory/factor_.py\r\n@@ -1178,7 +1178,8 @@ def factorint(n, limit=None, use_trial=True, use_rho=True, use_pm1=True,\r\n                     facs = factorint(r, limit=limit, use_trial=use_trial,\r\n                                      use_rho=use_rho, use_pm1=use_pm1,\r\n                                      verbose=verbose)\r\n-                    factors.update(facs)\r\n+                    for k, v in facs.items():\r\n+                        factors[k] = factors.get(k, 0) + v\r\n                 raise StopIteration\r\n \r\n             # ...see if factorization can be terminated\r\ndiff --git a/sympy/ntheory/tests/test_factor_.py b/sympy/ntheory/tests/test_factor_.py\r\nindex 34cd6b8..7725c73 100644\r\n--- a/sympy/ntheory/tests/test_factor_.py\r\n+++ b/sympy/ntheory/tests/test_factor_.py\r\n@@ -1,5 +1,5 @@\r\n from sympy import (Mul, S, Pow, Symbol, summation, Dict,\r\n-    factorial as fac)\r\n+    factorial as fac, sqrt)\r\n from sympy.core.evalf import bitcount\r\n from sympy.core.numbers import Integer, Rational\r\n from sympy.core.compatibility import long, range\r\n@@ -619,3 +619,8 @@ def test_is_amicable():\r\n     assert is_amicable(173, 129) is False\r\n     assert is_amicable(220, 284) is True\r\n     assert is_amicable(8756, 8756) is False\r\n+\r\n+\r\n+def test_issue_17676():\r\n+    n = 28300421052393658575\r\n+    assert sqrt(n)**2 == n\r\n\r\n```",
  "created_at": "2019-10-10T16:08:29Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_factorint\"]",
  "PASS_TO_PASS": "[\"test_trailing_bitcount\", \"test_multiplicity\", \"test_perfect_power\", \"test_divisors_and_divisor_count\", \"test_udivisors_and_udivisor_count\", \"test_issue_6981\", \"test_totient\", \"test_reduced_totient\", \"test_divisor_sigma\", \"test_udivisor_sigma\", \"test_issue_4356\", \"test_divisors\", \"test_divisor_count\", \"test_antidivisors\", \"test_antidivisor_count\", \"test_smoothness_and_smoothness_p\", \"test_visual_factorint\", \"test_factorrat\", \"test_visual_io\", \"test_core\", \"test_digits\", \"test_primenu\", \"test_primeomega\", \"test_mersenne_prime_exponent\", \"test_is_perfect\", \"test_is_mersenne_prime\", \"test_is_abundant\", \"test_is_deficient\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.117681",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}