{
  "repo": "django/django",
  "instance_id": "django__django-12627",
  "base_commit": "4b146e0c83891fc67a422aa22f846bb7654c4d38",
  "patch": "diff --git a/django/contrib/auth/hashers.py b/django/contrib/auth/hashers.py\n--- a/django/contrib/auth/hashers.py\n+++ b/django/contrib/auth/hashers.py\n@@ -72,6 +72,11 @@ def make_password(password, salt=None, hasher='default'):\n     \"\"\"\n     if password is None:\n         return UNUSABLE_PASSWORD_PREFIX + get_random_string(UNUSABLE_PASSWORD_SUFFIX_LENGTH)\n+    if not isinstance(password, (bytes, str)):\n+        raise TypeError(\n+            'Password must be a string or bytes, got %s.'\n+            % type(password).__qualname__\n+        )\n     hasher = get_hasher(hasher)\n     salt = salt or hasher.salt()\n     return hasher.encode(password, salt)\n",
  "test_patch": "diff --git a/tests/auth_tests/test_hashers.py b/tests/auth_tests/test_hashers.py\n--- a/tests/auth_tests/test_hashers.py\n+++ b/tests/auth_tests/test_hashers.py\n@@ -50,6 +50,17 @@ def test_simple(self):\n         self.assertTrue(check_password('', blank_encoded))\n         self.assertFalse(check_password(' ', blank_encoded))\n \n+    def test_bytes(self):\n+        encoded = make_password(b'bytes_password')\n+        self.assertTrue(encoded.startswith('pbkdf2_sha256$'))\n+        self.assertIs(is_password_usable(encoded), True)\n+        self.assertIs(check_password(b'bytes_password', encoded), True)\n+\n+    def test_invalid_password(self):\n+        msg = 'Password must be a string or bytes, got int.'\n+        with self.assertRaisesMessage(TypeError, msg):\n+            make_password(1)\n+\n     def test_pbkdf2(self):\n         encoded = make_password('lètmein', 'seasalt', 'pbkdf2_sha256')\n         self.assertEqual(encoded, 'pbkdf2_sha256$216000$seasalt$youGZxOw6ZOcfrXv2i8/AhrnpZflJJ9EshS9XmUJTUg=')\n",
  "problem_statement": "make_password shouldn't accept values other than bytes or string as an argument\nDescription\n\t \n\t\t(last modified by iamdavidcz)\n\t \nCurrently make_password function accepts almost every Python object as an argument. This is a strange behaviour and it results directly from force_bytes casting objects to str. We should throw the TypeError when passing anything but bytes or str to make_password.\nReasons:\nprogrammers unaware of this strange behaviour can accidentally create weak passwords (potential security issue)\nother libraries raise the TypeError in the same cases (eg. Werkzeug, passlib)\nit's inconsistent with the documentation that says:\nIt takes one mandatory argument: the password in plain-text.\nit's inconsistent with validate_password behaviour (passing anything but bytes or str to validate_password raises the TypeError with default settings.AUTH_PASSWORD_VALIDATORS).\nDiscussion:\n​https://groups.google.com/forum/#!topic/django-developers/1Ap0zDjFa4E\n",
  "hints_text": "From a bit of testing it seems make_password already raises TypeError for invalid types on master >>> make_password(1) TypeError: can only concatenate str (not \"int\") to str >>> class Object: def __str__(self): return 'foo' >>> make_password(Object()) TypeError: can only concatenate str (not \"Object\") to str >>> make_password(True) TypeError: can only concatenate str (not \"bool\") to str ... It is hasher specific though so I guess we could turn not instance(password, str) into a TypeError from make_password itself instead of relying on implementation details of hashers.\nSimon Charette, thank you for your testing. Could you tell me what is your PASSWORD_HASHERS setting? I've tried to reproduce your example on master using PBKDF2PasswordHasher and this hasher does not raise the TypeError on my side: In [1]: class Object: ...: def __str__(self): ...: return 'foo' In [2]: from django.contrib.auth.hashers import get_hasher In [3]: hasher = get_hasher('default') In [4]: hasher Out[4]: <django.contrib.auth.hashers.PBKDF2PasswordHasher at 0x10cef7850> In [5]: salt = hasher.salt() In [6]: salt Out[6]: 'l9QFlyCku6VE' In [7]: hasher.encode(Object(), salt) Out[7]: 'pbkdf2_sha256$216000$l9QFlyCku6VE$qqMksofk6MSGevhG/I4xJ7AIRf+Hhq/7myi3pd6vSBU=' In [8]: hasher.encode('foo', salt) Out[8]: 'pbkdf2_sha256$216000$l9QFlyCku6VE$qqMksofk6MSGevhG/I4xJ7AIRf+Hhq/7myi3pd6vSBU=' Now I can see two options in order to make this type guard hasher agnostic: Add if statement to make_password as you suggested. Something like: if not isinstance(password, (bytes, str)): raise TypeError('password must be bytes or string (got %s).' % type(password).__name__) Change force_bytes utility to to_bytes and add default keyword argument force=True. Then, hasher's encode method would use to_bytes function with force=False argument. In all other force_bytes occurrences in the codebase, changing from force_bytes to to_bytes should be sufficient. Edit: of course, we need to add a separate if statement for str itself. def to_bytes(s, encoding='utf-8', strings_only=False, errors='strict', force=True): if isinstance(s, bytes): if encoding == 'utf-8': return s else: return s.decode('utf-8', errors).encode(encoding, errors) if strings_only and is_protected_type(s): return s if isinstance(s, memoryview): return bytes(s) if isinstance(s, str): return s.encode(encoding, errors) if force: return str(s).encode(encoding, errors) raise TypeError('cannot convert %s object to bytes' % type(s).__name__) However, this solution would require much more effort and maintaining backward compatibility. The first option seems to be easier.\nI was using MD5PasswordHasher which is the default for test settings; PBKDF2PasswordHasher.encode seems to be accepting whatever value is provided.\nI think force_bytes is only used by PBKDF2PasswordHasher and PBKDF2SHA1PasswordHasher through django.utils.crypto.pbkdf2. Some Django's included hashers depend on hashlib library while others depend on third party libraries using _load_library() method for password encoding. Examples: ​Argon2PasswordHasher ​BCryptSHA256PasswordHasher ​CryptPasswordHasher As Simon Charette said, it is hasher specific. So if we want to make it language agnostic, I think the first option will do (adding if not isinstance(password, (bytes, str)) in make_password)\nReplying to hashlash: As Simon Charette said, it is hasher specific. So if we want to make it language agnostic, I think the first option will do (adding if not isinstance(password, (bytes, str)) in make_password) Fully agree. Let's choose the first option then.\nSimon , if you agree with the proposed solution : if not isinstance(password, (bytes, str)): raise TypeError('password must be bytes or string (got %s).' % type(password).__name__) I can prepare a patch for it.\nAny decision about this ticket?\nOK, I think this is pretty marginal, but let's have it. A patch needs to include a release note, saying approximately, \"make_password() now requires its argument to be a string or bytes. Other types should be explicitly cast to one of these, if required\".\n​PR",
  "created_at": "2020-03-25T22:04:26Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_invalid_password (auth_tests.test_hashers.TestUtilsHashPass)\"]",
  "PASS_TO_PASS": "[\"test_attributes (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_encode (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_harden_runtime (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_load_library_importerror (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_load_library_no_algorithm (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_must_update (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_safe_summary (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_verify (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_argon2 (auth_tests.test_hashers.TestUtilsHashPassArgon2)\", \"test_argon2_upgrade (auth_tests.test_hashers.TestUtilsHashPassArgon2)\", \"test_argon2_version_upgrade (auth_tests.test_hashers.TestUtilsHashPassArgon2)\", \"test_bad_algorithm (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bcrypt (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bcrypt_harden_runtime (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bcrypt_sha256 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bcrypt_upgrade (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bytes (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_check_password_calls_harden_runtime (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_crypt (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_is_password_usable (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_low_level_pbkdf2 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_low_level_pbkdf2_sha1 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_md5 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_no_upgrade (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_no_upgrade_on_incorrect_pass (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_pbkdf2 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_pbkdf2_harden_runtime (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_pbkdf2_upgrade (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_pbkdf2_upgrade_new_hasher (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_sha1 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_simple (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_unsalted_md5 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_unsalted_sha1 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_unspecified_password (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_unusable (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_upgrade (auth_tests.test_hashers.TestUtilsHashPass)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.631865",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}