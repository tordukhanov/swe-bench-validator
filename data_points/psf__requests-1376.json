{
  "repo": "psf/requests",
  "instance_id": "psf__requests-1376",
  "base_commit": "2aabb71dc8db434122c2e00c9d1313c6f368ce1c",
  "patch": "diff --git a/requests/models.py b/requests/models.py\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -291,7 +291,7 @@ def prepare_url(self, url, params):\n             raise MissingSchema(\"Invalid URL %r: No schema supplied\" % url)\n \n         if not host:\n-            raise InvalidURL(\"Invalid URL %t: No host supplied\" % url)\n+            raise InvalidURL(\"Invalid URL %r: No host supplied\" % url)\n \n         # Only want to apply IDNA to the hostname\n         try:\n",
  "test_patch": "diff --git a/test_requests.py b/test_requests.py\nold mode 100644\nnew mode 100755\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -14,6 +14,7 @@\n from requests.adapters import HTTPAdapter\n from requests.compat import str, cookielib\n from requests.cookies import cookiejar_from_dict\n+from requests.exceptions import InvalidURL, MissingSchema\n from requests.structures import CaseInsensitiveDict\n \n try:\n@@ -53,7 +54,8 @@ def test_entry_points(self):\n         requests.post\n \n     def test_invalid_url(self):\n-        self.assertRaises(ValueError, requests.get, 'hiwpefhipowhefopw')\n+        self.assertRaises(MissingSchema, requests.get, 'hiwpefhipowhefopw')\n+        self.assertRaises(InvalidURL, requests.get, 'http://')\n \n     def test_basic_building(self):\n         req = requests.Request()\n@@ -343,11 +345,12 @@ def test_unicode_multipart_post(self):\n         self.assertEqual(r.status_code, 200)\n \n     def test_unicode_multipart_post_fieldnames(self):\n+        filename = os.path.splitext(__file__)[0] + '.py'\n         r = requests.Request(method='POST',\n                              url=httpbin('post'),\n                              data={'stuff'.encode('utf-8'): 'elixr'},\n                              files={'file': ('test_requests.py',\n-                                             open(__file__, 'rb'))})\n+                                             open(filename, 'rb'))})\n         prep = r.prepare()\n         self.assertTrue(b'name=\"stuff\"' in prep.body)\n         self.assertFalse(b'name=\"b\\'stuff\\'\"' in prep.body)\n",
  "problem_statement": "test_unicode_multipart_post_fieldnames() fails sometimes\n```\nself = <test_requests.RequestsTestCase testMethod=test_unicode_multipart_post_fieldnames>\n\n    def test_unicode_multipart_post_fieldnames(self):\n        r = requests.Request(method='POST',\n                             url=httpbin('post'),\n                             data={'stuff'.encode('utf-8'): 'elixr'},\n                             files={'file': ('test_requests.py',\n                                             open(__file__, 'rb'))})\n        prep = r.prepare()\n        self.assertTrue(b'name=\"stuff\"' in prep.body)\n>       self.assertFalse(b'name=\"b\\'stuff\\'\"' in prep.body)\nE       AssertionError: True is not false\n\ntest_requests.py:356: AssertionError\n```\n\n",
  "hints_text": "",
  "created_at": "2013-05-21T17:51:54Z",
  "version": "1.2",
  "FAIL_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_invalid_url\"]",
  "PASS_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_basic_building\", \"test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests\", \"test_requests.py::RequestsTestCase::test_cookie_parameters\", \"test_requests.py::RequestsTestCase::test_entry_points\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url\", \"test_requests.py::RequestsTestCase::test_hook_receives_request_arguments\", \"test_requests.py::RequestsTestCase::test_http_error\", \"test_requests.py::RequestsTestCase::test_links\", \"test_requests.py::RequestsTestCase::test_long_authinfo_in_url\", \"test_requests.py::RequestsTestCase::test_no_content_length\", \"test_requests.py::RequestsTestCase::test_params_are_added_before_fragment\", \"test_requests.py::RequestsTestCase::test_path_is_not_double_encoded\", \"test_requests.py::RequestsTestCase::test_response_is_iterable\", \"test_requests.py::RequestsTestCase::test_transport_adapter_ordering\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames\", \"test_requests.py::TestCaseInsensitiveDict::test_contains\", \"test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"test_requests.py::TestCaseInsensitiveDict::test_equality\", \"test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"test_requests.py::TestCaseInsensitiveDict::test_get\", \"test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"test_requests.py::TestCaseInsensitiveDict::test_iter\", \"test_requests.py::TestCaseInsensitiveDict::test_iterable_init\", \"test_requests.py::TestCaseInsensitiveDict::test_kwargs_init\", \"test_requests.py::TestCaseInsensitiveDict::test_len\", \"test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"test_requests.py::TestCaseInsensitiveDict::test_mapping_init\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"test_requests.py::TestCaseInsensitiveDict::test_update\", \"test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\"]",
  "environment_setup_commit": "d8268fb7b44da7b8aa225eb1ca6fbdb4f9dc2457",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.847363",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}