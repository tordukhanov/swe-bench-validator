{
  "repo": "django/django",
  "instance_id": "django__django-14266",
  "base_commit": "ca9872905559026af82000e46cde6f7dedc897b6",
  "patch": "diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py\n--- a/django/contrib/messages/storage/cookie.py\n+++ b/django/contrib/messages/storage/cookie.py\n@@ -1,3 +1,4 @@\n+import binascii\n import json\n \n from django.conf import settings\n@@ -166,7 +167,7 @@ def _decode(self, data):\n         #     pass\n         except signing.BadSignature:\n             decoded = None\n-        except json.JSONDecodeError:\n+        except (binascii.Error, json.JSONDecodeError):\n             decoded = self.signer.unsign(data)\n \n         if decoded:\n",
  "test_patch": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+import binascii\n import json\n import random\n \n@@ -7,7 +8,7 @@\n from django.contrib.messages.storage.cookie import (\n     CookieStorage, MessageDecoder, MessageEncoder,\n )\n-from django.core.signing import get_cookie_signer\n+from django.core.signing import b64_decode, get_cookie_signer\n from django.test import SimpleTestCase, override_settings\n from django.utils.crypto import get_random_string\n from django.utils.safestring import SafeData, mark_safe\n@@ -183,10 +184,12 @@ def test_legacy_encode_decode(self):\n         # RemovedInDjango41Warning: pre-Django 3.2 encoded messages will be\n         # invalid.\n         storage = self.storage_class(self.get_request())\n-        messages = ['this', 'that']\n+        messages = ['this', Message(0, 'Successfully signed in as admin@example.org')]\n         # Encode/decode a message using the pre-Django 3.2 format.\n         encoder = MessageEncoder()\n         value = encoder.encode(messages)\n+        with self.assertRaises(binascii.Error):\n+            b64_decode(value.encode())\n         signer = get_cookie_signer(salt=storage.key_salt)\n         encoded_messages = signer.sign(value)\n         decoded_messages = storage._decode(encoded_messages)\n",
  "problem_statement": "CookieStorage for contrib.messages crashes after upgrade to django 3.2\nDescription\n\t \n\t\t(last modified by Jan Pieter Waagmeester)\n\t \nAfter upgrading to django 3.2, a previously stored cookie for contrib.messages crashes in \n​https://github.com/django/django/blob/d6314c4c2ef647efe0d12450214fc5b4a4055290/django/contrib/messages/storage/cookie.py#L175\nDjango Version: 3.2\nPython Version: 3.8.2\nTraceback (most recent call last):\n File \"/home/obs/virtualenv/lib/python3.8/site-packages/django/core/handlers/exception.py\", line 47, in inner\n\tresponse = get_response(request)\n File \"/home/obs/virtualenv/lib/python3.8/site-packages/django/utils/deprecation.py\", line 119, in __call__\n\tresponse = self.process_response(request, response)\n File \"/home/obs/virtualenv/lib/python3.8/site-packages/django/contrib/messages/middleware.py\", line 23, in process_response\n\tunstored_messages = request._messages.update(response)\n File \"/home/obs/virtualenv/lib/python3.8/site-packages/django/contrib/messages/storage/base.py\", line 127, in update\n\tmessages = self._loaded_messages + self._queued_messages\n File \"/home/obs/virtualenv/lib/python3.8/site-packages/django/contrib/messages/storage/base.py\", line 79, in _loaded_messages\n\tmessages, all_retrieved = self._get()\n File \"/home/obs/virtualenv/lib/python3.8/site-packages/django/contrib/messages/storage/fallback.py\", line 25, in _get\n\tmessages, all_retrieved = storage._get()\n File \"/home/obs/virtualenv/lib/python3.8/site-packages/django/contrib/messages/storage/cookie.py\", line 86, in _get\n\tmessages = self._decode(data)\n File \"/home/obs/virtualenv/lib/python3.8/site-packages/django/contrib/messages/storage/cookie.py\", line 175, in _decode\n\treturn self.signer.unsign_object(data, serializer=MessageSerializer)\n File \"/home/obs/virtualenv/lib/python3.8/site-packages/django/core/signing.py\", line 195, in unsign_object\n\tdata = b64_decode(base64d)\n File \"/home/obs/virtualenv/lib/python3.8/site-packages/django/core/signing.py\", line 68, in b64_decode\n\treturn base64.urlsafe_b64decode(s + pad)\n File \"/usr/lib/python3.8/base64.py\", line 133, in urlsafe_b64decode\n\treturn b64decode(s)\n File \"/usr/lib/python3.8/base64.py\", line 87, in b64decode\n\treturn binascii.a2b_base64(s)\nException Type: Error at /user/login/\nException Value: Invalid base64-encoded string: number of data characters (369) cannot be 1 more than a multiple of 4\n(redacted) contents of the 'messages' cookie:\n'[[\"__json_message\",0,25,\"Successfully signed in as '\n 'admin@example.org.\"],[\"__json_message\",0,25,\"Successfully '\n 'signed in as jieter.\"],[\"__json_message\",0,25,\"Ingelogd als '\n 'admin@example.org.\"],[\"__json_message\",0,25,\"Ingelogd '\n 'als '\n 'admin@example.org.\"],[\"__json_message\",0,20,\"Bevestigingsmail '\n 'verzonden naar test@example.nl.\"],[\"__json_message\",0,25,\"Ingelogd '\n 'als '\n 'test@example.nl.\"]]:1lTkj1:j_3PlpYSKiqPTMAB6_p2Q00eE8j6k7n0Sg_-_IpXG7Y')\n",
  "hints_text": "Jan thanks for this report, however I cannot reproduce this issue. Everything works when I will use your messages in ​messages_tests.test_cookie.CookieTests.test_legacy_encode_decode.\nWe might need the original cookie as seen by the browser. Can you send it to security@… (for the lack of a better \"trusted\" address, we will handle the data with care).\nWhat confuses me here is that according to the traceback the signature was valid and it then failed in ​https://github.com/django/django/blob/b6475d7d7940f3ce575e0b0f2d83e517f899b4cf/django/core/signing.py#L195 -- but if the signature was valid in the first place the data should have been base64 encoded. The contents of the cookie seem to suggest otherwise.\nI sent the contents of the cookie to security@\nThanks, I think I understand what is going on. Out of pure luck we created test messages that properly decode from base64. They then fail json decoding and fall back to the old mechanism. I think we need to add binascii.Error to ​https://github.com/django/django/commit/2d6179c819010f6a9d00835d5893c4593c0b85a0#diff-6c5e944e6869d04c50af2ee02dd85c621177547eb7771d11066f452788d483f4R185\nHi Jan, I have attached a diff that should fix your issue. Do you think you could apply that single change to your Django codebase and retry?\nRegression in 2d6179c819010f6a9d00835d5893c4593c0b85a0.\nReplying to Florian Apolloner: Hi Jan, I have attached a diff that should fix your issue. Do you think you could apply that single change to your Django codebase and retry? Works like expected with the patch applied, great!",
  "created_at": "2021-04-14T11:48:01Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_legacy_encode_decode (messages_tests.test_cookie.CookieTests)\"]",
  "PASS_TO_PASS": "[\"test_add (messages_tests.test_cookie.CookieTests)\", \"test_add_lazy_translation (messages_tests.test_cookie.CookieTests)\", \"test_add_update (messages_tests.test_cookie.CookieTests)\", \"test_context_processor_message_levels (messages_tests.test_cookie.CookieTests)\", \"CookieStorage honors SESSION_COOKIE_DOMAIN, SESSION_COOKIE_SECURE, and\", \"test_custom_tags (messages_tests.test_cookie.CookieTests)\", \"test_default_level (messages_tests.test_cookie.CookieTests)\", \"test_existing_add (messages_tests.test_cookie.CookieTests)\", \"test_existing_add_read_update (messages_tests.test_cookie.CookieTests)\", \"Reading the existing storage doesn't cause the data to be lost.\", \"test_existing_read_add_update (messages_tests.test_cookie.CookieTests)\", \"With the message middleware enabled, messages are properly stored and\", \"test_get (messages_tests.test_cookie.CookieTests)\", \"test_get_bad_cookie (messages_tests.test_cookie.CookieTests)\", \"test_high_level (messages_tests.test_cookie.CookieTests)\", \"A complex nested data structure containing Message\", \"test_level_tag (messages_tests.test_cookie.CookieTests)\", \"test_low_level (messages_tests.test_cookie.CookieTests)\", \"If the data exceeds what is allowed in a cookie, older messages are\", \"test_message_rfc6265 (messages_tests.test_cookie.CookieTests)\", \"When the middleware is disabled, an exception is raised when one\", \"When the middleware is disabled, an exception is not raised\", \"Messages persist properly when multiple POSTs are made before a GET.\", \"test_no_update (messages_tests.test_cookie.CookieTests)\", \"A message containing SafeData is keeping its safe status when\", \"test_settings_level (messages_tests.test_cookie.CookieTests)\", \"test_tags (messages_tests.test_cookie.CookieTests)\", \"test_with_template_response (messages_tests.test_cookie.CookieTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.685092",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}