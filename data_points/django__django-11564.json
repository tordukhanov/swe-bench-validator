{
  "repo": "django/django",
  "instance_id": "django__django-11564",
  "base_commit": "580e644f24f1c5ae5b94784fb73a9953a178fd26",
  "patch": "diff --git a/django/conf/__init__.py b/django/conf/__init__.py\n--- a/django/conf/__init__.py\n+++ b/django/conf/__init__.py\n@@ -15,7 +15,8 @@\n \n import django\n from django.conf import global_settings\n-from django.core.exceptions import ImproperlyConfigured\n+from django.core.exceptions import ImproperlyConfigured, ValidationError\n+from django.core.validators import URLValidator\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.functional import LazyObject, empty\n \n@@ -109,6 +110,26 @@ def configure(self, default_settings=global_settings, **options):\n             setattr(holder, name, value)\n         self._wrapped = holder\n \n+    @staticmethod\n+    def _add_script_prefix(value):\n+        \"\"\"\n+        Add SCRIPT_NAME prefix to relative paths.\n+\n+        Useful when the app is being served at a subpath and manually prefixing\n+        subpath to STATIC_URL and MEDIA_URL in settings is inconvenient.\n+        \"\"\"\n+        # Don't apply prefix to valid URLs.\n+        try:\n+            URLValidator()(value)\n+            return value\n+        except (ValidationError, AttributeError):\n+            pass\n+        # Don't apply prefix to absolute paths.\n+        if value.startswith('/'):\n+            return value\n+        from django.urls import get_script_prefix\n+        return '%s%s' % (get_script_prefix(), value)\n+\n     @property\n     def configured(self):\n         \"\"\"Return True if the settings have already been configured.\"\"\"\n@@ -128,6 +149,14 @@ def PASSWORD_RESET_TIMEOUT_DAYS(self):\n             )\n         return self.__getattr__('PASSWORD_RESET_TIMEOUT_DAYS')\n \n+    @property\n+    def STATIC_URL(self):\n+        return self._add_script_prefix(self.__getattr__('STATIC_URL'))\n+\n+    @property\n+    def MEDIA_URL(self):\n+        return self._add_script_prefix(self.__getattr__('MEDIA_URL'))\n+\n \n class Settings:\n     def __init__(self, settings_module):\n",
  "test_patch": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -521,7 +521,7 @@ def test_setting_changed(self):\n         defaults_storage = self.storage_class()\n         settings = {\n             'MEDIA_ROOT': 'overridden_media_root',\n-            'MEDIA_URL': 'overridden_media_url/',\n+            'MEDIA_URL': '/overridden_media_url/',\n             'FILE_UPLOAD_PERMISSIONS': 0o333,\n             'FILE_UPLOAD_DIRECTORY_PERMISSIONS': 0o333,\n         }\ndiff --git a/tests/settings_tests/tests.py b/tests/settings_tests/tests.py\n--- a/tests/settings_tests/tests.py\n+++ b/tests/settings_tests/tests.py\n@@ -12,6 +12,7 @@\n     override_settings, signals,\n )\n from django.test.utils import requires_tz_support\n+from django.urls import clear_script_prefix, set_script_prefix\n \n \n @modify_settings(ITEMS={\n@@ -567,3 +568,51 @@ def decorated_function():\n         signals.setting_changed.disconnect(self.receiver)\n         # This call shouldn't raise any errors.\n         decorated_function()\n+\n+\n+class MediaURLStaticURLPrefixTest(SimpleTestCase):\n+    def set_script_name(self, val):\n+        clear_script_prefix()\n+        if val is not None:\n+            set_script_prefix(val)\n+\n+    def test_not_prefixed(self):\n+        # Don't add SCRIPT_NAME prefix to valid URLs, absolute paths or None.\n+        tests = (\n+            '/path/',\n+            'http://myhost.com/path/',\n+            None,\n+        )\n+        for setting in ('MEDIA_URL', 'STATIC_URL'):\n+            for path in tests:\n+                new_settings = {setting: path}\n+                with self.settings(**new_settings):\n+                    for script_name in ['/somesubpath', '/somesubpath/', '/', '', None]:\n+                        with self.subTest(script_name=script_name, **new_settings):\n+                            try:\n+                                self.set_script_name(script_name)\n+                                self.assertEqual(getattr(settings, setting), path)\n+                            finally:\n+                                clear_script_prefix()\n+\n+    def test_add_script_name_prefix(self):\n+        tests = (\n+            # Relative paths.\n+            ('/somesubpath', 'path/', '/somesubpath/path/'),\n+            ('/somesubpath/', 'path/', '/somesubpath/path/'),\n+            ('/', 'path/', '/path/'),\n+            # Invalid URLs.\n+            ('/somesubpath/', 'htp://myhost.com/path/', '/somesubpath/htp://myhost.com/path/'),\n+            # Blank settings.\n+            ('/somesubpath/', '', '/somesubpath/'),\n+        )\n+        for setting in ('MEDIA_URL', 'STATIC_URL'):\n+            for script_name, path, expected_path in tests:\n+                new_settings = {setting: path}\n+                with self.settings(**new_settings):\n+                    with self.subTest(script_name=script_name, **new_settings):\n+                        try:\n+                            self.set_script_name(script_name)\n+                            self.assertEqual(getattr(settings, setting), expected_path)\n+                        finally:\n+                            clear_script_prefix()\n",
  "problem_statement": "Add support for SCRIPT_NAME in STATIC_URL and MEDIA_URL\nDescription\n\t \n\t\t(last modified by Rostyslav Bryzgunov)\n\t \nBy default, {% static '...' %} tag just appends STATIC_URL in the path. When running on sub-path, using SCRIPT_NAME WSGI param, it results in incorrect static URL - it doesn't prepend SCRIPT_NAME prefix.\nThis problem can be solved with prepending SCRIPT_NAME to STATIC_URL in settings.py but that doesn't work when SCRIPT_NAME is a dynamic value.\nThis can be easily added into default Django static tag and django.contrib.staticfiles tag as following:\ndef render(self, context):\n\turl = self.url(context)\n\t# Updating url here with request.META['SCRIPT_NAME'] \n\tif self.varname is None:\n\t\treturn url\n\tcontext[self.varname] = url\n\t\treturn ''\nOn more research I found that FileSystemStorage and StaticFilesStorage ignores SCRIPT_NAME as well. \nWe might have to do a lot of changes but I think it's worth the efforts.\n",
  "hints_text": "This change doesn't seem correct to me (for one, it seems like it could break existing sites). Why not include the appropriate prefix in your STATIC_URL and MEDIA_URL settings?\nThis is not a patch. This is just an idea I got about the patch for {% static %} only. The patch will (probably) involve FileSystemStorage and StaticFileSystemStorage classes. The main idea behind this feature was that Django will auto detect script_name header and use that accordingly for creating static and media urls. This will reduce human efforts for setting up sites in future. This patch will also take time to develop so it can be added in Django2.0 timeline.\nWhat I meant was that I don't think Django should automatically use SCRIPT_NAME in generating those URLs. If you're running your site on a subpath, then you should set your STATIC_URL to '​http://example.com/subpath/static/' or whatever. However, you might not even be hosting static and uploaded files on the same domain as your site (in fact, for user-uploaded files, you shouldn't do that ​for security reasons) in which case SCRIPT_URL is irrelevant in constructing the static/media URLs. How would the change make it easier to setup sites?\nI think that the idea basically makes sense. Ideally, a Django instance shouldn't need to know at which subpath it is being deployed, as this can be considered as purely sysadmin stuff. It would be a good separation of concerns. For example, the Web administrator may change the WSGIScriptAlias from /foo to /bar and the application should continue working. Of course, this only applies when *_URL settings are not full URIs. In practice, it's very likely that many running instances are adapting their *_URL settings to include the base script path, hence the behavior change would be backwards incompatible. The question is whether the change is worth the incompatibility.\nI see. I guess the idea would be to use get_script_prefix() like reverse() does as I don't think we have access to request everywhere we need it. It seems like some public APIs like get_static_url() and get_media_url() would replace accessing the settings directly whenever building URLs. For backwards compatibility, possibly these functions could try to detect if the setting is already prefixed appropriately. Removing the prefix from the settings, however, means that the URLs are no longer correct when generated outside of a request/response cycle though (#16734). I'm not sure if it might create any practical problems, but we might think about addressing that issue first.\nI'm here at DjangoCon US 2016 will try to create a patch for this ticket ;) Why? But before I make the patch, here are some reasons to do it. The first reason is consistency inside Django core: {% url '...' %} template tag does respect SCRIPT_NAME but {% static '...' %} does not reverse(...) function does respect SCRIPT_NAME but static(...) does not And the second reason is that there is no way to make it work in case when SCRIPT_NAME is a dynamic value - see an example below. Of course we shouldn't modify STATIC_URL when it's an absolute URL, with domain & protocol. But if it starts with / - it's relative to our Django project and we need to add SCRIPT_NAME prefix. Real life example You have Django running via WSGI behind reverse proxy (let's call it back-end server), and another HTTP server on the front (let's call it front-end server). Front-end server URL is http://some.domain.com/sub/path/, back-end server URL is http://1.2.3.4:5678/. You want them both to work. You pass SCRIPT_NAME = '/sub/path/' from front-end server to back-end one. But when you access back-end server directly - there is no SCRIPT_NAME passed to WSGI/Django. So we cannot hard-code SCRIPT_NAME in Django settings because it's dynamic.\nPull-request created: ​https://github.com/django/django/pull/7000\nAt least documentation and additional tests look like they are required.\nAbsolutely agree with your remarks, Tim. I'll add tests. Could you point to docs that need to be updated?\nI would like to take this ticket on and have a new PR for it: ​https://github.com/django/django/pull/10724",
  "created_at": "2019-07-12T21:06:28Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_add_script_name_prefix (settings_tests.tests.MediaURLStaticURLPrefixTest)\", \"test_not_prefixed (settings_tests.tests.MediaURLStaticURLPrefixTest)\"]",
  "PASS_TO_PASS": "[\"test_max_recursion_error (settings_tests.tests.ClassDecoratedTestCaseSuper)\", \"test_override_settings_inheritance (settings_tests.tests.ChildDecoratedTestCase)\", \"test_method_override (settings_tests.tests.FullyDecoratedTestCase)\", \"test_override (settings_tests.tests.FullyDecoratedTestCase)\", \"test_max_recursion_error (settings_tests.tests.ClassDecoratedTestCase)\", \"test_method_override (settings_tests.tests.ClassDecoratedTestCase)\", \"test_override (settings_tests.tests.ClassDecoratedTestCase)\", \"Settings are overridden within setUpClass (#21281).\", \"Regression test for #9610.\", \"test_first_character_dot (file_storage.tests.FileStoragePathParsing)\", \"test_get_filesystem_storage (file_storage.tests.GetStorageClassTests)\", \"test_get_invalid_storage_module (file_storage.tests.GetStorageClassTests)\", \"test_get_nonexistent_storage_class (file_storage.tests.GetStorageClassTests)\", \"test_get_nonexistent_storage_module (file_storage.tests.GetStorageClassTests)\", \"Receiver fails on both enter and exit.\", \"Receiver fails on enter only.\", \"Receiver fails on exit only.\", \"test_override_settings_reusable_on_enter (settings_tests.tests.OverrideSettingsIsolationOnExceptionTests)\", \"test_configure (settings_tests.tests.IsOverriddenTest)\", \"test_evaluated_lazysettings_repr (settings_tests.tests.IsOverriddenTest)\", \"test_module (settings_tests.tests.IsOverriddenTest)\", \"test_override (settings_tests.tests.IsOverriddenTest)\", \"test_settings_repr (settings_tests.tests.IsOverriddenTest)\", \"test_unevaluated_lazysettings_repr (settings_tests.tests.IsOverriddenTest)\", \"test_usersettingsholder_repr (settings_tests.tests.IsOverriddenTest)\", \"test_content_saving (file_storage.tests.ContentFileStorageTestCase)\", \"test_none (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_with_xheader_right (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_with_xheader_wrong (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_without_xheader (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_xheader_preferred_to_underlying_request (settings_tests.tests.SecureProxySslHeaderTest)\", \"Regression test for #19031\", \"test_already_configured (settings_tests.tests.SettingsTests)\", \"test_class_decorator (settings_tests.tests.SettingsTests)\", \"test_context_manager (settings_tests.tests.SettingsTests)\", \"test_decorator (settings_tests.tests.SettingsTests)\", \"test_incorrect_timezone (settings_tests.tests.SettingsTests)\", \"test_no_secret_key (settings_tests.tests.SettingsTests)\", \"test_no_settings_module (settings_tests.tests.SettingsTests)\", \"test_nonupper_settings_ignored_in_default_settings (settings_tests.tests.SettingsTests)\", \"test_nonupper_settings_prohibited_in_configure (settings_tests.tests.SettingsTests)\", \"test_override (settings_tests.tests.SettingsTests)\", \"test_override_change (settings_tests.tests.SettingsTests)\", \"test_override_doesnt_leak (settings_tests.tests.SettingsTests)\", \"test_override_settings_delete (settings_tests.tests.SettingsTests)\", \"test_override_settings_nested (settings_tests.tests.SettingsTests)\", \"test_settings_delete (settings_tests.tests.SettingsTests)\", \"test_settings_delete_wrapped (settings_tests.tests.SettingsTests)\", \"test_signal_callback_context_manager (settings_tests.tests.SettingsTests)\", \"test_signal_callback_decorator (settings_tests.tests.SettingsTests)\", \"test_tuple_settings (settings_tests.tests.TestListSettings)\", \"test_deconstruction (file_storage.tests.FileSystemStorageTests)\", \"test_lazy_base_url_init (file_storage.tests.FileSystemStorageTests)\", \"test_file_upload_default_permissions (file_storage.tests.FileStoragePermissions)\", \"test_file_upload_directory_default_permissions (file_storage.tests.FileStoragePermissions)\", \"test_file_upload_directory_permissions (file_storage.tests.FileStoragePermissions)\", \"test_file_upload_permissions (file_storage.tests.FileStoragePermissions)\", \"test_decorated_testcase_module (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_decorated_testcase_name (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override_nested_order (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override_no_ops (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override_strings (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_override (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_override (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_custom_valid_name_callable_upload_to (file_storage.tests.FileFieldStorageTests)\", \"test_duplicate_filename (file_storage.tests.FileFieldStorageTests)\", \"test_empty_upload_to (file_storage.tests.FileFieldStorageTests)\", \"test_extended_length_storage (file_storage.tests.FileFieldStorageTests)\", \"test_file_object (file_storage.tests.FileFieldStorageTests)\", \"test_file_truncation (file_storage.tests.FileFieldStorageTests)\", \"test_filefield_default (file_storage.tests.FileFieldStorageTests)\", \"test_filefield_pickling (file_storage.tests.FileFieldStorageTests)\", \"test_filefield_read (file_storage.tests.FileFieldStorageTests)\", \"test_filefield_reopen (file_storage.tests.FileFieldStorageTests)\", \"test_filefield_write (file_storage.tests.FileFieldStorageTests)\", \"test_files (file_storage.tests.FileFieldStorageTests)\", \"test_pathlib_upload_to (file_storage.tests.FileFieldStorageTests)\", \"test_random_upload_to (file_storage.tests.FileFieldStorageTests)\", \"test_stringio (file_storage.tests.FileFieldStorageTests)\", \"test_base_url (file_storage.tests.OverwritingStorageTests)\", \"test_delete_deletes_directories (file_storage.tests.OverwritingStorageTests)\", \"test_delete_no_name (file_storage.tests.OverwritingStorageTests)\", \"test_empty_location (file_storage.tests.OverwritingStorageTests)\", \"test_file_access_options (file_storage.tests.OverwritingStorageTests)\", \"test_file_chunks_error (file_storage.tests.OverwritingStorageTests)\", \"test_file_get_accessed_time (file_storage.tests.OverwritingStorageTests)\", \"test_file_get_accessed_time_timezone (file_storage.tests.OverwritingStorageTests)\", \"test_file_get_created_time (file_storage.tests.OverwritingStorageTests)\", \"test_file_get_created_time_timezone (file_storage.tests.OverwritingStorageTests)\", \"test_file_get_modified_time (file_storage.tests.OverwritingStorageTests)\", \"test_file_get_modified_time_timezone (file_storage.tests.OverwritingStorageTests)\", \"test_file_path (file_storage.tests.OverwritingStorageTests)\", \"test_file_save_with_path (file_storage.tests.OverwritingStorageTests)\", \"test_file_save_without_name (file_storage.tests.OverwritingStorageTests)\", \"The storage backend should preserve case of filenames.\", \"test_file_storage_prevents_directory_traversal (file_storage.tests.OverwritingStorageTests)\", \"test_file_url (file_storage.tests.OverwritingStorageTests)\", \"test_listdir (file_storage.tests.OverwritingStorageTests)\", \"test_makedirs_race_handling (file_storage.tests.OverwritingStorageTests)\", \"test_remove_race_handling (file_storage.tests.OverwritingStorageTests)\", \"test_save_doesnt_close (file_storage.tests.OverwritingStorageTests)\", \"Saving to same file name twice overwrites the first file.\", \"test_setting_changed (file_storage.tests.OverwritingStorageTests)\", \"test_base_url (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_custom_storage_discarding_empty_content (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_delete_deletes_directories (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_delete_no_name (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_empty_location (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_access_options (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_chunks_error (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_get_accessed_time (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_get_accessed_time_timezone (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_get_created_time (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_get_created_time_timezone (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_get_modified_time (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_get_modified_time_timezone (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_path (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_save_with_path (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_save_without_name (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_storage_prevents_directory_traversal (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_file_url (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_listdir (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_makedirs_race_handling (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_remove_race_handling (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_save_doesnt_close (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_setting_changed (file_storage.tests.DiscardingFalseContentStorageTests)\", \"test_base_url (file_storage.tests.CustomStorageTests)\", \"test_custom_get_available_name (file_storage.tests.CustomStorageTests)\", \"test_delete_deletes_directories (file_storage.tests.CustomStorageTests)\", \"test_delete_no_name (file_storage.tests.CustomStorageTests)\", \"test_empty_location (file_storage.tests.CustomStorageTests)\", \"test_file_access_options (file_storage.tests.CustomStorageTests)\", \"test_file_chunks_error (file_storage.tests.CustomStorageTests)\", \"test_file_get_accessed_time (file_storage.tests.CustomStorageTests)\", \"test_file_get_accessed_time_timezone (file_storage.tests.CustomStorageTests)\", \"test_file_get_created_time (file_storage.tests.CustomStorageTests)\", \"test_file_get_created_time_timezone (file_storage.tests.CustomStorageTests)\", \"test_file_get_modified_time (file_storage.tests.CustomStorageTests)\", \"test_file_get_modified_time_timezone (file_storage.tests.CustomStorageTests)\", \"test_file_path (file_storage.tests.CustomStorageTests)\", \"test_file_save_with_path (file_storage.tests.CustomStorageTests)\", \"test_file_save_without_name (file_storage.tests.CustomStorageTests)\", \"test_file_storage_prevents_directory_traversal (file_storage.tests.CustomStorageTests)\", \"test_file_url (file_storage.tests.CustomStorageTests)\", \"test_listdir (file_storage.tests.CustomStorageTests)\", \"test_makedirs_race_handling (file_storage.tests.CustomStorageTests)\", \"test_remove_race_handling (file_storage.tests.CustomStorageTests)\", \"test_save_doesnt_close (file_storage.tests.CustomStorageTests)\", \"test_setting_changed (file_storage.tests.CustomStorageTests)\", \"test_base_url (file_storage.tests.FileStorageTests)\", \"test_delete_deletes_directories (file_storage.tests.FileStorageTests)\", \"test_delete_no_name (file_storage.tests.FileStorageTests)\", \"test_empty_location (file_storage.tests.FileStorageTests)\", \"test_file_access_options (file_storage.tests.FileStorageTests)\", \"test_file_chunks_error (file_storage.tests.FileStorageTests)\", \"test_file_get_accessed_time (file_storage.tests.FileStorageTests)\", \"test_file_get_accessed_time_timezone (file_storage.tests.FileStorageTests)\", \"test_file_get_created_time (file_storage.tests.FileStorageTests)\", \"test_file_get_created_time_timezone (file_storage.tests.FileStorageTests)\", \"test_file_get_modified_time (file_storage.tests.FileStorageTests)\", \"test_file_get_modified_time_timezone (file_storage.tests.FileStorageTests)\", \"test_file_path (file_storage.tests.FileStorageTests)\", \"test_file_save_with_path (file_storage.tests.FileStorageTests)\", \"test_file_save_without_name (file_storage.tests.FileStorageTests)\", \"test_file_storage_prevents_directory_traversal (file_storage.tests.FileStorageTests)\", \"test_file_url (file_storage.tests.FileStorageTests)\", \"test_listdir (file_storage.tests.FileStorageTests)\", \"test_makedirs_race_handling (file_storage.tests.FileStorageTests)\", \"test_remove_race_handling (file_storage.tests.FileStorageTests)\", \"test_save_doesnt_close (file_storage.tests.FileStorageTests)\", \"test_setting_changed (file_storage.tests.FileStorageTests)\", \"test_urllib_request_urlopen (file_storage.tests.FileLikeObjectTestCase)\", \"test_race_condition (file_storage.tests.FileSaveRaceConditionTest)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.577158",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}