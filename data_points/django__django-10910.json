{
  "repo": "django/django",
  "instance_id": "django__django-10910",
  "base_commit": "3dca8738cbbbb5674f795169e5ea25e2002f2d71",
  "patch": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -69,9 +69,20 @@ def date_trunc_sql(self, lookup_type, field_name):\n         else:\n             return \"DATE(%s)\" % (field_name)\n \n+    def _prepare_tzname_delta(self, tzname):\n+        if '+' in tzname:\n+            return tzname[tzname.find('+'):]\n+        elif '-' in tzname:\n+            return tzname[tzname.find('-'):]\n+        return tzname\n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ and self.connection.timezone_name != tzname:\n-            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, self.connection.timezone_name, tzname)\n+            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (\n+                field_name,\n+                self.connection.timezone_name,\n+                self._prepare_tzname_delta(tzname),\n+            )\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -94,6 +94,13 @@ def date_trunc_sql(self, lookup_type, field_name):\n     # This regexp matches all time zone names from the zoneinfo database.\n     _tzname_re = re.compile(r'^[\\w/:+-]+$')\n \n+    def _prepare_tzname_delta(self, tzname):\n+        if '+' in tzname:\n+            return tzname[tzname.find('+'):]\n+        elif '-' in tzname:\n+            return tzname[tzname.find('-'):]\n+        return tzname\n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if not settings.USE_TZ:\n             return field_name\n@@ -106,7 +113,7 @@ def _convert_field_to_tz(self, field_name, tzname):\n             return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (\n                 field_name,\n                 self.connection.timezone_name,\n-                tzname,\n+                self._prepare_tzname_delta(tzname),\n             )\n         return field_name\n \ndiff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -40,9 +40,16 @@ def date_trunc_sql(self, lookup_type, field_name):\n         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n+    def _prepare_tzname_delta(self, tzname):\n+        if '+' in tzname:\n+            return tzname.replace('+', '-')\n+        elif '-' in tzname:\n+            return tzname.replace('-', '+')\n+        return tzname\n+\n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"%s AT TIME ZONE '%s'\" % (field_name, tzname)\n+            field_name = \"%s AT TIME ZONE '%s'\" % (field_name, self._prepare_tzname_delta(tzname))\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -408,6 +408,14 @@ def _sqlite_datetime_parse(dt, tzname=None, conn_tzname=None):\n     if conn_tzname:\n         dt = dt.replace(tzinfo=pytz.timezone(conn_tzname))\n     if tzname is not None and tzname != conn_tzname:\n+        sign_index = tzname.find('+') + tzname.find('-') + 1\n+        if sign_index > -1:\n+            sign = tzname[sign_index]\n+            tzname, offset = tzname.split(sign)\n+            if offset:\n+                hours, minutes = offset.split(':')\n+                offset_delta = datetime.timedelta(hours=int(hours), minutes=int(minutes))\n+                dt += offset_delta if sign == '+' else -offset_delta\n         dt = timezone.localtime(dt, pytz.timezone(tzname))\n     return dt\n \n",
  "test_patch": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -1,4 +1,4 @@\n-from datetime import datetime, timedelta\n+from datetime import datetime, timedelta, timezone as datetime_timezone\n \n import pytz\n \n@@ -988,6 +988,8 @@ def test_extract_func_with_timezone(self):\n         end_datetime = timezone.make_aware(end_datetime, is_dst=False)\n         self.create_model(start_datetime, end_datetime)\n         melb = pytz.timezone('Australia/Melbourne')\n+        delta_tzinfo_pos = datetime_timezone(timedelta(hours=5))\n+        delta_tzinfo_neg = datetime_timezone(timedelta(hours=-5, minutes=17))\n \n         qs = DTModel.objects.annotate(\n             day=Extract('start_datetime', 'day'),\n@@ -999,6 +1001,9 @@ def test_extract_func_with_timezone(self):\n             quarter=ExtractQuarter('start_datetime', tzinfo=melb),\n             hour=ExtractHour('start_datetime'),\n             hour_melb=ExtractHour('start_datetime', tzinfo=melb),\n+            hour_with_delta_pos=ExtractHour('start_datetime', tzinfo=delta_tzinfo_pos),\n+            hour_with_delta_neg=ExtractHour('start_datetime', tzinfo=delta_tzinfo_neg),\n+            minute_with_delta_neg=ExtractMinute('start_datetime', tzinfo=delta_tzinfo_neg),\n         ).order_by('start_datetime')\n \n         utc_model = qs.get()\n@@ -1011,6 +1016,9 @@ def test_extract_func_with_timezone(self):\n         self.assertEqual(utc_model.quarter, 2)\n         self.assertEqual(utc_model.hour, 23)\n         self.assertEqual(utc_model.hour_melb, 9)\n+        self.assertEqual(utc_model.hour_with_delta_pos, 4)\n+        self.assertEqual(utc_model.hour_with_delta_neg, 18)\n+        self.assertEqual(utc_model.minute_with_delta_neg, 47)\n \n         with timezone.override(melb):\n             melb_model = qs.get()\n",
  "problem_statement": "Using database functions with tzinfo=datetime.timezone(datetime.timedelta(...)) results in an incorrect query\nDescription\n\t\nI haven’t checked this bug with other databases, but it definitely works improperly with postgres.\nDjango ORM create incorrect query when I use timezone determined like \"timezone(timedelta(hours=some_hours))\".\n\"timezone(timedelta(hours=5))\" in query will look like \"UTC+05:00\", but postgres doesn't know this timezone name and handle it as POSIX style.\n\"UTC\" part will be interpreted as some zone abbreviation and timezone will be shifted by 5 hours to the west (positive shift is shift to the west in accordance with POSIX standart), i.e. actually timezone will be equal to UTC-5.\nFrom ​https://www.postgresql.org/docs/10/datatype-datetime.html :\n\"In addition to the timezone names and abbreviations, PostgreSQL will accept POSIX-style time zone specifications of the form STDoffset or STDoffsetDST, where STD is a zone abbreviation, offset is a numeric offset in hours west from UTC\"\nChecked with:\ndjango==2.1.5\npsycopg2==2.7.6.1\npostgreSQL==10.6\nUsing the following example model:\nclass test(models.Model):\n\tclass Meta:\n\t\tdb_table = 'test_timezones'\n\tdatetime = models.DateTimeField()\nSample of bug is bellow:\n>>> from datetime import timezone, timedelta\n>>> from django.db.models.functions import ExtractWeekDay\n>>> from django_issues.models import test\n>>> from django.db.models.functions import ExtractHour\n>>> from pytz import timezone as pytz_timezone\n>>> print(test.objects.annotate(hour=ExtractHour('datetime')).values('datetime', 'hour').get())\n{'datetime': datetime.datetime(2018, 1, 1, 7, 0, tzinfo=<UTC>), 'hour': 7}\n>>> tz = timezone(timedelta(hours=5))\n>>> print(tz)\nUTC+05:00\n>>> print(test.objects.annotate(hour=ExtractHour('datetime', tzinfo=tz)).values('datetime', 'hour').get())\n{'datetime': datetime.datetime(2018, 1, 1, 7, 0, tzinfo=<UTC>), 'hour': 2}\n>>> print(test.objects.annotate(hour=ExtractHour('datetime', tzinfo=tz)).values('datetime', 'hour').query)\nSELECT \"test_timezones\".\"datetime\", EXTRACT('hour' FROM \"test_timezones\".\"datetime\" AT TIME ZONE 'UTC+05:00') AS \"hour\" FROM \"test_timezones\"\n>>> tz2 = pytz_timezone('Asia/Yekaterinburg')\n>>> print(tz2)\nAsia/Yekaterinburg\n>>> print(test.objects.annotate(hour=ExtractHour('datetime', tzinfo=tz2)).values('datetime', 'hour').get())\n{'datetime': datetime.datetime(2018, 1, 1, 7, 0, tzinfo=<UTC>), 'hour': 12}\n",
  "hints_text": "Using a timedelta as the tzinfo argument to database functions looks untested so I can understand if it's not working.\nIt's about tzinfo=datetime.timezone(datetime.timedelta(...)) not tzinfo=datetime.timedelta(...).\n​PR\nTests aren't passing.\nI needed help about sqlite3 date parse process. I've tried to solve it in _sqlite_datetime_parse func.\nOracle support is missing.\nBar the release note change, and the Oracle CI, this looks good to go.\nNew test fails on Oracle, so...\nOK, rebased and looking good. Thanks Can!\nMarking PnI since Mariusz asked for a simplification of the SQLite version. (Can, please uncheck when you've looked at that.)",
  "created_at": "2019-01-28T08:12:14Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_extract_func_with_timezone (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\"]",
  "PASS_TO_PASS": "[\"test_extract_day_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_duration_without_native_duration_field (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_iso_year_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_iso_year_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_month_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_quarter_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_second_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_week_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_week_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_weekday_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_exact_lookup (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_greaterthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_lessthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_date_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_date_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_day_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_month_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_second_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_subquery_with_parameters (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_time_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_time_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_week_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_year_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_day_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_duration_without_native_duration_field (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_func_explicit_timezone_priority (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_iso_year_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_iso_year_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_month_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_quarter_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_second_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_week_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_week_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_weekday_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_exact_lookup (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_greaterthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_lessthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_ambiguous_and_invalid_times (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_date_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_date_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_day_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_func_with_timezone (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_month_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_second_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_subquery_with_parameters (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_time_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_time_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_timezone_applied_before_truncation (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_week_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_year_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.553387",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}