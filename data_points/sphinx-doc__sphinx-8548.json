{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8548",
  "base_commit": "dd1615c59dc6fff633e27dbb3861f2d27e1fb976",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1584,7 +1584,7 @@ def add_directive_header(self, sig: str) -> None:\n                 self.add_line('   ' + _('Bases: %s') % ', '.join(bases), sourcename)\n \n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n-        members = get_class_members(self.object, self.objpath, self.get_attr, self.analyzer)\n+        members = get_class_members(self.object, self.objpath, self.get_attr)\n         if not want_all:\n             if not self.options.members:\n                 return False, []  # type: ignore\ndiff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -14,7 +14,7 @@\n from typing import Any, Callable, Dict, List, Mapping, NamedTuple, Optional, Tuple\n \n from sphinx.deprecation import RemovedInSphinx40Warning, deprecated_alias\n-from sphinx.pycode import ModuleAnalyzer\n+from sphinx.pycode import ModuleAnalyzer, PycodeError\n from sphinx.util import logging\n from sphinx.util.inspect import (getannotations, getmro, getslots, isclass, isenumclass,\n                                  safe_getattr)\n@@ -251,8 +251,8 @@ def __init__(self, cls: Any, name: str, value: Any, docstring: Optional[str] = N\n         self.docstring = docstring\n \n \n-def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n-                      analyzer: ModuleAnalyzer = None) -> Dict[str, ClassAttribute]:\n+def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable\n+                      ) -> Dict[str, ClassAttribute]:\n     \"\"\"Get members and attributes of target class.\"\"\"\n     from sphinx.ext.autodoc import INSTANCEATTR\n \n@@ -297,23 +297,31 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         except AttributeError:\n             continue\n \n-    # annotation only member (ex. attr: int)\n-    for cls in getmro(subject):\n-        try:\n-            for name in getannotations(cls):\n-                name = unmangle(cls, name)\n-                if name and name not in members:\n-                    members[name] = ClassAttribute(cls, name, INSTANCEATTR)\n-        except AttributeError:\n-            pass\n-\n-    if analyzer:\n-        # append instance attributes (cf. self.attr1) if analyzer knows\n-        namespace = '.'.join(objpath)\n-        for (ns, name), docstring in analyzer.attr_docs.items():\n-            if namespace == ns and name not in members:\n-                members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n-                                               '\\n'.join(docstring))\n+    try:\n+        for cls in getmro(subject):\n+            # annotation only member (ex. attr: int)\n+            try:\n+                for name in getannotations(cls):\n+                    name = unmangle(cls, name)\n+                    if name and name not in members:\n+                        members[name] = ClassAttribute(cls, name, INSTANCEATTR)\n+            except AttributeError:\n+                pass\n+\n+            # append instance attributes (cf. self.attr1) if analyzer knows\n+            try:\n+                modname = safe_getattr(cls, '__module__')\n+                qualname = safe_getattr(cls, '__qualname__')\n+                analyzer = ModuleAnalyzer.for_module(modname)\n+                analyzer.analyze()\n+                for (ns, name), docstring in analyzer.attr_docs.items():\n+                    if ns == qualname and name not in members:\n+                        members[name] = ClassAttribute(cls, name, INSTANCEATTR,\n+                                                       '\\n'.join(docstring))\n+            except (AttributeError, PycodeError):\n+                pass\n+    except AttributeError:\n+        pass\n \n     return members\n \n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/instance_variable.py b/tests/roots/test-ext-autodoc/target/instance_variable.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/instance_variable.py\n@@ -0,0 +1,10 @@\n+class Foo:\n+    def __init__(self):\n+        self.attr1 = None  #: docstring foo\n+        self.attr2 = None  #: docstring foo\n+\n+\n+class Bar(Foo):\n+    def __init__(self):\n+        self.attr2 = None  #: docstring bar\n+        self.attr3 = None  #: docstring bar\ndiff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -51,6 +51,61 @@ def test_classes(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_instance_variable(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'class', 'target.instance_variable.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.instance_variable',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr3',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_inherited_instance_variable(app):\n+    options = {'members': True,\n+               'inherited-members': True}\n+    actual = do_autodoc(app, 'class', 'target.instance_variable.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.instance_variable',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring foo',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr3',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+    ]\n+\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "problem_statement": "autodoc inherited-members won't work for inherited attributes (data members).\nautodoc searches for a cached docstring using (namespace, attrname) as search-key, but doesn't check for baseclass-namespace.\n\n---\n- Bitbucket: https://bitbucket.org/birkenfeld/sphinx/issue/741\n- Originally reported by: Anonymous\n- Originally created at: 2011-08-02T17:05:58.754\n\n",
  "hints_text": "_From [mitar](https://bitbucket.org/mitar) on 2012-01-07 18:21:47+00:00_\n\nAlso {{{find_attr_doc}}} seems to not find inherited attributes?\n\n_From [mitar](https://bitbucket.org/mitar) on 2012-01-07 20:04:22+00:00_\n\nThe problem is also that parser for attributes' doc strings parses only one module. It should also parses modules of all parent classes and combine everything.\n\n_From Jon Waltman on 2012-11-30 15:14:18+00:00_\n\nIssue #1048 was marked as a duplicate of this issue.\n\nI'm currently getting bit by this issue in 1.2.3.  https://github.com/sphinx-doc/sphinx/issues/2233 is preventing me from working with `1.3.x`.  Is there a workaround you might recommend?  \n\nIs there any hope of getting this fixed, or a workaround? As mentioned in  #1048 even using autoattribute does not work. \n\nI'm also running into this.  For now I'm manually duplicating docstrings, but it would be nice if `:inherited-members:` worked.\n\nI'm not familiar with the code base at all, but if anyone's willing to point me in a direction I can try to write a fix.\n\nAny news on this feature / bugfix ?\nI am also awaiting a fix for this, fwiw\nI don't understand this problem. Could anyone make an example to me? I'll try to fix it if possible.\n@tk0miya Here's a very simple example project: [sphinx-example.tar.gz](https://github.com/sphinx-doc/sphinx/files/2753140/sphinx-example.tar.gz).\r\n\r\n\r\n```python\r\nclass Base:\r\n    \"\"\"The base class.\"\"\"\r\n\r\n    #: A base attribute.\r\n    ham = True\r\n\r\n    def eggs(self):\r\n        \"\"\"A base method.\"\"\"\r\n\r\n\r\nclass Inherited(Base):\r\n    \"\"\"The subclass.\"\"\"\r\n\r\n    #: A local attribute.\r\n    foo = 3\r\n\r\n    def bar(self):\r\n        \"\"\"A local method.\"\"\"\r\n```\r\n\r\n```rst\r\n.. autoclass:: example.Inherited\r\n    :inherited-members:\r\n```\r\n\r\nThe `Base.ham` attribute is not present in the docs for `Inherited`. However, the `Base.eggs` inherited method is displayed.\nIn my case ham is an instance attribute and I want it to be auto-documented but it is not working. \r\n\r\n```\r\nclass Base:\r\n    \"\"\"The base class.\"\"\"\r\n\r\n    def __init__(self):\r\n        #: A base attribute.\r\n        self.ham = True\r\n\r\n    def eggs(self):\r\n        \"\"\"A base method.\"\"\"\r\n```\r\n\r\n\r\nI am not sure it is even technically possible for Sphinx to auto-document `self.ham`. As I understood Sphinx finds attributes by code inspection, not actually instantiating the class.  And to detect the ham instance attribute it seems to me you need to instantiate the Base class.\nIt seems latest Sphinx (2.0.1) is able to process inherited attributes. On the other hand, inherited-instance attributes are not supported yet (filed as #6415 now).\r\nSo I think this issue has been resolved now.\r\n\r\nI'm closing this. Please let me know if you're still in problem.\r\n\r\nThanks,\n@tk0miya I just tried the example I posted earlier with Sphinx 2.1.0 and this issue still occurs. https://github.com/sphinx-doc/sphinx/issues/741#issuecomment-453832459\r\n\r\n#6415 and @Dmitrii-I's comment is different, but possibly related.\nThank you for comment. my bad. Just reopened. I might give `:undoc-members:` option on testing...\r\n\r\nInside autodoc, the comment based docstring is strongly coupled with its class. So autodoc considers the docstring for `Base.ham` is not related with `Inherited.ham`. As a result, `Inherited.ham` is detected undocumented variable.\r\n\r\nI'll try to fix this again.",
  "created_at": "2020-12-17T13:46:32Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_autoclass.py::test_inherited_instance_variable\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_autoclass.py::test_classes\", \"tests/test_ext_autodoc_autoclass.py::test_instance_variable\", \"tests/test_ext_autodoc_autoclass.py::test_decorators\", \"tests/test_ext_autodoc_autoclass.py::test_slots_attribute\", \"tests/test_ext_autodoc_autoclass.py::test_show_inheritance_for_subclass_of_generic_type\"]",
  "environment_setup_commit": "3f560cd67239f75840cc7a439ab54d8509c855f6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.056069",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}