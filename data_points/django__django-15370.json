{
  "repo": "django/django",
  "instance_id": "django__django-15370",
  "base_commit": "67db54a5a7e0f1c2aa395e1db51214d09ae41f3f",
  "patch": "diff --git a/django/utils/safestring.py b/django/utils/safestring.py\n--- a/django/utils/safestring.py\n+++ b/django/utils/safestring.py\n@@ -9,6 +9,8 @@\n \n \n class SafeData:\n+    __slots__ = ()\n+\n     def __html__(self):\n         \"\"\"\n         Return the html representation of a string for interoperability.\n@@ -23,6 +25,9 @@ class SafeString(str, SafeData):\n     A str subclass that has been specifically marked as \"safe\" for HTML output\n     purposes.\n     \"\"\"\n+\n+    __slots__ = ()\n+\n     def __add__(self, rhs):\n         \"\"\"\n         Concatenating a safe string with another safe bytestring or\n",
  "test_patch": "diff --git a/tests/utils_tests/test_safestring.py b/tests/utils_tests/test_safestring.py\n--- a/tests/utils_tests/test_safestring.py\n+++ b/tests/utils_tests/test_safestring.py\n@@ -2,7 +2,7 @@\n from django.test import SimpleTestCase\n from django.utils import html\n from django.utils.functional import lazy, lazystr\n-from django.utils.safestring import SafeData, mark_safe\n+from django.utils.safestring import SafeData, SafeString, mark_safe\n \n \n class customescape(str):\n@@ -98,3 +98,15 @@ def html_str():\n \n         lazy_str = lazy(html_str, str)()\n         self.assertEqual(mark_safe(lazy_str), html_str())\n+\n+    def test_default_additional_attrs(self):\n+        s = SafeString('a&b')\n+        msg = \"object has no attribute 'dynamic_attr'\"\n+        with self.assertRaisesMessage(AttributeError, msg):\n+            s.dynamic_attr = True\n+\n+    def test_default_safe_data_additional_attrs(self):\n+        s = SafeData()\n+        msg = \"object has no attribute 'dynamic_attr'\"\n+        with self.assertRaisesMessage(AttributeError, msg):\n+            s.dynamic_attr = True\n",
  "problem_statement": "Introduce empty __slots__ protocol for SafeString & SafeData\nDescription\n\t \n\t\t(last modified by Keryn Knight)\n\t \nThis is a case-by-case proposal ultimately referencing #12826\nBecause SafeString is used a lot and is otherwise supposed to be treatable as a untainted str we should be able to (AFAIK) update it + it's inheritance chain to use __slots__ = () whilst still allowing custom subclasses of either to add additional attributes. By defining __slots__ as empty on SafeString (and SafeData) we'd avoid creation of a __dict__ on the instance, which mirrors the str() behaviour.\nAccording to pympler, currently in Python 3.10 using the following back of the napkins strings:\nIn [4]: s = \"test\" # this might be interned, as a short string?\nIn [5]: s2 = \"test\" * 100\nIn [6]: s3 = SafeString(\"test\")\nIn [7]: s4 = SafeString(\"test\" * 100)\nwe get:\nIn [8]: asizeof(s) # str\nOut[8]: 56\nIn [9]: asizeof(s2) # str\nOut[9]: 456\nIn [10]: asizeof(s3) # SafeString\nOut[10]: 208\nIn [11]: asizeof(s4) # SafeString\nOut[11]: 608\nBut if we swap out the implementation to be slots'd, it looks more like:\nIn [8]: asizeof(s) # str\nOut[8]: 56\nIn [9]: asizeof(s2) # str\nOut[9]: 456\nIn [10]: asizeof(s3) # SafeString\nOut[10]: 104\nIn [11]: asizeof(s4) # SafeString\nOut[11]: 504\nSo we're \"saving\" 104 bytes per SafeString created, by the look of it. I presume it to be some fun implementation detail of something somewhere that it is allegedly accounting for more than 64 bytes, which is the asizeof({})\nA quick and dirty check over the test suite suggests that for me locally, running 14951 tests in 512.912s accounted for 949.0 MB of SafeStrings, checked by just incrementing a global integer of bytes (using SafeString.__new__ and --parallel=1) and piping that to filesizeformat, so y'know, room for error.\nAfter the patch, the same tests accounted for 779.4 MB of SafeString, \"saving\" 170 MB overall.\nThe only functionality this would preclude -- as far as I know -- is no longer being able to bind arbitrary values to an instance like so:\ns = SafeString('test')\ns.test = 1\nwhich would raise AttributeError if __slots__ were added, just like trying to assign attributes to str() directly does.\nI don't believe this will have any marked performance change, as neither SafeString nor SafeData actually have any extra attributes, only methods.\nI have a branch which implements this, and tests pass for me locally.\n",
  "hints_text": "",
  "created_at": "2022-01-27T19:02:49Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_default_additional_attrs (utils_tests.test_safestring.SafeStringTest)\", \"test_default_safe_data_additional_attrs (utils_tests.test_safestring.SafeStringTest)\"]",
  "PASS_TO_PASS": "[\"test_add_lazy_safe_text_and_safe_text (utils_tests.test_safestring.SafeStringTest)\", \"test_mark_safe (utils_tests.test_safestring.SafeStringTest)\", \"mark_safe used as a decorator leaves the result of a function\", \"mark_safe doesn't affect a callable that has an __html__() method.\", \"mark_safe doesn't affect lazy strings (Promise objects).\", \"test_mark_safe_lazy (utils_tests.test_safestring.SafeStringTest)\", \"test_mark_safe_lazy_result_implements_dunder_html (utils_tests.test_safestring.SafeStringTest)\", \"test_mark_safe_object_implementing_dunder_html (utils_tests.test_safestring.SafeStringTest)\", \"test_mark_safe_object_implementing_dunder_str (utils_tests.test_safestring.SafeStringTest)\", \"test_mark_safe_result_implements_dunder_html (utils_tests.test_safestring.SafeStringTest)\", \"Calling str() on a SafeString instance doesn't lose the safe status.\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.726861",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}