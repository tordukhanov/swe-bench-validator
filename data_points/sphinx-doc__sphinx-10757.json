{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-10757",
  "base_commit": "8c4865c30d5fa847d727fea16519d7afce627932",
  "patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -502,32 +502,34 @@ def run(self, **kwargs: Any) -> None:\n         builder = cast(CheckExternalLinksBuilder, self.app.builder)\n         hyperlinks = builder.hyperlinks\n \n-        # reference nodes\n-        for refnode in self.document.findall(nodes.reference):\n-            if 'refuri' not in refnode:\n-                continue\n-            uri = refnode['refuri']\n+        def add_uri(uri: str, node: nodes.Element) -> None:\n             newuri = self.app.emit_firstresult('linkcheck-process-uri', uri)\n             if newuri:\n                 uri = newuri\n \n-            lineno = get_node_line(refnode)\n+            lineno = get_node_line(node)\n             uri_info = Hyperlink(uri, self.env.docname, lineno)\n             if uri not in hyperlinks:\n                 hyperlinks[uri] = uri_info\n \n+        # reference nodes\n+        for refnode in self.document.findall(nodes.reference):\n+            if 'refuri' not in refnode:\n+                continue\n+            uri = refnode['refuri']\n+            add_uri(uri, refnode)\n+\n         # image nodes\n         for imgnode in self.document.findall(nodes.image):\n             uri = imgnode['candidates'].get('?')\n             if uri and '://' in uri:\n-                newuri = self.app.emit_firstresult('linkcheck-process-uri', uri)\n-                if newuri:\n-                    uri = newuri\n-\n-                lineno = get_node_line(imgnode)\n-                uri_info = Hyperlink(uri, self.env.docname, lineno)\n-                if uri not in hyperlinks:\n-                    hyperlinks[uri] = uri_info\n+                add_uri(uri, imgnode)\n+\n+        # raw nodes\n+        for rawnode in self.document.findall(nodes.raw):\n+            uri = rawnode.get('source')\n+            if uri and '://' in uri:\n+                add_uri(uri, rawnode)\n \n \n def rewrite_github_anchor(app: Sphinx, uri: str) -> Optional[str]:\n",
  "test_patch": "diff --git a/tests/roots/test-linkcheck/links.txt b/tests/roots/test-linkcheck/links.txt\n--- a/tests/roots/test-linkcheck/links.txt\n+++ b/tests/roots/test-linkcheck/links.txt\n@@ -17,3 +17,6 @@ Some additional anchors to exercise ignore code\n \n .. image:: https://www.google.com/image.png\n .. figure:: https://www.google.com/image2.png\n+\n+.. raw:: html\n+   :url: https://www.sphinx-doc.org/\ndiff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -41,7 +41,7 @@ def test_defaults(app):\n     assert \"Not Found for url: https://www.google.com/image2.png\" in content\n     # looking for local file should fail\n     assert \"[broken] path/to/notfound\" in content\n-    assert len(content.splitlines()) == 6\n+    assert len(content.splitlines()) == 7\n \n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n@@ -58,8 +58,8 @@ def test_defaults_json(app):\n                  \"info\"]:\n         assert attr in row\n \n-    assert len(content.splitlines()) == 11\n-    assert len(rows) == 11\n+    assert len(content.splitlines()) == 12\n+    assert len(rows) == 12\n     # the output order of the rows is not stable\n     # due to possible variance in network latency\n     rowsby = {row[\"uri\"]: row for row in rows}\n@@ -80,7 +80,7 @@ def test_defaults_json(app):\n     assert dnerow['uri'] == 'https://localhost:7777/doesnotexist'\n     assert rowsby['https://www.google.com/image2.png'] == {\n         'filename': 'links.txt',\n-        'lineno': 19,\n+        'lineno': 20,\n         'status': 'broken',\n         'code': 0,\n         'uri': 'https://www.google.com/image2.png',\n@@ -94,6 +94,15 @@ def test_defaults_json(app):\n     # images should fail\n     assert \"Not Found for url: https://www.google.com/image.png\" in \\\n         rowsby[\"https://www.google.com/image.png\"][\"info\"]\n+    # raw nodes' url should be checked too\n+    assert rowsby[\"https://www.sphinx-doc.org/\"] == {\n+        'filename': 'links.txt',\n+        'lineno': 21,\n+        'status': 'redirected',\n+        'code': 302,\n+        'uri': 'https://www.sphinx-doc.org/',\n+        'info': 'https://www.sphinx-doc.org/en/master/'\n+    }\n \n \n @pytest.mark.sphinx(\n@@ -102,6 +111,7 @@ def test_defaults_json(app):\n                    'linkcheck_ignore': [\n                        'https://localhost:7777/doesnotexist',\n                        'http://www.sphinx-doc.org/en/master/index.html#',\n+                       'https://www.sphinx-doc.org/',\n                        'https://www.google.com/image.png',\n                        'https://www.google.com/image2.png',\n                        'path/to/notfound']\n",
  "problem_statement": "linkcheck should check URLs of raw directives\n**Is your feature request related to a problem? Please describe.**\r\nWhen using a [`raw` directive](https://docutils.sourceforge.io/docs/ref/rst/directives.html#raw-data-pass-through) with the `url` option, the `linkcheck` builder does not check this URL.\r\n\r\n**Describe the solution you'd like**\r\nI would expect the URLs of `raw` directives to be checked by `linkcheck`.\r\n\r\n\r\n\n",
  "hints_text": "Sorry I just found out that Sphinx resolves `raw` directives while reading sources so an error will be displayed before the `linkcheck` builder is even used.\nOn second thought it could still be useful to check for redirections.",
  "created_at": "2022-08-07T09:14:28Z",
  "version": "5.2",
  "FAIL_TO_PASS": "[\"tests/test_build_linkcheck.py::test_defaults_json\"]",
  "PASS_TO_PASS": "[\"tests/test_build_linkcheck.py::test_raises_for_invalid_status\", \"tests/test_build_linkcheck.py::test_auth_header_uses_first_match\", \"tests/test_build_linkcheck.py::test_auth_header_no_match\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers_no_slash\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers_default\", \"tests/test_build_linkcheck.py::test_follows_redirects_on_HEAD\", \"tests/test_build_linkcheck.py::test_follows_redirects_on_GET\", \"tests/test_build_linkcheck.py::test_linkcheck_allowed_redirects\", \"tests/test_build_linkcheck.py::test_invalid_ssl\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_fails\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_verify_false\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_cacerts\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_requests_env_var\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_nonexistent_cert_file\", \"tests/test_build_linkcheck.py::test_TooManyRedirects_on_HEAD\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_without_header\", \"tests/test_build_linkcheck.py::test_too_many_requests_user_timeout\", \"tests/test_build_linkcheck.py::test_limit_rate_default_sleep\", \"tests/test_build_linkcheck.py::test_limit_rate_user_max_delay\", \"tests/test_build_linkcheck.py::test_limit_rate_doubles_previous_wait_time\", \"tests/test_build_linkcheck.py::test_limit_rate_clips_wait_time_to_max_time\", \"tests/test_build_linkcheck.py::test_limit_rate_bails_out_after_waiting_max_time\", \"tests/test_build_linkcheck.py::test_get_after_head_raises_connection_error\", \"tests/test_build_linkcheck.py::test_linkcheck_exclude_documents\"]",
  "environment_setup_commit": "a651e6bf4ad7a1dc293525d0a70e6d0d11b827db",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.035326",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}