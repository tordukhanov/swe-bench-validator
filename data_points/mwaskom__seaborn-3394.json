{
  "repo": "mwaskom/seaborn",
  "instance_id": "mwaskom__seaborn-3394",
  "base_commit": "9276e22a424fe2c834eff85231d0c916e293d613",
  "patch": "diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -1392,11 +1392,11 @@ def _setup_scales(\n                         spec_error = PlotSpecError._during(\"Scaling operation\", var)\n                         raise spec_error from err\n \n-            # Now the transformed data series are complete, set update the layer data\n+            # Now the transformed data series are complete, update the layer data\n             for layer, new_series in zip(layers, transformed_data):\n                 layer_df = layer[\"data\"].frame\n                 if var in layer_df:\n-                    layer_df[var] = new_series\n+                    layer_df[var] = pd.to_numeric(new_series)\n \n     def _plot_layer(self, p: Plot, layer: Layer) -> None:\n \ndiff --git a/seaborn/_core/rules.py b/seaborn/_core/rules.py\n--- a/seaborn/_core/rules.py\n+++ b/seaborn/_core/rules.py\n@@ -74,6 +74,9 @@ def variable_type(\n     if pd.isna(vector).all():\n         return VarType(\"numeric\")\n \n+    # Now drop nulls to simplify further type inference\n+    vector = vector.dropna()\n+\n     # Special-case binary/boolean data, allow caller to determine\n     # This triggers a numpy warning when vector has strings/objects\n     # https://github.com/numpy/numpy/issues/6784\n@@ -94,7 +97,7 @@ def variable_type(\n                 boolean_dtypes = [\"bool\"]\n             boolean_vector = vector.dtype in boolean_dtypes\n         else:\n-            boolean_vector = bool(np.isin(vector.dropna(), [0, 1]).all())\n+            boolean_vector = bool(np.isin(vector, [0, 1]).all())\n         if boolean_vector:\n             return VarType(boolean_type)\n \ndiff --git a/seaborn/_oldcore.py b/seaborn/_oldcore.py\n--- a/seaborn/_oldcore.py\n+++ b/seaborn/_oldcore.py\n@@ -1128,7 +1128,7 @@ def comp_data(self):\n                             # it is similar to GH2419, but more complicated because\n                             # supporting `order` in categorical plots is tricky\n                             orig = orig[orig.isin(self.var_levels[var])]\n-                    comp = pd.to_numeric(converter.convert_units(orig))\n+                    comp = pd.to_numeric(converter.convert_units(orig)).astype(float)\n                     if converter.get_scale() == \"log\":\n                         comp = np.log10(comp)\n                     parts.append(pd.Series(comp, orig.index, name=orig.name))\n@@ -1505,6 +1505,9 @@ def variable_type(vector, boolean_type=\"numeric\"):\n     if pd.isna(vector).all():\n         return VariableType(\"numeric\")\n \n+    # At this point, drop nans to simplify further type inference\n+    vector = vector.dropna()\n+\n     # Special-case binary/boolean data, allow caller to determine\n     # This triggers a numpy warning when vector has strings/objects\n     # https://github.com/numpy/numpy/issues/6784\n@@ -1517,7 +1520,7 @@ def variable_type(vector, boolean_type=\"numeric\"):\n         warnings.simplefilter(\n             action='ignore', category=(FutureWarning, DeprecationWarning)\n         )\n-        if np.isin(vector.dropna(), [0, 1]).all():\n+        if np.isin(vector, [0, 1]).all():\n             return VariableType(boolean_type)\n \n     # Defer to positive pandas tests\n",
  "test_patch": "diff --git a/tests/_core/test_rules.py b/tests/_core/test_rules.py\n--- a/tests/_core/test_rules.py\n+++ b/tests/_core/test_rules.py\n@@ -38,6 +38,12 @@ def test_variable_type():\n     s = pd.Series([pd.NA, pd.NA])\n     assert variable_type(s) == \"numeric\"\n \n+    s = pd.Series([1, 2, pd.NA], dtype=\"Int64\")\n+    assert variable_type(s) == \"numeric\"\n+\n+    s = pd.Series([1, 2, pd.NA], dtype=object)\n+    assert variable_type(s) == \"numeric\"\n+\n     s = pd.Series([\"1\", \"2\", \"3\"])\n     assert variable_type(s) == \"categorical\"\n \ndiff --git a/tests/test_core.py b/tests/test_core.py\n--- a/tests/test_core.py\n+++ b/tests/test_core.py\n@@ -23,16 +23,9 @@\n     categorical_order,\n )\n from seaborn.utils import desaturate\n-\n from seaborn.palettes import color_palette\n \n \n-try:\n-    from pandas import NA as PD_NA\n-except ImportError:\n-    PD_NA = None\n-\n-\n @pytest.fixture(params=[\n     dict(x=\"x\", y=\"y\"),\n     dict(x=\"t\", y=\"y\"),\n@@ -1302,13 +1295,11 @@ def test_comp_data_category_order(self):\n \n     @pytest.fixture(\n         params=itertools.product(\n-            [None, np.nan, PD_NA],\n-            [\"numeric\", \"category\", \"datetime\"]\n+            [None, np.nan, pd.NA],\n+            [\"numeric\", \"category\", \"datetime\"],\n         )\n     )\n-    @pytest.mark.parametrize(\n-        \"NA,var_type\",\n-    )\n+    @pytest.mark.parametrize(\"NA,var_type\")\n     def comp_data_missing_fixture(self, request):\n \n         # This fixture holds the logic for parameterizing\n@@ -1316,14 +1307,11 @@ def comp_data_missing_fixture(self, request):\n \n         NA, var_type = request.param\n \n-        if NA is None:\n-            pytest.skip(\"No pandas.NA available\")\n-\n         comp_data = [0, 1, np.nan, 2, np.nan, 1]\n         if var_type == \"numeric\":\n             orig_data = [0, 1, NA, 2, np.inf, 1]\n         elif var_type == \"category\":\n-            orig_data = [\"a\", \"b\", NA, \"c\", NA, \"b\"]\n+            orig_data = [\"a\", \"b\", NA, \"c\", pd.NA, \"b\"]\n         elif var_type == \"datetime\":\n             # Use 1-based numbers to avoid issue on matplotlib<3.2\n             # Could simplify the test a bit when we roll off that version\n@@ -1343,6 +1331,7 @@ def test_comp_data_missing(self, comp_data_missing_fixture):\n         ax = plt.figure().subplots()\n         p._attach(ax)\n         assert_array_equal(p.comp_data[\"x\"], comp_data)\n+        assert p.comp_data[\"x\"].dtype == \"float\"\n \n     def test_comp_data_duplicate_index(self):\n \n@@ -1352,6 +1341,15 @@ def test_comp_data_duplicate_index(self):\n         p._attach(ax)\n         assert_array_equal(p.comp_data[\"x\"], x)\n \n+    def test_comp_data_nullable_dtype(self):\n+\n+        x = pd.Series([1, 2, 3, 4], dtype=\"Int64\")\n+        p = VectorPlotter(variables={\"x\": x})\n+        ax = plt.figure().subplots()\n+        p._attach(ax)\n+        assert_array_equal(p.comp_data[\"x\"], x)\n+        assert p.comp_data[\"x\"].dtype == \"float\"\n+\n     def test_var_order(self, long_df):\n \n         order = [\"c\", \"b\", \"a\"]\n@@ -1456,7 +1454,12 @@ def test_variable_type(self):\n         assert variable_type(s) == \"numeric\"\n \n         s = pd.Series([np.nan, np.nan])\n-        # s = pd.Series([pd.NA, pd.NA])\n+        assert variable_type(s) == \"numeric\"\n+\n+        s = pd.Series([pd.NA, pd.NA])\n+        assert variable_type(s) == \"numeric\"\n+\n+        s = pd.Series([1, 2, pd.NA], dtype=\"Int64\")\n         assert variable_type(s) == \"numeric\"\n \n         s = pd.Series([\"1\", \"2\", \"3\"])\n",
  "problem_statement": "pd.NA reverses axis ordering\n## Issue\r\nWhen plotting with `pd.NA`, axis ordering get reversed into **descending**. \r\n\r\n## Workaround\r\n`np.nan` does not produce this issue\r\n\r\n## Expected Behavior\r\nNAs should be excluded without reversing axis order\r\n\r\n## Reproducible Example\r\n```python\r\nimport pandas as pd\r\nimport numpy as np\r\nimport seaborn as sns\r\nimport matplotlib.pyplot as plt\r\n\r\n\r\nmock_data = pd.DataFrame({\r\n    'date': ['0', '1', '2', '3'],\r\n    'value': [1, 2, 1, 1.5]\r\n})\r\n\r\nmock_data_full = mock_data.copy()\r\nmock_data_full['type'] = 'no_NA'\r\n\r\nmock_data_pd_na = mock_data.copy()\r\nmock_data_pd_na['type'] = 'pd.NA'\r\nmock_data_pd_na.loc[2, 'value'] = pd.NA\r\n\r\nmock_data_np_nan = mock_data.copy()\r\nmock_data_np_nan['type'] = 'np.nan'\r\nmock_data_np_nan.loc[2, 'value'] = np.nan\r\n\r\ntest_data = pd.concat([mock_data_full, mock_data_pd_na, mock_data_np_nan])\r\n\r\ngrid = sns.FacetGrid(\r\n    data=test_data,\r\n    col='type',\r\n    sharey=False,\r\n    sharex=True,  # time-series consistency\r\n)\r\ngrid.map(sns.lineplot, 'date', 'value', alpha=0.5)\r\nplt.show()\r\n```\r\n#### Result\r\n![image](https://user-images.githubusercontent.com/22682408/138944257-f0ff1d0b-717b-48cf-895d-97683a9dd019.png)\r\n\r\n\r\n\r\n## System Info\r\n```python\r\nprint(f'''\r\n    python: {sys.version},\r\n    seaborn: {sns.__version__},\r\n    pandas: {pd.__version__}\r\n''')\r\n```\r\n```log\r\n    python: 3.9.7 (default, Sep  9 2021, 23:20:13)  [GCC 9.3.0],\r\n    seaborn: 0.11.2,\r\n    pandas: 1.3.4\r\n```\r\n\r\n\r\n\r\n\n",
  "hints_text": "This is a weird one! Let's debug.\r\n\r\nFirst thought, this has something to do with using `FacetGrid` directly (which is discouraged). But no, we can reproduce using `relplot`:\r\n\r\n```python\r\ng = sns.relplot(\r\n    data=test_data,\r\n    col=\"type\",\r\n    x=\"date\", y=\"value\",\r\n    kind=\"line\", height=3,\r\n    marker=\"o\",\r\n    facet_kws=dict(sharey=False),\r\n)\r\n```\r\n![image](https://user-images.githubusercontent.com/315810/138967920-53b0558e-c7e1-48e9-a272-ca7670bff913.png)\r\n\r\n\r\nLet's get rid of `FacetGrid` altogether, and set up the figure with matplotlib. Still there:\r\n\r\n```python\r\nf, axs = plt.subplots(1, 3, sharex=True, sharey=False, figsize=(7, 3))\r\nkws =  dict(x=\"date\", y=\"value\", marker=\"o\")\r\nsns.lineplot(data=test_data.query(\"type == 'no_NA'\"), **kws, ax=axs[0])\r\nsns.lineplot(data=test_data.query(\"type == 'pd.NA'\"), **kws, ax=axs[1])\r\nsns.lineplot(data=test_data.query(\"type == 'np.nan'\"), **kws, ax=axs[2])\r\nf.tight_layout()\r\n```\r\n![image](https://user-images.githubusercontent.com/315810/138968180-d7a7b8ad-4221-4a78-9c03-f8dde883ed30.png)\r\n\r\nNow we can focus on a single `lineplot` and simplify even further. Is it because the x values are strings? No:\r\n\r\n```python\r\nsns.lineplot(x=[1, 2, 3, 4], y=[1, 2, pd.NA, 1.5], marker=\"o\")\r\n```\r\n![image](https://user-images.githubusercontent.com/315810/138968672-cfd19a6b-9749-40ee-beff-23b28ca26fd2.png)\r\n\r\nHm, \r\n\r\n```python\r\npd.Series([1, 2, pd.NA, 1.5]).dtype\r\n```\r\n```\r\nobject\r\n```\r\n\r\nWhat if we force that to numeric?\r\n```python\r\nsns.lineplot(\r\n    x=[1, 2, 3, 4],\r\n    y=pd.Series([1, 2, pd.NA, 1.5], dtype=\"Float64\"),\r\n)\r\n```\r\n![image](https://user-images.githubusercontent.com/315810/138968866-4b91d1ae-309e-4bee-ad39-3ae57a9ff8d8.png)\r\n\r\nThere we go. So why is this happening? Seaborn will invert the y axis if the y variable is categorical, and indeed, it thinks the y variable is categorical:\r\n\r\n```python\r\nsns._core.variable_type(pd.Series([1, 2, pd.NA, 1.5]))\r\n```\r\n```\r\n'categorical'\r\n```\r\n\r\nBut that's because of the object dtype:\r\n\r\n```python\r\nsns._core.variable_type(pd.Series([1, 2, pd.NA, 1.5], dtype=\"Float64\"))\r\n```\r\n```\r\n'numeric'\r\n```\r\n\r\nSeaborn *will* introspect and object-typed series and consider it numeric if every element is subclass of `numbers.Number`:\r\n\r\n```python\r\ndef all_numeric(x):\r\n    from numbers import Number\r\n    for x_i in x:\r\n        if not isinstance(x_i, Number):\r\n            return False\r\n    return True\r\n```\r\n\r\nThis is intended to allow object-typed series that mix int and `np.nan`. But while `np.nan` is a `Number`, `pd.NA` is not:\r\n\r\n```python\r\nall_numeric(pd.Series([1, 2, pd.NA, 1.5]))\r\n```\r\n```\r\nFalse\r\n```\r\n\r\nSo this is happening because seaborn thinks your y variable is categorical in the case where you are using `pd.NA` for missing.\nNow what to do about it?\r\n\r\nOn the one hand, I'm inclined to say that this is an example of seaborn behaving as expected and the weird behavior is upstream. I believe pandas is still considering `pd.NA` as [\"experimental\"](https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html#missing-data-na) and not to be fully relied on. Maybe this behavior will change in pandas in the future? I don't think seaborn should make any guarantees about behavior with experimental pandas features.\r\n\r\nOn the other hand it's still annoying, and I think I can see a path to this not being an issue: the `all_numeric` check could be run on a version of the Series after dropping null values:\r\n\r\n```python\r\ns = pd.Series([1, 2, pd.NA, 1.5])\r\nall_numeric(s.dropna())\r\n```\r\n```\r\nTrue\r\n```\r\n\r\nThis code is deep in the core of seaborn and it shouldn't be changed without consideration and testing. But that feels like a reasonable solution.\nWow, that was insightful!\r\n\r\n------\r\n\r\nA useless comment first.\r\n> using FacetGrid directly (which is discouraged)\r\n\r\nExcuse me? This is my bible of data analysis: https://seaborn.pydata.org/tutorial/axis_grids.html\r\nYou might wanna write on top of that page in big red letters \"DISCOURAGED!\". But I believe it will still look as encouraging as before.\r\n\r\n_I do use `relplot` and `catplot` occasionally, but `FacetGrid` is just more rigorous._\r\n\r\n-----\r\nI didn't know `pd.NA` was experimental. I think, we can close the issue just for that reason.\r\n\r\nDoing a bit more debugging down the line, I realized how unreliable `pd.NA` is. I mean, why would having a `NULL` change the data type of the column? Judging by the docs this was not intentional...\r\n\r\nWanted to report it as a bug upstream and figured something. Here's some pandas fun\r\n\r\n__As before__\r\n```python\r\nmock_data = pd.DataFrame({\r\n    'date': ['0', '1', '2', '3'],\r\n    'value': [1, 2, 1, 1.5]\r\n})\r\nassert pd.api.types.is_numeric_dtype(mock_data.value)  # passes\r\nmock_data.value.type  # dtype('float64')\r\n\r\nmock_data.loc[2, 'value'] = pd.NA\r\nassert pd.api.types.is_numeric_dtype(mock_data.value)  # fails\r\nmock_data.value.type  # dtype('O')\r\n```\r\n\r\n__Fixed__\r\n```python\r\nmock_data = pd.DataFrame({\r\n    'date': ['0', '1', '2', '3'],\r\n    'value': [1, 2, 1, 1.5]\r\n})\r\nmock_data.value = mock_data.value.astype(pd.Float64Dtype())\r\nmock_data.value.dtype  # Float64Dtype()\r\n\r\nmock_data.loc[2, 'value'] = pd.NA\r\nassert pd.api.types.is_numeric_dtype(mock_data.value)  # still passes\r\nmock_data.value.dtype  # Float64Dtype()\r\n```\r\n\r\nI reported it anyways. https://github.com/pandas-dev/pandas/issues/44199\r\n\r\n-----\r\nWent after with a debugger `_core.py`. Seems like that loop is indeed the best way to check for types. Once I add an `NA` to the column, even on the clean subsets the `dtype` obviously stays being `object`. I can only imagine the inefficiencies it would create for large datasets. So, `pd.NA` is a big no-no. Unless used with a workaround above.\r\n\r\nBut I think your proposed fix should be pretty harmless\r\n\r\nhttps://github.com/mwaskom/seaborn/blob/a0f7bf881e22950501fe01feadfad2e30a2b748d/seaborn/_core.py#L1471\r\n```python\r\nif pd.isna(vector).all():\r\n    return \"numeric\"\r\n```\r\nThis is ran before `all_numeric`. And, I think, it should be generally safe to just\r\n```python\r\nvector = vector.dropna()\r\n```\r\nright after L1471.\r\n\r\n------\r\n> it shouldn't be changed without consideration and testing\r\n\r\nWell, there's\r\nhttps://github.com/mwaskom/seaborn/tree/master/seaborn/tests\r\n\r\nKidding. I'm closing this. Pandas should figure out its datatypes. A `NULL` changing columns `dtype` isn't something seaborn should be fixing. You can add a check for `pd.NA` in that loop, and throw a warning maybe.\r\n\n> You might wanna write on top of that page in big red letters \"DISCOURAGED!\".\r\n\r\nWell, the second paragraph does say\r\n\r\n> The figure-level functions are built on top of the objects discussed in this chapter of the tutorial. **In most cases, you will want to work with those functions. They take care of some important bookkeeping that synchronizes the multiple plots in each grid.** This chapter explains how the underlying objects work, which may be useful for advanced applications.\r\n\r\nAnd more importantly, in the [`FacetGrid`](https://seaborn.pydata.org/generated/seaborn.FacetGrid.html) API docs, there is a pretty salient warning message (though, true, in orange rather than red). (`FacetGrid` has more hidden pitfalls than the other two objects on that tutorial page).\nIf I had to guess, I'd think pandas thinks about the `pd.NA` objects as being downstream from the \"nullable dtypes\", and so the proper order of operations would be to set the dtype to `Float64` so you get `pd.NA` rather than insert `pd.NA` so you get `Float64`. I do hope they'd change that in the future though.\r\n\r\nI'm going to reopen as there's a straightforward workaround within seaborn core, and this could bite in other ways (i.e. if you make a scatterplot with 10k points where you've inadvertently created an object-typed series with `pd.NA` in it, it's going to draw 10k ticks).\r\n\r\n> Well, there's https://github.com/mwaskom/seaborn/tree/master/seaborn/tests\r\n\r\nTrue true, although in general I would say that the test suite is a little weak specifically when it comes to missing data. It's easy to generate well-behaved datasets for testing; it's harder to generate datasets with all the odd patterns of missing data you see in real datasets, and this has been a source of bugs in the past.\nOff-topic...\r\n\r\n> there is a pretty salient warning message\r\nI swear, I looked at that page yesterday and didn't see it. \r\n\r\nThe tutorial is called \"Building structured multi-plot grids\". \r\nFirst example is \r\n```python\r\ng = sns.FacetGrid(tips, col=\"time\")\r\ng.map(sns.histplot, \"tip\")\r\n```\r\nbut according to you it should be \r\n```python\r\ng = sns.displot(tips, x=\"tip\", col=\"time\")\r\n```\r\n\r\nI think the tutorial needs a bit of restructuring, like\r\n1) High-level API\r\n2) Using FacetGrid directly\r\n\r\nThe tutorial was written when `distplot`/`catplot`/etc didn't exist, so it still teaches the old way. And does so very convincingly. \r\n\r\n---> separate issue\n@mwaskom \r\n\r\nshall I add some tests for `pd.NA` here?\r\nhttps://github.com/mwaskom/seaborn/blob/ff0fc76b4b65c7bcc1d2be2244e4ca1a92e4e740/seaborn/tests/test_core.py#L1422\r\n\r\nSeems like you even planned it before\r\nhttps://github.com/mwaskom/seaborn/blob/ff0fc76b4b65c7bcc1d2be2244e4ca1a92e4e740/seaborn/tests/test_core.py#L1435\r\n\r\nI'd add diverse test-cases with `pd.NA`. Then you can add the one-liner fix. \r\n\nThis is very informative, thanks! \r\nI agree that the proposed fix would be great and that a col should be treated as numeric if all its non-null elements are 👍\r\n\r\nI think in the case of Nones too, where matplotlib’s scatter() has expected behaviour (and I assume plot() too), this null handling would be amazing 🙌\nNot sure though that I interpreted it as an upstream issue (would have hoped plotting would perform okay with an uncasted numeric column, as it probably still does with np.nans)\nseaborn is not doing the wrong thing from a plotting perspective here, it is just treating the vector as categorical because a) it does not have a numeric dtype and b) not all of its elements are numbers. ",
  "created_at": "2023-06-19T20:59:52Z",
  "version": "0.13",
  "FAIL_TO_PASS": "[\"tests/_core/test_rules.py::test_variable_type\", \"tests/test_core.py::TestVectorPlotter::test_comp_data_nullable_dtype\"]",
  "PASS_TO_PASS": "[\"tests/_core/test_rules.py::test_vartype_object\", \"tests/_core/test_rules.py::test_categorical_order\", \"tests/test_core.py::TestSemanticMapping::test_call_lookup\", \"tests/test_core.py::TestHueMapping::test_init_from_map\", \"tests/test_core.py::TestHueMapping::test_plotter_default_init\", \"tests/test_core.py::TestHueMapping::test_plotter_reinit\", \"tests/test_core.py::TestHueMapping::test_hue_map_null\", \"tests/test_core.py::TestHueMapping::test_hue_map_categorical\", \"tests/test_core.py::TestHueMapping::test_hue_map_numeric\", \"tests/test_core.py::TestHueMapping::test_hue_map_without_hue_dataa\", \"tests/test_core.py::TestHueMapping::test_saturation\", \"tests/test_core.py::TestSizeMapping::test_init_from_map\", \"tests/test_core.py::TestSizeMapping::test_plotter_default_init\", \"tests/test_core.py::TestSizeMapping::test_plotter_reinit\", \"tests/test_core.py::TestSizeMapping::test_size_map_null\", \"tests/test_core.py::TestSizeMapping::test_map_size_numeric\", \"tests/test_core.py::TestSizeMapping::test_map_size_categorical\", \"tests/test_core.py::TestStyleMapping::test_init_from_map\", \"tests/test_core.py::TestStyleMapping::test_plotter_default_init\", \"tests/test_core.py::TestStyleMapping::test_plotter_reinit\", \"tests/test_core.py::TestStyleMapping::test_style_map_null\", \"tests/test_core.py::TestStyleMapping::test_map_style\", \"tests/test_core.py::TestVectorPlotter::test_flat_variables[series]\", \"tests/test_core.py::TestVectorPlotter::test_flat_variables[array]\", \"tests/test_core.py::TestVectorPlotter::test_flat_variables[list]\", \"tests/test_core.py::TestVectorPlotter::test_long_df[long_variables0]\", \"tests/test_core.py::TestVectorPlotter::test_long_df[long_variables1]\", \"tests/test_core.py::TestVectorPlotter::test_long_df[long_variables2]\", \"tests/test_core.py::TestVectorPlotter::test_long_df[long_variables3]\", \"tests/test_core.py::TestVectorPlotter::test_long_df[long_variables4]\", \"tests/test_core.py::TestVectorPlotter::test_long_df[long_variables5]\", \"tests/test_core.py::TestVectorPlotter::test_long_df[long_variables6]\", \"tests/test_core.py::TestVectorPlotter::test_long_df[long_variables7]\", \"tests/test_core.py::TestVectorPlotter::test_long_df[long_variables8]\", \"tests/test_core.py::TestVectorPlotter::test_long_df[long_variables9]\", \"tests/test_core.py::TestVectorPlotter::test_long_df[long_variables10]\", \"tests/test_core.py::TestVectorPlotter::test_long_df[long_variables11]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables0]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables1]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables2]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables3]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables4]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables5]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables6]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables7]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables8]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables9]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables10]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables11]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables0]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables1]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables2]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables3]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables4]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables5]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables6]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables7]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables8]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables9]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables10]\", \"tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables11]\", \"tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables0]\", \"tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables1]\", \"tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables2]\", \"tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables3]\", \"tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables4]\", \"tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables5]\", \"tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables6]\", \"tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables7]\", \"tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables8]\", \"tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables9]\", \"tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables10]\", \"tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables11]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables0-series]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables0-numpy]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables0-list]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables1-series]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables1-numpy]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables1-list]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables2-series]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables2-numpy]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables2-list]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables3-series]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables3-numpy]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables3-list]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables4-series]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables4-numpy]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables4-list]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables5-series]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables5-numpy]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables5-list]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables6-series]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables6-numpy]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables6-list]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables7-series]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables7-numpy]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables7-list]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables8-series]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables8-numpy]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables8-list]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables9-series]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables9-numpy]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables9-list]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables10-series]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables10-numpy]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables10-list]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables11-series]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables11-numpy]\", \"tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables11-list]\", \"tests/test_core.py::TestVectorPlotter::test_long_undefined_variables\", \"tests/test_core.py::TestVectorPlotter::test_empty_data_input[arg0]\", \"tests/test_core.py::TestVectorPlotter::test_empty_data_input[arg1]\", \"tests/test_core.py::TestVectorPlotter::test_empty_data_input[arg2]\", \"tests/test_core.py::TestVectorPlotter::test_units\", \"tests/test_core.py::TestVectorPlotter::test_long_numeric_name[3]\", \"tests/test_core.py::TestVectorPlotter::test_long_numeric_name[4.5]\", \"tests/test_core.py::TestVectorPlotter::test_long_hierarchical_index\", \"tests/test_core.py::TestVectorPlotter::test_long_scalar_and_data\", \"tests/test_core.py::TestVectorPlotter::test_wide_semantic_error\", \"tests/test_core.py::TestVectorPlotter::test_long_unknown_error\", \"tests/test_core.py::TestVectorPlotter::test_long_unmatched_size_error\", \"tests/test_core.py::TestVectorPlotter::test_wide_categorical_columns\", \"tests/test_core.py::TestVectorPlotter::test_iter_data_quantitites\", \"tests/test_core.py::TestVectorPlotter::test_iter_data_keys\", \"tests/test_core.py::TestVectorPlotter::test_iter_data_values\", \"tests/test_core.py::TestVectorPlotter::test_iter_data_reverse\", \"tests/test_core.py::TestVectorPlotter::test_iter_data_dropna\", \"tests/test_core.py::TestVectorPlotter::test_axis_labels\", \"tests/test_core.py::TestVectorPlotter::test_attach_basics[variables0]\", \"tests/test_core.py::TestVectorPlotter::test_attach_basics[variables1]\", \"tests/test_core.py::TestVectorPlotter::test_attach_basics[variables2]\", \"tests/test_core.py::TestVectorPlotter::test_attach_basics[variables3]\", \"tests/test_core.py::TestVectorPlotter::test_attach_basics[variables4]\", \"tests/test_core.py::TestVectorPlotter::test_attach_disallowed\", \"tests/test_core.py::TestVectorPlotter::test_attach_log_scale\", \"tests/test_core.py::TestVectorPlotter::test_attach_converters\", \"tests/test_core.py::TestVectorPlotter::test_attach_facets\", \"tests/test_core.py::TestVectorPlotter::test_attach_shared_axes\", \"tests/test_core.py::TestVectorPlotter::test_get_axes_single\", \"tests/test_core.py::TestVectorPlotter::test_get_axes_facets\", \"tests/test_core.py::TestVectorPlotter::test_comp_data\", \"tests/test_core.py::TestVectorPlotter::test_comp_data_log\", \"tests/test_core.py::TestVectorPlotter::test_comp_data_category_order\", \"tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture0]\", \"tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture1]\", \"tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture2]\", \"tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture3]\", \"tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture4]\", \"tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture5]\", \"tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture6]\", \"tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture7]\", \"tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture8]\", \"tests/test_core.py::TestVectorPlotter::test_comp_data_duplicate_index\", \"tests/test_core.py::TestVectorPlotter::test_var_order\", \"tests/test_core.py::TestVectorPlotter::test_scale_native\", \"tests/test_core.py::TestVectorPlotter::test_scale_numeric\", \"tests/test_core.py::TestVectorPlotter::test_scale_datetime\", \"tests/test_core.py::TestVectorPlotter::test_scale_categorical\", \"tests/test_core.py::TestCoreFunc::test_unique_dashes\", \"tests/test_core.py::TestCoreFunc::test_unique_markers\", \"tests/test_core.py::TestCoreFunc::test_variable_type\", \"tests/test_core.py::TestCoreFunc::test_infer_orient\", \"tests/test_core.py::TestCoreFunc::test_categorical_order\"]",
  "environment_setup_commit": "23860365816440b050e9211e1c395a966de3c403",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.838997",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}