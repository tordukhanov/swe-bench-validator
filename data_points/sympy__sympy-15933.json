{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15933",
  "base_commit": "e8cf4260af7461a42db9ed4edb2ab3fe442507c7",
  "patch": "diff --git a/examples/advanced/grover_example.py b/examples/advanced/grover_example.py\n--- a/examples/advanced/grover_example.py\n+++ b/examples/advanced/grover_example.py\n@@ -12,12 +12,12 @@\n def demo_vgate_app(v):\n     for i in range(2**v.nqubits):\n         print('qapply(v*IntQubit(%i, %r))' % (i, v.nqubits))\n-        pprint(qapply(v*IntQubit(i, v.nqubits)))\n-        qapply(v*IntQubit(i, v.nqubits))\n+        pprint(qapply(v*IntQubit(i, nqubits=v.nqubits)))\n+        qapply(v*IntQubit(i, nqubits=v.nqubits))\n \n \n def black_box(qubits):\n-    return True if qubits == IntQubit(1, qubits.nqubits) else False\n+    return True if qubits == IntQubit(1, nqubits=qubits.nqubits) else False\n \n \n def main():\ndiff --git a/sympy/physics/quantum/grover.py b/sympy/physics/quantum/grover.py\n--- a/sympy/physics/quantum/grover.py\n+++ b/sympy/physics/quantum/grover.py\n@@ -55,7 +55,7 @@ def superposition_basis(nqubits):\n     \"\"\"\n \n     amp = 1/sqrt(2**nqubits)\n-    return sum([amp*IntQubit(n, nqubits) for n in range(2**nqubits)])\n+    return sum([amp*IntQubit(n, nqubits=nqubits) for n in range(2**nqubits)])\n \n \n class OracleGate(Gate):\n@@ -176,7 +176,7 @@ def _represent_ZGate(self, basis, **options):\n         matrixOracle = eye(nbasis)\n         # Flip the sign given the output of the oracle function\n         for i in range(nbasis):\n-            if self.search_function(IntQubit(i, self.nqubits)):\n+            if self.search_function(IntQubit(i, nqubits=self.nqubits)):\n                 matrixOracle[i, i] = NegativeOne()\n         return matrixOracle\n \ndiff --git a/sympy/physics/quantum/qexpr.py b/sympy/physics/quantum/qexpr.py\n--- a/sympy/physics/quantum/qexpr.py\n+++ b/sympy/physics/quantum/qexpr.py\n@@ -100,7 +100,7 @@ class QExpr(Expr):\n     def free_symbols(self):\n         return {self}\n \n-    def __new__(cls, *args, **old_assumptions):\n+    def __new__(cls, *args, **kwargs):\n         \"\"\"Construct a new quantum object.\n \n         Parameters\n@@ -129,10 +129,10 @@ def __new__(cls, *args, **old_assumptions):\n         \"\"\"\n \n         # First compute args and call Expr.__new__ to create the instance\n-        args = cls._eval_args(args)\n+        args = cls._eval_args(args, **kwargs)\n         if len(args) == 0:\n-            args = cls._eval_args(tuple(cls.default_args()))\n-        inst = Expr.__new__(cls, *args, **old_assumptions)\n+            args = cls._eval_args(tuple(cls.default_args()), **kwargs)\n+        inst = Expr.__new__(cls, *args)\n         # Now set the slots on the instance\n         inst.hilbert_space = cls._eval_hilbert_space(args)\n         return inst\ndiff --git a/sympy/physics/quantum/qubit.py b/sympy/physics/quantum/qubit.py\n--- a/sympy/physics/quantum/qubit.py\n+++ b/sympy/physics/quantum/qubit.py\n@@ -282,10 +282,21 @@ class IntQubitState(QubitState):\n     \"\"\"A base class for qubits that work with binary representations.\"\"\"\n \n     @classmethod\n-    def _eval_args(cls, args):\n+    def _eval_args(cls, args, nqubits=None):\n         # The case of a QubitState instance\n         if len(args) == 1 and isinstance(args[0], QubitState):\n             return QubitState._eval_args(args)\n+        # otherwise, args should be integer\n+        elif not all((isinstance(a, (int, Integer)) for a in args)):\n+            raise ValueError('values must be integers, got (%s)' % (tuple(type(a) for a in args),))\n+        # use nqubits if specified\n+        if nqubits is not None:\n+            if not isinstance(nqubits, (int, Integer)):\n+                raise ValueError('nqubits must be an integer, got (%s)' % type(nqubits))\n+            if len(args) != 1:\n+                raise ValueError(\n+                    'too many positional arguments (%s). should be (number, nqubits=n)' % (args,))\n+            return cls._eval_args_with_nqubits(args[0], nqubits)\n         # For a single argument, we construct the binary representation of\n         # that integer with the minimal number of bits.\n         if len(args) == 1 and args[0] > 1:\n@@ -296,15 +307,19 @@ def _eval_args(cls, args):\n         # For two numbers, the second number is the number of bits\n         # on which it is expressed, so IntQubit(0,5) == |00000>.\n         elif len(args) == 2 and args[1] > 1:\n-            need = bitcount(abs(args[0]))\n-            if args[1] < need:\n-                raise ValueError(\n-                    'cannot represent %s with %s bits' % (args[0], args[1]))\n-            qubit_values = [(args[0] >> i) & 1 for i in reversed(range(args[1]))]\n-            return QubitState._eval_args(qubit_values)\n+            return cls._eval_args_with_nqubits(args[0], args[1])\n         else:\n             return QubitState._eval_args(args)\n \n+    @classmethod\n+    def _eval_args_with_nqubits(cls, number, nqubits):\n+        need = bitcount(abs(number))\n+        if nqubits < need:\n+            raise ValueError(\n+                'cannot represent %s with %s bits' % (number, nqubits))\n+        qubit_values = [(number >> i) & 1 for i in reversed(range(nqubits))]\n+        return QubitState._eval_args(qubit_values)\n+\n     def as_int(self):\n         \"\"\"Return the numerical value of the qubit.\"\"\"\n         number = 0\n@@ -341,9 +356,17 @@ class IntQubit(IntQubitState, Qubit):\n     values : int, tuple\n         If a single argument, the integer we want to represent in the qubit\n         values. This integer will be represented using the fewest possible\n-        number of qubits. If a pair of integers, the first integer gives the\n-        integer to represent in binary form and the second integer gives\n-        the number of qubits to use.\n+        number of qubits.\n+        If a pair of integers and the second value is more than one, the first\n+        integer gives the integer to represent in binary form and the second\n+        integer gives the number of qubits to use.\n+        List of zeros and ones is also accepted to generate qubit by bit pattern.\n+\n+    nqubits : int\n+        The integer that represents the number of qubits.\n+        This number should be passed with keyword ``nqubits=N``.\n+        You can use this in order to avoid ambiguity of Qubit-style tuple of bits.\n+        Please see the example below for more details.\n \n     Examples\n     ========\n@@ -372,6 +395,21 @@ class IntQubit(IntQubitState, Qubit):\n \n         >>> Qubit(q)\n         |101>\n+\n+    Please note that ``IntQubit`` also accepts a ``Qubit``-style list of bits.\n+    So, the code below yields qubits 3, not a single bit ``1``.\n+\n+        >>> IntQubit(1, 1)\n+        |3>\n+\n+    To avoid ambiguity, use ``nqubits`` parameter.\n+    Use of this keyword is recommended especially when you provide the values by variables.\n+\n+        >>> IntQubit(1, nqubits=1)\n+        |1>\n+        >>> a = 1\n+        >>> IntQubit(a, nqubits=1)\n+        |1>\n     \"\"\"\n     @classmethod\n     def dual_class(self):\n@@ -541,7 +579,7 @@ def measure_all(qubit, format='sympy', normalize=True):\n         for i in range(size):\n             if m[i] != 0.0:\n                 results.append(\n-                    (Qubit(IntQubit(i, nqubits)), m[i]*conjugate(m[i]))\n+                    (Qubit(IntQubit(i, nqubits=nqubits)), m[i]*conjugate(m[i]))\n                 )\n         return results\n     else:\n",
  "test_patch": "diff --git a/sympy/physics/quantum/tests/test_grover.py b/sympy/physics/quantum/tests/test_grover.py\n--- a/sympy/physics/quantum/tests/test_grover.py\n+++ b/sympy/physics/quantum/tests/test_grover.py\n@@ -11,17 +11,17 @@ def return_one_on_two(qubits):\n \n \n def return_one_on_one(qubits):\n-    return qubits == IntQubit(1, qubits.nqubits)\n+    return qubits == IntQubit(1, nqubits=qubits.nqubits)\n \n \n def test_superposition_basis():\n     nbits = 2\n-    first_half_state = IntQubit(0, nbits)/2 + IntQubit(1, nbits)/2\n+    first_half_state = IntQubit(0, nqubits=nbits)/2 + IntQubit(1, nqubits=nbits)/2\n     second_half_state = IntQubit(2, nbits)/2 + IntQubit(3, nbits)/2\n     assert first_half_state + second_half_state == superposition_basis(nbits)\n \n     nbits = 3\n-    firstq = (1/sqrt(8))*IntQubit(0, nbits) + (1/sqrt(8))*IntQubit(1, nbits)\n+    firstq = (1/sqrt(8))*IntQubit(0, nqubits=nbits) + (1/sqrt(8))*IntQubit(1, nqubits=nbits)\n     secondq = (1/sqrt(8))*IntQubit(2, nbits) + (1/sqrt(8))*IntQubit(3, nbits)\n     thirdq = (1/sqrt(8))*IntQubit(4, nbits) + (1/sqrt(8))*IntQubit(5, nbits)\n     fourthq = (1/sqrt(8))*IntQubit(6, nbits) + (1/sqrt(8))*IntQubit(7, nbits)\n@@ -35,30 +35,30 @@ def test_OracleGate():\n \n     nbits = 2\n     v = OracleGate(2, return_one_on_two)\n-    assert qapply(v*IntQubit(0, nbits)) == IntQubit(0, nbits)\n-    assert qapply(v*IntQubit(1, nbits)) == IntQubit(1, nbits)\n+    assert qapply(v*IntQubit(0, nbits)) == IntQubit(0, nqubits=nbits)\n+    assert qapply(v*IntQubit(1, nbits)) == IntQubit(1, nqubits=nbits)\n     assert qapply(v*IntQubit(2, nbits)) == -IntQubit(2, nbits)\n     assert qapply(v*IntQubit(3, nbits)) == IntQubit(3, nbits)\n \n-    # Due to a bug of IntQubit, this first assertion is buggy\n-    # assert represent(OracleGate(1, lambda qubits: qubits == IntQubit(0)), nqubits=1) == \\\n-    #     Matrix([[-1/sqrt(2), 0], [0, 1/sqrt(2)]])\n+    assert represent(OracleGate(1, lambda qubits: qubits == IntQubit(0)), nqubits=1) == \\\n+           Matrix([[-1, 0], [0, 1]])\n     assert represent(v, nqubits=2) == Matrix([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]])\n \n+\n def test_WGate():\n     nqubits = 2\n     basis_states = superposition_basis(nqubits)\n     assert qapply(WGate(nqubits)*basis_states) == basis_states\n \n-    expected = ((2/sqrt(pow(2, nqubits)))*basis_states) - IntQubit(1, nqubits)\n-    assert qapply(WGate(nqubits)*IntQubit(1, nqubits)) == expected\n+    expected = ((2/sqrt(pow(2, nqubits)))*basis_states) - IntQubit(1, nqubits=nqubits)\n+    assert qapply(WGate(nqubits)*IntQubit(1, nqubits=nqubits)) == expected\n \n \n def test_grover_iteration_1():\n     numqubits = 2\n     basis_states = superposition_basis(numqubits)\n     v = OracleGate(numqubits, return_one_on_one)\n-    expected = IntQubit(1, numqubits)\n+    expected = IntQubit(1, nqubits=numqubits)\n     assert qapply(grover_iteration(basis_states, v)) == expected\n \n \n@@ -83,7 +83,7 @@ def test_grover_iteration_2():\n \n def test_grover():\n     nqubits = 2\n-    assert apply_grover(return_one_on_one, nqubits) == IntQubit(1, nqubits)\n+    assert apply_grover(return_one_on_one, nqubits) == IntQubit(1, nqubits=nqubits)\n \n     nqubits = 4\n     basis_states = superposition_basis(nqubits)\ndiff --git a/sympy/physics/quantum/tests/test_qubit.py b/sympy/physics/quantum/tests/test_qubit.py\n--- a/sympy/physics/quantum/tests/test_qubit.py\n+++ b/sympy/physics/quantum/tests/test_qubit.py\n@@ -53,6 +53,21 @@ def test_QubitBra():\n \n \n def test_IntQubit():\n+    # issue 9136\n+    iqb = IntQubit(0, nqubits=1)\n+    assert qubit_to_matrix(Qubit('0')) == qubit_to_matrix(iqb)\n+\n+    qb = Qubit('1010')\n+    assert qubit_to_matrix(IntQubit(qb)) == qubit_to_matrix(qb)\n+\n+    iqb = IntQubit(1, nqubits=1)\n+    assert qubit_to_matrix(Qubit('1')) == qubit_to_matrix(iqb)\n+    assert qubit_to_matrix(IntQubit(1)) == qubit_to_matrix(iqb)\n+\n+    iqb = IntQubit(7, nqubits=4)\n+    assert qubit_to_matrix(Qubit('0111')) == qubit_to_matrix(iqb)\n+    assert qubit_to_matrix(IntQubit(7, 4)) == qubit_to_matrix(iqb)\n+\n     iqb = IntQubit(8)\n     assert iqb.as_int() == 8\n     assert iqb.qubit_values == (1, 0, 0, 0)\n@@ -76,6 +91,10 @@ def test_IntQubit():\n     assert iqb._eval_innerproduct_IntQubitBra(iqb_bra) == Integer(0)\n     raises(ValueError, lambda: IntQubit(4, 1))\n \n+    raises(ValueError, lambda: IntQubit('5'))\n+    raises(ValueError, lambda: IntQubit(5, '5'))\n+    raises(ValueError, lambda: IntQubit(5, nqubits='5'))\n+    raises(TypeError, lambda: IntQubit(5, bad_arg=True))\n \n def test_superposition_of_states():\n     state = 1/sqrt(2)*Qubit('01') + 1/sqrt(2)*Qubit('10')\n@@ -167,6 +186,9 @@ def test_measure_all():\n     assert measure_all(state2) == \\\n         [(Qubit('00'), Rational(4, 5)), (Qubit('11'), Rational(1, 5))]\n \n+    # from issue #12585\n+    assert measure_all(qapply(Qubit('0'))) == [(Qubit('0'), 1)]\n+\n \n def test_eval_trace():\n     q1 = Qubit('10110')\n",
  "problem_statement": "Wrong measurement for one qubit state.\nHi, sympy developers.\r\n\r\n    measure_all(qapply(Qubit('0')))\r\n\r\nreturns [(|01>, 1)] but should be [(|0>, 1)]\r\n\r\nbest, Vladimir.\n",
  "hints_text": "It seems that if the number of qubits is one, the argument `nqubits` on [this line](https://github.com/sympy/sympy/blob/master/sympy/physics/quantum/qubit.py#L544) will be interpreted as an extra qubit. There should be only `IntQubit(i)` with no `nqubits` argument in case `nqubits == 1`.",
  "created_at": "2019-02-06T09:04:41Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_superposition_basis\", \"test_OracleGate\", \"test_WGate\", \"test_grover_iteration_1\", \"test_IntQubit\", \"test_measure_all\"]",
  "PASS_TO_PASS": "[\"test_grover_iteration_2\", \"test_Qubit\", \"test_QubitBra\", \"test_superposition_of_states\", \"test_apply_represent_equality\", \"test_matrix_to_qubits\", \"test_measure_normalize\", \"test_measure_partial\", \"test_eval_trace\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.104128",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}