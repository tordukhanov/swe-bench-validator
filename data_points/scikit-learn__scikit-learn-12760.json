{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12760",
  "base_commit": "e73acef80de4159722b11e3cd6c20920382b9728",
  "patch": "diff --git a/sklearn/metrics/cluster/unsupervised.py b/sklearn/metrics/cluster/unsupervised.py\n--- a/sklearn/metrics/cluster/unsupervised.py\n+++ b/sklearn/metrics/cluster/unsupervised.py\n@@ -299,8 +299,12 @@ def calinski_harabaz_score(X, labels):\n def davies_bouldin_score(X, labels):\n     \"\"\"Computes the Davies-Bouldin score.\n \n-    The score is defined as the ratio of within-cluster distances to\n-    between-cluster distances.\n+    The score is defined as the average similarity measure of each cluster with\n+    its most similar cluster, where similarity is the ratio of within-cluster\n+    distances to between-cluster distances. Thus, clusters which are farther\n+    apart and less dispersed will result in a better score.\n+\n+    The minimum score is zero, with lower values indicating better clustering.\n \n     Read more in the :ref:`User Guide <davies-bouldin_index>`.\n \n@@ -347,6 +351,7 @@ def davies_bouldin_score(X, labels):\n     if np.allclose(intra_dists, 0) or np.allclose(centroid_distances, 0):\n         return 0.0\n \n-    score = (intra_dists[:, None] + intra_dists) / centroid_distances\n-    score[score == np.inf] = np.nan\n-    return np.mean(np.nanmax(score, axis=1))\n+    centroid_distances[centroid_distances == 0] = np.inf\n+    combined_intra_dists = intra_dists[:, None] + intra_dists\n+    scores = np.max(combined_intra_dists / centroid_distances, axis=1)\n+    return np.mean(scores)\n",
  "test_patch": "diff --git a/sklearn/metrics/cluster/tests/test_unsupervised.py b/sklearn/metrics/cluster/tests/test_unsupervised.py\n--- a/sklearn/metrics/cluster/tests/test_unsupervised.py\n+++ b/sklearn/metrics/cluster/tests/test_unsupervised.py\n@@ -234,6 +234,15 @@ def test_davies_bouldin_score():\n     labels = [0] * 10 + [1] * 10 + [2] * 10 + [3] * 10\n     pytest.approx(davies_bouldin_score(X, labels), 2 * np.sqrt(0.5) / 3)\n \n+    # Ensure divide by zero warning is not raised in general case\n+    with pytest.warns(None) as record:\n+        davies_bouldin_score(X, labels)\n+    div_zero_warnings = [\n+        warning for warning in record\n+        if \"divide by zero encountered\" in warning.message.args[0]\n+    ]\n+    assert len(div_zero_warnings) == 0\n+\n     # General case - cluster have one sample\n     X = ([[0, 0], [2, 2], [3, 3], [5, 5]])\n     labels = [0, 0, 1, 2]\n",
  "problem_statement": "Davies Bouldin measure: division by zero\nI'm facing a problem with the davies bouldin measure.\r\n\r\nThis is the warning that I get:\r\n\r\n    .local/lib/python3.7/site-packages/sklearn/metrics/cluster/unsupervised.py:342: RuntimeWarning: divide by zero encountered in true_divide \r\n        score = (intra_dists[:, None] + intra_dists) / centroid_distances\r\n\r\nThis is the implementation in sklearn:\r\n```python\r\ndef davies_bouldin_score(X, labels):\r\n    X, labels = check_X_y(X, labels)\r\n    le = LabelEncoder()\r\n    labels = le.fit_transform(labels)\r\n    n_samples, _ = X.shape\r\n    n_labels = len(le.classes_)\r\n    check_number_of_labels(n_labels, n_samples)\r\n\r\n    intra_dists = np.zeros(n_labels)\r\n    centroids = np.zeros((n_labels, len(X[0])), dtype=np.float)\r\n    for k in range(n_labels):\r\n        cluster_k = safe_indexing(X, labels == k)\r\n        centroid = cluster_k.mean(axis=0)\r\n        centroids[k] = centroid\r\n        intra_dists[k] = np.average(pairwise_distances(\r\n            cluster_k, [centroid]))\r\n\r\n    centroid_distances = pairwise_distances(centroids)\r\n\r\n    if np.allclose(intra_dists, 0) or np.allclose(centroid_distances, 0):\r\n        return 0.0\r\n\r\n    score = (intra_dists[:, None] + intra_dists) / centroid_distances\r\n    score[score == np.inf] = np.nan\r\n    return np.mean(np.nanmax(score, axis=1))\r\n```\r\nI found [another implementation](https://stackoverflow.com/a/48189218) on stack overflow:\r\n\r\n```python\r\nfrom scipy.spatial.distance import pdist, euclidean\r\n\r\ndef DaviesBouldin(X, labels):\r\n    n_cluster = len(np.bincount(labels))\r\n    cluster_k = [X[labels == k] for k in range(n_cluster)]\r\n    centroids = [np.mean(k, axis = 0) for k in cluster_k]\r\n    variances = [np.mean([euclidean(p, centroids[i]) for p in k]) for i, k in enumerate(cluster_k)]\r\n    db = []\r\n\r\n    for i in range(n_cluster):\r\n        for j in range(n_cluster):\r\n            if j != i:\r\n                db.append((variances[i] + variances[j]) / euclidean(centroids[i], centroids[j]))\r\n\r\n    return(np.max(db) / n_cluster)\r\n```\r\nWith this implementation I don't get any warnings, but the results differ:\r\n```\r\nStack overflow implementation: 0.012955275662036738\r\n/home/luca/.local/lib/python3.7/site-packages/sklearn/metrics/cluster/unsupervised.py:342: RuntimeWarning: divide by zero encountered in true_divide\r\n  score = (intra_dists[:, None] + intra_dists) / centroid_distances\r\nSklearn implementation: 2.1936185396772485\r\n\r\n```\nDavies Bouldin measure: division by zero\nI'm facing a problem with the davies bouldin measure.\r\n\r\nThis is the warning that I get:\r\n\r\n    .local/lib/python3.7/site-packages/sklearn/metrics/cluster/unsupervised.py:342: RuntimeWarning: divide by zero encountered in true_divide \r\n        score = (intra_dists[:, None] + intra_dists) / centroid_distances\r\n\r\nThis is the implementation in sklearn:\r\n```python\r\ndef davies_bouldin_score(X, labels):\r\n    X, labels = check_X_y(X, labels)\r\n    le = LabelEncoder()\r\n    labels = le.fit_transform(labels)\r\n    n_samples, _ = X.shape\r\n    n_labels = len(le.classes_)\r\n    check_number_of_labels(n_labels, n_samples)\r\n\r\n    intra_dists = np.zeros(n_labels)\r\n    centroids = np.zeros((n_labels, len(X[0])), dtype=np.float)\r\n    for k in range(n_labels):\r\n        cluster_k = safe_indexing(X, labels == k)\r\n        centroid = cluster_k.mean(axis=0)\r\n        centroids[k] = centroid\r\n        intra_dists[k] = np.average(pairwise_distances(\r\n            cluster_k, [centroid]))\r\n\r\n    centroid_distances = pairwise_distances(centroids)\r\n\r\n    if np.allclose(intra_dists, 0) or np.allclose(centroid_distances, 0):\r\n        return 0.0\r\n\r\n    score = (intra_dists[:, None] + intra_dists) / centroid_distances\r\n    score[score == np.inf] = np.nan\r\n    return np.mean(np.nanmax(score, axis=1))\r\n```\r\nI found [another implementation](https://stackoverflow.com/a/48189218) on stack overflow:\r\n\r\n```python\r\nfrom scipy.spatial.distance import pdist, euclidean\r\n\r\ndef DaviesBouldin(X, labels):\r\n    n_cluster = len(np.bincount(labels))\r\n    cluster_k = [X[labels == k] for k in range(n_cluster)]\r\n    centroids = [np.mean(k, axis = 0) for k in cluster_k]\r\n    variances = [np.mean([euclidean(p, centroids[i]) for p in k]) for i, k in enumerate(cluster_k)]\r\n    db = []\r\n\r\n    for i in range(n_cluster):\r\n        for j in range(n_cluster):\r\n            if j != i:\r\n                db.append((variances[i] + variances[j]) / euclidean(centroids[i], centroids[j]))\r\n\r\n    return(np.max(db) / n_cluster)\r\n```\r\nWith this implementation I don't get any warnings, but the results differ:\r\n```\r\nStack overflow implementation: 0.012955275662036738\r\n/home/luca/.local/lib/python3.7/site-packages/sklearn/metrics/cluster/unsupervised.py:342: RuntimeWarning: divide by zero encountered in true_divide\r\n  score = (intra_dists[:, None] + intra_dists) / centroid_distances\r\nSklearn implementation: 2.1936185396772485\r\n\r\n```\n",
  "hints_text": "It would help if you provide some data (whether or not it gives that warning) for which the implementations give different results\n(the stack overflow implementation won't work if your labels are not (0, 1, ..., n clusters - 1)\nMmmh the labels are generated from MiniBatchKMeans so I _think_ they should be correct.\r\n\r\nI managed to produce a [minimum working example](https://drive.google.com/open?id=1KtkkfTecNf5gvj8Jvxi-h2vifZLxO3mX). \r\nThe feature matrix is still 500MB, sorry about that.\r\n\r\nThe output of the example is the following:\r\n\r\n```\r\n/home/luca/.local/lib/python3.7/site-packages/sklearn/metrics/cluster/unsupervised.py:342: RuntimeWarning: divide by zero encountered in true_divide\r\n  score = (intra_dists[:, None] + intra_dists) / centroid_distances\r\nDavies-Bouldin score [0 is best]: 2.7680860797941347\r\nCustom Davies-Bouldin score [0 is best]: 0.0883489022177005\r\n\r\n```\n> I managed to produce a minimum working example. The feature matrix is still 500MB, sorry about that.\r\n\r\nAn interesting definition of minimum :)\nIt was in terms of code needed.\r\nI'll try to reduce the size in the next days!\nThe same issue can be reproduced for `measure_quality(samples[::200], labels[::200])` and I'm sure the dataset can be reduced much further.\nBut the difference is in:\r\n* ours: `np.mean(np.nanmax(score, axis=1))`\r\n* theirs: `np.max(db) / n_cluster`\r\n\r\nIf we use `np.max(score) / n_labels` we get the same result as the SO answer.\r\n\r\nI think the Accepted Answer in stack overflow is incorrect, and disagrees with other implementations posted there. Please review the formula in the paper and confirm my analysis.\nThank you for your analysis!\r\n\r\nYes, you are right. In the paper (freely available [here](https://www.researchgate.net/publication/224377470_A_Cluster_Separation_Measure)) it computes the average of the scores:\r\n\r\n![image](https://user-images.githubusercontent.com/11019190/48737903-94ee0b00-ec4f-11e8-8008-7bebb487ed84.png)\r\n\r\n\r\nSo, I'm not sure about what's happening, does the warning about division by 0  mean that there are two different clusters with the same centroid?\r\n\nThe warning is unrelated to the discrepancy. It is happening in the division \nFeel free to down-vote the stack overflow answer or up vote my comment there\nI'm also getting this warning every time I run this metric. The warning is being caused by dividing by a matrix returned by `pairwise_distances`, which is defined as:\r\n> A distance matrix D such that D_{i, j} is the distance between the ith and jth vectors of the given matrix X, if Y is None. If Y is not None, then D_{i, j} is the distance between the ith array from X and the jth array from Y.\r\n\r\nTherefore, any element where i = j will be 0 as this would be the distance from the ith cluster center to the ith cluster center. Looking at the following lines, it is apparent that this behavior is expected and handled:\r\n```python\r\nscore[score == np.inf] = np.nan\r\nreturn np.mean(np.nanmax(score, axis=1))\r\n```\r\nSince this is expected behavior and is handled correctly (as far as I can tell), I would reccomend that we suppress the warning with `with np.errstate(divide='ignore'):`. I can submit the pull request but I wanted to confirm that this is intentional behavior before I do so. Please let me know.\nIf it's a degenerate case it might be worthwhile raising a warning, albeit a more specific one.\r\n\r\nSince we need to cleanse the output of division in any case, we might as well avoid the non-threadsafe context manager and instead just set problematic denominators to 1.\nAnd yes, a pull request is very welcome\nIt would help if you provide some data (whether or not it gives that warning) for which the implementations give different results\n(the stack overflow implementation won't work if your labels are not (0, 1, ..., n clusters - 1)\nMmmh the labels are generated from MiniBatchKMeans so I _think_ they should be correct.\r\n\r\nI managed to produce a [minimum working example](https://drive.google.com/open?id=1KtkkfTecNf5gvj8Jvxi-h2vifZLxO3mX). \r\nThe feature matrix is still 500MB, sorry about that.\r\n\r\nThe output of the example is the following:\r\n\r\n```\r\n/home/luca/.local/lib/python3.7/site-packages/sklearn/metrics/cluster/unsupervised.py:342: RuntimeWarning: divide by zero encountered in true_divide\r\n  score = (intra_dists[:, None] + intra_dists) / centroid_distances\r\nDavies-Bouldin score [0 is best]: 2.7680860797941347\r\nCustom Davies-Bouldin score [0 is best]: 0.0883489022177005\r\n\r\n```\n> I managed to produce a minimum working example. The feature matrix is still 500MB, sorry about that.\r\n\r\nAn interesting definition of minimum :)\nIt was in terms of code needed.\r\nI'll try to reduce the size in the next days!\nThe same issue can be reproduced for `measure_quality(samples[::200], labels[::200])` and I'm sure the dataset can be reduced much further.\nBut the difference is in:\r\n* ours: `np.mean(np.nanmax(score, axis=1))`\r\n* theirs: `np.max(db) / n_cluster`\r\n\r\nIf we use `np.max(score) / n_labels` we get the same result as the SO answer.\r\n\r\nI think the Accepted Answer in stack overflow is incorrect, and disagrees with other implementations posted there. Please review the formula in the paper and confirm my analysis.\nThank you for your analysis!\r\n\r\nYes, you are right. In the paper (freely available [here](https://www.researchgate.net/publication/224377470_A_Cluster_Separation_Measure)) it computes the average of the scores:\r\n\r\n![image](https://user-images.githubusercontent.com/11019190/48737903-94ee0b00-ec4f-11e8-8008-7bebb487ed84.png)\r\n\r\n\r\nSo, I'm not sure about what's happening, does the warning about division by 0  mean that there are two different clusters with the same centroid?\r\n\nThe warning is unrelated to the discrepancy. It is happening in the division \nFeel free to down-vote the stack overflow answer or up vote my comment there\nI'm also getting this warning every time I run this metric. The warning is being caused by dividing by a matrix returned by `pairwise_distances`, which is defined as:\r\n> A distance matrix D such that D_{i, j} is the distance between the ith and jth vectors of the given matrix X, if Y is None. If Y is not None, then D_{i, j} is the distance between the ith array from X and the jth array from Y.\r\n\r\nTherefore, any element where i = j will be 0 as this would be the distance from the ith cluster center to the ith cluster center. Looking at the following lines, it is apparent that this behavior is expected and handled:\r\n```python\r\nscore[score == np.inf] = np.nan\r\nreturn np.mean(np.nanmax(score, axis=1))\r\n```\r\nSince this is expected behavior and is handled correctly (as far as I can tell), I would reccomend that we suppress the warning with `with np.errstate(divide='ignore'):`. I can submit the pull request but I wanted to confirm that this is intentional behavior before I do so. Please let me know.\nIf it's a degenerate case it might be worthwhile raising a warning, albeit a more specific one.\r\n\r\nSince we need to cleanse the output of division in any case, we might as well avoid the non-threadsafe context manager and instead just set problematic denominators to 1.\nAnd yes, a pull request is very welcome",
  "created_at": "2018-12-12T15:03:09Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/metrics/cluster/tests/test_unsupervised.py::test_davies_bouldin_score\"]",
  "PASS_TO_PASS": "[\"sklearn/metrics/cluster/tests/test_unsupervised.py::test_silhouette\", \"sklearn/metrics/cluster/tests/test_unsupervised.py::test_cluster_size_1\", \"sklearn/metrics/cluster/tests/test_unsupervised.py::test_silhouette_paper_example\", \"sklearn/metrics/cluster/tests/test_unsupervised.py::test_correct_labelsize\", \"sklearn/metrics/cluster/tests/test_unsupervised.py::test_non_encoded_labels\", \"sklearn/metrics/cluster/tests/test_unsupervised.py::test_non_numpy_labels\", \"sklearn/metrics/cluster/tests/test_unsupervised.py::test_calinski_harabasz_score\", \"sklearn/metrics/cluster/tests/test_unsupervised.py::test_deprecated_calinski_harabaz_score\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.967702",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}