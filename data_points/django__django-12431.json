{
  "repo": "django/django",
  "instance_id": "django__django-12431",
  "base_commit": "e3f6e18513224c8ad081e5a19da641f49b0b43da",
  "patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -73,7 +73,7 @@ def get_response(self, request):\n         # Setup default url resolver for this thread\n         set_urlconf(settings.ROOT_URLCONF)\n         response = self._middleware_chain(request)\n-        response._closable_objects.append(request)\n+        response._resource_closers.append(request.close)\n         if response.status_code >= 400:\n             log_response(\n                 '%s: %s', response.reason_phrase, request.path,\ndiff --git a/django/core/handlers/wsgi.py b/django/core/handlers/wsgi.py\n--- a/django/core/handlers/wsgi.py\n+++ b/django/core/handlers/wsgi.py\n@@ -141,6 +141,10 @@ def __call__(self, environ, start_response):\n         ]\n         start_response(status, response_headers)\n         if getattr(response, 'file_to_stream', None) is not None and environ.get('wsgi.file_wrapper'):\n+            # If `wsgi.file_wrapper` is used the WSGI server does not call\n+            # .close on the response, but on the file wrapper. Patch it to use\n+            # response.close instead which takes care of closing all files.\n+            response.file_to_stream.close = response.close\n             response = environ['wsgi.file_wrapper'](response.file_to_stream, response.block_size)\n         return response\n \ndiff --git a/django/http/response.py b/django/http/response.py\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -41,7 +41,7 @@ def __init__(self, content_type=None, status=None, reason=None, charset=None):\n         # the header (required for working with legacy systems) and the header\n         # value. Both the name of the header and its value are ASCII strings.\n         self._headers = {}\n-        self._closable_objects = []\n+        self._resource_closers = []\n         # This parameter is set by the handler. It's necessary to preserve the\n         # historical behavior of request_finished.\n         self._handler_class = None\n@@ -242,15 +242,14 @@ def make_bytes(self, value):\n \n     # The WSGI server must call this method upon completion of the request.\n     # See http://blog.dscpl.com.au/2012/10/obligations-for-calling-close-on.html\n-    # When wsgi.file_wrapper is used, the WSGI server instead calls close()\n-    # on the file-like object. Django ensures this method is called in this\n-    # case by replacing self.file_to_stream.close() with a wrapped version.\n     def close(self):\n-        for closable in self._closable_objects:\n+        for closer in self._resource_closers:\n             try:\n-                closable.close()\n+                closer()\n             except Exception:\n                 pass\n+        # Free resources that were still referenced.\n+        self._resource_closers.clear()\n         self.closed = True\n         signals.request_finished.send(sender=self._handler_class)\n \n@@ -381,7 +380,7 @@ def _set_streaming_content(self, value):\n         # Ensure we can never iterate on \"value\" more than once.\n         self._iterator = iter(value)\n         if hasattr(value, 'close'):\n-            self._closable_objects.append(value)\n+            self._resource_closers.append(value.close)\n \n     def __iter__(self):\n         return self.streaming_content\n@@ -401,39 +400,14 @@ def __init__(self, *args, as_attachment=False, filename='', **kwargs):\n         self.filename = filename\n         super().__init__(*args, **kwargs)\n \n-    def _wrap_file_to_stream_close(self, filelike):\n-        \"\"\"\n-        Wrap the file-like close() with a version that calls\n-        FileResponse.close().\n-        \"\"\"\n-        closing = False\n-        filelike_close = getattr(filelike, 'close', lambda: None)\n-\n-        def file_wrapper_close():\n-            nonlocal closing\n-            # Prevent an infinite loop since FileResponse.close() tries to\n-            # close the objects in self._closable_objects.\n-            if closing:\n-                return\n-            closing = True\n-            try:\n-                filelike_close()\n-            finally:\n-                self.close()\n-\n-        filelike.close = file_wrapper_close\n-\n     def _set_streaming_content(self, value):\n         if not hasattr(value, 'read'):\n             self.file_to_stream = None\n             return super()._set_streaming_content(value)\n \n         self.file_to_stream = filelike = value\n-        # Add to closable objects before wrapping close(), since the filelike\n-        # might not have close().\n         if hasattr(filelike, 'close'):\n-            self._closable_objects.append(filelike)\n-        self._wrap_file_to_stream_close(filelike)\n+            self._resource_closers.append(filelike.close)\n         value = iter(lambda: filelike.read(self.block_size), b'')\n         self.set_headers(filelike)\n         super()._set_streaming_content(value)\n",
  "test_patch": "diff --git a/tests/builtin_server/tests.py b/tests/builtin_server/tests.py\n--- a/tests/builtin_server/tests.py\n+++ b/tests/builtin_server/tests.py\n@@ -4,6 +4,11 @@\n from unittest import TestCase\n from wsgiref import simple_server\n \n+from django.core.servers.basehttp import get_internal_wsgi_application\n+from django.test import RequestFactory, override_settings\n+\n+from .views import FILE_RESPONSE_HOLDER\n+\n # If data is too large, socket will choke, so write chunks no larger than 32MB\n # at a time. The rationale behind the 32MB can be found in #5596#comment:4.\n MAX_SOCKET_CHUNK_SIZE = 32 * 1024 * 1024  # 32 MB\n@@ -89,6 +94,27 @@ def test_file_wrapper_no_sendfile(self):\n         self.assertEqual(handler.stdout.getvalue().splitlines()[-1], b'Hello World!')\n         self.assertEqual(handler.stderr.getvalue(), b'')\n \n+    @override_settings(ROOT_URLCONF='builtin_server.urls')\n+    def test_file_response_closing(self):\n+        \"\"\"\n+        View returning a FileResponse properly closes the file and http\n+        response when file_wrapper is used.\n+        \"\"\"\n+        env = RequestFactory().get('/fileresponse/').environ\n+        handler = FileWrapperHandler(None, BytesIO(), BytesIO(), env)\n+        handler.run(get_internal_wsgi_application())\n+        # Sendfile is used only when file_wrapper has been used.\n+        self.assertTrue(handler._used_sendfile)\n+        # Fetch the original response object.\n+        self.assertIn('response', FILE_RESPONSE_HOLDER)\n+        response = FILE_RESPONSE_HOLDER['response']\n+        # The response and file buffers are closed.\n+        self.assertIs(response.closed, True)\n+        buf1, buf2 = FILE_RESPONSE_HOLDER['buffers']\n+        self.assertIs(buf1.closed, True)\n+        self.assertIs(buf2.closed, True)\n+        FILE_RESPONSE_HOLDER.clear()\n+\n \n class WriteChunkCounterHandler(ServerHandler):\n     \"\"\"\ndiff --git a/tests/builtin_server/urls.py b/tests/builtin_server/urls.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/builtin_server/urls.py\n@@ -0,0 +1,7 @@\n+from django.urls import path\n+\n+from . import views\n+\n+urlpatterns = [\n+    path('fileresponse/', views.file_response),\n+]\ndiff --git a/tests/builtin_server/views.py b/tests/builtin_server/views.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/builtin_server/views.py\n@@ -0,0 +1,15 @@\n+from io import BytesIO\n+\n+from django.http import FileResponse\n+\n+FILE_RESPONSE_HOLDER = {}\n+\n+\n+def file_response(request):\n+    f1 = BytesIO(b\"test1\")\n+    f2 = BytesIO(b\"test2\")\n+    response = FileResponse(f1)\n+    response._resource_closers.append(f2.close)\n+    FILE_RESPONSE_HOLDER['response'] = response\n+    FILE_RESPONSE_HOLDER['buffers'] = (f1, f2)\n+    return response\ndiff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -80,52 +80,3 @@ def test_unicode_attachment(self):\n             response['Content-Disposition'],\n             \"attachment; filename*=utf-8''%E7%A5%9D%E6%82%A8%E5%B9%B3%E5%AE%89.odt\"\n         )\n-\n-    def test_file_to_stream_closes_response(self):\n-        # Closing file_to_stream calls FileResponse.close(), even when\n-        # file-like object doesn't have a close() method.\n-        class FileLike:\n-            def read(self):\n-                pass\n-\n-        class FileLikeWithClose(FileLike):\n-            def __init__(self):\n-                self.closed = False\n-\n-            def close(self):\n-                self.closed = True\n-\n-        for filelike_cls in (FileLike, FileLikeWithClose):\n-            with self.subTest(filelike_cls=filelike_cls.__name__):\n-                filelike = filelike_cls()\n-                response = FileResponse(filelike)\n-                self.assertFalse(response.closed)\n-                # Object with close() is added to the list of closable.\n-                if hasattr(filelike, 'closed'):\n-                    self.assertEqual(response._closable_objects, [filelike])\n-                else:\n-                    self.assertEqual(response._closable_objects, [])\n-                file_to_stream = response.file_to_stream\n-                file_to_stream.close()\n-                if hasattr(filelike, 'closed'):\n-                    self.assertTrue(filelike.closed)\n-                self.assertTrue(response.closed)\n-\n-    def test_file_to_stream_closes_response_on_error(self):\n-        # Closing file_to_stream calls FileResponse.close(), even when\n-        # closing file-like raises exceptions.\n-        class FileLikeWithRaisingClose:\n-            def read(self):\n-                pass\n-\n-            def close(self):\n-                raise RuntimeError()\n-\n-        filelike = FileLikeWithRaisingClose()\n-        response = FileResponse(filelike)\n-        self.assertFalse(response.closed)\n-        self.assertEqual(response._closable_objects, [filelike])\n-        file_to_stream = response.file_to_stream\n-        with self.assertRaises(RuntimeError):\n-            file_to_stream.close()\n-        self.assertTrue(response.closed)\n",
  "problem_statement": "FileResponse with temporary file closing connection.\nDescription\n\t \n\t\t(last modified by Oskar Persson)\n\t \nI think I might've found a regression in #30565. When I run the following tests (in their defined order) against Postgres I get the error below.\nimport tempfile\nfrom django.contrib.auth import get_user_model\nfrom django.http import FileResponse\nfrom django.test import TestCase\nUser = get_user_model()\nclass MyTests(TestCase):\n\tdef setUp(self):\n\t\tself.user = User.objects.create(username='user')\n\tdef test_first(self):\n\t\twith tempfile.TemporaryFile() as f:\n\t\t\treturn FileResponse(f)\n\tdef test_second(self):\n\t\tpass\nRunning tests...\n----------------------------------------------------------------------\n.E\n======================================================================\nERROR [0.003s]: test_second (responses.test_fileresponse.MyTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/tests/django/django/db/backends/base/base.py\", line 238, in _cursor\n\treturn self._prepare_cursor(self.create_cursor(name))\n File \"/tests/django/django/utils/asyncio.py\", line 26, in inner\n\treturn func(*args, **kwargs)\n File \"/tests/django/django/db/backends/postgresql/base.py\", line 231, in create_cursor\n\tcursor = self.connection.cursor()\npsycopg2.InterfaceError: connection already closed\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"/tests/django/tests/responses/test_fileresponse.py\", line 19, in setUp\n\tself.user = User.objects.create(username='user')\n File \"/tests/django/django/db/models/manager.py\", line 82, in manager_method\n\treturn getattr(self.get_queryset(), name)(*args, **kwargs)\n File \"/tests/django/django/db/models/query.py\", line 433, in create\n\tobj.save(force_insert=True, using=self.db)\n File \"/tests/django/django/contrib/auth/base_user.py\", line 66, in save\n\tsuper().save(*args, **kwargs)\n File \"/tests/django/django/db/models/base.py\", line 746, in save\n\tforce_update=force_update, update_fields=update_fields)\n File \"/tests/django/django/db/models/base.py\", line 784, in save_base\n\tforce_update, using, update_fields,\n File \"/tests/django/django/db/models/base.py\", line 887, in _save_table\n\tresults = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n File \"/tests/django/django/db/models/base.py\", line 926, in _do_insert\n\tusing=using, raw=raw,\n File \"/tests/django/django/db/models/manager.py\", line 82, in manager_method\n\treturn getattr(self.get_queryset(), name)(*args, **kwargs)\n File \"/tests/django/django/db/models/query.py\", line 1204, in _insert\n\treturn query.get_compiler(using=using).execute_sql(returning_fields)\n File \"/tests/django/django/db/models/sql/compiler.py\", line 1382, in execute_sql\n\twith self.connection.cursor() as cursor:\n File \"/tests/django/django/utils/asyncio.py\", line 26, in inner\n\treturn func(*args, **kwargs)\n File \"/tests/django/django/db/backends/base/base.py\", line 260, in cursor\n\treturn self._cursor()\n File \"/tests/django/django/db/backends/base/base.py\", line 238, in _cursor\n\treturn self._prepare_cursor(self.create_cursor(name))\n File \"/tests/django/django/db/utils.py\", line 90, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"/tests/django/django/db/backends/base/base.py\", line 238, in _cursor\n\treturn self._prepare_cursor(self.create_cursor(name))\n File \"/tests/django/django/utils/asyncio.py\", line 26, in inner\n\treturn func(*args, **kwargs)\n File \"/tests/django/django/db/backends/postgresql/base.py\", line 231, in create_cursor\n\tcursor = self.connection.cursor()\ndjango.db.utils.InterfaceError: connection already closed\n",
  "hints_text": "Oskar, Can you check the ticket number? #30365 is probably not the right one.\nReplying to felixxm: Oskar, Can you check the ticket number? #30365 is probably not the right one. Fixed\nGreat catch! Regression in cce47ff65a4dd3786c049ec14ee889e128ca7de9.\nSorry for the previous approval. It is an expected behavior, connection should be closed when we close a response. You have to ​disconnect signals to not close connections.\nReplying to felixxm: Sorry for the previous approval. It is an expected behavior, connection should be closed when we close a response. You have to ​disconnect signals to not close connections. Hmm, okay. What would that look like in my example? Also, I've now tested this with MySQL as well which gives me the following error: Running tests... ---------------------------------------------------------------------- .E ====================================================================== ERROR [0.002s]: test_second (responses.test_fileresponse.MyTests) ---------------------------------------------------------------------- Traceback (most recent call last): File \"/tests/django/tests/responses/test_fileresponse.py\", line 19, in setUp self.user = User.objects.create(username='user') File \"/tests/django/django/db/models/manager.py\", line 82, in manager_method return getattr(self.get_queryset(), name)(*args, **kwargs) File \"/tests/django/django/db/models/query.py\", line 433, in create obj.save(force_insert=True, using=self.db) File \"/tests/django/django/contrib/auth/base_user.py\", line 66, in save super().save(*args, **kwargs) File \"/tests/django/django/db/models/base.py\", line 746, in save force_update=force_update, update_fields=update_fields) File \"/tests/django/django/db/models/base.py\", line 784, in save_base force_update, using, update_fields, File \"/tests/django/django/db/models/base.py\", line 887, in _save_table results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw) File \"/tests/django/django/db/models/base.py\", line 926, in _do_insert using=using, raw=raw, File \"/tests/django/django/db/models/manager.py\", line 82, in manager_method return getattr(self.get_queryset(), name)(*args, **kwargs) File \"/tests/django/django/db/models/query.py\", line 1204, in _insert return query.get_compiler(using=using).execute_sql(returning_fields) File \"/tests/django/django/db/models/sql/compiler.py\", line 1384, in execute_sql cursor.execute(sql, params) File \"/tests/django/django/db/backends/utils.py\", line 68, in execute return self._execute_with_wrappers(sql, params, many=False, executor=self._execute) File \"/tests/django/django/db/backends/utils.py\", line 77, in _execute_with_wrappers return executor(sql, params, many, context) File \"/tests/django/django/db/backends/utils.py\", line 80, in _execute self.db.validate_no_broken_transaction() File \"/tests/django/django/db/backends/base/base.py\", line 449, in validate_no_broken_transaction \"An error occurred in the current transaction. You can't \" django.db.transaction.TransactionManagementError: An error occurred in the current transaction. You can't execute queries until the end of the 'atomic' block.\ndef setUp(self): request_started.disconnect(close_old_connections) def tearDown(self): request_started.connect(close_old_connections)\nReplying to Carlton Gibson: def setUp(self): request_started.disconnect(close_old_connections) def tearDown(self): request_started.connect(close_old_connections) I'm still getting the same error\nWithout looking at actual code it's hard to say but... :) The close() call triggers the signal to clean up the DB connections. So if that signal is disconnected for the test, it won't fire. Or that's the theory. If you can put together a minimal reproduce project (including the signal detachment) I'm happy to look at it next week. (Please reopen if you do.)\nReplying to Carlton Gibson: Without looking at actual code it's hard to say but... :) The close() call triggers the signal to clean up the DB connections. So if that signal is disconnected for the test, it won't fire. Or that's the theory. If you can put together a minimal reproduce project (including the signal detachment) I'm happy to look at it next week. (Please reopen if you do.) Sure I could, but I mean the only relevant part really is the code I've already provided which I simply stuck into the top of tests/responses/test_fileresponse.py in the Django repo and ran the test suite using ​django-docker-box. I'm just not sure I understand how it is expected behaviour that using a temporary file in a FileResponse should disrupt any DB connections? The error raised when testing against MySQL/MariaDB is especially confusing when it says an error occurred inside a transaction. And another thing to note is that if I create the response using FileResponse(__file__) instead of the temporary file, the error disappears.\nOK, I’ll reopen to double check. Either Mariusz will get to it again or, I’ll look into it next week. Thanks for the report.\nReplying to Oskar Persson: I'm just not sure I understand how it is expected behaviour that using a temporary file in a FileResponse should disrupt any DB connections? The error raised when testing against MySQL/MariaDB is especially confusing when it says an error occurred inside a transaction. Because closing a filelike passed to FileResponse like this will trigger the end of a request which will as part of that also close database connections. This was apparently added in ​https://github.com/django/django/commit/cce47ff65a4dd3786c049ec14ee889e128ca7de9 to fix a real problem, but imo the fix operates at the wrong level. And another thing to note is that if I create the response using FileResponse(__file__) instead of the temporary file, the error disappears. This makes sense since __file__ is an open file descriptor which does not get closed here. The problem is that the closing of the TemporaryFile causes the patched close method of the filelike to trigger the close of the FileResponse -- this should not happen and is where ​https://github.com/django/django/commit/cce47ff65a4dd3786c049ec14ee889e128ca7de9 goes wrong (it should probably only do this magic if file_wrapper is actually used).\nAccepted based on Florian's comment.",
  "created_at": "2020-02-07T11:57:36Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_file_response_closing (builtin_server.tests.WSGIFileWrapperTests)\"]",
  "PASS_TO_PASS": "[\"test_compressed_response (responses.test_fileresponse.FileResponseTests)\", \"test_file_from_buffer_response (responses.test_fileresponse.FileResponseTests)\", \"test_file_from_buffer_unnamed_attachment (responses.test_fileresponse.FileResponseTests)\", \"test_file_from_disk_as_attachment (responses.test_fileresponse.FileResponseTests)\", \"test_file_from_disk_response (responses.test_fileresponse.FileResponseTests)\", \"test_file_from_named_pipe_response (responses.test_fileresponse.FileResponseTests)\", \"test_unicode_attachment (responses.test_fileresponse.FileResponseTests)\", \"test_chunked_data (builtin_server.tests.ServerHandlerChunksProperly)\", \"test_file_wrapper_no_sendfile (builtin_server.tests.WSGIFileWrapperTests)\", \"test_file_wrapper_uses_sendfile (builtin_server.tests.WSGIFileWrapperTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.624779",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}