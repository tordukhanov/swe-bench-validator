{
  "repo": "django/django",
  "instance_id": "django__django-11053",
  "base_commit": "9681e968ebdcd58cac99c1e60f0a6932abd4e5c9",
  "patch": "diff --git a/django/conf/__init__.py b/django/conf/__init__.py\n--- a/django/conf/__init__.py\n+++ b/django/conf/__init__.py\n@@ -104,6 +104,8 @@ def configure(self, default_settings=global_settings, **options):\n             raise RuntimeError('Settings already configured.')\n         holder = UserSettingsHolder(default_settings)\n         for name, value in options.items():\n+            if not name.isupper():\n+                raise TypeError('Setting %r must be uppercase.' % name)\n             setattr(holder, name, value)\n         self._wrapped = holder\n \n@@ -198,7 +200,7 @@ def __init__(self, default_settings):\n         self.default_settings = default_settings\n \n     def __getattr__(self, name):\n-        if name in self._deleted:\n+        if not name.isupper() or name in self._deleted:\n             raise AttributeError\n         return getattr(self.default_settings, name)\n \n",
  "test_patch": "diff --git a/tests/settings_tests/tests.py b/tests/settings_tests/tests.py\n--- a/tests/settings_tests/tests.py\n+++ b/tests/settings_tests/tests.py\n@@ -1,7 +1,7 @@\n import os\n import sys\n import unittest\n-from types import ModuleType\n+from types import ModuleType, SimpleNamespace\n from unittest import mock\n \n from django.conf import ENVIRONMENT_VARIABLE, LazySettings, Settings, settings\n@@ -318,6 +318,17 @@ def test_already_configured(self):\n         with self.assertRaisesMessage(RuntimeError, 'Settings already configured.'):\n             settings.configure()\n \n+    def test_nonupper_settings_prohibited_in_configure(self):\n+        s = LazySettings()\n+        with self.assertRaisesMessage(TypeError, \"Setting 'foo' must be uppercase.\"):\n+            s.configure(foo='bar')\n+\n+    def test_nonupper_settings_ignored_in_default_settings(self):\n+        s = LazySettings()\n+        s.configure(SimpleNamespace(foo='bar'))\n+        with self.assertRaises(AttributeError):\n+            getattr(s, 'foo')\n+\n     @requires_tz_support\n     @mock.patch('django.conf.global_settings.TIME_ZONE', 'test')\n     def test_incorrect_timezone(self):\n",
  "problem_statement": "Disallow non-uppercase settings in settings.configure()\nDescription\n\t\nContradictory to the documentation, settings.configure() and UserSettingsHolder.__getattr__() allow non-upper settings to be set and retrieved, respectively. This allows for the following to happen:\nimport types\nfrom django.conf import settings\nsettings.configure(types.SimpleNamespace(foo=\"bar\"), baz=\"qux\")\nprint(settings.foo, settings.baz) # Doesn't error\n",
  "hints_text": "",
  "created_at": "2019-03-04T01:31:46Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_nonupper_settings_ignored_in_default_settings (settings_tests.tests.SettingsTests)\", \"test_nonupper_settings_prohibited_in_configure (settings_tests.tests.SettingsTests)\"]",
  "PASS_TO_PASS": "[\"test_max_recursion_error (settings_tests.tests.ClassDecoratedTestCaseSuper)\", \"test_override_settings_inheritance (settings_tests.tests.ChildDecoratedTestCase)\", \"test_max_recursion_error (settings_tests.tests.ClassDecoratedTestCase)\", \"test_method_override (settings_tests.tests.ClassDecoratedTestCase)\", \"test_override (settings_tests.tests.ClassDecoratedTestCase)\", \"Settings are overridden within setUpClass (#21281).\", \"test_method_override (settings_tests.tests.FullyDecoratedTestCase)\", \"test_override (settings_tests.tests.FullyDecoratedTestCase)\", \"Regression test for #19031\", \"test_tuple_settings (settings_tests.tests.TestListSettings)\", \"test_none (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_with_xheader_right (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_with_xheader_wrong (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_without_xheader (settings_tests.tests.SecureProxySslHeaderTest)\", \"Receiver fails on both enter and exit.\", \"Receiver fails on enter only.\", \"Receiver fails on exit only.\", \"test_override_settings_reusable_on_enter (settings_tests.tests.OverrideSettingsIsolationOnExceptionTests)\", \"test_configure (settings_tests.tests.IsOverriddenTest)\", \"test_evaluated_lazysettings_repr (settings_tests.tests.IsOverriddenTest)\", \"test_module (settings_tests.tests.IsOverriddenTest)\", \"test_override (settings_tests.tests.IsOverriddenTest)\", \"test_settings_repr (settings_tests.tests.IsOverriddenTest)\", \"test_unevaluated_lazysettings_repr (settings_tests.tests.IsOverriddenTest)\", \"test_usersettingsholder_repr (settings_tests.tests.IsOverriddenTest)\", \"test_already_configured (settings_tests.tests.SettingsTests)\", \"test_class_decorator (settings_tests.tests.SettingsTests)\", \"test_context_manager (settings_tests.tests.SettingsTests)\", \"test_decorator (settings_tests.tests.SettingsTests)\", \"test_incorrect_timezone (settings_tests.tests.SettingsTests)\", \"test_no_secret_key (settings_tests.tests.SettingsTests)\", \"test_no_settings_module (settings_tests.tests.SettingsTests)\", \"test_override (settings_tests.tests.SettingsTests)\", \"test_override_change (settings_tests.tests.SettingsTests)\", \"test_override_doesnt_leak (settings_tests.tests.SettingsTests)\", \"test_override_settings_delete (settings_tests.tests.SettingsTests)\", \"test_override_settings_nested (settings_tests.tests.SettingsTests)\", \"test_settings_delete (settings_tests.tests.SettingsTests)\", \"test_settings_delete_wrapped (settings_tests.tests.SettingsTests)\", \"test_signal_callback_context_manager (settings_tests.tests.SettingsTests)\", \"test_signal_callback_decorator (settings_tests.tests.SettingsTests)\", \"test_decorated_testcase_module (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_decorated_testcase_name (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override_nested_order (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override_no_ops (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override_strings (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_override (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_override (settings_tests.tests.FullyDecoratedTranTestCase)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.557876",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}