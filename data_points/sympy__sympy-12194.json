{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-12194",
  "base_commit": "62b1996e353fedc1e3fb51f626ffaae9583b74a6",
  "patch": "diff --git a/sympy/ntheory/factor_.py b/sympy/ntheory/factor_.py\n--- a/sympy/ntheory/factor_.py\n+++ b/sympy/ntheory/factor_.py\n@@ -803,7 +803,7 @@ def done(n, d):\n \n \n def factorint(n, limit=None, use_trial=True, use_rho=True, use_pm1=True,\n-              verbose=False, visual=None):\n+              verbose=False, visual=None, multiple=False):\n     r\"\"\"\n     Given a positive integer ``n``, ``factorint(n)`` returns a dict containing\n     the prime factors of ``n`` as keys and their respective multiplicities\n@@ -850,6 +850,14 @@ def factorint(n, limit=None, use_trial=True, use_rho=True, use_pm1=True,\n     >>> factorint(3*101**7, limit=5)\n     {3: 1, 101: 7}\n \n+    List of Factors:\n+\n+    If ``multiple`` is set to ``True`` then a list containing the\n+    prime factors including multiplicities is returned.\n+\n+    >>> factorint(24, multiple=True)\n+    [2, 2, 2, 3]\n+\n     Visual Factorization:\n \n     If ``visual`` is set to ``True``, then it will return a visual\n@@ -942,6 +950,14 @@ def factorint(n, limit=None, use_trial=True, use_rho=True, use_pm1=True,\n     smoothness, smoothness_p, divisors\n \n     \"\"\"\n+    if multiple:\n+        fac = factorint(n, limit=limit, use_trial=use_trial,\n+                           use_rho=use_rho, use_pm1=use_pm1,\n+                           verbose=verbose, visual=False, multiple=False)\n+        factorlist = sum(([p] * fac[p] if fac[p] > 0 else [S(1)/p]*(-1*fac[p])\n+                               for p in sorted(fac)), [])\n+        return factorlist\n+\n     factordict = {}\n     if visual and not isinstance(n, Mul) and not isinstance(n, dict):\n         factordict = factorint(n, limit=limit, use_trial=use_trial,\n@@ -1172,7 +1188,7 @@ def factorint(n, limit=None, use_trial=True, use_rho=True, use_pm1=True,\n \n \n def factorrat(rat, limit=None, use_trial=True, use_rho=True, use_pm1=True,\n-              verbose=False, visual=None):\n+              verbose=False, visual=None, multiple=False):\n     r\"\"\"\n     Given a Rational ``r``, ``factorrat(r)`` returns a dict containing\n     the prime factors of ``r`` as keys and their respective multiplicities\n@@ -1193,9 +1209,21 @@ def factorrat(rat, limit=None, use_trial=True, use_rho=True, use_pm1=True,\n         - ``use_rho``: Toggle use of Pollard's rho method\n         - ``use_pm1``: Toggle use of Pollard's p-1 method\n         - ``verbose``: Toggle detailed printing of progress\n+        - ``multiple``: Toggle returning a list of factors or dict\n         - ``visual``: Toggle product form of output\n     \"\"\"\n     from collections import defaultdict\n+    if multiple:\n+        fac = factorrat(rat, limit=limit, use_trial=use_trial,\n+                  use_rho=use_rho, use_pm1=use_pm1,\n+                  verbose=verbose, visual=False,multiple=False)\n+        factorlist = sum(([p] * fac[p] if fac[p] > 0 else [S(1)/p]*(-1*fac[p])\n+                               for p, _ in sorted(fac.items(),\n+                                                        key=lambda elem: elem[0]\n+                                                        if elem[1] > 0\n+                                                        else 1/elem[0])), [])\n+        return factorlist\n+\n     f = factorint(rat.p, limit=limit, use_trial=use_trial,\n                   use_rho=use_rho, use_pm1=use_pm1,\n                   verbose=verbose).copy()\n",
  "test_patch": "diff --git a/sympy/ntheory/tests/test_factor_.py b/sympy/ntheory/tests/test_factor_.py\n--- a/sympy/ntheory/tests/test_factor_.py\n+++ b/sympy/ntheory/tests/test_factor_.py\n@@ -154,6 +154,20 @@ def test_factorint():\n     assert factorint(5951757) == {3: 1, 7: 1, 29: 2, 337: 1}\n     assert factorint(64015937) == {7993: 1, 8009: 1}\n     assert factorint(2**(2**6) + 1) == {274177: 1, 67280421310721: 1}\n+\n+    assert factorint(0, multiple=True) == [0]\n+    assert factorint(1, multiple=True) == []\n+    assert factorint(-1, multiple=True) == [-1]\n+    assert factorint(-2, multiple=True) == [-1, 2]\n+    assert factorint(-16, multiple=True) == [-1, 2, 2, 2, 2]\n+    assert factorint(2, multiple=True) == [2]\n+    assert factorint(24, multiple=True) == [2, 2, 2, 3]\n+    assert factorint(126, multiple=True) == [2, 3, 3, 7]\n+    assert factorint(123456, multiple=True) == [2, 2, 2, 2, 2, 2, 3, 643]\n+    assert factorint(5951757, multiple=True) == [3, 7, 29, 29, 337]\n+    assert factorint(64015937, multiple=True) == [7993, 8009]\n+    assert factorint(2**(2**6) + 1, multiple=True) == [274177, 67280421310721]\n+\n     assert multiproduct(factorint(fac(200))) == fac(200)\n     for b, e in factorint(fac(150)).items():\n         assert e == fac_multiplicity(150, b)\n@@ -424,6 +438,13 @@ def test_factorrat():\n     assert str(factorrat(S(25)/14, visual=True)) == '5**2/(2*7)'\n     assert str(factorrat(S(-25)/14/9, visual=True)) == '-5**2/(2*3**2*7)'\n \n+    assert factorrat(S(12)/1, multiple=True) == [2, 2, 3]\n+    assert factorrat(S(1)/1, multiple=True) == []\n+    assert factorrat(S(25)/14, multiple=True) == [1/7, 1/2, 5, 5]\n+    assert factorrat(S(12)/1, multiple=True) == [2, 2, 3]\n+    assert factorrat(S(-25)/14/9, multiple=True) == \\\n+        [-1, 1/7, 1/3, 1/3, 1/2, 5, 5]\n+\n \n def test_visual_io():\n     sm = smoothness_p\n",
  "problem_statement": "List of prime factors including multiplicity is missing\nThe vast majority of the time when using prime factorization in algorithms I'm interested in a list of prime factors. E.g. for 24 it's `[2, 2, 2, 3]`. However sympy (to my knowledge) only provides `sympy.factorint` which returns a dictionary. I always end up writing a helper function:\r\n\r\n    factorlist = lambda fac: sum(([p] * fac[p] for p in sorted(fac)), [])\r\n\r\nIt would be really nice if factorizations in this format were directly provided by sympy, either by an option to `factorint` (e.g. `sympy.factorint(24, aslist=True)`) or under a new function name entirely.\n",
  "hints_text": "A possibility is:\r\n\r\n```\r\n>>> from sympy.utilities.iterables import multiset_combinations\r\n>>> d={'a':3,'b':2,'c':2}\r\n>>> list(multiset_combinations(d, sum(d.values())))[0]\r\n['a', 'a', 'a', 'b', 'b', 'c', 'c']\r\n>>> d = factoring(24)\r\n>>> list(multiset_combinations(d, sum(d.values())))[0]\r\n[2, 2, 2, 3]\r\n```\r\n\r\nBut maybe an argument `multiple=True` for `factorint` would be preferable.\n@smichr `multiple=True`  for `factorint` is definitely better than my suggestion. I really do think that providing this functionality straight up without a helper function is an improvement for sympy.",
  "created_at": "2017-02-18T13:56:49Z",
  "version": "1.0",
  "FAIL_TO_PASS": "[\"test_factorint\", \"test_factorrat\"]",
  "PASS_TO_PASS": "[\"test_trailing\", \"test_multiplicity\", \"test_perfect_power\", \"test_divisors_and_divisor_count\", \"test_udivisors_and_udivisor_count\", \"test_issue_6981\", \"test_totient\", \"test_reduced_totient\", \"test_udivisor_sigma\", \"test_issue_4356\", \"test_divisors\", \"test_divisor_count\", \"test_antidivisors\", \"test_antidivisor_count\", \"test_smoothness_and_smoothness_p\", \"test_visual_factorint\", \"test_visual_io\", \"test_core\", \"test_digits\", \"test_primenu\"]",
  "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.075769",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}