{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9233",
  "base_commit": "8d87dde43ba0400c46d791e42d9b50bc879cdddb",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1641,18 +1641,23 @@ def add_directive_header(self, sig: str) -> None:\n \n         # add inheritance info, if wanted\n         if not self.doc_as_attr and self.options.show_inheritance:\n-            sourcename = self.get_sourcename()\n-            self.add_line('', sourcename)\n-\n             if hasattr(self.object, '__orig_bases__') and len(self.object.__orig_bases__):\n                 # A subclass of generic types\n                 # refs: PEP-560 <https://www.python.org/dev/peps/pep-0560/>\n-                bases = [restify(cls) for cls in self.object.__orig_bases__]\n-                self.add_line('   ' + _('Bases: %s') % ', '.join(bases), sourcename)\n+                bases = list(self.object.__orig_bases__)\n             elif hasattr(self.object, '__bases__') and len(self.object.__bases__):\n                 # A normal class\n-                bases = [restify(cls) for cls in self.object.__bases__]\n-                self.add_line('   ' + _('Bases: %s') % ', '.join(bases), sourcename)\n+                bases = list(self.object.__bases__)\n+            else:\n+                bases = []\n+\n+            self.env.events.emit('autodoc-process-bases',\n+                                 self.fullname, self.object, self.options, bases)\n+\n+            base_classes = [restify(cls) for cls in bases]\n+            sourcename = self.get_sourcename()\n+            self.add_line('', sourcename)\n+            self.add_line('   ' + _('Bases: %s') % ', '.join(base_classes), sourcename)\n \n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = get_class_members(self.object, self.objpath, self.get_attr)\n@@ -2737,6 +2742,7 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n     app.add_event('autodoc-process-docstring')\n     app.add_event('autodoc-process-signature')\n     app.add_event('autodoc-skip-member')\n+    app.add_event('autodoc-process-bases')\n \n     app.connect('config-inited', migrate_autodoc_member_order, priority=800)\n \n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -10,6 +10,7 @@\n \"\"\"\n \n import sys\n+from typing import List, Union\n \n import pytest\n \n@@ -264,6 +265,47 @@ def test_show_inheritance_for_subclass_of_generic_type(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_process_bases(app):\n+    def autodoc_process_bases(app, name, obj, options, bases):\n+        assert name == 'target.classes.Quux'\n+        assert obj.__module__ == 'target.classes'\n+        assert obj.__name__ == 'Quux'\n+        assert options == {'show-inheritance': True,\n+                           'members': []}\n+        assert bases == [List[Union[int, float]]]\n+\n+        bases.pop()\n+        bases.extend([int, str])\n+\n+    app.connect('autodoc-process-bases', autodoc_process_bases)\n+\n+    options = {'show-inheritance': None}\n+    actual = do_autodoc(app, 'class', 'target.classes.Quux', options)\n+    if sys.version_info < (3, 7):\n+        assert list(actual) == [\n+            '',\n+            '.. py:class:: Quux(*args, **kwds)',\n+            '   :module: target.classes',\n+            '',\n+            '   Bases: :class:`int`, :class:`str`',\n+            '',\n+            '   A subclass of List[Union[int, float]]',\n+            '',\n+        ]\n+    else:\n+        assert list(actual) == [\n+            '',\n+            '.. py:class:: Quux(iterable=(), /)',\n+            '   :module: target.classes',\n+            '',\n+            '   Bases: :class:`int`, :class:`str`',\n+            '',\n+            '   A subclass of List[Union[int, float]]',\n+            '',\n+        ]\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_class_doc_from_class(app):\n     options = {\"members\": None,\n",
  "problem_statement": "New hook to customize base list\nI would like to change the formatting of the base list for classes. Specifially I would like to provide information about parameterized types (e.g. `Dict[str, int`]). See agronholm/sphinx-autodoc-typehints#8 for how I want to use it.\n\nFor that I need a new hook/event similar to the existing `autodoc-process-signature`. I propose the signature `autodoc-process-bases(app, what, name, obj, options, formatted_bases)`. The first five arguments are exactly the same as for the existing events. The last one is the list of formatted strings generated in `add_directive_header` for the bases. It can be modified to change what is output. Alternatively, to provide even more freedom, the hook can return a string. This string is then inserted instead of the \"Bases: ...\" line.\n\nI can provide an implementation in a pull request, if you like the idea.\n\n",
  "hints_text": "",
  "created_at": "2021-05-15T15:38:25Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_autoclass.py::test_autodoc_process_bases\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_autoclass.py::test_classes\", \"tests/test_ext_autodoc_autoclass.py::test_instance_variable\", \"tests/test_ext_autodoc_autoclass.py::test_inherited_instance_variable\", \"tests/test_ext_autodoc_autoclass.py::test_uninitialized_attributes\", \"tests/test_ext_autodoc_autoclass.py::test_undocumented_uninitialized_attributes\", \"tests/test_ext_autodoc_autoclass.py::test_decorators\", \"tests/test_ext_autodoc_autoclass.py::test_properties\", \"tests/test_ext_autodoc_autoclass.py::test_slots_attribute\", \"tests/test_ext_autodoc_autoclass.py::test_show_inheritance_for_subclass_of_generic_type\", \"tests/test_ext_autodoc_autoclass.py::test_class_doc_from_class\", \"tests/test_ext_autodoc_autoclass.py::test_class_doc_from_init\", \"tests/test_ext_autodoc_autoclass.py::test_class_doc_from_both\", \"tests/test_ext_autodoc_autoclass.py::test_class_alias\", \"tests/test_ext_autodoc_autoclass.py::test_class_alias_having_doccomment\"]",
  "environment_setup_commit": "9a2c3c4a1559e37e95fdee88c128bb116642c897",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.064285",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}