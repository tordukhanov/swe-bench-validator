{
  "repo": "django/django",
  "instance_id": "django__django-16302",
  "base_commit": "78f163a4fb3937aca2e71786fbdd51a0ef39629e",
  "patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -339,7 +339,8 @@ def get_field_type(self, connection, table_name, row):\n \n         # Add max_length for all CharFields.\n         if field_type == \"CharField\" and row.display_size:\n-            field_params[\"max_length\"] = int(row.display_size)\n+            if (size := int(row.display_size)) and size > 0:\n+                field_params[\"max_length\"] = size\n \n         if field_type in {\"CharField\", \"TextField\"} and row.collation:\n             field_params[\"db_collation\"] = row.collation\ndiff --git a/django/db/backends/base/features.py b/django/db/backends/base/features.py\n--- a/django/db/backends/base/features.py\n+++ b/django/db/backends/base/features.py\n@@ -345,6 +345,9 @@ class BaseDatabaseFeatures:\n     # Set to (exception, message) if null characters in text are disallowed.\n     prohibits_null_characters_in_text_exception = None\n \n+    # Does the backend support unlimited character columns?\n+    supports_unlimited_charfield = False\n+\n     # Collation names for use by the Django test suite.\n     test_collations = {\n         \"ci\": None,  # Case-insensitive.\ndiff --git a/django/db/backends/postgresql/base.py b/django/db/backends/postgresql/base.py\n--- a/django/db/backends/postgresql/base.py\n+++ b/django/db/backends/postgresql/base.py\n@@ -80,6 +80,12 @@ def psycopg_version():\n from .schema import DatabaseSchemaEditor  # NOQA isort:skip\n \n \n+def _get_varchar_column(data):\n+    if data[\"max_length\"] is None:\n+        return \"varchar\"\n+    return \"varchar(%(max_length)s)\" % data\n+\n+\n class DatabaseWrapper(BaseDatabaseWrapper):\n     vendor = \"postgresql\"\n     display_name = \"PostgreSQL\"\n@@ -92,7 +98,7 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         \"BigAutoField\": \"bigint\",\n         \"BinaryField\": \"bytea\",\n         \"BooleanField\": \"boolean\",\n-        \"CharField\": \"varchar(%(max_length)s)\",\n+        \"CharField\": _get_varchar_column,\n         \"DateField\": \"date\",\n         \"DateTimeField\": \"timestamp with time zone\",\n         \"DecimalField\": \"numeric(%(max_digits)s, %(decimal_places)s)\",\ndiff --git a/django/db/backends/postgresql/features.py b/django/db/backends/postgresql/features.py\n--- a/django/db/backends/postgresql/features.py\n+++ b/django/db/backends/postgresql/features.py\n@@ -110,3 +110,4 @@ def is_postgresql_14(self):\n \n     has_bit_xor = property(operator.attrgetter(\"is_postgresql_14\"))\n     supports_covering_spgist_indexes = property(operator.attrgetter(\"is_postgresql_14\"))\n+    supports_unlimited_charfield = True\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -817,9 +817,14 @@ def db_type(self, connection):\n         # exactly which wacky database column type you want to use.\n         data = self.db_type_parameters(connection)\n         try:\n-            return connection.data_types[self.get_internal_type()] % data\n+            column_type = connection.data_types[self.get_internal_type()]\n         except KeyError:\n             return None\n+        else:\n+            # column_type is either a single-parameter function or a string.\n+            if callable(column_type):\n+                return column_type(data)\n+            return column_type % data\n \n     def rel_db_type(self, connection):\n         \"\"\"\n@@ -1130,14 +1135,19 @@ def formfield(self, **kwargs):\n \n \n class CharField(Field):\n-    description = _(\"String (up to %(max_length)s)\")\n-\n     def __init__(self, *args, db_collation=None, **kwargs):\n         super().__init__(*args, **kwargs)\n         self.db_collation = db_collation\n         if self.max_length is not None:\n             self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n+    @property\n+    def description(self):\n+        if self.max_length is not None:\n+            return _(\"String (up to %(max_length)s)\")\n+        else:\n+            return _(\"String (unlimited)\")\n+\n     def check(self, **kwargs):\n         databases = kwargs.get(\"databases\") or []\n         return [\n@@ -1148,6 +1158,12 @@ def check(self, **kwargs):\n \n     def _check_max_length_attribute(self, **kwargs):\n         if self.max_length is None:\n+            if (\n+                connection.features.supports_unlimited_charfield\n+                or \"supports_unlimited_charfield\"\n+                in self.model._meta.required_db_features\n+            ):\n+                return []\n             return [\n                 checks.Error(\n                     \"CharFields must define a 'max_length' attribute.\",\n",
  "test_patch": "diff --git a/tests/admin_docs/test_views.py b/tests/admin_docs/test_views.py\n--- a/tests/admin_docs/test_views.py\n+++ b/tests/admin_docs/test_views.py\n@@ -447,6 +447,16 @@ def test_builtin_fields(self):\n             \"Boolean (Either True or False)\",\n         )\n \n+    def test_char_fields(self):\n+        self.assertEqual(\n+            views.get_readable_field_data_type(fields.CharField(max_length=255)),\n+            \"String (up to 255)\",\n+        )\n+        self.assertEqual(\n+            views.get_readable_field_data_type(fields.CharField()),\n+            \"String (unlimited)\",\n+        )\n+\n     def test_custom_fields(self):\n         self.assertEqual(\n             views.get_readable_field_data_type(CustomField()), \"A custom field type\"\ndiff --git a/tests/inspectdb/models.py b/tests/inspectdb/models.py\n--- a/tests/inspectdb/models.py\n+++ b/tests/inspectdb/models.py\n@@ -106,6 +106,13 @@ class Meta:\n         required_db_features = {\"supports_collation_on_textfield\"}\n \n \n+class CharFieldUnlimited(models.Model):\n+    char_field = models.CharField(max_length=None)\n+\n+    class Meta:\n+        required_db_features = {\"supports_unlimited_charfield\"}\n+\n+\n class UniqueTogether(models.Model):\n     field1 = models.IntegerField()\n     field2 = models.CharField(max_length=10)\ndiff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -184,6 +184,13 @@ def test_text_field_db_collation(self):\n                 output,\n             )\n \n+    @skipUnlessDBFeature(\"supports_unlimited_charfield\")\n+    def test_char_field_unlimited(self):\n+        out = StringIO()\n+        call_command(\"inspectdb\", \"inspectdb_charfieldunlimited\", stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\"char_field = models.CharField()\", output)\n+\n     def test_number_field_types(self):\n         \"\"\"Test introspection of various Django field types\"\"\"\n         assertFieldType = self.make_field_type_asserter()\ndiff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -112,16 +112,18 @@ class Model(models.Model):\n             field = models.CharField()\n \n         field = Model._meta.get_field(\"field\")\n-        self.assertEqual(\n-            field.check(),\n-            [\n+        expected = (\n+            []\n+            if connection.features.supports_unlimited_charfield\n+            else [\n                 Error(\n                     \"CharFields must define a 'max_length' attribute.\",\n                     obj=field,\n                     id=\"fields.E120\",\n                 ),\n-            ],\n+            ]\n         )\n+        self.assertEqual(field.check(), expected)\n \n     def test_negative_max_length(self):\n         class Model(models.Model):\ndiff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -776,12 +776,12 @@ def test_exact_tags(self):\n class TestChecks(PostgreSQLSimpleTestCase):\n     def test_field_checks(self):\n         class MyModel(PostgreSQLModel):\n-            field = ArrayField(models.CharField())\n+            field = ArrayField(models.CharField(max_length=-1))\n \n         model = MyModel()\n         errors = model.check()\n         self.assertEqual(len(errors), 1)\n-        # The inner CharField is missing a max_length.\n+        # The inner CharField has a non-positive max_length.\n         self.assertEqual(errors[0].id, \"postgres.E001\")\n         self.assertIn(\"max_length\", errors[0].msg)\n \n@@ -837,12 +837,12 @@ def test_nested_field_checks(self):\n         \"\"\"\n \n         class MyModel(PostgreSQLModel):\n-            field = ArrayField(ArrayField(models.CharField()))\n+            field = ArrayField(ArrayField(models.CharField(max_length=-1)))\n \n         model = MyModel()\n         errors = model.check()\n         self.assertEqual(len(errors), 1)\n-        # The inner CharField is missing a max_length.\n+        # The inner CharField has a non-positive max_length.\n         self.assertEqual(errors[0].id, \"postgres.E001\")\n         self.assertIn(\"max_length\", errors[0].msg)\n \n",
  "problem_statement": "Cannot define CharField with unlimited length\nDescription\n\t\nModel validation throws an error on CharField with a null max_length:\nclass Test(Model):\n\tchar_field = CharField(max_length=None)\nOne or more models did not validate:\ntest.test: \"char_field\": CharFields require a \"max_length\" attribute that is a positive integer.\nCharField should allow max_length=None, which intuitively means there is no maximum length. This is a perfectly valid use case. Postgres, for example, supports varchar/text columns without a length limit, but Django appears to have no way to define such a column in a model class.\nThe model validation code looks like this (​django/core/management/validation.py:40):\n\tif isinstance(f, models.CharField):\n\t\ttry:\n\t\t\tmax_length = int(f.max_length)\n\t\t\tif max_length <= 0:\n\t\t\t\te.add(opts, '\"%s\": CharFields require a \"max_length\" attribute that is a positive integer.' % f.name)\n\t\texcept (ValueError, TypeError):\n\t\t\te.add(opts, '\"%s\": CharFields require a \"max_length\" attribute that is a positive integer.' % f.name)\nIt should be changed to something this:\n\tif isinstance(f, models.CharField) and f.max_length is not None:\n\t\t...\nThe FileField does not happen to throw this error because it is not a derivative of CharField. However, the SQL generated for FileField is not correct when max_length=None, so that would need to be addressed as well.\n",
  "hints_text": "You should use models.TextField, which is unlimited in size.\nYou can subclass CharField to get rid of max_length, like in this snippet: ​http://djangosnippets.org/snippets/2328/ Alternatively, you can subclass TextField to override the form fields it generates by default so you don't get big textareas.\nPostgreSQL allows char fields (which are distinct from Text fields) which are \"character varying\" with no preset length. It only makes sense that these should map to a Django CharField, with max_length=None, rather than be forced to use a Django TextField, only because of this limitation of Django. In common PostgreSQL usage, these are small text fields of 20 or 50 characters or less, NOT large text fields. Fixing this issue would also make the introspection of existing postgres databases *much* smoother.\nWe should do this. Postgres, at least, has no performance or storage space penalty for using varchar over varchar(n) -- the length requirement is basically a constraint, that's all. I imagine other modern DBs are similar, but even if not it's still a good idea to let users make the call, not do it unilaterally.\nI can't comment on performance, but I've always found choosing the length of CharFields incredibly annoying. \"How long can this be? 100 chars? Fields are always too short, let's make it 200. Oh why not 255, everyone does that...\" I'm in favor of removing the requirement to define max_length on CharFields, and making them unlimited by default — assuming this isn't a Gun Aimed At Feet.\nOracle for example uses nvarchar2 for CharField, NCLOB for TextField, MySQL has varchar and longtext... And these \"unlimited\" size text fields really are different than limited size text field without the limit. How about just having a \"large\" default value, like 1024 chars?\nI'm curious why this ticket is 4 years old. Everyone seems to be in agreement that this should change, and it seems like a simple one (unless I'm mistaken), and it's backward compatible. I completely agree with aaugustin (comment:6). The max_length argument should be reserved for use cases where someone wants to enforce the length. Instead I'm having to pick arbitrary values for things that don't need enforcing. It adds indirection to my models because it implies that the value should be enforced when that's not really the case. For databases like MySQL that require a length, the db field should be created as VARCHAR(255) by default. The documentation already has a note that says \"some backends have restrictions on max length\", so we would just need to expand on that to explain the behavior when max_length is None. Also, using TextField is not the right answer -- it has a different meaning in Django, regardless of how it's stored in the db.\nThe answer may be disappointing -- no one was sufficiently interested in this issue to write a patch, that's all...\nUgh. I took a stab at it and fell into the black hole that is the Django ORM. I'll try to summarize what I found here in case anyone is interested. Fixing the validation was easy, just needed to delete a few lines of code. Now, we could just override CharField's db_type() method to return \"varchar\" and be done with it, but that doesn't seem like the right solution to me, especially since CharField is a core field type. So, I sought out to find the right way to fix it, but only uncovered more hurdles. The problem starts with how django db backends define their basic mappings from django's \"internal types\" to the actual SQL definition. The mappings all look something like \"varchar(%(max_length)s)\" and are used to format a string given the field's __dict__. So the first hurdle was that Field.db_type() was returning \"varchar(None)\". I made some changes to get it to replace None values with ''. But then I found that \"varchar()\" is invalid syntax in postgres -- you have to use just \"varchar\" alone. So, like Dante, I ventured deeper. The db_type() method relies on the backend's DatabaseCreation class, which is where these mappings are defined. One option I thought of was to have two internal types for CharField: data_types = { #... 'CharField': 'varchar(%(max_length)s)', 'CharFieldNoLimit': 'varchar', #.. } But, there's no precident right now for having two internal types for the same model field. Besides, these mappings don't help us differentiate between \"data type\" and \"modifier\", which is what really needed to happen. So, I ventured even deeper. The base Field defines db_type(), db_parameters(), and db_type_suffix(). I would argue that Field shouldn't even implement these methods, as they produce back-end specific results. Those methods should really live in a back-end specific class. That's where I pretty much threw my hands up. Django's whole schema system is in flux right now due to migrations, and it's not really clear what the right answer is. Well, that was fun. C'est la vie.\nThanks for digging into that. However, I think this isn't the biggest problem. If I read the ​oracle docs correctly, specifying a length is mandatory for VARCHAR2, and the maximum is 4000 bytes. For ​MySQL, it's 65K bytes, for PostgreSQL and SQLite it's very large. Therefore, we can't set it to an unlimited length for all databases: we must pick something up to 4000 as maximum for Oracle. I don't think it's acceptable to only require max_length for Oracle backends. Essentially, I only see one option: default max_length to to the Oracle maximum. This works the same in all databases, and will work for many cases. Anyone else can still override it trivially. I'm not too enthusiastic about this solution though. Another challenge with this solution that, if I remember correctly, max_length defines characters, whereas the oracle limit is 4000 bytes. How characters translate to bytes depends on characters and encoding. However, this might be solved already somewhere: after all, if you define max_length on a field now, that value must not end up as the limit in varchar2(n) due to the same concern. I should add that I know very little about Oracle, so it's entirely possible this is not the complete story for Oracle. To summarise: An explicit max_length defined somewhere (either in your own code or in Django) is always required for Oracle compatibility, if I read the docs correctly. The maximum size can be no longer than 4000 bytes, which may not fit 4000 characters, depending on encoding. We may already have code in place that resolves this concern. My suggestion is to give max_length on CharField a default that matches 4000 bytes, but I'm not sure whether that's the best solution.\nMy suggestion is to give max_length on CharField a default that matches 4000 bytes, but I'm not sure whether that's the best solution. What about providing a backend specific max_length just like we do with IntegerField and friends? See #12030 and 1506c71a95cd7f58fbc6363edf2ef742c58d2487.\nReplying to charettes: What about providing a backend specific max_length just like we do with IntegerField and friends? See #12030 and 1506c71a95cd7f58fbc6363edf2ef742c58d2487. Yes, that makes sense to me as well.\nI started to work on this here ​https://github.com/django/django/compare/master...ar45:max_length_optional I would appriciate any comments.\nPerhaps you should wait until the ​discussion on django-developers comes to a consensus; new ideas are still being proposed.\nThe consensus on the mailing list seems to be that making max_length optional isn't a good idea.\nRecently, I helped a friend bootstrapping a new Django project. This issue (TextField vs CharField without max_length) again popped up because I had trouble explaining why exactly there needs to be a limit. Because I have some reasonable experience with Django I know about the internal relationship between models and forms which again lead to some questionable design decisions in the past. My point here is there is not easy way for (new) Django users to decide for either a CharField or a TextField. CharField -> one line text data but limited TextField -> multi-line text data What most projects actually need is CharField -> one line, unlimited text data\nAgree that this should be made optional, but at the very least the docs for 1.9 need amending as it describes this attribute as optional.\nPlease be more specific about the docs inaccuracy. I see ​the following: CharField has one extra required argument: ... CharField.max_length Perhaps you're looking at the ​form field docs where the argument is indeed option.",
  "created_at": "2022-11-16T19:16:42Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_builtin_fields (admin_docs.test_views.TestFieldType)\", \"test_char_fields (admin_docs.test_views.TestFieldType)\", \"test_custom_fields (admin_docs.test_views.TestFieldType)\", \"test_field_name (admin_docs.test_views.TestFieldType)\", \"test_forbidden_files_and_folders (invalid_models_tests.test_ordinary_fields.FilePathFieldTests)\", \"test_max_length_warning (invalid_models_tests.test_ordinary_fields.AutoFieldTests)\", \"test_primary_key (invalid_models_tests.test_ordinary_fields.AutoFieldTests)\", \"test_valid_case (invalid_models_tests.test_ordinary_fields.AutoFieldTests)\", \"test_str_default_value (invalid_models_tests.test_ordinary_fields.BinaryFieldTests)\", \"test_valid_default_value (invalid_models_tests.test_ordinary_fields.BinaryFieldTests)\", \"test_non_nullable_blank (invalid_models_tests.test_ordinary_fields.GenericIPAddressFieldTests)\", \"test_db_comment (invalid_models_tests.test_ordinary_fields.DbCommentTests)\", \"test_db_comment_required_db_features (invalid_models_tests.test_ordinary_fields.DbCommentTests)\", \"test_simplify_regex (admin_docs.test_views.AdminDocViewFunctionsTests)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.TimeFieldTests)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.TimeFieldTests)\", \"test_db_collation (invalid_models_tests.test_ordinary_fields.TextFieldTests)\", \"test_db_collation_required_db_features (invalid_models_tests.test_ordinary_fields.TextFieldTests)\", \"test_auto_now_and_auto_now_add_raise_error (invalid_models_tests.test_ordinary_fields.DateFieldTests)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.DateFieldTests)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.DateFieldTests)\", \"test_bad_values_of_max_digits_and_decimal_places (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_decimal_places_greater_than_max_digits (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_negative_max_digits_and_decimal_places (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_required_attributes (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_valid_field (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_max_length_warning (invalid_models_tests.test_ordinary_fields.IntegerFieldTests)\", \"test_choices_named_group (invalid_models_tests.test_ordinary_fields.UUIDFieldTests)\", \"test_primary_key (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_upload_to_callable_not_checked (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_upload_to_starts_with_slash (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_valid_case (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_valid_default_case (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.DateTimeFieldTests)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.DateTimeFieldTests)\", \"test_invalid_default (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_valid_callable_default (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_valid_default (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_valid_default_none (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_bad_db_index_value (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_bad_max_length_value (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_bad_validators (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_containing_lazy (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_containing_non_pairs (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_in_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group_bad_structure (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group_lazy (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group_non_pairs (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_db_collation (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_db_collation_required_db_features (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_iterable_of_iterable_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_lazy_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_missing_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_negative_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_non_iterable_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"Two letters isn't a valid choice pair.\", \"test_str_max_length_type (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_str_max_length_value (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_valid_field (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_pillow_installed (invalid_models_tests.test_ordinary_fields.ImageFieldTests)\", \"test_composite_primary_key (inspectdb.tests.InspectDBTransactionalTests)\", \"inspectdb --include-views creates models for database views.\", \"test_template_detail_path_traversal (admin_docs.test_views.AdminDocViewDefaultEngineOnly)\", \"test_attribute_name_not_python_keyword (inspectdb.tests.InspectDBTestCase)\", \"test_char_field_db_collation (inspectdb.tests.InspectDBTestCase)\", \"Introspection of columns with a custom field (#21090)\", \"Introspection of column names consist/start with digits (#16536/#17676)\", \"Test introspection of various Django field types\", \"test_foreign_key_to_field (inspectdb.tests.InspectDBTestCase)\", \"Introspection errors should not crash the command, and the error should\", \"test_json_field (inspectdb.tests.InspectDBTestCase)\", \"By default the command generates models with `Meta.managed = False`.\", \"test_same_relations (inspectdb.tests.InspectDBTestCase)\", \"Introspection of column names containing special characters,\", \"test_stealth_table_name_filter_option (inspectdb.tests.InspectDBTestCase)\", \"Introspection of table names containing special characters,\", \"inspectdb can inspect a subset of tables by passing the table names as\", \"test_table_with_func_unique_constraint (inspectdb.tests.InspectDBTestCase)\", \"test_text_field_db_collation (inspectdb.tests.InspectDBTestCase)\", \"test_unique_together_meta (inspectdb.tests.InspectDBTestCase)\", \"test_app_not_found (admin_docs.test_views.TestModelDetailView)\", \"The ``description`` field should render correctly for each field type.\", \"Model cached properties are displayed as fields.\", \"Model properties are displayed as fields.\", \"test_method_data_types (admin_docs.test_views.TestModelDetailView)\", \"Methods that begin with strings defined in\", \"Methods that take arguments should also displayed.\", \"Methods with arguments should have their arguments displayed.\", \"Methods with keyword arguments should have their arguments displayed.\", \"Methods with multiple arguments should have all their arguments\", \"test_model_detail_title (admin_docs.test_views.TestModelDetailView)\", \"test_model_docstring_renders_correctly (admin_docs.test_views.TestModelDetailView)\", \"test_model_not_found (admin_docs.test_views.TestModelDetailView)\", \"test_model_with_many_to_one (admin_docs.test_views.TestModelDetailView)\", \"A model with ``related_name`` of `+` shouldn't show backward\", \"test_bookmarklets (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"Index view should correctly resolve view patterns when ROOT_URLCONF is\", \"test_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_missing_docutils (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_model_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_namespaced_view_detail (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"Without the sites framework, should not access SITE_ID or Site\", \"test_template_detail (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_templatefilter_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_templatetag_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_view_detail (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"Views that are methods can be displayed.\", \"test_view_detail_illegal_import (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_view_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"Views that are methods are listed correctly.\", \"test_bookmarklets (admin_docs.test_views.AdminDocViewTests)\", \"test_index (admin_docs.test_views.AdminDocViewTests)\", \"test_missing_docutils (admin_docs.test_views.AdminDocViewTests)\", \"test_model_index (admin_docs.test_views.AdminDocViewTests)\", \"test_namespaced_view_detail (admin_docs.test_views.AdminDocViewTests)\", \"test_template_detail (admin_docs.test_views.AdminDocViewTests)\", \"test_templatefilter_index (admin_docs.test_views.AdminDocViewTests)\", \"test_templatetag_index (admin_docs.test_views.AdminDocViewTests)\", \"test_view_detail (admin_docs.test_views.AdminDocViewTests)\", \"test_view_detail_illegal_import (admin_docs.test_views.AdminDocViewTests)\", \"test_view_index (admin_docs.test_views.AdminDocViewTests)\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.752168",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}