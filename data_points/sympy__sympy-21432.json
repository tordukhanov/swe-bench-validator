{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-21432",
  "base_commit": "05f5021fff2e74f674e62c56ed0fc58bca17e2d2",
  "patch": "diff --git a/sympy/functions/elementary/complexes.py b/sympy/functions/elementary/complexes.py\n--- a/sympy/functions/elementary/complexes.py\n+++ b/sympy/functions/elementary/complexes.py\n@@ -537,6 +537,7 @@ def eval(cls, arg):\n                 return obj\n         if not isinstance(arg, Expr):\n             raise TypeError(\"Bad argument type for Abs(): %s\" % type(arg))\n+\n         # handle what we can\n         arg = signsimp(arg, evaluate=False)\n         n, d = arg.as_numer_denom()\n@@ -588,6 +589,10 @@ def eval(cls, arg):\n         if isinstance(arg, exp):\n             return exp(re(arg.args[0]))\n         if isinstance(arg, AppliedUndef):\n+            if arg.is_positive:\n+                return arg\n+            elif arg.is_negative:\n+                return -arg\n             return\n         if arg.is_Add and arg.has(S.Infinity, S.NegativeInfinity):\n             if any(a.is_infinite for a in arg.as_real_imag()):\n@@ -751,7 +756,7 @@ def eval(cls, arg):\n             arg_ = sign(c)*arg_\n         else:\n             arg_ = arg\n-        if arg_.atoms(AppliedUndef):\n+        if any(i.is_extended_positive is None for i in arg_.atoms(AppliedUndef)):\n             return\n         x, y = arg_.as_real_imag()\n         rv = atan2(y, x)\ndiff --git a/sympy/simplify/powsimp.py b/sympy/simplify/powsimp.py\n--- a/sympy/simplify/powsimp.py\n+++ b/sympy/simplify/powsimp.py\n@@ -578,8 +578,20 @@ def powdenest(eq, force=False, polar=False):\n     from sympy.simplify.simplify import posify\n \n     if force:\n-        eq, rep = posify(eq)\n-        return powdenest(eq, force=False).xreplace(rep)\n+        def _denest(b, e):\n+            if not isinstance(b, (Pow, exp)):\n+                return b.is_positive, Pow(b, e, evaluate=False)\n+            return _denest(b.base, b.exp*e)\n+        reps = []\n+        for p in eq.atoms(Pow, exp):\n+            if isinstance(p.base, (Pow, exp)):\n+                ok, dp = _denest(*p.args)\n+                if ok is not False:\n+                    reps.append((p, dp))\n+        if reps:\n+            eq = eq.subs(reps)\n+        eq, reps = posify(eq)\n+        return powdenest(eq, force=False, polar=polar).xreplace(reps)\n \n     if polar:\n         eq, rep = polarify(eq)\n",
  "test_patch": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -461,6 +461,9 @@ def test_Abs():\n \n     # coverage\n     assert unchanged(Abs, Symbol('x', real=True)**y)\n+    # issue 19627\n+    f = Function('f', positive=True)\n+    assert sqrt(f(x)**2) == f(x)\n \n \n def test_Abs_rewrite():\n@@ -589,6 +592,11 @@ def test_arg():\n     f = Function('f')\n     assert not arg(f(0) + I*f(1)).atoms(re)\n \n+    x = Symbol('x')\n+    p = Function('p', extended_positive=True)\n+    assert arg(p(x)) == 0\n+    assert arg((3 + I)*p(x)) == arg(3  + I)\n+\n     p = Symbol('p', positive=True)\n     assert arg(p) == 0\n \ndiff --git a/sympy/simplify/tests/test_powsimp.py b/sympy/simplify/tests/test_powsimp.py\n--- a/sympy/simplify/tests/test_powsimp.py\n+++ b/sympy/simplify/tests/test_powsimp.py\n@@ -329,3 +329,14 @@ def test_issue_17524():\n     a = symbols(\"a\", real=True)\n     e = (-1 - a**2)*sqrt(1 + a**2)\n     assert signsimp(powsimp(e)) == signsimp(e) == -(a**2 + 1)**(S(3)/2)\n+\n+\n+def test_issue_19627():\n+    # if you use force the user must verify\n+    assert powdenest(sqrt(sin(x)**2), force=True) == sin(x)\n+    assert powdenest((x**(S.Half/y))**(2*y), force=True) == x\n+    from sympy import expand_power_base\n+    e = 1 - a\n+    expr = (exp(z/e)*x**(b/e)*y**((1 - b)/e))**e\n+    assert powdenest(expand_power_base(expr, force=True), force=True\n+        ) == x**b*y**(1 - b)*exp(z)\n",
  "problem_statement": "powdenest(sqrt(sin(x)**2), force=True) does not work\nSince `powdenest(sqrt(x**2), force=True)` gives `x`, I would expect `powdenest(sqrt(sin(x)**2), force=True)` to be `sin(x)`.\n",
  "hints_text": "But `sqrt(sin(3*pi/2)**2)` != `sin(3*pi/2)`, the former being 1 and the latter being -1.\nKnowing that x is positive is not sufficient to guarantee that the result will be positive.\nI didn't realize that force=True changes variables to positive.  I thought force=True should do the simplification regardless of the assumptions.\nIt's difficult to know what the valid rules should be with something like `force=True` since by definition it should break the normal mathematical rules.\nYes, that is difficult.  I should have read the documentation better, but it seems weird to me that force=True makes symbols positive instead of forcing the simplification.  I feel like force should just do it and deal with wrong results.\r\n\r\nWhen solving an integral by trig substitution, I'd want to simplify `sqrt(sin(x)**2))` to `sin(x)`.  This is valid because I can assume x is in some appropriate domain like 0<x<pi.  However, I'm lazy and don't want to define assumptions.  Is there a way to force the simplification without assumptions?\nYou can use `replace` to do this, e.g.\r\n```python\r\n>>> eq=1/sqrt(sin(x)**2)\r\n>>> eq.replace(lambda x: x.is_Pow and abs(x.exp) is S.Half and x.base.is_Pow\r\n...   and x.base.exp == 2, lambda x: x.base.base**(x.exp*2))\r\n1/sin(x)\r\n```\r\nor with Wild for the principle root\r\n```\r\n>>> w,y,z=symbols('w y z',cls=Wild)\r\n>>> eq.replace(Pow(w**z, y/z), w**y)\r\n1/sin(x)\r\n```\nThanks!  Assumptions can be tricky.  Should `x/x` not reduce to 1 because we haven't specified that x is not 0?\n> Should `x/x` not reduce to 1 because we haven't specified that x is not 0?\r\n\r\nTechnically, yes. And even if you say that x *is* zero it will reduce to 1 because the flattening routine does not check for the assumptions when making this simplification. I'm not sure how much it would slow things down to check assumptions...or how desirable would be the result.\nIt seems to me there has to be a balance between being technically correct and getting somewhere.  It's interesting that Sympy does some simplifications without checking assumptions, but not others.  Why does `logcombine` with `force=True` force the simplification but `powdenest` with `force=True` change symbols to positive?\n> Why does `logcombine` with `force=True` force the simplification but `powdenest` with `force=True` change symbols to positive?\r\n\r\nhistorical, simplicity, mathematical myopia (often by myself). A change to replace all non-symbol bases with dummies at the outset if the force flag is true would be an appropriate change, I think:\r\n\r\n```diff\r\ndiff --git a/sympy/simplify/powsimp.py b/sympy/simplify/powsimp.py\r\nindex 280bd9e..6dc283b 100644\r\n--- a/sympy/simplify/powsimp.py\r\n+++ b/sympy/simplify/powsimp.py\r\n@@ -577,8 +577,18 @@ def powdenest(eq, force=False, polar=False):\r\n     from sympy.simplify.simplify import posify\r\n \r\n     if force:\r\n-        eq, rep = posify(eq)\r\n-        return powdenest(eq, force=False).xreplace(rep)\r\n+        def core_base(pow):\r\n+          if not isinstance(pow, Pow):\r\n+            return pow\r\n+          return core_base(pow.base)\r\n+        reps = {k: Dummy(positive=True) for k in [core_base(p) for p in eq.atoms(Pow)] if not k.is_positive is None}\r\n+        if reps:\r\n+            ireps = {v: k for k,v in reps.items()}\r\n+            eq = eq.subs(reps)\r\n+        else:\r\n+            ireps = {}\r\n+        eq, reps = posify(eq)\r\n+        return powdenest(eq, force=False, polar=polar).xreplace(reps).xreplace(ireps)\r\n \r\n     if polar:\r\n         eq, rep = polarify(eq)\r\n```\r\n\r\nThat passes current tests but gives\r\n```python\r\n>>> powdenest(sqrt(sin(x)**2),force=1)\r\nAbs(sin(x))\r\n```\n> ```python\r\n> >>> powdenest(sqrt(sin(x)**2),force=1)\r\n> Abs(sin(x))\r\n> ```\r\n\r\nThat's what I get on master:\r\n```\r\nIn [1]: powdenest(sqrt(sin(x)**2),force=1)                                                                                                     \r\nOut[1]: │sin(x)│\r\n```\n> That's what I get on master:\r\n\r\nHmm. I tried this several times under Windows and did not see this result. Will check again later.\nLooks like a difference in how Function and Symbol are handled:\r\n```python\r\n>>> from sympy.abc import x\r\n>>> f=Function('f', positive=1)\r\n>>> sqrt(f(x)**2)\r\nAbs(f(x))\r\n>>> var('x', positive=1)\r\nx\r\n>>> sqrt((x)**2)\r\nx\r\n```\nI see this with a vanilla symbol:\r\n```python\r\n>>> from sympy import *\r\n>>> x = Symbol('x')\r\n>>> powdenest(sqrt(sin(x)**2),force=1)\r\nAbs(sin(x))\r\n```\r\nThat's current master.\n> I see this with a vanilla symbol:\r\n\r\nyes, agreed. But a function and a symbol, both defined as positive, are being treated differently when taking `sqrt` of the same per example that I gave. That's an issue in itself and might fix this issue if it is fixed.\nThat's due to this\r\nhttps://github.com/sympy/sympy/blob/35fe74cdd23f53a38c5b1f0ade556d49d4e98c66/sympy/functions/elementary/complexes.py#L524-L525\n> That's due to this\r\n\r\nI figured it was there somehow but didn't have time to sleuth. Nice find. This can be removed since functions can now carry assumptions.\nAn example from a gitter user: `(y**(1/(1 - alpha))**(1 - alpha)`. It should simplify if `y` is positive and `0 < alpha < 1`, but there's no way to tell powdenest the second assumption. It would be useful if force=True just did a structural replacement, ignoring the assumptions requirements. If the user does force=True, it is on them to verify the mathematical correctness of the replacement. \nA simple workaround is to manually denest with a pattern and `replace`:\r\n\r\n```py\r\n>>> expr = ((y**(1/(1 - alpha)))**(1 - alpha))\r\n>>> a, b, c = Wild('a'), Wild('b'), Wild('c')\r\n>>> expr.replace((a**b)**c, a**(b*c))\r\ny\r\n```\nand while we are at it here is a more complicated example highlighting the same issue with exp()\r\n```\r\nfrom sympy import *\r\nvar(\"y, alpha, x, beta, delta\",positive = True,real=True)\r\na, b, c, d, e, f = Wild('a'), Wild('b'), Wild('c'), Wild('d'), Wild('e'), Wild('f')\r\nexpr = (exp(delta/(1-alpha))*x**(beta/(1-alpha))*y**((1-beta)/(1-alpha)))**(1-alpha)\r\n\r\nexp_trial = powdenest(expr, force=True)\r\nexp_trial2 = simplify(expr, force=True)\r\n\r\ntmp  = expr.replace((a*exp(b))**c, a**c*exp(b*c)).replace((a*b**c)**d, a**d*b**(c*d))\r\nwhile tmp != expr:\r\n    tmp = expr\r\n    expr = expr.replace((a*b**c)**d, a**d*b**(c*d))\r\n    expr = expr.replace((a*exp(b))**c, a**c*exp(b*c))\r\n```\r\n\r\nit would be great if powdenest and simplify could handle this case with force=True. for now I will resort to the while loop to iron out these cases.\r\n\r\nthis problem is quite relevant for economics where many problems have exponents (e.g. production functions: `y=a*k**alpha*l**(1-alpha)`). Using sympy to solve systems of equations of such nature would be great. for now I guess I will have to do manual solving by hand with the while loop. do you have any other ideas?",
  "created_at": "2021-05-04T19:53:01Z",
  "version": "1.9",
  "FAIL_TO_PASS": "[\"test_Abs\", \"test_arg\"]",
  "PASS_TO_PASS": "[\"test_re\", \"test_im\", \"test_sign\", \"test_as_real_imag\", \"test_Abs_rewrite\", \"test_Abs_real\", \"test_Abs_properties\", \"test_abs\", \"test_arg_rewrite\", \"test_adjoint\", \"test_conjugate\", \"test_conjugate_transpose\", \"test_transpose\", \"test_polarify\", \"test_unpolarify\", \"test_issue_4035\", \"test_issue_3206\", \"test_issue_4754_derivative_conjugate\", \"test_derivatives_issue_4757\", \"test_issue_11413\", \"test_periodic_argument\", \"test_principal_branch\", \"test_issue_14216\", \"test_issue_14238\", \"test_zero_assumptions\", \"test_powsimp\", \"test_powsimp_negated_base\", \"test_powsimp_nc\", \"test_issue_6440\", \"test_powdenest\", \"test_powdenest_polar\", \"test_issue_5805\", \"test_issue_9324_powsimp_on_matrix_symbol\", \"test_issue_6367\", \"test_powsimp_polar\", \"test_issue_5728\", \"test_issue_from_PR1599\", \"test_issue_10195\", \"test_issue_15709\", \"test_issue_11981\", \"test_issue_17524\"]",
  "environment_setup_commit": "f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.143412",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}