{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-17653",
  "base_commit": "ca53aee92788e81958fae1ce53a9d9e58bbdadaa",
  "patch": "diff --git a/sympy/tensor/indexed.py b/sympy/tensor/indexed.py\n--- a/sympy/tensor/indexed.py\n+++ b/sympy/tensor/indexed.py\n@@ -437,10 +437,9 @@ def __new__(cls, label, shape=None, **kw_args):\n \n         assumptions, kw_args = _filter_assumptions(kw_args)\n         if isinstance(label, string_types):\n-            label = Symbol(label)\n+            label = Symbol(label, **assumptions)\n         elif isinstance(label, Symbol):\n             assumptions = label._merge(assumptions)\n-            label = Symbol(label.name)\n         elif isinstance(label, (MatrixBase, NDimArray)):\n             return label\n         elif isinstance(label, Iterable):\n",
  "test_patch": "diff --git a/sympy/tensor/tests/test_indexed.py b/sympy/tensor/tests/test_indexed.py\n--- a/sympy/tensor/tests/test_indexed.py\n+++ b/sympy/tensor/tests/test_indexed.py\n@@ -229,9 +229,26 @@ def test_IndexedBase_assumptions_inheritance():\n \n     assert I_inherit.is_integer\n     assert I_explicit.is_integer\n+    assert I_inherit.label.is_integer\n+    assert I_explicit.label.is_integer\n     assert I_inherit == I_explicit\n \n \n+def test_issue_17652():\n+    \"\"\"Regression test issue #17652.\n+\n+    IndexedBase.label should not upcast subclasses of Symbol\n+    \"\"\"\n+    class SubClass(Symbol):\n+        pass\n+\n+    x = SubClass('X')\n+    assert type(x) == SubClass\n+    base = IndexedBase(x)\n+    assert type(x) == SubClass\n+    assert type(base.label) == SubClass\n+\n+\n def test_Indexed_constructor():\n     i, j = symbols('i j', integer=True)\n     A = Indexed('A', i, j)\n",
  "problem_statement": "__new__ of IndexedBase upcasts subclass of Symbol to Symbol\nFirst, thanks for creating SymPy. We're using it in a code generation framework: https://github.com/mabau/pystencils\r\n\r\nWe noticed that our tests are failling when using the current master of SymPy. To reproduce run:\r\n\r\n```bash\r\ngit clone https://github.com/mabau/pystencils\r\ncd pystencils\r\npip install -e . \r\npip install --upgrade --ignore-installed git+https://github.com/sympy/sympy.git\r\npython setup.py quicktest\r\n``` \r\nWhile\r\n\r\n```bash\r\ngit clone https://github.com/mabau/pystencils\r\ncd pystencils\r\npip install -e . \r\npip install --upgrade --ignore-installed git+https://github.com/sympy/sympy.git@sympy-1.4\r\npython setup.py quicktest\r\n```\r\nshould work fine.\r\n\r\nThe reason for this failure seems to be in the call of the constructor of  `sympy.IndexedBase`. We're a calling it with a subclass of  `sympy.Symbol` (`pystencils.data_types.TypedSymbol`) which is essentially a sympy Symbol with type information.\r\n\r\nIs there a reason why the out-commented line is necessary? It causes our TypeSymbol to lose its type information by re-constructing a new Symbol. When I out-comment this line everything works fine again. \r\n\r\nIn sympy/tensor/indexed.py\r\n```python\r\n    def __new__(cls, label, shape=None, **kw_args):\r\n        assumptions, kw_args = _filter_assumptions(kw_args)\r\n        if isinstance(label, string_types):\r\n            label = Symbol(label)\r\n        elif isinstance(label, Symbol):\r\n            assumptions = label._merge(assumptions)\r\n            # label = Symbol(label.name)\r\n        elif isinstance(label, (MatrixBase, NDimArray)):\r\n            return label\r\n        elif isinstance(label, Iterable):\r\n            return _sympify(label)\r\n        else:\r\n            label = _sympify(label)\r\n\r\n        if is_sequence(shape):\r\n            shape = Tuple(*shape)\r\n        elif shape is not None:\r\n            shape = Tuple(shape)\r\n\r\n        offset = kw_args.pop('offset', S.Zero)\r\n        strides = kw_args.pop('strides', None)\r\n\r\n        if shape is not None:\r\n            obj = Expr.__new__(cls, label, shape)\r\n        else:\r\n            obj = Expr.__new__(cls, label)\r\n        obj._shape = shape\r\n        obj._offset = offset\r\n        obj._strides = strides\r\n        obj._name = str(label)\r\n\r\n        IndexedBase._set_assumptions(obj, assumptions)\r\n        return obj\r\n```\r\n\r\n@mabau \n__new__ of IndexedBase upcasts subclass of Symbol to Symbol\nFirst, thanks for creating SymPy. We're using it in a code generation framework: https://github.com/mabau/pystencils\r\n\r\nWe noticed that our tests are failling when using the current master of SymPy. To reproduce run:\r\n\r\n```bash\r\ngit clone https://github.com/mabau/pystencils\r\ncd pystencils\r\npip install -e . \r\npip install --upgrade --ignore-installed git+https://github.com/sympy/sympy.git\r\npython setup.py quicktest\r\n``` \r\nWhile\r\n\r\n```bash\r\ngit clone https://github.com/mabau/pystencils\r\ncd pystencils\r\npip install -e . \r\npip install --upgrade --ignore-installed git+https://github.com/sympy/sympy.git@sympy-1.4\r\npython setup.py quicktest\r\n```\r\nshould work fine.\r\n\r\nThe reason for this failure seems to be in the call of the constructor of  `sympy.IndexedBase`. We're a calling it with a subclass of  `sympy.Symbol` (`pystencils.data_types.TypedSymbol`) which is essentially a sympy Symbol with type information.\r\n\r\nIs there a reason why the out-commented line is necessary? It causes our TypeSymbol to lose its type information by re-constructing a new Symbol. When I out-comment this line everything works fine again. \r\n\r\nIn sympy/tensor/indexed.py\r\n```python\r\n    def __new__(cls, label, shape=None, **kw_args):\r\n        assumptions, kw_args = _filter_assumptions(kw_args)\r\n        if isinstance(label, string_types):\r\n            label = Symbol(label)\r\n        elif isinstance(label, Symbol):\r\n            assumptions = label._merge(assumptions)\r\n            # label = Symbol(label.name)\r\n        elif isinstance(label, (MatrixBase, NDimArray)):\r\n            return label\r\n        elif isinstance(label, Iterable):\r\n            return _sympify(label)\r\n        else:\r\n            label = _sympify(label)\r\n\r\n        if is_sequence(shape):\r\n            shape = Tuple(*shape)\r\n        elif shape is not None:\r\n            shape = Tuple(shape)\r\n\r\n        offset = kw_args.pop('offset', S.Zero)\r\n        strides = kw_args.pop('strides', None)\r\n\r\n        if shape is not None:\r\n            obj = Expr.__new__(cls, label, shape)\r\n        else:\r\n            obj = Expr.__new__(cls, label)\r\n        obj._shape = shape\r\n        obj._offset = offset\r\n        obj._strides = strides\r\n        obj._name = str(label)\r\n\r\n        IndexedBase._set_assumptions(obj, assumptions)\r\n        return obj\r\n```\r\n\r\n@mabau \n",
  "hints_text": "If tests pass without the commented line I don't see any problem removing it. Would you mind opening a PR? If you do, would you please also add a regression test (a test which fails using the current code), and then add a commit removing the line which you've commented here.\nIf tests pass without the commented line I don't see any problem removing it. Would you mind opening a PR? If you do, would you please also add a regression test (a test which fails using the current code), and then add a commit removing the line which you've commented here.",
  "created_at": "2019-09-25T11:51:07Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_IndexedBase_assumptions_inheritance\", \"test_issue_17652\"]",
  "PASS_TO_PASS": "[\"test_Idx_construction\", \"test_Idx_properties\", \"test_Idx_bounds\", \"test_Idx_fixed_bounds\", \"test_Idx_inequalities\", \"test_Idx_func_args\", \"test_Idx_subs\", \"test_IndexedBase_sugar\", \"test_IndexedBase_subs\", \"test_IndexedBase_shape\", \"test_IndexedBase_assumptions\", \"test_Indexed_constructor\", \"test_Indexed_func_args\", \"test_Indexed_subs\", \"test_Indexed_properties\", \"test_Indexed_shape_precedence\", \"test_complex_indices\", \"test_not_interable\", \"test_Indexed_coeff\", \"test_differentiation\", \"test_indexed_series\", \"test_indexed_is_constant\", \"test_issue_12533\", \"test_issue_12780\", \"test_Subs_with_Indexed\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.117132",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}