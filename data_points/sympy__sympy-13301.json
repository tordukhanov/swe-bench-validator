{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-13301",
  "base_commit": "daac289bed6a780e91a452a0538ad6421c2ed8d5",
  "patch": "diff --git a/sympy/calculus/util.py b/sympy/calculus/util.py\n--- a/sympy/calculus/util.py\n+++ b/sympy/calculus/util.py\n@@ -578,16 +578,16 @@ class AccumulationBounds(AtomicExpr):\n     >>> from sympy.abc import x\n \n     >>> AccumBounds(0, 1) + AccumBounds(1, 2)\n-    <1, 3>\n+    AccumBounds(1, 3)\n \n     >>> AccumBounds(0, 1) - AccumBounds(0, 2)\n-    <-2, 1>\n+    AccumBounds(-2, 1)\n \n     >>> AccumBounds(-2, 3)*AccumBounds(-1, 1)\n-    <-3, 3>\n+    AccumBounds(-3, 3)\n \n     >>> AccumBounds(1, 2)*AccumBounds(3, 5)\n-    <3, 10>\n+    AccumBounds(3, 10)\n \n     The exponentiation of AccumulationBounds is defined\n     as follows:\n@@ -604,18 +604,18 @@ class AccumulationBounds(AtomicExpr):\n     AccumulationBounds object is neglected.\n \n     >>> AccumBounds(-1, 4)**(S(1)/2)\n-    <0, 2>\n+    AccumBounds(0, 2)\n \n     >>> AccumBounds(1, 2)**2\n-    <1, 4>\n+    AccumBounds(1, 4)\n \n     >>> AccumBounds(-1, oo)**(-1)\n-    <-oo, oo>\n+    AccumBounds(-oo, oo)\n \n     Note: `<a, b>^2` is not same as `<a, b>*<a, b>`\n \n     >>> AccumBounds(-1, 1)**2\n-    <0, 1>\n+    AccumBounds(0, 1)\n \n     >>> AccumBounds(1, 3) < 4\n     True\n@@ -628,13 +628,13 @@ class AccumulationBounds(AtomicExpr):\n     is defined as `f(\\langle a, b\\rangle) = \\{ f(x) \\mid a \\le x \\le b \\}`\n \n     >>> sin(AccumBounds(pi/6, pi/3))\n-    <1/2, sqrt(3)/2>\n+    AccumBounds(1/2, sqrt(3)/2)\n \n     >>> exp(AccumBounds(0, 1))\n-    <1, E>\n+    AccumBounds(1, E)\n \n     >>> log(AccumBounds(1, E))\n-    <0, 1>\n+    AccumBounds(0, 1)\n \n     Some symbol in an expression can be substituted for a AccumulationBounds\n     object. But it doesn't necessarily evaluate the AccumulationBounds for\n@@ -644,10 +644,10 @@ class AccumulationBounds(AtomicExpr):\n     the form it is used for substituion. For example:\n \n     >>> (x**2 + 2*x + 1).subs(x, AccumBounds(-1, 1))\n-    <-1, 4>\n+    AccumBounds(-1, 4)\n \n     >>> ((x + 1)**2).subs(x, AccumBounds(-1, 1))\n-    <0, 4>\n+    AccumBounds(0, 4)\n \n     References\n     ==========\n@@ -1224,7 +1224,7 @@ def intersection(self, other):\n \n         >>> from sympy import AccumBounds, FiniteSet\n         >>> AccumBounds(1, 3).intersection(AccumBounds(2, 4))\n-        <2, 3>\n+        AccumBounds(2, 3)\n \n         >>> AccumBounds(1, 3).intersection(AccumBounds(4, 6))\n         EmptySet()\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1652,7 +1652,7 @@ def _print_Interval(self, i):\n \n             return self._print_seq(i.args[:2], left, right)\n \n-    def _print_AccumuBounds(self, i):\n+    def _print_AccumulationBounds(self, i):\n         left = '<'\n         right = '>'\n \ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -194,11 +194,7 @@ def _print_Interval(self, i):\n         return fin.format(**{'a': a, 'b': b, 'm': m})\n \n     def _print_AccumulationBounds(self, i):\n-        left = '<'\n-        right = '>'\n-\n-        return \"%s%s, %s%s\" % \\\n-                (left, self._print(i.min), self._print(i.max), right)\n+        return \"AccumBounds(%s, %s)\" % (self._print(i.min), self._print(i.max))\n \n     def _print_Inverse(self, I):\n         return \"%s^-1\" % self.parenthesize(I.arg, PRECEDENCE[\"Pow\"])\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -167,8 +167,8 @@ def test_Interval():\n \n def test_AccumBounds():\n     a = Symbol('a', real=True)\n-    assert str(AccumBounds(0, a)) == \"<0, a>\"\n-    assert str(AccumBounds(0, 1)) == \"<0, 1>\"\n+    assert str(AccumBounds(0, a)) == \"AccumBounds(0, a)\"\n+    assert str(AccumBounds(0, 1)) == \"AccumBounds(0, 1)\"\n \n \n def test_Lambda():\n",
  "problem_statement": "AccumBounds needs recreatable str/srepr\n```\r\n>>> str(AccumBounds(-1, 1))\r\n'<-1, 1>'\r\n>>> srepr(AccumBounds(-1, 1))\r\n'<-1, 1>'\r\n```\r\n\r\nThe str and srepr should be recreatable. The pretty printer should be the only thing that prints the pretty form. \n",
  "hints_text": "This is probably just a matter of moving the current printer from the str printer to the pretty printer. \nHi @asmeurer . I would like to work on this issue.",
  "created_at": "2017-09-11T20:59:50Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_AccumBounds\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_Abs\", \"test_Add\", \"test_Catalan\", \"test_ComplexInfinity\", \"test_Derivative\", \"test_dict\", \"test_Dict\", \"test_Dummy\", \"test_EulerGamma\", \"test_Exp\", \"test_factorial\", \"test_Function\", \"test_Geometry\", \"test_GoldenRatio\", \"test_ImaginaryUnit\", \"test_Infinity\", \"test_Integer\", \"test_Integral\", \"test_Interval\", \"test_Lambda\", \"test_Limit\", \"test_list\", \"test_Matrix_str\", \"test_Mul\", \"test_NaN\", \"test_NegativeInfinity\", \"test_Order\", \"test_Permutation_Cycle\", \"test_Pi\", \"test_Poly\", \"test_PolyRing\", \"test_FracField\", \"test_PolyElement\", \"test_FracElement\", \"test_Pow\", \"test_sqrt\", \"test_Rational\", \"test_Float\", \"test_Relational\", \"test_CRootOf\", \"test_RootSum\", \"test_GroebnerBasis\", \"test_set\", \"test_SparseMatrix\", \"test_Sum\", \"test_Symbol\", \"test_tuple\", \"test_Quantity_str\", \"test_wild_str\", \"test_zeta\", \"test_issue_3101\", \"test_issue_3103\", \"test_issue_4021\", \"test_sstrrepr\", \"test_infinity\", \"test_full_prec\", \"test_noncommutative\", \"test_empty_printer\", \"test_settings\", \"test_RandomDomain\", \"test_FiniteSet\", \"test_PrettyPoly\", \"test_categories\", \"test_Tr\", \"test_issue_6387\", \"test_MatMul_MatAdd\", \"test_MatrixSlice\", \"test_true_false\", \"test_Equivalent\", \"test_Xor\", \"test_Complement\", \"test_SymmetricDifference\", \"test_UnevaluatedExpr\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.082525",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}