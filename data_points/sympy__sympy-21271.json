{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-21271",
  "base_commit": "72fa16acc88deae0f7c7a8c2e263eb7b912b97e0",
  "patch": "diff --git a/sympy/physics/vector/frame.py b/sympy/physics/vector/frame.py\n--- a/sympy/physics/vector/frame.py\n+++ b/sympy/physics/vector/frame.py\n@@ -190,9 +190,9 @@ def __init__(self, name, indices=None, latexs=None, variables=None):\n             self.latex_vecs = latexs\n         self.name = name\n         self._var_dict = {}\n-        #The _dcm_dict dictionary will only store the dcms of parent-child\n-        #relationships. The _dcm_cache dictionary will work as the dcm\n-        #cache.\n+        #The _dcm_dict dictionary will only store the dcms of adjacent parent-child\n+        #relationships. The _dcm_cache dictionary will store calculated dcm along with\n+        #all content of _dcm_dict for faster retrieval of dcms.\n         self._dcm_dict = {}\n         self._dcm_cache = {}\n         self._ang_vel_dict = {}\n@@ -529,26 +529,35 @@ def dcm(self, otherframe):\n         return outdcm\n \n     def _dcm(self, parent, parent_orient):\n-        # Reset the _dcm_cache of this frame, and remove it from the\n-        # _dcm_caches of the frames it is linked to. Also remove it from the\n-        # _dcm_dict of its parent\n+        # If parent.oreint(self) is already defined,then\n+        # update the _dcm_dict of parent while over write\n+        # all content of self._dcm_dict and self._dcm_cache\n+        # with new dcm relation.\n+        # Else update _dcm_cache and _dcm_dict of both\n+        # self and parent.\n         frames = self._dcm_cache.keys()\n         dcm_dict_del = []\n         dcm_cache_del = []\n-        for frame in frames:\n-            if frame in self._dcm_dict:\n-                dcm_dict_del += [frame]\n-            dcm_cache_del += [frame]\n-        for frame in dcm_dict_del:\n-            del frame._dcm_dict[self]\n-        for frame in dcm_cache_del:\n-            del frame._dcm_cache[self]\n+        if parent in frames:\n+            for frame in frames:\n+                if frame in self._dcm_dict:\n+                    dcm_dict_del += [frame]\n+                dcm_cache_del += [frame]\n+            # Reset the _dcm_cache of this frame, and remove it from the\n+            # _dcm_caches of the frames it is linked to. Also remove it from the\n+            # _dcm_dict of its parent\n+            for frame in dcm_dict_del:\n+                del frame._dcm_dict[self]\n+            for frame in dcm_cache_del:\n+                del frame._dcm_cache[self]\n+        # Reset the _dcm_dict\n+            self._dcm_dict = self._dlist[0] = {}\n+        # Reset the _dcm_cache\n+            self._dcm_cache = {}\n         # Add the dcm relationship to _dcm_dict\n-        self._dcm_dict = self._dlist[0] = {}\n         self._dcm_dict.update({parent: parent_orient.T})\n         parent._dcm_dict.update({self: parent_orient})\n-        # Also update the dcm cache after resetting it\n-        self._dcm_cache = {}\n+        # Update the dcm cache\n         self._dcm_cache.update({parent: parent_orient.T})\n         parent._dcm_cache.update({self: parent_orient})\n \n@@ -887,7 +896,7 @@ def orient_space_fixed(self, parent, angles, rotation_order):\n         >>> B1.orient_axis(N, N.z, q1)\n         >>> B2.orient_axis(B1, N.x, q2)\n         >>> B.orient_axis(B2, N.y, q3)\n-        >>> B.dcm(N).simplify() # doctest: +SKIP\n+        >>> B.dcm(N).simplify()\n         Matrix([\n         [ sin(q1)*sin(q2)*sin(q3) + cos(q1)*cos(q3), sin(q1)*cos(q2), sin(q1)*sin(q2)*cos(q3) - sin(q3)*cos(q1)],\n         [-sin(q1)*cos(q3) + sin(q2)*sin(q3)*cos(q1), cos(q1)*cos(q2), sin(q1)*sin(q3) + sin(q2)*cos(q1)*cos(q3)],\n",
  "test_patch": "diff --git a/sympy/physics/vector/tests/test_frame.py b/sympy/physics/vector/tests/test_frame.py\n--- a/sympy/physics/vector/tests/test_frame.py\n+++ b/sympy/physics/vector/tests/test_frame.py\n@@ -471,3 +471,63 @@ def test_orient_quaternion():\n     B = ReferenceFrame('B')\n     B.orient_quaternion(A, (0,0,0,0))\n     assert B.dcm(A) == Matrix([[0, 0, 0], [0, 0, 0], [0, 0, 0]])\n+\n+def test_frame_dict():\n+    A = ReferenceFrame('A')\n+    B = ReferenceFrame('B')\n+    C = ReferenceFrame('C')\n+\n+    a, b, c = symbols('a b c')\n+\n+    B.orient_axis(A, A.x, a)\n+    assert A._dcm_dict == {B: Matrix([[1, 0, 0],[0, cos(a), -sin(a)],[0, sin(a),  cos(a)]])}\n+    assert B._dcm_dict == {A: Matrix([[1, 0, 0],[0,  cos(a), sin(a)],[0, -sin(a), cos(a)]])}\n+    assert C._dcm_dict == {}\n+\n+    B.orient_axis(C, C.x, b)\n+    # Previous relation is not wiped\n+    assert A._dcm_dict == {B: Matrix([[1, 0, 0],[0, cos(a), -sin(a)],[0, sin(a),  cos(a)]])}\n+    assert B._dcm_dict == {A: Matrix([[1, 0, 0],[0,  cos(a), sin(a)],[0, -sin(a), cos(a)]]), \\\n+        C: Matrix([[1, 0, 0],[0,  cos(b), sin(b)],[0, -sin(b), cos(b)]])}\n+    assert C._dcm_dict == {B: Matrix([[1, 0, 0],[0, cos(b), -sin(b)],[0, sin(b),  cos(b)]])}\n+\n+    A.orient_axis(B, B.x, c)\n+    # Previous relation is updated\n+    assert B._dcm_dict == {C: Matrix([[1, 0, 0],[0,  cos(b), sin(b)],[0, -sin(b), cos(b)]]),\\\n+        A: Matrix([[1, 0, 0],[0, cos(c), -sin(c)],[0, sin(c),  cos(c)]])}\n+    assert A._dcm_dict == {B: Matrix([[1, 0, 0],[0,  cos(c), sin(c)],[0, -sin(c), cos(c)]])}\n+    assert C._dcm_dict == {B: Matrix([[1, 0, 0],[0, cos(b), -sin(b)],[0, sin(b),  cos(b)]])}\n+\n+def test_dcm_cache_dict():\n+    A = ReferenceFrame('A')\n+    B = ReferenceFrame('B')\n+    C = ReferenceFrame('C')\n+    D = ReferenceFrame('D')\n+\n+    a, b, c = symbols('a b c')\n+\n+    B.orient_axis(A, A.x, a)\n+    C.orient_axis(B, B.x, b)\n+    D.orient_axis(C, C.x, c)\n+\n+    assert D._dcm_dict == {C: Matrix([[1, 0, 0],[0,  cos(c), sin(c)],[0, -sin(c), cos(c)]])}\n+    assert C._dcm_dict == {B: Matrix([[1, 0, 0],[0,  cos(b), sin(b)],[0, -sin(b), cos(b)]]), \\\n+        D: Matrix([[1, 0, 0],[0, cos(c), -sin(c)],[0, sin(c),  cos(c)]])}\n+    assert B._dcm_dict == {A: Matrix([[1, 0, 0],[0,  cos(a), sin(a)],[0, -sin(a), cos(a)]]), \\\n+        C: Matrix([[1, 0, 0],[0, cos(b), -sin(b)],[0, sin(b),  cos(b)]])}\n+    assert A._dcm_dict == {B: Matrix([[1, 0, 0],[0, cos(a), -sin(a)],[0, sin(a),  cos(a)]])}\n+\n+    assert D._dcm_dict == D._dcm_cache\n+\n+    D.dcm(A) # Check calculated dcm relation is stored in _dcm_cache and not in _dcm_dict\n+    assert list(A._dcm_cache.keys()) == [A, B, D]\n+    assert list(D._dcm_cache.keys()) == [C, A]\n+    assert list(A._dcm_dict.keys()) == [B]\n+    assert list(D._dcm_dict.keys()) == [C]\n+    assert A._dcm_dict != A._dcm_cache\n+\n+    A.orient_axis(B, B.x, b) # _dcm_cache of A is wiped out and new relation is stored.\n+    assert A._dcm_dict == {B: Matrix([[1, 0, 0],[0,  cos(b), sin(b)],[0, -sin(b), cos(b)]])}\n+    assert A._dcm_dict == A._dcm_cache\n+    assert B._dcm_dict == {C: Matrix([[1, 0, 0],[0, cos(b), -sin(b)],[0, sin(b),  cos(b)]]), \\\n+        A: Matrix([[1, 0, 0],[0, cos(b), -sin(b)],[0, sin(b),  cos(b)]])}\n",
  "problem_statement": "Doctest failure in sympy/physics/vector/frame.py\nSee discussion in #20946.\r\n\r\nCC @moorepants \r\n\r\nThere was a doctest failure but the test was disabled in #20954 to unblock CI. The cause of the failure remains unfixed though.\r\n\r\nThe failure was:\r\n```\r\n$ bin/doctest sympy/physics/vector/\r\n====================================================== test process starts =======================================================\r\nexecutable:         /Users/enojb/current/sympy/sympy/venv/bin/python  (3.8.5-final-0) [CPython]\r\narchitecture:       64-bit\r\ncache:              yes\r\nground types:       gmpy 2.0.8\r\nnumpy:              None\r\nhash randomization: on (PYTHONHASHSEED=3249984020)\r\n\r\nsympy/physics/vector/functions.py[9] .........                                                                                [OK]\r\nsympy/physics/vector/vector.py[14] ..............                                                                             [OK]\r\nsympy/physics/vector/point.py[13] .............                                                                               [OK]\r\nsympy/physics/vector/frame.py[15] .....F.........                                                                           [FAIL]\r\nsympy/physics/vector/fieldfunctions.py[7] .......                                                                             [OK]\r\nsympy/physics/vector/dyadic.py[10] ..........                                                                                 [OK]\r\nsympy/physics/vector/printing.py[4] ....                                                                                      [OK]\r\n\r\n__________________________________________________________________________________________________________________________________\r\n__________________________________ sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed __________________________________\r\nFile \"/Users/enojb/current/sympy/sympy/sympy/physics/vector/frame.py\", line 838, in sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed\r\nFailed example:\r\n    B.dcm(N).simplify()\r\nExpected:\r\n    Matrix([\r\n    [ sin(q1)*sin(q2)*sin(q3) + cos(q1)*cos(q3), sin(q1)*cos(q2), sin(q1)*sin(q2)*cos(q3) - sin(q3)*cos(q1)],\r\n    [-sin(q1)*cos(q3) + sin(q2)*sin(q3)*cos(q1), cos(q1)*cos(q2), sin(q1)*sin(q3) + sin(q2)*cos(q1)*cos(q3)],\r\n    [                           sin(q3)*cos(q2),        -sin(q2),                           cos(q2)*cos(q3)]])\r\nGot:\r\n    Matrix([\r\n    [ sin(q1)*sin(q2)*sin(q3) + cos(q1)*cos(q3), sin(q1)*cos(q2),                                                                                sin(q1)*sin(q2)*cos(q3) - sin(q3)*cos(q1)],\r\n    [-sin(q1)*cos(q3) + sin(q2)*sin(q3)*cos(q1), cos(q1)*cos(q2), sin(-q1 + q2 + q3)/4 - sin(q1 - q2 + q3)/4 + sin(q1 + q2 - q3)/4 + sin(q1 + q2 + q3)/4 + cos(q1 - q3)/2 - cos(q1 + q3)/2],\r\n    [                           sin(q3)*cos(q2),        -sin(q2),                                                                                                          cos(q2)*cos(q3)]])\r\n```\n",
  "hints_text": "I can fix this. I want to work on this issue.\r\n\nI think I found a fix  , if I succeed I'll make a PR.\n@sidhu1012 What do you think the issue is?\nIt's worth noting that this passes:\r\n\r\n```\r\nbin/doctest sympy/physics/vector/functions.py sympy/physics/vector/frame.py\r\n```\r\n\r\nand this fails:\r\n\r\n```\r\nbin/doctest sympy/physics/vector/dyadic.py sympy/physics/vector/frame.py\r\n```\r\n\r\nSo it depends on what your run before frame.py.\r\n\r\nEDIT: If the other modules happen to run before frame.py.\nI tried this script which adds the doctests from dyadic.py in front of the doctests from `orient_space_fixed` and it passes. I'm not sure what bin/doctest does different.\r\n\r\n```python\r\nimport sympy as sm\r\nimport sympy.physics.mechanics as me\r\n\r\n# code from dyadic.py's doctests\r\nN = me.ReferenceFrame('N')\r\nD1 = me.outer(N.x, N.y)\r\nD2 = me.outer(N.y, N.y)\r\nD1.dot(D2)\r\nD1.dot(N.y)\r\n5*D1\r\nme.cross(N.y, D2)\r\nq = me.dynamicsymbols('q')\r\nB = N.orientnew('B', 'Axis', [q, N.z])\r\nd = me.outer(N.x, N.x)\r\nd.express(B, N)\r\nIxx, Iyy, Izz, Ixy, Iyz, Ixz = sm.symbols('Ixx, Iyy, Izz, Ixy, Iyz, Ixz')\r\nN = me.ReferenceFrame('N')\r\ninertia_dyadic = me.inertia(N, Ixx, Iyy, Izz, Ixy, Iyz, Ixz)\r\ninertia_dyadic.to_matrix(N)\r\nbeta = sm.symbols('beta')\r\nA = N.orientnew('A', 'Axis', (beta, N.x))\r\ninertia_dyadic.to_matrix(A)\r\nB = N.orientnew('B', 'Axis', [q, N.z])\r\nd = me.outer(N.x, N.x)\r\nd.dt(B)\r\ns = sm.Symbol('s')\r\na = s*me.outer(N.x, N.x)\r\na.subs({s: 2})\r\nD = me.outer(N.x, N.x)\r\nx, y, z = sm.symbols('x y z')\r\n((1 + x*y) * D).xreplace({x: sm.pi})\r\n((1 + x*y) * D).xreplace({x: sm.pi, y: 2})\r\n((x*y + z) * D).xreplace({x*y: sm.pi})\r\n((x*y*z) * D).xreplace({x*y: sm.pi})\r\n\r\n\r\n# failing doctest from orient_space_fixed()\r\nq1, q2, q3 = sm.symbols('q1, q2, q3')\r\n\r\nN = me.ReferenceFrame('N')\r\nB = me.ReferenceFrame('B')\r\nB.orient_space_fixed(N, (q1, q2, q3), '312')\r\nexpected = B.dcm(N)\r\n\r\nN2 = me.ReferenceFrame('N2')\r\nB1 = me.ReferenceFrame('B1')\r\nB2 = me.ReferenceFrame('B2')\r\nB3 = me.ReferenceFrame('B3')\r\n\r\nB1.orient_axis(N2, N2.z, q1)\r\nB2.orient_axis(B1, N2.x, q2)\r\nB3.orient_axis(B2, N2.y, q3)\r\nobtained = B3.dcm(N2).simplify()\r\n\r\nassert (obtained - expected) == sm.zeros(3, 3)\r\n```\n> and this fails:\r\n> \r\n> ```\r\n> bin/doctest sympy/physics/vector/dyadic.py sympy/physics/vector/frame.py\r\n> ```\r\nFor me that passes. Actually the frame doctests are run first:\r\n```console\r\n$ bin/doctest sympy/physics/vector/dyadic.py sympy/physics/vector/frame.py\r\n====================================================== test process starts =======================================================\r\nexecutable:         /Users/enojb/current/sympy/38venv/bin/python  (3.8.5-final-0) [CPython]\r\narchitecture:       64-bit\r\ncache:              yes\r\nground types:       gmpy 2.0.8\r\nnumpy:              1.19.4\r\nhash randomization: on (PYTHONHASHSEED=2672944533)\r\n\r\nsympy/physics/vector/frame.py[15] ...............                                                                             [OK]\r\nsympy/physics/vector/dyadic.py[10] ..........                                                                                 [OK]\r\n\r\n========================================== tests finished: 25 passed, in 32.70 seconds ===========================================\r\n```\r\n\r\nFor me this fails though:\r\n```console\r\n$ bin/doctest sympy/physics/vector\r\n====================================================== test process starts =======================================================\r\nexecutable:         /Users/enojb/current/sympy/38venv/bin/python  (3.8.5-final-0) [CPython]\r\narchitecture:       64-bit\r\ncache:              yes\r\nground types:       gmpy 2.0.8\r\nnumpy:              1.19.4\r\nhash randomization: on (PYTHONHASHSEED=692765549)\r\n\r\nsympy/physics/vector/functions.py[9] .........                                                                                [OK]\r\nsympy/physics/vector/vector.py[14] ..............                                                                             [OK]\r\nsympy/physics/vector/point.py[13] .............                                                                               [OK]\r\nsympy/physics/vector/frame.py[15] .....F.........                                                                           [FAIL]\r\nsympy/physics/vector/fieldfunctions.py[7] .......                                                                             [OK]\r\nsympy/physics/vector/dyadic.py[10] ..........                                                                                 [OK]\r\nsympy/physics/vector/printing.py[4] ....                                                                                      [OK]\r\n\r\n__________________________________________________________________________________________________________________________________\r\n__________________________________ sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed __________________________________\r\nFile \"/Users/enojb/current/sympy/sympy/sympy/physics/vector/frame.py\", line 838, in sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed\r\nFailed example:\r\n    B.dcm(N).simplify()\r\nExpected:\r\n    Matrix([\r\n    [ sin(q1)*sin(q2)*sin(q3) + cos(q1)*cos(q3), sin(q1)*cos(q2), sin(q1)*sin(q2)*cos(q3) - sin(q3)*cos(q1)],\r\n    [-sin(q1)*cos(q3) + sin(q2)*sin(q3)*cos(q1), cos(q1)*cos(q2), sin(q1)*sin(q3) + sin(q2)*cos(q1)*cos(q3)],\r\n    [                           sin(q3)*cos(q2),        -sin(q2),                           cos(q2)*cos(q3)]])\r\nGot:\r\n    Matrix([\r\n    [ sin(q1)*sin(q2)*sin(q3) + cos(q1)*cos(q3), sin(q1)*cos(q2),                                                                                sin(q1)*sin(q2)*cos(q3) - sin(q3)*cos(q1)],\r\n    [-sin(q1)*cos(q3) + sin(q2)*sin(q3)*cos(q1), cos(q1)*cos(q2), sin(-q1 + q2 + q3)/4 - sin(q1 - q2 + q3)/4 + sin(q1 + q2 - q3)/4 + sin(q1 + q2 + q3)/4 + cos(q1 - q3)/2 - cos(q1 + q3)/2],\r\n    [                           sin(q3)*cos(q2),        -sin(q2),                                                                                                          cos(q2)*cos(q3)]])\r\n\r\n===================================== tests finished: 71 passed, 1 failed, in 13.80 seconds ======================================\r\nDO *NOT* COMMIT!\r\n```\r\nTo be clear I am testing this on current master 4aa3cd6c7c689fbe4e604082fb44e2136fa4224d with the following diff\r\n```diff\r\ndiff --git a/sympy/physics/vector/frame.py b/sympy/physics/vector/frame.py\r\nindex 565a99c626..d3866df2e8 100644\r\n--- a/sympy/physics/vector/frame.py\r\n+++ b/sympy/physics/vector/frame.py\r\n@@ -835,7 +835,7 @@ def orient_space_fixed(self, parent, angles, rotation_order):\r\n         >>> B1.orient_axis(N, N.z, q1)\r\n         >>> B2.orient_axis(B1, N.x, q2)\r\n         >>> B.orient_axis(B2, N.y, q3)\r\n-        >>> B.dcm(N).simplify() # doctest: +SKIP\r\n+        >>> B.dcm(N).simplify()\r\n         Matrix([\r\n         [ sin(q1)*sin(q2)*sin(q3) + cos(q1)*cos(q3), sin(q1)*cos(q2), sin(q1)*sin(q2)*cos(q3) - sin(q3)*cos(q1)],\r\n         [-sin(q1)*cos(q3) + sin(q2)*sin(q3)*cos(q1), cos(q1)*cos(q2), sin(q1)*sin(q3) + sin(q2)*cos(q1)*cos(q3)],\r\n```\n> @sidhu1012 What do you think the issue is?\r\n\r\nSorry for the delay, had a marriage to attend. I think the issue is that frame `B` is already rotated but tests works as if frame is a fresh variable.\r\n\r\nhttps://github.com/sympy/sympy/blob/65f5d2a8be5d6508ff7245fcd5f8ad9cb046f097/sympy/physics/vector/frame.py#L826-L838\nI don't think that's it. I've tried making all the variable names unique and not reusing any and it still errors. It has something to do with the fact that pytest runs some code before the doctests in frame.py (from other modules). I wonder if the dcm_cache is somehow corrupted. I also don't know how to open a debugger in the doctest so I can see what the cache looks like.\n#20966 passed though. I think it's the correct fix",
  "created_at": "2021-04-09T07:15:12Z",
  "version": "1.9",
  "FAIL_TO_PASS": "[\"test_frame_dict\"]",
  "PASS_TO_PASS": "[\"test_dict_list\", \"test_coordinate_vars\", \"test_ang_vel\", \"test_dcm\", \"test_w_diff_dcm1\", \"test_w_diff_dcm2\", \"test_orientnew_respects_parent_class\", \"test_orientnew_respects_input_indices\", \"test_orientnew_respects_input_latexs\", \"test_orientnew_respects_input_variables\", \"test_issue_10348\", \"test_issue_11503\", \"test_partial_velocity\", \"test_issue_11498\", \"test_reference_frame\", \"test_check_frame\", \"test_dcm_diff_16824\", \"test_orient_explicit\", \"test_orient_axis\", \"test_orient_body\", \"test_orient_space\", \"test_orient_quaternion\"]",
  "environment_setup_commit": "f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.142193",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}