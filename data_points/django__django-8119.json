{
  "repo": "django/django",
  "instance_id": "django__django-8119",
  "base_commit": "069bee7c1232458a0f13c2e30daa8df99dbd3680",
  "patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -581,6 +581,13 @@ def check_expression_support(self, expression):\n         \"\"\"\n         pass\n \n+    def conditional_expression_supported_in_where_clause(self, expression):\n+        \"\"\"\n+        Return True, if the conditional expression is supported in the WHERE\n+        clause.\n+        \"\"\"\n+        return True\n+\n     def combine_expression(self, connector, sub_expressions):\n         \"\"\"\n         Combine a list of subexpressions into a single expression, using\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -6,6 +6,8 @@\n from django.conf import settings\n from django.db.backends.base.operations import BaseDatabaseOperations\n from django.db.backends.utils import strip_quotes, truncate_name\n+from django.db.models.expressions import Exists, ExpressionWrapper\n+from django.db.models.query_utils import Q\n from django.db.utils import DatabaseError\n from django.utils import timezone\n from django.utils.encoding import force_bytes, force_str\n@@ -607,3 +609,14 @@ def bulk_batch_size(self, fields, objs):\n         if fields:\n             return self.connection.features.max_query_params // len(fields)\n         return len(objs)\n+\n+    def conditional_expression_supported_in_where_clause(self, expression):\n+        \"\"\"\n+        Oracle supports only EXISTS(...) or filters in the WHERE clause, others\n+        must be compared with True.\n+        \"\"\"\n+        if isinstance(expression, Exists):\n+            return True\n+        if isinstance(expression, ExpressionWrapper) and isinstance(expression.expression, Q):\n+            return True\n+        return False\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -90,6 +90,8 @@ def __pow__(self, other):\n         return self._combine(other, self.POW, False)\n \n     def __and__(self, other):\n+        if getattr(self, 'conditional', False) and getattr(other, 'conditional', False):\n+            return Q(self) & Q(other)\n         raise NotImplementedError(\n             \"Use .bitand() and .bitor() for bitwise logical operations.\"\n         )\n@@ -104,6 +106,8 @@ def bitrightshift(self, other):\n         return self._combine(other, self.BITRIGHTSHIFT, False)\n \n     def __or__(self, other):\n+        if getattr(self, 'conditional', False) and getattr(other, 'conditional', False):\n+            return Q(self) | Q(other)\n         raise NotImplementedError(\n             \"Use .bitand() and .bitor() for bitwise logical operations.\"\n         )\n@@ -245,6 +249,10 @@ def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize\n         ])\n         return c\n \n+    @property\n+    def conditional(self):\n+        return isinstance(self.output_field, fields.BooleanField)\n+\n     @property\n     def field(self):\n         return self.output_field\n@@ -873,12 +881,17 @@ def __repr__(self):\n \n class When(Expression):\n     template = 'WHEN %(condition)s THEN %(result)s'\n+    # This isn't a complete conditional expression, must be used in Case().\n+    conditional = False\n \n     def __init__(self, condition=None, then=None, **lookups):\n         if lookups and condition is None:\n             condition, lookups = Q(**lookups), None\n         if condition is None or not getattr(condition, 'conditional', False) or lookups:\n-            raise TypeError(\"__init__() takes either a Q object or lookups as keyword arguments\")\n+            raise TypeError(\n+                'When() supports a Q object, a boolean expression, or lookups '\n+                'as a condition.'\n+            )\n         if isinstance(condition, Q) and not condition:\n             raise ValueError(\"An empty Q() can't be used as a When() condition.\")\n         super().__init__(output_field=None)\n@@ -1090,6 +1103,7 @@ def select_format(self, compiler, sql, params):\n \n class OrderBy(BaseExpression):\n     template = '%(expression)s %(ordering)s'\n+    conditional = False\n \n     def __init__(self, expression, descending=False, nulls_first=False, nulls_last=False):\n         if nulls_first and nulls_last:\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1229,6 +1229,16 @@ def build_filter(self, filter_expr, branch_negated=False, current_negated=False,\n         \"\"\"\n         if isinstance(filter_expr, dict):\n             raise FieldError(\"Cannot parse keyword query as dict\")\n+        if hasattr(filter_expr, 'resolve_expression') and getattr(filter_expr, 'conditional', False):\n+            if connections[DEFAULT_DB_ALIAS].ops.conditional_expression_supported_in_where_clause(filter_expr):\n+                condition = filter_expr.resolve_expression(self)\n+            else:\n+                # Expression is not supported in the WHERE clause, add\n+                # comparison with True.\n+                condition = self.build_lookup(['exact'], filter_expr.resolve_expression(self), True)\n+            clause = self.where_class()\n+            clause.add(condition, AND)\n+            return clause, []\n         arg, value = filter_expr\n         if not arg:\n             raise FieldError(\"Cannot parse keyword query %r\" % arg)\n",
  "test_patch": "diff --git a/tests/expressions/models.py b/tests/expressions/models.py\n--- a/tests/expressions/models.py\n+++ b/tests/expressions/models.py\n@@ -34,6 +34,7 @@ class Company(models.Model):\n         related_name='company_point_of_contact_set',\n         null=True,\n     )\n+    based_in_eu = models.BooleanField(default=False)\n \n     def __str__(self):\n         return self.name\ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -37,7 +37,7 @@ def setUpTestData(cls):\n             ceo=Employee.objects.create(firstname=\"Joe\", lastname=\"Smith\", salary=10)\n         )\n         cls.foobar_ltd = Company.objects.create(\n-            name=\"Foobar Ltd.\", num_employees=3, num_chairs=4,\n+            name=\"Foobar Ltd.\", num_employees=3, num_chairs=4, based_in_eu=True,\n             ceo=Employee.objects.create(firstname=\"Frank\", lastname=\"Meyer\", salary=20)\n         )\n         cls.max = Employee.objects.create(firstname='Max', lastname='Mustermann', salary=30)\n@@ -83,6 +83,14 @@ def test_filtering_on_annotate_that_uses_q(self):\n             2,\n         )\n \n+    def test_filtering_on_q_that_is_boolean(self):\n+        self.assertEqual(\n+            Company.objects.filter(\n+                ExpressionWrapper(Q(num_employees__gt=3), output_field=models.BooleanField())\n+            ).count(),\n+            2,\n+        )\n+\n     def test_filter_inter_attribute(self):\n         # We can filter on attribute relationships on same model obj, e.g.\n         # find companies where the number of employees is greater\n@@ -642,6 +650,56 @@ def test_incorrect_joined_field_in_F_expression(self):\n         with self.assertRaisesMessage(FieldError, \"Cannot resolve keyword 'nope' into field.\"):\n             list(Company.objects.filter(ceo__pk=F('point_of_contact__nope')))\n \n+    def test_exists_in_filter(self):\n+        inner = Company.objects.filter(ceo=OuterRef('pk')).values('pk')\n+        qs1 = Employee.objects.filter(Exists(inner))\n+        qs2 = Employee.objects.annotate(found=Exists(inner)).filter(found=True)\n+        self.assertCountEqual(qs1, qs2)\n+        self.assertFalse(Employee.objects.exclude(Exists(inner)).exists())\n+        self.assertCountEqual(qs2, Employee.objects.exclude(~Exists(inner)))\n+\n+    def test_subquery_in_filter(self):\n+        inner = Company.objects.filter(ceo=OuterRef('pk')).values('based_in_eu')\n+        self.assertSequenceEqual(\n+            Employee.objects.filter(Subquery(inner)),\n+            [self.foobar_ltd.ceo],\n+        )\n+\n+    def test_case_in_filter_if_boolean_output_field(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        qs = Employee.objects.filter(\n+            Case(\n+                When(Exists(is_ceo), then=True),\n+                When(Exists(is_poc), then=True),\n+                default=False,\n+                output_field=models.BooleanField(),\n+            ),\n+        )\n+        self.assertSequenceEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n+\n+    def test_boolean_expression_combined(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        self.assertSequenceEqual(\n+            Employee.objects.filter(Exists(is_ceo) | Exists(is_poc)),\n+            [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n+        )\n+        self.assertSequenceEqual(\n+            Employee.objects.filter(Exists(is_ceo) & Exists(is_poc)),\n+            [self.max],\n+        )\n+        self.assertSequenceEqual(\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+            [self.max],\n+        )\n+        self.assertSequenceEqual(\n+            Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n+            [self.example_inc.ceo, self.max],\n+        )\n+\n \n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\ndiff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -1327,7 +1327,10 @@ def test_only_when_arguments(self):\n             Case(When(Q(pk__in=[])), object())\n \n     def test_invalid_when_constructor_args(self):\n-        msg = '__init__() takes either a Q object or lookups as keyword arguments'\n+        msg = (\n+            'When() supports a Q object, a boolean expression, or lookups as '\n+            'a condition.'\n+        )\n         with self.assertRaisesMessage(TypeError, msg):\n             When(condition=object())\n         with self.assertRaisesMessage(TypeError, msg):\n",
  "problem_statement": "Allow expressions in .filter() calls\nDescription\n\t\nExpressions in filter calls will allow 3rd party apps to create query syntax extensions (for example .filter(F('some_field').lower() == 'anssi')) style). In addition, having the ability to use expressions everywhere unifies the ORM experience.\n",
  "hints_text": "This would also probably allow extra(where) to be removed as discussed on ​https://groups.google.com/forum/#!topic/django-developers/FojuU0syO8Y , if expressions with 0 column references are allowed.\nAs noted on the pull request, there are some problems that can't be solved in time for the 1.9 freeze.",
  "created_at": "2017-02-27T09:30:20Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_invalid_when_constructor_args (expressions_case.tests.CaseWhenTests)\", \"test_boolean_expression_combined (expressions.tests.BasicExpressionsTests)\", \"test_case_in_filter_if_boolean_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exists_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_q_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_subquery_in_filter (expressions.tests.BasicExpressionsTests)\"]",
  "PASS_TO_PASS": "[\"test_deconstruct (expressions.tests.FTests)\", \"test_deepcopy (expressions.tests.FTests)\", \"test_equal (expressions.tests.FTests)\", \"test_hash (expressions.tests.FTests)\", \"test_not_equal_Value (expressions.tests.FTests)\", \"test_empty_q_object (expressions_case.tests.CaseWhenTests)\", \"test_only_when_arguments (expressions_case.tests.CaseWhenTests)\", \"test_and (expressions.tests.CombinableTests)\", \"test_negation (expressions.tests.CombinableTests)\", \"test_or (expressions.tests.CombinableTests)\", \"test_reversed_and (expressions.tests.CombinableTests)\", \"test_reversed_or (expressions.tests.CombinableTests)\", \"test_aggregates (expressions.tests.ReprTests)\", \"test_distinct_aggregates (expressions.tests.ReprTests)\", \"test_expressions (expressions.tests.ReprTests)\", \"test_filtered_aggregates (expressions.tests.ReprTests)\", \"test_functions (expressions.tests.ReprTests)\", \"test_deconstruct (expressions.tests.ValueTests)\", \"test_deconstruct_output_field (expressions.tests.ValueTests)\", \"test_equal (expressions.tests.ValueTests)\", \"test_equal_output_field (expressions.tests.ValueTests)\", \"test_hash (expressions.tests.ValueTests)\", \"test_raise_empty_expressionlist (expressions.tests.ValueTests)\", \"test_update_TimeField_using_Value (expressions.tests.ValueTests)\", \"test_update_UUIDField_using_Value (expressions.tests.ValueTests)\", \"test_equal (expressions.tests.SimpleExpressionTests)\", \"test_hash (expressions.tests.SimpleExpressionTests)\", \"test_month_aggregation (expressions.tests.FieldTransformTests)\", \"test_multiple_transforms_in_values (expressions.tests.FieldTransformTests)\", \"test_transform_in_values (expressions.tests.FieldTransformTests)\", \"test_complex_expressions (expressions.tests.ExpressionsNumericTests)\", \"test_fill_with_value_from_same_object (expressions.tests.ExpressionsNumericTests)\", \"test_filter_not_equals_other_field (expressions.tests.ExpressionsNumericTests)\", \"test_increment_value (expressions.tests.ExpressionsNumericTests)\", \"test_F_reuse (expressions.tests.ExpressionsTests)\", \"test_insensitive_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_conditional_aggregation_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_conditional_update_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_filter_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_hash (expressions_case.tests.CaseDocumentationExamples)\", \"test_lookup_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_simple_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_lefthand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_division (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_division (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_righthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_date_comparison (expressions.tests.FTimeDeltaTests)\", \"test_date_minus_duration (expressions.tests.FTimeDeltaTests)\", \"test_date_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_delta_add (expressions.tests.FTimeDeltaTests)\", \"test_delta_subtract (expressions.tests.FTimeDeltaTests)\", \"test_delta_update (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_durationfield_add (expressions.tests.FTimeDeltaTests)\", \"test_exclude (expressions.tests.FTimeDeltaTests)\", \"test_invalid_operator (expressions.tests.FTimeDeltaTests)\", \"test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests)\", \"test_multiple_query_compilation (expressions.tests.FTimeDeltaTests)\", \"test_negative_timedelta_update (expressions.tests.FTimeDeltaTests)\", \"test_query_clone (expressions.tests.FTimeDeltaTests)\", \"test_time_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_count (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_filter (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)\", \"test_arithmetic (expressions.tests.BasicExpressionsTests)\", \"test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests)\", \"test_explicit_output_field (expressions.tests.BasicExpressionsTests)\", \"test_filter_inter_attribute (expressions.tests.BasicExpressionsTests)\", \"test_filter_with_join (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests)\", \"test_in_subquery (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests)\", \"test_new_object_create (expressions.tests.BasicExpressionsTests)\", \"test_new_object_save (expressions.tests.BasicExpressionsTests)\", \"test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_object_update (expressions.tests.BasicExpressionsTests)\", \"test_object_update_fk (expressions.tests.BasicExpressionsTests)\", \"test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests)\", \"test_order_by_exists (expressions.tests.BasicExpressionsTests)\", \"test_order_by_multiline_sql (expressions.tests.BasicExpressionsTests)\", \"test_order_of_operations (expressions.tests.BasicExpressionsTests)\", \"test_outerref (expressions.tests.BasicExpressionsTests)\", \"test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests)\", \"test_outerref_with_operator (expressions.tests.BasicExpressionsTests)\", \"test_parenthesis_priority (expressions.tests.BasicExpressionsTests)\", \"test_pickle_expression (expressions.tests.BasicExpressionsTests)\", \"test_subquery (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests)\", \"test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests)\", \"test_update (expressions.tests.BasicExpressionsTests)\", \"test_update_inherited_field_value (expressions.tests.BasicExpressionsTests)\", \"test_update_with_fk (expressions.tests.BasicExpressionsTests)\", \"test_update_with_none (expressions.tests.BasicExpressionsTests)\", \"test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests)\", \"test_aggregate (expressions_case.tests.CaseExpressionTests)\", \"test_aggregate_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_aggregate_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_exclude (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_values_not_in_order_by (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_aggregation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_aggregation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_aggregation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_annotation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_annotation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_annotation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_empty_when (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_in_clause (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_join_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_join_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_join_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_without_default (expressions_case.tests.CaseExpressionTests)\", \"test_case_reuse (expressions_case.tests.CaseExpressionTests)\", \"test_combined_expression (expressions_case.tests.CaseExpressionTests)\", \"test_combined_q_object (expressions_case.tests.CaseExpressionTests)\", \"test_filter (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_aggregation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_aggregation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_aggregation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_annotation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_annotation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_annotation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_join_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_join_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_join_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_without_default (expressions_case.tests.CaseExpressionTests)\", \"test_in_subquery (expressions_case.tests.CaseExpressionTests)\", \"test_join_promotion (expressions_case.tests.CaseExpressionTests)\", \"test_join_promotion_multiple_annotations (expressions_case.tests.CaseExpressionTests)\", \"test_lookup_different_fields (expressions_case.tests.CaseExpressionTests)\", \"test_lookup_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_m2m_exclude (expressions_case.tests.CaseExpressionTests)\", \"test_m2m_reuse (expressions_case.tests.CaseExpressionTests)\", \"test_order_by_conditional_explicit (expressions_case.tests.CaseExpressionTests)\", \"test_order_by_conditional_implicit (expressions_case.tests.CaseExpressionTests)\", \"test_update (expressions_case.tests.CaseExpressionTests)\", \"test_update_big_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_binary (expressions_case.tests.CaseExpressionTests)\", \"test_update_boolean (expressions_case.tests.CaseExpressionTests)\", \"test_update_date (expressions_case.tests.CaseExpressionTests)\", \"test_update_date_time (expressions_case.tests.CaseExpressionTests)\", \"test_update_decimal (expressions_case.tests.CaseExpressionTests)\", \"test_update_duration (expressions_case.tests.CaseExpressionTests)\", \"test_update_email (expressions_case.tests.CaseExpressionTests)\", \"test_update_file (expressions_case.tests.CaseExpressionTests)\", \"test_update_file_path (expressions_case.tests.CaseExpressionTests)\", \"test_update_fk (expressions_case.tests.CaseExpressionTests)\", \"test_update_float (expressions_case.tests.CaseExpressionTests)\", \"test_update_generic_ip_address (expressions_case.tests.CaseExpressionTests)\", \"test_update_image (expressions_case.tests.CaseExpressionTests)\", \"test_update_null_boolean (expressions_case.tests.CaseExpressionTests)\", \"test_update_null_boolean_old (expressions_case.tests.CaseExpressionTests)\", \"test_update_positive_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_positive_small_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_slug (expressions_case.tests.CaseExpressionTests)\", \"test_update_small_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_string (expressions_case.tests.CaseExpressionTests)\", \"test_update_text (expressions_case.tests.CaseExpressionTests)\", \"test_update_time (expressions_case.tests.CaseExpressionTests)\", \"test_update_url (expressions_case.tests.CaseExpressionTests)\", \"test_update_uuid (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_join_in_condition_raise_field_error (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_join_in_predicate_raise_field_error (expressions_case.tests.CaseExpressionTests)\", \"test_update_without_default (expressions_case.tests.CaseExpressionTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.782032",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}