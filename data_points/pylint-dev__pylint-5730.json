{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-5730",
  "base_commit": "44ad84a4332dfb89e810106fef2616a0bc7e47e4",
  "patch": "diff --git a/doc/exts/pylint_extensions.py b/doc/exts/pylint_extensions.py\n--- a/doc/exts/pylint_extensions.py\n+++ b/doc/exts/pylint_extensions.py\n@@ -14,13 +14,6 @@\n from pylint.lint import PyLinter\n from pylint.utils import get_rst_title\n \n-# Some modules have been renamed and deprecated under their old names.\n-# Skip documenting these modules since:\n-# 1) They are deprecated, why document them moving forward?\n-# 2) We can't load the deprecated module and the newly renamed module at the\n-# same time without getting naming conflicts\n-DEPRECATED_MODULES = [\"check_docs\"]  # ==> docparams\n-\n \n def builder_inited(app):\n     \"\"\"Output full documentation in ReST format for all extension modules\"\"\"\n@@ -34,7 +27,7 @@ def builder_inited(app):\n     doc_files = {}\n     for filename in os.listdir(ext_path):\n         name, ext = os.path.splitext(filename)\n-        if name[0] == \"_\" or name in DEPRECATED_MODULES:\n+        if name[0] == \"_\":\n             continue\n         if ext == \".py\":\n             modules.append(f\"pylint.extensions.{name}\")\ndiff --git a/pylint/extensions/check_docs.py b/pylint/extensions/check_docs.py\ndeleted file mode 100644\n--- a/pylint/extensions/check_docs.py\n+++ /dev/null\n@@ -1,25 +0,0 @@\n-# Copyright (c) 2014-2015 Bruno Daniel <bruno.daniel@blue-yonder.com>\n-# Copyright (c) 2015-2016, 2018, 2020 Claudiu Popa <pcmanticore@gmail.com>\n-# Copyright (c) 2016 Ashley Whetter <ashley@awhetter.co.uk>\n-# Copyright (c) 2020 hippo91 <guillaume.peillex@gmail.com>\n-# Copyright (c) 2021 Pierre Sassoulas <pierre.sassoulas@gmail.com>\n-# Copyright (c) 2021 Marc Mueller <30130371+cdce8p@users.noreply.github.com>\n-\n-# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n-# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n-\n-import warnings\n-from typing import TYPE_CHECKING\n-\n-from pylint.extensions import docparams\n-\n-if TYPE_CHECKING:\n-    from pylint.lint import PyLinter\n-\n-\n-def register(linter: \"PyLinter\") -> None:\n-    warnings.warn(\n-        \"This plugin is deprecated, use pylint.extensions.docparams instead.\",\n-        DeprecationWarning,\n-    )\n-    linter.register_checker(docparams.DocstringParameterChecker(linter))\ndiff --git a/pylint/lint/run.py b/pylint/lint/run.py\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -456,13 +456,7 @@ def cb_verbose_mode(self, *args, **kwargs):\n     def cb_enable_all_extensions(self, option_name: str, value: None) -> None:\n         \"\"\"Callback to load and enable all available extensions\"\"\"\n         for filename in os.listdir(os.path.dirname(extensions.__file__)):\n-            # pylint: disable=fixme\n-            # TODO: Remove the check for deprecated check_docs after the extension has been removed\n-            if (\n-                filename.endswith(\".py\")\n-                and not filename.startswith(\"_\")\n-                and not filename.startswith(\"check_docs\")\n-            ):\n+            if filename.endswith(\".py\") and not filename.startswith(\"_\"):\n                 extension_name = f\"pylint.extensions.{filename[:-3]}\"\n                 if extension_name not in self._plugins:\n                     self._plugins.append(extension_name)\n",
  "test_patch": "diff --git a/tests/extensions/test_check_docs_utils.py b/tests/extensions/test_check_docs_utils.py\n--- a/tests/extensions/test_check_docs_utils.py\n+++ b/tests/extensions/test_check_docs_utils.py\n@@ -12,9 +12,7 @@\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n \n-\"\"\"Unit tests for the pylint checkers in :mod:`pylint.extensions.check_docs`,\n-in particular the parameter documentation checker `DocstringChecker`\n-\"\"\"\n+\"\"\"Unit tests for utils functions in :mod:`pylint.extensions._check_docs_utils`.\"\"\"\n import astroid\n import pytest\n \ndiff --git a/tests/test_self.py b/tests/test_self.py\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1258,13 +1258,7 @@ def test_enable_all_extensions() -> None:\n         # Record all extensions\n         plugins = []\n         for filename in os.listdir(os.path.dirname(extensions.__file__)):\n-            # pylint: disable=fixme\n-            # TODO: Remove the check for deprecated check_docs after the extension has been removed\n-            if (\n-                filename.endswith(\".py\")\n-                and not filename.startswith(\"_\")\n-                and not filename.startswith(\"check_docs\")\n-            ):\n+            if filename.endswith(\".py\") and not filename.startswith(\"_\"):\n                 plugins.append(f\"pylint.extensions.{filename[:-3]}\")\n \n         # Check if they are loaded\n",
  "problem_statement": "[crash] doc params extension: --accept-no-param-doc: conflicting option string(s)\n### Bug description\r\n\r\nThere is a crash when using the doc_params extension.\r\n\r\n### Command used\r\n\r\n```shell\r\npylint --load-plugins=pylint.extensions.docparams a.py\r\n```\r\n\r\n\r\n### Pylint output\r\n\r\n```shell\r\nTraceback (most recent call last):\r\n  File \"/home/pierre/myproject_bin/pylint\", line 8, in <module>\r\n    sys.exit(run_pylint())\r\n  File \"/home/pierre/myproject_lib/python3.8/site-packages/pylint/__init__.py\", line 24, in run_pylint\r\n    PylintRun(sys.argv[1:])\r\n  File \"/home/pierre/myproject_lib/python3.8/site-packages/pylint/lint/run.py\", line 345, in __init__\r\n    linter.load_plugin_modules(plugins)\r\n  File \"/home/pierre/myproject_lib/python3.8/site-packages/pylint/lint/pylinter.py\", line 591, in load_plugin_modules\r\n    module.register(self)\r\n  File \"/home/pierre/myproject_lib/python3.8/site-packages/pylint/extensions/check_docs.py\", line 26, in register\r\n    linter.register_checker(docparams.DocstringParameterChecker(linter))\r\n  File \"/home/pierre/myproject_lib/python3.8/site-packages/pylint/lint/pylinter.py\", line 717, in register_checker\r\n    self.register_options_provider(checker)\r\n  File \"/home/pierre/myproject_lib/python3.8/site-packages/pylint/config/option_manager_mixin.py\", line 99, in register_options_provider\r\n    self.add_option_group(\r\n  File \"/home/pierre/myproject_lib/python3.8/site-packages/pylint/config/option_manager_mixin.py\", line 136, in add_option_group\r\n    self.add_optik_option(provider, group, opt, optdict)\r\n  File \"/home/pierre/myproject_lib/python3.8/site-packages/pylint/config/option_manager_mixin.py\", line 140, in add_optik_option\r\n    option = optikcontainer.add_option(*args, **optdict)\r\n  File \"/usr/lib/python3.8/optparse.py\", line 1008, in add_option\r\n    self._check_conflict(option)\r\n  File \"/usr/lib/python3.8/optparse.py\", line 980, in _check_conflict\r\n    raise OptionConflictError(\r\noptparse.OptionConflictError: option --accept-no-param-doc: conflicting option string(s): --accept-no-param-doc\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nNo crash.\r\n\r\n### Pylint version\r\n\r\n```shell\r\npylint 2.11.2-dev0\r\nastroid 2.8.5\r\nPython 3.8.10 (default, Sep 28 2021, 16:10:42) \r\n[GCC 9.3.0]\r\n```\r\n\n",
  "hints_text": "See:\r\nhttps://github.com/PyCQA/pylint/pull/5315#discussion_r749716016\r\n\r\nYou are likely loading the extension twice because the only effect of loading `check_docs` is to load the `docparams` extension.\n> You are likely loading the extension twice because the only effect of loading `check_docs` is to load the `docparams` extension.\r\n\r\nProbably the problem is `--list-extensions` lists BOTH `check_docs` AND `docparams`, probably `--enable-all-extensions` does the same mistake.\r\n\r\n```\r\n$ pylint --list-extensions  | sort\r\npylint.extensions.bad_builtin\r\npylint.extensions.broad_try_clause\r\npylint.extensions.check_docs\r\npylint.extensions.check_elif\r\npylint.extensions.code_style\r\npylint.extensions.comparetozero\r\npylint.extensions.comparison_placement\r\npylint.extensions.confusing_elif\r\npylint.extensions.consider_ternary_expression\r\npylint.extensions.docparams\r\npylint.extensions.docstyle\r\npylint.extensions.empty_comment\r\npylint.extensions.emptystring\r\npylint.extensions.for_any_all\r\npylint.extensions.mccabe\r\npylint.extensions.overlapping_exceptions\r\npylint.extensions.redefined_variable_type\r\npylint.extensions.set_membership\r\npylint.extensions.typing\r\npylint.extensions.while_used\r\n```\nYes @jolaf this is what caused the problem, I wanted to use all extensions in my configuration.",
  "created_at": "2022-01-27T08:43:30Z",
  "version": "2.13",
  "FAIL_TO_PASS": "[\"tests/test_self.py::TestRunTC::test_enable_all_extensions\"]",
  "PASS_TO_PASS": "[\"tests/extensions/test_check_docs_utils.py::test_space_indentation[abc-0]\", \"tests/extensions/test_check_docs_utils.py::test_space_indentation[-0]\", \"tests/extensions/test_check_docs_utils.py::test_space_indentation[\", \"tests/extensions/test_check_docs_utils.py::test_space_indentation[\\\\n\", \"tests/extensions/test_check_docs_utils.py::test_exception[raise_node0-expected0]\", \"tests/extensions/test_check_docs_utils.py::test_exception[raise_node1-expected1]\", \"tests/extensions/test_check_docs_utils.py::test_exception[raise_node2-expected2]\", \"tests/extensions/test_check_docs_utils.py::test_exception[raise_node3-expected3]\", \"tests/extensions/test_check_docs_utils.py::test_exception[raise_node4-expected4]\", \"tests/extensions/test_check_docs_utils.py::test_exception[raise_node5-expected5]\", \"tests/extensions/test_check_docs_utils.py::test_exception[raise_node6-expected6]\", \"tests/extensions/test_check_docs_utils.py::test_exception[raise_node7-expected7]\", \"tests/extensions/test_check_docs_utils.py::test_exception[raise_node8-expected8]\", \"tests/test_self.py::TestRunTC::test_pkginfo\", \"tests/test_self.py::TestRunTC::test_all\", \"tests/test_self.py::TestRunTC::test_no_ext_file\", \"tests/test_self.py::TestRunTC::test_w0704_ignored\", \"tests/test_self.py::TestRunTC::test_exit_zero\", \"tests/test_self.py::TestRunTC::test_generate_config_option\", \"tests/test_self.py::TestRunTC::test_generate_config_option_order\", \"tests/test_self.py::TestRunTC::test_generate_config_disable_symbolic_names\", \"tests/test_self.py::TestRunTC::test_generate_rcfile_no_obsolete_methods\", \"tests/test_self.py::TestRunTC::test_nonexistent_config_file\", \"tests/test_self.py::TestRunTC::test_help_message_option\", \"tests/test_self.py::TestRunTC::test_error_help_message_option\", \"tests/test_self.py::TestRunTC::test_error_missing_arguments\", \"tests/test_self.py::TestRunTC::test_no_out_encoding\", \"tests/test_self.py::TestRunTC::test_parallel_execution\", \"tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments\", \"tests/test_self.py::TestRunTC::test_abbreviations_are_not_supported\", \"tests/test_self.py::TestRunTC::test_enable_all_works\", \"tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled\", \"tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports\", \"tests/test_self.py::TestRunTC::test_reject_empty_indent_strings\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing\", \"tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes\", \"tests/test_self.py::TestRunTC::test_information_category_disabled_by_default\", \"tests/test_self.py::TestRunTC::test_error_mode_shows_no_score\", \"tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default\", \"tests/test_self.py::TestRunTC::test_confidence_levels\", \"tests/test_self.py::TestRunTC::test_bom_marker\", \"tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options\", \"tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values\", \"tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults\", \"tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8\", \"tests/test_self.py::TestRunTC::test_parseable_file_path\", \"tests/test_self.py::TestRunTC::test_stdin[/mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin_missing_modulename\", \"tests/test_self.py::TestRunTC::test_relative_imports[False]\", \"tests/test_self.py::TestRunTC::test_relative_imports[True]\", \"tests/test_self.py::TestRunTC::test_stdin_syntaxerror\", \"tests/test_self.py::TestRunTC::test_version\", \"tests/test_self.py::TestRunTC::test_fail_under\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-except-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-broad-except-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-broad-except-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-broad-except-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-broad-except-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-except-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-broad-except-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-broad-except-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0116-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-fake1,C,fake2-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0115-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts2-16]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts3-16]\", \"tests/test_self.py::TestRunTC::test_modify_sys_path\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory_with_pythonpath\", \"tests/test_self.py::TestRunTC::test_import_plugin_from_local_directory_if_pythonpath_cwd\", \"tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check\", \"tests/test_self.py::TestRunTC::test_can_list_directories_without_dunder_init\", \"tests/test_self.py::TestRunTC::test_jobs_score\", \"tests/test_self.py::TestRunTC::test_duplicate_code_raw_strings\", \"tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath\", \"tests/test_self.py::TestRunTC::test_output_file_valid_path\", \"tests/test_self.py::TestRunTC::test_output_file_invalid_path_exits_with_code_32\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args3-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args4-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args5-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args6-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args7-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args8-22]\", \"tests/test_self.py::TestRunTC::test_one_module_fatal_error\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args3-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args4-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args5-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args6-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args7-1]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args8-1]\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[text-tests/regrtest_data/unused_variable.py:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[parseable-tests/regrtest_data/unused_variable.py:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[msvs-tests/regrtest_data/unused_variable.py(4):\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[colorized-tests/regrtest_data/unused_variable.py:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json-\\\"message\\\":\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_custom_reporter\", \"tests/test_self.py::TestRunTC::test_output_file_specified_in_rcfile\", \"tests/test_self.py::TestRunTC::test_load_text_repoter_if_not_provided\", \"tests/test_self.py::TestRunTC::test_regex_paths_csv_validator\"]",
  "environment_setup_commit": "3b2fbaec045697d53bdd4435e59dbfc2b286df4b",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.910936",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}