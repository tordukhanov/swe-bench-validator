{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-10551",
  "base_commit": "571b55328d401a6e1d50e37407df56586065a7be",
  "patch": "diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -141,6 +141,9 @@ def visit_Attribute(self, node: ast.Attribute) -> str:\n         return \"%s.%s\" % (self.visit(node.value), node.attr)\n \n     def visit_BinOp(self, node: ast.BinOp) -> str:\n+        # Special case ``**`` to not have surrounding spaces.\n+        if isinstance(node.op, ast.Pow):\n+            return \"\".join(map(self.visit, (node.left, node.op, node.right)))\n         return \" \".join(self.visit(e) for e in [node.left, node.op, node.right])\n \n     def visit_BoolOp(self, node: ast.BoolOp) -> str:\n@@ -202,7 +205,11 @@ def is_simple_tuple(value: ast.AST) -> bool:\n             return \"%s[%s]\" % (self.visit(node.value), self.visit(node.slice))\n \n     def visit_UnaryOp(self, node: ast.UnaryOp) -> str:\n-        return \"%s %s\" % (self.visit(node.op), self.visit(node.operand))\n+        # UnaryOp is one of {UAdd, USub, Invert, Not}, which refer to ``+x``,\n+        # ``-x``, ``~x``, and ``not x``. Only Not needs a space.\n+        if isinstance(node.op, ast.Not):\n+            return \"%s %s\" % (self.visit(node.op), self.visit(node.operand))\n+        return \"%s%s\" % (self.visit(node.op), self.visit(node.operand))\n \n     def visit_Tuple(self, node: ast.Tuple) -> str:\n         if len(node.elts) == 0:\n",
  "test_patch": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -452,6 +452,33 @@ def test_pyfunction_signature_full(app):\n                                                         [desc_sig_name, pending_xref, \"str\"])])])\n \n \n+def test_pyfunction_with_unary_operators(app):\n+    text = \".. py:function:: menu(egg=+1, bacon=-1, sausage=~1, spam=not spam)\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree[1][0][1],\n+                [desc_parameterlist, ([desc_parameter, ([desc_sig_name, \"egg\"],\n+                                                        [desc_sig_operator, \"=\"],\n+                                                        [nodes.inline, \"+1\"])],\n+                                      [desc_parameter, ([desc_sig_name, \"bacon\"],\n+                                                        [desc_sig_operator, \"=\"],\n+                                                        [nodes.inline, \"-1\"])],\n+                                      [desc_parameter, ([desc_sig_name, \"sausage\"],\n+                                                        [desc_sig_operator, \"=\"],\n+                                                        [nodes.inline, \"~1\"])],\n+                                      [desc_parameter, ([desc_sig_name, \"spam\"],\n+                                                        [desc_sig_operator, \"=\"],\n+                                                        [nodes.inline, \"not spam\"])])])\n+\n+\n+def test_pyfunction_with_binary_operators(app):\n+    text = \".. py:function:: menu(spam=2**64)\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree[1][0][1],\n+                [desc_parameterlist, ([desc_parameter, ([desc_sig_name, \"spam\"],\n+                                                        [desc_sig_operator, \"=\"],\n+                                                        [nodes.inline, \"2**64\"])])])\n+\n+\n @pytest.mark.skipif(sys.version_info < (3, 8), reason='python 3.8+ is required.')\n def test_pyfunction_signature_full_py38(app):\n     # case: separator at head\ndiff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -25,7 +25,7 @@\n     (\"...\", \"...\"),                             # Ellipsis\n     (\"a // b\", \"a // b\"),                       # FloorDiv\n     (\"Tuple[int, int]\", \"Tuple[int, int]\"),     # Index, Subscript\n-    (\"~ 1\", \"~ 1\"),                             # Invert\n+    (\"~1\", \"~1\"),                               # Invert\n     (\"lambda x, y: x + y\",\n      \"lambda x, y: ...\"),                       # Lambda\n     (\"[1, 2, 3]\", \"[1, 2, 3]\"),                 # List\n@@ -37,14 +37,14 @@\n     (\"1234\", \"1234\"),                           # Num\n     (\"not a\", \"not a\"),                         # Not\n     (\"a or b\", \"a or b\"),                       # Or\n-    (\"a ** b\", \"a ** b\"),                       # Pow\n+    (\"a**b\", \"a**b\"),                           # Pow\n     (\"a >> b\", \"a >> b\"),                       # RShift\n     (\"{1, 2, 3}\", \"{1, 2, 3}\"),                 # Set\n     (\"a - b\", \"a - b\"),                         # Sub\n     (\"'str'\", \"'str'\"),                         # Str\n-    (\"+ a\", \"+ a\"),                             # UAdd\n-    (\"- 1\", \"- 1\"),                             # UnaryOp\n-    (\"- a\", \"- a\"),                             # USub\n+    (\"+a\", \"+a\"),                               # UAdd\n+    (\"-1\", \"-1\"),                               # UnaryOp\n+    (\"-a\", \"-a\"),                               # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                 # Tuple\n     (\"()\", \"()\"),                               # Tuple (empty)\n     (\"(1,)\", \"(1,)\"),                           # Tuple (single item)\n",
  "problem_statement": "Spurious space in default parameter values that are negative numbers in HTML output.\n### Describe the bug\r\n\r\nFor several projects, I've noticed a problem in the HTML output of functions that have a parameter with a default value that is a negative number.  In the rendered HTML, there is a spurious space between the minus sign and the first digit.  A typical example is `axis=-1` being rendered as `axis=- 1`.  This issue was originally raised with [SciPy](https://github.com/scipy/scipy/issues/16385).\r\n\r\nHere are links to examples in several projects:\r\n\r\nSciPy:\r\n\r\n* https://scipy.github.io/devdocs/reference/generated/scipy.optimize.direct.html:\r\n  see `f_min`.\r\n* https://scipy.github.io/devdocs/reference/generated/scipy.optimize.LinearConstraint.html:\r\n  see `lb`.\r\n  \r\nNumPy:\r\n\r\n* https://numpy.org/doc/stable/reference/generated/numpy.unwrap.html\r\n\r\nPandas:\r\n\r\n* https://pandas.pydata.org/docs/reference/api/pandas.factorize.html\r\n\r\nMatplotlib:\r\n\r\n* https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.waitforbuttonpress.html\r\n\r\nI wasn't able to find an existing issue for this.\r\n\r\nI don't know which versions of Sphinx were used in all those projects, so I don't know if the problem still exists in the latest version of Sphinx.  Also, it looks like those projects all use the [PyData Sphinx theme](https://pydata-sphinx-theme.readthedocs.io/en/stable/index.html), so it is possible that the problem is the theme and not Sphinx itself.\r\n\r\n\r\n### How to Reproduce\r\n\r\nSee the links.\r\n\r\n### Expected behavior\r\n\r\n_No response_\r\n\r\n### Your project\r\n\r\nSee the links\r\n\r\n### Screenshots\r\n\r\n_No response_\r\n\r\n### OS\r\n\r\nSee the above comments.\r\n\r\n### Python version\r\n\r\nProbably varied; see the links.\r\n\r\n### Sphinx version\r\n\r\nMaybe several; see the links.\r\n\r\n### Sphinx extensions\r\n\r\n_No response_\r\n\r\n### Extra tools\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_\n",
  "hints_text": "Please provide a minimal reproducer project, and additionally test with 'basic' or 'alabaster' to ensure it is not a bug in the pydata theme.\n\nA\n@AA-Turner, sorry the bug report is not more thorough.  I probably won't be able to dig into this any further.  Perhaps some of the PyData theme maintainers could take a look and check if this issue is more appropriate for that project: ping @choldgraf, @12rambau\nOne more data point: the issue also occurs in the Jax documentation, e.g.\r\n\r\n* https://jax.readthedocs.io/en/latest/_autosummary/jax.numpy.cross.html\r\n* https://jax.readthedocs.io/en/latest/_autosummary/jax.random.categorical.html\r\n\r\nAccording to their ['conf.py'](https://github.com/google/jax/blob/8ab50371864cfdf8f6c9f0bda5fba61b6bc278e6/docs/conf.py#L154), the theme used by Jax is `'sphinx_book_theme'`.\nSounds like a pydata theme issue indeed! Please open an issue there so others can discuss\n\nhttps://github.com/pydata/pydata-sphinx-theme\n\nAlso the book theme inherits from the pydata theme so it'd make sense that they have the same issue\nI have opened a corresponding issue in the pydata theme repo, so I'll close this issue. We can reopen it if the pydata theme devs figure out that the problem is in Sphinx and not the theme.\nActually I just looked into it a little bit, and I think it might be a bug in autodoc and the pygments styling/structure. Here's the HTML of that section in the pydata theme:\r\n\r\n```html\r\n<span class=\"default_value\"><span class=\"pre\">-</span> <span class=\"pre\">inf</span></span>\r\n```\r\n\r\nImportantly, note there is _a space between the two span elements_. I think that this is generated HTML by autodoc and not theme-specific after all, right?\n@choldgraf do you have the reST source that the snippet was generated from?\r\n\r\nA\nWell as one example from SciPy:\r\n\r\n- The rendered docstring is here: https://scipy.github.io/devdocs/reference/generated/scipy.optimize.direct.html\r\n- The python source is here: https://github.com/scipy/scipy/blob/main/scipy/optimize/_direct_py.py#L41-L282\r\n- The rST source is: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-tnc.rst (this isn't quite for the same function but I think this is the general pattern they're following)\r\n- Here's a big rST index that they use to create links as well: https://raw.githubusercontent.com/scipy/scipy/main/doc/API.rst.txt\nMinimal reproducer:\r\n\r\n```python\r\nimport shutil\r\nfrom pathlib import Path\r\n\r\nfrom sphinx.cmd.make_mode import run_make_mode\r\n\r\ndef write(filename, text): Path(filename).write_text(text, encoding=\"utf-8\")\r\n\r\nwrite(\"conf.py\", '''\\\r\nimport os, sys\r\nsys.path.insert(0, os.path.abspath(\"..\"))\r\nextensions = [\"sphinx.ext.autodoc\"]\r\n''')\r\n\r\nwrite(\"extra_white.py\", '''\\\r\ndef func(axis=-1):\r\n    ...\r\n''')\r\n\r\nwrite(\"index.rst\", '''\\\r\n.. autofunction:: extra_white.func\r\n''')\r\n\r\nshutil.rmtree(\"_build\", ignore_errors=True)\r\nrun_make_mode([\"html\", \".\", \"_build\", \"-T\", \"-W\"])\r\n```\r\n\r\nThe spurious extra whitespace is present as Chris notes as a literal space character between the two span elements.\r\n\r\nA",
  "created_at": "2022-06-14T09:27:19Z",
  "version": "5.1",
  "FAIL_TO_PASS": "[\"tests/test_domain_py.py::test_pyfunction_with_unary_operators\", \"tests/test_domain_py.py::test_pyfunction_with_binary_operators\", \"tests/test_pycode_ast.py::test_unparse[~1-~1]\", \"tests/test_pycode_ast.py::test_unparse[a**b-a**b]\", \"tests/test_pycode_ast.py::test_unparse[+a-+a]\", \"tests/test_pycode_ast.py::test_unparse[-1--1]\", \"tests/test_pycode_ast.py::test_unparse[-a--a]\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_py.py::test_function_signatures\", \"tests/test_domain_py.py::test_domain_py_xrefs\", \"tests/test_domain_py.py::test_domain_py_xrefs_abbreviations\", \"tests/test_domain_py.py::test_domain_py_objects\", \"tests/test_domain_py.py::test_resolve_xref_for_properties\", \"tests/test_domain_py.py::test_domain_py_find_obj\", \"tests/test_domain_py.py::test_domain_py_canonical\", \"tests/test_domain_py.py::test_get_full_qualified_name\", \"tests/test_domain_py.py::test_parse_annotation\", \"tests/test_domain_py.py::test_parse_annotation_suppress\", \"tests/test_domain_py.py::test_parse_annotation_Literal\", \"tests/test_domain_py.py::test_pyfunction_signature\", \"tests/test_domain_py.py::test_pyfunction_signature_full\", \"tests/test_domain_py.py::test_pyfunction_signature_full_py38\", \"tests/test_domain_py.py::test_pyfunction_with_number_literals\", \"tests/test_domain_py.py::test_pyfunction_with_union_type_operator\", \"tests/test_domain_py.py::test_optional_pyfunction_signature\", \"tests/test_domain_py.py::test_pyexception_signature\", \"tests/test_domain_py.py::test_pydata_signature\", \"tests/test_domain_py.py::test_pydata_signature_old\", \"tests/test_domain_py.py::test_pydata_with_union_type_operator\", \"tests/test_domain_py.py::test_pyobject_prefix\", \"tests/test_domain_py.py::test_pydata\", \"tests/test_domain_py.py::test_pyfunction\", \"tests/test_domain_py.py::test_pyclass_options\", \"tests/test_domain_py.py::test_pymethod_options\", \"tests/test_domain_py.py::test_pyclassmethod\", \"tests/test_domain_py.py::test_pystaticmethod\", \"tests/test_domain_py.py::test_pyattribute\", \"tests/test_domain_py.py::test_pyproperty\", \"tests/test_domain_py.py::test_pydecorator_signature\", \"tests/test_domain_py.py::test_pydecoratormethod_signature\", \"tests/test_domain_py.py::test_canonical\", \"tests/test_domain_py.py::test_canonical_definition_overrides\", \"tests/test_domain_py.py::test_canonical_definition_skip\", \"tests/test_domain_py.py::test_canonical_duplicated\", \"tests/test_domain_py.py::test_info_field_list\", \"tests/test_domain_py.py::test_info_field_list_piped_type\", \"tests/test_domain_py.py::test_info_field_list_Literal\", \"tests/test_domain_py.py::test_info_field_list_var\", \"tests/test_domain_py.py::test_type_field\", \"tests/test_domain_py.py::test_module_index\", \"tests/test_domain_py.py::test_module_index_submodule\", \"tests/test_domain_py.py::test_module_index_not_collapsed\", \"tests/test_domain_py.py::test_modindex_common_prefix\", \"tests/test_domain_py.py::test_noindexentry\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names_disabled\", \"tests/test_domain_py.py::test_warn_missing_reference\", \"tests/test_pycode_ast.py::test_unparse[a\", \"tests/test_pycode_ast.py::test_unparse[os.path-os.path]\", \"tests/test_pycode_ast.py::test_unparse[1\", \"tests/test_pycode_ast.py::test_unparse[b'bytes'-b'bytes']\", \"tests/test_pycode_ast.py::test_unparse[object()-object()]\", \"tests/test_pycode_ast.py::test_unparse[1234-1234_0]\", \"tests/test_pycode_ast.py::test_unparse[{'key1':\", \"tests/test_pycode_ast.py::test_unparse[...-...]\", \"tests/test_pycode_ast.py::test_unparse[Tuple[int,\", \"tests/test_pycode_ast.py::test_unparse[lambda\", \"tests/test_pycode_ast.py::test_unparse[[1,\", \"tests/test_pycode_ast.py::test_unparse[sys-sys]\", \"tests/test_pycode_ast.py::test_unparse[1234-1234_1]\", \"tests/test_pycode_ast.py::test_unparse[not\", \"tests/test_pycode_ast.py::test_unparse[{1,\", \"tests/test_pycode_ast.py::test_unparse['str'-'str']\", \"tests/test_pycode_ast.py::test_unparse[(1,\", \"tests/test_pycode_ast.py::test_unparse[()-()]\", \"tests/test_pycode_ast.py::test_unparse[(1,)-(1,)]\", \"tests/test_pycode_ast.py::test_unparse_None\", \"tests/test_pycode_ast.py::test_unparse_py38[lambda\", \"tests/test_pycode_ast.py::test_unparse_py38[0x1234-0x1234]\", \"tests/test_pycode_ast.py::test_unparse_py38[1_000_000-1_000_000]\"]",
  "environment_setup_commit": "571b55328d401a6e1d50e37407df56586065a7be",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.034852",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}