{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-4604",
  "base_commit": "1e55ae64624d28c5fe8b63ad7979880ee2e6ef3f",
  "patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -1826,6 +1826,10 @@ def _store_type_annotation_node(self, type_annotation):\n             self._type_annotation_names.append(type_annotation.name)\n             return\n \n+        if isinstance(type_annotation, astroid.Attribute):\n+            self._store_type_annotation_node(type_annotation.expr)\n+            return\n+\n         if not isinstance(type_annotation, astroid.Subscript):\n             return\n \ndiff --git a/pylint/constants.py b/pylint/constants.py\n--- a/pylint/constants.py\n+++ b/pylint/constants.py\n@@ -1,6 +1,7 @@\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/master/LICENSE\n \n+import platform\n import sys\n \n import astroid\n@@ -11,6 +12,7 @@\n PY39_PLUS = sys.version_info[:2] >= (3, 9)\n PY310_PLUS = sys.version_info[:2] >= (3, 10)\n \n+IS_PYPY = platform.python_implementation() == \"PyPy\"\n \n PY_EXTS = (\".py\", \".pyc\", \".pyo\", \".pyw\", \".so\", \".dll\")\n \n",
  "test_patch": "diff --git a/tests/checkers/unittest_variables.py b/tests/checkers/unittest_variables.py\n--- a/tests/checkers/unittest_variables.py\n+++ b/tests/checkers/unittest_variables.py\n@@ -21,11 +21,13 @@\n import os\n import re\n import sys\n+import unittest\n from pathlib import Path\n \n import astroid\n \n from pylint.checkers import variables\n+from pylint.constants import IS_PYPY\n from pylint.interfaces import UNDEFINED\n from pylint.testutils import CheckerTestCase, Message, linter, set_config\n \n@@ -191,6 +193,24 @@ def my_method(self) -> MyType:\n         with self.assertNoMessages():\n             self.walk(module)\n \n+    @unittest.skipIf(IS_PYPY, \"PyPy does not parse type comments\")\n+    def test_attribute_in_type_comment(self):\n+        \"\"\"Ensure attribute lookups in type comments are accounted for.\n+\n+        https://github.com/PyCQA/pylint/issues/4603\n+        \"\"\"\n+        module = astroid.parse(\n+            \"\"\"\n+        import foo\n+        from foo import Bar, Boo\n+        a = ... # type: foo.Bar\n+        b = ... # type: foo.Bar[Boo]\n+        c = ... # type: Bar.Boo\n+        \"\"\"\n+        )\n+        with self.assertNoMessages():\n+            self.walk(module)\n+\n \n class TestVariablesCheckerWithTearDown(CheckerTestCase):\n \n",
  "problem_statement": "unused-import false positive for a module used in a type comment\n### Steps to reproduce\r\n\r\n```python\r\n\"\"\"Docstring.\"\"\"\r\n\r\nimport abc\r\nfrom abc import ABC\r\n\r\nX = ...  # type: abc.ABC\r\nY = ...  # type: ABC\r\n```\r\n\r\n### Current behavior\r\n\r\n```\r\n************* Module a\r\n/tmp/a.py:3:0: W0611: Unused import abc (unused-import)\r\n\r\n-----------------------------------\r\nYour code has been rated at 7.50/10\r\n```\r\n\r\n### Expected behavior\r\n\r\n`unused-import` should not be emitted.\r\n\r\n### pylint --version output\r\n\r\nResult of `pylint --version` output:\r\n\r\n```\r\npylint 2.8.3\r\nastroid 2.5.6\r\nPython 3.9.2 (default, Feb 28 2021, 17:03:44) \r\n[GCC 10.2.1 20210110]\r\n```\r\n\r\nThis is a follow up to #3112.\n",
  "hints_text": "",
  "created_at": "2021-06-22T10:44:14Z",
  "version": "2.9",
  "FAIL_TO_PASS": "[\"tests/checkers/unittest_variables.py::TestVariablesChecker::test_bitbucket_issue_78\", \"tests/checkers/unittest_variables.py::TestVariablesChecker::test_no_name_in_module_skipped\", \"tests/checkers/unittest_variables.py::TestVariablesChecker::test_all_elements_without_parent\", \"tests/checkers/unittest_variables.py::TestVariablesChecker::test_redefined_builtin_ignored\", \"tests/checkers/unittest_variables.py::TestVariablesChecker::test_redefined_builtin_custom_modules\", \"tests/checkers/unittest_variables.py::TestVariablesChecker::test_redefined_builtin_modname_not_ignored\", \"tests/checkers/unittest_variables.py::TestVariablesChecker::test_redefined_builtin_in_function\", \"tests/checkers/unittest_variables.py::TestVariablesChecker::test_unassigned_global\", \"tests/checkers/unittest_variables.py::TestVariablesChecker::test_listcomp_in_decorator\", \"tests/checkers/unittest_variables.py::TestVariablesChecker::test_listcomp_in_ancestors\", \"tests/checkers/unittest_variables.py::TestVariablesChecker::test_return_type_annotation\", \"tests/checkers/unittest_variables.py::TestVariablesChecker::test_attribute_in_type_comment\", \"tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_custom_callback_string\", \"tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_redefined_builtin_modname_not_ignored\", \"tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_redefined_builtin_in_function\", \"tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_import_as_underscore\", \"tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_lambda_in_classdef\", \"tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_nested_lambda\", \"tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_ignored_argument_names_no_message\", \"tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_ignored_argument_names_starred_args\", \"tests/checkers/unittest_variables.py::TestMissingSubmodule::test_package_all\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "c04f92ef68e5ea779a60bfddb91dc677c5470fd0",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.908452",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}