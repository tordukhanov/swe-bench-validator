{
  "repo": "django/django",
  "instance_id": "django__django-11749",
  "base_commit": "350123f38c2b6217c38d70bfbd924a9ba3df1289",
  "patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -130,11 +130,19 @@ def get_actions(parser):\n                 yield opt\n \n     parser_actions = list(get_actions(parser))\n+    mutually_exclusive_required_options = {\n+        opt\n+        for group in parser._mutually_exclusive_groups\n+        for opt in group._group_actions if group.required\n+    }\n     # Any required arguments which are passed in via **options must be passed\n     # to parse_args().\n     parse_args += [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n-        for opt in parser_actions if opt.required and opt.dest in options\n+        for opt in parser_actions if (\n+            opt.dest in options and\n+            (opt.required or opt in mutually_exclusive_required_options)\n+        )\n     ]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n",
  "test_patch": "diff --git a/tests/user_commands/management/commands/mutually_exclusive_required.py b/tests/user_commands/management/commands/mutually_exclusive_required.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/user_commands/management/commands/mutually_exclusive_required.py\n@@ -0,0 +1,12 @@\n+from django.core.management.base import BaseCommand\n+\n+\n+class Command(BaseCommand):\n+\n+    def add_arguments(self, parser):\n+        group = parser.add_mutually_exclusive_group(required=True)\n+        group.add_argument('--foo-id', type=int, nargs='?', default=None)\n+        group.add_argument('--foo-name', type=str, nargs='?', default=None)\n+\n+    def handle(self, *args, **options):\n+        self.stdout.write(','.join(options))\ndiff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -214,6 +214,16 @@ def test_command_add_arguments_after_common_arguments(self):\n         management.call_command('common_args', stdout=out)\n         self.assertIn('Detected that --version already exists', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options(self):\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser(self):\n         out = StringIO()\n         management.call_command('subparser', 'foo', 12, stdout=out)\n",
  "problem_statement": "call_command fails when argument of required mutually exclusive group is passed in kwargs.\nDescription\n\t\nThis error \ndjango.core.management.base.CommandError: Error: one of the arguments --shop-id --shop is required\nis raised when I run \ncall_command('my_command', shop_id=1)\nthe argument 'shop_id' is part of a required mutually exclusive group:\nshop = parser.add_mutually_exclusive_group(required=True)\nshop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')\nshop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')\nHowever, everything is fine when I call this command in this way:\ncall_command('my_command, '--shop-id=1')\nIn django sources I found that only those keyword arguments of call_command are passed to the parser that are defined as required:\n# Any required arguments which are passed in via '**options' must be passed\n# to parse_args().\nparse_args += [\n\t'{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n\tfor opt in parser._actions if opt.required and opt.dest in options\n]\nbut in this special case both of them individually are not required, they are actually part of a group that is required. And the code of call_command does nothing with groups defined in the parser.\n",
  "hints_text": "Thanks for this report. I attached a simple test. Reproduced at ed2d411aa84efc76baba3adf0d0f99df0e44ba57.",
  "created_at": "2019-09-05T21:47:44Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_mutually_exclusive_group_required_options (user_commands.tests.CommandTests)\"]",
  "PASS_TO_PASS": "[\"test_get_random_secret_key (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_false (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_true (user_commands.tests.UtilsTests)\", \"test_no_existent_external_program (user_commands.tests.UtilsTests)\", \"test_normalize_path_patterns_truncates_wildcard_base (user_commands.tests.UtilsTests)\", \"test_call_command_no_checks (user_commands.tests.CommandTests)\", \"test_call_command_option_parsing (user_commands.tests.CommandTests)\", \"test_call_command_option_parsing_non_string_arg (user_commands.tests.CommandTests)\", \"test_call_command_unrecognized_option (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_mixed_options (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_options (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_no_app_labels_and_parameters_should_raise_a_command_error (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_only_empty_parameter_should_ends_gracefully (user_commands.tests.CommandTests)\", \"test_calling_command_with_app_labels_and_parameters_should_be_ok (user_commands.tests.CommandTests)\", \"test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok (user_commands.tests.CommandTests)\", \"test_check_migrations (user_commands.tests.CommandTests)\", \"test_command (user_commands.tests.CommandTests)\", \"test_command_add_arguments_after_common_arguments (user_commands.tests.CommandTests)\", \"test_command_style (user_commands.tests.CommandTests)\", \"BaseCommand.create_parser() passes kwargs to CommandParser.\", \"test_discover_commands_in_eggs (user_commands.tests.CommandTests)\", \"An unknown command raises CommandError\", \"test_find_command_without_PATH (user_commands.tests.CommandTests)\", \"test_language_preserved (user_commands.tests.CommandTests)\", \"test_no_translations_deactivate_translations (user_commands.tests.CommandTests)\", \"test_output_transaction (user_commands.tests.CommandTests)\", \"test_subparser (user_commands.tests.CommandTests)\", \"test_subparser_dest_args (user_commands.tests.CommandTests)\", \"test_subparser_dest_required_args (user_commands.tests.CommandTests)\", \"test_subparser_invalid_option (user_commands.tests.CommandTests)\", \"Exception raised in a command should raise CommandError with\", \"test_disallowed_abbreviated_options (user_commands.tests.CommandRunTests)\", \"test_script_prefix_set_in_commands (user_commands.tests.CommandRunTests)\", \"test_skip_checks (user_commands.tests.CommandRunTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.583143",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}