{
  "repo": "mwaskom/seaborn",
  "instance_id": "mwaskom__seaborn-3217",
  "base_commit": "623b0b723c671e99f04e8ababf19adc563f30168",
  "patch": "diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -1377,10 +1377,9 @@ def _unscale_coords(\n     ) -> DataFrame:\n         # TODO do we still have numbers in the variable name at this point?\n         coord_cols = [c for c in df if re.match(r\"^[xy]\\D*$\", str(c))]\n-        drop_cols = [*coord_cols, \"width\"] if \"width\" in df else coord_cols\n         out_df = (\n             df\n-            .drop(drop_cols, axis=1)\n+            .drop(coord_cols, axis=1)\n             .reindex(df.columns, axis=1)  # So unscaled columns retain their place\n             .copy(deep=False)\n         )\n@@ -1396,12 +1395,6 @@ def _unscale_coords(\n                 inverted = transform(values)\n                 out_df.loc[values.index, str(var)] = inverted\n \n-                if var == orient and \"width\" in view_df:\n-                    width = view_df[\"width\"]\n-                    out_df.loc[values.index, \"width\"] = (\n-                        transform(values + width / 2) - transform(values - width / 2)\n-                    )\n-\n         return out_df\n \n     def _generate_pairings(\ndiff --git a/seaborn/_marks/bar.py b/seaborn/_marks/bar.py\n--- a/seaborn/_marks/bar.py\n+++ b/seaborn/_marks/bar.py\n@@ -29,17 +29,23 @@ class BarBase(Mark):\n \n     def _make_patches(self, data, scales, orient):\n \n+        transform = scales[orient]._matplotlib_scale.get_transform()\n+        forward = transform.transform\n+        reverse = transform.inverted().transform\n+\n+        other = {\"x\": \"y\", \"y\": \"x\"}[orient]\n+\n+        pos = reverse(forward(data[orient]) - data[\"width\"] / 2)\n+        width = reverse(forward(data[orient]) + data[\"width\"] / 2) - pos\n+\n+        val = (data[other] - data[\"baseline\"]).to_numpy()\n+        base = data[\"baseline\"].to_numpy()\n+\n         kws = self._resolve_properties(data, scales)\n         if orient == \"x\":\n-            kws[\"x\"] = (data[\"x\"] - data[\"width\"] / 2).to_numpy()\n-            kws[\"y\"] = data[\"baseline\"].to_numpy()\n-            kws[\"w\"] = data[\"width\"].to_numpy()\n-            kws[\"h\"] = (data[\"y\"] - data[\"baseline\"]).to_numpy()\n+            kws.update(x=pos, y=base, w=width, h=val)\n         else:\n-            kws[\"x\"] = data[\"baseline\"].to_numpy()\n-            kws[\"y\"] = (data[\"y\"] - data[\"width\"] / 2).to_numpy()\n-            kws[\"w\"] = (data[\"x\"] - data[\"baseline\"]).to_numpy()\n-            kws[\"h\"] = data[\"width\"].to_numpy()\n+            kws.update(x=base, y=pos, w=val, h=width)\n \n         kws.pop(\"width\", None)\n         kws.pop(\"baseline\", None)\n",
  "test_patch": "diff --git a/tests/_marks/test_bar.py b/tests/_marks/test_bar.py\n--- a/tests/_marks/test_bar.py\n+++ b/tests/_marks/test_bar.py\n@@ -200,3 +200,13 @@ def test_unfilled(self, x, y):\n         colors = p._theme[\"axes.prop_cycle\"].by_key()[\"color\"]\n         assert_array_equal(fcs, to_rgba_array([colors[0]] * len(x), 0))\n         assert_array_equal(ecs, to_rgba_array([colors[4]] * len(x), 1))\n+\n+    def test_log_scale(self):\n+\n+        x = y = [1, 10, 100, 1000]\n+        p = Plot(x, y).add(Bars()).scale(x=\"log\").plot()\n+        ax = p._figure.axes[0]\n+\n+        paths = ax.collections[0].get_paths()\n+        for a, b in zip(paths, paths[1:]):\n+            assert a.vertices[1, 0] == pytest.approx(b.vertices[0, 0])\n",
  "problem_statement": "Width computation after histogram slightly wrong with log scale\nNote the slight overlap here:\r\n\r\n```python\r\n(\r\n    so.Plot(tips, \"total_bill\")\r\n    .add(so.Bars(alpha=.3, edgewidth=0), so.Hist(bins=4))\r\n    .scale(x=\"log\")\r\n)\r\n```\r\n![image](https://user-images.githubusercontent.com/315810/178975852-d8fd830e-ae69-487d-be22-36531fca3f8f.png)\r\n\r\nIt becomes nearly imperceptible with more bins:\r\n\r\n```\r\n(\r\n    so.Plot(tips, \"total_bill\")\r\n    .add(so.Bars(alpha=.3, edgewidth=0), so.Hist(bins=8))\r\n    .scale(x=\"log\")\r\n)\r\n```\r\n![image](https://user-images.githubusercontent.com/315810/178976113-7026b3ae-0b87-48df-adc0-00e90d5aea94.png)\r\n\r\nThis is not about `Bars`; `Bar` has it too:\r\n\r\n```python\r\n(\r\n    so.Plot(tips, \"total_bill\")\r\n    .add(so.Bar(alpha=.3, edgewidth=0, width=1), so.Hist(bins=4))\r\n    .scale(x=\"log\")\r\n)\r\n```\r\n![image](https://user-images.githubusercontent.com/315810/178975910-484df65f-4ce6-482e-9992-5d02faf6b9ea.png)\r\n\n",
  "hints_text": "",
  "created_at": "2023-01-10T12:37:28Z",
  "version": "0.13",
  "FAIL_TO_PASS": "[\"tests/_marks/test_bar.py::TestBars::test_log_scale\"]",
  "PASS_TO_PASS": "[\"tests/_marks/test_bar.py::TestBar::test_categorical_positions_vertical\", \"tests/_marks/test_bar.py::TestBar::test_categorical_positions_horizontal\", \"tests/_marks/test_bar.py::TestBar::test_numeric_positions_vertical\", \"tests/_marks/test_bar.py::TestBar::test_numeric_positions_horizontal\", \"tests/_marks/test_bar.py::TestBar::test_set_properties\", \"tests/_marks/test_bar.py::TestBar::test_mapped_properties\", \"tests/_marks/test_bar.py::TestBar::test_zero_height_skipped\", \"tests/_marks/test_bar.py::TestBar::test_artist_kws_clip\", \"tests/_marks/test_bar.py::TestBars::test_positions\", \"tests/_marks/test_bar.py::TestBars::test_positions_horizontal\", \"tests/_marks/test_bar.py::TestBars::test_width\", \"tests/_marks/test_bar.py::TestBars::test_mapped_color_direct_alpha\", \"tests/_marks/test_bar.py::TestBars::test_mapped_edgewidth\", \"tests/_marks/test_bar.py::TestBars::test_auto_edgewidth\", \"tests/_marks/test_bar.py::TestBars::test_unfilled\"]",
  "environment_setup_commit": "23860365816440b050e9211e1c395a966de3c403",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.838660",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}