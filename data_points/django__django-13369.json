{
  "repo": "django/django",
  "instance_id": "django__django-13369",
  "base_commit": "0be51d2226fce030ac9ca840535a524f41e9832c",
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -421,6 +421,7 @@ class Expression(BaseExpression, Combinable):\n \n _connector_combinators = {\n     connector: [\n+        (fields.IntegerField, fields.IntegerField, fields.IntegerField),\n         (fields.IntegerField, fields.DecimalField, fields.DecimalField),\n         (fields.DecimalField, fields.IntegerField, fields.DecimalField),\n         (fields.IntegerField, fields.FloatField, fields.FloatField),\n",
  "test_patch": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -9,13 +9,15 @@\n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n-    Avg, BinaryField, BooleanField, Case, CharField, Count, DateField,\n-    DateTimeField, DecimalField, DurationField, Exists, Expression,\n+    AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n+    DateField, DateTimeField, DecimalField, DurationField, Exists, Expression,\n     ExpressionList, ExpressionWrapper, F, FloatField, Func, IntegerField, Max,\n     Min, Model, OrderBy, OuterRef, Q, StdDev, Subquery, Sum, TimeField,\n     UUIDField, Value, Variance, When,\n )\n-from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n+from django.db.models.expressions import (\n+    Col, Combinable, CombinedExpression, Random, RawSQL, Ref,\n+)\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n )\n@@ -1888,6 +1890,28 @@ def test_reversed_or(self):\n             object() | Combinable()\n \n \n+class CombinedExpressionTests(SimpleTestCase):\n+    def test_resolve_output_field(self):\n+        tests = [\n+            (IntegerField, AutoField, IntegerField),\n+            (AutoField, IntegerField, IntegerField),\n+            (IntegerField, DecimalField, DecimalField),\n+            (DecimalField, IntegerField, DecimalField),\n+            (IntegerField, FloatField, FloatField),\n+            (FloatField, IntegerField, FloatField),\n+        ]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        for lhs, rhs, combined in tests:\n+            for connector in connectors:\n+                with self.subTest(lhs=lhs, connector=connector, rhs=rhs, combined=combined):\n+                    expr = CombinedExpression(\n+                        Expression(lhs()),\n+                        connector,\n+                        Expression(rhs()),\n+                    )\n+                    self.assertIsInstance(expr.output_field, combined)\n+\n+\n class ExpressionWrapperTests(SimpleTestCase):\n     def test_empty_group_by(self):\n         expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n",
  "problem_statement": "Django fails with FieldError: Expression contains mixed types: IntegerField, AutoField. You must set output_field.\nDescription\n\t\nI have the following query.\nexpr = Value(3) * F('id')\t\t\t\t\t\t\t\t\t\t\t\t \no = Model.objects.using('default')\t\t\t\t\t\t\t\t\t\t \nres = o.values('field_name').annotate(expr=expr).values('expr')\nprint(res)\nUnfortunately, this query crashes with a FieldError exception. The track trace is\nTraceback (most recent call last):\n File \"example.py\", line 28, in <module>\n\tprint(res)\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/query.py\", line 287, in __iter__\n\tself._fetch_all()\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/query.py\", line 1316, in _fetch_all\n\tself._result_cache = list(self._iterable_class(self))\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/query.py\", line 111, in __iter__\n\tfor row in compiler.results_iter(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size):\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/sql/compiler.py\", line 1115, in results_iter\n\tresults = self.execute_sql(MULTI, chunked_fetch=chunked_fetch, chunk_size=chunk_size)\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/sql/compiler.py\", line 1147, in execute_sql\n\tsql, params = self.as_sql()\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/sql/compiler.py\", line 498, in as_sql\n\textra_select, order_by, group_by = self.pre_sql_setup()\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/sql/compiler.py\", line 55, in pre_sql_setup\n\tself.setup_query()\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/sql/compiler.py\", line 46, in setup_query\n\tself.select, self.klass_info, self.annotation_col_map = self.get_select()\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/sql/compiler.py\", line 267, in get_select\n\tsql, params = col.select_format(self, sql, params)\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/expressions.py\", line 385, in select_format\n\tif hasattr(self.output_field, 'select_format'):\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/utils/functional.py\", line 48, in __get__\n\tres = instance.__dict__[self.name] = self.func(instance)\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/expressions.py\", line 266, in output_field\n\toutput_field = self._resolve_output_field()\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/expressions.py\", line 463, in _resolve_output_field\n\treturn super()._resolve_output_field()\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/expressions.py\", line 306, in _resolve_output_field\n\tsource.__class__.__name__,\ndjango.core.exceptions.FieldError: Expression contains mixed types: IntegerField, AutoField. You must set output_field.\nThis should be a regression bug because the previous query works in Django 3.1\n",
  "hints_text": "This is likely a regression caused by 1e38f1191de21b6e96736f58df57dfb851a28c1f Stefanos, could you confirm the following patch addresses your issue django/db/models/expressions.py diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py index a9768919a2..90d90119d0 100644 a b class Expression(BaseExpression, Combinable): 421421 422422_connector_combinators = { 423423 connector: [ 424 (fields.IntegerField, fields.IntegerField, fields.IntegerField), 424425 (fields.IntegerField, fields.DecimalField, fields.DecimalField), 425426 (fields.DecimalField, fields.IntegerField, fields.DecimalField), 426427 (fields.IntegerField, fields.FloatField, fields.FloatField),\nI confirmed that it's a regression in 1e38f1191de21b6e96736f58df57dfb851a28c1f.\nStefanos, Would you like to prepare a patch? Simon's proposition works for me.\nYes, that patch fixed the issue. Thanks a lot!\nI also saw this issue in master (I use django-money): django.core.exceptions.FieldError: Expression contains mixed types: MoneyField, IntegerField. You must set output_field. Works fine in 3.1\nI can confirm that the above patch does not fix the issue I have seen. The issue does not occur in the 3.1 release.",
  "created_at": "2020-08-31T02:29:12Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_resolve_output_field (expressions.tests.CombinedExpressionTests)\", \"test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion (expressions.tests.IterableLookupInnerExpressionsTests)\"]",
  "PASS_TO_PASS": "[\"test_optimizations (expressions.tests.ExistsTests)\", \"test_deconstruct (expressions.tests.FTests)\", \"test_deepcopy (expressions.tests.FTests)\", \"test_equal (expressions.tests.FTests)\", \"test_hash (expressions.tests.FTests)\", \"test_not_equal_Value (expressions.tests.FTests)\", \"test_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_non_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_aggregates (expressions.tests.ReprTests)\", \"test_distinct_aggregates (expressions.tests.ReprTests)\", \"test_expressions (expressions.tests.ReprTests)\", \"test_filtered_aggregates (expressions.tests.ReprTests)\", \"test_functions (expressions.tests.ReprTests)\", \"test_and (expressions.tests.CombinableTests)\", \"test_negation (expressions.tests.CombinableTests)\", \"test_or (expressions.tests.CombinableTests)\", \"test_reversed_and (expressions.tests.CombinableTests)\", \"test_reversed_or (expressions.tests.CombinableTests)\", \"test_month_aggregation (expressions.tests.FieldTransformTests)\", \"test_multiple_transforms_in_values (expressions.tests.FieldTransformTests)\", \"test_transform_in_values (expressions.tests.FieldTransformTests)\", \"test_equal (expressions.tests.SimpleExpressionTests)\", \"test_hash (expressions.tests.SimpleExpressionTests)\", \"test_complex_expressions (expressions.tests.ExpressionsNumericTests)\", \"test_fill_with_value_from_same_object (expressions.tests.ExpressionsNumericTests)\", \"test_filter_not_equals_other_field (expressions.tests.ExpressionsNumericTests)\", \"test_increment_value (expressions.tests.ExpressionsNumericTests)\", \"test_F_reuse (expressions.tests.ExpressionsTests)\", \"test_insensitive_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_compile_unresolved (expressions.tests.ValueTests)\", \"test_deconstruct (expressions.tests.ValueTests)\", \"test_deconstruct_output_field (expressions.tests.ValueTests)\", \"test_equal (expressions.tests.ValueTests)\", \"test_equal_output_field (expressions.tests.ValueTests)\", \"test_hash (expressions.tests.ValueTests)\", \"test_raise_empty_expressionlist (expressions.tests.ValueTests)\", \"test_resolve_output_field (expressions.tests.ValueTests)\", \"test_resolve_output_field_failure (expressions.tests.ValueTests)\", \"test_update_TimeField_using_Value (expressions.tests.ValueTests)\", \"test_update_UUIDField_using_Value (expressions.tests.ValueTests)\", \"test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_lefthand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor_null (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_division (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_division (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_righthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_count (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_filter (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_nested_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)\", \"test_arithmetic (expressions.tests.BasicExpressionsTests)\", \"test_boolean_expression_combined (expressions.tests.BasicExpressionsTests)\", \"test_case_in_filter_if_boolean_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exists_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_explicit_output_field (expressions.tests.BasicExpressionsTests)\", \"test_filter_inter_attribute (expressions.tests.BasicExpressionsTests)\", \"test_filter_with_join (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_q_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_rawsql_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_in_subquery (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_nested_outerref_with_function (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_join_outer_ref (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests)\", \"test_new_object_create (expressions.tests.BasicExpressionsTests)\", \"test_new_object_save (expressions.tests.BasicExpressionsTests)\", \"test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_object_update (expressions.tests.BasicExpressionsTests)\", \"test_object_update_fk (expressions.tests.BasicExpressionsTests)\", \"test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests)\", \"test_order_by_exists (expressions.tests.BasicExpressionsTests)\", \"test_order_by_multiline_sql (expressions.tests.BasicExpressionsTests)\", \"test_order_of_operations (expressions.tests.BasicExpressionsTests)\", \"test_outerref (expressions.tests.BasicExpressionsTests)\", \"test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests)\", \"test_outerref_with_operator (expressions.tests.BasicExpressionsTests)\", \"test_parenthesis_priority (expressions.tests.BasicExpressionsTests)\", \"test_pickle_expression (expressions.tests.BasicExpressionsTests)\", \"test_subquery (expressions.tests.BasicExpressionsTests)\", \"test_subquery_eq (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_lazy (expressions.tests.BasicExpressionsTests)\", \"test_subquery_group_by_outerref_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests)\", \"test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests)\", \"test_update (expressions.tests.BasicExpressionsTests)\", \"test_update_inherited_field_value (expressions.tests.BasicExpressionsTests)\", \"test_update_with_fk (expressions.tests.BasicExpressionsTests)\", \"test_update_with_none (expressions.tests.BasicExpressionsTests)\", \"test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests)\", \"test_date_case_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_comparison (expressions.tests.FTimeDeltaTests)\", \"test_date_minus_duration (expressions.tests.FTimeDeltaTests)\", \"test_date_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_delta_add (expressions.tests.FTimeDeltaTests)\", \"test_delta_subtract (expressions.tests.FTimeDeltaTests)\", \"test_delta_update (expressions.tests.FTimeDeltaTests)\", \"test_duration_expressions (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_durationfield_add (expressions.tests.FTimeDeltaTests)\", \"test_exclude (expressions.tests.FTimeDeltaTests)\", \"test_invalid_operator (expressions.tests.FTimeDeltaTests)\", \"test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests)\", \"test_multiple_query_compilation (expressions.tests.FTimeDeltaTests)\", \"test_negative_timedelta_update (expressions.tests.FTimeDeltaTests)\", \"test_query_clone (expressions.tests.FTimeDeltaTests)\", \"test_time_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_time_subtraction (expressions.tests.FTimeDeltaTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.655888",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}