{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-14237",
  "base_commit": "ecea98f9c965fbb25d2dfb1fdc23784364aa5657",
  "patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -19,6 +19,7 @@\n from ..utils import Bunch\n from ..utils import safe_indexing\n from ..utils import _get_column_indices\n+from ..utils import _check_key_type\n from ..utils.metaestimators import _BaseComposition\n from ..utils.validation import check_array, check_is_fitted\n \n@@ -80,6 +81,8 @@ class ColumnTransformer(_BaseComposition, TransformerMixin):\n         By setting ``remainder`` to be an estimator, the remaining\n         non-specified columns will use the ``remainder`` estimator. The\n         estimator must support :term:`fit` and :term:`transform`.\n+        Note that using this feature requires that the DataFrame columns\n+        input at :term:`fit` and :term:`transform` have identical order.\n \n     sparse_threshold : float, default = 0.3\n         If the output of the different transformers contains sparse matrices,\n@@ -303,11 +306,17 @@ def _validate_remainder(self, X):\n                 \"'passthrough', or estimator. '%s' was passed instead\" %\n                 self.remainder)\n \n-        n_columns = X.shape[1]\n+        # Make it possible to check for reordered named columns on transform\n+        if (hasattr(X, 'columns') and\n+                any(_check_key_type(cols, str) for cols in self._columns)):\n+            self._df_columns = X.columns\n+\n+        self._n_features = X.shape[1]\n         cols = []\n         for columns in self._columns:\n             cols.extend(_get_column_indices(X, columns))\n-        remaining_idx = sorted(list(set(range(n_columns)) - set(cols))) or None\n+        remaining_idx = list(set(range(self._n_features)) - set(cols))\n+        remaining_idx = sorted(remaining_idx) or None\n \n         self._remainder = ('remainder', self.remainder, remaining_idx)\n \n@@ -508,8 +517,27 @@ def transform(self, X):\n \n         \"\"\"\n         check_is_fitted(self, 'transformers_')\n-\n         X = _check_X(X)\n+\n+        if self._n_features > X.shape[1]:\n+            raise ValueError('Number of features of the input must be equal '\n+                             'to or greater than that of the fitted '\n+                             'transformer. Transformer n_features is {0} '\n+                             'and input n_features is {1}.'\n+                             .format(self._n_features, X.shape[1]))\n+\n+        # No column reordering allowed for named cols combined with remainder\n+        if (self._remainder[2] is not None and\n+                hasattr(self, '_df_columns') and\n+                hasattr(X, 'columns')):\n+            n_cols_fit = len(self._df_columns)\n+            n_cols_transform = len(X.columns)\n+            if (n_cols_transform >= n_cols_fit and\n+                    any(X.columns[:n_cols_fit] != self._df_columns)):\n+                raise ValueError('Column ordering must be equal for fit '\n+                                 'and for transform when using the '\n+                                 'remainder keyword')\n+\n         Xs = self._fit_transform(X, None, _transform_one, fitted=True)\n         self._validate_output(Xs)\n \n",
  "test_patch": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -492,6 +492,17 @@ def test_column_transformer_invalid_columns(remainder):\n         assert_raise_message(ValueError, \"Specifying the columns\",\n                              ct.fit, X_array)\n \n+    # transformed n_features does not match fitted n_features\n+    col = [0, 1]\n+    ct = ColumnTransformer([('trans', Trans(), col)], remainder=remainder)\n+    ct.fit(X_array)\n+    X_array_more = np.array([[0, 1, 2], [2, 4, 6], [3, 6, 9]]).T\n+    ct.transform(X_array_more)  # Should accept added columns\n+    X_array_fewer = np.array([[0, 1, 2], ]).T\n+    err_msg = 'Number of features'\n+    with pytest.raises(ValueError, match=err_msg):\n+        ct.transform(X_array_fewer)\n+\n \n def test_column_transformer_invalid_transformer():\n \n@@ -1060,3 +1071,40 @@ def test_column_transformer_negative_column_indexes():\n     tf_1 = ColumnTransformer([('ohe', ohe, [-1])], remainder='passthrough')\n     tf_2 = ColumnTransformer([('ohe', ohe,  [2])], remainder='passthrough')\n     assert_array_equal(tf_1.fit_transform(X), tf_2.fit_transform(X))\n+\n+\n+@pytest.mark.parametrize(\"explicit_colname\", ['first', 'second'])\n+def test_column_transformer_reordered_column_names_remainder(explicit_colname):\n+    \"\"\"Regression test for issue #14223: 'Named col indexing fails with\n+       ColumnTransformer remainder on changing DataFrame column ordering'\n+\n+       Should raise error on changed order combined with remainder.\n+       Should allow for added columns in `transform` input DataFrame\n+       as long as all preceding columns match.\n+    \"\"\"\n+    pd = pytest.importorskip('pandas')\n+\n+    X_fit_array = np.array([[0, 1, 2], [2, 4, 6]]).T\n+    X_fit_df = pd.DataFrame(X_fit_array, columns=['first', 'second'])\n+\n+    X_trans_array = np.array([[2, 4, 6], [0, 1, 2]]).T\n+    X_trans_df = pd.DataFrame(X_trans_array, columns=['second', 'first'])\n+\n+    tf = ColumnTransformer([('bycol', Trans(), explicit_colname)],\n+                           remainder=Trans())\n+\n+    tf.fit(X_fit_df)\n+    err_msg = 'Column ordering must be equal'\n+    with pytest.raises(ValueError, match=err_msg):\n+        tf.transform(X_trans_df)\n+\n+    # No error for added columns if ordering is identical\n+    X_extended_df = X_fit_df.copy()\n+    X_extended_df['third'] = [3, 6, 9]\n+    tf.transform(X_extended_df)  # No error should be raised\n+\n+    # No 'columns' AttributeError when transform input is a numpy array\n+    X_array = X_fit_array.copy()\n+    err_msg = 'Specifying the columns'\n+    with pytest.raises(ValueError, match=err_msg):\n+        tf.transform(X_array)\n",
  "problem_statement": "Named col indexing fails with ColumnTransformer remainder on changing DataFrame column ordering\n#### Description\r\nI am using ColumnTransformer to prepare (impute etc.) heterogenous data. I use a DataFrame to have more control on the different (types of) columns by their name.\r\n\r\nI had some really cryptic problems when downstream transformers complained of data of the wrong type, while the ColumnTransformer should have divided them up properly.\r\n\r\nI found out that ColumnTransformer silently passes the wrong columns along as `remainder` when\r\n- specifying columns by name,\r\n- using the `remainder` option, and using\r\n- DataFrames where column ordering can differ between `fit` and `transform`\r\n\r\nIn this case, the wrong columns are passed on to the downstream transformers, as the example demonstrates:\r\n\r\n#### Steps/Code to Reproduce\r\n```python\r\nfrom sklearn.compose import make_column_transformer\r\nfrom sklearn.preprocessing import FunctionTransformer\r\nimport pandas as pd\r\n\r\ndef msg(msg):\r\n  def print_cols(X, y=None):\r\n    print(msg, list(X.columns))\r\n    return X\r\n  return print_cols\r\n\r\nct = make_column_transformer(\r\n  (FunctionTransformer(msg('col a'), validate=False), ['a']),\r\n  remainder=FunctionTransformer(msg('remainder'), validate=False)\r\n)\r\n\r\nfit_df = pd.DataFrame({\r\n  'a': [2,3], \r\n  'b': [4,5]})\r\n\r\nct.fit(fit_df)\r\n\r\n# prints:\r\n# cols a ['a']\r\n# remainder ['b']\r\n\r\ntransform_df = pd.DataFrame({\r\n  'b': [4,5],  # note that column ordering\r\n  'a': [2,3]}) # is the only difference to fit_df\r\n\r\nct.transform(transform_df)\r\n\r\n# prints:\r\n# col a ['a']\r\n# remainder ['a'] <-- Should be ['b']\r\n```\r\n\r\n#### Expected Results\r\nWhen using ColumnTransformer with a DataFrame and specifying columns by name, `remainder` should reference the same columns when fitting and when transforming (['b'] in above example), regardless of the column positions in the data during fitting and transforming.\r\n\r\n#### Actual Results\r\n`remainder` appears to, during fitting, remember remaining named DataFrame columns by their numeric index (not by their names), which (silently) leads to the wrong columns being handled downstream if the transformed DataFrame's column ordering differs from that of the fitted DataFrame.\r\n\r\nPosition in module where the `remainder` index is determined:\r\nhttps://github.com/scikit-learn/scikit-learn/blob/7813f7efb5b2012412888b69e73d76f2df2b50b6/sklearn/compose/_column_transformer.py#L309\r\n\r\nMy current workaround is to not use the `remainder` option but specify all columns by name explicitly.\r\n\r\n#### Versions\r\nSystem:\r\n    python: 3.7.3 (default, Mar 30 2019, 03:44:34)  [Clang 9.1.0 (clang-902.0.39.2)]\r\nexecutable: /Users/asschude/.local/share/virtualenvs/launchpad-mmWds3ry/bin/python\r\n   machine: Darwin-17.7.0-x86_64-i386-64bit\r\n\r\nBLAS:\r\n    macros: NO_ATLAS_INFO=3, HAVE_CBLAS=None\r\n  lib_dirs: \r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 19.1.1\r\nsetuptools: 41.0.1\r\n   sklearn: 0.21.2\r\n     numpy: 1.16.4\r\n     scipy: 1.3.0\r\n    Cython: None\r\n    pandas: 0.24.2\r\n\r\n\n",
  "hints_text": "We have problems with column reordering in all estimators, but this is the only one where we directly support access by name, so I agree this is a priority to fix. I think raising an error if`columns` differs between fit and transform, and 'remainder' is used, would be a reasonable behaviour. Pull request welcome.\nI've marked this to go into 0.20.4, which we hope to release soon to cap off the 0.20.X series. Do other core devs agree?\nGood with me\nGood with me as well.\r\nShould we deprecate changing the column order in ColumnTransformer? It'll be deprecated (or raise an error?) anywhere else in 0.21 I hope.\nI'm currently setting things up locally for contributing a pull request. If it's ok for the core dev team, I would first look into fixing it by remembering the `remainder` transformer's columns as column names (instead of indices) if names are provided. This should in principle fix the issue without needing a column order check (and we would not have to remember the column order somewhere to check it later).\n@schuderer For fixing this issue I think that would be good. I'm just concerned that accepting reordered columns here might lead users to believe we accept reordered columns in other places. In fact, they will provide garbage results everywhere else, and I'm sure that leads to many undiscovered bugs.\r\n\r\nCheers,\r\nAndreas ;)\nI think we would rather start by being conservative (especially as this\nwill inform people that their code previously didn't work), and consider\nextending it later to be more permissive.\n\nThank you both for providing this extra context, now I also better understand the rationale behind what jnothman wrote in the first comment and I agree. I'm currently looking at how/where to cleanly do the suggested check with a ValueError. Hope it's okay if it takes a few days (off-hours) as this is my first contribution to a major open source project, and I'm trying to follow the guidelines to the letter.\r\nEdit: I will also check the code documentation to add that columns have to be in the same order when using `remainder`.\nSome of those letters you're trying to follow may be out of date. We will\nhelp you through the process in any case. A few days is fine. I think if we\ncan squeeze this into patch releases for the 0.20 and 0.21 series this\nmonth that would be excellent.\n",
  "created_at": "2019-07-02T18:11:20Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_columns[drop]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_columns[passthrough]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_reordered_column_names_remainder[first]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_reordered_column_names_remainder[second]\"]",
  "PASS_TO_PASS": "[\"sklearn/compose/tests/test_column_transformer.py::test_column_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_dataframe\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[list-pandas]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[list-numpy]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[bool-pandas]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[bool-numpy]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_array\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_list\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_stacking\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_mixed_cols_sparse\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_threshold\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_error_msg_1D\", \"sklearn/compose/tests/test_column_transformer.py::test_2D_transformer_output\", \"sklearn/compose/tests/test_column_transformer.py::test_2D_transformer_output_pandas\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_pandas\", \"sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_kwargs\", \"sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_set_params\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_named_estimators\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_cloning\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_feature_names\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_special_strings\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key0]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key1]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key2]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key3]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key0]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key1]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key2]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key3]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[pd-index]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key5]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key6]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key7]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key8]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key0]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key1]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key2]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key3]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_remaining_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_drops_all_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_drop_all_sparse_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_set_params_with_remainder\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_estimators\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit-est0-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit-est1-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit-est2-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit-est3-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit-est4-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit-est5-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit-est6-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit_transform-est0-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit_transform-est1-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit_transform-est2-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit_transform-est3-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit_transform-est4-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit_transform-est5-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit_transform-est6-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_estimators_set_params\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_callable_specifier\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_negative_column_indexes\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.003528",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}