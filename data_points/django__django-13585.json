{
  "repo": "django/django",
  "instance_id": "django__django-13585",
  "base_commit": "509d9da26fb92a8d566ec105ff40bb024803ceaa",
  "patch": "diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -1,4 +1,4 @@\n-from datetime import datetime\n+from datetime import datetime, time\n \n from django.conf import settings\n from django.utils.crypto import constant_time_compare, salted_hmac\n@@ -36,6 +36,8 @@ def check_token(self, user, token):\n         # Parse the token\n         try:\n             ts_b36, _ = token.split(\"-\")\n+            # RemovedInDjango40Warning.\n+            legacy_token = len(ts_b36) < 4\n         except ValueError:\n             return False\n \n@@ -55,8 +57,14 @@ def check_token(self, user, token):\n             ):\n                 return False\n \n+        # RemovedInDjango40Warning: convert days to seconds and round to\n+        # midnight (server time) for pre-Django 3.1 tokens.\n+        now = self._now()\n+        if legacy_token:\n+            ts *= 24 * 60 * 60\n+            ts += int((now - datetime.combine(now.date(), time.min)).total_seconds())\n         # Check the timestamp is within limit.\n-        if (self._num_seconds(self._now()) - ts) > settings.PASSWORD_RESET_TIMEOUT:\n+        if (self._num_seconds(now) - ts) > settings.PASSWORD_RESET_TIMEOUT:\n             return False\n \n         return True\n",
  "test_patch": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,4 +1,4 @@\n-from datetime import datetime, timedelta\n+from datetime import date, datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n@@ -86,6 +86,27 @@ def test_timeout(self):\n             )\n             self.assertIs(p4.check_token(user, tk1), False)\n \n+    def test_legacy_days_timeout(self):\n+        # RemovedInDjango40Warning: pre-Django 3.1 tokens will be invalid.\n+        class LegacyPasswordResetTokenGenerator(MockedPasswordResetTokenGenerator):\n+            \"\"\"Pre-Django 3.1 tokens generator.\"\"\"\n+            def _num_seconds(self, dt):\n+                # Pre-Django 3.1 tokens use days instead of seconds.\n+                return (dt.date() - date(2001, 1, 1)).days\n+\n+        user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')\n+        now = datetime.now()\n+        p0 = LegacyPasswordResetTokenGenerator(now)\n+        tk1 = p0.make_token(user)\n+        p1 = MockedPasswordResetTokenGenerator(\n+            now + timedelta(seconds=settings.PASSWORD_RESET_TIMEOUT),\n+        )\n+        self.assertIs(p1.check_token(user, tk1), True)\n+        p2 = MockedPasswordResetTokenGenerator(\n+            now + timedelta(seconds=(settings.PASSWORD_RESET_TIMEOUT + 24 * 60 * 60)),\n+        )\n+        self.assertIs(p2.check_token(user, tk1), False)\n+\n     def test_check_token_with_nonexistent_token_and_user(self):\n         user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')\n         p0 = PasswordResetTokenGenerator()\n",
  "problem_statement": "Password reset token incompatibility.\nDescription\n\t\nAs noted here ​https://docs.djangoproject.com/en/3.1/releases/3.1/#django-contrib-auth the hashing for password reset tokens has changed between 3.0 and 3.1 and work has been done to ensure existing tokens will still work (at least until 4.0).\nHowever the encoding of the token creation time has also changed. Specifically from days since 1/1/01 to seconds since 1/1/01. And it appears no work has been done to support tokens with the older values. So a token generated on Oct 1, 2020 will come through as 7213 days which will then get interpreted as 7213 seconds, aka 2am Jan 1, 2001.\nSo while exiting tokens in the wild will pass crypto validation they will all show as expired if your PASSWORD_RESET_TIMEOUT is less than ~20 years.\nThe code base I'm working on uses these tokens (perhaps unwisely) in some email links that are expected to have a 3 month lifetime and an upgrade from 3.0 to 3.1 looks likely to render all the tokens in the wild expired which is suboptimal.\n",
  "hints_text": "This seems like an oversight. Would it make sense to reinterpret tokens with a timeout less than some small-in-seconds but large-in-days cutoff, such as 3600 * 365, as days instead of seconds?\nWe've been discussing using patchy to do something to that effect. With free code access you can easily tell because the prefix is 3 characters in the old scheme and 6 in the other so you could switch off that. If you were to switch off value anything in the 10k (~27*365) - 600m(~19*365*60*60) range should be a safe cutoff.\nGreat catch, we missed this. However, I'm not sure what we can do, any heuristic will be clunky, IMO. 1 second, 1 day, 300k seconds, or 300k days are all valid.\nIt’s seconds/days since January 2001, so I don’t think it’s clunky... I doubt anyone is running an app with the clock set between 2001 and 2002 for example.\nI think the prefix length might be a better check, it's totally unambiguous\nI think the prefix length might be a better check, it's totally unambiguous Ahh, yes. That's bulletproof, thanks! Regression in 45304e444e0d780ceeb5fc03e6761569dfe17ab2.",
  "created_at": "2020-10-22T07:30:21Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_legacy_days_timeout (auth_tests.test_tokens.TokenGeneratorTest)\"]",
  "PASS_TO_PASS": "[\"test_check_token_with_nonexistent_token_and_user (auth_tests.test_tokens.TokenGeneratorTest)\", \"test_legacy_token_validation (auth_tests.test_tokens.TokenGeneratorTest)\", \"test_make_token (auth_tests.test_tokens.TokenGeneratorTest)\", \"The token is valid after n seconds, but no greater.\", \"test_token_default_hashing_algorithm (auth_tests.test_tokens.TokenGeneratorTest)\", \"Updating the user email address invalidates the token.\", \"test_token_with_different_secret (auth_tests.test_tokens.TokenGeneratorTest)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.662844",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}